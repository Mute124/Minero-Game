<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2throw__allocator_8h_source" xml:lang="en-US">
<title>throw_allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/throw_allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
46 <emphasis role="preprocessor">#ifndef&#32;_THROW_ALLOCATOR_H</emphasis>
47 <emphasis role="preprocessor">#define&#32;_THROW_ALLOCATOR_H&#32;1</emphasis>
48 
49 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
50 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
51 <emphasis role="preprocessor">#include&#32;&lt;map&gt;</emphasis>
52 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
53 <emphasis role="preprocessor">#include&#32;&lt;ostream&gt;</emphasis>
54 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
55 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
56 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
57 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
58 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
59 <emphasis role="preprocessor">#&#32;include&#32;&lt;functional&gt;</emphasis>
60 <emphasis role="preprocessor">#&#32;include&#32;&lt;random&gt;</emphasis>
61 <emphasis role="preprocessor">#else</emphasis>
62 <emphasis role="preprocessor">#&#32;include&#32;&lt;tr1/functional&gt;</emphasis>
63 <emphasis role="preprocessor">#&#32;include&#32;&lt;tr1/random&gt;</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
66 
67 <emphasis role="preprocessor">#if&#32;!__has_builtin(__builtin_sprintf)</emphasis>
68 <emphasis role="preprocessor">#&#32;include&#32;&lt;cstdio&gt;</emphasis>
69 <emphasis role="preprocessor">#endif</emphasis>
70 
71 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
72 {
73 _GLIBCXX_BEGIN_NAMESPACE_VERSION
74 
79 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>forced_error&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classstd_1_1exception">std::exception</link>
80 &#32;&#32;{&#32;};
81 
82 &#32;&#32;<emphasis role="comment">//&#32;Substitute&#32;for&#32;forced_error&#32;object&#32;when&#32;-fno-exceptions.</emphasis>
83 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
84 &#32;&#32;__throw_forced_error()
85 &#32;&#32;{&#32;_GLIBCXX_THROW_OR_ABORT(forced_error());&#32;}
86 
93 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>annotate_base
94 &#32;&#32;{
95 &#32;&#32;<emphasis role="keyword">private</emphasis>:
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;size_t,&#32;size_t&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data_type;
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::map&lt;void*,&#32;data_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;map_alloc_type;
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;map_alloc_type::value_type&#32;&#32;&#32;&#32;&#32;&#32;entry_type;
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;map_alloc_type::const_iterator&#32;&#32;const_iterator;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;map_alloc_type::const_reference&#32;const_reference;
101 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::map&lt;void*,&#32;size_t&gt;&#32;&#32;&#32;&#32;&#32;map_construct_type;
103 <emphasis role="preprocessor">#endif</emphasis>
104 
105 &#32;&#32;<emphasis role="keyword">public</emphasis>:
106 &#32;&#32;&#32;&#32;annotate_base()
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>();
109 &#32;&#32;&#32;&#32;&#32;&#32;map_alloc();
110 &#32;&#32;&#32;&#32;}
111 
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
113 &#32;&#32;&#32;&#32;set_label(<emphasis role="keywordtype">size_t</emphasis>&#32;l)
114 &#32;&#32;&#32;&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>()&#32;=&#32;l;&#32;}
115 
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
117 &#32;&#32;&#32;&#32;get_label()
118 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>();&#32;}
119 
120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
121 &#32;&#32;&#32;&#32;insert(<emphasis role="keywordtype">void</emphasis>*&#32;p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
122 &#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;entry_type&#32;<link linkend="_namespacefind_l_s_b_1a9f3e2ce1c42e4e79e3976f44c44b77f9">entry</link>&#32;=&#32;make_entry(p,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p)
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::insert&#32;null&#32;insert!\n&quot;</emphasis>);
127 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;entry);
128 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
129 &#32;&#32;&#32;&#32;}
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;map_alloc_type::iterator,&#32;bool&gt;&#32;inserted
132 &#32;&#32;&#32;&#32;=&#32;map_alloc().insert(entry);
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!inserted.second)
134 &#32;&#32;&#32;&#32;{
135 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::insert&#32;double&#32;insert!\n&quot;</emphasis>);
136 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;entry);
137 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;*inserted.first);
138 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
139 &#32;&#32;&#32;&#32;}
140 &#32;&#32;&#32;&#32;}
141 
142 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
143 &#32;&#32;&#32;&#32;erase(<emphasis role="keywordtype">void</emphasis>*&#32;p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
144 &#32;&#32;&#32;&#32;{&#32;map_alloc().erase(check_allocated(p,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>));&#32;}
145 
146 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
147 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
148 &#32;&#32;&#32;&#32;insert_construct(<emphasis role="keywordtype">void</emphasis>*&#32;p)
149 &#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p)
151 &#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::insert_construct&#32;null!\n&quot;</emphasis>);
153 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
154 &#32;&#32;&#32;&#32;}
155 
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;inserted&#32;=&#32;map_construct().insert(std::make_pair(p,&#32;get_label()));
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!inserted.second)
158 &#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::insert_construct&#32;double&#32;insert!\n&quot;</emphasis>);
160 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;std::make_pair(p,&#32;get_label()));
161 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;*inserted.first);
162 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
163 &#32;&#32;&#32;&#32;}
164 &#32;&#32;&#32;&#32;}
165 
166 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
167 &#32;&#32;&#32;&#32;erase_construct(<emphasis role="keywordtype">void</emphasis>*&#32;p)
168 &#32;&#32;&#32;&#32;{&#32;map_construct().erase(check_constructed(p));&#32;}
169 <emphasis role="preprocessor">#endif</emphasis>
170 
171 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;if&#32;a&#32;particular&#32;address&#32;and&#32;allocation&#32;size&#32;has&#32;been&#32;saved.</emphasis>
172 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;map_alloc_type::iterator
173 &#32;&#32;&#32;&#32;check_allocated(<emphasis role="keywordtype">void</emphasis>*&#32;p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
174 &#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;map_alloc_type::iterator&#32;found&#32;=&#32;map_alloc().find(p);
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(found&#32;==&#32;map_alloc().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
177 &#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::check_allocated&#32;by&#32;value&#32;&quot;</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;null&#32;erase!\n&quot;</emphasis>);
180 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;make_entry(p,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>));
181 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
182 &#32;&#32;&#32;&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(found-&gt;second.second&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
185 &#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::check_allocated&#32;by&#32;value&#32;&quot;</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;wrong-size&#32;erase!\n&quot;</emphasis>);
188 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;make_entry(p,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>));
189 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;*found);
190 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
191 &#32;&#32;&#32;&#32;}
192 
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;found;
194 &#32;&#32;&#32;&#32;}
195 
196 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;if&#32;a&#32;given&#32;label&#32;has&#32;been&#32;allocated.</emphasis>
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
198 &#32;&#32;&#32;&#32;check(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>)
199 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;found;
201 &#32;&#32;&#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;const_iterator&#32;beg&#32;=&#32;map_alloc().begin();
203 &#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;map_alloc().end();
204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(beg&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
205 &#32;&#32;&#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(beg-&gt;second.first&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>)
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_to_string(found,&#32;*beg);
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++beg;
209 &#32;&#32;&#32;&#32;&#32;&#32;}
210 &#32;&#32;&#32;&#32;&#32;&#32;}
211 
212 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;beg&#32;=&#32;map_construct().begin();
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;map_construct().end();
216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(beg&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
217 &#32;&#32;&#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(beg-&gt;second&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>)
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_to_string(found,&#32;*beg);
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++beg;
221 &#32;&#32;&#32;&#32;&#32;&#32;}
222 &#32;&#32;&#32;&#32;&#32;&#32;}
223 <emphasis role="preprocessor">#endif</emphasis>
224 
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!found.empty())
226 &#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::check&#32;by&#32;label\n&quot;</emphasis>);
228 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>&#32;+=&#32;found;
229 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
230 &#32;&#32;&#32;&#32;}
231 &#32;&#32;&#32;&#32;}
232 
233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;if&#32;there&#32;is&#32;anything&#32;left&#32;allocated&#32;or&#32;constructed.</emphasis>
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
235 &#32;&#32;&#32;&#32;check()
236 &#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;found;
238 &#32;&#32;&#32;&#32;&#32;&#32;{
239 &#32;&#32;&#32;&#32;const_iterator&#32;beg&#32;=&#32;map_alloc().begin();
240 &#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;map_alloc().end();
241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(beg&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
242 &#32;&#32;&#32;&#32;&#32;&#32;{
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_to_string(found,&#32;*beg);
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++beg;
245 &#32;&#32;&#32;&#32;&#32;&#32;}
246 &#32;&#32;&#32;&#32;&#32;&#32;}
247 
248 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
249 &#32;&#32;&#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;beg&#32;=&#32;map_construct().begin();
251 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;map_construct().end();
252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(beg&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
253 &#32;&#32;&#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_to_string(found,&#32;*beg);
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++beg;
256 &#32;&#32;&#32;&#32;&#32;&#32;}
257 &#32;&#32;&#32;&#32;&#32;&#32;}
258 <emphasis role="preprocessor">#endif</emphasis>
259 
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!found.empty())
261 &#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::check&#32;\n&quot;</emphasis>);
263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>&#32;+=&#32;found;
264 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
265 &#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;}
267 
268 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;map_construct_type::iterator
270 &#32;&#32;&#32;&#32;check_constructed(<emphasis role="keywordtype">void</emphasis>*&#32;p)
271 &#32;&#32;&#32;&#32;{
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;found&#32;=&#32;map_construct().find(p);
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(found&#32;==&#32;map_construct().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
274 &#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::check_constructed&#32;not&#32;&quot;</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;constructed!\n&quot;</emphasis>);
277 &#32;&#32;&#32;&#32;&#32;&#32;log_to_string(error,&#32;std::make_pair(p,&#32;get_label()));
278 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
279 &#32;&#32;&#32;&#32;}
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;found;
282 &#32;&#32;&#32;&#32;}
283 
284 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
285 &#32;&#32;&#32;&#32;check_constructed(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>)
286 &#32;&#32;&#32;&#32;{
287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;beg&#32;=&#32;map_construct().begin();
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;map_construct().end();
289 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;found;
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(beg&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>)
291 &#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(beg-&gt;second&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>)
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;log_to_string(found,&#32;*beg);
294 &#32;&#32;&#32;&#32;&#32;&#32;++beg;
295 &#32;&#32;&#32;&#32;}
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!found.empty())
298 &#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>(<emphasis role="stringliteral">&quot;annotate_base::check_constructed&#32;by&#32;label\n&quot;</emphasis>);
300 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>&#32;+=&#32;found;
301 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>.c_str());
302 &#32;&#32;&#32;&#32;}
303 &#32;&#32;&#32;&#32;}
304 <emphasis role="preprocessor">#endif</emphasis>
305 
306 &#32;&#32;<emphasis role="keyword">private</emphasis>:
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;
308 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;annotate_base&amp;);
309 
310 &#32;&#32;&#32;&#32;entry_type
311 &#32;&#32;&#32;&#32;make_entry(<emphasis role="keywordtype">void</emphasis>*&#32;p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
312 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(p,&#32;data_type(get_label(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>));&#32;}
313 
314 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
315 &#32;&#32;&#32;&#32;log_to_string(std::string&amp;&#32;s,&#32;const_reference&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>)
316 &#32;&#32;&#32;&#32;{
317 <emphasis role="preprocessor">#if&#32;!&#32;__has_builtin(__builtin_sprintf)</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;__typeof__(&amp;std::sprintf)&#32;__builtin_sprintf&#32;=&#32;&amp;std::sprintf;
319 <emphasis role="preprocessor">#endif</emphasis>
320 
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[40];
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;tab(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
323 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<emphasis role="stringliteral">&quot;label:&#32;&quot;</emphasis>;
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;l&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.second.first);
325 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_sprintf(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="stringliteral">&quot;%lu&quot;</emphasis>,&#32;l);
326 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>;
327 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;tab;
328 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<emphasis role="stringliteral">&quot;size:&#32;&quot;</emphasis>;
329 &#32;&#32;&#32;&#32;&#32;&#32;l&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.second.second);
330 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_sprintf(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="stringliteral">&quot;%lu&quot;</emphasis>,&#32;l);
331 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>;
332 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;tab;
333 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<emphasis role="stringliteral">&quot;address:&#32;&quot;</emphasis>;
334 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_sprintf(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="stringliteral">&quot;%p&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.first);
335 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>;
336 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
337 &#32;&#32;&#32;&#32;}
338 
339 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
340 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
341 &#32;&#32;&#32;&#32;log_to_string(std::string&amp;&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const&#32;void*,&#32;size_t&gt;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>)
342 &#32;&#32;&#32;&#32;{
343 <emphasis role="preprocessor">#if&#32;!&#32;__has_builtin(__builtin_sprintf)</emphasis>
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__builtin_sprintf&#32;=&#32;&amp;std::sprintf;
345 <emphasis role="preprocessor">#endif</emphasis>
346 
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[40];
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;tab(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
349 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<emphasis role="stringliteral">&quot;label:&#32;&quot;</emphasis>;
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;l&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.second);
351 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_sprintf(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="stringliteral">&quot;%lu&quot;</emphasis>,&#32;l);
352 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>;
353 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;tab;
354 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<emphasis role="stringliteral">&quot;address:&#32;&quot;</emphasis>;
355 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_sprintf(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="stringliteral">&quot;%p&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>.first);
356 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>;
357 &#32;&#32;&#32;&#32;&#32;&#32;s&#32;+=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>;
358 &#32;&#32;&#32;&#32;}
359 <emphasis role="preprocessor">#endif</emphasis>
360 
361 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;
362 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a9371a1f53f8067997cd15aaf657c62d0">label</link>()
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_label(std::numeric_limits&lt;size_t&gt;::max());
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_label;
366 &#32;&#32;&#32;&#32;}
367 
368 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;map_alloc_type&amp;
369 &#32;&#32;&#32;&#32;map_alloc()
370 &#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;map_alloc_type&#32;_S_map;
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_map;
373 &#32;&#32;&#32;&#32;}
374 
375 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
376 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;map_construct_type&amp;
377 &#32;&#32;&#32;&#32;map_construct()
378 &#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;map_construct_type&#32;_S_map;
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_map;
381 &#32;&#32;&#32;&#32;}
382 <emphasis role="preprocessor">#endif</emphasis>
383 &#32;&#32;};
384 
385 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::ostream&amp;
386 &#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;annotate_base&amp;&#32;__b)
387 &#32;&#32;{
388 &#32;&#32;&#32;&#32;std::string&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>;
389 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;annotate_base&#32;base_type;
390 &#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;base_type::const_iterator&#32;beg&#32;=&#32;__b.map_alloc().begin();
392 &#32;&#32;&#32;&#32;&#32;&#32;base_type::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;__b.map_alloc().end();
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;beg&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;++beg)
394 &#32;&#32;&#32;&#32;__b.log_to_string(error,&#32;*beg);
395 &#32;&#32;&#32;&#32;}
396 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
397 &#32;&#32;&#32;&#32;{
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;beg&#32;=&#32;__b.map_construct().begin();
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;__b.map_construct().end();
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;beg&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;++beg)
401 &#32;&#32;&#32;&#32;__b.log_to_string(error,&#32;*beg);&#32;&#32;&#32;&#32;&#32;&#32;
402 &#32;&#32;&#32;&#32;}
403 <emphasis role="preprocessor">#endif</emphasis>
404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;os&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__bit__count_8cpp_1ab34dedbf30a51859090cbab92fa60edb">error</link>;
405 &#32;&#32;}
406 
407 
414 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>condition_base
415 &#32;&#32;{
416 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
417 &#32;&#32;&#32;&#32;condition_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
418 &#32;&#32;&#32;&#32;condition_base(<emphasis role="keyword">const</emphasis>&#32;condition_base&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
419 &#32;&#32;&#32;&#32;condition_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;condition_base&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
420 <emphasis role="preprocessor">#endif</emphasis>
421 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~condition_base()&#32;{&#32;};
422 &#32;&#32;};
423 
424 
428 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>limit_condition&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;condition_base
429 &#32;&#32;{
430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scope-level&#32;adjustor&#32;objects:&#32;set&#32;limit&#32;for&#32;throw&#32;at&#32;the</emphasis>
431 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;beginning&#32;of&#32;a&#32;scope&#32;block,&#32;and&#32;restores&#32;to&#32;previous&#32;limit&#32;when</emphasis>
432 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;object&#32;is&#32;destroyed&#32;on&#32;exiting&#32;the&#32;block.</emphasis>
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>adjustor_base
434 &#32;&#32;&#32;&#32;{
435 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_orig;
437 
438 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
439 &#32;&#32;&#32;&#32;&#32;&#32;adjustor_base()&#32;:&#32;_M_orig(limit())&#32;{&#32;}
440 
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
442 &#32;&#32;&#32;&#32;&#32;&#32;~adjustor_base()&#32;{&#32;set_limit(_M_orig);&#32;}
443 &#32;&#32;&#32;&#32;};
444 
446 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>never_adjustor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;adjustor_base
447 &#32;&#32;&#32;&#32;{
448 &#32;&#32;&#32;&#32;&#32;&#32;never_adjustor()&#32;{&#32;set_limit(std::numeric_limits&lt;size_t&gt;::max());&#32;}
449 &#32;&#32;&#32;&#32;};
450 
452 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>always_adjustor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;adjustor_base
453 &#32;&#32;&#32;&#32;{
454 &#32;&#32;&#32;&#32;&#32;&#32;always_adjustor()&#32;{&#32;set_limit(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>());&#32;}
455 &#32;&#32;&#32;&#32;};
456 
458 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>limit_adjustor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;adjustor_base
459 &#32;&#32;&#32;&#32;{
460 &#32;&#32;&#32;&#32;&#32;&#32;limit_adjustor(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__l)&#32;{&#32;set_limit(__l);&#32;}
461 &#32;&#32;&#32;&#32;};
462 
463 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Increment&#32;_S_count&#32;every&#32;time&#32;called.</emphasis>
464 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;_S_count&#32;matches&#32;the&#32;limit&#32;count,&#32;throw.</emphasis>
465 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
466 &#32;&#32;&#32;&#32;throw_conditionally()
467 &#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;==&#32;limit())
469 &#32;&#32;&#32;&#32;__throw_forced_error();
470 &#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>();
471 &#32;&#32;&#32;&#32;}
472 
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;
474 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()
475 &#32;&#32;&#32;&#32;{
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_count(0);
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_count;
478 &#32;&#32;&#32;&#32;}
479 
480 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;
481 &#32;&#32;&#32;&#32;limit()
482 &#32;&#32;&#32;&#32;{
483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_limit(std::numeric_limits&lt;size_t&gt;::max());
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_limit;
485 &#32;&#32;&#32;&#32;}
486 
487 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Zero&#32;the&#32;throw&#32;counter,&#32;set&#32;limit&#32;to&#32;argument.</emphasis>
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
489 &#32;&#32;&#32;&#32;set_limit(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__l)
490 &#32;&#32;&#32;&#32;{
491 &#32;&#32;&#32;&#32;&#32;&#32;limit()&#32;=&#32;__l;
492 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;=&#32;0;
493 &#32;&#32;&#32;&#32;}
494 &#32;&#32;};
495 
496 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
500 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>random_condition&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;condition_base
501 &#32;&#32;{
502 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scope-level&#32;adjustor&#32;objects:&#32;set&#32;probability&#32;for&#32;throw&#32;at&#32;the</emphasis>
503 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;beginning&#32;of&#32;a&#32;scope&#32;block,&#32;and&#32;restores&#32;to&#32;previous</emphasis>
504 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;probability&#32;when&#32;object&#32;is&#32;destroyed&#32;on&#32;exiting&#32;the&#32;block.</emphasis>
505 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>adjustor_base
506 &#32;&#32;&#32;&#32;{
507 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;_M_orig;
509 
510 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
511 &#32;&#32;&#32;&#32;&#32;&#32;adjustor_base()&#32;:&#32;_M_orig(probability())&#32;{&#32;}
512 
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~adjustor_base()
514 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;set_probability(_M_orig);&#32;}
515 &#32;&#32;&#32;&#32;};
516 
518 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>group_adjustor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;adjustor_base
519 &#32;&#32;&#32;&#32;{
520 &#32;&#32;&#32;&#32;&#32;&#32;group_adjustor(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)
521 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;set_probability(1&#32;-&#32;std::pow(<emphasis role="keywordtype">double</emphasis>(1&#32;-&#32;probability()),
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>(0.5&#32;/&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;+&#32;1))));
523 &#32;&#32;&#32;&#32;&#32;&#32;}
524 &#32;&#32;&#32;&#32;};
525 
527 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>never_adjustor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;adjustor_base
528 &#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;never_adjustor()&#32;{&#32;set_probability(0);&#32;}
530 &#32;&#32;&#32;&#32;};
531 
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>always_adjustor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;adjustor_base
534 &#32;&#32;&#32;&#32;{
535 &#32;&#32;&#32;&#32;&#32;&#32;always_adjustor()&#32;{&#32;set_probability(1);&#32;}
536 &#32;&#32;&#32;&#32;};
537 
538 &#32;&#32;&#32;&#32;random_condition()
539 &#32;&#32;&#32;&#32;{
540 &#32;&#32;&#32;&#32;&#32;&#32;probability();
541 &#32;&#32;&#32;&#32;&#32;&#32;engine();
542 &#32;&#32;&#32;&#32;}
543 
544 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
545 &#32;&#32;&#32;&#32;set_probability(<emphasis role="keywordtype">double</emphasis>&#32;__p)
546 &#32;&#32;&#32;&#32;{&#32;probability()&#32;=&#32;__p;&#32;}
547 
548 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
549 &#32;&#32;&#32;&#32;throw_conditionally()
550 &#32;&#32;&#32;&#32;{
551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">generate</link>()&#32;&lt;&#32;probability())
552 &#32;&#32;&#32;&#32;__throw_forced_error();
553 &#32;&#32;&#32;&#32;}
554 
555 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
556 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1a9e3785d770073a52c90f475365f49542">seed</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__s)
557 &#32;&#32;&#32;&#32;{&#32;engine().seed(__s);&#32;}
558 
559 &#32;&#32;<emphasis role="keyword">private</emphasis>:
560 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::uniform_real_distribution&lt;double&gt;&#32;&#32;distribution_type;
562 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::mt19937&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;engine_type;
563 <emphasis role="preprocessor">#else</emphasis>
564 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::tr1::uniform_real&lt;double&gt;&#32;&#32;&#32;&#32;&#32;&#32;distribution_type;
565 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::tr1::mt19937&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;engine_type;
566 <emphasis role="preprocessor">#endif</emphasis>
567 
568 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>
569 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">generate</link>()
570 &#32;&#32;&#32;&#32;{
571 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;distribution_type&#32;distribution(0,&#32;1);
573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;generator&#32;=&#32;std::bind(distribution,&#32;engine());
574 <emphasis role="preprocessor">#else</emphasis>
575 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;variate_generator&#32;to&#32;get&#32;normalized&#32;results.</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::tr1::variate_generator&lt;engine_type,&#32;distribution_type&gt;&#32;gen_t;
577 &#32;&#32;&#32;&#32;&#32;&#32;distribution_type&#32;distribution(0,&#32;1);
578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;gen_t&#32;generator(engine(),&#32;distribution);
579 <emphasis role="preprocessor">#endif</emphasis>
580 
581 <emphasis role="preprocessor">#if&#32;!&#32;__has_builtin(__builtin_sprintf)</emphasis>
582 &#32;&#32;&#32;&#32;&#32;&#32;__typeof__(&amp;std::sprintf)&#32;__builtin_sprintf&#32;=&#32;&amp;std::sprintf;
583 <emphasis role="preprocessor">#endif</emphasis>
584 
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_namespacerandom">random</link>&#32;=&#32;generator();
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespacerandom">random</link>&#32;&lt;&#32;distribution.min()&#32;||&#32;<link linkend="_namespacerandom">random</link>&#32;&gt;&#32;distribution.max())
587 &#32;&#32;&#32;&#32;{
588 &#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;__s(<emphasis role="stringliteral">&quot;random_condition::generate&quot;</emphasis>);
589 &#32;&#32;&#32;&#32;&#32;&#32;__s&#32;+=&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
590 &#32;&#32;&#32;&#32;&#32;&#32;__s&#32;+=&#32;<emphasis role="stringliteral">&quot;random&#32;number&#32;generated&#32;is:&#32;&quot;</emphasis>;
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>[40];
592 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_sprintf(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>,&#32;<emphasis role="stringliteral">&quot;%f&quot;</emphasis>,&#32;<link linkend="_namespacerandom">random</link>);
593 &#32;&#32;&#32;&#32;&#32;&#32;__s&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ad8a8baf08bc0399738960c9259571911">buf</link>;
594 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_out_of_range(__s.c_str());
595 &#32;&#32;&#32;&#32;}
596 
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacerandom">random</link>;
598 &#32;&#32;&#32;&#32;}
599 
600 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;
601 &#32;&#32;&#32;&#32;probability()
602 &#32;&#32;&#32;&#32;{
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;_S_p;
604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_p;
605 &#32;&#32;&#32;&#32;}
606 
607 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;engine_type&amp;
608 &#32;&#32;&#32;&#32;engine()
609 &#32;&#32;&#32;&#32;{
610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;engine_type&#32;_S_e;
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_e;
612 &#32;&#32;&#32;&#32;}
613 &#32;&#32;};
614 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
615 
622 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
623 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>throw_value_base&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Cond
624 &#32;&#32;&#32;&#32;{
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Cond&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;condition_type;
626 
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>condition_type::throw_conditionally;
628 
629 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_i;
630 
631 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_IS_AGGREGATE</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;throw_value_base()&#32;:&#32;_M_i(0)
633 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;throw_conditionally();&#32;}
634 
635 &#32;&#32;&#32;&#32;&#32;&#32;throw_value_base(<emphasis role="keyword">const</emphasis>&#32;throw_value_base&amp;&#32;__v)&#32;:&#32;_M_i(__v._M_i)
636 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;throw_conditionally();&#32;}
637 
638 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shall&#32;not&#32;throw.</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;throw_value_base(throw_value_base&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
641 <emphasis role="preprocessor">#endif</emphasis>
642 
643 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;throw_value_base(<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__i)&#32;:&#32;_M_i(__i)
644 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;throw_conditionally();&#32;}
645 <emphasis role="preprocessor">#endif</emphasis>
646 
647 &#32;&#32;&#32;&#32;&#32;&#32;throw_value_base&amp;
648 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;throw_value_base&amp;&#32;__v)
649 &#32;&#32;&#32;&#32;&#32;&#32;{
650 &#32;&#32;&#32;&#32;throw_conditionally();
651 &#32;&#32;&#32;&#32;_M_i&#32;=&#32;__v._M_i;
652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
653 &#32;&#32;&#32;&#32;&#32;&#32;}
654 
655 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shall&#32;not&#32;throw.</emphasis>
657 &#32;&#32;&#32;&#32;&#32;&#32;throw_value_base&amp;
658 &#32;&#32;&#32;&#32;&#32;&#32;operator=(throw_value_base&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
659 <emphasis role="preprocessor">#endif</emphasis>
660 
661 &#32;&#32;&#32;&#32;&#32;&#32;throw_value_base&amp;
662 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
663 &#32;&#32;&#32;&#32;&#32;&#32;{
664 &#32;&#32;&#32;&#32;throw_conditionally();
665 &#32;&#32;&#32;&#32;++_M_i;
666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
667 &#32;&#32;&#32;&#32;&#32;&#32;}
668 &#32;&#32;&#32;&#32;};
669 
670 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
671 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
672 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(throw_value_base&lt;_Cond&gt;&amp;&#32;__a,&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__b)
673 &#32;&#32;&#32;&#32;{
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;_Cond&gt;&#32;throw_value;
675 &#32;&#32;&#32;&#32;&#32;&#32;throw_value::throw_conditionally();
676 &#32;&#32;&#32;&#32;&#32;&#32;throw_value&#32;orig(__a);
677 &#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;__b;
678 &#32;&#32;&#32;&#32;&#32;&#32;__b&#32;=&#32;orig;
679 &#32;&#32;&#32;&#32;}
680 
681 &#32;&#32;<emphasis role="comment">//&#32;General&#32;instantiable&#32;types&#32;requirements.</emphasis>
682 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
683 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
684 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__a,
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__b)
686 &#32;&#32;&#32;&#32;{
687 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;_Cond&gt;&#32;throw_value;
688 &#32;&#32;&#32;&#32;&#32;&#32;throw_value::throw_conditionally();
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ret&#32;=&#32;__a._M_i&#32;==&#32;__b._M_i;
690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
691 &#32;&#32;&#32;&#32;}
692 
693 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
694 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
695 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__a,
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__b)
697 &#32;&#32;&#32;&#32;{
698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;_Cond&gt;&#32;throw_value;
699 &#32;&#32;&#32;&#32;&#32;&#32;throw_value::throw_conditionally();
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ret&#32;=&#32;__a._M_i&#32;&lt;&#32;__b._M_i;
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
702 &#32;&#32;&#32;&#32;}
703 
704 &#32;&#32;<emphasis role="comment">//&#32;Numeric&#32;algorithms&#32;instantiable&#32;types&#32;requirements.</emphasis>
705 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
706 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;throw_value_base&lt;_Cond&gt;
707 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__a,
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__b)
709 &#32;&#32;&#32;&#32;{
710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;_Cond&gt;&#32;throw_value;
711 &#32;&#32;&#32;&#32;&#32;&#32;throw_value::throw_conditionally();
712 &#32;&#32;&#32;&#32;&#32;&#32;throw_value&#32;__ret(__a._M_i&#32;+&#32;__b._M_i);
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
714 &#32;&#32;&#32;&#32;}
715 
716 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
717 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;throw_value_base&lt;_Cond&gt;
718 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__a,
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__b)
720 &#32;&#32;&#32;&#32;{
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;_Cond&gt;&#32;throw_value;
722 &#32;&#32;&#32;&#32;&#32;&#32;throw_value::throw_conditionally();
723 &#32;&#32;&#32;&#32;&#32;&#32;throw_value&#32;__ret(__a._M_i&#32;-&#32;__b._M_i);
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
725 &#32;&#32;&#32;&#32;}
726 
727 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
728 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;throw_value_base&lt;_Cond&gt;
729 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>(<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__a,
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;throw_value_base&lt;_Cond&gt;&amp;&#32;__b)
731 &#32;&#32;&#32;&#32;{
732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;_Cond&gt;&#32;throw_value;
733 &#32;&#32;&#32;&#32;&#32;&#32;throw_value::throw_conditionally();
734 &#32;&#32;&#32;&#32;&#32;&#32;throw_value&#32;__ret(__a._M_i&#32;*&#32;__b._M_i);
735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
736 &#32;&#32;&#32;&#32;}
737 
738 
740 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>throw_value_limit&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;throw_value_base&lt;limit_condition&gt;
741 &#32;&#32;{
742 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;limit_condition&gt;&#32;base_type;
743 
744 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_IS_AGGREGATE</emphasis>
745 &#32;&#32;&#32;&#32;throw_value_limit()&#32;{&#32;}
746 
747 &#32;&#32;&#32;&#32;throw_value_limit(<emphasis role="keyword">const</emphasis>&#32;throw_value_limit&amp;&#32;__other)
748 &#32;&#32;&#32;&#32;:&#32;base_type(__other._M_i)&#32;{&#32;}
749 
750 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
751 &#32;&#32;&#32;&#32;throw_value_limit(throw_value_limit&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
752 <emphasis role="preprocessor">#endif</emphasis>
753 
754 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;throw_value_limit(<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__i)&#32;:&#32;base_type(__i)&#32;{&#32;}
755 <emphasis role="preprocessor">#endif</emphasis>
756 
757 &#32;&#32;&#32;&#32;throw_value_limit&amp;
758 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;throw_value_limit&amp;&#32;__other)
759 &#32;&#32;&#32;&#32;{
760 &#32;&#32;&#32;&#32;&#32;&#32;base_type::operator=(__other);
761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
762 &#32;&#32;&#32;&#32;}
763 
764 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
765 &#32;&#32;&#32;&#32;throw_value_limit&amp;
766 &#32;&#32;&#32;&#32;operator=(throw_value_limit&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
767 <emphasis role="preprocessor">#endif</emphasis>
768 &#32;&#32;};
769 
770 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
772 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>throw_value_random&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;throw_value_base&lt;random_condition&gt;
773 &#32;&#32;{
774 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_value_base&lt;random_condition&gt;&#32;base_type;
775 
776 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_IS_AGGREGATE</emphasis>
777 &#32;&#32;&#32;&#32;throw_value_random()&#32;{&#32;}
778 
779 &#32;&#32;&#32;&#32;throw_value_random(<emphasis role="keyword">const</emphasis>&#32;throw_value_random&amp;&#32;__other)
780 &#32;&#32;&#32;&#32;:&#32;base_type(__other._M_i)&#32;{&#32;}
781 
782 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
783 &#32;&#32;&#32;&#32;throw_value_random(throw_value_random&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
784 <emphasis role="preprocessor">#endif</emphasis>
785 
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;throw_value_random(<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__i)&#32;:&#32;base_type(__i)&#32;{&#32;}
787 <emphasis role="preprocessor">#endif</emphasis>
788 
789 &#32;&#32;&#32;&#32;throw_value_random&amp;
790 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;throw_value_random&amp;&#32;__other)
791 &#32;&#32;&#32;&#32;{
792 &#32;&#32;&#32;&#32;&#32;&#32;base_type::operator=(__other);
793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
794 &#32;&#32;&#32;&#32;}
795 
796 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
797 &#32;&#32;&#32;&#32;throw_value_random&amp;
798 &#32;&#32;&#32;&#32;operator=(throw_value_random&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
799 <emphasis role="preprocessor">#endif</emphasis>
800 &#32;&#32;};
801 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
802 
810 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
811 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>throw_allocator_base
812 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;annotate_base,&#32;<emphasis role="keyword">public</emphasis>&#32;_Cond
813 &#32;&#32;&#32;&#32;{
814 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
821 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
822 
823 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
824 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2103.&#32;std::allocator&#32;propagate_on_container_move_assignment</emphasis>
826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::true_type&#32;propagate_on_container_move_assignment;
827 <emphasis role="preprocessor">#endif</emphasis>
828 
829 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Cond&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;condition_type;
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;std::allocator&lt;value_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocator;
833 
834 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;std::allocator&lt;value_type&gt;&#32;&gt;&#32;traits;
835 
836 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>condition_type::throw_conditionally;
837 
838 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
839 &#32;&#32;&#32;&#32;&#32;&#32;size_type
840 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT
841 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;traits::max_size(_M_allocator);&#32;}
842 
843 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
844 &#32;&#32;&#32;&#32;&#32;&#32;address(reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
845 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
846 
847 &#32;&#32;&#32;&#32;&#32;&#32;const_pointer
848 &#32;&#32;&#32;&#32;&#32;&#32;address(const_reference&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
849 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__x);&#32;}
850 
851 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
852 &#32;&#32;&#32;&#32;&#32;&#32;allocate(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;hint&#32;=&#32;0)
853 &#32;&#32;&#32;&#32;&#32;&#32;{
854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;this-&gt;max_size())
855 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_bad_alloc();
856 
857 &#32;&#32;&#32;&#32;throw_conditionally();
858 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;=&#32;traits::allocate(_M_allocator,&#32;__n,&#32;hint);
859 &#32;&#32;&#32;&#32;insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(value_type)&#32;*&#32;__n);
860 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>;
861 &#32;&#32;&#32;&#32;&#32;&#32;}
862 
863 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;construct(_Up*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
867 &#32;&#32;&#32;&#32;{
868 &#32;&#32;&#32;&#32;&#32;&#32;traits::construct(_M_allocator,&#32;__p,&#32;std::forward&lt;_Args&gt;(__args)...);
869 &#32;&#32;&#32;&#32;&#32;&#32;insert_construct(__p);
870 &#32;&#32;&#32;&#32;}
871 
872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_Up*&#32;__p)
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
876 &#32;&#32;&#32;&#32;&#32;&#32;erase_construct(__p);
877 &#32;&#32;&#32;&#32;&#32;&#32;traits::destroy(_M_allocator,&#32;__p);
878 &#32;&#32;&#32;&#32;}
879 <emphasis role="preprocessor">#else</emphasis>
880 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
881 &#32;&#32;&#32;&#32;&#32;&#32;construct(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
882 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_allocator.construct(__p,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);&#32;}
883 
884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
885 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)
886 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_allocator.destroy(__p);&#32;}
887 <emphasis role="preprocessor">#endif</emphasis>
888 
889 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
890 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
891 &#32;&#32;&#32;&#32;&#32;&#32;{
892 &#32;&#32;&#32;&#32;erase(__p,&#32;<emphasis role="keyword">sizeof</emphasis>(value_type)&#32;*&#32;__n);
893 &#32;&#32;&#32;&#32;_M_allocator.deallocate(__p,&#32;__n);
894 &#32;&#32;&#32;&#32;&#32;&#32;}
895 
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
897 &#32;&#32;&#32;&#32;&#32;&#32;check_allocated(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
898 &#32;&#32;&#32;&#32;&#32;&#32;{
899 &#32;&#32;&#32;&#32;size_type&#32;__t&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(value_type)&#32;*&#32;__n;
900 &#32;&#32;&#32;&#32;annotate_base::check_allocated(__p,&#32;__t);
901 &#32;&#32;&#32;&#32;&#32;&#32;}
902 
903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
904 &#32;&#32;&#32;&#32;&#32;&#32;check(size_type&#32;__n)
905 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;annotate_base::check(__n);&#32;}
906 &#32;&#32;};
907 
908 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
909 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
910 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_base&lt;_Tp,&#32;_Cond&gt;&amp;,
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;throw_allocator_base&lt;_Tp,&#32;_Cond&gt;&amp;)
912 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
913 
914 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
915 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cond&gt;
916 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
917 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_base&lt;_Tp,&#32;_Cond&gt;&amp;,
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;throw_allocator_base&lt;_Tp,&#32;_Cond&gt;&amp;)
919 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
920 <emphasis role="preprocessor">#endif</emphasis>
921 
923 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
924 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>throw_allocator_limit
925 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;throw_allocator_base&lt;_Tp,&#32;limit_condition&gt;
926 &#32;&#32;&#32;&#32;{
927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
928 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
929 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_allocator_limit&lt;_Tp1&gt;&#32;other;&#32;};
930 
931 &#32;&#32;&#32;&#32;&#32;&#32;throw_allocator_limit()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
932 
933 &#32;&#32;&#32;&#32;&#32;&#32;throw_allocator_limit(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_limit&amp;)
934 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
935 
936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
937 &#32;&#32;&#32;&#32;throw_allocator_limit(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_limit&lt;_Tp1&gt;&amp;)
938 &#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
939 
940 &#32;&#32;&#32;&#32;&#32;&#32;~throw_allocator_limit()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
941 
942 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
943 &#32;&#32;&#32;&#32;&#32;&#32;throw_allocator_limit&amp;
944 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_limit&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
945 <emphasis role="preprocessor">#endif</emphasis>
946 &#32;&#32;&#32;&#32;};
947 
948 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
950 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
951 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>throw_allocator_random
952 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;throw_allocator_base&lt;_Tp,&#32;random_condition&gt;
953 &#32;&#32;&#32;&#32;{
954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
955 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
956 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;throw_allocator_random&lt;_Tp1&gt;&#32;other;&#32;};
957 
958 &#32;&#32;&#32;&#32;&#32;&#32;throw_allocator_random()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
959 
960 &#32;&#32;&#32;&#32;&#32;&#32;throw_allocator_random(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_random&amp;)
961 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
962 
963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
964 &#32;&#32;&#32;&#32;throw_allocator_random(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_random&lt;_Tp1&gt;&amp;)
965 &#32;&#32;&#32;&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
966 
967 &#32;&#32;&#32;&#32;&#32;&#32;~throw_allocator_random()&#32;_GLIBCXX_USE_NOEXCEPT&#32;{&#32;}
968 
969 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
970 &#32;&#32;&#32;&#32;&#32;&#32;throw_allocator_random&amp;
971 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;throw_allocator_random&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
972 <emphasis role="preprocessor">#endif</emphasis>
973 &#32;&#32;&#32;&#32;};
974 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
975 
976 _GLIBCXX_END_NAMESPACE_VERSION
977 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
978 
979 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
980 
981 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/functional_hash.h&gt;</emphasis>
982 
983 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
984 {
985 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
986 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
987 
989 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
990 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::throw_value_limit&gt;
991 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::unary_function&lt;__gnu_cxx::throw_value_limit,&#32;size_t&gt;
992 &#32;&#32;&#32;&#32;{
993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
994 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;__gnu_cxx::throw_value_limit&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)<emphasis role="keyword">&#32;const</emphasis>
995 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
996 &#32;&#32;&#32;&#32;__gnu_cxx::throw_value_limit::throw_conditionally();
997 &#32;&#32;&#32;&#32;std::hash&lt;std::size_t&gt;&#32;__h;
998 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__result&#32;=&#32;__h(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>._M_i);
999 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1000 &#32;&#32;&#32;&#32;&#32;&#32;}
1001 &#32;&#32;&#32;&#32;};
1002 
1003 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
1005 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1006 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::throw_value_random&gt;
1007 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::unary_function&lt;__gnu_cxx::throw_value_random,&#32;size_t&gt;
1008 &#32;&#32;&#32;&#32;{
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
1010 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;__gnu_cxx::throw_value_random&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)<emphasis role="keyword">&#32;const</emphasis>
1011 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1012 &#32;&#32;&#32;&#32;__gnu_cxx::throw_value_random::throw_conditionally();
1013 &#32;&#32;&#32;&#32;std::hash&lt;std::size_t&gt;&#32;__h;
1014 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__result&#32;=&#32;__h(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>._M_i);
1015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1016 &#32;&#32;&#32;&#32;&#32;&#32;}
1017 &#32;&#32;&#32;&#32;};
1018 <emphasis role="preprocessor">#endif</emphasis>
1019 
1020 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1021 }&#32;<emphasis role="comment">//&#32;end&#32;namespace&#32;std</emphasis>
1022 <emphasis role="preprocessor">#endif</emphasis>
1023 
1024 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
