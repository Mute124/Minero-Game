<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1detail_1_1lexer" xml:lang="en-US">
<title>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt; Class Template Reference</title>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary></indexterm>
<para>

<para>lexical analysis </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
Inheritance diagram for nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1lexer__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1lexer__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726">token_type</link> = typename <link linkend="_classnlohmann_1_1detail_1_1lexer__base">lexer_base</link>&lt; BasicJsonType &gt;::token_type</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Types inherited from <link linkend="_classnlohmann_1_1detail_1_1lexer__base">nlohmann::detail::lexer_base&lt; BasicJsonType &gt;</link>        <itemizedlist>
            <listitem><para>enum class <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454">token_type</link> { <?linebreak?><link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a42dd1a73d072bb6bf3f494f22b15db8e">uninitialized</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a85cc1a37b0aaa52de40e72f0ed4e0c0d">literal_true</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454afab1694b1b3937a079f4625fe0b6108b">literal_false</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454ab7ae4c0e46d86f884677768160b26e9e">literal_null</link>
, <?linebreak?><link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a2b490e8bf366b4cbe3ebd99b26ce15ce">value_string</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454aaf1f040fcd2f674d2e5893d7a731078f">value_unsigned</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a5064b6655d88a50ae16665cf7751c0ee">value_integer</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a0d2671a6f81efb91e77f6ac3bdb11443">value_float</link>
, <?linebreak?><link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a16c226b4425b68560fea322b46dabe01">begin_array</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a9a9ffd53b6869d4eca271b1ed5b57fe8">begin_object</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a2f3e68e7f111a1e5c7728742b3ca2b7f">end_array</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a7d5b4427866814de4d8f132721d59c87">end_object</link>
, <?linebreak?><link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454acc3c64f8ae08c00de1b33f19a4d2913a">name_separator</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a745373036100d7392ad62c617cab59af">value_separator</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454a456e19aeafa334241c7ff3f589547f9d">parse_error</link>
, <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454aca11f56dd477c09e06583dbdcda0985f">end_of_input</link>
, <?linebreak?><link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454ad2a8e6f6721cccec0b466301dd9495a5">literal_or_value</link>
 }</para>

<para>token types for the parser </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1lexer_1a89bbc051da2514a469441a3a30ad63e4">lexer</link> (InputAdapterType &amp;&amp;adapter, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments_=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>) noexcept</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1lexer_1ab75d61c4de687717648c7698850ddb9b">lexer</link> (const <link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1lexer_1ae95416c7ae8b36f0dd0ab349eaa754a2">lexer</link> (<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp;&amp;)=default</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1lexer_1aad4020e9be20612197f8d4e049300adc">operator=</link> (<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp;)=delete</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1lexer_1a5e448bb3dea993ecb9ee92e71d78ca84">operator=</link> (<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp;&amp;)=default</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1lexer_1ac0557f111d82f7729a93ee9b40b31402">~lexer</link> ()=default</para>
</listitem>
            <listitem><para>constexpr number_integer_t <link linkend="_classnlohmann_1_1detail_1_1lexer_1a9535d0c72adbe9fe149853ebad5faee8">get_number_integer</link> () const noexcept</para>

<para>return integer value </para>
</listitem>
            <listitem><para>constexpr number_unsigned_t <link linkend="_classnlohmann_1_1detail_1_1lexer_1abfc85ff04fcb1a5a8d8ea299a4c479e5">get_number_unsigned</link> () const noexcept</para>

<para>return unsigned integer value </para>
</listitem>
            <listitem><para>constexpr number_float_t <link linkend="_classnlohmann_1_1detail_1_1lexer_1adb1a71f6a3e65ed32c452a318967b61e">get_number_float</link> () const noexcept</para>

<para>return floating-point value </para>
</listitem>
            <listitem><para>string_t &amp; <link linkend="_classnlohmann_1_1detail_1_1lexer_1a0d4629316aaa5c05a9b8adb0cd76705e">get_string</link> ()</para>

<para>return current string value (implicitly resets the token; useful only once) </para>
</listitem>
            <listitem><para>constexpr <link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link> <link linkend="_classnlohmann_1_1detail_1_1lexer_1a948c80b8bd8a3095b544e4655e1ca37e">get_position</link> () const noexcept</para>

<para>return position of last read token </para>
</listitem>
            <listitem><para>std::string <link linkend="_classnlohmann_1_1detail_1_1lexer_1ae000b7571480e528dee4b281f63d5b15">get_token_string</link> () const</para>
</listitem>
            <listitem><para><link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> constexpr const char * <link linkend="_classnlohmann_1_1detail_1_1lexer_1afe2f78f0bad1d08f67dc417278a59f29">get_error_message</link> () const noexcept</para>

<para>return syntax error message </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1lexer_1a7cd7d55de2cd398660bc243c7229caf9">skip_bom</link> ()</para>

<para>skip the UTF-8 byte order mark </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1detail_1_1lexer_1a449f3f3703dfbf8b757e12f002668604">skip_whitespace</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726">token_type</link> <link linkend="_classnlohmann_1_1detail_1_1lexer_1a40320a8fef5f1f03b60c8b2f2f40af4d">scan</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Public Member Functions inherited from <link linkend="_classnlohmann_1_1detail_1_1lexer__base">nlohmann::detail::lexer_base&lt; BasicJsonType &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> static <link linkend="_json_8hpp_1a0d17bf1a54fc45a04ced6d3aa86a96e3">JSON_HEDLEY_CONST</link> const char * <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1a3e49458ca35019e4db8a45629f5be192">token_type_name</link> (const <link linkend="_classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454">token_type</link> t) noexcept</para>

<para>return name of values of type token_type (only used for errors) </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename BasicJsonType, typename InputAdapterType&gt;<?linebreak?>class nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</title></simplesect>

<para>lexical analysis </para>



<para>This class organizes the lexical analysis during JSON deserialization. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726"/><section>
    <title>token_type</title>
<indexterm><primary>token_type</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>token_type</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::token_type =  typename <link linkend="_classnlohmann_1_1detail_1_1lexer__base">lexer_base</link>&lt;BasicJsonType&gt;::token_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a89bbc051da2514a469441a3a30ad63e4"/><section>
    <title>lexer()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>lexer</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>lexer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::lexer (InputAdapterType &amp;&amp; adapter, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments_ = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1ab75d61c4de687717648c7698850ddb9b"/><section>
    <title>lexer()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>lexer</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>lexer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::lexer (const <link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&lt; BasicJsonType, InputAdapterType &gt; &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1ae95416c7ae8b36f0dd0ab349eaa754a2"/><section>
    <title>lexer()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>lexer</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>lexer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::lexer (<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&lt; BasicJsonType, InputAdapterType &gt; &amp;&amp; )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1ac0557f111d82f7729a93ee9b40b31402"/><section>
    <title>~lexer()</title>
<indexterm><primary>~lexer</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>~lexer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::~<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> ( )<computeroutput>[default]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1afe2f78f0bad1d08f67dc417278a59f29"/><section>
    <title>get_error_message()</title>
<indexterm><primary>get_error_message</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>get_error_message</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> constexpr const char * <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::get_error_message ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return syntax error message </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1adb1a71f6a3e65ed32c452a318967b61e"/><section>
    <title>get_number_float()</title>
<indexterm><primary>get_number_float</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>get_number_float</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput>constexpr number_float_t <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::get_number_float ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return floating-point value </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a9535d0c72adbe9fe149853ebad5faee8"/><section>
    <title>get_number_integer()</title>
<indexterm><primary>get_number_integer</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>get_number_integer</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput>constexpr number_integer_t <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::get_number_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return integer value </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1abfc85ff04fcb1a5a8d8ea299a4c479e5"/><section>
    <title>get_number_unsigned()</title>
<indexterm><primary>get_number_unsigned</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>get_number_unsigned</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput>constexpr number_unsigned_t <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::get_number_unsigned ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return unsigned integer value </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a948c80b8bd8a3095b544e4655e1ca37e"/><section>
    <title>get_position()</title>
<indexterm><primary>get_position</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>get_position</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput>constexpr <link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link> <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::get_position ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return position of last read token </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a0d4629316aaa5c05a9b8adb0cd76705e"/><section>
    <title>get_string()</title>
<indexterm><primary>get_string</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>get_string</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput>string_t &amp; <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::get_string ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return current string value (implicitly resets the token; useful only once) </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1ae000b7571480e528dee4b281f63d5b15"/><section>
    <title>get_token_string()</title>
<indexterm><primary>get_token_string</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>get_token_string</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput>std::string <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::get_token_string ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>return the last read token (for errors only). Will never contain EOF (an arbitrary value that is not a valid char value, often -1), because 255 may legitimately occur. May contain NUL, which should be escaped. </para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a5e448bb3dea993ecb9ee92e71d78ca84"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::operator= (<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&lt; BasicJsonType, InputAdapterType &gt; &amp;&amp; )<computeroutput>[default]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1aad4020e9be20612197f8d4e049300adc"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link> &amp; <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::operator= (<link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link>&lt; BasicJsonType, InputAdapterType &gt; &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a40320a8fef5f1f03b60c8b2f2f40af4d"/><section>
    <title>scan()</title>
<indexterm><primary>scan</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>scan</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726">token_type</link> <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::scan ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a7cd7d55de2cd398660bc243c7229caf9"/><section>
    <title>skip_bom()</title>
<indexterm><primary>skip_bom</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>skip_bom</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::skip_bom ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>skip the UTF-8 byte order mark </para>
</para>

<para><formalpara><title>Returns</title>

<para>true iff there is no BOM or the correct BOM has been skipped </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1lexer_1a449f3f3703dfbf8b757e12f002668604"/><section>
    <title>skip_whitespace()</title>
<indexterm><primary>skip_whitespace</primary><secondary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</primary><secondary>skip_whitespace</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename InputAdapterType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1detail_1_1lexer">nlohmann::detail::lexer</link>&lt; BasicJsonType, InputAdapterType &gt;::skip_whitespace ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
