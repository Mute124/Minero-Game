<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__algo_8h_source" xml:lang="en-US">
<title>stl_algo.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_algo.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Algorithm&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_ALGO_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_ALGO_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/algorithmfwd.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_heap.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_tempbuf.h&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;for&#32;_Temporary_buffer</emphasis>
62 <emphasis role="preprocessor">#include&#32;&lt;bits/predefined_ops.h&gt;</emphasis>
63 
64 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;bits/uniform_int_dist.h&gt;</emphasis>
66 <emphasis role="preprocessor">#endif</emphasis>
67 
68 <emphasis role="preprocessor">#if&#32;_GLIBCXX_HOSTED&#32;&amp;&amp;&#32;(__cplusplus&#32;&lt;=&#32;201103L&#32;||&#32;_GLIBCXX_USE_DEPRECATED)</emphasis>
69 <emphasis role="preprocessor">#include&#32;&lt;cstdlib&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;rand</emphasis>
70 <emphasis role="preprocessor">#endif</emphasis>
71 
72 <emphasis role="comment">//&#32;See&#32;concept_check.h&#32;for&#32;the&#32;__glibcxx_*_requires&#32;macros.</emphasis>
73 
74 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
75 {
76 _GLIBCXX_BEGIN_NAMESPACE_VERSION
77 
79 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
80 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
81 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
82 &#32;&#32;&#32;&#32;__move_median_to_first(_Iterator&#32;__result,_Iterator&#32;__a,&#32;_Iterator&#32;__b,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iterator&#32;__c,&#32;_Compare&#32;__comp)
84 &#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__a,&#32;__b))
86 &#32;&#32;&#32;&#32;{
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__b,&#32;__c))
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__result,&#32;__b);
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__a,&#32;__c))
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__result,&#32;__c);
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__result,&#32;__a);
93 &#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__a,&#32;__c))
95 &#32;&#32;&#32;&#32;std::iter_swap(__result,&#32;__a);
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__b,&#32;__c))
97 &#32;&#32;&#32;&#32;std::iter_swap(__result,&#32;__c);
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
99 &#32;&#32;&#32;&#32;std::iter_swap(__result,&#32;__b);
100 &#32;&#32;&#32;&#32;}
101 
103 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
104 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_InputIterator
106 &#32;&#32;&#32;&#32;__find_if_not(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
108 &#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__find_if(__first,&#32;__last,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a98a900cab29009d4ea0751327e081fb0">__gnu_cxx::__ops::__negate</link>(__pred),
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
112 &#32;&#32;&#32;&#32;}
113 
117 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
118 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
119 &#32;&#32;&#32;&#32;_InputIterator
120 &#32;&#32;&#32;&#32;__find_if_not_n(_InputIterator&#32;__first,&#32;_Distance&amp;&#32;__len,&#32;_Predicate&#32;__pred)
121 &#32;&#32;&#32;&#32;{
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__len;&#32;--__len,&#32;&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__first)
123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pred(__first))
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
126 &#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;<emphasis role="comment">//&#32;set_difference</emphasis>
129 &#32;&#32;<emphasis role="comment">//&#32;set_intersection</emphasis>
130 &#32;&#32;<emphasis role="comment">//&#32;set_symmetric_difference</emphasis>
131 &#32;&#32;<emphasis role="comment">//&#32;set_union</emphasis>
132 &#32;&#32;<emphasis role="comment">//&#32;for_each</emphasis>
133 &#32;&#32;<emphasis role="comment">//&#32;find</emphasis>
134 &#32;&#32;<emphasis role="comment">//&#32;find_if</emphasis>
135 &#32;&#32;<emphasis role="comment">//&#32;find_first_of</emphasis>
136 &#32;&#32;<emphasis role="comment">//&#32;adjacent_find</emphasis>
137 &#32;&#32;<emphasis role="comment">//&#32;count</emphasis>
138 &#32;&#32;<emphasis role="comment">//&#32;count_if</emphasis>
139 &#32;&#32;<emphasis role="comment">//&#32;search</emphasis>
140 
141 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2,
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
143 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
144 &#32;&#32;&#32;&#32;_ForwardIterator1
145 &#32;&#32;&#32;&#32;__search(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;&#32;__predicate)
148 &#32;&#32;&#32;&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;for&#32;empty&#32;ranges</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1&#32;||&#32;__first2&#32;==&#32;__last2)
151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1;
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Test&#32;for&#32;a&#32;pattern&#32;of&#32;length&#32;1.</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__p1(__first2);
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__p1&#32;==&#32;__last2)
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__find_if(__first1,&#32;__last1,
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__predicate,&#32;__first2));
158 
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;General&#32;case.</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator1&#32;__current&#32;=&#32;__first1;
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;__first1&#32;=
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__find_if(__first1,&#32;__last1,
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__predicate,&#32;__first2));
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last1;
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__p&#32;=&#32;__p1;
172 &#32;&#32;&#32;&#32;&#32;&#32;__current&#32;=&#32;__first1;
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__current&#32;==&#32;__last1)
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last1;
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__predicate(__current,&#32;__p))
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__p&#32;==&#32;__last2)
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1;
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__current&#32;==&#32;__last1)
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last1;
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
183 &#32;&#32;&#32;&#32;&#32;&#32;++__first1;
184 &#32;&#32;&#32;&#32;}
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1;
186 &#32;&#32;&#32;&#32;}
187 
188 &#32;&#32;<emphasis role="comment">//&#32;search_n</emphasis>
189 
193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryPredicate&gt;
195 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
196 &#32;&#32;&#32;&#32;_ForwardIterator
197 &#32;&#32;&#32;&#32;__search_n_aux(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_UnaryPredicate&#32;__unary_pred,
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
200 &#32;&#32;&#32;&#32;{
201 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;std::__find_if(__first,&#32;__last,&#32;__unary_pred);
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
203 &#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>;
206 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__i&#32;=&#32;__first;
207 &#32;&#32;&#32;&#32;&#32;&#32;++__i;
208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__i&#32;!=&#32;__last&#32;&amp;&amp;&#32;__n&#32;!=&#32;1&#32;&amp;&amp;&#32;__unary_pred(__i))
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__n;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__last)
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
217 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;std::__find_if(++__i,&#32;__last,&#32;__unary_pred);
218 &#32;&#32;&#32;&#32;}
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
220 &#32;&#32;&#32;&#32;}
221 
226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryPredicate&gt;
228 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
229 &#32;&#32;&#32;&#32;_RandomAccessIter
230 &#32;&#32;&#32;&#32;__search_n_aux(_RandomAccessIter&#32;__first,&#32;_RandomAccessIter&#32;__last,
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_UnaryPredicate&#32;__unary_pred,
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag)
233 &#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIter&gt;::difference_type
235 &#32;&#32;&#32;&#32;_DistanceType;
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__tailSize&#32;=&#32;__last&#32;-&#32;__first;
238 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__remainder&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>;
239 
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__remainder&#32;&lt;=&#32;__tailSize)&#32;<emphasis role="comment">//&#32;the&#32;main&#32;loop...</emphasis>
241 &#32;&#32;&#32;&#32;{
242 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+=&#32;__remainder;
243 &#32;&#32;&#32;&#32;&#32;&#32;__tailSize&#32;-=&#32;__remainder;
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__first&#32;here&#32;is&#32;always&#32;pointing&#32;to&#32;one&#32;past&#32;the&#32;last&#32;element&#32;of</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;next&#32;possible&#32;match.</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIter&#32;__backTrack&#32;=&#32;__first;&#32;
247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__unary_pred(--__backTrack))
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--__remainder&#32;==&#32;0)
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__first&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);&#32;<emphasis role="comment">//&#32;Success</emphasis>
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
252 &#32;&#32;&#32;&#32;&#32;&#32;__remainder&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;+&#32;1&#32;-&#32;(__first&#32;-&#32;__backTrack);
253 &#32;&#32;&#32;&#32;}
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;&#32;<emphasis role="comment">//&#32;Failure</emphasis>
255 &#32;&#32;&#32;&#32;}
256 
257 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryPredicate&gt;
259 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
260 &#32;&#32;&#32;&#32;_ForwardIterator
261 &#32;&#32;&#32;&#32;__search_n(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate&#32;__unary_pred)
264 &#32;&#32;&#32;&#32;{
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;&lt;=&#32;0)
266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
267 
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;==&#32;1)
269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__find_if(__first,&#32;__last,&#32;__unary_pred);
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__search_n_aux(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__unary_pred,
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
273 &#32;&#32;&#32;&#32;}
274 
275 &#32;&#32;<emphasis role="comment">//&#32;find_end&#32;for&#32;forward&#32;iterators.</emphasis>
276 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2,
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
278 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
279 &#32;&#32;&#32;&#32;_ForwardIterator1
280 &#32;&#32;&#32;&#32;__find_end(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag,&#32;forward_iterator_tag,
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp)
284 &#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last1;
287 
288 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator1&#32;__result&#32;=&#32;__last1;
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(1)
290 &#32;&#32;&#32;&#32;{
291 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator1&#32;__new_result
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__search(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__comp);
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_result&#32;==&#32;__last1)
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__new_result;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first1&#32;=&#32;__new_result;
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
301 &#32;&#32;&#32;&#32;}
302 &#32;&#32;&#32;&#32;}
303 
304 &#32;&#32;<emphasis role="comment">//&#32;find_end&#32;for&#32;bidirectional&#32;iterators&#32;(much&#32;faster).</emphasis>
305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator2,
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
307 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
308 &#32;&#32;&#32;&#32;_BidirectionalIterator1
309 &#32;&#32;&#32;&#32;__find_end(_BidirectionalIterator1&#32;__first1,
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator1&#32;__last1,
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator2&#32;__first2,
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator2&#32;__last2,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator_tag,&#32;bidirectional_iterator_tag,
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp)
315 &#32;&#32;&#32;&#32;{
316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator1&gt;)
319 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator2&gt;)
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;reverse_iterator&lt;_BidirectionalIterator1&gt;&#32;_RevIterator1;
323 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;reverse_iterator&lt;_BidirectionalIterator2&gt;&#32;_RevIterator2;
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;_RevIterator1&#32;__rlast1(__first1);
326 &#32;&#32;&#32;&#32;&#32;&#32;_RevIterator2&#32;__rlast2(__first2);
327 &#32;&#32;&#32;&#32;&#32;&#32;_RevIterator1&#32;__rresult&#32;=&#32;<link linkend="_namespacestd">std</link>::__search(_RevIterator1(__last1),&#32;__rlast1,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RevIterator2(__last2),&#32;__rlast2,
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
330 
331 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__rresult&#32;==&#32;__rlast1)
332 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__last1;
333 &#32;&#32;&#32;&#32;&#32;&#32;else
334 &#32;&#32;&#32;&#32;{
335 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator1&#32;__result&#32;=&#32;__rresult.base();
336 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__result,&#32;-std::distance(__first2,&#32;__last2));
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
338 &#32;&#32;&#32;&#32;}
339 &#32;&#32;&#32;&#32;}
340 
367 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2&gt;
368 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
369 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator1
370 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">find_end</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2)
372 &#32;&#32;&#32;&#32;{
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
374 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator1&gt;)
375 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator2&gt;)
376 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type,
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::value_type&gt;)
379 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
380 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
381 
382 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__find_end(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first1),
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first2),
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equal_to_iter());
386 &#32;&#32;&#32;&#32;}
387 
416 &#32;&#32;template&lt;typename&#32;_ForwardIterator1,&#32;typename&#32;_ForwardIterator2,
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_BinaryPredicate&gt;
418 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
419 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator1
420 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">find_end</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp)
423 &#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator1&gt;)
426 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator2&gt;)
427 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type,
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::value_type&gt;)
430 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
432 
433 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__find_end(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first1),
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first2),
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
437 &#32;&#32;&#32;&#32;}
438 
439 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
452 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
453 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
455 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_Predicate&#32;__pred)
456 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last&#32;==&#32;<link linkend="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79">std::find_if_not</link>(__first,&#32;__last,&#32;__pred);&#32;}
457 
470 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
471 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
472 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
473 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_Predicate&#32;__pred)
474 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last&#32;==&#32;_GLIBCXX_STD_A::find_if(__first,&#32;__last,&#32;__pred);&#32;}
475 
489 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
490 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
491 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
492 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_Predicate&#32;__pred)
493 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">std::none_of</link>(__first,&#32;__last,&#32;__pred);&#32;}
494 
505 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
506 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
507 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_InputIterator
508 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79">find_if_not</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
510 &#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
512 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
513 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
515 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
516 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__find_if_not(__first,&#32;__last,
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__pred_iter(__pred));
518 &#32;&#32;&#32;&#32;}
519 
530 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_Predicate&gt;
531 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
532 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">bool</emphasis>
533 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1437bae2cd332f755a3e88e264a04525">is_partitioned</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
535 &#32;&#32;&#32;&#32;{
536 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;<link linkend="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79">std::find_if_not</link>(__first,&#32;__last,&#32;__pred);
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
538 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
539 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">std::none_of</link>(__first,&#32;__last,&#32;__pred);
541 &#32;&#32;&#32;&#32;}
542 
552 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
553 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
554 &#32;&#32;&#32;&#32;_ForwardIterator
555 &#32;&#32;&#32;&#32;partition_point(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
557 &#32;&#32;&#32;&#32;{
558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
559 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
560 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
562 
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;specific&#32;debug-mode&#32;test&#32;will&#32;be&#32;necessary...</emphasis>
564 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
565 
566 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type
567 &#32;&#32;&#32;&#32;_DistanceType;
568 
569 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__len&#32;=&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacedistance">distance</link>(__first,&#32;__last);
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;while&#32;(__len&#32;&gt;&#32;0)
572 &#32;&#32;&#32;&#32;{
573 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__half&#32;=&#32;__len&#32;&gt;&gt;&#32;1;
574 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__middle&#32;=&#32;__first;
575 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__middle,&#32;__half);
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(*__middle))
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
584 &#32;&#32;&#32;&#32;}
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
586 &#32;&#32;&#32;&#32;}
587 <emphasis role="preprocessor">#endif</emphasis>
588 
589 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
591 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
592 &#32;&#32;&#32;&#32;_OutputIterator
593 &#32;&#32;&#32;&#32;__remove_copy_if(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Predicate&#32;__pred)
595 &#32;&#32;&#32;&#32;{
596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
597 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pred(__first))
598 &#32;&#32;&#32;&#32;&#32;&#32;{
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
601 &#32;&#32;&#32;&#32;&#32;&#32;}
602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
603 &#32;&#32;&#32;&#32;}
604 
619 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
620 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
621 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
622 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a6b787bee96a52b5b62d7fe8aa6f15fd8">remove_copy</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
624 &#32;&#32;&#32;&#32;{
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
626 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
627 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
629 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type,&#32;_Tp&gt;)
631 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
632 
633 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__remove_copy_if(__first,&#32;__last,&#32;__result,
634 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equals_val(__value));
635 &#32;&#32;&#32;&#32;}
636 
652 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_OutputIterator,
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Predicate&gt;
654 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
655 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
656 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a11eaff910d723a0ea9707f30aead68c4">remove_copy_if</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Predicate&#32;__pred)
658 &#32;&#32;&#32;&#32;{
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
660 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
661 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
663 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
665 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
666 
667 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__remove_copy_if(__first,&#32;__last,&#32;__result,
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__pred_iter(__pred));
669 &#32;&#32;&#32;&#32;}
670 
671 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
687 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
689 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
690 &#32;&#32;&#32;&#32;_OutputIterator
691 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1">copy_if</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Predicate&#32;__pred)
693 &#32;&#32;&#32;&#32;{
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
695 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
696 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
698 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
700 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
701 
702 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
703 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__pred(*__first))
704 &#32;&#32;&#32;&#32;&#32;&#32;{
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
707 &#32;&#32;&#32;&#32;&#32;&#32;}
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
709 &#32;&#32;&#32;&#32;}
710 
711 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
712 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
713 &#32;&#32;&#32;&#32;_OutputIterator
714 &#32;&#32;&#32;&#32;__copy_n(_InputIterator&#32;__first,&#32;_Size&#32;__n,
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;input_iterator_tag)
716 &#32;&#32;&#32;&#32;{
717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__niter_wrap(__result,
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__copy_n_a(__first,&#32;__n,
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__result),&#32;<emphasis role="keyword">true</emphasis>));
720 &#32;&#32;&#32;&#32;}
721 
722 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
724 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
725 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
726 &#32;&#32;&#32;&#32;__copy_n(_RandomAccessIterator&#32;__first,&#32;_Size&#32;__n,
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;random_access_iterator_tag)
728 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__first&#32;+&#32;__n,&#32;__result);&#32;}
729 
743 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
744 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
745 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
746 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad65e2656aa6e6ce70150b2dfa9669cde">copy_n</link>(_InputIterator&#32;__first,&#32;_Size&#32;__n,&#32;_OutputIterator&#32;__result)
747 &#32;&#32;&#32;&#32;{
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
749 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
750 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
752 
753 &#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;__n2&#32;=&#32;<link linkend="_namespacestd">std</link>::__size_to_integer(__n);
754 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__n2&#32;&lt;=&#32;0)
755 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__result;
756 
757 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a8639cfda67f852ea3b94a64ce0381c00">__glibcxx_requires_can_increment</link>(__first,&#32;__n2);
758 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a8639cfda67f852ea3b94a64ce0381c00">__glibcxx_requires_can_increment</link>(__result,&#32;__n2);
759 
760 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__copy_n(__first,&#32;__n2,&#32;__result,
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first));
762 &#32;&#32;&#32;&#32;}
763 
779 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_OutputIterator1,
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator2,&#32;typename&#32;_Predicate&gt;
781 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
782 &#32;&#32;&#32;&#32;pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
783 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b">partition_copy</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator1&#32;__out_true,&#32;_OutputIterator2&#32;__out_false,
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
786 &#32;&#32;&#32;&#32;{
787 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
788 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
789 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator1,
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
791 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator2,
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
793 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
795 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
796 &#32;&#32;&#32;&#32;&#32;&#32;
797 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
798 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__pred(*__first))
799 &#32;&#32;&#32;&#32;&#32;&#32;{
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out_true&#32;=&#32;*__first;
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__out_true;
802 &#32;&#32;&#32;&#32;&#32;&#32;}
803 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
804 &#32;&#32;&#32;&#32;&#32;&#32;{
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out_false&#32;=&#32;*__first;
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__out_false;
807 &#32;&#32;&#32;&#32;&#32;&#32;}
808 
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;(__out_true,&#32;__out_false);
810 &#32;&#32;&#32;&#32;}
811 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
812 
830 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
831 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
832 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
833 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
835 &#32;&#32;&#32;&#32;{
836 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
837 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
839 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
841 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
842 
843 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__remove_if(__first,&#32;__last,
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equals_val(__value));
845 &#32;&#32;&#32;&#32;}
846 
864 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Predicate&gt;
865 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
866 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
867 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908">remove_if</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
869 &#32;&#32;&#32;&#32;{
870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
871 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
873 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
875 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
876 
877 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__remove_if(__first,&#32;__last,
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__pred_iter(__pred));
879 &#32;&#32;&#32;&#32;}
880 
881 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_BinaryPredicate&gt;
882 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
883 &#32;&#32;&#32;&#32;_ForwardIterator
884 &#32;&#32;&#32;&#32;__adjacent_find(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
886 &#32;&#32;&#32;&#32;{
887 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
888 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
889 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__next&#32;=&#32;__first;
890 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__next&#32;!=&#32;__last)
891 &#32;&#32;&#32;&#32;{
892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__binary_pred(__first,&#32;__next))
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
894 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__next;
895 &#32;&#32;&#32;&#32;}
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
897 &#32;&#32;&#32;&#32;}
898 
899 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
900 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
901 &#32;&#32;&#32;&#32;_ForwardIterator
902 &#32;&#32;&#32;&#32;__unique(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
904 &#32;&#32;&#32;&#32;{
905 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;the&#32;beginning,&#32;if&#32;already&#32;unique.</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;std::__adjacent_find(__first,&#32;__last,&#32;__binary_pred);
907 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
909 
910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;the&#32;real&#32;copy&#32;work.</emphasis>
911 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__dest&#32;=&#32;__first;
912 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__binary_pred(__dest,&#32;__first))
915 &#32;&#32;&#32;&#32;&#32;&#32;*++__dest&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first);
916 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;++__dest;
917 &#32;&#32;&#32;&#32;}
918 
933 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
934 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
935 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
936 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
937 &#32;&#32;&#32;&#32;{
938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
939 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
941 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualityComparableConcept&lt;
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
943 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
944 
945 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__unique(__first,&#32;__last,
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equal_to_iter());
947 &#32;&#32;&#32;&#32;}
948 
964 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_BinaryPredicate&gt;
965 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
966 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
967 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
969 &#32;&#32;&#32;&#32;{
970 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
971 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
973 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
976 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
977 
978 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__unique(__first,&#32;__last,
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__binary_pred));
980 &#32;&#32;&#32;&#32;}
981 
988 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_OutputIterator,
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_BinaryPredicate&gt;
990 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
991 &#32;&#32;&#32;&#32;_OutputIterator
992 &#32;&#32;&#32;&#32;__unique_copy(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_BinaryPredicate&#32;__binary_pred,
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag,&#32;output_iterator_tag)
995 &#32;&#32;&#32;&#32;{
996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements&#32;--&#32;iterators&#32;already&#32;checked</emphasis>
997 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
1000 
1001 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__next&#32;=&#32;__first;
1002 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
1003 &#32;&#32;&#32;&#32;&#32;&#32;while&#32;(++__next&#32;!=&#32;__last)
1004 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!__binary_pred(__first,&#32;__next))
1005 &#32;&#32;&#32;&#32;&#32;&#32;{
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__next;
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*++__result&#32;=&#32;*__first;
1008 &#32;&#32;&#32;&#32;&#32;&#32;}
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;++__result;
1010 &#32;&#32;&#32;&#32;}
1011 
1018 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1020 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1021 &#32;&#32;&#32;&#32;_OutputIterator
1022 &#32;&#32;&#32;&#32;__unique_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_BinaryPredicate&#32;__binary_pred,
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag,&#32;output_iterator_tag)
1025 &#32;&#32;&#32;&#32;{
1026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements&#32;--&#32;iterators&#32;already&#32;checked</emphasis>
1027 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
1028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
1029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
1030 
1031 &#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&#32;__value&#32;=&#32;*__first;
1032 &#32;&#32;&#32;&#32;&#32;&#32;__decltype(<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_val(__binary_pred))
1033 &#32;&#32;&#32;&#32;__rebound_pred
1034 &#32;&#32;&#32;&#32;=&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_val(__binary_pred);
1035 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;__value;
1036 &#32;&#32;&#32;&#32;&#32;&#32;while&#32;(++__first&#32;!=&#32;__last)
1037 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!__rebound_pred(__first,&#32;__value))
1038 &#32;&#32;&#32;&#32;&#32;&#32;{
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value&#32;=&#32;*__first;
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*++__result&#32;=&#32;__value;
1041 &#32;&#32;&#32;&#32;&#32;&#32;}
1042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;++__result;
1043 &#32;&#32;&#32;&#32;}
1044 
1051 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1053 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1054 &#32;&#32;&#32;&#32;_ForwardIterator
1055 &#32;&#32;&#32;&#32;__unique_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result,&#32;_BinaryPredicate&#32;__binary_pred,
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag,&#32;forward_iterator_tag)
1058 &#32;&#32;&#32;&#32;{
1059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements&#32;--&#32;iterators&#32;already&#32;checked</emphasis>
1060 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
1063 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
1064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
1065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__binary_pred(__result,&#32;__first))
1066 &#32;&#32;&#32;&#32;&#32;&#32;*++__result&#32;=&#32;*__first;
1067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;++__result;
1068 &#32;&#32;&#32;&#32;}
1069 
1075 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
1076 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1078 &#32;&#32;&#32;&#32;__reverse(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator_tag)
1080 &#32;&#32;&#32;&#32;{
1081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
1082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last&#32;||&#32;__first&#32;==&#32;--__last)
1083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1085 &#32;&#32;&#32;&#32;&#32;&#32;{
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__last);
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1088 &#32;&#32;&#32;&#32;&#32;&#32;}
1089 &#32;&#32;&#32;&#32;}
1090 
1096 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
1097 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1098 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1099 &#32;&#32;&#32;&#32;__reverse(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
1101 &#32;&#32;&#32;&#32;{
1102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1104 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
1105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;&lt;&#32;__last)
1106 &#32;&#32;&#32;&#32;{
1107 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__last);
1108 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1109 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
1110 &#32;&#32;&#32;&#32;}
1111 &#32;&#32;&#32;&#32;}
1112 
1125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
1126 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1127 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1128 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719">reverse</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last)
1129 &#32;&#32;&#32;&#32;{
1130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1131 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_BidirectionalIteratorConcept&lt;
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
1133 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
1134 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__reverse(__first,&#32;__last,&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first));
1135 &#32;&#32;&#32;&#32;}
1136 
1153 &#32;&#32;template&lt;typename&#32;_BidirectionalIterator,&#32;typename&#32;_OutputIterator&gt;
1154 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1155 &#32;&#32;&#32;&#32;_OutputIterator
1156 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa750b5b7ee58a0ba12515997f5066c49">reverse_copy</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
1158 &#32;&#32;&#32;&#32;{
1159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1160 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
1162 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;)
1164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
1165 
1166 &#32;&#32;&#32;&#32;&#32;&#32;while&#32;(__first&#32;!=&#32;__last)
1167 &#32;&#32;&#32;&#32;{
1168 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
1169 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__last;
1170 &#32;&#32;&#32;&#32;&#32;&#32;++__result;
1171 &#32;&#32;&#32;&#32;}
1172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1173 &#32;&#32;&#32;&#32;}
1174 
1179 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Eucl<emphasis role="keywordtype">id</emphasis>eanRingElement&gt;
1180 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1181 &#32;&#32;&#32;&#32;_EuclideanRingElement
1182 &#32;&#32;&#32;&#32;__gcd(_EuclideanRingElement&#32;__m,&#32;_EuclideanRingElement&#32;__n)
1183 &#32;&#32;&#32;&#32;{
1184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;!=&#32;0)
1185 &#32;&#32;&#32;&#32;{
1186 &#32;&#32;&#32;&#32;&#32;&#32;_EuclideanRingElement&#32;__t&#32;=&#32;__m&#32;%&#32;__n;
1187 &#32;&#32;&#32;&#32;&#32;&#32;__m&#32;=&#32;__n;
1188 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__t;
1189 &#32;&#32;&#32;&#32;}
1190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__m;
1191 &#32;&#32;&#32;&#32;}
1192 
1193 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>_V2
1194 &#32;&#32;{
1195 
1197 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1198 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1199 &#32;&#32;&#32;&#32;_ForwardIterator
1200 &#32;&#32;&#32;&#32;__rotate(_ForwardIterator&#32;__first,
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__middle,
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag)
1204 &#32;&#32;&#32;&#32;{
1205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
1207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;==&#32;__middle)
1208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1209 
1210 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__first2&#32;=&#32;__middle;
1211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
1212 &#32;&#32;&#32;&#32;{
1213 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__first2);
1214 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1215 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__middle&#32;=&#32;__first2;
1218 &#32;&#32;&#32;&#32;}
1219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first2&#32;!=&#32;__last);
1220 
1221 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__ret&#32;=&#32;__first;
1222 
1223 &#32;&#32;&#32;&#32;&#32;&#32;__first2&#32;=&#32;__middle;
1224 
1225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first2&#32;!=&#32;__last)
1226 &#32;&#32;&#32;&#32;{
1227 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__first2);
1228 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1229 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__middle&#32;=&#32;__first2;
1232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last)
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2&#32;=&#32;__middle;
1234 &#32;&#32;&#32;&#32;}
1235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1236 &#32;&#32;&#32;&#32;}
1237 
1239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
1240 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1241 &#32;&#32;&#32;&#32;_BidirectionalIterator
1242 &#32;&#32;&#32;&#32;__rotate(_BidirectionalIterator&#32;__first,
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__middle,
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator_tag)
1246 &#32;&#32;&#32;&#32;{
1247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1248 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_BidirectionalIteratorConcept&lt;
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
1250 
1251 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__middle)
1252 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__last;
1253 &#32;&#32;&#32;&#32;&#32;&#32;else&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__last&#32;==&#32;__middle)
1254 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__first;
1255 
1256 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__reverse(__first,&#32;&#32;__middle,&#32;bidirectional_iterator_tag());
1257 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__reverse(__middle,&#32;__last,&#32;&#32;&#32;bidirectional_iterator_tag());
1258 
1259 &#32;&#32;&#32;&#32;&#32;&#32;while&#32;(__first&#32;!=&#32;__middle&#32;&amp;&amp;&#32;__middle&#32;!=&#32;__last)
1260 &#32;&#32;&#32;&#32;{
1261 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;--__last);
1262 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1263 &#32;&#32;&#32;&#32;}
1264 
1265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1266 &#32;&#32;&#32;&#32;{
1267 &#32;&#32;&#32;&#32;&#32;&#32;std::__reverse(__middle,&#32;__last,&#32;&#32;&#32;bidirectional_iterator_tag());
1268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
1269 &#32;&#32;&#32;&#32;}
1270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1271 &#32;&#32;&#32;&#32;{
1272 &#32;&#32;&#32;&#32;&#32;&#32;std::__reverse(__first,&#32;&#32;__middle,&#32;bidirectional_iterator_tag());
1273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1274 &#32;&#32;&#32;&#32;}
1275 &#32;&#32;&#32;&#32;}
1276 
1278 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
1279 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1280 &#32;&#32;&#32;&#32;_RandomAccessIterator
1281 &#32;&#32;&#32;&#32;__rotate(_RandomAccessIterator&#32;__first,
1282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__middle,
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
1285 &#32;&#32;&#32;&#32;{
1286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1287 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
1289 
1290 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__middle)
1291 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__last;
1292 &#32;&#32;&#32;&#32;&#32;&#32;else&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__last&#32;==&#32;__middle)
1293 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__first;
1294 
1295 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
1296 &#32;&#32;&#32;&#32;_Distance;
1297 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
1298 &#32;&#32;&#32;&#32;_ValueType;
1299 
1300 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__n&#32;=&#32;__last&#32;&#32;&#32;-&#32;__first;
1301 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__k&#32;=&#32;__middle&#32;-&#32;__first;
1302 
1303 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__k&#32;==&#32;__n&#32;-&#32;__k)
1304 &#32;&#32;&#32;&#32;{
1305 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200">std::swap_ranges</link>(__first,&#32;__middle,&#32;__middle);
1306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__middle;
1307 &#32;&#32;&#32;&#32;}
1308 
1309 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__p&#32;=&#32;__first;
1310 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__ret&#32;=&#32;__first&#32;+&#32;(__last&#32;-&#32;__middle);
1311 
1312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
1313 &#32;&#32;&#32;&#32;{
1314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k&#32;&lt;&#32;__n&#32;-&#32;__k)
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_pod(_ValueType)&#32;&amp;&amp;&#32;__k&#32;==&#32;1)
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType&#32;__t&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__p);
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__p&#32;+&#32;1,&#32;__p&#32;+&#32;__n,&#32;__p);
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(__p&#32;+&#32;__n&#32;-&#32;1)&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__t);
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__q&#32;=&#32;__p&#32;+&#32;__k;
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Distance&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n&#32;-&#32;__k;&#32;++&#32;__i)
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__p,&#32;__q);
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__p;
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__q;
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;%=&#32;__k;
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(__n,&#32;__k);
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;__n&#32;-&#32;__k;
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;__n&#32;-&#32;__k;
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_pod(_ValueType)&#32;&amp;&amp;&#32;__k&#32;==&#32;1)
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType&#32;__t&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*(__p&#32;+&#32;__n&#32;-&#32;1));
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1acb79ce8166cafa1464ff01ecf20eb889">_GLIBCXX_MOVE_BACKWARD3</link>(__p,&#32;__p&#32;+&#32;__n&#32;-&#32;1,&#32;__p&#32;+&#32;__n);
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__t);
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__q&#32;=&#32;__p&#32;+&#32;__n;
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p&#32;=&#32;__q&#32;-&#32;__k;
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Distance&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n&#32;-&#32;__k;&#32;++&#32;__i)
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__p;
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__q;
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__p,&#32;__q);
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;%=&#32;__k;
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(__n,&#32;__k);
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1359 &#32;&#32;&#32;&#32;}
1360 &#32;&#32;&#32;&#32;}
1361 
1362 &#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1363 &#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;488.&#32;rotate&#32;throws&#32;away&#32;useful&#32;information</emphasis>
1385 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
1386 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1387 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1388 &#32;&#32;&#32;&#32;<link linkend="_group__ext__matrix__transform_1ga42613eb0c7deb5f5188fc159df6c8950">rotate</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last)
1390 &#32;&#32;&#32;&#32;{
1391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1392 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
1394 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__middle);
1395 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__middle,&#32;__last);
1396 
1397 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__rotate(__first,&#32;__middle,&#32;__last,
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first));
1399 &#32;&#32;&#32;&#32;}
1400 
1401 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;_V2</emphasis>
1402 
1423 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_OutputIterator&gt;
1424 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1425 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
1426 &#32;&#32;&#32;&#32;rotate_copy(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result)
1428 &#32;&#32;&#32;&#32;{
1429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1430 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
1431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
1433 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__middle);
1434 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__middle,&#32;__last);
1435 
1436 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::copy(__first,&#32;__middle,
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::copy(__middle,&#32;__last,&#32;__result));
1438 &#32;&#32;&#32;&#32;}
1439 
1441 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Predicate&gt;
1442 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1443 &#32;&#32;&#32;&#32;_ForwardIterator
1444 &#32;&#32;&#32;&#32;__partition(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;forward_iterator_tag)
1446 &#32;&#32;&#32;&#32;{
1447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1449 
1450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__pred(*__first))
1451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__first&#32;==&#32;__last)
1452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1453 
1454 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__next&#32;=&#32;__first;
1455 
1456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__next&#32;!=&#32;__last)
1457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(*__next))
1458 &#32;&#32;&#32;&#32;&#32;&#32;{
1459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__next);
1460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1461 &#32;&#32;&#32;&#32;&#32;&#32;}
1462 
1463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1464 &#32;&#32;&#32;&#32;}
1465 
1467 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1468 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1469 &#32;&#32;&#32;&#32;_BidirectionalIterator
1470 &#32;&#32;&#32;&#32;__partition(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;bidirectional_iterator_tag)
1472 &#32;&#32;&#32;&#32;{
1473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
1474 &#32;&#32;&#32;&#32;{
1475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(*__first))
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1482 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
1483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">bool</emphasis>(__pred(*__last)))
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last;
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1490 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__last);
1491 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1492 &#32;&#32;&#32;&#32;}
1493 &#32;&#32;&#32;&#32;}
1494 
1495 &#32;&#32;<emphasis role="comment">//&#32;partition</emphasis>
1496 
1503 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pointer,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
1505 &#32;&#32;&#32;&#32;_ForwardIterator
1506 &#32;&#32;&#32;&#32;__stable_partition_adaptive(_ForwardIterator&#32;__first,
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;_Distance&#32;__len,
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__buffer,
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__buffer_size)
1511 &#32;&#32;&#32;&#32;{
1512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;==&#32;1)
1513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1514 
1515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&lt;=&#32;__buffer_size)
1516 &#32;&#32;&#32;&#32;{
1517 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result1&#32;=&#32;__first;
1518 &#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__result2&#32;=&#32;__buffer;
1519 
1520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;precondition&#32;guarantees&#32;that&#32;!__pred(__first),&#32;so</emphasis>
1521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move&#32;that&#32;element&#32;to&#32;the&#32;buffer&#32;before&#32;starting&#32;the&#32;loop.</emphasis>
1522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;ensures&#32;that&#32;we&#32;only&#32;call&#32;__pred&#32;once&#32;per&#32;element.</emphasis>
1523 &#32;&#32;&#32;&#32;&#32;&#32;*__result2&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first);
1524 &#32;&#32;&#32;&#32;&#32;&#32;++__result2;
1525 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
1528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result1&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first);
1530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result1;
1531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result2&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first);
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result2;
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1537 
1538 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__buffer,&#32;__result2,&#32;__result1);
1539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result1;
1540 &#32;&#32;&#32;&#32;}
1541 
1542 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__middle&#32;=&#32;__first;
1543 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__middle,&#32;__len&#32;/&#32;2);
1544 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__left_split&#32;=
1545 &#32;&#32;&#32;&#32;std::__stable_partition_adaptive(__first,&#32;__middle,&#32;__pred,
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;/&#32;2,&#32;__buffer,
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_size);
1548 
1549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Advance&#32;past&#32;true-predicate&#32;values&#32;to&#32;satisfy&#32;this</emphasis>
1550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;function&apos;s&#32;preconditions.</emphasis>
1551 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__right_len&#32;=&#32;__len&#32;-&#32;__len&#32;/&#32;2;
1552 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__right_split&#32;=
1553 &#32;&#32;&#32;&#32;std::__find_if_not_n(__middle,&#32;__right_len,&#32;__pred);
1554 
1555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__right_len)
1556 &#32;&#32;&#32;&#32;__right_split&#32;=
1557 &#32;&#32;&#32;&#32;&#32;&#32;std::__stable_partition_adaptive(__right_split,&#32;__last,&#32;__pred,
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__right_len,
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer,&#32;__buffer_size);
1560 
1561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e">std::rotate</link>(__left_split,&#32;__middle,&#32;__right_split);
1562 &#32;&#32;&#32;&#32;}
1563 
1564 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1565 &#32;&#32;&#32;&#32;_ForwardIterator
1566 &#32;&#32;&#32;&#32;__stable_partition(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
1568 &#32;&#32;&#32;&#32;{
1569 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;std::__find_if_not(__first,&#32;__last,&#32;__pred);
1570 
1571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1573 
1574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type
1575 &#32;&#32;&#32;&#32;_ValueType;
1576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type
1577 &#32;&#32;&#32;&#32;_DistanceType;
1578 
1579 &#32;&#32;&#32;&#32;&#32;&#32;_Temporary_buffer&lt;_ForwardIterator,&#32;_ValueType&gt;
1580 &#32;&#32;&#32;&#32;__buf(__first,&#32;std::distance(__first,&#32;__last));
1581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
1582 &#32;&#32;&#32;&#32;std::__stable_partition_adaptive(__first,&#32;__last,&#32;__pred,
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(__buf.requested_size()),
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buf.begin(),
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(__buf.size()));
1586 &#32;&#32;&#32;&#32;}
1587 
1605 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1606 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1607 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">stable_partition</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
1609 &#32;&#32;&#32;&#32;{
1610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1611 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
1613 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
1615 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
1616 
1617 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__stable_partition(__first,&#32;__last,
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__pred_iter(__pred));
1619 &#32;&#32;&#32;&#32;}
1620 
1622 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
1623 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1624 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1625 &#32;&#32;&#32;&#32;__heap_select(_RandomAccessIterator&#32;__first,
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__middle,
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
1628 &#32;&#32;&#32;&#32;{
1629 &#32;&#32;&#32;&#32;&#32;&#32;std::__make_heap(__first,&#32;__middle,&#32;__comp);
1630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_RandomAccessIterator&#32;__i&#32;=&#32;__middle;&#32;__i&#32;&lt;&#32;__last;&#32;++__i)
1631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__i,&#32;__first))
1632 &#32;&#32;&#32;&#32;&#32;&#32;std::__pop_heap(__first,&#32;__middle,&#32;__i,&#32;__comp);
1633 &#32;&#32;&#32;&#32;}
1634 
1635 &#32;&#32;<emphasis role="comment">//&#32;partial_sort</emphasis>
1636 
1637 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1639 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1640 &#32;&#32;&#32;&#32;_RandomAccessIterator
1641 &#32;&#32;&#32;&#32;__partial_sort_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result_first,
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result_last,
1644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
1645 &#32;&#32;&#32;&#32;{
1646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type
1647 &#32;&#32;&#32;&#32;_InputValueType;
1648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;&#32;_RItTraits;
1649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_RItTraits::difference_type&#32;_DistanceType;
1650 
1651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result_first&#32;==&#32;__result_last)
1652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result_last;
1653 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result_real_last&#32;=&#32;__result_first;
1654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;__result_real_last&#32;!=&#32;__result_last)
1655 &#32;&#32;&#32;&#32;{
1656 &#32;&#32;&#32;&#32;&#32;&#32;*__result_real_last&#32;=&#32;*__first;
1657 &#32;&#32;&#32;&#32;&#32;&#32;++__result_real_last;
1658 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1659 &#32;&#32;&#32;&#32;}
1660 &#32;&#32;&#32;&#32;&#32;&#32;
1661 &#32;&#32;&#32;&#32;&#32;&#32;std::__make_heap(__result_first,&#32;__result_real_last,&#32;__comp);
1662 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
1663 &#32;&#32;&#32;&#32;{
1664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first,&#32;__result_first))
1665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__adjust_heap(__result_first,&#32;_DistanceType(0),
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(__result_real_last
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__result_first),
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputValueType(*__first),&#32;__comp);
1669 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1670 &#32;&#32;&#32;&#32;}
1671 &#32;&#32;&#32;&#32;&#32;&#32;std::__sort_heap(__result_first,&#32;__result_real_last,&#32;__comp);
1672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result_real_last;
1673 &#32;&#32;&#32;&#32;}
1674 
1693 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
1694 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1695 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_RandomAccessIterator
1696 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aede1625926fee2cb08e34aed9a057213">partial_sort_copy</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result_first,
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result_last)
1699 &#32;&#32;&#32;&#32;{
1700 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
1701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type
1702 &#32;&#32;&#32;&#32;_InputValueType;
1703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
1704 &#32;&#32;&#32;&#32;_OutputValueType;
1705 <emphasis role="preprocessor">#endif</emphasis>
1706 
1707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1708 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
1709 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_InputValueType,
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputValueType&gt;)
1711 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;_InputValueType,
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputValueType&gt;)
1713 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;_OutputValueType&gt;)
1714 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
1715 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
1716 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__result_first,&#32;__result_last);
1717 
1718 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__partial_sort_copy(__first,&#32;__last,
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result_first,&#32;__result_last,
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
1721 &#32;&#32;&#32;&#32;}
1722 
1743 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_RandomAccessIterator,
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Compare&gt;
1745 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1746 &#32;&#32;&#32;&#32;inline&#32;_RandomAccessIterator
1747 &#32;&#32;&#32;&#32;partial_sort_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result_first,
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result_last,
1750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
1751 &#32;&#32;&#32;&#32;{
1752 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
1753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type
1754 &#32;&#32;&#32;&#32;_InputValueType;
1755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
1756 &#32;&#32;&#32;&#32;_OutputValueType;
1757 <emphasis role="preprocessor">#endif</emphasis>
1758 
1759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1760 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
1761 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
1763 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_InputValueType,
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputValueType&gt;)
1765 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputValueType,&#32;_OutputValueType&gt;)
1767 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputValueType,&#32;_OutputValueType&gt;)
1769 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
1770 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
1771 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__result_first,&#32;__result_last);
1772 
1773 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__partial_sort_copy(__first,&#32;__last,
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result_first,&#32;__result_last,
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
1776 &#32;&#32;&#32;&#32;}
1777 
1779 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
1780 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1781 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1782 &#32;&#32;&#32;&#32;__unguarded_linear_insert(_RandomAccessIterator&#32;__last,
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
1784 &#32;&#32;&#32;&#32;{
1785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
1786 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__last);
1787 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__next&#32;=&#32;__last;
1788 &#32;&#32;&#32;&#32;&#32;&#32;--__next;
1789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__comp(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__next))
1790 &#32;&#32;&#32;&#32;{
1791 &#32;&#32;&#32;&#32;&#32;&#32;*__last&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__next);
1792 &#32;&#32;&#32;&#32;&#32;&#32;__last&#32;=&#32;__next;
1793 &#32;&#32;&#32;&#32;&#32;&#32;--__next;
1794 &#32;&#32;&#32;&#32;}
1795 &#32;&#32;&#32;&#32;&#32;&#32;*__last&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1796 &#32;&#32;&#32;&#32;}
1797 
1799 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1800 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1801 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1802 &#32;&#32;&#32;&#32;__insertion_sort(_RandomAccessIterator&#32;__first,
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
1804 &#32;&#32;&#32;&#32;{
1805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)&#32;<emphasis role="keywordflow">return</emphasis>;
1806 
1807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_RandomAccessIterator&#32;__i&#32;=&#32;__first&#32;+&#32;1;&#32;__i&#32;!=&#32;__last;&#32;++__i)
1808 &#32;&#32;&#32;&#32;{
1809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__i,&#32;__first))
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__i);
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1acb79ce8166cafa1464ff01ecf20eb889">_GLIBCXX_MOVE_BACKWARD3</link>(__first,&#32;__i,&#32;__i&#32;+&#32;1);
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__unguarded_linear_insert(__i,
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a39ff1df79a9a03502ada3ca818ea9713">__gnu_cxx::__ops::__val_comp_iter</link>(__comp));
1819 &#32;&#32;&#32;&#32;}
1820 &#32;&#32;&#32;&#32;}
1821 
1823 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1824 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1825 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1826 &#32;&#32;&#32;&#32;__unguarded_insertion_sort(_RandomAccessIterator&#32;__first,
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
1828 &#32;&#32;&#32;&#32;{
1829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_RandomAccessIterator&#32;__i&#32;=&#32;__first;&#32;__i&#32;!=&#32;__last;&#32;++__i)
1830 &#32;&#32;&#32;&#32;std::__unguarded_linear_insert(__i,
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a39ff1df79a9a03502ada3ca818ea9713">__gnu_cxx::__ops::__val_comp_iter</link>(__comp));
1832 &#32;&#32;&#32;&#32;}
1833 
1838 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_threshold&#32;=&#32;16&#32;};
1839 
1841 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1842 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1843 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1844 &#32;&#32;&#32;&#32;__final_insertion_sort(_RandomAccessIterator&#32;__first,
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
1846 &#32;&#32;&#32;&#32;{
1847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;&gt;&#32;<emphasis role="keywordtype">int</emphasis>(_S_threshold))
1848 &#32;&#32;&#32;&#32;{
1849 &#32;&#32;&#32;&#32;&#32;&#32;std::__insertion_sort(__first,&#32;__first&#32;+&#32;<emphasis role="keywordtype">int</emphasis>(_S_threshold),&#32;__comp);
1850 &#32;&#32;&#32;&#32;&#32;&#32;std::__unguarded_insertion_sort(__first&#32;+&#32;<emphasis role="keywordtype">int</emphasis>(_S_threshold),&#32;__last,
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
1852 &#32;&#32;&#32;&#32;}
1853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1854 &#32;&#32;&#32;&#32;std::__insertion_sort(__first,&#32;__last,&#32;__comp);
1855 &#32;&#32;&#32;&#32;}
1856 
1858 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1859 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1860 &#32;&#32;&#32;&#32;_RandomAccessIterator
1861 &#32;&#32;&#32;&#32;__unguarded_partition(_RandomAccessIterator&#32;__first,
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__pivot,&#32;_Compare&#32;__comp)
1864 &#32;&#32;&#32;&#32;{
1865 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
1866 &#32;&#32;&#32;&#32;{
1867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__comp(__first,&#32;__pivot))
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1869 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
1870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__comp(__pivot,&#32;__last))
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last;
1872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(__first&#32;&lt;&#32;__last))
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1874 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__last);
1875 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
1876 &#32;&#32;&#32;&#32;}
1877 &#32;&#32;&#32;&#32;}
1878 
1880 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1881 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1882 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_RandomAccessIterator
1883 &#32;&#32;&#32;&#32;__unguarded_partition_pivot(_RandomAccessIterator&#32;__first,
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
1885 &#32;&#32;&#32;&#32;{
1886 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__mid&#32;=&#32;__first&#32;+&#32;(__last&#32;-&#32;__first)&#32;/&#32;2;
1887 &#32;&#32;&#32;&#32;&#32;&#32;std::__move_median_to_first(__first,&#32;__first&#32;+&#32;1,&#32;__mid,&#32;__last&#32;-&#32;1,
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
1889 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__unguarded_partition(__first&#32;+&#32;1,&#32;__last,&#32;__first,&#32;__comp);
1890 &#32;&#32;&#32;&#32;}
1891 
1892 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1893 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1894 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1895 &#32;&#32;&#32;&#32;__partial_sort(_RandomAccessIterator&#32;__first,
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__middle,
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
1899 &#32;&#32;&#32;&#32;{
1900 &#32;&#32;&#32;&#32;&#32;&#32;std::__heap_select(__first,&#32;__middle,&#32;__last,&#32;__comp);
1901 &#32;&#32;&#32;&#32;&#32;&#32;std::__sort_heap(__first,&#32;__middle,&#32;__comp);
1902 &#32;&#32;&#32;&#32;}
1903 
1905 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1906 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1907 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1908 &#32;&#32;&#32;&#32;__introsort_loop(_RandomAccessIterator&#32;__first,
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;__depth_limit,&#32;_Compare&#32;__comp)
1911 &#32;&#32;&#32;&#32;{
1912 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__last&#32;-&#32;__first&#32;&gt;&#32;<emphasis role="keywordtype">int</emphasis>(_S_threshold))
1913 &#32;&#32;&#32;&#32;{
1914 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__depth_limit&#32;==&#32;0)
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__partial_sort(__first,&#32;__last,&#32;__last,&#32;__comp);
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1919 &#32;&#32;&#32;&#32;&#32;&#32;--__depth_limit;
1920 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__cut&#32;=
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__unguarded_partition_pivot(__first,&#32;__last,&#32;__comp);
1922 &#32;&#32;&#32;&#32;&#32;&#32;std::__introsort_loop(__cut,&#32;__last,&#32;__depth_limit,&#32;__comp);
1923 &#32;&#32;&#32;&#32;&#32;&#32;__last&#32;=&#32;__cut;
1924 &#32;&#32;&#32;&#32;}
1925 &#32;&#32;&#32;&#32;}
1926 
1927 &#32;&#32;<emphasis role="comment">//&#32;sort</emphasis>
1928 
1929 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1930 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1931 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1932 &#32;&#32;&#32;&#32;__sort(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
1934 &#32;&#32;&#32;&#32;{
1935 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;!=&#32;__last)
1936 &#32;&#32;&#32;&#32;{
1937 &#32;&#32;&#32;&#32;&#32;&#32;std::__introsort_loop(__first,&#32;__last,
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__lg(__last&#32;-&#32;__first)&#32;*&#32;2,
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
1940 &#32;&#32;&#32;&#32;&#32;&#32;std::__final_insertion_sort(__first,&#32;__last,&#32;__comp);
1941 &#32;&#32;&#32;&#32;}
1942 &#32;&#32;&#32;&#32;}
1943 
1944 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1945 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1946 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1947 &#32;&#32;&#32;&#32;__introselect(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__nth,
1948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Size&#32;__depth_limit,
1949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
1950 &#32;&#32;&#32;&#32;{
1951 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__last&#32;-&#32;__first&#32;&gt;&#32;3)
1952 &#32;&#32;&#32;&#32;{
1953 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__depth_limit&#32;==&#32;0)
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__heap_select(__first,&#32;__nth&#32;+&#32;1,&#32;__last,&#32;__comp);
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Place&#32;the&#32;nth&#32;largest&#32;element&#32;in&#32;its&#32;final&#32;position.</emphasis>
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__nth);
1958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1960 &#32;&#32;&#32;&#32;&#32;&#32;--__depth_limit;
1961 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__cut&#32;=
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__unguarded_partition_pivot(__first,&#32;__last,&#32;__comp);
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__cut&#32;&lt;=&#32;__nth)
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__cut;
1965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last&#32;=&#32;__cut;
1967 &#32;&#32;&#32;&#32;}
1968 &#32;&#32;&#32;&#32;&#32;&#32;std::__insertion_sort(__first,&#32;__last,&#32;__comp);
1969 &#32;&#32;&#32;&#32;}
1970 
1971 &#32;&#32;<emphasis role="comment">//&#32;nth_element</emphasis>
1972 
1973 &#32;&#32;<emphasis role="comment">//&#32;lower_bound&#32;moved&#32;to&#32;stl_algobase.h</emphasis>
1974 
1991 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1992 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1993 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1994 &#32;&#32;&#32;&#32;lower_bound(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_Compare&#32;__comp)
1996 &#32;&#32;&#32;&#32;{
1997 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1998 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
1999 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2000 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
2001 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adb209d74772c3c075e0f501e7f1f958d">__glibcxx_requires_partitioned_lower_pred</link>(__first,&#32;__last,
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp);
2003 
2004 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__lower_bound(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_val(__comp));
2006 &#32;&#32;&#32;&#32;}
2007 
2008 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Tp,&#32;typename&#32;_Compare&gt;
2009 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2010 &#32;&#32;&#32;&#32;_ForwardIterator
2011 &#32;&#32;&#32;&#32;__upper_bound(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_Compare&#32;__comp)
2013 &#32;&#32;&#32;&#32;{
2014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type
2015 &#32;&#32;&#32;&#32;_DistanceType;
2016 
2017 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__len&#32;=&#32;std::distance(__first,&#32;__last);
2018 
2019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
2020 &#32;&#32;&#32;&#32;{
2021 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__half&#32;=&#32;__len&#32;&gt;&gt;&#32;1;
2022 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__middle&#32;=&#32;__first;
2023 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__middle,&#32;__half);
2024 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__middle))
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
2026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2032 &#32;&#32;&#32;&#32;}
2033 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2034 &#32;&#32;&#32;&#32;}
2035 
2047 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2048 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2049 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
2050 &#32;&#32;&#32;&#32;upper_bound(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
2052 &#32;&#32;&#32;&#32;{
2053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2054 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
2055 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
2056 &#32;&#32;&#32;&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
2057 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aca4d4ae9d3d05c5c0bf58e3d772d2f2d">__glibcxx_requires_partitioned_upper</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
2058 
2059 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__upper_bound(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__val_less_iter());
2061 &#32;&#32;&#32;&#32;}
2062 
2078 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Tp,&#32;typename&#32;_Compare&gt;
2079 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2080 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
2081 &#32;&#32;&#32;&#32;upper_bound(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_Compare&#32;__comp)
2083 &#32;&#32;&#32;&#32;{
2084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2085 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
2086 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2087 &#32;&#32;&#32;&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
2088 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a9b99c851575516cb11812f4af6f78300">__glibcxx_requires_partitioned_upper_pred</link>(__first,&#32;__last,
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp);
2090 
2091 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__upper_bound(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__val_comp_iter(__comp));
2093 &#32;&#32;&#32;&#32;}
2094 
2095 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Tp,
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_CompareItTp,&#32;typename&#32;_CompareTpIt&gt;
2097 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2098 &#32;&#32;&#32;&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
2099 &#32;&#32;&#32;&#32;__equal_range(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CompareItTp&#32;__comp_it_val,&#32;_CompareTpIt&#32;__comp_val_it)
2102 &#32;&#32;&#32;&#32;{
2103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type
2104 &#32;&#32;&#32;&#32;_DistanceType;
2105 
2106 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__len&#32;=&#32;std::distance(__first,&#32;__last);
2107 
2108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
2109 &#32;&#32;&#32;&#32;{
2110 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__half&#32;=&#32;__len&#32;&gt;&gt;&#32;1;
2111 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__middle&#32;=&#32;__first;
2112 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__middle,&#32;__half);
2113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_it_val(__middle,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
2118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_val_it(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__middle))
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
2121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__left
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__lower_bound(__first,&#32;__middle,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp_it_val);
2125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(__first,&#32;__len);
2126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__right
2127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__upper_bound(++__middle,&#32;__first,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp_val_it);
2128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;(__left,&#32;__right);
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2130 &#32;&#32;&#32;&#32;}
2131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;(__first,&#32;__first);
2132 &#32;&#32;&#32;&#32;}
2133 
2151 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2152 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2153 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
2154 &#32;&#32;&#32;&#32;equal_range(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
2156 &#32;&#32;&#32;&#32;{
2157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2158 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
2159 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
2160 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
2161 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
2162 &#32;&#32;&#32;&#32;_Tp,&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
2163 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aec059a798cc2e17fd1d5fc382bfd92b7">__glibcxx_requires_partitioned_lower</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
2164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aca4d4ae9d3d05c5c0bf58e3d772d2f2d">__glibcxx_requires_partitioned_upper</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
2165 
2166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__equal_range(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_val(),
2168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__val_less_iter());
2169 &#32;&#32;&#32;&#32;}
2170 
2188 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Tp,&#32;typename&#32;_Compare&gt;
2189 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2190 &#32;&#32;&#32;&#32;inline&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
2191 &#32;&#32;&#32;&#32;equal_range(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_Compare&#32;__comp)
2193 &#32;&#32;&#32;&#32;{
2194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2195 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
2196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2197 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
2198 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2199 &#32;&#32;&#32;&#32;_Tp,&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
2200 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adb209d74772c3c075e0f501e7f1f958d">__glibcxx_requires_partitioned_lower_pred</link>(__first,&#32;__last,
2201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp);
2202 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a9b99c851575516cb11812f4af6f78300">__glibcxx_requires_partitioned_upper_pred</link>(__first,&#32;__last,
2203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp);
2204 
2205 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__equal_range(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_val(__comp),
2207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__val_comp_iter(__comp));
2208 &#32;&#32;&#32;&#32;}
2209 
2222 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Tp&gt;
2223 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2225 &#32;&#32;&#32;&#32;binary_search(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
2227 &#32;&#32;&#32;&#32;{
2228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2229 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
2230 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
2231 &#32;&#32;&#32;&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
2232 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aec059a798cc2e17fd1d5fc382bfd92b7">__glibcxx_requires_partitioned_lower</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
2233 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aca4d4ae9d3d05c5c0bf58e3d772d2f2d">__glibcxx_requires_partitioned_upper</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
2234 
2235 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__i
2236 &#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacestd">std</link>::__lower_bound(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_val());
2238 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__i&#32;!=&#32;__last&#32;&amp;&amp;&#32;!(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;&lt;&#32;*__i);
2239 &#32;&#32;&#32;&#32;}
2240 
2256 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Tp,&#32;typename&#32;_Compare&gt;
2257 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2258 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2259 &#32;&#32;&#32;&#32;binary_search(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_Compare&#32;__comp)
2261 &#32;&#32;&#32;&#32;{
2262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
2264 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2265 &#32;&#32;&#32;&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
2266 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adb209d74772c3c075e0f501e7f1f958d">__glibcxx_requires_partitioned_lower_pred</link>(__first,&#32;__last,
2267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp);
2268 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a9b99c851575516cb11812f4af6f78300">__glibcxx_requires_partitioned_upper_pred</link>(__first,&#32;__last,
2269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__comp);
2270 
2271 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__i
2272 &#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacestd">std</link>::__lower_bound(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_val(__comp));
2274 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__i&#32;!=&#32;__last&#32;&amp;&amp;&#32;!<emphasis role="keywordtype">bool</emphasis>(__comp(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;*__i));
2275 &#32;&#32;&#32;&#32;}
2276 
2277 &#32;&#32;<emphasis role="comment">//&#32;merge</emphasis>
2278 
2280 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
2281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_Compare&gt;
2282 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2283 &#32;&#32;&#32;&#32;__move_merge_adaptive(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
2284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
2285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
2286 &#32;&#32;&#32;&#32;{
2287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2288 &#32;&#32;&#32;&#32;{
2289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
2290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first2);
2292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first1);
2297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2299 &#32;&#32;&#32;&#32;&#32;&#32;++__result;
2300 &#32;&#32;&#32;&#32;}
2301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;!=&#32;__last1)
2302 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__first1,&#32;__last1,&#32;__result);
2303 &#32;&#32;&#32;&#32;}
2304 
2306 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator2,
2307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator3,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2308 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2309 &#32;&#32;&#32;&#32;__move_merge_adaptive_backward(_BidirectionalIterator1&#32;__first1,
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator1&#32;__last1,
2311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator2&#32;__first2,
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator2&#32;__last2,
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator3&#32;__result,
2314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2315 &#32;&#32;&#32;&#32;{
2316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
2317 &#32;&#32;&#32;&#32;{
2318 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1acb79ce8166cafa1464ff01ecf20eb889">_GLIBCXX_MOVE_BACKWARD3</link>(__first2,&#32;__last2,&#32;__result);
2319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2320 &#32;&#32;&#32;&#32;}
2321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
2322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2323 
2324 &#32;&#32;&#32;&#32;&#32;&#32;--__last1;
2325 &#32;&#32;&#32;&#32;&#32;&#32;--__last2;
2326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
2327 &#32;&#32;&#32;&#32;{
2328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__last2,&#32;__last1))
2329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*--__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__last1);
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1acb79ce8166cafa1464ff01ecf20eb889">_GLIBCXX_MOVE_BACKWARD3</link>(__first2,&#32;++__last2,&#32;__result);
2334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last1;
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*--__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__last2);
2341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
2342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last2;
2344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2345 &#32;&#32;&#32;&#32;}
2346 &#32;&#32;&#32;&#32;}
2347 
2349 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator2,
2350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
2351 &#32;&#32;&#32;&#32;_BidirectionalIterator1
2352 &#32;&#32;&#32;&#32;__rotate_adaptive(_BidirectionalIterator1&#32;__first,
2353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator1&#32;__middle,
2354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator1&#32;__last,
2355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len1,&#32;_Distance&#32;__len2,
2356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator2&#32;__buffer,
2357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__buffer_size)
2358 &#32;&#32;&#32;&#32;{
2359 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator2&#32;__buffer_end;
2360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1&#32;&gt;&#32;__len2&#32;&amp;&amp;&#32;__len2&#32;&lt;=&#32;__buffer_size)
2361 &#32;&#32;&#32;&#32;{
2362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len2)
2363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_end&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__middle,&#32;__last,&#32;__buffer);
2365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1acb79ce8166cafa1464ff01ecf20eb889">_GLIBCXX_MOVE_BACKWARD3</link>(__first,&#32;__middle,&#32;__last);
2366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__buffer,&#32;__buffer_end,&#32;__first);
2367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2370 &#32;&#32;&#32;&#32;}
2371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1&#32;&lt;=&#32;__buffer_size)
2372 &#32;&#32;&#32;&#32;{
2373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1)
2374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_end&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__first,&#32;__middle,&#32;__buffer);
2376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__middle,&#32;__last,&#32;__first);
2377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1acb79ce8166cafa1464ff01ecf20eb889">_GLIBCXX_MOVE_BACKWARD3</link>(__buffer,&#32;__buffer_end,&#32;__last);
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
2381 &#32;&#32;&#32;&#32;}
2382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e">std::rotate</link>(__first,&#32;__middle,&#32;__last);
2384 &#32;&#32;&#32;&#32;}
2385 
2387 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,&#32;
2388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pointer,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2389 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2390 &#32;&#32;&#32;&#32;__merge_adaptive(_BidirectionalIterator&#32;__first,
2391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__middle,
2392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len1,&#32;_Distance&#32;__len2,
2394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__buffer,&#32;_Distance&#32;__buffer_size,
2395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2396 &#32;&#32;&#32;&#32;{
2397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1&#32;&lt;=&#32;__len2&#32;&amp;&amp;&#32;__len1&#32;&lt;=&#32;__buffer_size)
2398 &#32;&#32;&#32;&#32;{
2399 &#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__buffer_end&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__first,&#32;__middle,&#32;__buffer);
2400 &#32;&#32;&#32;&#32;&#32;&#32;std::__move_merge_adaptive(__buffer,&#32;__buffer_end,&#32;__middle,&#32;__last,
2401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__comp);
2402 &#32;&#32;&#32;&#32;}
2403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len2&#32;&lt;=&#32;__buffer_size)
2404 &#32;&#32;&#32;&#32;{
2405 &#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__buffer_end&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__middle,&#32;__last,&#32;__buffer);
2406 &#32;&#32;&#32;&#32;&#32;&#32;std::__move_merge_adaptive_backward(__first,&#32;__middle,&#32;__buffer,
2407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_end,&#32;__last,&#32;__comp);
2408 &#32;&#32;&#32;&#32;}
2409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2410 &#32;&#32;&#32;&#32;{
2411 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__first_cut&#32;=&#32;__first;
2412 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__second_cut&#32;=&#32;__middle;
2413 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len11&#32;=&#32;0;
2414 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len22&#32;=&#32;0;
2415 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1&#32;&gt;&#32;__len2)
2416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len11&#32;=&#32;__len1&#32;/&#32;2;
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(__first_cut,&#32;__len11);
2419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__second_cut
2420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__lower_bound(__middle,&#32;__last,&#32;*__first_cut,
2421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a3ec2f08e1be85c9bc5d8c50ff0e815e2">__gnu_cxx::__ops::__iter_comp_val</link>(__comp));
2422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len22&#32;=&#32;std::distance(__middle,&#32;__second_cut);
2423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len22&#32;=&#32;__len2&#32;/&#32;2;
2427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::advance(__second_cut,&#32;__len22);
2428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first_cut
2429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__upper_bound(__first,&#32;__middle,&#32;*__second_cut,
2430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a39ff1df79a9a03502ada3ca818ea9713">__gnu_cxx::__ops::__val_comp_iter</link>(__comp));
2431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len11&#32;=&#32;std::distance(__first,&#32;__first_cut);
2432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2433 
2434 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__new_middle
2435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__rotate_adaptive(__first_cut,&#32;__middle,&#32;__second_cut,
2436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len1&#32;-&#32;__len11,&#32;__len22,&#32;__buffer,
2437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_size);
2438 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_adaptive(__first,&#32;__first_cut,&#32;__new_middle,&#32;__len11,
2439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len22,&#32;__buffer,&#32;__buffer_size,&#32;__comp);
2440 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_adaptive(__new_middle,&#32;__second_cut,&#32;__last,
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len1&#32;-&#32;__len11,
2442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len2&#32;-&#32;__len22,&#32;__buffer,
2443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_size,&#32;__comp);
2444 &#32;&#32;&#32;&#32;}
2445 &#32;&#32;&#32;&#32;}
2446 
2448 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BidirectionalIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,
2449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2450 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2451 &#32;&#32;&#32;&#32;__merge_without_buffer(_BidirectionalIterator&#32;__first,
2452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__middle,
2453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len1,&#32;_Distance&#32;__len2,
2455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2456 &#32;&#32;&#32;&#32;{
2457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1&#32;==&#32;0&#32;||&#32;__len2&#32;==&#32;0)
2458 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2459 
2460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1&#32;+&#32;__len2&#32;==&#32;2)
2461 &#32;&#32;&#32;&#32;{
2462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__middle,&#32;__first))
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__first,&#32;__middle);
2464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2465 &#32;&#32;&#32;&#32;}
2466 
2467 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__first_cut&#32;=&#32;__first;
2468 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__second_cut&#32;=&#32;__middle;
2469 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len11&#32;=&#32;0;
2470 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len22&#32;=&#32;0;
2471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len1&#32;&gt;&#32;__len2)
2472 &#32;&#32;&#32;&#32;{
2473 &#32;&#32;&#32;&#32;&#32;&#32;__len11&#32;=&#32;__len1&#32;/&#32;2;
2474 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__first_cut,&#32;__len11);
2475 &#32;&#32;&#32;&#32;&#32;&#32;__second_cut
2476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__lower_bound(__middle,&#32;__last,&#32;*__first_cut,
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a3ec2f08e1be85c9bc5d8c50ff0e815e2">__gnu_cxx::__ops::__iter_comp_val</link>(__comp));
2478 &#32;&#32;&#32;&#32;&#32;&#32;__len22&#32;=&#32;std::distance(__middle,&#32;__second_cut);
2479 &#32;&#32;&#32;&#32;}
2480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2481 &#32;&#32;&#32;&#32;{
2482 &#32;&#32;&#32;&#32;&#32;&#32;__len22&#32;=&#32;__len2&#32;/&#32;2;
2483 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__second_cut,&#32;__len22);
2484 &#32;&#32;&#32;&#32;&#32;&#32;__first_cut
2485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__upper_bound(__first,&#32;__middle,&#32;*__second_cut,
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a39ff1df79a9a03502ada3ca818ea9713">__gnu_cxx::__ops::__val_comp_iter</link>(__comp));
2487 &#32;&#32;&#32;&#32;&#32;&#32;__len11&#32;=&#32;std::distance(__first,&#32;__first_cut);
2488 &#32;&#32;&#32;&#32;}
2489 
2490 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__new_middle
2491 &#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e">std::rotate</link>(__first_cut,&#32;__middle,&#32;__second_cut);
2492 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_without_buffer(__first,&#32;__first_cut,&#32;__new_middle,
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len11,&#32;__len22,&#32;__comp);
2494 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_without_buffer(__new_middle,&#32;__second_cut,&#32;__last,
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len1&#32;-&#32;__len11,&#32;__len2&#32;-&#32;__len22,&#32;__comp);
2496 &#32;&#32;&#32;&#32;}
2497 
2498 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2499 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2500 &#32;&#32;&#32;&#32;__inplace_merge(_BidirectionalIterator&#32;__first,
2501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__middle,
2502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,
2503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2504 &#32;&#32;&#32;&#32;{
2505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type
2506 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType;
2507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_BidirectionalIterator&gt;::difference_type
2508 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType;
2509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Temporary_buffer&lt;_BidirectionalIterator,&#32;_ValueType&gt;&#32;_TmpBuf;
2510 
2511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle&#32;||&#32;__middle&#32;==&#32;__last)
2512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2513 
2514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DistanceType&#32;__len1&#32;=&#32;std::distance(__first,&#32;__middle);
2515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DistanceType&#32;__len2&#32;=&#32;std::distance(__middle,&#32;__last);
2516 
2517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__merge_adaptive&#32;will&#32;use&#32;a&#32;buffer&#32;for&#32;the&#32;smaller&#32;of</emphasis>
2518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[first,middle)&#32;and&#32;[middle,last).</emphasis>
2519 &#32;&#32;&#32;&#32;&#32;&#32;_TmpBuf&#32;__buf(__first,&#32;std::min(__len1,&#32;__len2));
2520 
2521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__buf.begin()&#32;==&#32;0)
2522 &#32;&#32;&#32;&#32;std::__merge_without_buffer
2523 &#32;&#32;&#32;&#32;&#32;&#32;(__first,&#32;__middle,&#32;__last,&#32;__len1,&#32;__len2,&#32;__comp);
2524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2525 &#32;&#32;&#32;&#32;std::__merge_adaptive
2526 &#32;&#32;&#32;&#32;&#32;&#32;(__first,&#32;__middle,&#32;__last,&#32;__len1,&#32;__len2,&#32;__buf.begin(),
2527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(__buf.size()),&#32;__comp);
2528 &#32;&#32;&#32;&#32;}
2529 
2548 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
2549 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2550 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">inplace_merge</link>(_BidirectionalIterator&#32;__first,
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__middle,
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last)
2553 &#32;&#32;&#32;&#32;{
2554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2555 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_BidirectionalIteratorConcept&lt;
2556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
2557 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
2558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;)
2559 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ae24ded0e9db2a66443dbe5ef88159ae5">__glibcxx_requires_sorted</link>(__first,&#32;__middle);
2560 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ae24ded0e9db2a66443dbe5ef88159ae5">__glibcxx_requires_sorted</link>(__middle,&#32;__last);
2561 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
2562 
2563 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__inplace_merge(__first,&#32;__middle,&#32;__last,
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
2565 &#32;&#32;&#32;&#32;}
2566 
2589 &#32;&#32;template&lt;typename&#32;_BidirectionalIterator,&#32;typename&#32;_Compare&gt;
2590 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
2591 &#32;&#32;&#32;&#32;inplace_merge(_BidirectionalIterator&#32;__first,
2592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__middle,
2593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,
2594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2595 &#32;&#32;&#32;&#32;{
2596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2597 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_BidirectionalIteratorConcept&lt;
2598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
2599 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type,
2601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;)
2602 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afea476ce40414eae1ce9e897f2afbc0f">__glibcxx_requires_sorted_pred</link>(__first,&#32;__middle,&#32;__comp);
2603 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afea476ce40414eae1ce9e897f2afbc0f">__glibcxx_requires_sorted_pred</link>(__middle,&#32;__last,&#32;__comp);
2604 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
2605 
2606 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__inplace_merge(__first,&#32;__middle,&#32;__last,
2607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
2608 &#32;&#32;&#32;&#32;}
2609 
2610 
2612 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_OutputIterator,
2613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Compare&gt;
2614 &#32;&#32;&#32;&#32;_OutputIterator
2615 &#32;&#32;&#32;&#32;__move_merge(_InputIterator&#32;__first1,&#32;_InputIterator&#32;__last1,
2616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__first2,&#32;_InputIterator&#32;__last2,
2617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
2618 &#32;&#32;&#32;&#32;{
2619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2620 &#32;&#32;&#32;&#32;{
2621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
2622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first2);
2624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first1);
2629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2631 &#32;&#32;&#32;&#32;&#32;&#32;++__result;
2632 &#32;&#32;&#32;&#32;}
2633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__first2,&#32;__last2,
2634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__algobase_8h_1aa87556e0d8423250838a4c1317e59bcf">_GLIBCXX_MOVE3</link>(__first1,&#32;__last1,
2635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result));
2636 &#32;&#32;&#32;&#32;}
2637 
2638 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator2,
2639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2640 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2641 &#32;&#32;&#32;&#32;__merge_sort_loop(_RandomAccessIterator1&#32;__first,
2642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator1&#32;__last,
2643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__result,&#32;_Distance&#32;__step_size,
2644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2645 &#32;&#32;&#32;&#32;{
2646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Distance&#32;__two_step&#32;=&#32;2&#32;*&#32;__step_size;
2647 
2648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__last&#32;-&#32;__first&#32;&gt;=&#32;__two_step)
2649 &#32;&#32;&#32;&#32;{
2650 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;std::__move_merge(__first,&#32;__first&#32;+&#32;__step_size,
2651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;__step_size,
2652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;__two_step,
2653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,&#32;__comp);
2654 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+=&#32;__two_step;
2655 &#32;&#32;&#32;&#32;}
2656 &#32;&#32;&#32;&#32;&#32;&#32;__step_size&#32;=&#32;std::min(_Distance(__last&#32;-&#32;__first),&#32;__step_size);
2657 
2658 &#32;&#32;&#32;&#32;&#32;&#32;std::__move_merge(__first,&#32;__first&#32;+&#32;__step_size,
2659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;__step_size,&#32;__last,&#32;__result,&#32;__comp);
2660 &#32;&#32;&#32;&#32;}
2661 
2662 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,
2663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2664 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2665 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2666 &#32;&#32;&#32;&#32;__chunk_insertion_sort(_RandomAccessIterator&#32;__first,
2667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
2668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__chunk_size,&#32;_Compare&#32;__comp)
2669 &#32;&#32;&#32;&#32;{
2670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__last&#32;-&#32;__first&#32;&gt;=&#32;__chunk_size)
2671 &#32;&#32;&#32;&#32;{
2672 &#32;&#32;&#32;&#32;&#32;&#32;std::__insertion_sort(__first,&#32;__first&#32;+&#32;__chunk_size,&#32;__comp);
2673 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+=&#32;__chunk_size;
2674 &#32;&#32;&#32;&#32;}
2675 &#32;&#32;&#32;&#32;&#32;&#32;std::__insertion_sort(__first,&#32;__last,&#32;__comp);
2676 &#32;&#32;&#32;&#32;}
2677 
2678 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_chunk_size&#32;=&#32;7&#32;};
2679 
2680 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Po<emphasis role="keywordtype">int</emphasis>er,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2681 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2682 &#32;&#32;&#32;&#32;__merge_sort_with_buffer(_RandomAccessIterator&#32;__first,
2683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
2684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__buffer,&#32;_Compare&#32;__comp)
2685 &#32;&#32;&#32;&#32;{
2686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
2687 &#32;&#32;&#32;&#32;_Distance;
2688 
2689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Distance&#32;__len&#32;=&#32;__last&#32;-&#32;__first;
2690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Pointer&#32;__buffer_last&#32;=&#32;__buffer&#32;+&#32;__len;
2691 
2692 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__step_size&#32;=&#32;_S_chunk_size;
2693 &#32;&#32;&#32;&#32;&#32;&#32;std::__chunk_insertion_sort(__first,&#32;__last,&#32;__step_size,&#32;__comp);
2694 
2695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__step_size&#32;&lt;&#32;__len)
2696 &#32;&#32;&#32;&#32;{
2697 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_sort_loop(__first,&#32;__last,&#32;__buffer,
2698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__step_size,&#32;__comp);
2699 &#32;&#32;&#32;&#32;&#32;&#32;__step_size&#32;*=&#32;2;
2700 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_sort_loop(__buffer,&#32;__buffer_last,&#32;__first,
2701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__step_size,&#32;__comp);
2702 &#32;&#32;&#32;&#32;&#32;&#32;__step_size&#32;*=&#32;2;
2703 &#32;&#32;&#32;&#32;}
2704 &#32;&#32;&#32;&#32;}
2705 
2706 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pointer,
2707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2708 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2709 &#32;&#32;&#32;&#32;__stable_sort_adaptive(_RandomAccessIterator&#32;__first,
2710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
2711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pointer&#32;__buffer,&#32;_Distance&#32;__buffer_size,
2712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2713 &#32;&#32;&#32;&#32;{
2714 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Distance&#32;__len&#32;=&#32;(__last&#32;-&#32;__first&#32;+&#32;1)&#32;/&#32;2;
2715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessIterator&#32;__middle&#32;=&#32;__first&#32;+&#32;__len;
2716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len&#32;&gt;&#32;__buffer_size)
2717 &#32;&#32;&#32;&#32;{
2718 &#32;&#32;&#32;&#32;&#32;&#32;std::__stable_sort_adaptive(__first,&#32;__middle,&#32;__buffer,
2719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_size,&#32;__comp);
2720 &#32;&#32;&#32;&#32;&#32;&#32;std::__stable_sort_adaptive(__middle,&#32;__last,&#32;__buffer,
2721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer_size,&#32;__comp);
2722 &#32;&#32;&#32;&#32;}
2723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2724 &#32;&#32;&#32;&#32;{
2725 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_sort_with_buffer(__first,&#32;__middle,&#32;__buffer,&#32;__comp);
2726 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_sort_with_buffer(__middle,&#32;__last,&#32;__buffer,&#32;__comp);
2727 &#32;&#32;&#32;&#32;}
2728 
2729 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_adaptive(__first,&#32;__middle,&#32;__last,
2730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance(__middle&#32;-&#32;__first),
2731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance(__last&#32;-&#32;__middle),
2732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer,&#32;__buffer_size,
2733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
2734 &#32;&#32;&#32;&#32;}
2735 
2737 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2738 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2739 &#32;&#32;&#32;&#32;__inplace_stable_sort(_RandomAccessIterator&#32;__first,
2740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
2741 &#32;&#32;&#32;&#32;{
2742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;&lt;&#32;15)
2743 &#32;&#32;&#32;&#32;{
2744 &#32;&#32;&#32;&#32;&#32;&#32;std::__insertion_sort(__first,&#32;__last,&#32;__comp);
2745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2746 &#32;&#32;&#32;&#32;}
2747 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__middle&#32;=&#32;__first&#32;+&#32;(__last&#32;-&#32;__first)&#32;/&#32;2;
2748 &#32;&#32;&#32;&#32;&#32;&#32;std::__inplace_stable_sort(__first,&#32;__middle,&#32;__comp);
2749 &#32;&#32;&#32;&#32;&#32;&#32;std::__inplace_stable_sort(__middle,&#32;__last,&#32;__comp);
2750 &#32;&#32;&#32;&#32;&#32;&#32;std::__merge_without_buffer(__first,&#32;__middle,&#32;__last,
2751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__middle&#32;-&#32;__first,
2752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last&#32;-&#32;__middle,
2753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
2754 &#32;&#32;&#32;&#32;}
2755 
2756 &#32;&#32;<emphasis role="comment">//&#32;stable_sort</emphasis>
2757 
2758 &#32;&#32;<emphasis role="comment">//&#32;Set&#32;algorithms:&#32;includes,&#32;set_union,&#32;set_intersection,&#32;set_difference,</emphasis>
2759 &#32;&#32;<emphasis role="comment">//&#32;set_symmetric_difference.&#32;&#32;All&#32;of&#32;these&#32;algorithms&#32;have&#32;the&#32;precondition</emphasis>
2760 &#32;&#32;<emphasis role="comment">//&#32;that&#32;their&#32;input&#32;ranges&#32;are&#32;sorted&#32;and&#32;the&#32;postcondition&#32;that&#32;their&#32;output</emphasis>
2761 &#32;&#32;<emphasis role="comment">//&#32;ranges&#32;are&#32;sorted.</emphasis>
2762 
2763 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
2764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2765 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2766 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2767 &#32;&#32;&#32;&#32;__includes(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
2768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
2769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2770 &#32;&#32;&#32;&#32;{
2771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2772 &#32;&#32;&#32;&#32;{
2773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
2774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp(__first1,&#32;__first2))
2776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2777 &#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2778 &#32;&#32;&#32;&#32;}
2779 
2780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2&#32;==&#32;__last2;
2781 &#32;&#32;&#32;&#32;}
2782 
2801 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2&gt;
2802 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2803 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2804 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">includes</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
2805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2)
2806 &#32;&#32;&#32;&#32;{
2807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2808 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
2809 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
2810 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
2811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
2812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
2813 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
2814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
2815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
2816 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first1,&#32;__last1,&#32;__first2);
2817 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first2,&#32;__last2,&#32;__first1);
2818 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first1,&#32;__last1);
2819 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first2,&#32;__last2);
2820 
2821 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__includes(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
2822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
2823 &#32;&#32;&#32;&#32;}
2824 
2846 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
2847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Compare&gt;
2848 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2849 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">bool</emphasis>
2850 &#32;&#32;&#32;&#32;includes(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
2852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
2853 &#32;&#32;&#32;&#32;{
2854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2855 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
2856 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
2857 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
2859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
2860 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
2863 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first1,&#32;__last1,&#32;__first2,&#32;__comp);
2864 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first2,&#32;__last2,&#32;__first1,&#32;__comp);
2865 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first1,&#32;__last1,&#32;__comp);
2866 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first2,&#32;__last2,&#32;__comp);
2867 
2868 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__includes(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
2869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
2870 &#32;&#32;&#32;&#32;}
2871 
2872 &#32;&#32;<emphasis role="comment">//&#32;nth_element</emphasis>
2873 &#32;&#32;<emphasis role="comment">//&#32;merge</emphasis>
2874 &#32;&#32;<emphasis role="comment">//&#32;set_difference</emphasis>
2875 &#32;&#32;<emphasis role="comment">//&#32;set_intersection</emphasis>
2876 &#32;&#32;<emphasis role="comment">//&#32;set_union</emphasis>
2877 &#32;&#32;<emphasis role="comment">//&#32;stable_sort</emphasis>
2878 &#32;&#32;<emphasis role="comment">//&#32;set_symmetric_difference</emphasis>
2879 &#32;&#32;<emphasis role="comment">//&#32;min_element</emphasis>
2880 &#32;&#32;<emphasis role="comment">//&#32;max_element</emphasis>
2881 
2882 &#32;&#32;template&lt;typename&#32;_BidirectionalIterator,&#32;typename&#32;_Compare&gt;
2883 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2884 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2885 &#32;&#32;&#32;&#32;__next_permutation(_BidirectionalIterator&#32;__first,
2886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,&#32;_Compare&#32;__comp)
2887 &#32;&#32;&#32;&#32;{
2888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
2889 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2890 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__i&#32;=&#32;__first;
2891 &#32;&#32;&#32;&#32;&#32;&#32;++__i;
2892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__last)
2893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2894 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__last;
2895 &#32;&#32;&#32;&#32;&#32;&#32;--__i;
2896 
2897 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;;)
2898 &#32;&#32;&#32;&#32;{
2899 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__ii&#32;=&#32;__i;
2900 &#32;&#32;&#32;&#32;&#32;&#32;--__i;
2901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__i,&#32;__ii))
2902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__j&#32;=&#32;__last;
2904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!__comp(__i,&#32;--__j))
2905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
2906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i,&#32;__j);
2907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__reverse(__ii,&#32;__last,
2908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
2909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__first)
2912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__reverse(__first,&#32;__last,
2914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
2915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2917 &#32;&#32;&#32;&#32;}
2918 &#32;&#32;&#32;&#32;}
2919 
2932 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
2933 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2934 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2935 &#32;&#32;&#32;&#32;next_permutation(_BidirectionalIterator&#32;__first,
2936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last)
2937 &#32;&#32;&#32;&#32;{
2938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2939 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
2940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
2941 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
2942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;)
2943 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
2944 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
2945 
2946 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__next_permutation
2947 &#32;&#32;&#32;&#32;(__first,&#32;__last,&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
2948 &#32;&#32;&#32;&#32;}
2949 
2965 &#32;&#32;template&lt;typename&#32;_BidirectionalIterator,&#32;typename&#32;_Compare&gt;
2966 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2967 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">bool</emphasis>
2968 &#32;&#32;&#32;&#32;next_permutation(_BidirectionalIterator&#32;__first,
2969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,&#32;_Compare&#32;__comp)
2970 &#32;&#32;&#32;&#32;{
2971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2972 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
2973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
2974 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
2975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type,
2976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;)
2977 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
2978 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
2979 
2980 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__next_permutation
2981 &#32;&#32;&#32;&#32;(__first,&#32;__last,&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
2982 &#32;&#32;&#32;&#32;}
2983 
2984 &#32;&#32;template&lt;typename&#32;_BidirectionalIterator,&#32;typename&#32;_Compare&gt;
2985 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2986 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2987 &#32;&#32;&#32;&#32;__prev_permutation(_BidirectionalIterator&#32;__first,
2988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,&#32;_Compare&#32;__comp)
2989 &#32;&#32;&#32;&#32;{
2990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
2991 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2992 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__i&#32;=&#32;__first;
2993 &#32;&#32;&#32;&#32;&#32;&#32;++__i;
2994 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__last)
2995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2996 &#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;__last;
2997 &#32;&#32;&#32;&#32;&#32;&#32;--__i;
2998 
2999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;;)
3000 &#32;&#32;&#32;&#32;{
3001 &#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__ii&#32;=&#32;__i;
3002 &#32;&#32;&#32;&#32;&#32;&#32;--__i;
3003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__ii,&#32;__i))
3004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__j&#32;=&#32;__last;
3006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!__comp(--__j,&#32;__i))
3007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{}
3008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i,&#32;__j);
3009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__reverse(__ii,&#32;__last,
3010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
3011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3013 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__first)
3014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__reverse(__first,&#32;__last,
3016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
3017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3019 &#32;&#32;&#32;&#32;}
3020 &#32;&#32;&#32;&#32;}
3021 
3035 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
3036 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3037 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3038 &#32;&#32;&#32;&#32;prev_permutation(_BidirectionalIterator&#32;__first,
3039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last)
3040 &#32;&#32;&#32;&#32;{
3041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3042 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
3043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
3044 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
3045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;)
3046 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3047 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
3048 
3049 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__prev_permutation(__first,&#32;__last,
3050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
3051 &#32;&#32;&#32;&#32;}
3052 
3068 &#32;&#32;template&lt;typename&#32;_BidirectionalIterator,&#32;typename&#32;_Compare&gt;
3069 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3070 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">bool</emphasis>
3071 &#32;&#32;&#32;&#32;prev_permutation(_BidirectionalIterator&#32;__first,
3072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,&#32;_Compare&#32;__comp)
3073 &#32;&#32;&#32;&#32;{
3074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3075 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;
3076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&gt;)
3077 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
3078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type,
3079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_BidirectionalIterator&gt;::value_type&gt;)
3080 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3081 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
3082 
3083 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__prev_permutation(__first,&#32;__last,
3084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
3085 &#32;&#32;&#32;&#32;}
3086 
3087 &#32;&#32;<emphasis role="comment">//&#32;replace</emphasis>
3088 &#32;&#32;<emphasis role="comment">//&#32;replace_if</emphasis>
3089 
3090 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_OutputIterator,
3091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Predicate,&#32;typename&#32;_Tp&gt;
3092 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3093 &#32;&#32;&#32;&#32;_OutputIterator
3094 &#32;&#32;&#32;&#32;__replace_copy_if(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
3095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
3096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;const&#32;_Tp&amp;&#32;__new_value)
3097 &#32;&#32;&#32;&#32;{
3098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__result)
3099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
3100 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;__new_value;
3101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3102 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
3103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3104 &#32;&#32;&#32;&#32;}
3105 
3120 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3121 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3122 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
3123 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa606c48e16f23e6c4f613d187cc3675c">replace_copy</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
3124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
3125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__old_value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value)
3126 &#32;&#32;&#32;&#32;{
3127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3128 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
3129 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
3130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
3131 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
3132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type,&#32;_Tp&gt;)
3133 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3134 
3135 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__replace_copy_if(__first,&#32;__last,&#32;__result,
3136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equals_val(__old_value),
3137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__new_value);
3138 &#32;&#32;&#32;&#32;}
3139 
3155 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_OutputIterator,
3156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Predicate,&#32;typename&#32;_Tp&gt;
3157 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3158 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
3159 &#32;&#32;&#32;&#32;replace_copy_if(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
3160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
3161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;const&#32;_Tp&amp;&#32;__new_value)
3162 &#32;&#32;&#32;&#32;{
3163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
3165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
3166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
3167 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
3168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
3169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3170 
3171 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__replace_copy_if(__first,&#32;__last,&#32;__result,
3172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__pred_iter(__pred),
3173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__new_value);
3174 &#32;&#32;&#32;&#32;}
3175 
3176 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
3184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
3185 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3186 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3187 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">is_sorted</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
3188 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">std::is_sorted_until</link>(__first,&#32;__last)&#32;==&#32;__last;&#32;}
3189 
3199 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3200 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3201 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3202 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">is_sorted</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
3203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
3204 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">std::is_sorted_until</link>(__first,&#32;__last,&#32;__comp)&#32;==&#32;__last;&#32;}
3205 
3206 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3207 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3208 &#32;&#32;&#32;&#32;_ForwardIterator
3209 &#32;&#32;&#32;&#32;__is_sorted_until(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
3210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
3211 &#32;&#32;&#32;&#32;{
3212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
3213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3214 
3215 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__next&#32;=&#32;__first;
3216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(++__next;&#32;__next&#32;!=&#32;__last;&#32;__first&#32;=&#32;__next,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__next)
3217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__next,&#32;__first))
3218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next;
3219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next;
3220 &#32;&#32;&#32;&#32;}
3221 
3230 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
3231 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3232 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
3233 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">is_sorted_until</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
3234 &#32;&#32;&#32;&#32;{
3235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3236 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
3237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
3238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
3239 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3240 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
3241 
3242 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__is_sorted_until(__first,&#32;__last,
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
3244 &#32;&#32;&#32;&#32;}
3245 
3255 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Compare&gt;
3256 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3257 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
3258 &#32;&#32;&#32;&#32;is_sorted_until(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
3259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
3260 &#32;&#32;&#32;&#32;{
3261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3262 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
3263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
3264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
3265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
3266 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3267 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
3268 
3269 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__is_sorted_until(__first,&#32;__last,
3270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
3271 &#32;&#32;&#32;&#32;}
3272 
3281 &#32;&#32;template&lt;typename&#32;_Tp&gt;
3282 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
3283 &#32;&#32;&#32;&#32;inline&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;
3284 &#32;&#32;&#32;&#32;minmax(const&#32;_Tp&amp;&#32;__a,&#32;const&#32;_Tp&amp;&#32;__b)
3285 &#32;&#32;&#32;&#32;{
3286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3287 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;_Tp&gt;)
3288 
3289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b&#32;&lt;&#32;__a&#32;?&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;(__b,&#32;__a)
3290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;(__a,&#32;__b);
3291 &#32;&#32;&#32;&#32;}
3292 
3302 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3303 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
3304 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;
3305 &#32;&#32;&#32;&#32;minmax(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b,&#32;_Compare&#32;__comp)
3306 &#32;&#32;&#32;&#32;{
3307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(__b,&#32;__a)&#32;?&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;(__b,&#32;__a)
3308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;pair&lt;const&#32;_Tp&amp;,&#32;const&#32;_Tp&amp;&gt;(__a,&#32;__b);
3309 &#32;&#32;&#32;&#32;}
3310 
3311 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3312 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
3313 &#32;&#32;&#32;&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
3314 &#32;&#32;&#32;&#32;__minmax_element(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
3315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
3316 &#32;&#32;&#32;&#32;{
3317 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__next&#32;=&#32;__first;
3318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last
3319 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;++__next&#32;==&#32;__last)
3320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__first,&#32;__first);
3321 
3322 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__min{},&#32;__max{};
3323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__next,&#32;__first))
3324 &#32;&#32;&#32;&#32;{
3325 &#32;&#32;&#32;&#32;&#32;&#32;__min&#32;=&#32;__next;
3326 &#32;&#32;&#32;&#32;&#32;&#32;__max&#32;=&#32;__first;
3327 &#32;&#32;&#32;&#32;}
3328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3329 &#32;&#32;&#32;&#32;{
3330 &#32;&#32;&#32;&#32;&#32;&#32;__min&#32;=&#32;__first;
3331 &#32;&#32;&#32;&#32;&#32;&#32;__max&#32;=&#32;__next;
3332 &#32;&#32;&#32;&#32;}
3333 
3334 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__next;
3335 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
3336 
3337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
3338 &#32;&#32;&#32;&#32;{
3339 &#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__first;
3340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__next&#32;==&#32;__last)
3341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first,&#32;__min))
3343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__min&#32;=&#32;__first;
3344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp(__first,&#32;__max))
3345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__max&#32;=&#32;__first;
3346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3348 
3349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__next,&#32;__first))
3350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__next,&#32;__min))
3352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__min&#32;=&#32;__next;
3353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp(__first,&#32;__max))
3354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__max&#32;=&#32;__first;
3355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first,&#32;__min))
3359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__min&#32;=&#32;__first;
3360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp(__next,&#32;__max))
3361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__max&#32;=&#32;__next;
3362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3363 
3364 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__next;
3365 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
3366 &#32;&#32;&#32;&#32;}
3367 
3368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__min,&#32;__max);
3369 &#32;&#32;&#32;&#32;}
3370 
3382 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
3383 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
3384 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
3385 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">minmax_element</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
3386 &#32;&#32;&#32;&#32;{
3387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3388 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
3389 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
3390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
3391 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3392 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
3393 
3394 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__minmax_element(__first,&#32;__last,
3395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
3396 &#32;&#32;&#32;&#32;}
3397 
3410 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Compare&gt;
3411 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
3412 &#32;&#32;&#32;&#32;inline&#32;pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
3413 &#32;&#32;&#32;&#32;minmax_element(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
3414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
3415 &#32;&#32;&#32;&#32;{
3416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3417 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
3418 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
3419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
3420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
3421 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3422 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
3423 
3424 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__minmax_element(__first,&#32;__last,
3425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
3426 &#32;&#32;&#32;&#32;}
3427 
3428 &#32;&#32;template&lt;typename&#32;_Tp&gt;
3429 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
3430 &#32;&#32;&#32;&#32;inline&#32;pair&lt;_Tp,&#32;_Tp&gt;
3431 &#32;&#32;&#32;&#32;minmax(initializer_list&lt;_Tp&gt;&#32;__l)
3432 &#32;&#32;&#32;&#32;{
3433 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__l.begin(),&#32;__l.end());
3434 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;const&#32;_Tp*,&#32;const&#32;_Tp*&gt;&#32;__p&#32;=
3435 &#32;&#32;&#32;&#32;std::__minmax_element(__l.begin(),&#32;__l.end(),
3436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a0079ef487bb9b6eed21338bd55bd6c82">__gnu_cxx::__ops::__iter_less_iter</link>());
3437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(*__p.first,&#32;*__p.second);
3438 &#32;&#32;&#32;&#32;}
3439 
3440 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3441 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
3442 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_Tp,&#32;_Tp&gt;
3443 &#32;&#32;&#32;&#32;minmax(initializer_list&lt;_Tp&gt;&#32;__l,&#32;_Compare&#32;__comp)
3444 &#32;&#32;&#32;&#32;{
3445 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__l.begin(),&#32;__l.end(),&#32;__comp);
3446 &#32;&#32;&#32;&#32;&#32;&#32;pair&lt;const&#32;_Tp*,&#32;const&#32;_Tp*&gt;&#32;__p&#32;=
3447 &#32;&#32;&#32;&#32;std::__minmax_element(__l.begin(),&#32;__l.end(),
3448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__comp));
3449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(*__p.first,&#32;*__p.second);
3450 &#32;&#32;&#32;&#32;}
3451 
3466 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2,
3467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
3468 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3469 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3470 &#32;&#32;&#32;&#32;is_permutation(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_BinaryPredicate&#32;__pred)
3472 &#32;&#32;&#32;&#32;{
3473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3474 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator1&gt;)
3475 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator2&gt;)
3476 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
3477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type,
3478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::value_type&gt;)
3479 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
3480 
3481 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__is_permutation(__first1,&#32;__last1,&#32;__first2,
3482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__pred));
3483 &#32;&#32;&#32;&#32;}
3484 
3485 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
3486 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2,
3487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
3488 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3489 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
3490 &#32;&#32;&#32;&#32;__is_permutation(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
3492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred)
3493 &#32;&#32;&#32;&#32;{
3494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat1
3495 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::iterator_category;
3496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat2
3497 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::iterator_category;
3498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_It1_is_RA&#32;=&#32;is_same&lt;_Cat1,&#32;random_access_iterator_tag&gt;;
3499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_It2_is_RA&#32;=&#32;is_same&lt;_Cat2,&#32;random_access_iterator_tag&gt;;
3500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ra_iters&#32;=&#32;_It1_is_RA()&#32;&amp;&amp;&#32;_It2_is_RA();
3501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ra_iters)
3502 &#32;&#32;&#32;&#32;{
3503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;std::distance(__first1,&#32;__last1);
3504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;std::distance(__first2,&#32;__last2);
3505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;!=&#32;__d2)
3506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3507 &#32;&#32;&#32;&#32;}
3508 
3509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Efficiently&#32;compare&#32;identical&#32;prefixes:&#32;&#32;O(N)&#32;if&#32;sequences</emphasis>
3510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;have&#32;the&#32;same&#32;elements&#32;in&#32;the&#32;same&#32;order.</emphasis>
3511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
3512 &#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
3513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pred(__first1,&#32;__first2))
3514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3515 
3516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ra_iters)
3517 &#32;&#32;&#32;&#32;{
3518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
3519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3520 &#32;&#32;&#32;&#32;}
3521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3522 &#32;&#32;&#32;&#32;{
3523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;std::distance(__first1,&#32;__last1);
3524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;std::distance(__first2,&#32;__last2);
3525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;==&#32;0&#32;&amp;&amp;&#32;__d2&#32;==&#32;0)
3526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;!=&#32;__d2)
3528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3529 &#32;&#32;&#32;&#32;}
3530 
3531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_ForwardIterator1&#32;__scan&#32;=&#32;__first1;&#32;__scan&#32;!=&#32;__last1;&#32;++__scan)
3532 &#32;&#32;&#32;&#32;{
3533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__scan&#32;!=&#32;std::__find_if(__first1,&#32;__scan,
3534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__pred,&#32;__scan)))
3535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;We&apos;ve&#32;seen&#32;this&#32;one&#32;before.</emphasis>
3536 
3537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__matches&#32;=&#32;std::__count_if(__first2,&#32;__last2,
3538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__pred,&#32;__scan));
3539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;==&#32;__matches
3540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::__count_if(__scan,&#32;__last1,
3541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__pred,&#32;__scan))
3542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;__matches)
3543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3544 &#32;&#32;&#32;&#32;}
3545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3546 &#32;&#32;&#32;&#32;}
3547 
3561 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2&gt;
3562 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3563 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3564 &#32;&#32;&#32;&#32;is_permutation(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2)
3566 &#32;&#32;&#32;&#32;{
3567 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
3568 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
3569 
3570 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
3571 &#32;&#32;&#32;&#32;std::__is_permutation(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
3572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1aa90ca822baf3304eee461dda8b0fb4cf">__gnu_cxx::__ops::__iter_equal_to_iter</link>());
3573 &#32;&#32;&#32;&#32;}
3574 
3589 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2,
3590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
3591 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3592 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3593 &#32;&#32;&#32;&#32;is_permutation(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
3595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred)
3596 &#32;&#32;&#32;&#32;{
3597 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
3598 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
3599 
3600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__is_permutation(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
3601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__pred));
3602 &#32;&#32;&#32;&#32;}
3603 
3604 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
3605 
3606 <emphasis role="preprocessor">#define&#32;__cpp_lib_clamp&#32;201603L</emphasis>
3607 
3619 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3620 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
3621 &#32;&#32;&#32;&#32;<link linkend="_namespaceclamp">clamp</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__hi)
3622 &#32;&#32;&#32;&#32;{
3623 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(!(__hi&#32;&lt;&#32;__lo));
3624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::min(std::max(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__lo),&#32;__hi);
3625 &#32;&#32;&#32;&#32;}
3626 
3639 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3640 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
3641 &#32;&#32;&#32;&#32;<link linkend="_namespaceclamp">clamp</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__hi,&#32;_Compare&#32;__comp)
3642 &#32;&#32;&#32;&#32;{
3643 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(!__comp(__hi,&#32;__lo));
3644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::min(std::max(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__lo,&#32;__comp),&#32;__hi,&#32;__comp);
3645 &#32;&#32;&#32;&#32;}
3646 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
3647 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
3648 
3649 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
3671 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IntType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomBitGenerator&gt;
3672 &#32;&#32;&#32;&#32;pair&lt;_IntType,&#32;_IntType&gt;
3673 &#32;&#32;&#32;&#32;__gen_two_uniform_ints(_IntType&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ab058a0b206f88ab9f3c51ebf076dbeea">__b0</link>,&#32;_IntType&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>,
3674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomBitGenerator&amp;&amp;&#32;__g)
3675 &#32;&#32;&#32;&#32;{
3676 &#32;&#32;&#32;&#32;&#32;&#32;_IntType&#32;__x
3677 &#32;&#32;&#32;&#32;=&#32;uniform_int_distribution&lt;_IntType&gt;{0,&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1ab058a0b206f88ab9f3c51ebf076dbeea">__b0</link>&#32;*&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>)&#32;-&#32;1}(__g);
3678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__x&#32;/&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>,&#32;__x&#32;%&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0fb905920e6321601ec1c0650ce4944d">__b1</link>);
3679 &#32;&#32;&#32;&#32;}
3680 
3693 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,
3694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomNumberGenerator&gt;
3695 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
3696 &#32;&#32;&#32;&#32;<link linkend="_namespacelest_1abc0275611237ee9364ae8d16e82cb83b">shuffle</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
3697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomNumberGenerator&amp;&amp;&#32;__g)
3698 &#32;&#32;&#32;&#32;{
3699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3700 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
3701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
3702 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3703 
3704 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__last)
3705 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
3706 
3707 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
3708 &#32;&#32;&#32;&#32;_DistanceType;
3709 
3710 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;<link linkend="_namespacestd">std</link>::make_unsigned&lt;_DistanceType&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;__ud_type;
3711 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;<link linkend="_namespacestd">std</link>::uniform_int_distribution&lt;__ud_type&gt;&#32;__distr_type;
3712 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;__distr_type::param_type&#32;__p_type;
3713 
3714 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;remove_reference&lt;_UniformRandomNumberGenerator&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>
3715 &#32;&#32;&#32;&#32;_Gen;
3716 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;typename&#32;common_type&lt;typename&#32;_Gen::result_type,&#32;__ud_type&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>
3717 &#32;&#32;&#32;&#32;__uc_type;
3718 
3719 &#32;&#32;&#32;&#32;&#32;&#32;const&#32;__uc_type&#32;__urngrange&#32;=&#32;__g.max()&#32;-&#32;__g.<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>();
3720 &#32;&#32;&#32;&#32;&#32;&#32;const&#32;__uc_type&#32;__urange&#32;=&#32;__uc_type(__last&#32;-&#32;__first);
3721 
3722 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__urngrange&#32;/&#32;__urange&#32;&gt;=&#32;__urange)
3723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I.e.&#32;(__urngrange&#32;&gt;=&#32;__urange&#32;*&#32;__urange)&#32;but&#32;without&#32;wrap&#32;issues.</emphasis>
3724 &#32;&#32;&#32;&#32;&#32;&#32;{
3725 &#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__i&#32;=&#32;__first&#32;+&#32;1;
3726 
3727 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Since&#32;we&#32;know&#32;the&#32;range&#32;isn&apos;t&#32;empty,&#32;an&#32;even&#32;number&#32;of&#32;elements</emphasis>
3728 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;means&#32;an&#32;uneven&#32;number&#32;of&#32;elements&#32;/to&#32;swap/,&#32;in&#32;which&#32;case&#32;we</emphasis>
3729 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;the&#32;first&#32;one&#32;up&#32;front:</emphasis>
3730 
3731 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__urange&#32;%&#32;2)&#32;==&#32;0)
3732 &#32;&#32;&#32;&#32;{
3733 &#32;&#32;&#32;&#32;&#32;&#32;__distr_type&#32;__d{0,&#32;1};
3734 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i++,&#32;__first&#32;+&#32;__d(__g));
3735 &#32;&#32;&#32;&#32;}
3736 
3737 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;we&#32;know&#32;that&#32;__last&#32;-&#32;__i&#32;is&#32;even,&#32;so&#32;we&#32;do&#32;the&#32;rest&#32;in&#32;pairs,</emphasis>
3738 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;using&#32;a&#32;single&#32;distribution&#32;invocation&#32;to&#32;produce&#32;swap&#32;positions</emphasis>
3739 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;two&#32;successive&#32;elements&#32;at&#32;a&#32;time:</emphasis>
3740 
3741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__i&#32;!=&#32;__last)
3742 &#32;&#32;&#32;&#32;{
3743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__uc_type&#32;__swap_range&#32;=&#32;__uc_type(__i&#32;-&#32;__first)&#32;+&#32;1;
3744 
3745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;__uc_type,&#32;__uc_type&gt;&#32;__pospos&#32;=
3746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gen_two_uniform_ints(__swap_range,&#32;__swap_range&#32;+&#32;1,&#32;__g);
3747 
3748 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i++,&#32;__first&#32;+&#32;__pospos.first);
3749 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i++,&#32;__first&#32;+&#32;__pospos.second);
3750 &#32;&#32;&#32;&#32;}
3751 
3752 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
3753 &#32;&#32;&#32;&#32;&#32;&#32;}
3754 
3755 &#32;&#32;&#32;&#32;&#32;&#32;__distr_type&#32;__d;
3756 
3757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_RandomAccessIterator&#32;__i&#32;=&#32;__first&#32;+&#32;1;&#32;__i&#32;!=&#32;__last;&#32;++__i)
3758 &#32;&#32;&#32;&#32;std::iter_swap(__i,&#32;__first&#32;+&#32;__d(__g,&#32;__p_type(0,&#32;__i&#32;-&#32;__first)));
3759 &#32;&#32;&#32;&#32;}
3760 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;USE&#32;C99_STDINT</emphasis>
3761 
3762 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
3763 
3764 _GLIBCXX_BEGIN_NAMESPACE_ALGO
3765 
3778 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Function&gt;
3779 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3780 &#32;&#32;&#32;&#32;_Function
3781 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_Function&#32;__f)
3782 &#32;&#32;&#32;&#32;{
3783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3784 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
3785 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
3787 &#32;&#32;&#32;&#32;__f(*__first);
3788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__f;&#32;<emphasis role="comment">//&#32;N.B.&#32;[alg.foreach]&#32;says&#32;std::move(f)&#32;but&#32;it&apos;s&#32;redundant.</emphasis>
3789 &#32;&#32;&#32;&#32;}
3790 
3791 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
3804 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Function&gt;
3805 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3806 &#32;&#32;&#32;&#32;_InputIterator
3807 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5bd8d5cb6d63d354aff5188eb885e8b2">for_each_n</link>(_InputIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Function&#32;__f)
3808 &#32;&#32;&#32;&#32;{
3809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;std::__size_to_integer(__n);
3810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::iterator_category;
3811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_base_of_v&lt;random_access_iterator_tag,&#32;_Cat&gt;)
3812 &#32;&#32;&#32;&#32;{
3813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2&#32;&lt;=&#32;0)
3814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__last&#32;=&#32;__first&#32;+&#32;__n2;
3816 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each</link>(__first,&#32;__last,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__f));
3817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3818 &#32;&#32;&#32;&#32;}
3819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3820 &#32;&#32;&#32;&#32;{
3821 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n2--&gt;0)
3822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__f(*__first);
3824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
3825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3827 &#32;&#32;&#32;&#32;}
3828 &#32;&#32;&#32;&#32;}
3829 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
3830 
3840 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3841 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3842 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_InputIterator
3843 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
3844 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
3845 &#32;&#32;&#32;&#32;{
3846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3847 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
3848 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
3849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,&#32;_Tp&gt;)
3850 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3851 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__find_if(__first,&#32;__last,
3852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equals_val(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));
3853 &#32;&#32;&#32;&#32;}
3854 
3865 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_Predicate&gt;
3866 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3867 &#32;&#32;&#32;&#32;inline&#32;_InputIterator
3868 &#32;&#32;&#32;&#32;find_if(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
3869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
3870 &#32;&#32;&#32;&#32;{
3871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3872 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
3873 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
3874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
3875 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3876 
3877 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__find_if(__first,&#32;__last,
3878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__pred_iter(__pred));
3879 &#32;&#32;&#32;&#32;}
3880 
3897 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_ForwardIterator&gt;
3898 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3899 &#32;&#32;&#32;&#32;_InputIterator
3900 &#32;&#32;&#32;&#32;find_first_of(_InputIterator&#32;__first1,&#32;_InputIterator&#32;__last1,
3901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__first2,&#32;_ForwardIterator&#32;__last2)
3902 &#32;&#32;&#32;&#32;{
3903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3904 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
3905 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
3906 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
3907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
3908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
3909 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
3910 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
3911 
3912 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1)
3913 &#32;&#32;&#32;&#32;for&#32;(_ForwardIterator&#32;__iter&#32;=&#32;__first2;&#32;__iter&#32;!=&#32;__last2;&#32;++__iter)
3914 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(*__first1&#32;==&#32;*__iter)
3915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__first1;
3916 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__last1;
3917 &#32;&#32;&#32;&#32;}
3918 
3938 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_ForwardIterator,
3939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_BinaryPredicate&gt;
3940 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3941 &#32;&#32;&#32;&#32;_InputIterator
3942 &#32;&#32;&#32;&#32;find_first_of(_InputIterator&#32;__first1,&#32;_InputIterator&#32;__last1,
3943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__first2,&#32;_ForwardIterator&#32;__last2,
3944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp)
3945 &#32;&#32;&#32;&#32;{
3946 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3947 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
3948 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
3949 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
3950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
3951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
3952 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
3953 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
3954 
3955 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1)
3956 &#32;&#32;&#32;&#32;for&#32;(_ForwardIterator&#32;__iter&#32;=&#32;__first2;&#32;__iter&#32;!=&#32;__last2;&#32;++__iter)
3957 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__comp(*__first1,&#32;*__iter))
3958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__first1;
3959 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__last1;
3960 &#32;&#32;&#32;&#32;}
3961 
3971 &#32;&#32;template&lt;typename&#32;_ForwardIterator&gt;
3972 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3973 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
3974 &#32;&#32;&#32;&#32;adjacent_find(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
3975 &#32;&#32;&#32;&#32;{
3976 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
3977 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
3978 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualityComparableConcept&lt;
3979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
3980 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
3981 
3982 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__adjacent_find(__first,&#32;__last,
3983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equal_to_iter());
3984 &#32;&#32;&#32;&#32;}
3985 
3997 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_BinaryPredicate&gt;
3998 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3999 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
4000 &#32;&#32;&#32;&#32;adjacent_find(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
4002 &#32;&#32;&#32;&#32;{
4003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4004 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
4005 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
4006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
4007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
4008 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4009 
4010 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__adjacent_find(__first,&#32;__last,
4011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__binary_pred));
4012 &#32;&#32;&#32;&#32;}
4013 
4023 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_Tp&gt;
4024 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4025 &#32;&#32;&#32;&#32;inline&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::difference_type
4026 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;const&#32;_Tp&amp;&#32;__value)
4027 &#32;&#32;&#32;&#32;{
4028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4029 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
4030 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
4031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,&#32;_Tp&gt;)
4032 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4033 
4034 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__count_if(__first,&#32;__last,
4035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equals_val(__value));
4036 &#32;&#32;&#32;&#32;}
4037 
4047 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_Predicate&gt;
4048 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4049 &#32;&#32;&#32;&#32;inline&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::difference_type
4050 &#32;&#32;&#32;&#32;count_if(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_Predicate&#32;__pred)
4051 &#32;&#32;&#32;&#32;{
4052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4053 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
4054 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
4055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
4056 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4057 
4058 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__count_if(__first,&#32;__last,
4059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__pred_iter(__pred));
4060 &#32;&#32;&#32;&#32;}
4061 
4088 &#32;&#32;template&lt;typename&#32;_ForwardIterator1,&#32;typename&#32;_ForwardIterator2&gt;
4089 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4090 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator1
4091 &#32;&#32;&#32;&#32;search(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
4092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2)
4093 &#32;&#32;&#32;&#32;{
4094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4095 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator1&gt;)
4096 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator2&gt;)
4097 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
4098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type,
4099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::value_type&gt;)
4100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
4101 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
4102 
4103 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__search(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
4104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equal_to_iter());
4105 &#32;&#32;&#32;&#32;}
4106 
4128 &#32;&#32;template&lt;typename&#32;_ForwardIterator1,&#32;typename&#32;_ForwardIterator2,
4129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_BinaryPredicate&gt;
4130 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4131 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator1
4132 &#32;&#32;&#32;&#32;search(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
4133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
4134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;&#32;__predicate)
4135 &#32;&#32;&#32;&#32;{
4136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator1&gt;)
4138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator2&gt;)
4139 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
4140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type,
4141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::value_type&gt;)
4142 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
4143 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
4144 
4145 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__search(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
4146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__predicate));
4147 &#32;&#32;&#32;&#32;}
4148 
4164 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Integer,&#32;typename&#32;_Tp&gt;
4165 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4166 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
4167 &#32;&#32;&#32;&#32;search_n(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4169 &#32;&#32;&#32;&#32;{
4170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4171 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
4172 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
4173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
4174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4175 
4176 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__search_n(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
4177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equals_val(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));
4178 &#32;&#32;&#32;&#32;}
4179 
4180 
4198 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Integer,&#32;typename&#32;_Tp,
4199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_BinaryPredicate&gt;
4200 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4201 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
4202 &#32;&#32;&#32;&#32;search_n(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;const&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
4204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
4205 &#32;&#32;&#32;&#32;{
4206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4207 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
4208 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_BinaryPredicate,
4209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
4210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4211 
4212 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__search_n(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
4213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_val(__binary_pred,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));
4214 &#32;&#32;&#32;&#32;}
4215 
4216 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
4224 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Searcher&gt;
4225 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4226 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
4227 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Searcher&amp;&#32;__searcher)
4229 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__searcher(__first,&#32;__last).first;&#32;}
4230 <emphasis role="preprocessor">#endif</emphasis>
4231 
4248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
4249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryOperation&gt;
4250 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4251 &#32;&#32;&#32;&#32;_OutputIterator
4252 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
4253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_UnaryOperation&#32;__unary_op)
4254 &#32;&#32;&#32;&#32;{
4255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4256 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
4257 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;the&#32;type&#32;returned&#32;by&#32;a&#32;_UnaryOperation&quot;</emphasis>
4259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__typeof__(__unary_op(*__first))&gt;)
4260 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4261 
4262 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;(<emphasis role="keywordtype">void</emphasis>)++__result)
4263 &#32;&#32;&#32;&#32;*__result&#32;=&#32;__unary_op(*__first);
4264 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__result;
4265 &#32;&#32;&#32;&#32;}
4266 
4286 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
4287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_BinaryOperation&gt;
4288 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4289 &#32;&#32;&#32;&#32;_OutputIterator
4290 &#32;&#32;&#32;&#32;transform(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
4291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_OutputIterator&#32;__result,
4292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op)
4293 &#32;&#32;&#32;&#32;{
4294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4295 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
4296 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
4297 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;the&#32;type&#32;returned&#32;by&#32;a&#32;_BinaryOperation&quot;</emphasis>
4299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__typeof__(__binary_op(*__first1,*__first2))&gt;)
4300 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
4301 
4302 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;(<emphasis role="keywordtype">void</emphasis>)++__first2,&#32;++__result)
4303 &#32;&#32;&#32;&#32;*__result&#32;=&#32;__binary_op(*__first1,&#32;*__first2);
4304 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__result;
4305 &#32;&#32;&#32;&#32;}
4306 
4320 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Tp&gt;
4321 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4322 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4323 &#32;&#32;&#32;&#32;replace(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_Tp&amp;&#32;__old_value,&#32;const&#32;_Tp&amp;&#32;__new_value)
4325 &#32;&#32;&#32;&#32;{
4326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4327 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
4328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
4329 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
4330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
4331 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp,
4332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
4333 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4334 
4335 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
4336 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(*__first&#32;==&#32;__old_value)
4337 &#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;__new_value;
4338 &#32;&#32;&#32;&#32;}
4339 
4353 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Predicate,&#32;typename&#32;_Tp&gt;
4354 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4355 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4356 &#32;&#32;&#32;&#32;replace_if(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;const&#32;_Tp&amp;&#32;__new_value)
4358 &#32;&#32;&#32;&#32;{
4359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4360 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
4361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
4362 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp,
4363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
4364 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
4365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
4366 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4367 
4368 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
4369 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__pred(*__first))
4370 &#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;__new_value;
4371 &#32;&#32;&#32;&#32;}
4372 
4386 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Generator&gt;
4387 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
4389 &#32;&#32;&#32;&#32;generate(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Generator&#32;__gen)
4391 &#32;&#32;&#32;&#32;{
4392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4393 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
4394 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_GeneratorConcept&lt;_Generator,
4395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
4396 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4397 
4398 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
4399 &#32;&#32;&#32;&#32;*__first&#32;=&#32;__gen();
4400 &#32;&#32;&#32;&#32;}
4401 
4417 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
4418 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;865.&#32;More&#32;algorithms&#32;that&#32;throw&#32;away&#32;information</emphasis>
4419 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;426.&#32;search_n(),&#32;fill_n(),&#32;and&#32;generate_n()&#32;with&#32;negative&#32;n</emphasis>
4420 &#32;&#32;template&lt;typename&#32;_OutputIterator,&#32;typename&#32;_Size,&#32;typename&#32;_Generator&gt;
4421 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4422 &#32;&#32;&#32;&#32;_OutputIterator
4423 &#32;&#32;&#32;&#32;generate_n(_OutputIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Generator&#32;__gen)
4424 &#32;&#32;&#32;&#32;{
4425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4426 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;the&#32;type&#32;returned&#32;by&#32;a&#32;_Generator&quot;</emphasis>
4428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__typeof__(__gen())&gt;)
4429 
4430 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;__decltype(<link linkend="_namespacestd">std</link>::__size_to_integer(__n))&#32;_IntSize;
4431 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_IntSize&#32;__niter&#32;=&#32;<link linkend="_namespacestd">std</link>::__size_to_integer(__n);
4432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__niter&#32;&gt;&#32;0;&#32;--__niter,&#32;(<emphasis role="keywordtype">void</emphasis>)&#32;++__first)
4433 &#32;&#32;&#32;&#32;*__first&#32;=&#32;__gen();
4434 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__first;
4435 &#32;&#32;&#32;&#32;}
4436 
4458 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_OutputIterator&gt;
4459 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4460 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
4461 &#32;&#32;&#32;&#32;unique_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
4462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
4463 &#32;&#32;&#32;&#32;{
4464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4465 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
4466 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
4468 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualityComparableConcept&lt;
4469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
4470 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4471 
4472 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__last)
4473 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__result;
4474 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__unique_copy(__first,&#32;__last,&#32;__result,
4475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_equal_to_iter(),
4476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first),
4477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__result));
4478 &#32;&#32;&#32;&#32;}
4479 
4499 &#32;&#32;template&lt;typename&#32;_InputIterator,&#32;typename&#32;_OutputIterator,
4500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_BinaryPredicate&gt;
4501 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4502 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
4503 &#32;&#32;&#32;&#32;unique_copy(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
4504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
4505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
4506 &#32;&#32;&#32;&#32;{
4507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements&#32;--&#32;predicates&#32;checked&#32;later</emphasis>
4508 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator&gt;)
4509 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&gt;)
4511 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4512 
4513 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__last)
4514 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__result;
4515 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__unique_copy(__first,&#32;__last,&#32;__result,
4516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__binary_pred),
4517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first),
4518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__result));
4519 &#32;&#32;&#32;&#32;}
4520 
4521 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201103L&#32;||&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
4522 <emphasis role="preprocessor">#if&#32;_GLIBCXX_HOSTED</emphasis>
4538 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
4539 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a27c86fa1c81ae6cc88e4bd0e05887a87">_GLIBCXX14_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::shuffle&quot;</emphasis>)
4540 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4541 &#32;&#32;&#32;&#32;random_shuffle(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
4542 &#32;&#32;&#32;&#32;{
4543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4544 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4546 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4547 
4548 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;!=&#32;__last)
4549 &#32;&#32;&#32;&#32;for&#32;(_RandomAccessIterator&#32;__i&#32;=&#32;__first&#32;+&#32;1;&#32;__i&#32;!=&#32;__last;&#32;++__i)
4550 &#32;&#32;&#32;&#32;&#32;&#32;{
4551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;rand()&#32;%&#32;N&#32;is&#32;not&#32;uniformly&#32;distributed</emphasis>
4552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__j&#32;=&#32;__first
4553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::rand()&#32;%&#32;((__i&#32;-&#32;__first)&#32;+&#32;1);
4554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;!=&#32;__j)
4555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i,&#32;__j);
4556 &#32;&#32;&#32;&#32;&#32;&#32;}
4557 &#32;&#32;&#32;&#32;}
4558 <emphasis role="preprocessor">#endif</emphasis>
4559 
4578 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
4579 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a27c86fa1c81ae6cc88e4bd0e05887a87">_GLIBCXX14_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::shuffle&quot;</emphasis>)
4580 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>
4581 &#32;&#32;&#32;&#32;random_shuffle(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
4582 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
4583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&amp;&amp;&#32;__rand)
4584 #<emphasis role="keywordflow">else</emphasis>
4585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&amp;&#32;__rand)
4586 <emphasis role="preprocessor">#endif</emphasis>
4587 &#32;&#32;&#32;&#32;{
4588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4589 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4591 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4592 
4593 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__last)
4594 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
4595 &#32;&#32;&#32;&#32;&#32;&#32;for&#32;(_RandomAccessIterator&#32;__i&#32;=&#32;__first&#32;+&#32;1;&#32;__i&#32;!=&#32;__last;&#32;++__i)
4596 &#32;&#32;&#32;&#32;{
4597 &#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__j&#32;=&#32;__first&#32;+&#32;__rand((__i&#32;-&#32;__first)&#32;+&#32;1);
4598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;!=&#32;__j)
4599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__i,&#32;__j);
4600 &#32;&#32;&#32;&#32;}
4601 &#32;&#32;&#32;&#32;}
4602 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11&#32;||&#32;USE_DEPRECATED</emphasis>
4603 
4619 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
4620 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4621 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
4622 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
4623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;&#32;&#32;__pred)
4624 &#32;&#32;&#32;&#32;{
4625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4626 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
4627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
4628 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_UnaryPredicateConcept&lt;_Predicate,
4629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
4630 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4631 
4632 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__partition(__first,&#32;__last,&#32;__pred,
4633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__iterator_category(__first));
4634 &#32;&#32;&#32;&#32;}
4635 
4636 
4653 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator&gt;
4654 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4655 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4656 &#32;&#32;&#32;&#32;partial_sort(_RandomAccessIterator&#32;__first,
4657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__middle,
4658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last)
4659 &#32;&#32;&#32;&#32;{
4660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4661 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4663 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
4664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
4665 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__middle);
4666 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__middle,&#32;__last);
4667 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
4668 
4669 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__partial_sort(__first,&#32;__middle,&#32;__last,
4670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
4671 &#32;&#32;&#32;&#32;}
4672 
4692 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
4693 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4694 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4695 &#32;&#32;&#32;&#32;partial_sort(_RandomAccessIterator&#32;__first,
4696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__middle,
4697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,
4698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
4699 &#32;&#32;&#32;&#32;{
4700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4701 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4703 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
4704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type,
4705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
4706 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__middle);
4707 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__middle,&#32;__last);
4708 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
4709 
4710 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__partial_sort(__first,&#32;__middle,&#32;__last,
4711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
4712 &#32;&#32;&#32;&#32;}
4713 
4729 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator&gt;
4730 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4731 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4732 &#32;&#32;&#32;&#32;nth_element(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__nth,
4733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last)
4734 &#32;&#32;&#32;&#32;{
4735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4736 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4738 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
4739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
4740 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__nth);
4741 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__nth,&#32;__last);
4742 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
4743 
4744 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__last&#32;||&#32;__nth&#32;==&#32;__last)
4745 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
4746 
4747 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__introselect(__first,&#32;__nth,&#32;__last,
4748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__lg(__last&#32;-&#32;__first)&#32;*&#32;2,
4749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
4750 &#32;&#32;&#32;&#32;}
4751 
4769 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
4770 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4771 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4772 &#32;&#32;&#32;&#32;nth_element(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__nth,
4773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
4774 &#32;&#32;&#32;&#32;{
4775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4776 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4778 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
4779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type,
4780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
4781 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__nth);
4782 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__nth,&#32;__last);
4783 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
4784 
4785 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__first&#32;==&#32;__last&#32;||&#32;__nth&#32;==&#32;__last)
4786 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
4787 
4788 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__introselect(__first,&#32;__nth,&#32;__last,
4789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__lg(__last&#32;-&#32;__first)&#32;*&#32;2,
4790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
4791 &#32;&#32;&#32;&#32;}
4792 
4807 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator&gt;
4808 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4809 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4810 &#32;&#32;&#32;&#32;sort(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
4811 &#32;&#32;&#32;&#32;{
4812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4813 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4815 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
4816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
4817 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4818 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
4819 
4820 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__sort(__first,&#32;__last,&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
4821 &#32;&#32;&#32;&#32;}
4822 
4838 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
4839 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4840 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4841 &#32;&#32;&#32;&#32;sort(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
4842 &#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
4843 &#32;&#32;&#32;&#32;{
4844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4845 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
4846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
4847 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
4848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type,
4849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
4850 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
4851 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
4852 
4853 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__sort(__first,&#32;__last,&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
4854 &#32;&#32;&#32;&#32;}
4855 
4856 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
4857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_Compare&gt;
4858 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4859 &#32;&#32;&#32;&#32;_OutputIterator
4860 &#32;&#32;&#32;&#32;__merge(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
4861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
4862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
4863 &#32;&#32;&#32;&#32;{
4864 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
4865 &#32;&#32;&#32;&#32;{
4866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
4867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first2;
4869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
4870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
4874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
4875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4876 &#32;&#32;&#32;&#32;&#32;&#32;++__result;
4877 &#32;&#32;&#32;&#32;}
4878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first2,&#32;__last2,
4879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first1,&#32;__last1,&#32;__result));
4880 &#32;&#32;&#32;&#32;}
4881 
4901 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
4902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
4903 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4904 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
4905 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
4906 &#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
4907 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
4908 &#32;&#32;&#32;&#32;{
4909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4910 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
4911 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
4912 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
4914 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
4916 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
4917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
4918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)&#32;
4919 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first1,&#32;__last1,&#32;__first2);
4920 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first2,&#32;__last2,&#32;__first1);
4921 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first1,&#32;__last1);
4922 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first2,&#32;__last2);
4923 
4924 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__merge(__first1,&#32;__last1,
4925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
4926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
4927 &#32;&#32;&#32;&#32;}
4928 
4952 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
4953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_Compare&gt;
4954 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
4955 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
4956 &#32;&#32;&#32;&#32;merge(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
4957 &#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
4958 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
4959 &#32;&#32;&#32;&#32;{
4960 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
4961 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
4962 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
4963 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
4965 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
4966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
4967 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
4968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
4969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
4970 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first1,&#32;__last1,&#32;__first2,&#32;__comp);
4971 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first2,&#32;__last2,&#32;__first1,&#32;__comp);
4972 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first1,&#32;__last1,&#32;__comp);
4973 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first2,&#32;__last2,&#32;__comp);
4974 
4975 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__merge(__first1,&#32;__last1,
4976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
4977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
4978 &#32;&#32;&#32;&#32;}
4979 
4980 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
4981 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
4982 &#32;&#32;&#32;&#32;__stable_sort(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
4983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
4984 &#32;&#32;&#32;&#32;{
4985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
4986 &#32;&#32;&#32;&#32;_ValueType;
4987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
4988 &#32;&#32;&#32;&#32;_DistanceType;
4989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Temporary_buffer&lt;_RandomAccessIterator,&#32;_ValueType&gt;&#32;_TmpBuf;
4990 
4991 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
4992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
4993 
4994 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__stable_sort_adaptive&#32;sorts&#32;the&#32;range&#32;in&#32;two&#32;halves,</emphasis>
4995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;the&#32;buffer&#32;only&#32;needs&#32;to&#32;fit&#32;half&#32;the&#32;range&#32;at&#32;once.</emphasis>
4996 &#32;&#32;&#32;&#32;&#32;&#32;_TmpBuf&#32;__buf(__first,&#32;(__last&#32;-&#32;__first&#32;+&#32;1)&#32;/&#32;2);
4997 
4998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__buf.begin()&#32;==&#32;0)
4999 &#32;&#32;&#32;&#32;std::__inplace_stable_sort(__first,&#32;__last,&#32;__comp);
5000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5001 &#32;&#32;&#32;&#32;std::__stable_sort_adaptive(__first,&#32;__last,&#32;__buf.begin(),
5002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(__buf.size()),&#32;__comp);
5003 &#32;&#32;&#32;&#32;}
5004 
5022 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
5023 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
5024 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
5025 &#32;&#32;&#32;&#32;{
5026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5027 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
5028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
5029 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
5030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
5031 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
5032 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
5033 
5034 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_A::__stable_sort(__first,&#32;__last,
5035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
5036 &#32;&#32;&#32;&#32;}
5037 
5056 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
5057 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
5058 &#32;&#32;&#32;&#32;stable_sort(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
5059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
5060 &#32;&#32;&#32;&#32;{
5061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5062 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
5063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
5064 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type,
5066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
5067 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
5068 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
5069 
5070 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_A::__stable_sort(__first,&#32;__last,
5071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
5072 &#32;&#32;&#32;&#32;}
5073 
5074 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,
5076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Compare&gt;
5077 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5078 &#32;&#32;&#32;&#32;_OutputIterator
5079 &#32;&#32;&#32;&#32;__set_union(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
5082 &#32;&#32;&#32;&#32;{
5083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
5084 &#32;&#32;&#32;&#32;{
5085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first1,&#32;__first2))
5086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
5088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
5091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first2;
5093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
5098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5101 &#32;&#32;&#32;&#32;&#32;&#32;++__result;
5102 &#32;&#32;&#32;&#32;}
5103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first2,&#32;__last2,
5104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first1,&#32;__last1,&#32;__result));
5105 &#32;&#32;&#32;&#32;}
5106 
5126 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
5127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
5128 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5129 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
5130 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
5133 &#32;&#32;&#32;&#32;{
5134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5135 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5137 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5139 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5141 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5144 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first1,&#32;__last1,&#32;__first2);
5148 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first2,&#32;__last2,&#32;__first1);
5149 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first1,&#32;__last1);
5150 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first2,&#32;__last2);
5151 
5152 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_union(__first1,&#32;__last1,
5153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
5155 &#32;&#32;&#32;&#32;}
5156 
5177 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_Compare&gt;
5179 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5180 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
5181 &#32;&#32;&#32;&#32;set_union(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
5184 &#32;&#32;&#32;&#32;{
5185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5186 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5187 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5188 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5190 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5192 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5195 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5198 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first1,&#32;__last1,&#32;__first2,&#32;__comp);
5199 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first2,&#32;__last2,&#32;__first1,&#32;__comp);
5200 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first1,&#32;__last1,&#32;__comp);
5201 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first2,&#32;__last2,&#32;__comp);
5202 
5203 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_union(__first1,&#32;__last1,
5204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
5206 &#32;&#32;&#32;&#32;}
5207 
5208 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,
5210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Compare&gt;
5211 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5212 &#32;&#32;&#32;&#32;_OutputIterator
5213 &#32;&#32;&#32;&#32;__set_intersection(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
5216 &#32;&#32;&#32;&#32;{
5217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
5218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first1,&#32;__first2))
5219 &#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
5221 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5223 &#32;&#32;&#32;&#32;&#32;&#32;{
5224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
5225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
5228 &#32;&#32;&#32;&#32;&#32;&#32;}
5229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
5230 &#32;&#32;&#32;&#32;}
5231 
5250 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
5251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
5252 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5253 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
5254 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
5257 &#32;&#32;&#32;&#32;{
5258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5259 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5260 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5261 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5266 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5269 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first1,&#32;__last1,&#32;__first2);
5270 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first2,&#32;__last2,&#32;__first1);
5271 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first1,&#32;__last1);
5272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first2,&#32;__last2);
5273 
5274 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_intersection(__first1,&#32;__last1,
5275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
5277 &#32;&#32;&#32;&#32;}
5278 
5300 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_Compare&gt;
5302 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5303 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
5304 &#32;&#32;&#32;&#32;set_intersection(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
5307 &#32;&#32;&#32;&#32;{
5308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5309 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5310 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5311 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5313 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5316 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5319 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first1,&#32;__last1,&#32;__first2,&#32;__comp);
5320 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first2,&#32;__last2,&#32;__first1,&#32;__comp);
5321 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first1,&#32;__last1,&#32;__comp);
5322 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first2,&#32;__last2,&#32;__comp);
5323 
5324 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_intersection(__first1,&#32;__last1,
5325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
5327 &#32;&#32;&#32;&#32;}
5328 
5329 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,
5331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Compare&gt;
5332 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5333 &#32;&#32;&#32;&#32;_OutputIterator
5334 &#32;&#32;&#32;&#32;__set_difference(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
5337 &#32;&#32;&#32;&#32;{
5338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
5339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first1,&#32;__first2))
5340 &#32;&#32;&#32;&#32;&#32;&#32;{
5341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
5342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
5344 &#32;&#32;&#32;&#32;&#32;&#32;}
5345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
5346 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5348 &#32;&#32;&#32;&#32;&#32;&#32;{
5349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5351 &#32;&#32;&#32;&#32;&#32;&#32;}
5352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first1,&#32;__last1,&#32;__result);
5353 &#32;&#32;&#32;&#32;}
5354 
5375 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
5376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
5377 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5378 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
5379 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
5382 &#32;&#32;&#32;&#32;{
5383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5384 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5385 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5388 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5391 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)&#32;
5394 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first1,&#32;__last1,&#32;__first2);
5395 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first2,&#32;__last2,&#32;__first1);
5396 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first1,&#32;__last1);
5397 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first2,&#32;__last2);
5398 
5399 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_difference(__first1,&#32;__last1,
5400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
5402 &#32;&#32;&#32;&#32;}
5403 
5427 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_Compare&gt;
5429 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5430 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
5431 &#32;&#32;&#32;&#32;set_difference(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
5434 &#32;&#32;&#32;&#32;{
5435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5436 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5437 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5438 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5440 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5443 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5446 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first1,&#32;__last1,&#32;__first2,&#32;__comp);
5447 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first2,&#32;__last2,&#32;__first1,&#32;__comp);
5448 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first1,&#32;__last1,&#32;__comp);
5449 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first2,&#32;__last2,&#32;__comp);
5450 
5451 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_difference(__first1,&#32;__last1,
5452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
5454 &#32;&#32;&#32;&#32;}
5455 
5456 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,
5458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Compare&gt;
5459 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5460 &#32;&#32;&#32;&#32;_OutputIterator
5461 &#32;&#32;&#32;&#32;__set_symmetric_difference(_InputIterator1&#32;__first1,
5462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator1&#32;__last1,
5463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,
5464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__last2,
5465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
5466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
5467 &#32;&#32;&#32;&#32;{
5468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
5469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first1,&#32;__first2))
5470 &#32;&#32;&#32;&#32;&#32;&#32;{
5471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
5472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
5474 &#32;&#32;&#32;&#32;&#32;&#32;}
5475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
5476 &#32;&#32;&#32;&#32;&#32;&#32;{
5477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first2;
5478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
5480 &#32;&#32;&#32;&#32;&#32;&#32;}
5481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5482 &#32;&#32;&#32;&#32;&#32;&#32;{
5483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
5484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
5485 &#32;&#32;&#32;&#32;&#32;&#32;}
5486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first2,&#32;__last2,&#32;
5487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first1,&#32;__last1,&#32;__result));
5488 &#32;&#32;&#32;&#32;}
5489 
5508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
5509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
5510 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5511 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
5512 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result)
5515 &#32;&#32;&#32;&#32;{
5516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5517 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5518 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5519 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5521 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5523 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5526 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
5527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)&#32;
5529 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first1,&#32;__last1,&#32;__first2);
5530 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1adae3ef4448d4f709e81ef98897480e14">__glibcxx_requires_sorted_set</link>(__first2,&#32;__last2,&#32;__first1);
5531 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first1,&#32;__last1);
5532 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aefc388f0df6cadad2ef5c5c6e8360ebc">__glibcxx_requires_irreflexive2</link>(__first2,&#32;__last2);
5533 
5534 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_symmetric_difference(__first1,&#32;__last1,
5535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
5537 &#32;&#32;&#32;&#32;}
5538 
5560 &#32;&#32;template&lt;typename&#32;_InputIterator1,&#32;typename&#32;_InputIterator2,
5561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_OutputIterator,&#32;typename&#32;_Compare&gt;
5562 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
5563 &#32;&#32;&#32;&#32;inline&#32;_OutputIterator
5564 &#32;&#32;&#32;&#32;set_symmetric_difference(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
5565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
5566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,
5567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
5568 &#32;&#32;&#32;&#32;{
5569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5570 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
5571 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
5572 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5574 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OutputIterator,
5575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5576 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
5578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
5579 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator2&gt;::value_type,
5581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_InputIterator1&gt;::value_type&gt;)
5582 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first1,&#32;__last1,&#32;__first2,&#32;__comp);
5583 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1afff34f2e90f64287d0bd3eb6be432ce4">__glibcxx_requires_sorted_set_pred</link>(__first2,&#32;__last2,&#32;__first1,&#32;__comp);
5584 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first1,&#32;__last1,&#32;__comp);
5585 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a238c23dabd1c7ece6fbd4c95538fb6d8">__glibcxx_requires_irreflexive_pred2</link>(__first2,&#32;__last2,&#32;__comp);
5586 
5587 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__set_symmetric_difference(__first1,&#32;__last1,
5588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,&#32;__result,
5589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
5590 &#32;&#32;&#32;&#32;}
5591 
5592 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Compare&gt;
5593 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5594 &#32;&#32;&#32;&#32;_ForwardIterator
5595 &#32;&#32;&#32;&#32;__min_element(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
5596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
5597 &#32;&#32;&#32;&#32;{
5598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
5599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
5600 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result&#32;=&#32;__first;
5601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
5602 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first,&#32;__result))
5603 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__first;
5604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
5605 &#32;&#32;&#32;&#32;}
5606 
5614 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
5615 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5616 &#32;&#32;&#32;&#32;_ForwardIterator
5617 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
5618 &#32;&#32;&#32;&#32;{
5619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5620 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
5621 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
5622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
5623 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
5624 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
5625 
5626 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__min_element(__first,&#32;__last,
5627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
5628 &#32;&#32;&#32;&#32;}
5629 
5639 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Compare&gt;
5640 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5641 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
5642 &#32;&#32;&#32;&#32;min_element(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
5643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
5644 &#32;&#32;&#32;&#32;{
5645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5646 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
5647 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
5649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
5650 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
5651 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
5652 
5653 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__min_element(__first,&#32;__last,
5654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
5655 &#32;&#32;&#32;&#32;}
5656 
5657 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Compare&gt;
5658 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5659 &#32;&#32;&#32;&#32;_ForwardIterator
5660 &#32;&#32;&#32;&#32;__max_element(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
5661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
5662 &#32;&#32;&#32;&#32;{
5663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
5664 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result&#32;=&#32;__first;
5665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
5666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__result,&#32;__first))
5667 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;__first;
5668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
5669 &#32;&#32;&#32;&#32;}
5670 
5678 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
5679 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5680 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
5681 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
5682 &#32;&#32;&#32;&#32;{
5683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5684 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
5685 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
5686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
5687 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
5688 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
5689 
5690 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__max_element(__first,&#32;__last,
5691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_less_iter());
5692 &#32;&#32;&#32;&#32;}
5693 
5703 &#32;&#32;template&lt;typename&#32;_ForwardIterator,&#32;typename&#32;_Compare&gt;
5704 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5705 &#32;&#32;&#32;&#32;inline&#32;_ForwardIterator
5706 &#32;&#32;&#32;&#32;max_element(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
5707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
5708 &#32;&#32;&#32;&#32;{
5709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
5710 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
5711 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BinaryPredicateConcept&lt;_Compare,
5712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,
5713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;)
5714 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
5715 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
5716 
5717 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;_GLIBCXX_STD_A::__max_element(__first,&#32;__last,
5718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_iter(__comp));
5719 &#32;&#32;&#32;&#32;}
5720 
5721 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
5722 &#32;&#32;<emphasis role="comment">//&#32;N2722&#32;+&#32;DR&#32;915.</emphasis>
5723 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
5724 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5725 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
5726 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(initializer_list&lt;_Tp&gt;&#32;__l)
5727 &#32;&#32;&#32;&#32;{
5728 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__l.begin(),&#32;__l.end());
5729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_GLIBCXX_STD_A::__min_element(__l.begin(),&#32;__l.end(),
5730 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a0079ef487bb9b6eed21338bd55bd6c82">__gnu_cxx::__ops::__iter_less_iter</link>());
5731 &#32;&#32;&#32;&#32;}
5732 
5733 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
5734 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5735 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
5736 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(initializer_list&lt;_Tp&gt;&#32;__l,&#32;_Compare&#32;__comp)
5737 &#32;&#32;&#32;&#32;{
5738 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__l.begin(),&#32;__l.end(),&#32;__comp);
5739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_GLIBCXX_STD_A::__min_element(__l.begin(),&#32;__l.end(),
5740 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__comp));
5741 &#32;&#32;&#32;&#32;}
5742 
5743 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
5744 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5745 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
5746 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(initializer_list&lt;_Tp&gt;&#32;__l)
5747 &#32;&#32;&#32;&#32;{
5748 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__l.begin(),&#32;__l.end());
5749 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_GLIBCXX_STD_A::__max_element(__l.begin(),&#32;__l.end(),
5750 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a0079ef487bb9b6eed21338bd55bd6c82">__gnu_cxx::__ops::__iter_less_iter</link>());
5751 &#32;&#32;&#32;&#32;}
5752 
5753 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
5754 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
5755 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
5756 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(initializer_list&lt;_Tp&gt;&#32;__l,&#32;_Compare&#32;__comp)
5757 &#32;&#32;&#32;&#32;{
5758 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__l.begin(),&#32;__l.end(),&#32;__comp);
5759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_GLIBCXX_STD_A::__max_element(__l.begin(),&#32;__l.end(),
5760 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__comp));
5761 &#32;&#32;&#32;&#32;}
5762 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
5763 
5764 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
5766 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,
5767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomBitGenerator&gt;
5768 &#32;&#32;&#32;&#32;_RandomAccessIterator
5769 &#32;&#32;&#32;&#32;__sample(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;input_iterator_tag,
5770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__out,&#32;random_access_iterator_tag,
5771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;__n,&#32;_UniformRandomBitGenerator&amp;&amp;&#32;__g)
5772 &#32;&#32;&#32;&#32;{
5773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__distrib_type&#32;=&#32;uniform_int_distribution&lt;_Size&gt;;
5774 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__param_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__distrib_type::param_type;
5775 &#32;&#32;&#32;&#32;&#32;&#32;__distrib_type&#32;__d{};
5776 &#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;__sample_sz&#32;=&#32;0;
5777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;__sample_sz&#32;!=&#32;__n)
5778 &#32;&#32;&#32;&#32;{
5779 &#32;&#32;&#32;&#32;&#32;&#32;__out[__sample_sz++]&#32;=&#32;*__first;
5780 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
5781 &#32;&#32;&#32;&#32;}
5782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__pop_sz&#32;=&#32;__sample_sz;&#32;__first&#32;!=&#32;__last;
5783 &#32;&#32;&#32;&#32;&#32;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__pop_sz)
5784 &#32;&#32;&#32;&#32;{
5785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__d(__g,&#32;__param_type{0,&#32;__pop_sz});
5786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k&#32;&lt;&#32;__n)
5787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__out[__k]&#32;=&#32;*__first;
5788 &#32;&#32;&#32;&#32;}
5789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out&#32;+&#32;__sample_sz;
5790 &#32;&#32;&#32;&#32;}
5791 
5793 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat,
5794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomBitGenerator&gt;
5795 &#32;&#32;&#32;&#32;_OutputIterator
5796 &#32;&#32;&#32;&#32;__sample(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
5797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator_tag,
5798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Cat,
5799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;__n,&#32;_UniformRandomBitGenerator&amp;&amp;&#32;__g)
5800 &#32;&#32;&#32;&#32;{
5801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__distrib_type&#32;=&#32;uniform_int_distribution&lt;_Size&gt;;
5802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__param_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__distrib_type::param_type;
5803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_USize&#32;=&#32;make_unsigned_t&lt;_Size&gt;;
5804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Gen&#32;=&#32;remove_reference_t&lt;_UniformRandomBitGenerator&gt;;
5805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__uc_type&#32;=&#32;common_type_t&lt;typename&#32;_Gen::result_type,&#32;_USize&gt;;
5806 
5807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
5808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out;
5809 
5810 &#32;&#32;&#32;&#32;&#32;&#32;__distrib_type&#32;__d{};
5811 &#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;__unsampled_sz&#32;=&#32;std::distance(__first,&#32;__last);
5812 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;std::min(__n,&#32;__unsampled_sz);
5813 
5814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;possible,&#32;we&#32;use&#32;__gen_two_uniform_ints&#32;to&#32;efficiently&#32;produce</emphasis>
5815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;two&#32;random&#32;numbers&#32;using&#32;a&#32;single&#32;distribution&#32;invocation:</emphasis>
5816 
5817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__uc_type&#32;__urngrange&#32;=&#32;__g.max()&#32;-&#32;__g.min();
5818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__urngrange&#32;/&#32;__uc_type(__unsampled_sz)&#32;&gt;=&#32;__uc_type(__unsampled_sz))
5819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;I.e.&#32;(__urngrange&#32;&gt;=&#32;__unsampled_sz&#32;*&#32;__unsampled_sz)&#32;but&#32;without</emphasis>
5820 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;wrapping&#32;issues.</emphasis>
5821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;!=&#32;0&#32;&amp;&amp;&#32;__unsampled_sz&#32;&gt;=&#32;2)
5823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Size,&#32;_Size&gt;&#32;__p&#32;=
5825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gen_two_uniform_ints(__unsampled_sz,&#32;__unsampled_sz&#32;-&#32;1,&#32;__g);
5826 
5827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__unsampled_sz;
5828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p.first&#32;&lt;&#32;__n)
5829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out++&#32;=&#32;*__first;
5831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__n;
5832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5833 
5834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
5835 
5836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)&#32;<emphasis role="keywordflow">break</emphasis>;
5837 
5838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__unsampled_sz;
5839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p.second&#32;&lt;&#32;__n)
5840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
5841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out++&#32;=&#32;*__first;
5842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__n;
5843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5844 
5845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
5846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
5848 
5849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;loop&#32;above&#32;is&#32;otherwise&#32;equivalent&#32;to&#32;this&#32;one-at-a-time&#32;version:</emphasis>
5850 
5851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;!=&#32;0;&#32;++__first)
5852 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d(__g,&#32;__param_type{0,&#32;--__unsampled_sz})&#32;&lt;&#32;__n)
5853 &#32;&#32;&#32;&#32;&#32;&#32;{
5854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out++&#32;=&#32;*__first;
5855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__n;
5856 &#32;&#32;&#32;&#32;&#32;&#32;}
5857 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out;
5858 &#32;&#32;&#32;&#32;}
5859 
5860 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
5861 <emphasis role="preprocessor">#define&#32;__cpp_lib_sample&#32;201603L</emphasis>
5863 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_PopulationIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SampleIterator,
5864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UniformRandomBitGenerator&gt;
5865 &#32;&#32;&#32;&#32;_SampleIterator
5866 &#32;&#32;&#32;&#32;<link linkend="_structsample">sample</link>(_PopulationIterator&#32;__first,&#32;_PopulationIterator&#32;__last,
5867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_SampleIterator&#32;__out,&#32;_Distance&#32;__n,
5868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_UniformRandomBitGenerator&amp;&amp;&#32;__g)
5869 &#32;&#32;&#32;&#32;{
5870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__pop_cat&#32;=&#32;<emphasis role="keyword">typename</emphasis>
5871 &#32;&#32;&#32;&#32;std::iterator_traits&lt;_PopulationIterator&gt;::iterator_category;
5872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__samp_cat&#32;=&#32;<emphasis role="keyword">typename</emphasis>
5873 &#32;&#32;&#32;&#32;std::iterator_traits&lt;_SampleIterator&gt;::iterator_category;
5874 
5875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
5876 &#32;&#32;&#32;&#32;&#32;&#32;__or_&lt;is_convertible&lt;__pop_cat,&#32;forward_iterator_tag&gt;,
5877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;__samp_cat,&#32;random_access_iterator_tag&gt;&gt;<link linkend="_classvalue">::value</link>,
5878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;output&#32;range&#32;must&#32;use&#32;a&#32;RandomAccessIterator&#32;when&#32;input&#32;range&quot;</emphasis>
5879 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;does&#32;not&#32;meet&#32;the&#32;ForwardIterator&#32;requirements&quot;</emphasis>);
5880 
5881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral&lt;_Distance&gt;::value,
5882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;sample&#32;size&#32;must&#32;be&#32;an&#32;integer&#32;type&quot;</emphasis>);
5883 
5884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_PopulationIterator&gt;::difference_type&#32;__d&#32;=&#32;__n;
5885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::
5886 &#32;&#32;&#32;&#32;__sample(__first,&#32;__last,&#32;__pop_cat{},&#32;__out,&#32;__samp_cat{},&#32;__d,
5887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_UniformRandomBitGenerator&gt;(__g));
5888 &#32;&#32;&#32;&#32;}
5889 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
5890 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
5891 
5892 _GLIBCXX_END_NAMESPACE_ALGO
5893 _GLIBCXX_END_NAMESPACE_VERSION
5894 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
5895 
5896 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_ALGO_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
