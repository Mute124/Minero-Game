<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2trie__policy_2prefix__search__node__update__imp_8hpp_source" xml:lang="en-US">
<title>prefix_search_node_update_imp.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/trie_policy/prefix_search_node_update_imp.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 std::pair&lt;
45 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_iterator,
46 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_iterator&gt;
47 PB_DS_CLASS_C_DEC::
48 prefix_range(key_const_reference&#32;r_key)<emphasis role="keyword">&#32;const</emphasis>
49 <emphasis role="keyword"></emphasis>{
50 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;access_traits&amp;&#32;r_traits&#32;=&#32;get_access_traits();
51 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(prefix_range(r_traits.begin(r_key),&#32;r_traits.end(r_key)));
52 }
53 
54 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
55 std::pair&lt;
56 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator,
57 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator&gt;
58 PB_DS_CLASS_C_DEC::
59 prefix_range(key_const_reference&#32;r_key)
60 {
61 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(prefix_range(get_access_traits().<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(r_key),
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_access_traits().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(r_key)));
63 }
64 
65 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
66 std::pair&lt;
67 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_iterator,
68 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::const_iterator&gt;
69 PB_DS_CLASS_C_DEC::
70 prefix_range(<emphasis role="keyword">typename</emphasis>&#32;access_traits::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;access_traits::const_iterator&#32;e)<emphasis role="keyword">&#32;const</emphasis>
72 <emphasis role="keyword"></emphasis>{
73 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;iterator,&#32;iterator&gt;&#32;non_const_ret&#32;=
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>*&#32;<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;prefix_range(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;e);
75 
76 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::make_pair(const_iterator(non_const_ret.first),
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator(non_const_ret.second)));
78 }
79 
80 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
81 std::pair&lt;
82 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator,
83 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::iterator&gt;
84 PB_DS_CLASS_C_DEC::
85 prefix_range(<emphasis role="keyword">typename</emphasis>&#32;access_traits::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;access_traits::const_iterator&#32;e)
87 {
88 &#32;&#32;Node_Itr&#32;nd_it&#32;=&#32;node_begin();
89 &#32;&#32;Node_Itr&#32;end_nd_it&#32;=&#32;node_end();
90 
91 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;access_traits&amp;&#32;r_traits&#32;=&#32;get_access_traits();
92 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;given_range_length&#32;=&#32;std::distance(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;e);
93 
94 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
95 &#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nd_it&#32;==&#32;end_nd_it)
97 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::make_pair(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()));
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;common_range_length&#32;=
100 &#32;&#32;&#32;&#32;base_type::common_prefix_len(nd_it,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;e,&#32;r_traits);
101 
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(common_range_length&#32;&gt;=&#32;given_range_length)
103 &#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;ret_b&#32;=&#32;this-&gt;leftmost_it(nd_it);
105 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;ret_e&#32;=&#32;this-&gt;rightmost_it(nd_it);
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::make_pair(ret_b,&#32;++ret_e));
107 &#32;&#32;&#32;&#32;}
108 &#32;&#32;&#32;&#32;&#32;&#32;nd_it&#32;=&#32;next_child(nd_it,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;e,&#32;end_nd_it,&#32;r_traits);
109 &#32;&#32;&#32;&#32;}
110 }
111 
112 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
113 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_iterator
114 PB_DS_CLASS_C_DEC::
115 next_child(node_iterator&#32;nd_it,&#32;<emphasis role="keyword">typename</emphasis>&#32;access_traits::const_iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;access_traits::const_iterator&#32;e,&#32;node_iterator&#32;end_nd_it,
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;access_traits&amp;&#32;r_traits)
118 {
119 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;num_children&#32;=&#32;nd_it.num_children();
120 &#32;&#32;node_iterator&#32;ret&#32;=&#32;end_nd_it;
121 &#32;&#32;size_type&#32;max_length&#32;=&#32;0;
122 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num_children;&#32;++i)
123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;node_iterator&#32;pot&#32;=&#32;nd_it.get_child(i);
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;common_range_length&#32;=
126 &#32;&#32;&#32;&#32;base_type::common_prefix_len(pot,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;e,&#32;r_traits);
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(common_range_length&#32;&gt;&#32;max_length)
129 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;ret&#32;=&#32;pot;
131 &#32;&#32;&#32;&#32;&#32;&#32;max_length&#32;=&#32;common_range_length;
132 &#32;&#32;&#32;&#32;}
133 &#32;&#32;&#32;&#32;}
134 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ret);
135 }
136 
137 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
138 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
139 PB_DS_CLASS_C_DEC::
140 operator()(node_iterator&#32;<emphasis role="comment">/*nd_it*/</emphasis>,&#32;node_const_iterator&#32;<emphasis role="comment">/*end_nd_it*/</emphasis>)<emphasis role="keyword">&#32;const</emphasis>
141 <emphasis role="keyword"></emphasis>{&#32;}
142 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
