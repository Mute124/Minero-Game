<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__function_8h_source" xml:lang="en-US">
<title>stl_function.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_function.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Functor&#32;implementations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1998</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_FUNCTION_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_FUNCTION_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
61 <emphasis role="preprocessor">#endif</emphasis>
62 
63 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
64 {
65 _GLIBCXX_BEGIN_NAMESPACE_VERSION
66 
67 &#32;&#32;<emphasis role="comment">//&#32;20.3.1&#32;base&#32;classes</emphasis>
116 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result&gt;
117 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>unary_function
118 &#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Arg&#32;&#32;argument_type;&#32;&#32;&#32;
121 
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Result&#32;&#32;&#32;result_type;&#32;&#32;
124 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
125 
130 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result&gt;
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>binary_function
132 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Arg1&#32;&#32;&#32;&#32;&#32;first_argument_type;&#32;
135 
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Arg2&#32;&#32;&#32;&#32;&#32;second_argument_type;
138 
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Result&#32;&#32;&#32;result_type;
141 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
144 &#32;&#32;<emphasis role="comment">//&#32;20.3.2&#32;arithmetic</emphasis>
145 
156 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
157 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_transparent;&#32;&#32;<emphasis role="comment">//&#32;undefined</emphasis>
158 
159 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>plus;
161 
162 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
163 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>minus;
164 
165 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>multiplies;
167 
168 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>divides;
170 
171 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
172 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>modulus;
173 
174 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>negate;
176 <emphasis role="preprocessor">#endif</emphasis>
177 
178 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;unary_function&#32;and&#32;binary_function.</emphasis>
179 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
180 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
181 
183 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
184 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>plus&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
185 &#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
188 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
189 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
190 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;+&#32;__y;&#32;}
191 &#32;&#32;&#32;&#32;};
192 
194 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>minus&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
196 &#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
198 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
199 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
200 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;-&#32;__y;&#32;}
201 &#32;&#32;&#32;&#32;};
202 
204 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>multiplies&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
206 &#32;&#32;&#32;&#32;{
207 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
208 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
209 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
210 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;*&#32;__y;&#32;}
211 &#32;&#32;&#32;&#32;};
212 
214 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>divides&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
216 &#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
218 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
219 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
220 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;/&#32;__y;&#32;}
221 &#32;&#32;&#32;&#32;};
222 
224 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>modulus&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
226 &#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
228 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
229 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
230 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;%&#32;__y;&#32;}
231 &#32;&#32;&#32;&#32;};
232 
234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
235 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>negate&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Tp,&#32;_Tp&gt;
236 &#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
238 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
239 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
240 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;-__x;&#32;}
241 &#32;&#32;&#32;&#32;};
242 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
243 
244 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
245 
246 <emphasis role="preprocessor">#define&#32;__cpp_lib_transparent_operators&#32;201510L</emphasis>
247 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>plus&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
250 &#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
252 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
254 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
255 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;+&#32;std::forward&lt;_Up&gt;(__u)))
256 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;+&#32;std::forward&lt;_Up&gt;(__u))
257 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;+&#32;std::forward&lt;_Up&gt;(__u);&#32;}
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
260 &#32;&#32;&#32;&#32;};
261 
263 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>minus&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
265 &#32;&#32;&#32;&#32;{
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
267 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
269 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;-&#32;std::forward&lt;_Up&gt;(__u)))
271 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;-&#32;std::forward&lt;_Up&gt;(__u))
272 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;-&#32;std::forward&lt;_Up&gt;(__u);&#32;}
273 
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
275 &#32;&#32;&#32;&#32;};
276 
278 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
279 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>multiplies&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
280 &#32;&#32;&#32;&#32;{
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
282 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
283 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
284 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
285 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;*&#32;std::forward&lt;_Up&gt;(__u)))
286 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;*&#32;std::forward&lt;_Up&gt;(__u))
287 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;*&#32;std::forward&lt;_Up&gt;(__u);&#32;}
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
290 &#32;&#32;&#32;&#32;};
291 
293 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
294 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>divides&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
295 &#32;&#32;&#32;&#32;{
296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
297 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
299 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;/&#32;std::forward&lt;_Up&gt;(__u)))
301 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;/&#32;std::forward&lt;_Up&gt;(__u))
302 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;/&#32;std::forward&lt;_Up&gt;(__u);&#32;}
303 
304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
305 &#32;&#32;&#32;&#32;};
306 
308 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
309 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>modulus&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
310 &#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
312 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
313 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
314 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;%&#32;std::forward&lt;_Up&gt;(__u)))
316 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;%&#32;std::forward&lt;_Up&gt;(__u))
317 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;%&#32;std::forward&lt;_Up&gt;(__u);&#32;}
318 
319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
320 &#32;&#32;&#32;&#32;};
321 
323 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
324 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>negate&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
325 &#32;&#32;&#32;&#32;{
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
327 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
328 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
329 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">const</emphasis>
330 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(-std::forward&lt;_Tp&gt;(__t)))
331 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(-std::forward&lt;_Tp&gt;(__t))
332 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;-std::forward&lt;_Tp&gt;(__t);&#32;}
333 
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
335 &#32;&#32;&#32;&#32;};
336 <emphasis role="preprocessor">#endif</emphasis>
339 &#32;&#32;<emphasis role="comment">//&#32;20.3.3&#32;comparisons</emphasis>
348 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
349 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
350 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>equal_to;
351 
352 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
353 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>not_equal_to;
354 
355 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater;
357 
358 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less;
360 
361 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
362 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater_equal;
363 
364 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
365 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less_equal;
366 <emphasis role="preprocessor">#endif</emphasis>
367 
368 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
369 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
370 
372 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
373 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>equal_to&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
374 &#32;&#32;&#32;&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
377 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
378 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;==&#32;__y;&#32;}
379 &#32;&#32;&#32;&#32;};
380 
382 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
383 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>not_equal_to&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
384 &#32;&#32;&#32;&#32;{
385 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
387 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
388 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;!=&#32;__y;&#32;}
389 &#32;&#32;&#32;&#32;};
390 
392 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
393 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
394 &#32;&#32;&#32;&#32;{
395 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
398 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&#32;__y;&#32;}
399 &#32;&#32;&#32;&#32;};
400 
402 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
403 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
404 &#32;&#32;&#32;&#32;{
405 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
407 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
408 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&#32;__y;&#32;}
409 &#32;&#32;&#32;&#32;};
410 
412 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater_equal&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
414 &#32;&#32;&#32;&#32;{
415 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
418 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;=&#32;__y;&#32;}
419 &#32;&#32;&#32;&#32;};
420 
422 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less_equal&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
424 &#32;&#32;&#32;&#32;{
425 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
428 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;=&#32;__y;&#32;}
429 &#32;&#32;&#32;&#32;};
430 
431 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;of&#32;std::greater&#32;for&#32;pointers.</emphasis>
432 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater&lt;_Tp*&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp*,&#32;_Tp*,&#32;bool&gt;
434 &#32;&#32;&#32;&#32;{
435 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__x,&#32;_Tp*&#32;__y)&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
437 &#32;&#32;&#32;&#32;&#32;&#32;{
438 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;&#32;__y;
441 <emphasis role="preprocessor">#endif</emphasis>
442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__UINTPTR_TYPE__)__x&#32;&gt;&#32;(__UINTPTR_TYPE__)__y;
443 &#32;&#32;&#32;&#32;&#32;&#32;}
444 &#32;&#32;&#32;&#32;};
445 
446 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;of&#32;std::less&#32;for&#32;pointers.</emphasis>
447 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
448 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less&lt;_Tp*&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp*,&#32;_Tp*,&#32;bool&gt;
449 &#32;&#32;&#32;&#32;{
450 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
451 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__x,&#32;_Tp*&#32;__y)&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
452 &#32;&#32;&#32;&#32;&#32;&#32;{
453 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&#32;__y;
456 <emphasis role="preprocessor">#endif</emphasis>
457 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__UINTPTR_TYPE__)__x&#32;&lt;&#32;(__UINTPTR_TYPE__)__y;
458 &#32;&#32;&#32;&#32;&#32;&#32;}
459 &#32;&#32;&#32;&#32;};
460 
461 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;of&#32;std::greater_equal&#32;for&#32;pointers.</emphasis>
462 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
463 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater_equal&lt;_Tp*&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp*,&#32;_Tp*,&#32;bool&gt;
464 &#32;&#32;&#32;&#32;{
465 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
466 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__x,&#32;_Tp*&#32;__y)&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
467 &#32;&#32;&#32;&#32;&#32;&#32;{
468 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&gt;=&#32;__y;
471 <emphasis role="preprocessor">#endif</emphasis>
472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__UINTPTR_TYPE__)__x&#32;&gt;=&#32;(__UINTPTR_TYPE__)__y;
473 &#32;&#32;&#32;&#32;&#32;&#32;}
474 &#32;&#32;&#32;&#32;};
475 
476 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;of&#32;std::less_equal&#32;for&#32;pointers.</emphasis>
477 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
478 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less_equal&lt;_Tp*&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp*,&#32;_Tp*,&#32;bool&gt;
479 &#32;&#32;&#32;&#32;{
480 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
481 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__x,&#32;_Tp*&#32;__y)&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
482 &#32;&#32;&#32;&#32;&#32;&#32;{
483 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__is_constant_evaluated())
485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;=&#32;__y;
486 <emphasis role="preprocessor">#endif</emphasis>
487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__UINTPTR_TYPE__)__x&#32;&lt;=&#32;(__UINTPTR_TYPE__)__y;
488 &#32;&#32;&#32;&#32;&#32;&#32;}
489 &#32;&#32;&#32;&#32;};
490 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
491 
492 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
494 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
495 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>equal_to&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
496 &#32;&#32;&#32;&#32;{
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
499 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
500 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;==&#32;std::forward&lt;_Up&gt;(__u)))
501 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;==&#32;std::forward&lt;_Up&gt;(__u))
502 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;==&#32;std::forward&lt;_Up&gt;(__u);&#32;}
503 
504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
505 &#32;&#32;&#32;&#32;};
506 
508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
509 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>not_equal_to&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
510 &#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
513 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
514 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;!=&#32;std::forward&lt;_Up&gt;(__u)))
515 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;!=&#32;std::forward&lt;_Up&gt;(__u))
516 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;!=&#32;std::forward&lt;_Up&gt;(__u);&#32;}
517 
518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
519 &#32;&#32;&#32;&#32;};
520 
522 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
523 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
524 &#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
527 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
528 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&gt;&#32;std::forward&lt;_Up&gt;(__u)))
529 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&gt;&#32;std::forward&lt;_Up&gt;(__u))
530 &#32;&#32;&#32;&#32;{
531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_cmp(std::forward&lt;_Tp&gt;(__t),&#32;std::forward&lt;_Up&gt;(__u),
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ptr_cmp&lt;_Tp,&#32;_Up&gt;{});
533 &#32;&#32;&#32;&#32;}
534 
535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
536 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
537 &#32;&#32;&#32;&#32;operator()(_Tp*&#32;__t,&#32;_Up*&#32;__u)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
538 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;greater&lt;common_type_t&lt;_Tp*,&#32;_Up*&gt;&gt;{}(__t,&#32;__u);&#32;}
539 
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
541 
542 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
544 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
545 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;false_type)
546 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;&gt;&#32;std::forward&lt;_Up&gt;(__u);&#32;}
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
549 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
550 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
551 &#32;&#32;&#32;&#32;{
552 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;greater&lt;const&#32;volatile&#32;void*&gt;{}(
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Tp&gt;(__t)),
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Up&gt;(__u)));
555 &#32;&#32;&#32;&#32;}
556 
557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;viable&#32;operator&gt;&#32;member&#32;function.</emphasis>
558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
559 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
560 
561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;T.operator&gt;(U)</emphasis>
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
564 &#32;&#32;&#32;&#32;&#32;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;_Tp&gt;().operator&gt;(std::declval&lt;_Up&gt;()))&gt;&gt;
565 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;overloaded&#32;operator&gt;&#32;for&#32;these&#32;operands.</emphasis>
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
569 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&#32;:&#32;__not_overloaded2&lt;_Tp,&#32;_Up&gt;&#32;{&#32;};
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;operator&gt;(T,U)</emphasis>
572 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
574 &#32;&#32;&#32;&#32;&#32;&#32;decltype(operator&gt;(<link linkend="_namespacestd">std</link>::declval&lt;_Tp&gt;(),&#32;std::declval&lt;_Up&gt;()))&gt;&gt;
575 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
576 
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ptr_cmp&#32;=&#32;__and_&lt;__not_overloaded&lt;_Tp,&#32;_Up&gt;,
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Tp,&#32;const&#32;volatile&#32;void*&gt;,
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Up,&#32;const&#32;volatile&#32;void*&gt;&gt;;
581 &#32;&#32;&#32;&#32;};
582 
584 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
585 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
586 &#32;&#32;&#32;&#32;{
587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
588 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
589 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
590 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&lt;&#32;std::forward&lt;_Up&gt;(__u)))
591 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&lt;&#32;std::forward&lt;_Up&gt;(__u))
592 &#32;&#32;&#32;&#32;{
593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_cmp(std::forward&lt;_Tp&gt;(__t),&#32;std::forward&lt;_Up&gt;(__u),
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ptr_cmp&lt;_Tp,&#32;_Up&gt;{});
595 &#32;&#32;&#32;&#32;}
596 
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
598 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
599 &#32;&#32;&#32;&#32;operator()(_Tp*&#32;__t,&#32;_Up*&#32;__u)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
600 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;less&lt;common_type_t&lt;_Tp*,&#32;_Up*&gt;&gt;{}(__t,&#32;__u);&#32;}
601 
602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
603 
604 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
606 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
607 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;false_type)
608 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;&lt;&#32;std::forward&lt;_Up&gt;(__u);&#32;}
609 
610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
611 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
612 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
613 &#32;&#32;&#32;&#32;{
614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;less&lt;const&#32;volatile&#32;void*&gt;{}(
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Tp&gt;(__t)),
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Up&gt;(__u)));
617 &#32;&#32;&#32;&#32;}
618 
619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;viable&#32;operator&lt;&#32;member&#32;function.</emphasis>
620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
621 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
622 
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;T.operator&lt;(U)</emphasis>
624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
625 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
626 &#32;&#32;&#32;&#32;&#32;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;_Tp&gt;().operator&lt;(std::declval&lt;_Up&gt;()))&gt;&gt;
627 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
628 
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;overloaded&#32;operator&lt;&#32;for&#32;these&#32;operands.</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
631 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&#32;:&#32;__not_overloaded2&lt;_Tp,&#32;_Up&gt;&#32;{&#32;};
632 
633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;operator&lt;(T,U)</emphasis>
634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
635 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
636 &#32;&#32;&#32;&#32;&#32;&#32;decltype(operator&lt;(<link linkend="_namespacestd">std</link>::declval&lt;_Tp&gt;(),&#32;std::declval&lt;_Up&gt;()))&gt;&gt;
637 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
638 
639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
640 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ptr_cmp&#32;=&#32;__and_&lt;__not_overloaded&lt;_Tp,&#32;_Up&gt;,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Tp,&#32;const&#32;volatile&#32;void*&gt;,
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Up,&#32;const&#32;volatile&#32;void*&gt;&gt;;
643 &#32;&#32;&#32;&#32;};
644 
646 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>greater_equal&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
648 &#32;&#32;&#32;&#32;{
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
650 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
651 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
652 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&gt;=&#32;std::forward&lt;_Up&gt;(__u)))
653 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&gt;=&#32;std::forward&lt;_Up&gt;(__u))
654 &#32;&#32;&#32;&#32;{
655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_cmp(std::forward&lt;_Tp&gt;(__t),&#32;std::forward&lt;_Up&gt;(__u),
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ptr_cmp&lt;_Tp,&#32;_Up&gt;{});
657 &#32;&#32;&#32;&#32;}
658 
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
660 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
661 &#32;&#32;&#32;&#32;operator()(_Tp*&#32;__t,&#32;_Up*&#32;__u)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
662 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;greater_equal&lt;common_type_t&lt;_Tp*,&#32;_Up*&gt;&gt;{}(__t,&#32;__u);&#32;}
663 
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
665 
666 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
667 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
668 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
669 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;false_type)
670 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;&gt;=&#32;std::forward&lt;_Up&gt;(__u);&#32;}
671 
672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
673 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
674 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
675 &#32;&#32;&#32;&#32;{
676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;greater_equal&lt;const&#32;volatile&#32;void*&gt;{}(
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Tp&gt;(__t)),
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Up&gt;(__u)));
679 &#32;&#32;&#32;&#32;}
680 
681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;viable&#32;operator&gt;=&#32;member&#32;function.</emphasis>
682 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
683 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
684 
685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;T.operator&gt;=(U)</emphasis>
686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
687 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
688 &#32;&#32;&#32;&#32;&#32;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;_Tp&gt;().operator&gt;=(std::declval&lt;_Up&gt;()))&gt;&gt;
689 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
690 
691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;overloaded&#32;operator&gt;=&#32;for&#32;these&#32;operands.</emphasis>
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
693 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&#32;:&#32;__not_overloaded2&lt;_Tp,&#32;_Up&gt;&#32;{&#32;};
694 
695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;operator&gt;=(T,U)</emphasis>
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
697 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
698 &#32;&#32;&#32;&#32;&#32;&#32;decltype(operator&gt;=(std::declval&lt;_Tp&gt;(),&#32;std::declval&lt;_Up&gt;()))&gt;&gt;
699 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
700 
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
702 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ptr_cmp&#32;=&#32;__and_&lt;__not_overloaded&lt;_Tp,&#32;_Up&gt;,
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Tp,&#32;const&#32;volatile&#32;void*&gt;,
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Up,&#32;const&#32;volatile&#32;void*&gt;&gt;;
705 &#32;&#32;&#32;&#32;};
706 
708 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>less_equal&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
710 &#32;&#32;&#32;&#32;{
711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
712 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
713 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
714 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&lt;=&#32;std::forward&lt;_Up&gt;(__u)))
715 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&lt;=&#32;std::forward&lt;_Up&gt;(__u))
716 &#32;&#32;&#32;&#32;{
717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_cmp(std::forward&lt;_Tp&gt;(__t),&#32;std::forward&lt;_Up&gt;(__u),
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ptr_cmp&lt;_Tp,&#32;_Up&gt;{});
719 &#32;&#32;&#32;&#32;}
720 
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
722 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
723 &#32;&#32;&#32;&#32;operator()(_Tp*&#32;__t,&#32;_Up*&#32;__u)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
724 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;less_equal&lt;common_type_t&lt;_Tp*,&#32;_Up*&gt;&gt;{}(__t,&#32;__u);&#32;}
725 
726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
727 
728 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
730 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
731 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;false_type)
732 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;&lt;=&#32;std::forward&lt;_Up&gt;(__u);&#32;}
733 
734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
735 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
736 &#32;&#32;&#32;&#32;_S_cmp(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
737 &#32;&#32;&#32;&#32;{
738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;less_equal&lt;const&#32;volatile&#32;void*&gt;{}(
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Tp&gt;(__t)),
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keyword">volatile&#32;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(std::forward&lt;_Up&gt;(__u)));
741 &#32;&#32;&#32;&#32;}
742 
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;viable&#32;operator&lt;=&#32;member&#32;function.</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
745 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
746 
747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;T.operator&lt;=(U)</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
749 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded2&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
750 &#32;&#32;&#32;&#32;&#32;&#32;decltype(<link linkend="_namespacestd">std</link>::declval&lt;_Tp&gt;().operator&lt;=(std::declval&lt;_Up&gt;()))&gt;&gt;
751 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
752 
753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;there&#32;is&#32;no&#32;overloaded&#32;operator&lt;=&#32;for&#32;these&#32;operands.</emphasis>
754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
755 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&#32;:&#32;__not_overloaded2&lt;_Tp,&#32;_Up&gt;&#32;{&#32;};
756 
757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False&#32;if&#32;we&#32;can&#32;call&#32;operator&lt;=(T,U)</emphasis>
758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
759 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_overloaded&lt;_Tp,&#32;_Up,&#32;__void_t&lt;
760 &#32;&#32;&#32;&#32;&#32;&#32;decltype(operator&lt;=(std::declval&lt;_Tp&gt;(),&#32;std::declval&lt;_Up&gt;()))&gt;&gt;
761 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
762 
763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
764 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ptr_cmp&#32;=&#32;__and_&lt;__not_overloaded&lt;_Tp,&#32;_Up&gt;,
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Tp,&#32;const&#32;volatile&#32;void*&gt;,
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Up,&#32;const&#32;volatile&#32;void*&gt;&gt;;
767 &#32;&#32;&#32;&#32;};
768 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
771 &#32;&#32;<emphasis role="comment">//&#32;20.3.4&#32;logical&#32;operations</emphasis>
780 #if&#32;__cplusplus&#32;&gt;&#32;201103L
781 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
782 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_and;
783 
784 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
785 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_or;
786 
787 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
788 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_not;
789 <emphasis role="preprocessor">#endif</emphasis>
790 
791 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
792 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
793 
795 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
796 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_and&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
797 &#32;&#32;&#32;&#32;{
798 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
800 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
801 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&amp;&amp;&#32;__y;&#32;}
802 &#32;&#32;&#32;&#32;};
803 
805 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
806 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_or&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
807 &#32;&#32;&#32;&#32;{
808 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
810 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
811 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;||&#32;__y;&#32;}
812 &#32;&#32;&#32;&#32;};
813 
815 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
816 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_not&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Tp,&#32;bool&gt;
817 &#32;&#32;&#32;&#32;{
818 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
820 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
821 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__x;&#32;}
822 &#32;&#32;&#32;&#32;};
823 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
824 
825 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
827 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_and&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
829 &#32;&#32;&#32;&#32;{
830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
831 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
832 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
833 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
834 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&amp;&amp;&#32;std::forward&lt;_Up&gt;(__u)))
835 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&amp;&amp;&#32;std::forward&lt;_Up&gt;(__u))
836 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;&amp;&amp;&#32;std::forward&lt;_Up&gt;(__u);&#32;}
837 
838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
839 &#32;&#32;&#32;&#32;};
840 
842 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
843 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_or&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
844 &#32;&#32;&#32;&#32;{
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
846 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
848 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
849 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;||&#32;std::forward&lt;_Up&gt;(__u)))
850 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;||&#32;std::forward&lt;_Up&gt;(__u))
851 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;||&#32;std::forward&lt;_Up&gt;(__u);&#32;}
852 
853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
854 &#32;&#32;&#32;&#32;};
855 
857 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
858 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>logical_not&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
859 &#32;&#32;&#32;&#32;{
860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
861 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
862 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
863 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">const</emphasis>
864 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(!std::forward&lt;_Tp&gt;(__t)))
865 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(!std::forward&lt;_Tp&gt;(__t))
866 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!std::forward&lt;_Tp&gt;(__t);&#32;}
867 
868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
869 &#32;&#32;&#32;&#32;};
870 <emphasis role="preprocessor">#endif</emphasis>
873 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
874 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
875 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_and;
876 
877 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
878 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_or;
879 
880 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
881 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_xor;
882 
883 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
884 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_not;
885 <emphasis role="preprocessor">#endif</emphasis>
886 
887 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
888 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
889 
890 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
891 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;660.&#32;Missing&#32;Bitwise&#32;Operations.</emphasis>
892 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
893 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_and&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
894 &#32;&#32;&#32;&#32;{
895 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
896 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
897 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
898 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&amp;&#32;__y;&#32;}
899 &#32;&#32;&#32;&#32;};
900 
901 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
902 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_or&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
903 &#32;&#32;&#32;&#32;{
904 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
905 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
906 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
907 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;|&#32;__y;&#32;}
908 &#32;&#32;&#32;&#32;};
909 
910 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
911 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_xor&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;_Tp&gt;
912 &#32;&#32;&#32;&#32;{
913 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
914 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
915 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
916 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;^&#32;__y;&#32;}
917 &#32;&#32;&#32;&#32;};
918 
919 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
920 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_not&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Tp,&#32;_Tp&gt;
921 &#32;&#32;&#32;&#32;{
922 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
923 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
924 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
925 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;~__x;&#32;}
926 &#32;&#32;&#32;&#32;};
927 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
928 
929 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
930 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
931 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_and&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
932 &#32;&#32;&#32;&#32;{
933 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
934 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
935 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
936 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
937 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&amp;&#32;std::forward&lt;_Up&gt;(__u)))
938 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;&amp;&#32;std::forward&lt;_Up&gt;(__u))
939 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;&amp;&#32;std::forward&lt;_Up&gt;(__u);&#32;}
940 
941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
942 &#32;&#32;&#32;&#32;};
943 
944 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
945 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_or&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
946 &#32;&#32;&#32;&#32;{
947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
948 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
949 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
950 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
951 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;|&#32;std::forward&lt;_Up&gt;(__u)))
952 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;|&#32;std::forward&lt;_Up&gt;(__u))
953 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;|&#32;std::forward&lt;_Up&gt;(__u);&#32;}
954 
955 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
956 &#32;&#32;&#32;&#32;};
957 
958 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
959 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_xor&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
960 &#32;&#32;&#32;&#32;{
961 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
962 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
963 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
964 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;<emphasis role="keyword">const</emphasis>
965 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;^&#32;std::forward&lt;_Up&gt;(__u)))
966 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::forward&lt;_Tp&gt;(__t)&#32;^&#32;std::forward&lt;_Up&gt;(__u))
967 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t)&#32;^&#32;std::forward&lt;_Up&gt;(__u);&#32;}
968 
969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
970 &#32;&#32;&#32;&#32;};
971 
972 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
973 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bit_not&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
974 &#32;&#32;&#32;&#32;{
975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
976 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
977 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
978 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">const</emphasis>
979 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(<link linkend="_namespacestd">~std</link>::forward&lt;_Tp&gt;(__t)))
980 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(<link linkend="_namespacestd">~std</link>::forward&lt;_Tp&gt;(__t))
981 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd">~std</link>::forward&lt;_Tp&gt;(__t);&#32;}
982 
983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__is_transparent&#32;is_transparent;
984 &#32;&#32;&#32;&#32;};
985 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
986 
987 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
988 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
989 
990 &#32;&#32;<emphasis role="comment">//&#32;20.3.5&#32;negators</emphasis>
1022 
1023 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1024 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9fc2e019cf58d1fd9471f83ca143155d">_GLIBCXX17_DEPRECATED</link>&#32;unary_negate
1025 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;typename&#32;_Predicate::argument_type,&#32;bool&gt;
1026 &#32;&#32;&#32;&#32;{
1027 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1028 &#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;_M_pred;
1029 
1030 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1031 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
1032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1033 &#32;&#32;&#32;&#32;&#32;&#32;unary_negate(<emphasis role="keyword">const</emphasis>&#32;_Predicate&amp;&#32;__x)&#32;:&#32;_M_pred(__x)&#32;{&#32;}
1034 
1035 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
1036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1037 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate::argument_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1038 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_pred(__x);&#32;}
1039 &#32;&#32;&#32;&#32;};
1040 
1042 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1043 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9b69e4e2a27d9d3b3f2dcf972e801928">_GLIBCXX17_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::not_fn&quot;</emphasis>)
1044 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
1045 &#32;&#32;&#32;&#32;inline&#32;unary_negate&lt;_Predicate&gt;
1046 &#32;&#32;&#32;&#32;not1(const&#32;_Predicate&amp;&#32;__pred)
1047 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;unary_negate&lt;_Predicate&gt;(__pred);&#32;}
1048 
1050 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1051 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9fc2e019cf58d1fd9471f83ca143155d">_GLIBCXX17_DEPRECATED</link>&#32;binary_negate
1052 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;typename&#32;_Predicate::first_argument_type,
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Predicate::second_argument_type,&#32;bool&gt;
1054 &#32;&#32;&#32;&#32;{
1055 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1056 &#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;_M_pred;
1057 
1058 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1059 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
1060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1061 &#32;&#32;&#32;&#32;&#32;&#32;binary_negate(<emphasis role="keyword">const</emphasis>&#32;_Predicate&amp;&#32;__x)&#32;:&#32;_M_pred(__x)&#32;{&#32;}
1062 
1063 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
1064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1065 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate::first_argument_type&amp;&#32;__x,
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate::second_argument_type&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
1067 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_pred(__x,&#32;__y);&#32;}
1068 &#32;&#32;&#32;&#32;};
1069 
1071 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1072 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9b69e4e2a27d9d3b3f2dcf972e801928">_GLIBCXX17_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::not_fn&quot;</emphasis>)
1073 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
1074 &#32;&#32;&#32;&#32;inline&#32;binary_negate&lt;_Predicate&gt;
1075 &#32;&#32;&#32;&#32;not2(const&#32;_Predicate&amp;&#32;__pred)
1076 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;binary_negate&lt;_Predicate&gt;(__pred);&#32;}
1079 &#32;&#32;<emphasis role="comment">//&#32;20.3.7&#32;adaptors&#32;pointers&#32;functions</emphasis>
1103 
1104 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result&gt;
1105 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>pointer_to_unary_function&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Arg,&#32;_Result&gt;
1106 &#32;&#32;&#32;&#32;{
1107 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1108 &#32;&#32;&#32;&#32;&#32;&#32;_Result&#32;(*_M_ptr)(_Arg);
1109 
1110 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1111 &#32;&#32;&#32;&#32;&#32;&#32;pointer_to_unary_function()&#32;{&#32;}
1112 
1113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;pointer_to_unary_function(_Result&#32;(*__x)(_Arg))
1115 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__x)&#32;{&#32;}
1116 
1117 &#32;&#32;&#32;&#32;&#32;&#32;_Result
1118 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Arg&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1119 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr(__x);&#32;}
1120 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1121 
1123 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result&gt;
1124 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::function&quot;</emphasis>)
1125 &#32;&#32;&#32;&#32;inline&#32;pointer_to_unary_function&lt;_Arg,&#32;_Result&gt;
1126 &#32;&#32;&#32;&#32;ptr_fun(_Result&#32;(*__x)(_Arg))
1127 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pointer_to_unary_function&lt;_Arg,&#32;_Result&gt;(__x);&#32;}
1128 
1130 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result&gt;
1131 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>pointer_to_binary_function
1132 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Arg1,&#32;_Arg2,&#32;_Result&gt;
1133 &#32;&#32;&#32;&#32;{
1134 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1135 &#32;&#32;&#32;&#32;&#32;&#32;_Result&#32;(*_M_ptr)(_Arg1,&#32;_Arg2);
1136 
1137 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1138 &#32;&#32;&#32;&#32;&#32;&#32;pointer_to_binary_function()&#32;{&#32;}
1139 
1140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1141 &#32;&#32;&#32;&#32;&#32;&#32;pointer_to_binary_function(_Result&#32;(*__x)(_Arg1,&#32;_Arg2))
1142 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__x)&#32;{&#32;}
1143 
1144 &#32;&#32;&#32;&#32;&#32;&#32;_Result
1145 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Arg1&#32;__x,&#32;_Arg2&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
1146 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr(__x,&#32;__y);&#32;}
1147 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1148 
1150 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Result&gt;
1151 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::function&quot;</emphasis>)
1152 &#32;&#32;&#32;&#32;inline&#32;pointer_to_binary_function&lt;_Arg1,&#32;_Arg2,&#32;_Result&gt;
1153 &#32;&#32;&#32;&#32;ptr_fun(_Result&#32;(*__x)(_Arg1,&#32;_Arg2))
1154 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pointer_to_binary_function&lt;_Arg1,&#32;_Arg2,&#32;_Result&gt;(__x);&#32;}
1157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1158 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Identity
1159 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Tp,&#32;_Tp&gt;
1160 &#32;&#32;&#32;&#32;{
1161 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&amp;
1162 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1163 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
1164 
1165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
1166 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1167 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
1168 &#32;&#32;&#32;&#32;};
1169 
1170 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization,&#32;avoids&#32;confusing&#32;errors&#32;in&#32;e.g.&#32;std::set&lt;const&#32;T&gt;.</emphasis>
1171 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Identity&lt;const&#32;_Tp&gt;&#32;:&#32;_Identity&lt;_Tp&gt;&#32;{&#32;};
1172 
1173 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
1174 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Select1st
1175 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Pair,&#32;typename&#32;_Pair::first_type&gt;
1176 &#32;&#32;&#32;&#32;{
1177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair::first_type&amp;
1178 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Pair&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1179 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.first;&#32;}
1180 
1181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair::first_type&amp;
1182 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Pair&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1183 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.first;&#32;}
1184 
1185 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair2&gt;
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair2::first_type&amp;
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(_Pair2&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1189 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.first;&#32;}
1190 
1191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair2&gt;
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair2::first_type&amp;
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Pair2&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1194 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.first;&#32;}
1195 <emphasis role="preprocessor">#endif</emphasis>
1196 &#32;&#32;&#32;&#32;};
1197 
1198 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
1199 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Select2nd
1200 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Pair,&#32;typename&#32;_Pair::second_type&gt;
1201 &#32;&#32;&#32;&#32;{
1202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair::second_type&amp;
1203 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Pair&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1204 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.second;&#32;}
1205 
1206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pair::second_type&amp;
1207 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Pair&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1208 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.second;&#32;}
1209 &#32;&#32;&#32;&#32;};
1210 
1211 &#32;&#32;<emphasis role="comment">//&#32;20.3.8&#32;adaptors&#32;pointers&#32;members</emphasis>
1230 
1231 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1232 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>mem_fun_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Tp*,&#32;_Ret&gt;
1233 &#32;&#32;&#32;&#32;{
1234 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1236 &#32;&#32;&#32;&#32;&#32;&#32;mem_fun_t(_Ret&#32;(_Tp::*__pf)())
1237 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1238 
1239 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1240 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__p)<emphasis role="keyword">&#32;const</emphasis>
1241 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p-&gt;*_M_f)();&#32;}
1242 
1243 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1244 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)();
1245 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1246 
1248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1249 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>const_mem_fun_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;const&#32;_Tp*,&#32;_Ret&gt;
1250 &#32;&#32;&#32;&#32;{
1251 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1253 &#32;&#32;&#32;&#32;&#32;&#32;const_mem_fun_t(_Ret&#32;(_Tp::*__pf)()&#32;const)
1254 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1255 
1256 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1257 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__p)<emphasis role="keyword">&#32;const</emphasis>
1258 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p-&gt;*_M_f)();&#32;}
1259 
1260 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1261 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)()&#32;const;
1262 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1263 
1265 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1266 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>mem_fun_ref_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Tp,&#32;_Ret&gt;
1267 &#32;&#32;&#32;&#32;{
1268 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1270 &#32;&#32;&#32;&#32;&#32;&#32;mem_fun_ref_t(_Ret&#32;(_Tp::*__pf)())
1271 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1272 
1273 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1274 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&#32;__r)<emphasis role="keyword">&#32;const</emphasis>
1275 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__r.*_M_f)();&#32;}
1276 
1277 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1278 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)();
1279 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1280 
1282 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1283 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>const_mem_fun_ref_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;unary_function&lt;_Tp,&#32;_Ret&gt;
1284 &#32;&#32;&#32;&#32;{
1285 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1287 &#32;&#32;&#32;&#32;&#32;&#32;const_mem_fun_ref_t(_Ret&#32;(_Tp::*__pf)()&#32;const)
1288 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1289 
1290 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1291 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__r)<emphasis role="keyword">&#32;const</emphasis>
1292 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__r.*_M_f)();&#32;}
1293 
1294 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1295 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)()&#32;const;
1296 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1297 
1299 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1300 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>mem_fun1_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp*,&#32;_Arg,&#32;_Ret&gt;
1301 &#32;&#32;&#32;&#32;{
1302 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1304 &#32;&#32;&#32;&#32;&#32;&#32;mem_fun1_t(_Ret&#32;(_Tp::*__pf)(_Arg))
1305 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1306 
1307 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1308 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__p,&#32;_Arg&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1309 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p-&gt;*_M_f)(__x);&#32;}
1310 
1311 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1312 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)(_Arg);
1313 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1314 
1316 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1317 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>const_mem_fun1_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;const&#32;_Tp*,&#32;_Arg,&#32;_Ret&gt;
1318 &#32;&#32;&#32;&#32;{
1319 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1321 &#32;&#32;&#32;&#32;&#32;&#32;const_mem_fun1_t(_Ret&#32;(_Tp::*__pf)(_Arg)&#32;const)
1322 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1323 
1324 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1325 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__p,&#32;_Arg&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1326 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__p-&gt;*_M_f)(__x);&#32;}
1327 
1328 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1329 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)(_Arg)&#32;const;
1330 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1331 
1333 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1334 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>mem_fun1_ref_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Arg,&#32;_Ret&gt;
1335 &#32;&#32;&#32;&#32;{
1336 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1338 &#32;&#32;&#32;&#32;&#32;&#32;mem_fun1_ref_t(_Ret&#32;(_Tp::*__pf)(_Arg))
1339 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1340 
1341 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1342 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&#32;__r,&#32;_Arg&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1343 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__r.*_M_f)(__x);&#32;}
1344 
1345 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1346 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)(_Arg);
1347 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1348 
1350 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1351 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>const_mem_fun1_ref_t&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Arg,&#32;_Ret&gt;
1352 &#32;&#32;&#32;&#32;{
1353 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1355 &#32;&#32;&#32;&#32;&#32;&#32;const_mem_fun1_ref_t(_Ret&#32;(_Tp::*__pf)(_Arg)&#32;const)
1356 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_f(__pf)&#32;{&#32;}
1357 
1358 &#32;&#32;&#32;&#32;&#32;&#32;_Ret
1359 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__r,&#32;_Arg&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1360 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__r.*_M_f)(__x);&#32;}
1361 
1362 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1363 &#32;&#32;&#32;&#32;&#32;&#32;_Ret&#32;(_Tp::*_M_f)(_Arg)&#32;const;
1364 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
1365 
1366 &#32;&#32;<emphasis role="comment">//&#32;Mem_fun&#32;adaptor&#32;helper&#32;functions.&#32;&#32;There&#32;are&#32;only&#32;two:</emphasis>
1367 &#32;&#32;<emphasis role="comment">//&#32;mem_fun&#32;and&#32;mem_fun_ref.</emphasis>
1368 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1369 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1370 &#32;&#32;&#32;&#32;inline&#32;mem_fun_t&lt;_Ret,&#32;_Tp&gt;
1371 &#32;&#32;&#32;&#32;mem_fun(_Ret&#32;(_Tp::*__f)())
1372 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;mem_fun_t&lt;_Ret,&#32;_Tp&gt;(__f);&#32;}
1373 
1374 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1375 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1376 &#32;&#32;&#32;&#32;inline&#32;const_mem_fun_t&lt;_Ret,&#32;_Tp&gt;
1377 &#32;&#32;&#32;&#32;mem_fun(_Ret&#32;(_Tp::*__f)()&#32;const)
1378 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_mem_fun_t&lt;_Ret,&#32;_Tp&gt;(__f);&#32;}
1379 
1380 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1381 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1382 &#32;&#32;&#32;&#32;inline&#32;mem_fun_ref_t&lt;_Ret,&#32;_Tp&gt;
1383 &#32;&#32;&#32;&#32;mem_fun_ref(_Ret&#32;(_Tp::*__f)())
1384 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;mem_fun_ref_t&lt;_Ret,&#32;_Tp&gt;(__f);&#32;}
1385 
1386 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1387 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1388 &#32;&#32;&#32;&#32;inline&#32;const_mem_fun_ref_t&lt;_Ret,&#32;_Tp&gt;
1389 &#32;&#32;&#32;&#32;mem_fun_ref(_Ret&#32;(_Tp::*__f)()&#32;const)
1390 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_mem_fun_ref_t&lt;_Ret,&#32;_Tp&gt;(__f);&#32;}
1391 
1392 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1393 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1394 &#32;&#32;&#32;&#32;inline&#32;mem_fun1_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;
1395 &#32;&#32;&#32;&#32;mem_fun(_Ret&#32;(_Tp::*__f)(_Arg))
1396 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;mem_fun1_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;(__f);&#32;}
1397 
1398 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1399 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1400 &#32;&#32;&#32;&#32;inline&#32;const_mem_fun1_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;
1401 &#32;&#32;&#32;&#32;mem_fun(_Ret&#32;(_Tp::*__f)(_Arg)&#32;const)
1402 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_mem_fun1_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;(__f);&#32;}
1403 
1404 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1405 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1406 &#32;&#32;&#32;&#32;inline&#32;mem_fun1_ref_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;
1407 &#32;&#32;&#32;&#32;mem_fun_ref(_Ret&#32;(_Tp::*__f)(_Arg))
1408 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;mem_fun1_ref_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;(__f);&#32;}
1409 
1410 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ret,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
1411 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::mem_fn&quot;</emphasis>)
1412 &#32;&#32;&#32;&#32;inline&#32;const_mem_fun1_ref_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;
1413 &#32;&#32;&#32;&#32;mem_fun_ref(_Ret&#32;(_Tp::*__f)(_Arg)&#32;const)
1414 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_mem_fun1_ref_t&lt;_Ret,&#32;_Tp,&#32;_Arg&gt;(__f);&#32;}
1415 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1416 
1419 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
1420 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SfinaeType,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
1421 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__has_is_transparent
1422 &#32;&#32;&#32;&#32;{&#32;};
1423 
1424 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SfinaeType&gt;
1425 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__has_is_transparent&lt;_Func,&#32;_SfinaeType,
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Func::is_transparent&gt;&gt;
1427 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;&#32;};
1428 
1429 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SfinaeType&gt;
1430 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__has_is_transparent_t
1431 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__has_is_transparent&lt;_Func,&#32;_SfinaeType&gt;::type;
1432 <emphasis role="preprocessor">#endif</emphasis>
1433 
1434 _GLIBCXX_END_NAMESPACE_VERSION
1435 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1436 
1437 <emphasis role="preprocessor">#if&#32;(__cplusplus&#32;&lt;&#32;201103L)&#32;||&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1438 <emphasis role="preprocessor">#&#32;include&#32;&lt;backward/binders.h&gt;</emphasis>
1439 <emphasis role="preprocessor">#endif</emphasis>
1440 
1441 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_FUNCTION_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
