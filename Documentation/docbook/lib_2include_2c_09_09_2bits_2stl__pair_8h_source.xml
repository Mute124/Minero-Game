<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__pair_8h_source" xml:lang="en-US">
<title>stl_pair.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_pair.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Pair&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_PAIR_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_PAIR_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
60 <emphasis role="preprocessor">#&#32;include&#32;&lt;type_traits&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;std::__decay_and_strip</emphasis>
61 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/move.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;std::move&#32;/&#32;std::forward,&#32;and&#32;std::swap</emphasis>
62 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/utility.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;std::tuple_element,&#32;std::tuple_size</emphasis>
63 <emphasis role="preprocessor">#endif</emphasis>
64 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
65 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
66 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_utility&#32;201811L</emphasis>
67 <emphasis role="preprocessor">#endif</emphasis>
68 
69 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
70 {
71 _GLIBCXX_BEGIN_NAMESPACE_VERSION
72 
78 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
80 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>piecewise_construct_t&#32;{&#32;<emphasis role="keyword">explicit</emphasis>&#32;piecewise_construct_t()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;};
81 
83 &#32;&#32;_GLIBCXX17_INLINE&#32;<emphasis role="keyword">constexpr</emphasis>&#32;piecewise_construct_t&#32;piecewise_construct&#32;=
84 &#32;&#32;&#32;&#32;piecewise_construct_t();
85 
87 
88 &#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declarations.</emphasis>
89 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&gt;
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>tuple;
91 
92 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>...&gt;
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Index_tuple;
94 
95 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_lib_concepts</emphasis>
96 &#32;&#32;<emphasis role="comment">//&#32;Concept&#32;utility&#32;functions,&#32;reused&#32;in&#32;conditionally-explicit</emphasis>
97 &#32;&#32;<emphasis role="comment">//&#32;constructors.</emphasis>
98 &#32;&#32;<emphasis role="comment">//&#32;See&#32;PR&#32;70437,&#32;don&apos;t&#32;look&#32;at&#32;is_constructible&#32;or</emphasis>
99 &#32;&#32;<emphasis role="comment">//&#32;is_convertible&#32;if&#32;the&#32;types&#32;are&#32;the&#32;same&#32;to</emphasis>
100 &#32;&#32;<emphasis role="comment">//&#32;avoid&#32;querying&#32;those&#32;properties&#32;for&#32;incomplete&#32;types.</emphasis>
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_PCC
103 &#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_ConstructiblePair()
106 &#32;&#32;&#32;&#32;&#32;&#32;{
107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and_&lt;is_constructible&lt;_T1,&#32;const&#32;_U1&amp;&gt;,
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_T2,&#32;const&#32;_U2&amp;&gt;&gt;<link linkend="_classvalue">::value</link>;
109 &#32;&#32;&#32;&#32;&#32;&#32;}
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_ImplicitlyConvertiblePair()
113 &#32;&#32;&#32;&#32;&#32;&#32;{
114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and_&lt;is_convertible&lt;const&#32;_U1&amp;,&#32;_T1&gt;,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;const&#32;_U2&amp;,&#32;_T2&gt;&gt;<link linkend="_classvalue">::value</link>;
116 &#32;&#32;&#32;&#32;&#32;&#32;}
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_MoveConstructiblePair()
120 &#32;&#32;&#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and_&lt;is_constructible&lt;_T1,&#32;_U1&amp;&amp;&gt;,
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_T2,&#32;_U2&amp;&amp;&gt;&gt;<link linkend="_classvalue">::value</link>;
123 &#32;&#32;&#32;&#32;&#32;&#32;}
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_ImplicitlyMoveConvertiblePair()
127 &#32;&#32;&#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__and_&lt;is_convertible&lt;_U1&amp;&amp;,&#32;_T1&gt;,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_U2&amp;&amp;,&#32;_T2&gt;&gt;<link linkend="_classvalue">::value</link>;
130 &#32;&#32;&#32;&#32;&#32;&#32;}
131 &#32;&#32;&#32;&#32;};
132 
133 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_PCC&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_T1,&#32;_T2&gt;
135 &#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_ConstructiblePair()
138 &#32;&#32;&#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
140 &#32;&#32;&#32;&#32;&#32;&#32;}
141 
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_ImplicitlyConvertiblePair()
144 &#32;&#32;&#32;&#32;&#32;&#32;{
145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
146 &#32;&#32;&#32;&#32;&#32;&#32;}
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_MoveConstructiblePair()
150 &#32;&#32;&#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
152 &#32;&#32;&#32;&#32;&#32;&#32;}
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_ImplicitlyMoveConvertiblePair()
156 &#32;&#32;&#32;&#32;&#32;&#32;{
157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
158 &#32;&#32;&#32;&#32;&#32;&#32;}
159 &#32;&#32;&#32;&#32;};
160 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;lib&#32;concepts</emphasis>
161 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
162 
163 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>__pair_base
164 &#32;&#32;{
165 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L&#32;&amp;&amp;&#32;!&#32;__cpp_lib_concepts</emphasis>
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>pair;
167 &#32;&#32;&#32;&#32;__pair_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
168 &#32;&#32;&#32;&#32;~__pair_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
169 &#32;&#32;&#32;&#32;__pair_base(<emphasis role="keyword">const</emphasis>&#32;__pair_base&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
170 &#32;&#32;&#32;&#32;__pair_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__pair_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
171 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
172 &#32;&#32;};
173 
175 
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>pair
186 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__pair_base&lt;_T1,&#32;_T2&gt;
187 &#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_T1&#32;first_type;&#32;&#32;&#32;&#32;
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_T2&#32;second_type;&#32;&#32;&#32;
190 
191 &#32;&#32;&#32;&#32;&#32;&#32;_T1&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
192 &#32;&#32;&#32;&#32;&#32;&#32;_T2&#32;second;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
193 
194 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(<emphasis role="keyword">const</emphasis>&#32;pair&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;&#32;&#32;&#32;
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(pair&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;&#32;&#32;&#32;&#32;
197 
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args1,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args2&gt;
199 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
200 &#32;&#32;&#32;&#32;pair(piecewise_construct_t,&#32;tuple&lt;_Args1...&gt;,&#32;tuple&lt;_Args2...&gt;);
201 
203 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(pair&amp;&#32;__p)
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__and_&lt;__is_nothrow_swappable&lt;_T1&gt;,
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_nothrow_swappable&lt;_T2&gt;&gt;<link linkend="_classvalue">::value</link>)
207 &#32;&#32;&#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
209 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;__p.first);
210 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(second,&#32;__p.second);
211 &#32;&#32;&#32;&#32;&#32;&#32;}
212 
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args1,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Indexes1,
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args2,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Indexes2&gt;
216 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
217 &#32;&#32;&#32;&#32;pair(tuple&lt;_Args1...&gt;&amp;,&#32;tuple&lt;_Args2...&gt;&amp;,
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Index_tuple&lt;_Indexes1...&gt;,&#32;_Index_tuple&lt;_Indexes2...&gt;);
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
220 
221 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++20&#32;implementation&#32;using&#32;concepts,&#32;explicit(bool),&#32;fully&#32;constexpr.</emphasis>
223 
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>(__not_&lt;__and_&lt;__is_implicitly_default_constructible&lt;_T1&gt;,
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_implicitly_default_constructible&lt;_T2&gt;&gt;&gt;())
228 &#32;&#32;&#32;&#32;&#32;&#32;pair()
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_default_constructible_v&lt;_T1&gt;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_default_constructible_v&lt;_T2&gt;
231 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(),&#32;second()
232 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
233 
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
235 
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
238 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
239 &#32;&#32;&#32;&#32;_S_constructible()
240 &#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_constructible_v&lt;_T1,&#32;_U1&gt;)
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_constructible_v&lt;_T2,&#32;_U2&gt;;
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
244 &#32;&#32;&#32;&#32;}
245 
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
247 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
248 &#32;&#32;&#32;&#32;_S_nothrow_constructible()
249 &#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_nothrow_constructible_v&lt;_T1,&#32;_U1&gt;)
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_nothrow_constructible_v&lt;_T2,&#32;_U2&gt;;
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
253 &#32;&#32;&#32;&#32;}
254 
255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
256 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
257 &#32;&#32;&#32;&#32;_S_convertible()
258 &#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_convertible_v&lt;_U1,&#32;_T1&gt;)
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_convertible_v&lt;_U2,&#32;_T2&gt;;
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
262 &#32;&#32;&#32;&#32;}
264 
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
266 
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>(!_S_convertible&lt;const&#32;_T1&amp;,&#32;const&#32;_T2&amp;&gt;())
269 &#32;&#32;&#32;&#32;&#32;&#32;pair(<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__y)
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_constructible&lt;const&#32;_T1&amp;,&#32;const&#32;_T2&amp;&gt;())
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_constructible&lt;const&#32;_T1&amp;,&#32;const&#32;_T2&amp;&gt;())
272 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__x),&#32;second(__y)
273 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
274 
276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_constructible&lt;_U1,&#32;_U2&gt;())
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>(!_S_convertible&lt;_U1,&#32;_U2&gt;())
279 &#32;&#32;&#32;&#32;pair(_U1&amp;&amp;&#32;__x,&#32;_U2&amp;&amp;&#32;__y)
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_constructible&lt;_U1,&#32;_U2&gt;())
281 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__x)),&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__y))
282 &#32;&#32;&#32;&#32;{&#32;}
283 
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
286 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_constructible&lt;const&#32;_U1&amp;,&#32;const&#32;_U2&amp;&gt;())
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>(!_S_convertible&lt;const&#32;_U1&amp;,&#32;const&#32;_U2&amp;&gt;())
288 &#32;&#32;&#32;&#32;pair(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_U1,&#32;_U2&gt;&amp;&#32;__p)
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_constructible&lt;const&#32;_U1&amp;,&#32;const&#32;_U2&amp;&gt;())
290 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__p.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;second(__p.second)
291 &#32;&#32;&#32;&#32;{&#32;}
292 
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_constructible&lt;_U1,&#32;_U2&gt;())
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>(!_S_convertible&lt;_U1,&#32;_U2&gt;())
297 &#32;&#32;&#32;&#32;pair(pair&lt;_U1,&#32;_U2&gt;&amp;&amp;&#32;__p)
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_constructible&lt;_U1,&#32;_U2&gt;())
299 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__p.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)),
300 &#32;&#32;&#32;&#32;&#32;&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__p.second))
301 &#32;&#32;&#32;&#32;{&#32;}
302 
303 &#32;&#32;<emphasis role="keyword">private</emphasis>:
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
307 &#32;&#32;&#32;&#32;_S_assignable()
308 &#32;&#32;&#32;&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_assignable_v&lt;_T1&amp;,&#32;_U1&gt;)
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_assignable_v&lt;_T2&amp;,&#32;_U2&gt;;
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
312 &#32;&#32;&#32;&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
316 &#32;&#32;&#32;&#32;_S_nothrow_assignable()
317 &#32;&#32;&#32;&#32;{
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_nothrow_assignable_v&lt;_T1&amp;,&#32;_U1&gt;)
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_nothrow_assignable_v&lt;_T2&amp;,&#32;_U2&gt;;
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
321 &#32;&#32;&#32;&#32;}
323 
324 &#32;&#32;<emphasis role="keyword">public</emphasis>:
325 
326 &#32;&#32;&#32;&#32;&#32;&#32;pair&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;pair&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
327 
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair&amp;
330 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;pair&amp;&#32;__p)
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_assignable&lt;const&#32;_T1&amp;,&#32;const&#32;_T2&amp;&gt;())
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_assignable&lt;const&#32;_T1&amp;,&#32;const&#32;_T2&amp;&gt;())
333 &#32;&#32;&#32;&#32;&#32;&#32;{
334 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;__p.first;
335 &#32;&#32;&#32;&#32;second&#32;=&#32;__p.second;
336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
337 &#32;&#32;&#32;&#32;&#32;&#32;}
338 
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair&amp;
341 &#32;&#32;&#32;&#32;&#32;&#32;operator=(pair&amp;&amp;&#32;__p)
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_assignable&lt;_T1,&#32;_T2&gt;())
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_assignable&lt;_T1,&#32;_T2&gt;())
344 &#32;&#32;&#32;&#32;&#32;&#32;{
345 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;std::forward&lt;first_type&gt;(__p.first);
346 &#32;&#32;&#32;&#32;second&#32;=&#32;std::forward&lt;second_type&gt;(__p.second);
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
348 &#32;&#32;&#32;&#32;&#32;&#32;}
349 
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
352 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair&amp;
353 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_U1,&#32;_U2&gt;&amp;&#32;__p)
354 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_assignable&lt;const&#32;_U1&amp;,&#32;const&#32;_U2&amp;&gt;())
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_assignable&lt;const&#32;_U1&amp;,&#32;const&#32;_U2&amp;&gt;())
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;__p.first;
358 &#32;&#32;&#32;&#32;&#32;&#32;second&#32;=&#32;__p.second;
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
360 &#32;&#32;&#32;&#32;}
361 
363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
364 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair&amp;
365 &#32;&#32;&#32;&#32;operator=(pair&lt;_U1,&#32;_U2&gt;&amp;&amp;&#32;__p)
366 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_assignable&lt;_U1,&#32;_U2&gt;())
367 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(_S_assignable&lt;_U1,&#32;_U2&gt;())
368 &#32;&#32;&#32;&#32;{
369 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;std::forward&lt;_U1&gt;(__p.first);
370 &#32;&#32;&#32;&#32;&#32;&#32;second&#32;=&#32;std::forward&lt;_U2&gt;(__p.second);
371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
372 &#32;&#32;&#32;&#32;}
373 <emphasis role="preprocessor">#else</emphasis>
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++11/14/17&#32;implementation&#32;using&#32;enable_if,&#32;partially&#32;constexpr.</emphasis>
375 
378 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1&#32;=&#32;_T1,
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&#32;=&#32;_T2,
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_implicitly_default_constructible&lt;_U1&gt;,
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_implicitly_default_constructible&lt;_U2&gt;&gt;
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>&gt;
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair()
385 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(),&#32;second()&#32;{&#32;}
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1&#32;=&#32;_T1,
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&#32;=&#32;_T2,
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_default_constructible&lt;_U1&gt;,
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_default_constructible&lt;_U2&gt;,
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;__is_implicitly_default_constructible&lt;_U1&gt;,
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_implicitly_default_constructible&lt;_U2&gt;&gt;&gt;&gt;
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>&gt;
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair()
397 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(),&#32;second()&#32;{&#32;}
398 
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shortcut&#32;for&#32;constraining&#32;the&#32;templates&#32;that&#32;don&apos;t&#32;take&#32;pairs.</emphasis>
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_PCCP&#32;=&#32;_PCC&lt;true,&#32;_T1,&#32;_T2&gt;;
403 
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1&#32;=&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2=_T2,&#32;<emphasis role="keyword">typename</emphasis>
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCP::template
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ConstructiblePair&lt;_U1,&#32;_U2&gt;()
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_PCCP::template
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyConvertiblePair&lt;_U1,&#32;_U2&gt;(),
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">true</emphasis>&gt;
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__b)
412 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__a),&#32;second(__b)&#32;{&#32;}
413 
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1&#32;=&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2=_T2,&#32;<emphasis role="keyword">typename</emphasis>
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCP::template
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ConstructiblePair&lt;_U1,&#32;_U2&gt;()
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_PCCP::template
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyConvertiblePair&lt;_U1,&#32;_U2&gt;(),
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">false</emphasis>&gt;
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__b)
422 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__a),&#32;second(__b)&#32;{&#32;}
423 
424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shortcut&#32;for&#32;constraining&#32;the&#32;templates&#32;that&#32;take&#32;pairs.</emphasis>
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_PCCFP&#32;=&#32;_PCC&lt;!is_same&lt;_T1,&#32;_U1&gt;::value
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;!is_same&lt;_T2,&#32;_U2&gt;::value,
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_T1,&#32;_T2&gt;;
431 
432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2,&#32;<emphasis role="keyword">typename</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCFP&lt;_U1,&#32;_U2&gt;::template
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ConstructiblePair&lt;_U1,&#32;_U2&gt;()
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_PCCFP&lt;_U1,&#32;_U2&gt;::template
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyConvertiblePair&lt;_U1,&#32;_U2&gt;(),
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">true</emphasis>&gt;
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_U1,&#32;_U2&gt;&amp;&#32;__p)
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__p.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;second(__p.second)&#32;{&#32;}
440 
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2,&#32;<emphasis role="keyword">typename</emphasis>
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCFP&lt;_U1,&#32;_U2&gt;::template
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ConstructiblePair&lt;_U1,&#32;_U2&gt;()
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_PCCFP&lt;_U1,&#32;_U2&gt;::template
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyConvertiblePair&lt;_U1,&#32;_U2&gt;(),
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">false</emphasis>&gt;
447 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_U1,&#32;_U2&gt;&amp;&#32;__p)
448 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__p.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;second(__p.second)&#32;{&#32;}
449 
450 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
451 <emphasis role="preprocessor">#if&#32;defined(__DEPRECATED)</emphasis>
452 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_DEPRECATED_PAIR_CTOR&#32;\</emphasis>
453 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__attribute__&#32;((__deprecated__&#32;(&quot;use&#32;&apos;nullptr&apos;&#32;instead&#32;of&#32;&apos;0&apos;&#32;to&#32;&quot;&#32;\</emphasis>
454 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;initialize&#32;std::pair&#32;of&#32;move-only&#32;&quot;&#32;\</emphasis>
455 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;type&#32;and&#32;pointer&quot;)))</emphasis>
456 <emphasis role="preprocessor">#else</emphasis>
457 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_DEPRECATED_PAIR_CTOR</emphasis>
458 <emphasis role="preprocessor">#endif</emphasis>
459 
460 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
462 
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;type&#32;which&#32;can&#32;be&#32;constructed&#32;from&#32;literal&#32;zero,&#32;but&#32;not&#32;nullptr</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__zero_as_null_pointer_constant
465 &#32;&#32;&#32;&#32;&#32;&#32;{
466 &#32;&#32;&#32;&#32;__zero_as_null_pointer_constant(<emphasis role="keywordtype">int</emphasis>&#32;__zero_as_null_pointer_constant::*)
467 &#32;&#32;&#32;&#32;{&#32;}
468 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__enable_if_t&lt;is_null_pointer&lt;_Tp&gt;::value&gt;&gt;
470 &#32;&#32;&#32;&#32;__zero_as_null_pointer_constant(_Tp)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
471 &#32;&#32;&#32;&#32;&#32;&#32;};
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
474 
475 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Deprecated&#32;extensions&#32;to&#32;DR&#32;811.</emphasis>
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;These&#32;allow&#32;construction&#32;from&#32;an&#32;rvalue&#32;and&#32;a&#32;literal&#32;zero,</emphasis>
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;cases&#32;where&#32;the&#32;standard&#32;says&#32;the&#32;zero&#32;should&#32;be&#32;deduced&#32;as&#32;int</emphasis>
478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_if_t&lt;__and_&lt;__not_&lt;is_reference&lt;_U1&gt;&gt;,
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_pointer&lt;_T2&gt;,
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_T1,&#32;_U1&gt;,
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_constructible&lt;_T1,&#32;const&#32;_U1&amp;&gt;&gt;,
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_U1,&#32;_T1&gt;&gt;<link linkend="_classvalue">::value</link>,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>&gt;
485 &#32;&#32;&#32;&#32;_GLIBCXX_DEPRECATED_PAIR_CTOR
486 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
487 &#32;&#32;&#32;&#32;pair(_U1&amp;&amp;&#32;__x,&#32;__zero_as_null_pointer_constant,&#32;...)
488 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__x)),&#32;second(nullptr)&#32;{&#32;}
489 
490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_if_t&lt;__and_&lt;__not_&lt;is_reference&lt;_U1&gt;&gt;,
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_pointer&lt;_T2&gt;,
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_T1,&#32;_U1&gt;,
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_constructible&lt;_T1,&#32;const&#32;_U1&amp;&gt;&gt;,
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_convertible&lt;_U1,&#32;_T1&gt;&gt;&gt;<link linkend="_classvalue">::value</link>,
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>&gt;
497 &#32;&#32;&#32;&#32;_GLIBCXX_DEPRECATED_PAIR_CTOR
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>
499 &#32;&#32;&#32;&#32;pair(_U1&amp;&amp;&#32;__x,&#32;__zero_as_null_pointer_constant,&#32;...)
500 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__x)),&#32;second(nullptr)&#32;{&#32;}
501 
502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U2,
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_if_t&lt;__and_&lt;is_pointer&lt;_T1&gt;,
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_reference&lt;_U2&gt;&gt;,
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_T2,&#32;_U2&gt;,
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_constructible&lt;_T2,&#32;const&#32;_U2&amp;&gt;&gt;,
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_U2,&#32;_T2&gt;&gt;<link linkend="_classvalue">::value</link>,
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>&gt;
509 &#32;&#32;&#32;&#32;_GLIBCXX_DEPRECATED_PAIR_CTOR
510 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
511 &#32;&#32;&#32;&#32;pair(__zero_as_null_pointer_constant,&#32;_U2&amp;&amp;&#32;__y,&#32;...)
512 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(nullptr),&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__y))&#32;{&#32;}
513 
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U2,
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__enable_if_t&lt;__and_&lt;is_pointer&lt;_T1&gt;,
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_reference&lt;_U2&gt;&gt;,
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_T2,&#32;_U2&gt;,
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_constructible&lt;_T2,&#32;const&#32;_U2&amp;&gt;&gt;,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_convertible&lt;_U2,&#32;_T2&gt;&gt;&gt;<link linkend="_classvalue">::value</link>,
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;&#32;=&#32;<emphasis role="keyword">false</emphasis>&gt;
521 &#32;&#32;&#32;&#32;_GLIBCXX_DEPRECATED_PAIR_CTOR
522 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>
523 &#32;&#32;&#32;&#32;pair(__zero_as_null_pointer_constant,&#32;_U2&amp;&amp;&#32;__y,&#32;...)
524 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(nullptr),&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__y))&#32;{&#32;}
525 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_DEPRECATED_PAIR_CTOR</emphasis>
526 <emphasis role="preprocessor">#endif</emphasis>
527 
528 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2,&#32;<emphasis role="keyword">typename</emphasis>
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCP::template
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MoveConstructiblePair&lt;_U1,&#32;_U2&gt;()
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_PCCP::template
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyMoveConvertiblePair&lt;_U1,&#32;_U2&gt;(),
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">true</emphasis>&gt;
534 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(_U1&amp;&amp;&#32;__x,&#32;_U2&amp;&amp;&#32;__y)
535 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__x)),&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__y))&#32;{&#32;}
536 
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2,&#32;<emphasis role="keyword">typename</emphasis>
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCP::template
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MoveConstructiblePair&lt;_U1,&#32;_U2&gt;()
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_PCCP::template
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyMoveConvertiblePair&lt;_U1,&#32;_U2&gt;(),
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">false</emphasis>&gt;
543 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(_U1&amp;&amp;&#32;__x,&#32;_U2&amp;&amp;&#32;__y)
544 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__x)),&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__y))&#32;{&#32;}
545 
546 
547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2,&#32;<emphasis role="keyword">typename</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCFP&lt;_U1,&#32;_U2&gt;::template
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MoveConstructiblePair&lt;_U1,&#32;_U2&gt;()
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_PCCFP&lt;_U1,&#32;_U2&gt;::template
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyMoveConvertiblePair&lt;_U1,&#32;_U2&gt;(),
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">true</emphasis>&gt;
553 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(pair&lt;_U1,&#32;_U2&gt;&amp;&amp;&#32;__p)
554 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__p.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)),
555 &#32;&#32;&#32;&#32;&#32;&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__p.second))&#32;{&#32;}
556 
557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2,&#32;<emphasis role="keyword">typename</emphasis>
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;_PCCFP&lt;_U1,&#32;_U2&gt;::template
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MoveConstructiblePair&lt;_U1,&#32;_U2&gt;()
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_PCCFP&lt;_U1,&#32;_U2&gt;::template
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ImplicitlyMoveConvertiblePair&lt;_U1,&#32;_U2&gt;(),
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>=<emphasis role="keyword">false</emphasis>&gt;
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair(pair&lt;_U1,&#32;_U2&gt;&amp;&amp;&#32;__p)
564 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(<link linkend="_namespacestd">std</link>::forward&lt;_U1&gt;(__p.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)),
565 &#32;&#32;&#32;&#32;&#32;&#32;second(<link linkend="_namespacestd">std</link>::forward&lt;_U2&gt;(__p.second))&#32;{&#32;}
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;pair&amp;
568 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__conditional_t&lt;__and_&lt;is_copy_assignable&lt;_T1&gt;,
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_copy_assignable&lt;_T2&gt;&gt;<link linkend="_classvalue">::value</link>,
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;pair&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;__nonesuch&amp;&gt;&#32;__p)
571 &#32;&#32;&#32;&#32;&#32;&#32;{
572 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;__p.first;
573 &#32;&#32;&#32;&#32;second&#32;=&#32;__p.second;
574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
575 &#32;&#32;&#32;&#32;&#32;&#32;}
576 
577 &#32;&#32;&#32;&#32;&#32;&#32;pair&amp;
578 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__conditional_t&lt;__and_&lt;is_move_assignable&lt;_T1&gt;,
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_move_assignable&lt;_T2&gt;&gt;<link linkend="_classvalue">::value</link>,
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&amp;&amp;,&#32;__nonesuch&amp;&amp;&gt;&#32;__p)
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__and_&lt;is_nothrow_move_assignable&lt;_T1&gt;,
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_move_assignable&lt;_T2&gt;&gt;<link linkend="_classvalue">::value</link>)
583 &#32;&#32;&#32;&#32;&#32;&#32;{
584 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;std::forward&lt;first_type&gt;(__p.first);
585 &#32;&#32;&#32;&#32;second&#32;=&#32;std::forward&lt;second_type&gt;(__p.second);
586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
587 &#32;&#32;&#32;&#32;&#32;&#32;}
588 
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
590 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;is_assignable&lt;_T1&amp;,&#32;const&#32;_U1&amp;&gt;,
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_assignable&lt;_T2&amp;,&#32;const&#32;_U2&amp;&gt;&gt;<link linkend="_classvalue">::value</link>,
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&amp;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
593 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_U1,&#32;_U2&gt;&amp;&#32;__p)
594 &#32;&#32;&#32;&#32;{
595 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;__p.first;
596 &#32;&#32;&#32;&#32;&#32;&#32;second&#32;=&#32;__p.second;
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
598 &#32;&#32;&#32;&#32;}
599 
600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
601 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;is_assignable&lt;_T1&amp;,&#32;_U1&amp;&amp;&gt;,
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_assignable&lt;_T2&amp;,&#32;_U2&amp;&amp;&gt;&gt;<link linkend="_classvalue">::value</link>,
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&amp;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
604 &#32;&#32;&#32;&#32;operator=(pair&lt;_U1,&#32;_U2&gt;&amp;&amp;&#32;__p)
605 &#32;&#32;&#32;&#32;{
606 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;std::forward&lt;_U1&gt;(__p.first);
607 &#32;&#32;&#32;&#32;&#32;&#32;second&#32;=&#32;std::forward&lt;_U2&gt;(__p.second);
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
609 &#32;&#32;&#32;&#32;}
610 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;lib&#32;concepts</emphasis>
611 <emphasis role="preprocessor">#else</emphasis>
612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++03&#32;implementation</emphasis>
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
615 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;265.&#32;&#32;std::pair::pair()&#32;effects&#32;overly&#32;restrictive</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;pair()&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(),&#32;second()&#32;{&#32;}
619 
621 &#32;&#32;&#32;&#32;&#32;&#32;pair(<emphasis role="keyword">const</emphasis>&#32;_T1&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_T2&amp;&#32;__b)
622 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__a),&#32;second(__b)&#32;{&#32;}
623 
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2&gt;
626 &#32;&#32;&#32;&#32;pair(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_U1,&#32;_U2&gt;&amp;&#32;__p)
627 &#32;&#32;&#32;&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>(__p.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;second(__p.second)&#32;{&#32;}
628 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
629 &#32;&#32;&#32;&#32;};
630 
632 
633 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
634 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;&#32;pair(_T1,&#32;_T2)&#32;-&gt;&#32;pair&lt;_T1,&#32;_T2&gt;;
635 <emphasis role="preprocessor">#endif</emphasis>
636 
638 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
639 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
640 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
641 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.first&#32;==&#32;__y.first&#32;&amp;&amp;&#32;__x.second&#32;==&#32;__y.second;&#32;}
642 
643 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
644 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
645 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;common_comparison_category_t&lt;__detail::__synth3way_t&lt;_T1&gt;,
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__synth3way_t&lt;_T2&gt;&gt;
647 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
648 &#32;&#32;&#32;&#32;{
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;__detail::__synth3way(__x.first,&#32;__y.first);&#32;__c&#32;!=&#32;0)
650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c;
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__synth3way(__x.second,&#32;__y.second);
652 &#32;&#32;&#32;&#32;}
653 <emphasis role="preprocessor">#else</emphasis>
661 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
662 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
663 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
664 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.first&#32;&lt;&#32;__y.first
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(!(__y.first&#32;&lt;&#32;__x.first)&#32;&amp;&amp;&#32;__x.second&#32;&lt;&#32;__y.second);&#32;}
666 
668 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
669 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
670 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
671 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
672 
674 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
675 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
676 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
677 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
678 
680 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
681 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
682 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
683 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
684 
686 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
687 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
688 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
689 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
690 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!(three_way_comparison&#32;&amp;&amp;&#32;concepts)</emphasis>
691 
692 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
698 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
699 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>
700 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
701 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constrained&#32;free&#32;swap&#32;overload,&#32;see&#32;p0185r1</emphasis>
702 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;__is_swappable&lt;_T1&gt;,
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_swappable&lt;_T2&gt;&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
704 <emphasis role="preprocessor">#else</emphasis>
705 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
706 <emphasis role="preprocessor">#endif</emphasis>
707 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__x,&#32;pair&lt;_T1,&#32;_T2&gt;&amp;&#32;__y)
708 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
709 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
710 
711 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
712 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
713 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;!__and_&lt;__is_swappable&lt;_T1&gt;,
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_swappable&lt;_T2&gt;&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
715 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(pair&lt;_T1,&#32;_T2&gt;&amp;,&#32;pair&lt;_T1,&#32;_T2&gt;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
716 <emphasis role="preprocessor">#endif</emphasis>
717 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
718 
720 
734 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
735 &#32;&#32;<emphasis role="comment">//&#32;181.&#32;&#32;make_pair()&#32;unintended&#32;behavior</emphasis>
736 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
737 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;DR&#32;706.</emphasis>
738 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
739 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;pair&lt;typename&#32;__decay_and_strip&lt;_T1&gt;::__type,
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__decay_and_strip&lt;_T2&gt;::__type&gt;
741 &#32;&#32;&#32;&#32;make_pair(_T1&amp;&amp;&#32;__x,&#32;_T2&amp;&amp;&#32;__y)
742 &#32;&#32;&#32;&#32;{
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__decay_and_strip&lt;_T1&gt;::__type&#32;__ds_type1;
744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__decay_and_strip&lt;_T2&gt;::__type&#32;__ds_type2;
745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;pair&lt;__ds_type1,&#32;__ds_type2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pair_type;
746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair_type(std::forward&lt;_T1&gt;(__x),&#32;std::forward&lt;_T2&gt;(__y));
747 &#32;&#32;&#32;&#32;}
748 <emphasis role="preprocessor">#else</emphasis>
749 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
750 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;
751 &#32;&#32;&#32;&#32;make_pair(_T1&#32;__x,&#32;_T2&#32;__y)
752 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;_T1,&#32;_T2&gt;(__x,&#32;__y);&#32;}
753 <emphasis role="preprocessor">#endif</emphasis>
754 
756 
757 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
758 &#32;&#32;<emphasis role="comment">//&#32;Various&#32;functions&#32;which&#32;give&#32;std::pair&#32;a&#32;tuple-like&#32;interface.</emphasis>
759 
760 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
761 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_tuple_like_impl&lt;pair&lt;_T1,&#32;_T2&gt;&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
762 &#32;&#32;&#32;&#32;{&#32;};
763 
765 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
766 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_size&lt;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;
767 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;integral_constant&lt;size_t,&#32;2&gt;&#32;{&#32;};
768 
770 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
771 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_element&lt;0,&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;
772 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp1&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;&#32;};
773 
775 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
776 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>tuple_element&lt;1,&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;
777 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp2&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;&#32;};
778 
779 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
780 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
781 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;tuple_size_v&lt;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;&#32;=&#32;2;
782 
783 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
784 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;tuple_size_v&lt;const&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;&#32;=&#32;2;
785 
786 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
787 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_pair&#32;=&#32;<emphasis role="keyword">false</emphasis>;
788 
789 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
790 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_pair&lt;pair&lt;_Tp,&#32;_Up&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
791 
792 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
793 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_pair&lt;const&#32;pair&lt;_Tp,&#32;_Up&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
794 <emphasis role="preprocessor">#endif</emphasis>
795 
797 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Int&gt;
798 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__pair_get;
799 
800 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
801 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__pair_get&lt;0&gt;
802 &#32;&#32;&#32;&#32;{
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
804 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp1&amp;
805 &#32;&#32;&#32;&#32;__get(pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
806 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair.first;&#32;}
807 
808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
809 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp1&amp;&amp;
810 &#32;&#32;&#32;&#32;__move_get(pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
811 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp1&gt;(__pair.first);&#32;}
812 
813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
814 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;
815 &#32;&#32;&#32;&#32;__const_get(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
816 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair.first;&#32;}
817 
818 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
819 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&amp;
820 &#32;&#32;&#32;&#32;__const_move_get(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
821 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;const&#32;_Tp1&gt;(__pair.first);&#32;}
822 &#32;&#32;&#32;&#32;};
823 
824 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
825 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__pair_get&lt;1&gt;
826 &#32;&#32;&#32;&#32;{
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp2&amp;
829 &#32;&#32;&#32;&#32;__get(pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
830 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair.second;&#32;}
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
833 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp2&amp;&amp;
834 &#32;&#32;&#32;&#32;__move_get(pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
835 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp2&gt;(__pair.second);&#32;}
836 
837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
838 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;
839 &#32;&#32;&#32;&#32;__const_get(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
840 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair.second;&#32;}
841 
842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
843 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&amp;
844 &#32;&#32;&#32;&#32;__const_move_get(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&amp;&#32;__pair)&#32;<emphasis role="keyword">noexcept</emphasis>
845 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;const&#32;_Tp2&gt;(__pair.second);&#32;}
846 &#32;&#32;&#32;&#32;};
848 
853 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Int,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
854 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;tuple_element&lt;_Int,&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&amp;
855 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&#32;__in)&#32;<emphasis role="keyword">noexcept</emphasis>
856 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair_get&lt;_Int&gt;::__get(__in);&#32;}
857 
858 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Int,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
859 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;tuple_element&lt;_Int,&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&amp;&amp;
860 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&amp;&#32;__in)&#32;<emphasis role="keyword">noexcept</emphasis>
861 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair_get&lt;_Int&gt;::__move_get(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__in));&#32;}
862 
863 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Int,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
864 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;tuple_element&lt;_Int,&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&amp;
865 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&#32;__in)&#32;<emphasis role="keyword">noexcept</emphasis>
866 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair_get&lt;_Int&gt;::__const_get(__in);&#32;}
867 
868 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Int,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp2&gt;
869 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;tuple_element&lt;_Int,&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&amp;&amp;
870 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp1,&#32;_Tp2&gt;&amp;&amp;&#32;__in)&#32;<emphasis role="keyword">noexcept</emphasis>
871 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pair_get&lt;_Int&gt;::__const_move_get(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__in));&#32;}
872 
873 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
874 
875 <emphasis role="preprocessor">#define&#32;__cpp_lib_tuples_by_type&#32;201304L</emphasis>
876 
877 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
878 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
879 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(pair&lt;_Tp,&#32;_Up&gt;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
880 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p.first;&#32;}
881 
882 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
883 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
884 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp,&#32;_Up&gt;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
885 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p.first;&#32;}
886 
887 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
888 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;&amp;
889 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(pair&lt;_Tp,&#32;_Up&gt;&amp;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
890 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p.first);&#32;}
891 
892 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
893 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&amp;
894 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Tp,&#32;_Up&gt;&amp;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
895 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p.first);&#32;}
896 
897 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
898 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;
899 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(pair&lt;_Up,&#32;_Tp&gt;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
900 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p.second;&#32;}
901 
902 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
903 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
904 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Up,&#32;_Tp&gt;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
905 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p.second;&#32;}
906 
907 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
908 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;&amp;
909 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(pair&lt;_Up,&#32;_Tp&gt;&amp;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
910 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p.second);&#32;}
911 
912 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
913 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&amp;
914 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(<emphasis role="keyword">const</emphasis>&#32;pair&lt;_Up,&#32;_Tp&gt;&amp;&amp;&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
915 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__p.second);&#32;}
916 
917 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
919 #endif&#32;<emphasis role="comment">//&#32;C++11</emphasis>
920 
921 _GLIBCXX_END_NAMESPACE_VERSION
922 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
923 
924 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_PAIR_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
