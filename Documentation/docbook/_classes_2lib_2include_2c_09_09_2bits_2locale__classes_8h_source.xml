<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2locale__classes_8h_source" xml:lang="en-US">
<title>locale_classes.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/locale_classes.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Locale&#32;support&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//</emphasis>
31 <emphasis role="comment">//&#32;ISO&#32;C++&#32;14882:&#32;22.1&#32;&#32;Locales</emphasis>
32 <emphasis role="comment">//</emphasis>
33 
34 <emphasis role="preprocessor">#ifndef&#32;_LOCALE_CLASSES_H</emphasis>
35 <emphasis role="preprocessor">#define&#32;_LOCALE_CLASSES_H&#32;1</emphasis>
36 
37 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;bits/localefwd.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;string&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;ext/atomicity.h&gt;</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
47 &#32;&#32;<emphasis role="comment">//&#32;22.1.1&#32;Class&#32;locale</emphasis>
62 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>locale
63 &#32;&#32;{
64 &#32;&#32;<emphasis role="keyword">public</emphasis>:
65 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;category;
68 
69 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Forward&#32;decls&#32;and&#32;friends:</emphasis>
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>facet;
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Impl;
73 
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>facet;
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Impl;
76 
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;has_facet(<emphasis role="keyword">const</emphasis>&#32;locale&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
80 
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Facet&amp;
83 &#32;&#32;&#32;&#32;&#32;&#32;use_facet(<emphasis role="keyword">const</emphasis>&#32;locale&amp;);
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cache&gt;
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>__use_cache;
87 
89 
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;none&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0;
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;ctype&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;0;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;numeric&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;1;
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;collate&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;2;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;<link linkend="_structtime">time</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;3;
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;monetary&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;4;
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;messages&#32;&#32;=&#32;1L&#32;&lt;&lt;&#32;5;
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;category&#32;<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(ctype&#32;|&#32;numeric&#32;|&#32;collate&#32;|
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;&#32;|&#32;monetary&#32;|&#32;messages);
108 
109 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Construct/copy/destroy:</emphasis>
110 
117 &#32;&#32;&#32;&#32;locale()&#32;throw();
118 
126 &#32;&#32;&#32;&#32;locale(const&#32;locale&amp;&#32;__other)&#32;throw();
127 
136 &#32;&#32;&#32;&#32;explicit
137 &#32;&#32;&#32;&#32;locale(const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s);
138 
151 &#32;&#32;&#32;&#32;locale(const&#32;locale&amp;&#32;__base,&#32;const&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;category&#32;__cat);
152 
153 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
163 &#32;&#32;&#32;&#32;locale(<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;__s)&#32;:&#32;locale(__s.c_str())&#32;{&#32;}
164 
177 &#32;&#32;&#32;&#32;locale(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__base,&#32;<emphasis role="keyword">const</emphasis>&#32;std::string&amp;&#32;__s,&#32;category&#32;__cat)
178 &#32;&#32;&#32;&#32;:&#32;locale(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>,&#32;__s.c_str(),&#32;__cat)&#32;{&#32;}
179 <emphasis role="preprocessor">#endif</emphasis>
180 
192 &#32;&#32;&#32;&#32;locale(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__base,&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__add,&#32;category&#32;__cat);
193 
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
206 &#32;&#32;&#32;&#32;&#32;&#32;locale(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__other,&#32;_Facet*&#32;__f);
207 
209 &#32;&#32;&#32;&#32;~locale()&#32;throw();
210 
219 &#32;&#32;&#32;&#32;const&#32;locale&amp;
220 &#32;&#32;&#32;&#32;operator=(const&#32;locale&amp;&#32;__other)&#32;throw();
221 
234 &#32;&#32;&#32;&#32;template&lt;typename&#32;_Facet&gt;
235 &#32;&#32;&#32;&#32;&#32;&#32;locale
236 &#32;&#32;&#32;&#32;&#32;&#32;combine(const&#32;locale&amp;&#32;__other)&#32;const;
237 
238 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Locale&#32;operations:</emphasis>
243 &#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG
244 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>
245 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>()&#32;const;
246 
254 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
255 &#32;&#32;&#32;&#32;operator==(const&#32;locale&amp;&#32;__other)&#32;const&#32;throw();
256 
257 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
264 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
265 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__other)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()
266 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(this-&gt;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(__other));&#32;}
267 <emphasis role="preprocessor">#endif</emphasis>
268 
284 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Char,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
286 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Char, _Traits, _Alloc&gt;</link>&amp;&#32;__s1,
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Char, _Traits, _Alloc&gt;</link>&amp;&#32;__s2)&#32;<emphasis role="keyword">const</emphasis>;
288 
289 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Global&#32;locale&#32;objects:</emphasis>
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale
301 &#32;&#32;&#32;&#32;global(<emphasis role="keyword">const</emphasis>&#32;locale&amp;&#32;__loc);
302 
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale&amp;
307 &#32;&#32;&#32;&#32;classic();
308 
309 &#32;&#32;<emphasis role="keyword">private</emphasis>:
310 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;(shared)&#32;implementation</emphasis>
311 &#32;&#32;&#32;&#32;_Impl*&#32;&#32;&#32;&#32;&#32;&#32;_M_impl;
312 
313 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;&quot;C&quot;&#32;reference&#32;locale</emphasis>
314 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Impl*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_classic;
315 
316 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Current&#32;global&#32;locale</emphasis>
317 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Impl*&#32;&#32;&#32;_S_global;
318 
319 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Names&#32;of&#32;underlying&#32;locale&#32;categories.</emphasis>
320 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;locale::global()&#32;has&#32;to&#32;know&#32;how&#32;to&#32;modify&#32;all&#32;the</emphasis>
321 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;underlying&#32;categories,&#32;not&#32;just&#32;the&#32;ones&#32;required&#32;by&#32;the&#32;C++</emphasis>
322 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;standard.</emphasis>
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;_S_categories;
324 
325 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;standard&#32;categories.&#32;For&#32;C++,&#32;these&#32;categories&#32;are</emphasis>
326 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;collate,&#32;ctype,&#32;monetary,&#32;numeric,&#32;time,&#32;and&#32;messages.&#32;These</emphasis>
327 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;directly&#32;correspond&#32;to&#32;ISO&#32;C99&#32;macros&#32;LC_COLLATE,&#32;LC_CTYPE,</emphasis>
328 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LC_MONETARY,&#32;LC_NUMERIC,&#32;and&#32;LC_TIME.&#32;In&#32;addition,&#32;POSIX&#32;(IEEE</emphasis>
329 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1003.1-2001)&#32;specifies&#32;LC_MESSAGES.</emphasis>
330 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;addition&#32;to&#32;the&#32;standard&#32;categories,&#32;the&#32;underlying</emphasis>
331 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operating&#32;system&#32;is&#32;allowed&#32;to&#32;define&#32;extra&#32;LC_*</emphasis>
332 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;macros.&#32;For&#32;GNU&#32;systems,&#32;the&#32;following&#32;are&#32;also&#32;valid:</emphasis>
333 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LC_PAPER,&#32;LC_NAME,&#32;LC_ADDRESS,&#32;LC_TELEPHONE,&#32;LC_MEASUREMENT,</emphasis>
334 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;LC_IDENTIFICATION.</emphasis>
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_categories_size&#32;=&#32;6&#32;+&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09locale_8h_1aca7b02186d51fbf63d491449dc4495a4">_GLIBCXX_NUM_CATEGORIES</link>&#32;};
336 
337 <emphasis role="preprocessor">#ifdef&#32;__GTHREADS</emphasis>
338 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af51081352b97dcd93f8668cc895c1c7f">__gthread_once_t</link>&#32;_S_once;
339 <emphasis role="preprocessor">#endif</emphasis>
340 
341 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
342 &#32;&#32;&#32;&#32;locale(_Impl*)&#32;<emphasis role="keywordflow">throw</emphasis>();
343 
344 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
345 &#32;&#32;&#32;&#32;_S_initialize();
346 
347 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
348 &#32;&#32;&#32;&#32;_S_initialize_once()&#32;throw();
349 
350 &#32;&#32;&#32;&#32;static&#32;category
351 &#32;&#32;&#32;&#32;_S_normalize_category(category);
352 
353 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
354 &#32;&#32;&#32;&#32;_M_coalesce(const&#32;locale&amp;&#32;__base,&#32;const&#32;locale&amp;&#32;__add,&#32;category&#32;__cat);
355 
356 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
357 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;_S_twinned_facets[];
358 <emphasis role="preprocessor">#endif</emphasis>
359 &#32;&#32;};
360 
361 
362 &#32;&#32;<emphasis role="comment">//&#32;22.1.1.1.2&#32;&#32;Class&#32;locale::facet</emphasis>
373 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>locale::facet
374 &#32;&#32;{
375 &#32;&#32;<emphasis role="keyword">private</emphasis>:
376 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>locale;
377 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>locale::_Impl;
378 
379 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount;
380 
381 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contains&#32;data&#32;from&#32;the&#32;underlying&#32;&quot;C&quot;&#32;library&#32;for&#32;the&#32;classic&#32;locale.</emphasis>
382 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__c_locale&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_c_locale;
383 
384 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String&#32;literal&#32;for&#32;the&#32;name&#32;of&#32;the&#32;classic&#32;locale.</emphasis>
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_c_name[2];
386 
387 <emphasis role="preprocessor">#ifdef&#32;__GTHREADS</emphasis>
388 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af51081352b97dcd93f8668cc895c1c7f">__gthread_once_t</link>&#32;&#32;&#32;&#32;&#32;_S_once;
389 <emphasis role="preprocessor">#endif</emphasis>
390 
391 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
392 &#32;&#32;&#32;&#32;_S_initialize_once();
393 
394 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
405 &#32;&#32;&#32;&#32;facet(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)&#32;throw()&#32;:&#32;_M_refcount(__refs&#32;?&#32;1&#32;:&#32;0)
406 &#32;&#32;&#32;&#32;{&#32;}
407 
409 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
410 &#32;&#32;&#32;&#32;~facet();
411 
412 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
413 &#32;&#32;&#32;&#32;_S_create_c_locale(__c_locale&amp;&#32;__cloc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;__old&#32;=&#32;0);
415 
416 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__c_locale
417 &#32;&#32;&#32;&#32;_S_clone_c_locale(__c_locale&amp;&#32;__cloc)&#32;<emphasis role="keywordflow">throw</emphasis>();
418 
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
420 &#32;&#32;&#32;&#32;_S_destroy_c_locale(__c_locale&amp;&#32;__cloc);
421 
422 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__c_locale
423 &#32;&#32;&#32;&#32;_S_lc_ctype_c_locale(__c_locale&#32;__cloc,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s);
424 
425 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;data&#32;from&#32;the&#32;underlying&#32;&quot;C&quot;&#32;library&#32;data&#32;for&#32;the</emphasis>
426 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;classic&#32;locale.</emphasis>
427 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__c_locale
428 &#32;&#32;&#32;&#32;_S_get_c_locale();
429 
430 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
431 &#32;&#32;&#32;&#32;_S_get_c_name()&#32;throw();
432 
433 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
434 &#32;&#32;<emphasis role="keyword">private</emphasis>:
435 &#32;&#32;&#32;&#32;facet(<emphasis role="keyword">const</emphasis>&#32;facet&amp;);&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defined.</emphasis>
436 
437 &#32;&#32;&#32;&#32;facet&amp;
438 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;facet&amp;);&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defined.</emphasis>
439 <emphasis role="preprocessor">#else</emphasis>
440 &#32;&#32;&#32;&#32;facet(<emphasis role="keyword">const</emphasis>&#32;facet&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
441 
442 &#32;&#32;&#32;&#32;facet&amp;
443 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;facet&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
444 <emphasis role="preprocessor">#endif</emphasis>
445 
446 &#32;&#32;<emphasis role="keyword">private</emphasis>:
447 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
448 &#32;&#32;&#32;&#32;_M_add_reference()&#32;<emphasis role="keyword">const</emphasis>&#32;throw()
449 &#32;&#32;&#32;&#32;{&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_refcount,&#32;1);&#32;}
450 
451 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
452 &#32;&#32;&#32;&#32;_M_remove_reference()&#32;<emphasis role="keyword">const</emphasis>&#32;throw()
453 &#32;&#32;&#32;&#32;{
454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_refcount);
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_refcount,&#32;-1)&#32;==&#32;1)
457 &#32;&#32;&#32;&#32;{
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_refcount);
459 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
461 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
463 &#32;&#32;&#32;&#32;}
464 &#32;&#32;&#32;&#32;}
465 
466 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;facet*&#32;_M_sso_shim(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>*)&#32;<emphasis role="keyword">const</emphasis>;
467 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;facet*&#32;_M_cow_shim(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>*)&#32;<emphasis role="keyword">const</emphasis>;
468 
469 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
470 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shim;&#32;<emphasis role="comment">//&#32;For&#32;internal&#32;use&#32;only.</emphasis>
471 &#32;&#32;};
472 
473 
474 &#32;&#32;<emphasis role="comment">//&#32;22.1.1.1.3&#32;Class&#32;locale::id</emphasis>
485 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>locale::id
486 &#32;&#32;{
487 &#32;&#32;<emphasis role="keyword">private</emphasis>:
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>locale;
489 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>locale::_Impl;
490 
491 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Facet&amp;
493 &#32;&#32;&#32;&#32;&#32;&#32;use_facet(<emphasis role="keyword">const</emphasis>&#32;locale&amp;);
494 
495 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
497 &#32;&#32;&#32;&#32;&#32;&#32;has_facet(<emphasis role="keyword">const</emphasis>&#32;locale&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
498 
499 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;There&#32;is&#32;no&#32;accessor&#32;for&#32;_M_index&#32;because&#32;it&#32;may&#32;be&#32;used</emphasis>
500 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;before&#32;the&#32;constructor&#32;is&#32;run;&#32;the&#32;effect&#32;of&#32;calling&#32;a&#32;member</emphasis>
501 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;function&#32;(even&#32;an&#32;inline)&#32;would&#32;be&#32;undefined.</emphasis>
502 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_index;
503 
504 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Last&#32;id&#32;number&#32;assigned.</emphasis>
505 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;&#32;&#32;_S_refcount;
506 
507 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
508 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&amp;);&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defined.</emphasis>
509 
510 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>&amp;);&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defined.</emphasis>
511 
512 &#32;&#32;<emphasis role="keyword">public</emphasis>:
513 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;class&#32;is&#32;always&#32;a&#32;static&#32;data&#32;member,&#32;and&#32;thus&#32;can&#32;be</emphasis>
514 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;counted&#32;on&#32;to&#32;be&#32;zero-initialized.</emphasis>
516 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>()&#32;{&#32;}
517 
518 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
519 &#32;&#32;&#32;&#32;_M_id()&#32;<emphasis role="keyword">const</emphasis>&#32;throw();
520 &#32;&#32;};
521 
522 
523 &#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;object&#32;for&#32;locale.</emphasis>
524 &#32;&#32;class&#32;locale::_Impl
525 &#32;&#32;{
526 &#32;&#32;<emphasis role="keyword">public</emphasis>:
527 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Friends.</emphasis>
528 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>locale;
529 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>locale::facet;
530 
531 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
533 &#32;&#32;&#32;&#32;&#32;&#32;has_facet(<emphasis role="keyword">const</emphasis>&#32;locale&amp;)&#32;<emphasis role="keywordflow">throw</emphasis>();
534 
535 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Facet&amp;
537 &#32;&#32;&#32;&#32;&#32;&#32;use_facet(<emphasis role="keyword">const</emphasis>&#32;locale&amp;);
538 
539 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cache&gt;
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>__use_cache;
541 
542 &#32;&#32;<emphasis role="keyword">private</emphasis>:
543 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Data&#32;Members.</emphasis>
544 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount;
545 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;facet**&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_facets;
546 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_facets_size;
547 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;facet**&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_caches;
548 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>**&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_names;
549 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;_S_id_ctype[];
550 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;_S_id_numeric[];
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;_S_id_collate[];
552 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;_S_id_time[];
553 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;_S_id_monetary[];
554 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>&#32;&#32;_S_id_messages[];
555 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;_S_facet_categories[];
556 
557 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
558 &#32;&#32;&#32;&#32;_M_add_reference()&#32;throw()
559 &#32;&#32;&#32;&#32;{&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_refcount,&#32;1);&#32;}
560 
561 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
562 &#32;&#32;&#32;&#32;_M_remove_reference()&#32;throw()
563 &#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
565 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_refcount);
566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_refcount,&#32;-1)&#32;==&#32;1)
567 &#32;&#32;&#32;&#32;{
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_refcount);
569 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
571 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
573 &#32;&#32;&#32;&#32;}
574 &#32;&#32;&#32;&#32;}
575 
576 &#32;&#32;&#32;&#32;_Impl(<emphasis role="keyword">const</emphasis>&#32;_Impl&amp;,&#32;<emphasis role="keywordtype">size_t</emphasis>);
577 &#32;&#32;&#32;&#32;_Impl(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>);
578 &#32;&#32;&#32;&#32;_Impl(<emphasis role="keywordtype">size_t</emphasis>)&#32;<emphasis role="keywordflow">throw</emphasis>();
579 
580 &#32;&#32;&#32;~_Impl()&#32;throw();
581 
582 &#32;&#32;&#32;&#32;_Impl(const&#32;_Impl&amp;);&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defined.</emphasis>
583 
584 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
585 &#32;&#32;&#32;&#32;operator=(const&#32;_Impl&amp;);&#32;&#32;<emphasis role="comment">//&#32;Not&#32;defined.</emphasis>
586 
587 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
588 &#32;&#32;&#32;&#32;_M_check_same_name()
589 &#32;&#32;&#32;&#32;{
590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ret&#32;=&#32;<emphasis role="keyword">true</emphasis>;
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_names[1])
592 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;must&#32;actually&#32;compare&#32;all&#32;the&#32;_M_names:&#32;can&#32;be&#32;all&#32;equal!</emphasis>
593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__ret&#32;&amp;&amp;&#32;__i&#32;&lt;&#32;_S_categories_size&#32;-&#32;1;&#32;++__i)
594 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;__builtin_strcmp(_M_names[__i],&#32;_M_names[__i&#32;+&#32;1])&#32;==&#32;0;
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
596 &#32;&#32;&#32;&#32;}
597 
598 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
599 &#32;&#32;&#32;&#32;_M_replace_categories(<emphasis role="keyword">const</emphasis>&#32;_Impl*,&#32;category);
600 
601 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
602 &#32;&#32;&#32;&#32;_M_replace_category(<emphasis role="keyword">const</emphasis>&#32;_Impl*,&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*&#32;<emphasis role="keyword">const</emphasis>*);
603 
604 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
605 &#32;&#32;&#32;&#32;_M_replace_facet(<emphasis role="keyword">const</emphasis>&#32;_Impl*,&#32;<emphasis role="keyword">const</emphasis>&#32;locale::id*);
606 
607 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
608 &#32;&#32;&#32;&#32;_M_install_facet(<emphasis role="keyword">const</emphasis>&#32;locale::id*,&#32;<emphasis role="keyword">const</emphasis>&#32;facet*);
609 
610 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
612 &#32;&#32;&#32;&#32;&#32;&#32;_M_init_facet(_Facet*&#32;__facet)
613 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_install_facet(&amp;_Facet::id,&#32;__facet);&#32;}
614 
615 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Facet&gt;
616 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
617 &#32;&#32;&#32;&#32;&#32;&#32;_M_init_facet_unchecked(_Facet*&#32;__facet)
618 &#32;&#32;&#32;&#32;&#32;&#32;{
619 &#32;&#32;&#32;&#32;__facet-&gt;_M_add_reference();
620 &#32;&#32;&#32;&#32;_M_facets[_Facet::id._M_id()]&#32;=&#32;__facet;
621 &#32;&#32;&#32;&#32;&#32;&#32;}
622 
623 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
624 &#32;&#32;&#32;&#32;_M_install_cache(<emphasis role="keyword">const</emphasis>&#32;facet*,&#32;<emphasis role="keywordtype">size_t</emphasis>);
625 
626 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_init_extra(facet**);
627 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_init_extra(<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*);
628 
629 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_LONG_DOUBLE_ALT128_COMPAT</emphasis>
630 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_init_extra_ldbl128(<emphasis role="keywordtype">bool</emphasis>);
631 <emphasis role="preprocessor">#endif</emphasis>
632 &#32;&#32;};
633 
634 
647 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
648 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_GLIBCXX_NAMESPACE_CXX11&#32;collate&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;locale::facet
649 &#32;&#32;&#32;&#32;{
650 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;&#32;string_type;
657 
658 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Underlying&#32;&quot;C&quot;&#32;library&#32;locale&#32;information&#32;saved&#32;from</emphasis>
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;initialization,&#32;needed&#32;by&#32;collate_byname&#32;as&#32;well.</emphasis>
661 &#32;&#32;&#32;&#32;&#32;&#32;__c_locale&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_c_locale_collate;
662 
663 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;locale::id&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
666 
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
675 &#32;&#32;&#32;&#32;&#32;&#32;collate(<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
676 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_c_locale_collate(_S_get_c_locale())
677 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
678 
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;collate(__c_locale&#32;__cloc,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
690 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;facet(__refs),&#32;_M_c_locale_collate(_S_clone_c_locale(__cloc))
691 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
692 
705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
706 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi1,
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo2,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi2)<emphasis role="keyword">&#32;const</emphasis>
708 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_compare(__lo1,&#32;__hi1,&#32;__lo2,&#32;__hi2);&#32;}
709 
724 &#32;&#32;&#32;&#32;&#32;&#32;string_type
725 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
726 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_transform(__lo,&#32;__hi);&#32;}
727 
738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
739 &#32;&#32;&#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi)<emphasis role="keyword">&#32;const</emphasis>
740 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;do_hash(__lo,&#32;__hi);&#32;}
741 
742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;to&#32;abstract&#32;out&#32;_CharT&#32;bits&#32;in&#32;virtual&#32;member&#32;functions,&#32;below.</emphasis>
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;_CharT*,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
745 
746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
747 &#32;&#32;&#32;&#32;&#32;&#32;_M_transform(_CharT*,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*,&#32;<emphasis role="keywordtype">size_t</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
748 
749 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;~collate()
753 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_destroy_c_locale(_M_c_locale_collate);&#32;}
754 
767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;do_compare(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi1,
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo2,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi2)&#32;<emphasis role="keyword">const</emphasis>;
770 
781 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;string_type
782 &#32;&#32;&#32;&#32;&#32;&#32;do_transform(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
783 
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
795 &#32;&#32;&#32;&#32;&#32;&#32;do_hash(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__hi)&#32;<emphasis role="keyword">const</emphasis>;
796 &#32;&#32;&#32;&#32;};
797 
798 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
799 &#32;&#32;&#32;&#32;locale::id&#32;collate&lt;_CharT&gt;::id;
800 
801 &#32;&#32;<emphasis role="comment">//&#32;Specializations.</emphasis>
802 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
803 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
804 &#32;&#32;&#32;&#32;collate&lt;char&gt;::_M_compare(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
805 
806 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
807 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
808 &#32;&#32;&#32;&#32;collate&lt;char&gt;::_M_transform(<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
809 
810 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
811 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
812 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
813 &#32;&#32;&#32;&#32;collate&lt;wchar_t&gt;::_M_compare(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
814 
815 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
816 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
817 &#32;&#32;&#32;&#32;collate&lt;wchar_t&gt;::_M_transform(<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;<emphasis role="keywordtype">size_t</emphasis>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>();
818 <emphasis role="preprocessor">#endif</emphasis>
819 
821 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
822 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_GLIBCXX_NAMESPACE_CXX11&#32;collate_byname&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;collate&lt;_CharT&gt;
823 &#32;&#32;&#32;&#32;{
824 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&#32;string_type;
830 
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
832 &#32;&#32;&#32;&#32;&#32;&#32;collate_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
833 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;collate&lt;_CharT&gt;(__refs)
834 &#32;&#32;&#32;&#32;&#32;&#32;{
835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_strcmp(__s,&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>)&#32;!=&#32;0
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__builtin_strcmp(__s,&#32;<emphasis role="stringliteral">&quot;POSIX&quot;</emphasis>)&#32;!=&#32;0)
837 &#32;&#32;&#32;&#32;&#32;&#32;{
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_destroy_c_locale(this-&gt;_M_c_locale_collate);
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_create_c_locale(this-&gt;_M_c_locale_collate,&#32;__s);
840 &#32;&#32;&#32;&#32;&#32;&#32;}
841 &#32;&#32;&#32;&#32;&#32;&#32;}
842 
843 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
845 &#32;&#32;&#32;&#32;&#32;&#32;collate_byname(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__refs&#32;=&#32;0)
846 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;collate_byname(__s.c_str(),&#32;__refs)&#32;{&#32;}
847 <emphasis role="preprocessor">#endif</emphasis>
848 
849 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
851 &#32;&#32;&#32;&#32;&#32;&#32;~collate_byname()&#32;{&#32;}
852 &#32;&#32;&#32;&#32;};
853 
854 _GLIBCXX_END_NAMESPACE_VERSION
855 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
856 
857 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/locale_classes.tcc&gt;</emphasis>
858 
859 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
