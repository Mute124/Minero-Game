<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__heap_8h_source" xml:lang="en-US">
<title>stl_heap.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_heap.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Heap&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1997</emphasis>
39 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
40 <emphasis role="comment">&#32;*</emphasis>
41 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
42 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
43 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
44 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
45 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
46 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
47 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
48 <emphasis role="comment">&#32;*/</emphasis>
49 
55 <emphasis role="preprocessor">#ifndef&#32;_STL_HEAP_H</emphasis>
56 <emphasis role="preprocessor">#define&#32;_STL_HEAP_H&#32;1</emphasis>
57 
58 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
59 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/predefined_ops.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_funcs.h&gt;</emphasis>
62 
63 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
64 {
65 _GLIBCXX_BEGIN_NAMESPACE_VERSION
66 
72 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
74 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
75 &#32;&#32;&#32;&#32;_Distance
76 &#32;&#32;&#32;&#32;__is_heap_until(_RandomAccessIterator&#32;__first,&#32;_Distance&#32;__n,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp)
78 &#32;&#32;&#32;&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__parent&#32;=&#32;0;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Distance&#32;__child&#32;=&#32;1;&#32;__child&#32;&lt;&#32;__n;&#32;++__child)
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first&#32;+&#32;__parent,&#32;__first&#32;+&#32;__child))
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__child;
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__child&#32;&amp;&#32;1)&#32;==&#32;0)
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__parent;
86 &#32;&#32;&#32;&#32;}
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
88 &#32;&#32;&#32;&#32;}
89 
90 &#32;&#32;<emphasis role="comment">//&#32;__is_heap,&#32;a&#32;predicate&#32;testing&#32;whether&#32;or&#32;not&#32;a&#32;range&#32;is&#32;a&#32;heap.</emphasis>
91 &#32;&#32;<emphasis role="comment">//&#32;This&#32;function&#32;is&#32;an&#32;extension,&#32;not&#32;part&#32;of&#32;the&#32;C++&#32;standard.</emphasis>
92 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
93 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
95 &#32;&#32;&#32;&#32;__is_heap(_RandomAccessIterator&#32;__first,&#32;_Distance&#32;__n)
96 &#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____ops_1_1___iter__less__iter">__gnu_cxx::__ops::_Iter_less_iter</link>&#32;__comp;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__is_heap_until(__first,&#32;__n,&#32;__comp)&#32;==&#32;__n;
99 &#32;&#32;&#32;&#32;}
100 
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
103 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
105 &#32;&#32;&#32;&#32;__is_heap(_RandomAccessIterator&#32;__first,&#32;_Compare&#32;__comp,&#32;_Distance&#32;__n)
106 &#32;&#32;&#32;&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__decltype(__comp)&#32;_Cmp;
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____ops_1_1___iter__comp__iter">__gnu_cxx::__ops::_Iter_comp_iter&lt;_Cmp&gt;</link>&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__is_heap_until(__first,&#32;__n,&#32;__cmp)&#32;==&#32;__n;
110 &#32;&#32;&#32;&#32;}
111 
112 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
113 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
115 &#32;&#32;&#32;&#32;__is_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
116 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__is_heap(__first,&#32;std::distance(__first,&#32;__last));&#32;}
117 
118 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
119 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
121 &#32;&#32;&#32;&#32;__is_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
123 &#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__is_heap(__first,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp),
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::distance(__first,&#32;__last));
126 &#32;&#32;&#32;&#32;}
127 
128 &#32;&#32;<emphasis role="comment">//&#32;Heap-manipulation&#32;functions:&#32;push_heap,&#32;pop_heap,&#32;make_heap,&#32;sort_heap,</emphasis>
129 &#32;&#32;<emphasis role="comment">//&#32;+&#32;is_heap&#32;and&#32;is_heap_until&#32;in&#32;C++0x.</emphasis>
130 
131 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
133 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
135 &#32;&#32;&#32;&#32;__push_heap(_RandomAccessIterator&#32;__first,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__holeIndex,&#32;_Distance&#32;__topIndex,&#32;_Tp&#32;__value,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp)
138 &#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__parent&#32;=&#32;(__holeIndex&#32;-&#32;1)&#32;/&#32;2;
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__holeIndex&#32;&gt;&#32;__topIndex&#32;&amp;&amp;&#32;__comp(__first&#32;+&#32;__parent,&#32;__value))
141 &#32;&#32;&#32;&#32;{
142 &#32;&#32;&#32;&#32;&#32;&#32;*(__first&#32;+&#32;__holeIndex)&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*(__first&#32;+&#32;__parent));
143 &#32;&#32;&#32;&#32;&#32;&#32;__holeIndex&#32;=&#32;__parent;
144 &#32;&#32;&#32;&#32;&#32;&#32;__parent&#32;=&#32;(__holeIndex&#32;-&#32;1)&#32;/&#32;2;
145 &#32;&#32;&#32;&#32;}
146 &#32;&#32;&#32;&#32;&#32;&#32;*(__first&#32;+&#32;__holeIndex)&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__value);
147 &#32;&#32;&#32;&#32;}
148 
159 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
160 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
162 &#32;&#32;&#32;&#32;push_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
163 &#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
165 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType;
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
167 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType;
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
172 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;_ValueType&gt;)
173 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
175 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a3f0b3b0ed4f02224f3b21ffa13caabe4">__glibcxx_requires_heap</link>(__first,&#32;__last&#32;-&#32;1);
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_less_val&#32;__comp;
178 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType&#32;__value&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*(__last&#32;-&#32;1));
179 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__push_heap(__first,&#32;_DistanceType((__last&#32;-&#32;__first)&#32;-&#32;1),
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(0),&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__value),&#32;__comp);
181 &#32;&#32;&#32;&#32;}
182 
195 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
196 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
197 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
198 &#32;&#32;&#32;&#32;push_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
200 &#32;&#32;&#32;&#32;{
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
202 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType;
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
204 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType;
205 
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
209 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
210 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a59a459561c79df22194a9aabb51c2d78">__glibcxx_requires_heap_pred</link>(__first,&#32;__last&#32;-&#32;1,&#32;__comp);
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;__decltype(<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::__iter_comp_val(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp)))
214 &#32;&#32;&#32;&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
215 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType&#32;__value&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*(__last&#32;-&#32;1));
216 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__push_heap(__first,&#32;_DistanceType((__last&#32;-&#32;__first)&#32;-&#32;1),
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(0),&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__value),&#32;__cmp);
218 &#32;&#32;&#32;&#32;}
219 
220 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Distance,
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Tp,&#32;typename&#32;_Compare&gt;
222 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
223 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
224 &#32;&#32;&#32;&#32;__adjust_heap(_RandomAccessIterator&#32;__first,&#32;_Distance&#32;__holeIndex,
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__len,&#32;_Tp&#32;__value,&#32;_Compare&#32;__comp)
226 &#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Distance&#32;__topIndex&#32;=&#32;__holeIndex;
228 &#32;&#32;&#32;&#32;&#32;&#32;_Distance&#32;__secondChild&#32;=&#32;__holeIndex;
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__secondChild&#32;&lt;&#32;(__len&#32;-&#32;1)&#32;/&#32;2)
230 &#32;&#32;&#32;&#32;{
231 &#32;&#32;&#32;&#32;&#32;&#32;__secondChild&#32;=&#32;2&#32;*&#32;(__secondChild&#32;+&#32;1);
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first&#32;+&#32;__secondChild,
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;(__secondChild&#32;-&#32;1)))
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__secondChild--;
235 &#32;&#32;&#32;&#32;&#32;&#32;*(__first&#32;+&#32;__holeIndex)&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*(__first&#32;+&#32;__secondChild));
236 &#32;&#32;&#32;&#32;&#32;&#32;__holeIndex&#32;=&#32;__secondChild;
237 &#32;&#32;&#32;&#32;}
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__len&#32;&amp;&#32;1)&#32;==&#32;0&#32;&amp;&amp;&#32;__secondChild&#32;==&#32;(__len&#32;-&#32;2)&#32;/&#32;2)
239 &#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;&#32;&#32;__secondChild&#32;=&#32;2&#32;*&#32;(__secondChild&#32;+&#32;1);
241 &#32;&#32;&#32;&#32;&#32;&#32;*(__first&#32;+&#32;__holeIndex)&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*(__first
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__secondChild&#32;-&#32;1)));
243 &#32;&#32;&#32;&#32;&#32;&#32;__holeIndex&#32;=&#32;__secondChild&#32;-&#32;1;
244 &#32;&#32;&#32;&#32;}
245 &#32;&#32;&#32;&#32;&#32;&#32;__decltype(<link linkend="_namespace____gnu__cxx_1_1____ops_1a3ec2f08e1be85c9bc5d8c50ff0e815e2">__gnu_cxx::__ops::__iter_comp_val</link>(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp)))
246 &#32;&#32;&#32;&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
247 &#32;&#32;&#32;&#32;&#32;&#32;std::__push_heap(__first,&#32;__holeIndex,&#32;__topIndex,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__value),&#32;__cmp);
249 &#32;&#32;&#32;&#32;}
250 
251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
252 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
254 &#32;&#32;&#32;&#32;__pop_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__result,&#32;_Compare&amp;&#32;__comp)
256 &#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
258 &#32;&#32;&#32;&#32;_ValueType;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
260 &#32;&#32;&#32;&#32;_DistanceType;
261 
262 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType&#32;__value&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__result);
263 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first);
264 &#32;&#32;&#32;&#32;&#32;&#32;std::__adjust_heap(__first,&#32;_DistanceType(0),
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DistanceType(__last&#32;-&#32;__first),
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__value),&#32;__comp);
267 &#32;&#32;&#32;&#32;}
268 
280 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
281 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
282 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
283 &#32;&#32;&#32;&#32;pop_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
284 &#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
286 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
288 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
289 &#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
290 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1afc160a4474786727ca2476c94856ddb3">__glibcxx_requires_non_empty_range</link>(__first,&#32;__last);
291 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
292 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
293 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a3f0b3b0ed4f02224f3b21ffa13caabe4">__glibcxx_requires_heap</link>(__first,&#32;__last);
294 
295 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__last&#32;-&#32;__first&#32;&gt;&#32;1)
296 &#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
298 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____ops_1_1___iter__less__iter">__gnu_cxx::__ops::_Iter_less_iter</link>&#32;__comp;
299 &#32;&#32;&#32;&#32;&#32;&#32;std::__pop_heap(__first,&#32;__last,&#32;__last,&#32;__comp);
300 &#32;&#32;&#32;&#32;}
301 &#32;&#32;&#32;&#32;}
302 
314 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
315 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
316 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
317 &#32;&#32;&#32;&#32;pop_heap(_RandomAccessIterator&#32;__first,
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp)
319 &#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
323 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
324 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
325 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1afc160a4474786727ca2476c94856ddb3">__glibcxx_requires_non_empty_range</link>(__first,&#32;__last);
326 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a59a459561c79df22194a9aabb51c2d78">__glibcxx_requires_heap_pred</link>(__first,&#32;__last,&#32;__comp);
327 
328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__last&#32;-&#32;__first&#32;&gt;&#32;1)
329 &#32;&#32;&#32;&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__decltype(__comp)&#32;_Cmp;
331 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____ops_1_1___iter__comp__iter">__gnu_cxx::__ops::_Iter_comp_iter&lt;_Cmp&gt;</link>&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
332 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
333 &#32;&#32;&#32;&#32;&#32;&#32;std::__pop_heap(__first,&#32;__last,&#32;__last,&#32;__cmp);
334 &#32;&#32;&#32;&#32;}
335 &#32;&#32;&#32;&#32;}
336 
337 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
338 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
339 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
340 &#32;&#32;&#32;&#32;__make_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp)
342 &#32;&#32;&#32;&#32;{
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type
344 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType;
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
346 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType;
347 
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;&lt;&#32;2)
349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DistanceType&#32;__len&#32;=&#32;__last&#32;-&#32;__first;
352 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__parent&#32;=&#32;(__len&#32;-&#32;2)&#32;/&#32;2;
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
354 &#32;&#32;&#32;&#32;{
355 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType&#32;__value&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*(__first&#32;+&#32;__parent));
356 &#32;&#32;&#32;&#32;&#32;&#32;std::__adjust_heap(__first,&#32;__parent,&#32;__len,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__value),
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__parent&#32;==&#32;0)
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
360 &#32;&#32;&#32;&#32;&#32;&#32;__parent--;
361 &#32;&#32;&#32;&#32;}
362 &#32;&#32;&#32;&#32;}
363 &#32;&#32;
372 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
373 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
375 &#32;&#32;&#32;&#32;make_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
376 &#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
380 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
382 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
383 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
384 
385 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_less_iter&#32;__comp;
386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__make_heap(__first,&#32;__last,&#32;__comp);
387 &#32;&#32;&#32;&#32;}
388 
399 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
400 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
401 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
402 &#32;&#32;&#32;&#32;make_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
404 &#32;&#32;&#32;&#32;{
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
406 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
408 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
409 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
410 
411 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;__decltype(__comp)&#32;_Cmp;
412 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_comp_iter&lt;_Cmp&gt;&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
413 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__make_heap(__first,&#32;__last,&#32;__cmp);
414 &#32;&#32;&#32;&#32;}
415 
416 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
417 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
418 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
419 &#32;&#32;&#32;&#32;__sort_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp)
421 &#32;&#32;&#32;&#32;{
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__last&#32;-&#32;__first&#32;&gt;&#32;1)
423 &#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;--__last;
425 &#32;&#32;&#32;&#32;&#32;&#32;std::__pop_heap(__first,&#32;__last,&#32;__last,&#32;__comp);
426 &#32;&#32;&#32;&#32;}
427 &#32;&#32;&#32;&#32;}
428 
437 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
438 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
439 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
440 &#32;&#32;&#32;&#32;sort_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
441 &#32;&#32;&#32;&#32;{
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
443 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
445 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
447 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
448 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
449 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a3f0b3b0ed4f02224f3b21ffa13caabe4">__glibcxx_requires_heap</link>(__first,&#32;__last);
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_less_iter&#32;__comp;
452 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__sort_heap(__first,&#32;__last,&#32;__comp);
453 &#32;&#32;&#32;&#32;}
454 
465 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
466 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
467 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
468 &#32;&#32;&#32;&#32;sort_heap(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
470 &#32;&#32;&#32;&#32;{
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
472 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_RandomAccessIteratorConcept&lt;
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
474 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
475 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
476 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a59a459561c79df22194a9aabb51c2d78">__glibcxx_requires_heap_pred</link>(__first,&#32;__last,&#32;__comp);
477 
478 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;__decltype(__comp)&#32;_Cmp;
479 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_comp_iter&lt;_Cmp&gt;&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
480 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__sort_heap(__first,&#32;__last,&#32;__cmp);
481 &#32;&#32;&#32;&#32;}
482 
483 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
494 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator&gt;
495 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_RandomAccessIterator
497 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">is_heap_until</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
498 &#32;&#32;&#32;&#32;{
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
500 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_RandomAccessIteratorConcept&lt;
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
502 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;iterator_traits&lt;_RandomAccessIterator&gt;::value_type&gt;)
504 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
505 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1ac7e7047575e5ab26f4e9bddd669b6e55">__glibcxx_requires_irreflexive</link>(__first,&#32;__last);
506 
507 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_less_iter&#32;__comp;
508 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__first&#32;+&#32;
509 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::__is_heap_until(__first,&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacedistance">distance</link>(__first,&#32;__last),&#32;__comp);
510 &#32;&#32;&#32;&#32;}
511 
523 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator,&#32;typename&#32;_Compare&gt;
524 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
525 &#32;&#32;&#32;&#32;inline&#32;_RandomAccessIterator
526 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">is_heap_until</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
528 &#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
530 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_RandomAccessIteratorConcept&lt;
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
532 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
533 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
534 
535 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;__decltype(__comp)&#32;_Cmp;
536 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_comp_iter&lt;_Cmp&gt;&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
537 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__first
538 &#32;&#32;&#32;&#32;+&#32;<link linkend="_namespacestd">std</link>::__is_heap_until(__first,&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacedistance">distance</link>(__first,&#32;__last),&#32;__cmp);
539 &#32;&#32;&#32;&#32;}
540 
548 &#32;&#32;template&lt;typename&#32;_RandomAccessIterator&gt;
549 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
550 &#32;&#32;&#32;&#32;inline&#32;<emphasis role="keywordtype">bool</emphasis>
551 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d">is_heap</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last)
552 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">std::is_heap_until</link>(__first,&#32;__last)&#32;==&#32;__last;&#32;}
553 
562 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
563 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
564 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
565 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d">is_heap</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
567 &#32;&#32;&#32;&#32;{
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_RandomAccessIteratorConcept&lt;
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&gt;)
571 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
572 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1abe9391caaffc0f4981d56df580ef07d9">__glibcxx_requires_irreflexive_pred</link>(__first,&#32;__last,&#32;__comp);
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;const&#32;auto&#32;__dist&#32;=&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacedistance">distance</link>(__first,&#32;__last);
575 &#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;__decltype(__comp)&#32;_Cmp;
576 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__ops::_Iter_comp_iter&lt;_Cmp&gt;&#32;__cmp(<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__comp));
577 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::__is_heap_until(__first,&#32;__dist,&#32;__cmp)&#32;==&#32;__dist;
578 &#32;&#32;&#32;&#32;}
579 <emphasis role="preprocessor">#endif</emphasis>
580 
581 _GLIBCXX_END_NAMESPACE_VERSION
582 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
583 
584 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_HEAP_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
