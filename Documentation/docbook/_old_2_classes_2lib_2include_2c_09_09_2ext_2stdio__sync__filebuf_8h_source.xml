<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2stdio__sync__filebuf_8h_source" xml:lang="en-US">
<title>stdio_sync_filebuf.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/stdio_sync_filebuf.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Iostreams&#32;wrapper&#32;for&#32;stdio&#32;FILE*&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2003-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_STDIO_SYNC_FILEBUF_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_STDIO_SYNC_FILEBUF_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
33 
34 <emphasis role="preprocessor">#include&#32;&lt;streambuf&gt;</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/c++io.h&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;For&#32;__c_file</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;__exchange</emphasis>
38 
39 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;cwchar&gt;</emphasis>
41 <emphasis role="preprocessor">#endif</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
55 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;std::<emphasis role="keywordtype">char</emphasis>_traits&lt;_CharT&gt;&#32;&gt;
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>stdio_sync_filebuf&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::basic_streambuf&lt;_CharT,&#32;_Traits&gt;
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::int_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::pos_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_type;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::off_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_type;
65 
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_streambuf&lt;_CharT,&#32;_Traits&gt;&#32;__streambuf_type;
68 
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Underlying&#32;stdio&#32;FILE</emphasis>
70 &#32;&#32;&#32;&#32;&#32;&#32;std::__c_file*&#32;_M_file;
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Last&#32;character&#32;gotten.&#32;This&#32;is&#32;used&#32;when&#32;pbackfail&#32;is</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called&#32;from&#32;basic_streambuf::sungetc()</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;int_type&#32;_M_unget_buf;
75 
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
78 &#32;&#32;&#32;&#32;&#32;&#32;stdio_sync_filebuf(std::__c_file*&#32;__f)
79 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_file(__f),&#32;_M_unget_buf(traits_type::eof())
80 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
81 
82 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
83 &#32;&#32;&#32;&#32;&#32;&#32;stdio_sync_filebuf(stdio_sync_filebuf&amp;&amp;&#32;__fb)&#32;noexcept
84 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__streambuf_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__fb)),
85 &#32;&#32;&#32;&#32;&#32;&#32;_M_file(__fb._M_file),&#32;_M_unget_buf(__fb._M_unget_buf)
86 &#32;&#32;&#32;&#32;&#32;&#32;{
87 &#32;&#32;&#32;&#32;__fb._M_file&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
88 &#32;&#32;&#32;&#32;__fb._M_unget_buf&#32;=&#32;traits_type::eof();
89 &#32;&#32;&#32;&#32;&#32;&#32;}
90 
91 &#32;&#32;&#32;&#32;&#32;&#32;stdio_sync_filebuf&amp;
92 &#32;&#32;&#32;&#32;&#32;&#32;operator=(stdio_sync_filebuf&amp;&amp;&#32;__fb)&#32;<emphasis role="keyword">noexcept</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;__streambuf_type::operator=(__fb);
95 &#32;&#32;&#32;&#32;_M_file&#32;=&#32;std::__exchange(__fb._M_file,&#32;<emphasis role="keyword">nullptr</emphasis>);
96 &#32;&#32;&#32;&#32;_M_unget_buf&#32;=&#32;std::__exchange(__fb._M_unget_buf,&#32;traits_type::eof());
97 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
98 &#32;&#32;&#32;&#32;&#32;&#32;}
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;swap(stdio_sync_filebuf&amp;&#32;__fb)
102 &#32;&#32;&#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;__streambuf_type::swap(__fb);
104 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_file,&#32;__fb._M_file);
105 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_unget_buf,&#32;__fb._M_unget_buf);
106 &#32;&#32;&#32;&#32;&#32;&#32;}
107 <emphasis role="preprocessor">#endif</emphasis>
108 
116 &#32;&#32;&#32;&#32;&#32;&#32;std::__c_file*
117 &#32;&#32;&#32;&#32;&#32;&#32;file()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_file;&#32;}
118 
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
120 &#32;&#32;&#32;&#32;&#32;&#32;int_type
121 &#32;&#32;&#32;&#32;&#32;&#32;syncgetc();
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;int_type
124 &#32;&#32;&#32;&#32;&#32;&#32;syncungetc(int_type&#32;__c);
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;int_type
127 &#32;&#32;&#32;&#32;&#32;&#32;syncputc(int_type&#32;__c);
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;int_type
130 &#32;&#32;&#32;&#32;&#32;&#32;underflow()
131 &#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;int_type&#32;__c&#32;=&#32;this-&gt;syncgetc();
133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;syncungetc(__c);
134 &#32;&#32;&#32;&#32;&#32;&#32;}
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;int_type
137 &#32;&#32;&#32;&#32;&#32;&#32;uflow()
138 &#32;&#32;&#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Store&#32;the&#32;gotten&#32;character&#32;in&#32;case&#32;we&#32;need&#32;to&#32;unget&#32;it.</emphasis>
140 &#32;&#32;&#32;&#32;_M_unget_buf&#32;=&#32;this-&gt;syncgetc();
141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_unget_buf;
142 &#32;&#32;&#32;&#32;&#32;&#32;}
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;int_type
145 &#32;&#32;&#32;&#32;&#32;&#32;pbackfail(int_type&#32;__c&#32;=&#32;traits_type::eof())
146 &#32;&#32;&#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;int_type&#32;__ret;
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&#32;__eof&#32;=&#32;traits_type::eof();
149 
150 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;the&#32;unget&#32;or&#32;putback&#32;was&#32;requested</emphasis>
151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(traits_type::eq_int_type(__c,&#32;__eof))&#32;<emphasis role="comment">//&#32;unget</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!traits_type::eq_int_type(_M_unget_buf,&#32;__eof))
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;this-&gt;syncungetc(_M_unget_buf);
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;buffer&#32;invalid,&#32;fail.</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;__eof;
157 &#32;&#32;&#32;&#32;&#32;&#32;}
158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;putback</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;this-&gt;syncungetc(__c);
160 
161 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;buffered&#32;character&#32;is&#32;no&#32;longer&#32;valid,&#32;discard&#32;it.</emphasis>
162 &#32;&#32;&#32;&#32;_M_unget_buf&#32;=&#32;__eof;
163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
164 &#32;&#32;&#32;&#32;&#32;&#32;}
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::streamsize
167 &#32;&#32;&#32;&#32;&#32;&#32;xsgetn(char_type*&#32;__s,&#32;std::streamsize&#32;__n);
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;int_type
170 &#32;&#32;&#32;&#32;&#32;&#32;overflow(int_type&#32;__c&#32;=&#32;traits_type::eof())
171 &#32;&#32;&#32;&#32;&#32;&#32;{
172 &#32;&#32;&#32;&#32;int_type&#32;__ret;
173 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(traits_type::eq_int_type(__c,&#32;traits_type::eof()))
174 &#32;&#32;&#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::fflush(_M_file))
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;traits_type::eof();
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;traits_type::not_eof(__c);
179 &#32;&#32;&#32;&#32;&#32;&#32;}
180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;this-&gt;syncputc(__c);
182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
183 &#32;&#32;&#32;&#32;&#32;&#32;}
184 
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::streamsize
186 &#32;&#32;&#32;&#32;&#32;&#32;xsputn(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__s,&#32;std::streamsize&#32;__n);
187 
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1addb29f0a98e73f8d23d83bb9de5bc53d">sync</link>()
190 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::fflush(_M_file);&#32;}
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::streampos
193 &#32;&#32;&#32;&#32;&#32;&#32;seekoff(std::streamoff&#32;__off,&#32;std::ios_base::seekdir&#32;__dir,
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::openmode&#32;=&#32;std::ios_base::in&#32;|&#32;std::ios_base::out)
195 &#32;&#32;&#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;std::streampos&#32;__ret(std::streamoff(-1));
197 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__whence;
198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dir&#32;==&#32;std::ios_base::beg)
199 &#32;&#32;&#32;&#32;&#32;&#32;__whence&#32;=&#32;SEEK_SET;
200 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dir&#32;==&#32;std::ios_base::cur)
201 &#32;&#32;&#32;&#32;&#32;&#32;__whence&#32;=&#32;SEEK_CUR;
202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;__whence&#32;=&#32;SEEK_END;
204 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_LFS</emphasis>
205 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!fseeko64(_M_file,&#32;__off,&#32;__whence))
206 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;std::streampos(ftello64(_M_file));
207 <emphasis role="preprocessor">#else</emphasis>
208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!fseek(_M_file,&#32;__off,&#32;__whence))
209 &#32;&#32;&#32;&#32;&#32;&#32;__ret&#32;=&#32;std::streampos(std::ftell(_M_file));
210 <emphasis role="preprocessor">#endif</emphasis>
211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
212 &#32;&#32;&#32;&#32;&#32;&#32;}
213 
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;std::streampos
215 &#32;&#32;&#32;&#32;&#32;&#32;seekpos(std::streampos&#32;__pos,
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::openmode&#32;__mode&#32;=
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ios_base::in&#32;|&#32;std::ios_base::out)
218 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;seekoff(std::streamoff(__pos),&#32;std::ios_base::beg,&#32;__mode);&#32;}
219 &#32;&#32;&#32;&#32;};
220 
221 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;stdio_sync_filebuf&lt;char&gt;::int_type
223 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;char&gt;::syncgetc()
224 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::getc(_M_file);&#32;}
225 
226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;stdio_sync_filebuf&lt;char&gt;::int_type
228 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;char&gt;::syncungetc(int_type&#32;__c)
229 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ungetc(__c,&#32;_M_file);&#32;}
230 
231 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;stdio_sync_filebuf&lt;char&gt;::int_type
233 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;char&gt;::syncputc(int_type&#32;__c)
234 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::putc(__c,&#32;_M_file);&#32;}
235 
236 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::streamsize
238 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;char&gt;::xsgetn(<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;std::streamsize&#32;__n)
239 &#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;&#32;&#32;std::streamsize&#32;__ret&#32;=&#32;std::fread(__s,&#32;1,&#32;__n,&#32;_M_file);
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ret&#32;&gt;&#32;0)
242 &#32;&#32;&#32;&#32;_M_unget_buf&#32;=&#32;traits_type::to_int_type(__s[__ret&#32;-&#32;1]);
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
244 &#32;&#32;&#32;&#32;_M_unget_buf&#32;=&#32;traits_type::eof();
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
246 &#32;&#32;&#32;&#32;}
247 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::streamsize
250 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;char&gt;::xsputn(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s,&#32;std::streamsize&#32;__n)
251 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::fwrite(__s,&#32;1,&#32;__n,&#32;_M_file);&#32;}
252 
253 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
254 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
255 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;stdio_sync_filebuf&lt;wchar_t&gt;::int_type
256 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;wchar_t&gt;::syncgetc()
257 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::getwc(_M_file);&#32;}
258 
259 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;stdio_sync_filebuf&lt;wchar_t&gt;::int_type
261 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;wchar_t&gt;::syncungetc(int_type&#32;__c)
262 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::ungetwc(__c,&#32;_M_file);&#32;}
263 
264 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;stdio_sync_filebuf&lt;wchar_t&gt;::int_type
266 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;wchar_t&gt;::syncputc(int_type&#32;__c)
267 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::putwc(__c,&#32;_M_file);&#32;}
268 
269 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::streamsize
271 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;wchar_t&gt;::xsgetn(<emphasis role="keywordtype">wchar_t</emphasis>*&#32;__s,&#32;std::streamsize&#32;__n)
272 &#32;&#32;&#32;&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;std::streamsize&#32;__ret&#32;=&#32;0;
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&#32;__eof&#32;=&#32;traits_type::eof();
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
276 &#32;&#32;&#32;&#32;{
277 &#32;&#32;&#32;&#32;&#32;&#32;int_type&#32;__c&#32;=&#32;this-&gt;syncgetc();
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(traits_type::eq_int_type(__c,&#32;__eof))
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
280 &#32;&#32;&#32;&#32;&#32;&#32;__s[__ret]&#32;=&#32;traits_type::to_char_type(__c);
281 &#32;&#32;&#32;&#32;&#32;&#32;++__ret;
282 &#32;&#32;&#32;&#32;}
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ret&#32;&gt;&#32;0)
285 &#32;&#32;&#32;&#32;_M_unget_buf&#32;=&#32;traits_type::to_int_type(__s[__ret&#32;-&#32;1]);
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
287 &#32;&#32;&#32;&#32;_M_unget_buf&#32;=&#32;traits_type::eof();
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
289 &#32;&#32;&#32;&#32;}
290 
291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::streamsize
293 &#32;&#32;&#32;&#32;stdio_sync_filebuf&lt;wchar_t&gt;::xsputn(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;__s,
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::streamsize&#32;__n)
295 &#32;&#32;&#32;&#32;{
296 &#32;&#32;&#32;&#32;&#32;&#32;std::streamsize&#32;__ret&#32;=&#32;0;
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&#32;__eof&#32;=&#32;traits_type::eof();
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
299 &#32;&#32;&#32;&#32;{
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(traits_type::eq_int_type(this-&gt;syncputc(*__s++),&#32;__eof))
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
302 &#32;&#32;&#32;&#32;&#32;&#32;++__ret;
303 &#32;&#32;&#32;&#32;}
304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
305 &#32;&#32;&#32;&#32;}
306 <emphasis role="preprocessor">#endif</emphasis>
307 
308 <emphasis role="preprocessor">#if&#32;_GLIBCXX_EXTERN_TEMPLATE</emphasis>
309 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>stdio_sync_filebuf&lt;char&gt;;
310 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
311 &#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>stdio_sync_filebuf&lt;wchar_t&gt;;
312 <emphasis role="preprocessor">#endif</emphasis>
313 <emphasis role="preprocessor">#endif</emphasis>
314 
315 _GLIBCXX_END_NAMESPACE_VERSION
316 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
317 
318 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
