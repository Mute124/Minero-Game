<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2ranges__algo_8h_source" xml:lang="en-US">
<title>ranges_algo.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ranges_algo.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Core&#32;algorithmic&#32;facilities&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_RANGES_ALGO_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_RANGES_ALGO_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/ranges_algobase.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/ranges_util.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/uniform_int_dist.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;concept&#32;uniform_random_bit_generator</emphasis>
38 
39 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
40 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
41 {
42 _GLIBCXX_BEGIN_NAMESPACE_VERSION
43 <emphasis role="keyword">namespace&#32;</emphasis>ranges
44 {
45 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
46 &#32;&#32;{
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Comp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&gt;
48 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
49 &#32;&#32;&#32;&#32;&#32;&#32;__make_comp_proj(_Comp&amp;&#32;__comp,&#32;_Proj&amp;&#32;__proj)
50 &#32;&#32;&#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[&amp;]&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__lhs,&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__rhs)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TL&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__lhs);
53 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TR&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__rhs);
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke(__comp,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;std::forward&lt;_TL&gt;(__lhs)),
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;std::forward&lt;_TR&gt;(__rhs)));
57 &#32;&#32;&#32;&#32;};
58 &#32;&#32;&#32;&#32;&#32;&#32;}
59 
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&gt;
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
62 &#32;&#32;&#32;&#32;&#32;&#32;__make_pred_proj(_Pred&amp;&#32;__pred,&#32;_Proj&amp;&#32;__proj)
63 &#32;&#32;&#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[&amp;]&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;(_Tp&amp;&amp;&#32;__arg)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke(__pred,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;std::forward&lt;_Tp&gt;(__arg)));
67 &#32;&#32;&#32;&#32;};
68 &#32;&#32;&#32;&#32;&#32;&#32;}
69 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
70 
71 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__all_of_fn
72 &#32;&#32;{
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
77 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;{
80 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
83 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
84 &#32;&#32;&#32;&#32;&#32;&#32;}
85 
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
94 &#32;&#32;&#32;&#32;&#32;&#32;}
95 &#32;&#32;};
96 
97 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__all_of_fn&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>{};
98 
99 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__any_of_fn
100 &#32;&#32;{
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
112 &#32;&#32;&#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
122 &#32;&#32;&#32;&#32;&#32;&#32;}
123 &#32;&#32;};
124 
125 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__any_of_fn&#32;<link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link>{};
126 
127 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__none_of_fn
128 &#32;&#32;{
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
140 &#32;&#32;&#32;&#32;&#32;&#32;}
141 
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
147 &#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
150 &#32;&#32;&#32;&#32;&#32;&#32;}
151 &#32;&#32;};
152 
153 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__none_of_fn&#32;<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>{};
154 
155 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>in_fun_result
157 &#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
159 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Fp&#32;fun;
160 
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F2p&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_Iter&amp;,&#32;_Iter2&gt;
163 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Fp&amp;,&#32;_F2p&gt;
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_fun_result&lt;_Iter2,&#32;_F2p&gt;()&#32;const&#32;&amp;
166 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;fun};&#32;}
167 
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F2p&gt;
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;_Iter,&#32;_Iter2&gt;&#32;&amp;&amp;&#32;convertible_to&lt;_Fp,&#32;_F2p&gt;
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_fun_result&lt;_Iter2,&#32;_F2p&gt;()&#32;&amp;&amp;
172 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(fun)};&#32;}
173 &#32;&#32;&#32;&#32;};
174 
175 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>for_each_result&#32;=&#32;in_fun_result&lt;_Iter,&#32;_Fp&gt;;
177 
178 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__for_each_fn
179 &#32;&#32;{
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirectly_unary_invocable&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Fun&gt;
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;for_each_result&lt;_Iter,&#32;_Fun&gt;
184 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Fun&#32;__f,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;{
186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
187 &#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__f,&#32;std::__invoke(__proj,&#32;*__first));
188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__f)&#32;};
189 &#32;&#32;&#32;&#32;&#32;&#32;}
190 
191 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirectly_unary_invocable&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fun&gt;
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;for_each_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Fun&gt;
195 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Fun&#32;__f,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
196 &#32;&#32;&#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__f),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
199 &#32;&#32;&#32;&#32;&#32;&#32;}
200 &#32;&#32;};
201 
202 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__for_each_fn&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>{};
203 
204 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>for_each_n_result&#32;=&#32;in_fun_result&lt;_Iter,&#32;_Fp&gt;;
206 
207 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__for_each_n_fn
208 &#32;&#32;{
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirectly_unary_invocable&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Fun&gt;
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;for_each_n_result&lt;_Iter,&#32;_Fun&gt;
212 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;iter_difference_t&lt;_Iter&gt;&#32;__n,
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fun&#32;__f,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(random_access_iterator&lt;_Iter&gt;)
216 &#32;&#32;&#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;0)
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__f)};
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__last&#32;=&#32;__first&#32;+&#32;__n;
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::for_each(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__f),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
222 &#32;&#32;&#32;&#32;&#32;&#32;}
223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--&#32;&gt;&#32;0)
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__f,&#32;std::__invoke(__proj,&#32;*__first));
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__f)};
231 &#32;&#32;&#32;&#32;&#32;&#32;}
232 &#32;&#32;&#32;&#32;&#32;&#32;}
233 &#32;&#32;};
234 
235 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__for_each_n_fn&#32;<link linkend="_namespacestd_1a5bd8d5cb6d63d354aff5188eb885e8b2">for_each_n</link>{};
236 
237 &#32;&#32;<emphasis role="comment">//&#32;find,&#32;find_if&#32;and&#32;find_if_not&#32;are&#32;defined&#32;in&#32;&lt;bits/ranges_util.h&gt;.</emphasis>
238 
239 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_first_of_fn
240 &#32;&#32;{
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;_Iter1,&#32;_Iter2,&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter1
247 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Pred&#32;__pred&#32;=&#32;{},
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
250 &#32;&#32;&#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1)
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__iter&#32;=&#32;__first2;&#32;__iter&#32;!=&#32;__last2;&#32;++__iter)
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__iter)))
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1;
257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1;
258 &#32;&#32;&#32;&#32;&#32;&#32;}
259 
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;forward_range&#32;_Range2,
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range1&gt;
266 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Pred&#32;__pred&#32;=&#32;{},
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
273 &#32;&#32;&#32;&#32;&#32;&#32;}
274 &#32;&#32;};
275 
276 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__find_first_of_fn&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>{};
277 
278 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__count_fn
279 &#32;&#32;{
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirect_binary_predicate&lt;ranges::equal_to,
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;,
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_Iter&gt;
286 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;iter_difference_t&lt;_Iter&gt;&#32;__n&#32;=&#32;0;
290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__proj,&#32;*__first)&#32;==&#32;__value)
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__n;
293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
294 &#32;&#32;&#32;&#32;&#32;&#32;}
295 
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirect_binary_predicate&lt;ranges::equal_to,
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;,
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;range_difference_t&lt;_Range&gt;
301 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;{
303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
305 &#32;&#32;&#32;&#32;&#32;&#32;}
306 &#32;&#32;};
307 
308 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__count_fn&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>{};
309 
310 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__count_if_fn
311 &#32;&#32;{
312 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_difference_t&lt;_Iter&gt;
316 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;iter_difference_t&lt;_Iter&gt;&#32;__n&#32;=&#32;0;
320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__n;
323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
324 &#32;&#32;&#32;&#32;&#32;&#32;}
325 
326 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;range_difference_t&lt;_Range&gt;
331 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;{
333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
335 &#32;&#32;&#32;&#32;&#32;&#32;}
336 &#32;&#32;};
337 
338 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__count_if_fn&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link>{};
339 
340 &#32;&#32;<emphasis role="comment">//&#32;in_in_result,&#32;mismatch&#32;and&#32;search&#32;are&#32;defined&#32;in&#32;&lt;bits/ranges_util.h&gt;.</emphasis>
341 
342 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__search_n_fn
343 &#32;&#32;{
344 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;_Iter,&#32;const&#32;_Tp*,&#32;_Pred,&#32;_Proj&gt;
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter&gt;
348 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;iter_difference_t&lt;_Iter&gt;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Pred&#32;__pred&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
350 &#32;&#32;&#32;&#32;&#32;&#32;{
351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;&lt;=&#32;0)
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
353 
354 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__value_comp&#32;=&#32;[&amp;]&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rp&gt;&#32;(_Rp&amp;&amp;&#32;__arg)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke(__pred,&#32;std::forward&lt;_Rp&gt;(__arg),&#32;__value);
356 &#32;&#32;&#32;&#32;};
357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;==&#32;1)
358 &#32;&#32;&#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;ranges::find_if(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;__last,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__value_comp),
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__end&#32;=&#32;__first;
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;++__end};
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
369 &#32;&#32;&#32;&#32;&#32;&#32;}
370 
371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(sized_sentinel_for&lt;_Sent,&#32;_Iter&gt;
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;random_access_iterator&lt;_Iter&gt;)
373 &#32;&#32;&#32;&#32;&#32;&#32;{
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__tail_size&#32;=&#32;__last&#32;-&#32;__first;
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__remainder&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>;
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__remainder&#32;&lt;=&#32;__tail_size)
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+=&#32;__remainder;
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tail_size&#32;-=&#32;__remainder;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__backtrack&#32;=&#32;__first;
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__value_comp(std::__invoke(__proj,&#32;*--__backtrack)))
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--__remainder&#32;==&#32;0)
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__first};
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__remainder&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;+&#32;1&#32;-&#32;(__first&#32;-&#32;__backtrack);
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__first&#32;+&#32;__tail_size;
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;__i};
391 &#32;&#32;&#32;&#32;&#32;&#32;}
392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;ranges::find_if(__first,&#32;__last,&#32;__value_comp,&#32;__proj);
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>;
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__first;
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__i&#32;!=&#32;__last&#32;&amp;&amp;&#32;__n&#32;!=&#32;1
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__value_comp(std::__invoke(__proj,&#32;*__i)))
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__n;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__i};
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__last)
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;__i};
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;ranges::find_if(++__i,&#32;__last,&#32;__value_comp,&#32;__proj);
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
413 &#32;&#32;&#32;&#32;&#32;&#32;}
414 &#32;&#32;&#32;&#32;&#32;&#32;}
415 
416 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;iterator_t&lt;_Range&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*,
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Proj&gt;
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range&gt;
421 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;range_difference_t&lt;_Range&gt;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Pred&#32;__pred&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>),&#32;__value,
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
427 &#32;&#32;&#32;&#32;&#32;&#32;}
428 &#32;&#32;};
429 
430 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__search_n_fn&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link>{};
431 
432 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_end_fn
433 &#32;&#32;{
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;_Iter1,&#32;_Iter2,&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter1&gt;
440 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Pred&#32;__pred&#32;=&#32;{},
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
443 &#32;&#32;&#32;&#32;&#32;&#32;{
444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(bidirectional_iterator&lt;_Iter1&gt;
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;bidirectional_iterator&lt;_Iter2&gt;)
446 &#32;&#32;&#32;&#32;&#32;&#32;{
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;=&#32;ranges::next(__first1,&#32;__last1);
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i2&#32;=&#32;ranges::next(__first2,&#32;__last2);
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__rresult
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::search(reverse_iterator&lt;_Iter1&gt;{<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>},
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator&lt;_Iter1&gt;{__first1},
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator&lt;_Iter2&gt;{__i2},
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator&lt;_Iter2&gt;{__first2},
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result_first&#32;=&#32;ranges::end(__rresult).base();
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result_last&#32;=&#32;ranges::begin(__rresult).base();
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result_last&#32;==&#32;__first1)
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>};
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__result_first,&#32;__result_last};
462 &#32;&#32;&#32;&#32;&#32;&#32;}
463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;{
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;ranges::next(__first1,&#32;__last1);
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;__i};
468 
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result_begin&#32;=&#32;__i;
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result_end&#32;=&#32;__i;
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__new_range&#32;=&#32;ranges::search(__first1,&#32;__last1,
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred,&#32;__proj1,&#32;__proj2);
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__new_result_begin&#32;=&#32;ranges::begin(__new_range);
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__new_result_end&#32;=&#32;ranges::end(__new_range);
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__new_result_begin&#32;==&#32;__last1)
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__result_begin,&#32;__result_end};
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result_begin&#32;=&#32;__new_result_begin;
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result_end&#32;=&#32;__new_result_end;
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first1&#32;=&#32;__result_begin;
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
488 &#32;&#32;&#32;&#32;&#32;&#32;}
489 &#32;&#32;&#32;&#32;&#32;&#32;}
490 
491 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range1,&#32;forward_range&#32;_Range2,
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;ranges::equal_to,
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_comparable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Proj1,&#32;_Proj2&gt;
496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range1&gt;
497 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Pred&#32;__pred&#32;=&#32;{},
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;{
500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
504 &#32;&#32;&#32;&#32;&#32;&#32;}
505 &#32;&#32;};
506 
507 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__find_end_fn&#32;<link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">find_end</link>{};
508 
509 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__adjacent_find_fn
510 &#32;&#32;{
511 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_binary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;,
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::equal_to&gt;
516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
517 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
519 &#32;&#32;&#32;&#32;&#32;&#32;{
520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
522 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__next&#32;=&#32;__first;
523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;++__next&#32;!=&#32;__last;&#32;__first&#32;=&#32;__next)
524 &#32;&#32;&#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first),
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__next)))
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
529 &#32;&#32;&#32;&#32;&#32;&#32;}
530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next;
531 &#32;&#32;&#32;&#32;&#32;&#32;}
532 
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_binary_predicate&lt;
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;,
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;&#32;_Pred&#32;=&#32;ranges::equal_to&gt;
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
538 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;{
540 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
542 &#32;&#32;&#32;&#32;&#32;&#32;}
543 &#32;&#32;};
544 
545 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__adjacent_find_fn&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>{};
546 
547 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_permutation_fn
548 &#32;&#32;{
549 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;forward_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_equivalence_relation&lt;projected&lt;_Iter1,&#32;_Proj1&gt;,
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter2,&#32;_Proj2&gt;&gt;&#32;_Pred
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::equal_to&gt;
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
556 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Pred&#32;__pred&#32;=&#32;{},
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
559 &#32;&#32;&#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__sized_iters
561 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;(sized_sentinel_for&lt;_Sent1,&#32;_Iter1&gt;
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sized_sentinel_for&lt;_Sent2,&#32;_Iter2&gt;);
563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__sized_iters)
564 &#32;&#32;&#32;&#32;&#32;&#32;{
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;ranges::distance(__first1,&#32;__last1);
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;ranges::distance(__first2,&#32;__last2);
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;!=&#32;__d2)
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
569 &#32;&#32;&#32;&#32;&#32;&#32;}
570 
571 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Efficiently&#32;compare&#32;identical&#32;prefixes:&#32;&#32;O(N)&#32;if&#32;sequences</emphasis>
572 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;have&#32;the&#32;same&#32;elements&#32;in&#32;the&#32;same&#32;order.</emphasis>
573 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
575 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
579 
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__sized_iters)
581 &#32;&#32;&#32;&#32;&#32;&#32;{
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
584 &#32;&#32;&#32;&#32;&#32;&#32;}
585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
586 &#32;&#32;&#32;&#32;&#32;&#32;{
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;ranges::distance(__first1,&#32;__last1);
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;ranges::distance(__first2,&#32;__last2);
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;==&#32;0&#32;&amp;&amp;&#32;__d2&#32;==&#32;0)
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;!=&#32;__d2)
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
593 &#32;&#32;&#32;&#32;&#32;&#32;}
594 
595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__scan&#32;=&#32;__first1;&#32;__scan&#32;!=&#32;__last1;&#32;++__scan)
596 &#32;&#32;&#32;&#32;&#32;&#32;{
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__proj_scan&#32;=&#32;std::__invoke(__proj1,&#32;*__scan);
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__comp_scan&#32;=&#32;[&amp;]&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;(_Tp&amp;&amp;&#32;__arg)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke(__pred,&#32;__proj_scan,
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Tp&gt;(__arg));
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__scan&#32;!=&#32;ranges::find_if(__first1,&#32;__scan,
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp_scan,&#32;__proj1))
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;We&apos;ve&#32;seen&#32;this&#32;one&#32;before.</emphasis>
605 
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__matches&#32;=&#32;ranges::count_if(__first2,&#32;__last2,
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp_scan,&#32;__proj2);
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__matches&#32;==&#32;0
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;ranges::count_if(__scan,&#32;__last1,
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp_scan,&#32;__proj1)&#32;!=&#32;__matches)
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
612 &#32;&#32;&#32;&#32;&#32;&#32;}
613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
614 &#32;&#32;&#32;&#32;&#32;&#32;}
615 
616 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range1,&#32;forward_range&#32;_Range2,
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_equivalence_relation&lt;
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range1&gt;,&#32;_Proj1&gt;,
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range2&gt;,&#32;_Proj2&gt;&gt;&#32;_Pred&#32;=&#32;ranges::equal_to&gt;
621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
622 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Pred&#32;__pred&#32;=&#32;{},
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
624 &#32;&#32;&#32;&#32;&#32;&#32;{
625 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
629 &#32;&#32;&#32;&#32;&#32;&#32;}
630 &#32;&#32;};
631 
632 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__is_permutation_fn&#32;is_permutation{};
633 
634 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
635 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>copy_if_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
636 
637 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_if_fn
638 &#32;&#32;{
639 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
643 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_if_result&lt;_Iter,&#32;_Out&gt;
644 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result,
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
646 &#32;&#32;&#32;&#32;&#32;&#32;{
647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
654 &#32;&#32;&#32;&#32;&#32;&#32;}
655 
656 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out,
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;copy_if_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
662 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result,
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
664 &#32;&#32;&#32;&#32;&#32;&#32;{
665 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
668 &#32;&#32;&#32;&#32;&#32;&#32;}
669 &#32;&#32;};
670 
671 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__copy_if_fn&#32;<link linkend="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1">copy_if</link>{};
672 
673 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
674 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>swap_ranges_result&#32;=&#32;in_in_result&lt;_Iter1,&#32;_Iter2&gt;;
675 
676 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__swap_ranges_fn
677 &#32;&#32;{
678 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2&gt;
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_swappable&lt;_Iter1,&#32;_Iter2&gt;
681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;swap_ranges_result&lt;_Iter1,&#32;_Iter2&gt;
682 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2)<emphasis role="keyword">&#32;const</emphasis>
684 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
687 &#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first1,&#32;__first2);
688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2)};
689 &#32;&#32;&#32;&#32;&#32;&#32;}
690 
691 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2&gt;
692 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_swappable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;&gt;
693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;swap_ranges_result&lt;borrowed_iterator_t&lt;_Range1&gt;,
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range2&gt;&gt;
695 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2)<emphasis role="keyword">&#32;const</emphasis>
696 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2));
699 &#32;&#32;&#32;&#32;&#32;&#32;}
700 &#32;&#32;};
701 
702 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__swap_ranges_fn&#32;<link linkend="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200">swap_ranges</link>{};
703 
704 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
705 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unary_transform_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
706 
707 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
708 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>in_in_out_result
709 &#32;&#32;&#32;&#32;{
710 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter1&#32;in1;
711 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter2&#32;in2;
712 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Out&#32;&#32;out;
713 
714 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OOut&gt;
715 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_Iter1&amp;,&#32;_IIter1&gt;
716 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Iter2&amp;,&#32;_IIter2&gt;
717 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Out&amp;,&#32;_OOut&gt;
718 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
719 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_in_out_result&lt;_IIter1,&#32;_IIter2,&#32;_OOut&gt;()&#32;const&#32;&amp;
720 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{in1,&#32;in2,&#32;out};&#32;}
721 
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OOut&gt;
723 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;_Iter1,&#32;_IIter1&gt;
724 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Iter2,&#32;_IIter2&gt;
725 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Out,&#32;_OOut&gt;
726 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
727 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_in_out_result&lt;_IIter1,&#32;_IIter2,&#32;_OOut&gt;()&#32;&amp;&amp;
728 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(in1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(in2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(out)};&#32;}
729 &#32;&#32;&#32;&#32;};
730 
731 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
732 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>binary_transform_result&#32;=&#32;in_in_out_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;;
733 
734 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__transform_fn
735 &#32;&#32;{
736 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_constructible&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;_Out,
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_result_t&lt;_Fp&amp;,
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;&gt;
742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;unary_transform_result&lt;_Iter,&#32;_Out&gt;
743 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first1,&#32;_Sent&#32;__last1,&#32;_Out&#32;__result,
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fp&#32;__op,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
745 &#32;&#32;&#32;&#32;&#32;&#32;{
746 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__result)
747 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;std::__invoke(__op,&#32;std::__invoke(__proj,&#32;*__first1));
748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
749 &#32;&#32;&#32;&#32;&#32;&#32;}
750 
751 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out,
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_constructible&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;_Out,
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_result_t&lt;_Fp&amp;,
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;&gt;
756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;unary_transform_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
757 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result,&#32;_Fp&#32;__op,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
758 &#32;&#32;&#32;&#32;&#32;&#32;{
759 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__op),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
762 &#32;&#32;&#32;&#32;&#32;&#32;}
763 
764 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;copy_constructible&#32;_Fp,
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;_Out,
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_result_t&lt;_Fp&amp;,
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter1,&#32;_Proj1&gt;,
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter2,&#32;_Proj2&gt;&gt;&gt;
772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;binary_transform_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;
773 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&#32;__result,&#32;_Fp&#32;__binary_op,
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
777 &#32;&#32;&#32;&#32;&#32;&#32;{
778 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2,&#32;++__result)
780 &#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;std::__invoke(__binary_op,
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2));
783 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
784 &#32;&#32;&#32;&#32;&#32;&#32;}
785 
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;copy_constructible&#32;_Fp,
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;_Out,
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_result_t&lt;_Fp&amp;,
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range1&gt;,&#32;_Proj1&gt;,
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range2&gt;,&#32;_Proj2&gt;&gt;&gt;
793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;binary_transform_result&lt;borrowed_iterator_t&lt;_Range1&gt;,
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range2&gt;,&#32;_Out&gt;
795 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Out&#32;__result,&#32;_Fp&#32;__binary_op,
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
797 &#32;&#32;&#32;&#32;&#32;&#32;{
798 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__binary_op),
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
802 &#32;&#32;&#32;&#32;&#32;&#32;}
803 &#32;&#32;};
804 
805 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__transform_fn&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>{};
806 
807 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_fn
808 &#32;&#32;{
809 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;_Iter,&#32;const&#32;_Tp2&amp;&gt;
812 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_binary_predicate&lt;ranges::equal_to,&#32;projected&lt;_Iter,&#32;_Proj&gt;,
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1*&gt;
814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
815 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__old_value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&#32;__new_value,
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
818 &#32;&#32;&#32;&#32;&#32;&#32;{
819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__proj,&#32;*__first)&#32;==&#32;__old_value)
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;__new_value;
822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
823 &#32;&#32;&#32;&#32;&#32;&#32;}
824 
825 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;iterator_t&lt;_Range&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&gt;
828 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_binary_predicate&lt;ranges::equal_to,
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;,
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1*&gt;
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
832 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__old_value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&#32;__new_value,
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
835 &#32;&#32;&#32;&#32;&#32;&#32;{
836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__old_value,&#32;__new_value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
838 &#32;&#32;&#32;&#32;&#32;&#32;}
839 &#32;&#32;};
840 
841 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__replace_fn&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>{};
842 
843 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_if_fn
844 &#32;&#32;{
845 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;_Iter,&#32;const&#32;_Tp&amp;&gt;
849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
850 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
852 &#32;&#32;&#32;&#32;&#32;&#32;{
853 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;__new_value;
856 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first);
857 &#32;&#32;&#32;&#32;&#32;&#32;}
858 
859 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_writable&lt;iterator_t&lt;_Range&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&gt;
863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
864 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
866 &#32;&#32;&#32;&#32;&#32;&#32;{
867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;__new_value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
869 &#32;&#32;&#32;&#32;&#32;&#32;}
870 &#32;&#32;};
871 
872 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__replace_if_fn&#32;<link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link>{};
873 
874 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
875 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>replace_copy_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
876 
877 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_copy_fn
878 &#32;&#32;{
879 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;output_iterator&lt;const&#32;_Tp2&amp;&gt;&#32;_Out,
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
883 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_binary_predicate&lt;ranges::equal_to,
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1*&gt;
885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;replace_copy_result&lt;_Iter,&#32;_Out&gt;
886 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result,
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__old_value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&#32;__new_value,
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
889 &#32;&#32;&#32;&#32;&#32;&#32;{
890 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__result)
891 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__proj,&#32;*__first)&#32;==&#32;__old_value)
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;__new_value;
893 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
895 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
896 &#32;&#32;&#32;&#32;&#32;&#32;}
897 
898 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_iterator&lt;const&#32;_Tp2&amp;&gt;&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
901 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_binary_predicate&lt;ranges::equal_to,
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;,
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1*&gt;
904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;replace_copy_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
905 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result,
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__old_value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp2&amp;&#32;__new_value,
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
908 &#32;&#32;&#32;&#32;&#32;&#32;{
909 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;__old_value,
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__new_value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
912 &#32;&#32;&#32;&#32;&#32;&#32;}
913 &#32;&#32;};
914 
915 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__replace_copy_fn&#32;<link linkend="_namespacestd_1aa606c48e16f23e6c4f613d187cc3675c">replace_copy</link>{};
916 
917 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
918 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>replace_copy_if_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
919 
920 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_copy_if_fn
921 &#32;&#32;{
922 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;output_iterator&lt;const&#32;_Tp&amp;&gt;&#32;_Out,
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;replace_copy_if_result&lt;_Iter,&#32;_Out&gt;
928 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result,
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
930 &#32;&#32;&#32;&#32;&#32;&#32;{
931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__result)
932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;__new_value;
934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
937 &#32;&#32;&#32;&#32;&#32;&#32;}
938 
939 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;output_iterator&lt;const&#32;_Tp&amp;&gt;&#32;_Out,
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
945 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;replace_copy_if_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
946 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result,
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
948 &#32;&#32;&#32;&#32;&#32;&#32;{
949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__new_value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
952 &#32;&#32;&#32;&#32;&#32;&#32;}
953 &#32;&#32;};
954 
955 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__replace_copy_if_fn&#32;<link linkend="_namespacestd_1a2923a872c909e0531e5db0309ad30a95">replace_copy_if</link>{};
956 
957 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__generate_n_fn
958 &#32;&#32;{
959 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_Out,&#32;copy_constructible&#32;_Fp&gt;
960 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;invocable&lt;_Fp&amp;&gt;
961 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;invoke_result_t&lt;_Fp&amp;&gt;&gt;
962 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Out
963 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Out&#32;__first,&#32;iter_difference_t&lt;_Out&gt;&#32;__n,&#32;_Fp&#32;__gen)<emphasis role="keyword">&#32;const</emphasis>
964 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first)
966 &#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;std::__invoke(__gen);
967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
968 &#32;&#32;&#32;&#32;&#32;&#32;}
969 &#32;&#32;};
970 
971 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__generate_n_fn&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link>{};
972 
973 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__generate_fn
974 &#32;&#32;{
975 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_or_output_iterator&#32;_Out,&#32;sentinel_for&lt;_Out&gt;&#32;_Sent,
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;copy_constructible&#32;_Fp&gt;
977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;invocable&lt;_Fp&amp;&gt;
978 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;invoke_result_t&lt;_Fp&amp;&gt;&gt;
979 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Out
980 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Out&#32;__first,&#32;_Sent&#32;__last,&#32;_Fp&#32;__gen)<emphasis role="keyword">&#32;const</emphasis>
981 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
982 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
983 &#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;std::__invoke(__gen);
984 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
985 &#32;&#32;&#32;&#32;&#32;&#32;}
986 
987 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Range,&#32;copy_constructible&#32;_Fp&gt;
988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;invocable&lt;_Fp&amp;&gt;&#32;&amp;&amp;&#32;output_range&lt;_Range,&#32;invoke_result_t&lt;_Fp&amp;&gt;&gt;
989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
990 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Fp&#32;__gen)<emphasis role="keyword">&#32;const</emphasis>
991 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__gen));
993 &#32;&#32;&#32;&#32;&#32;&#32;}
994 &#32;&#32;};
995 
996 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__generate_fn&#32;<link linkend="_namespace_catch_1_1_generators_1a3b0ab1f589b1d1e0e92afcd12cf4ab12">generate</link>{};
997 
998 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_if_fn
999 &#32;&#32;{
1000 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;permutable&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
1003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter&gt;
1004 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1006 &#32;&#32;&#32;&#32;&#32;&#32;{
1007 &#32;&#32;&#32;&#32;__first&#32;=&#32;ranges::find_if(__first,&#32;__last,&#32;__pred,&#32;__proj);
1008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
1010 
1011 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;__first;
1012 &#32;&#32;&#32;&#32;++__first;
1013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1019 
1020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__result,&#32;__first};
1021 &#32;&#32;&#32;&#32;&#32;&#32;}
1022 
1023 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
1026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
1027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range&gt;
1028 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1029 &#32;&#32;&#32;&#32;&#32;&#32;{
1030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1032 &#32;&#32;&#32;&#32;&#32;&#32;}
1033 &#32;&#32;};
1034 
1035 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__remove_if_fn&#32;<link linkend="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908">remove_if</link>{};
1036 
1037 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_fn
1038 &#32;&#32;{
1039 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;permutable&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirect_binary_predicate&lt;ranges::equal_to,
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;,
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
1044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter&gt;
1045 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1047 &#32;&#32;&#32;&#32;&#32;&#32;{
1048 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pred&#32;=&#32;[&amp;]&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__arg)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
1049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;decltype(__arg)&gt;(__arg)&#32;==&#32;__value;
1050 &#32;&#32;&#32;&#32;};
1051 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::remove_if(__first,&#32;__last,
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1053 &#32;&#32;&#32;&#32;&#32;&#32;}
1054 
1055 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
1057 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_binary_predicate&lt;ranges::equal_to,
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;,
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
1060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range&gt;
1061 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1062 &#32;&#32;&#32;&#32;&#32;&#32;{
1063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1065 &#32;&#32;&#32;&#32;&#32;&#32;}
1066 &#32;&#32;};
1067 
1068 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__remove_fn&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>{};
1069 
1070 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
1071 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>remove_copy_if_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
1072 
1073 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_copy_if_fn
1074 &#32;&#32;{
1075 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
1078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
1079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;remove_copy_if_result&lt;_Iter,&#32;_Out&gt;
1080 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result,
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1082 &#32;&#32;&#32;&#32;&#32;&#32;{
1083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
1090 &#32;&#32;&#32;&#32;&#32;&#32;}
1091 
1092 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out,
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
1096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;remove_copy_if_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1098 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result,
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1100 &#32;&#32;&#32;&#32;&#32;&#32;{
1101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1104 &#32;&#32;&#32;&#32;&#32;&#32;}
1105 &#32;&#32;};
1106 
1107 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__remove_copy_if_fn&#32;<link linkend="_namespacestd_1a11eaff910d723a0ea9707f30aead68c4">remove_copy_if</link>{};
1108 
1109 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
1110 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>remove_copy_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
1111 
1112 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__remove_copy_fn
1113 &#32;&#32;{
1114 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
1117 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_binary_predicate&lt;ranges::equal_to,
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;,
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
1120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;remove_copy_result&lt;_Iter,&#32;_Out&gt;
1121 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result,
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1123 &#32;&#32;&#32;&#32;&#32;&#32;{
1124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(std::__invoke(__proj,&#32;*__first)&#32;==&#32;__value))
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
1131 &#32;&#32;&#32;&#32;&#32;&#32;}
1132 
1133 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out,
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1136 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_binary_predicate&lt;ranges::equal_to,
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;,
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
1139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;remove_copy_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1140 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result,
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1142 &#32;&#32;&#32;&#32;&#32;&#32;{
1143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1145 &#32;&#32;&#32;&#32;&#32;&#32;}
1146 &#32;&#32;};
1147 
1148 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__remove_copy_fn&#32;<link linkend="_namespacestd_1a6b787bee96a52b5b62d7fe8aa6f15fd8">remove_copy</link>{};
1149 
1150 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__unique_fn
1151 &#32;&#32;{
1152 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;permutable&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_equivalence_relation&lt;
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Comp&#32;=&#32;ranges::equal_to&gt;
1156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter&gt;
1157 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1159 &#32;&#32;&#32;&#32;&#32;&#32;{
1160 &#32;&#32;&#32;&#32;__first&#32;=&#32;ranges::adjacent_find(__first,&#32;__last,&#32;__comp,&#32;__proj);
1161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
1163 
1164 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__dest&#32;=&#32;__first;
1165 &#32;&#32;&#32;&#32;++__first;
1166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
1167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__invoke(__comp,
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__dest),
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first)))
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*++__dest&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
1171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{++__dest,&#32;__first};
1172 &#32;&#32;&#32;&#32;&#32;&#32;}
1173 
1174 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_equivalence_relation&lt;
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;&#32;_Comp&#32;=&#32;ranges::equal_to&gt;
1177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
1178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range&gt;
1179 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1180 &#32;&#32;&#32;&#32;&#32;&#32;{
1181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1183 &#32;&#32;&#32;&#32;&#32;&#32;}
1184 &#32;&#32;};
1185 
1186 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__unique_fn&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link>{};
1187 
1188 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
1189 &#32;&#32;{
1190 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__can_reread_output&#32;=&#32;input_iterator&lt;_Out&gt;
1192 &#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;_Tp,&#32;iter_value_t&lt;_Out&gt;&gt;;
1193 &#32;&#32;}
1194 
1195 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
1196 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unique_copy_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
1197 
1198 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__unique_copy_fn
1199 &#32;&#32;{
1200 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_equivalence_relation&lt;
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Comp&#32;=&#32;ranges::equal_to&gt;
1204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
1205 &#32;&#32;&#32;&#32;&amp;&amp;&#32;(forward_iterator&lt;_Iter&gt;
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__detail::__can_reread_output&lt;_Out,&#32;iter_value_t&lt;_Iter&gt;&gt;
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;indirectly_copyable_storable&lt;_Iter,&#32;_Out&gt;)
1208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;unique_copy_result&lt;_Iter,&#32;_Out&gt;
1209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result,
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1211 &#32;&#32;&#32;&#32;&#32;&#32;{
1212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
1214 
1215 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;perform&#32;a&#32;closer&#32;comparison&#32;with&#32;reference&#32;implementations</emphasis>
1216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(forward_iterator&lt;_Iter&gt;)
1217 &#32;&#32;&#32;&#32;&#32;&#32;{
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__next&#32;=&#32;__first;
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__next;
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__next&#32;!=&#32;__last)
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__invoke(__comp,
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first),
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__next)))
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__next;
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*++__result&#32;=&#32;*__first;
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__next,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(++__result)};
1229 &#32;&#32;&#32;&#32;&#32;&#32;}
1230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__detail::__can_reread_output&lt;_Out,&#32;iter_value_t&lt;_Iter&gt;&gt;)
1231 &#32;&#32;&#32;&#32;&#32;&#32;{
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__invoke(__comp,
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__result),
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first)))
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*++__result&#32;=&#32;*__first;
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(++__result)};
1239 &#32;&#32;&#32;&#32;&#32;&#32;}
1240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;indirectly_copyable_storable&lt;_Iter,&#32;_Out&gt;</emphasis>
1241 &#32;&#32;&#32;&#32;&#32;&#32;{
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__value&#32;=&#32;*__first;
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;__value;
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__comp,
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first),
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__value)))
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value&#32;=&#32;*__first;
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*++__result&#32;=&#32;__value;
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(++__result)};
1255 &#32;&#32;&#32;&#32;&#32;&#32;}
1256 &#32;&#32;&#32;&#32;&#32;&#32;}
1257 
1258 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_equivalence_relation&lt;
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;&#32;_Comp&#32;=&#32;ranges::equal_to&gt;
1262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1263 &#32;&#32;&#32;&#32;&amp;&amp;&#32;(forward_iterator&lt;iterator_t&lt;_Range&gt;&gt;
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__detail::__can_reread_output&lt;_Out,&#32;range_value_t&lt;_Range&gt;&gt;
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;indirectly_copyable_storable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;)
1266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;unique_copy_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result,
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1269 &#32;&#32;&#32;&#32;&#32;&#32;{
1270 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1273 &#32;&#32;&#32;&#32;&#32;&#32;}
1274 &#32;&#32;};
1275 
1276 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__unique_copy_fn&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link>{};
1277 
1278 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__reverse_fn
1279 &#32;&#32;{
1280 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent&gt;
1281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;_Iter&gt;
1282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1283 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last)<emphasis role="keyword">&#32;const</emphasis>
1284 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1285 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;ranges::next(__first,&#32;__last);
1286 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__tail&#32;=&#32;__i;
1287 
1288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(random_access_iterator&lt;_Iter&gt;)
1289 &#32;&#32;&#32;&#32;&#32;&#32;{
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;!=&#32;__last)
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__tail;
1293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;&lt;&#32;__tail)
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first,&#32;__tail);
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__tail;
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
1301 &#32;&#32;&#32;&#32;&#32;&#32;}
1302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1303 &#32;&#32;&#32;&#32;&#32;&#32;{
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__tail&#32;||&#32;__first&#32;==&#32;--__tail)
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first,&#32;__tail);
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
1313 &#32;&#32;&#32;&#32;&#32;&#32;}
1314 &#32;&#32;&#32;&#32;&#32;&#32;}
1315 
1316 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_range&#32;_Range&gt;
1317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
1318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1319 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r)<emphasis role="keyword">&#32;const</emphasis>
1320 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r));
1322 &#32;&#32;&#32;&#32;&#32;&#32;}
1323 &#32;&#32;};
1324 
1325 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__reverse_fn&#32;<link linkend="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719">reverse</link>{};
1326 
1327 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
1328 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reverse_copy_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
1329 
1330 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__reverse_copy_fn
1331 &#32;&#32;{
1332 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out&gt;
1334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
1335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;reverse_copy_result&lt;_Iter,&#32;_Out&gt;
1336 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
1337 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1338 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;ranges::next(__first,&#32;__last);
1339 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__tail&#32;=&#32;__i;
1340 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__tail)
1341 &#32;&#32;&#32;&#32;&#32;&#32;{
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__tail;
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__tail;
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
1345 &#32;&#32;&#32;&#32;&#32;&#32;}
1346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__i,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
1347 &#32;&#32;&#32;&#32;&#32;&#32;}
1348 
1349 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_range&#32;_Range,&#32;weakly_incrementable&#32;_Out&gt;
1350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;reverse_copy_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1352 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
1353 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1354 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
1356 &#32;&#32;&#32;&#32;&#32;&#32;}
1357 &#32;&#32;};
1358 
1359 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__reverse_copy_fn&#32;<link linkend="_namespacestd_1aa750b5b7ee58a0ba12515997f5066c49">reverse_copy</link>{};
1360 
1361 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__rotate_fn
1362 &#32;&#32;{
1363 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;permutable&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent&gt;
1364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter&gt;
1365 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Iter&#32;__middle,&#32;_Sent&#32;__last)<emphasis role="keyword">&#32;const</emphasis>
1366 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1367 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__lasti,&#32;__lasti};
1370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;==&#32;__middle)
1371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1372 
1373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(random_access_iterator&lt;_Iter&gt;)
1374 &#32;&#32;&#32;&#32;&#32;&#32;{
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__lasti&#32;-&#32;__first;
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__middle&#32;-&#32;__first;
1377 
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k&#32;==&#32;__n&#32;-&#32;__k)
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::swap_ranges(__first,&#32;__middle,&#32;__middle,&#32;__middle&#32;+&#32;__k);
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1383 
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__p&#32;=&#32;__first;
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;__first&#32;+&#32;(__lasti&#32;-&#32;__middle);
1386 
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k&#32;&lt;&#32;__n&#32;-&#32;__k)
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;is_pod&#32;is&#32;deprecated,&#32;but&#32;this&#32;condition&#32;is</emphasis>
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;consistent&#32;with&#32;the&#32;STL&#32;implementation.</emphasis>
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_pod(iter_value_t&lt;_Iter&gt;))
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k&#32;==&#32;1)
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__t&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__p);
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::move(__p&#32;+&#32;1,&#32;__p&#32;+&#32;__n,&#32;__p);
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(__p&#32;+&#32;__n&#32;-&#32;1)&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__t);
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ret),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__q&#32;=&#32;__p&#32;+&#32;__k;
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">decltype</emphasis>(__n)&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n&#32;-&#32;__k;&#32;++&#32;__i)
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__p,&#32;__q);
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__p;
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__q;
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;%=&#32;__k;
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ret),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::swap(__n,&#32;__k);
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;__n&#32;-&#32;__k;
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k&#32;=&#32;__n&#32;-&#32;__k;
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;is_pod&#32;is&#32;deprecated,&#32;but&#32;this&#32;condition&#32;is</emphasis>
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;consistent&#32;with&#32;the&#32;STL&#32;implementation.</emphasis>
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_pod(iter_value_t&lt;_Iter&gt;))
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k&#32;==&#32;1)
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__t&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*(__p&#32;+&#32;__n&#32;-&#32;1));
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::move_backward(__p,&#32;__p&#32;+&#32;__n&#32;-&#32;1,&#32;__p&#32;+&#32;__n);
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__p&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__t);
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ret),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__q&#32;=&#32;__p&#32;+&#32;__n;
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p&#32;=&#32;__q&#32;-&#32;__k;
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">decltype</emphasis>(__n)&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n&#32;-&#32;__k;&#32;++&#32;__i)
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__p;
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__q;
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__p,&#32;__q);
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;%=&#32;__k;
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ret),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(__n,&#32;__k);
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1441 &#32;&#32;&#32;&#32;&#32;&#32;}
1442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(bidirectional_iterator&lt;_Iter&gt;)
1443 &#32;&#32;&#32;&#32;&#32;&#32;{
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__tail&#32;=&#32;__lasti;
1445 
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__first,&#32;__middle);
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__middle,&#32;__tail);
1448 
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__middle&#32;&amp;&amp;&#32;__middle&#32;!=&#32;__tail)
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first,&#32;--__tail);
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1454 
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__middle,&#32;__tail);
1458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__tail),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__first,&#32;__middle);
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1465 &#32;&#32;&#32;&#32;&#32;&#32;}
1466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1467 &#32;&#32;&#32;&#32;&#32;&#32;{
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__first2&#32;=&#32;__middle;
1469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first,&#32;__first2);
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__middle&#32;=&#32;__first2;
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first2&#32;!=&#32;__last);
1477 
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;__first;
1479 
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2&#32;=&#32;__middle;
1481 
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first2&#32;!=&#32;__last)
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first,&#32;__first2);
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__middle&#32;=&#32;__first2;
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last)
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2&#32;=&#32;__middle;
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ret),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
1493 &#32;&#32;&#32;&#32;&#32;&#32;}
1494 &#32;&#32;&#32;&#32;&#32;&#32;}
1495 
1496 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range&gt;
1497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
1498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range&gt;
1499 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;iterator_t&lt;_Range&gt;&#32;__middle)<emphasis role="keyword">&#32;const</emphasis>
1500 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::end(__r));
1503 &#32;&#32;&#32;&#32;&#32;&#32;}
1504 &#32;&#32;};
1505 
1506 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__rotate_fn&#32;<link linkend="_group__ext__matrix__transform_1ga42613eb0c7deb5f5188fc159df6c8950">rotate</link>{};
1507 
1508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
1509 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rotate_copy_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
1510 
1511 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__rotate_copy_fn
1512 &#32;&#32;{
1513 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out&gt;
1515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
1516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;rotate_copy_result&lt;_Iter,&#32;_Out&gt;
1517 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Iter&#32;__middle,&#32;_Sent&#32;__last,
1518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
1519 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1520 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy1&#32;=&#32;ranges::copy(__middle,
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
1522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
1523 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy2&#32;=&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
1524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),
1525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.out));
1526 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.in),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy2.out)&#32;};
1527 &#32;&#32;&#32;&#32;&#32;&#32;}
1528 
1529 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;weakly_incrementable&#32;_Out&gt;
1530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;rotate_copy_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1532 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;iterator_t&lt;_Range&gt;&#32;__middle,&#32;_Out&#32;__result)<emphasis role="keyword">&#32;const</emphasis>
1533 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::end(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
1536 &#32;&#32;&#32;&#32;&#32;&#32;}
1537 &#32;&#32;};
1538 
1539 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__rotate_copy_fn&#32;<link linkend="_namespacestd_1a6a632f2677de3977838e216e3a33338c">rotate_copy</link>{};
1540 
1541 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sample_fn
1542 &#32;&#32;{
1543 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Gen&gt;
1545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(forward_iterator&lt;_Iter&gt;&#32;||&#32;random_access_iterator&lt;_Out&gt;)
1546 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_copyable&lt;_Iter,&#32;_Out&gt;
1547 &#32;&#32;&#32;&#32;&amp;&amp;&#32;uniform_random_bit_generator&lt;remove_reference_t&lt;_Gen&gt;&gt;
1548 &#32;&#32;&#32;&#32;&#32;&#32;_Out
1549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Out&#32;__out,
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_difference_t&lt;_Iter&gt;&#32;__n,&#32;_Gen&amp;&amp;&#32;__g)&#32;<emphasis role="keyword">const</emphasis>
1551 &#32;&#32;&#32;&#32;&#32;&#32;{
1552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(forward_iterator&lt;_Iter&gt;)
1553 &#32;&#32;&#32;&#32;&#32;&#32;{
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;Forwarding&#32;to&#32;std::sample&#32;here&#32;requires&#32;computing&#32;__lasti</emphasis>
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;may&#32;take&#32;linear&#32;time.</emphasis>
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sample(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out),
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;std::forward&lt;_Gen&gt;(__g));
1560 &#32;&#32;&#32;&#32;&#32;&#32;}
1561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1562 &#32;&#32;&#32;&#32;&#32;&#32;{
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__distrib_type
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;uniform_int_distribution&lt;iter_difference_t&lt;_Iter&gt;&gt;;
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__param_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__distrib_type::param_type;
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__distrib_type&#32;__d{};
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_difference_t&lt;_Iter&gt;&#32;__sample_sz&#32;=&#32;0;
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;__sample_sz&#32;!=&#32;__n)
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__out[__sample_sz++]&#32;=&#32;*__first;
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__pop_sz&#32;=&#32;__sample_sz;&#32;__first&#32;!=&#32;__last;
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__pop_sz)
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__k&#32;=&#32;__d(__g,&#32;__param_type{0,&#32;__pop_sz});
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k&#32;&lt;&#32;__n)
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__out[__k]&#32;=&#32;*__first;
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out&#32;+&#32;__sample_sz;
1581 &#32;&#32;&#32;&#32;&#32;&#32;}
1582 &#32;&#32;&#32;&#32;&#32;&#32;}
1583 
1584 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Gen&gt;
1585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(forward_range&lt;_Range&gt;&#32;||&#32;random_access_iterator&lt;_Out&gt;)
1586 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out&gt;
1587 &#32;&#32;&#32;&#32;&amp;&amp;&#32;uniform_random_bit_generator&lt;remove_reference_t&lt;_Gen&gt;&gt;
1588 &#32;&#32;&#32;&#32;&#32;&#32;_Out
1589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>()(_Range&amp;&amp;&#32;__r,&#32;_Out&#32;__out,
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;range_difference_t&lt;_Range&gt;&#32;__n,&#32;_Gen&amp;&amp;&#32;__g)&#32;<emphasis role="keyword">const</emphasis>
1591 &#32;&#32;&#32;&#32;&#32;&#32;{
1592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out),&#32;__n,
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Gen&gt;(__g));
1595 &#32;&#32;&#32;&#32;&#32;&#32;}
1596 &#32;&#32;};
1597 
1598 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__sample_fn&#32;<link linkend="_structsample">sample</link>{};
1599 
1600 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
1601 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__shuffle_fn
1602 &#32;&#32;{
1603 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Gen&gt;
1605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;_Iter&gt;
1606 &#32;&#32;&#32;&#32;&amp;&amp;&#32;uniform_random_bit_generator&lt;remove_reference_t&lt;_Gen&gt;&gt;
1607 &#32;&#32;&#32;&#32;&#32;&#32;_Iter
1608 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,&#32;_Gen&amp;&amp;&#32;__g)<emphasis role="keyword">&#32;const</emphasis>
1609 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1610 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1611 &#32;&#32;&#32;&#32;std::shuffle(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;__lasti,&#32;std::forward&lt;_Gen&gt;(__g));
1612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
1613 &#32;&#32;&#32;&#32;&#32;&#32;}
1614 
1615 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Gen&gt;
1616 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
1617 &#32;&#32;&#32;&#32;&amp;&amp;&#32;uniform_random_bit_generator&lt;remove_reference_t&lt;_Gen&gt;&gt;
1618 &#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range&gt;
1619 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Gen&amp;&amp;&#32;__g)<emphasis role="keyword">&#32;const</emphasis>
1620 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Gen&gt;(__g));
1623 &#32;&#32;&#32;&#32;&#32;&#32;}
1624 &#32;&#32;};
1625 
1626 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__shuffle_fn&#32;<link linkend="_namespacelest_1abc0275611237ee9364ae8d16e82cb83b">shuffle</link>{};
1627 <emphasis role="preprocessor">#endif</emphasis>
1628 
1629 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__push_heap_fn
1630 &#32;&#32;{
1631 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
1634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1635 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1637 &#32;&#32;&#32;&#32;&#32;&#32;{
1638 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1639 &#32;&#32;&#32;&#32;std::push_heap(__first,&#32;__lasti,
1640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
1641 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
1642 &#32;&#32;&#32;&#32;&#32;&#32;}
1643 
1644 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
1647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1648 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1649 &#32;&#32;&#32;&#32;&#32;&#32;{
1650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1652 &#32;&#32;&#32;&#32;&#32;&#32;}
1653 &#32;&#32;};
1654 
1655 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__push_heap_fn&#32;push_heap{};
1656 
1657 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__pop_heap_fn
1658 &#32;&#32;{
1659 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
1662 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1663 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1665 &#32;&#32;&#32;&#32;&#32;&#32;{
1666 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1667 &#32;&#32;&#32;&#32;std::pop_heap(__first,&#32;__lasti,
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
1669 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
1670 &#32;&#32;&#32;&#32;&#32;&#32;}
1671 
1672 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
1675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1676 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1677 &#32;&#32;&#32;&#32;&#32;&#32;{
1678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1680 &#32;&#32;&#32;&#32;&#32;&#32;}
1681 &#32;&#32;};
1682 
1683 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__pop_heap_fn&#32;pop_heap{};
1684 
1685 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__make_heap_fn
1686 &#32;&#32;{
1687 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
1690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1691 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1693 &#32;&#32;&#32;&#32;&#32;&#32;{
1694 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1695 &#32;&#32;&#32;&#32;std::make_heap(__first,&#32;__lasti,
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
1697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
1698 &#32;&#32;&#32;&#32;&#32;&#32;}
1699 
1700 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
1703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1704 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1705 &#32;&#32;&#32;&#32;&#32;&#32;{
1706 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1708 &#32;&#32;&#32;&#32;&#32;&#32;}
1709 &#32;&#32;};
1710 
1711 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__make_heap_fn&#32;make_heap{};
1712 
1713 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sort_heap_fn
1714 &#32;&#32;{
1715 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
1718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1719 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1721 &#32;&#32;&#32;&#32;&#32;&#32;{
1722 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1723 &#32;&#32;&#32;&#32;std::sort_heap(__first,&#32;__lasti,
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
1725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
1726 &#32;&#32;&#32;&#32;&#32;&#32;}
1727 
1728 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
1731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1732 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1733 &#32;&#32;&#32;&#32;&#32;&#32;{
1734 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1736 &#32;&#32;&#32;&#32;&#32;&#32;}
1737 &#32;&#32;};
1738 
1739 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__sort_heap_fn&#32;sort_heap{};
1740 
1741 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_heap_until_fn
1742 &#32;&#32;{
1743 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
1745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
1746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
1747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1748 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1750 &#32;&#32;&#32;&#32;&#32;&#32;{
1751 &#32;&#32;&#32;&#32;iter_difference_t&lt;_Iter&gt;&#32;__n&#32;=&#32;ranges::distance(__first,&#32;__last);
1752 &#32;&#32;&#32;&#32;iter_difference_t&lt;_Iter&gt;&#32;__parent&#32;=&#32;0,&#32;__child&#32;=&#32;1;
1753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__child&#32;&lt;&#32;__n;&#32;++__child)
1754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*(__first&#32;+&#32;__parent)),
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*(__first&#32;+&#32;__child))))
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__child;
1758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__child&#32;&amp;&#32;1)&#32;==&#32;0)
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__parent;
1760 
1761 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__n;
1762 &#32;&#32;&#32;&#32;&#32;&#32;}
1763 
1764 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
1768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1769 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1770 &#32;&#32;&#32;&#32;&#32;&#32;{
1771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1773 &#32;&#32;&#32;&#32;&#32;&#32;}
1774 &#32;&#32;};
1775 
1776 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__is_heap_until_fn&#32;<link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">is_heap_until</link>{};
1777 
1778 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_heap_fn
1779 &#32;&#32;{
1780 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
1784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1785 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1787 &#32;&#32;&#32;&#32;&#32;&#32;{
1788 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__last
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;ranges::is_heap_until(__first,&#32;__last,
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj)));
1792 &#32;&#32;&#32;&#32;&#32;&#32;}
1793 
1794 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
1798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1799 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1800 &#32;&#32;&#32;&#32;&#32;&#32;{
1801 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1803 &#32;&#32;&#32;&#32;&#32;&#32;}
1804 &#32;&#32;};
1805 
1806 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__is_heap_fn&#32;<link linkend="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d">is_heap</link>{};
1807 
1808 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sort_fn
1809 &#32;&#32;{
1810 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
1813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1814 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1816 &#32;&#32;&#32;&#32;&#32;&#32;{
1817 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1818 &#32;&#32;&#32;&#32;_GLIBCXX_STD_A::sort(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;__lasti,
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
1820 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
1821 &#32;&#32;&#32;&#32;&#32;&#32;}
1822 
1823 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
1826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1827 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1828 &#32;&#32;&#32;&#32;&#32;&#32;{
1829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1831 &#32;&#32;&#32;&#32;&#32;&#32;}
1832 &#32;&#32;};
1833 
1834 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__sort_fn&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>{};
1835 
1836 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__stable_sort_fn
1837 &#32;&#32;{
1838 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
1841 &#32;&#32;&#32;&#32;&#32;&#32;_Iter
1842 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1844 &#32;&#32;&#32;&#32;&#32;&#32;{
1845 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
1846 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">std::stable_sort</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;__lasti,
1847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
1848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
1849 &#32;&#32;&#32;&#32;&#32;&#32;}
1850 
1851 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
1854 &#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range&gt;
1855 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1856 &#32;&#32;&#32;&#32;&#32;&#32;{
1857 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1859 &#32;&#32;&#32;&#32;&#32;&#32;}
1860 &#32;&#32;};
1861 
1862 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__stable_sort_fn&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>{};
1863 
1864 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__partial_sort_fn
1865 &#32;&#32;{
1866 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
1869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1870 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Iter&#32;__middle,&#32;_Sent&#32;__last,
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1872 &#32;&#32;&#32;&#32;&#32;&#32;{
1873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__middle)
1874 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::next(__first,&#32;__last);
1875 
1876 &#32;&#32;&#32;&#32;ranges::make_heap(__first,&#32;__middle,&#32;__comp,&#32;__proj);
1877 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__middle;
1878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__i&#32;!=&#32;__last;&#32;++__i)
1879 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i),
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first)))
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::pop_heap(__first,&#32;__middle,&#32;__comp,&#32;__proj);
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__middle-1,&#32;__i);
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::push_heap(__first,&#32;__middle,&#32;__comp,&#32;__proj);
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1887 &#32;&#32;&#32;&#32;ranges::sort_heap(__first,&#32;__middle,&#32;__comp,&#32;__proj);
1888 
1889 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;
1890 &#32;&#32;&#32;&#32;&#32;&#32;}
1891 
1892 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
1895 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
1896 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;iterator_t&lt;_Range&gt;&#32;__middle,
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1898 &#32;&#32;&#32;&#32;&#32;&#32;{
1899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::end(__r),
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
1902 &#32;&#32;&#32;&#32;&#32;&#32;}
1903 &#32;&#32;};
1904 
1905 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__partial_sort_fn&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>{};
1906 
1907 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
1908 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>partial_sort_copy_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
1909 
1910 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__partial_sort_copy_fn
1911 &#32;&#32;{
1912 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
1916 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter1,&#32;_Iter2&gt;
1917 &#32;&#32;&#32;&#32;&amp;&amp;&#32;sortable&lt;_Iter2,&#32;_Comp,&#32;_Proj2&gt;
1918 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_strict_weak_order&lt;_Comp,
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter1,&#32;_Proj1&gt;,
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter2,&#32;_Proj2&gt;&gt;
1921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;partial_sort_copy_result&lt;_Iter1,&#32;_Iter2&gt;
1922 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first,&#32;_Sent1&#32;__last,
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__result_first,&#32;_Sent2&#32;__result_last,
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1926 &#32;&#32;&#32;&#32;&#32;&#32;{
1927 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result_first&#32;==&#32;__result_last)
1928 &#32;&#32;&#32;&#32;&#32;&#32;{
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Eliminating&#32;the&#32;variable&#32;__lasti&#32;triggers&#32;an&#32;ICE.</emphasis>
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last));
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result_first)};
1933 &#32;&#32;&#32;&#32;&#32;&#32;}
1934 
1935 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result_real_last&#32;=&#32;__result_first;
1936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;__result_real_last&#32;!=&#32;__result_last)
1937 &#32;&#32;&#32;&#32;&#32;&#32;{
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result_real_last&#32;=&#32;*__first;
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result_real_last;
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1941 &#32;&#32;&#32;&#32;&#32;&#32;}
1942 
1943 &#32;&#32;&#32;&#32;ranges::make_heap(__result_first,&#32;__result_real_last,&#32;__comp,&#32;__proj2);
1944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1945 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
1946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first),
1947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__result_first)))
1948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::pop_heap(__result_first,&#32;__result_real_last,
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__proj2);
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*(__result_real_last-1)&#32;=&#32;*__first;
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::push_heap(__result_first,&#32;__result_real_last,
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__proj2);
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1955 &#32;&#32;&#32;&#32;ranges::sort_heap(__result_first,&#32;__result_real_last,&#32;__comp,&#32;__proj2);
1956 
1957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result_real_last)};
1958 &#32;&#32;&#32;&#32;&#32;&#32;}
1959 
1960 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;random_access_range&#32;_Range2,
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;&gt;
1964 &#32;&#32;&#32;&#32;&amp;&amp;&#32;sortable&lt;iterator_t&lt;_Range2&gt;,&#32;_Comp,&#32;_Proj2&gt;
1965 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_strict_weak_order&lt;_Comp,
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range1&gt;,&#32;_Proj1&gt;,
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range2&gt;,&#32;_Proj2&gt;&gt;
1968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;partial_sort_copy_result&lt;borrowed_iterator_t&lt;_Range1&gt;,
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range2&gt;&gt;
1970 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r,&#32;_Range2&amp;&amp;&#32;__out,&#32;_Comp&#32;__comp&#32;=&#32;{},
1971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1972 &#32;&#32;&#32;&#32;&#32;&#32;{
1973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__out),&#32;ranges::end(__out),
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
1977 &#32;&#32;&#32;&#32;&#32;&#32;}
1978 &#32;&#32;};
1979 
1980 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__partial_sort_copy_fn&#32;<link linkend="_namespacestd_1aede1625926fee2cb08e34aed9a057213">partial_sort_copy</link>{};
1981 
1982 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_sorted_until_fn
1983 &#32;&#32;{
1984 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
1985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
1986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
1987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
1988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
1989 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
1990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
1991 &#32;&#32;&#32;&#32;&#32;&#32;{
1992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1994 
1995 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__next&#32;=&#32;__first;
1996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(++__next;&#32;__next&#32;!=&#32;__last;&#32;__first&#32;=&#32;__next,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__next)
1997 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__next),
1999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first)))
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next;
2001 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next;
2002 &#32;&#32;&#32;&#32;&#32;&#32;}
2003 
2004 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2007 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
2008 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2009 &#32;&#32;&#32;&#32;&#32;&#32;{
2010 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2012 &#32;&#32;&#32;&#32;&#32;&#32;}
2013 &#32;&#32;};
2014 
2015 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__is_sorted_until_fn&#32;<link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">is_sorted_until</link>{};
2016 
2017 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_sorted_fn
2018 &#32;&#32;{
2019 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2024 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2026 &#32;&#32;&#32;&#32;&#32;&#32;{
2027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
2028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2029 
2030 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__next&#32;=&#32;__first;
2031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(++__next;&#32;__next&#32;!=&#32;__last;&#32;__first&#32;=&#32;__next,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__next)
2032 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__next),
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first)))
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2037 &#32;&#32;&#32;&#32;&#32;&#32;}
2038 
2039 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2043 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2044 &#32;&#32;&#32;&#32;&#32;&#32;{
2045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2047 &#32;&#32;&#32;&#32;&#32;&#32;}
2048 &#32;&#32;};
2049 
2050 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__is_sorted_fn&#32;<link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">is_sorted</link>{};
2051 
2052 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__nth_element_fn
2053 &#32;&#32;{
2054 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
2056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
2057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
2058 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Iter&#32;__nth,&#32;_Sent&#32;__last,
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2060 &#32;&#32;&#32;&#32;&#32;&#32;{
2061 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
2062 &#32;&#32;&#32;&#32;_GLIBCXX_STD_A::nth_element(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nth),
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lasti,
2064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
2065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
2066 &#32;&#32;&#32;&#32;&#32;&#32;}
2067 
2068 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;random_access_range&#32;_Range,
2069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
2070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
2071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
2072 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;iterator_t&lt;_Range&gt;&#32;__nth,
2073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2074 &#32;&#32;&#32;&#32;&#32;&#32;{
2075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nth),
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::end(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2077 &#32;&#32;&#32;&#32;&#32;&#32;}
2078 &#32;&#32;};
2079 
2080 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__nth_element_fn&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>{};
2081 
2082 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__lower_bound_fn
2083 &#32;&#32;{
2084 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;const&#32;_Tp*,&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;
2087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
2089 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2091 &#32;&#32;&#32;&#32;&#32;&#32;{
2092 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;ranges::distance(__first,&#32;__last);
2093 
2094 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
2095 &#32;&#32;&#32;&#32;&#32;&#32;{
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__half&#32;=&#32;__len&#32;/&#32;2;
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__middle&#32;=&#32;__first;
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::advance(__middle,&#32;__half);
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,&#32;std::__invoke(__proj,&#32;*__middle),&#32;__value))
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
2107 &#32;&#32;&#32;&#32;&#32;&#32;}
2108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2109 &#32;&#32;&#32;&#32;&#32;&#32;}
2110 
2111 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;<emphasis role="keyword">const</emphasis>&#32;_Tp*,
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
2116 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2118 &#32;&#32;&#32;&#32;&#32;&#32;{
2119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2121 &#32;&#32;&#32;&#32;&#32;&#32;}
2122 &#32;&#32;};
2123 
2124 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__lower_bound_fn&#32;lower_bound{};
2125 
2126 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__upper_bound_fn
2127 &#32;&#32;{
2128 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;const&#32;_Tp*,&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
2133 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2135 &#32;&#32;&#32;&#32;&#32;&#32;{
2136 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;ranges::distance(__first,&#32;__last);
2137 
2138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
2139 &#32;&#32;&#32;&#32;&#32;&#32;{
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__half&#32;=&#32;__len&#32;/&#32;2;
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__middle&#32;=&#32;__first;
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::advance(__middle,&#32;__half);
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,&#32;__value,&#32;std::__invoke(__proj,&#32;*__middle)))
2144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
2148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2151 &#32;&#32;&#32;&#32;&#32;&#32;}
2152 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2153 &#32;&#32;&#32;&#32;&#32;&#32;}
2154 
2155 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;<emphasis role="keyword">const</emphasis>&#32;_Tp*,
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
2160 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,
2161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2162 &#32;&#32;&#32;&#32;&#32;&#32;{
2163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2165 &#32;&#32;&#32;&#32;&#32;&#32;}
2166 &#32;&#32;};
2167 
2168 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__upper_bound_fn&#32;upper_bound{};
2169 
2170 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__equal_range_fn
2171 &#32;&#32;{
2172 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;const&#32;_Tp*,&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;
2175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter&gt;
2177 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2179 &#32;&#32;&#32;&#32;&#32;&#32;{
2180 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;ranges::distance(__first,&#32;__last);
2181 
2182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
2183 &#32;&#32;&#32;&#32;&#32;&#32;{
2184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__half&#32;=&#32;__len&#32;/&#32;2;
2185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__middle&#32;=&#32;__first;
2186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::advance(__middle,&#32;__half);
2187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__middle),
2189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value))
2190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
2192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
2194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,
2197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__middle)))
2198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__left
2202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::lower_bound(__first,&#32;__middle,
2203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;__comp,&#32;__proj);
2204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::advance(__first,&#32;__len);
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__right
2206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::upper_bound(++__middle,&#32;__first,
2207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;__comp,&#32;__proj);
2208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__left,&#32;__right};
2209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2210 &#32;&#32;&#32;&#32;&#32;&#32;}
2211 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
2212 &#32;&#32;&#32;&#32;&#32;&#32;}
2213 
2214 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,
2215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;<emphasis role="keyword">const</emphasis>&#32;_Tp*,
2217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range&gt;
2220 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
2221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2222 &#32;&#32;&#32;&#32;&#32;&#32;{
2223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2225 &#32;&#32;&#32;&#32;&#32;&#32;}
2226 &#32;&#32;};
2227 
2228 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__equal_range_fn&#32;equal_range{};
2229 
2230 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__binary_search_fn
2231 &#32;&#32;{
2232 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;const&#32;_Tp*,&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2237 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2239 &#32;&#32;&#32;&#32;&#32;&#32;{
2240 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;ranges::lower_bound(__first,&#32;__last,&#32;__value,&#32;__comp,&#32;__proj);
2241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__last)
2242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>)std::__invoke(__comp,&#32;__value,
2244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i));
2245 &#32;&#32;&#32;&#32;&#32;&#32;}
2246 
2247 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,
2248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;<emphasis role="keyword">const</emphasis>&#32;_Tp*,
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2253 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Comp&#32;__comp&#32;=&#32;{},
2254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2255 &#32;&#32;&#32;&#32;&#32;&#32;{
2256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2258 &#32;&#32;&#32;&#32;&#32;&#32;}
2259 &#32;&#32;};
2260 
2261 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__binary_search_fn&#32;binary_search{};
2262 
2263 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_partitioned_fn
2264 &#32;&#32;{
2265 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
2268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2269 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2271 &#32;&#32;&#32;&#32;&#32;&#32;{
2272 &#32;&#32;&#32;&#32;__first&#32;=&#32;ranges::find_if_not(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;__last,
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred,&#32;__proj);
2274 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
2275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2276 &#32;&#32;&#32;&#32;++__first;
2277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::none_of(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),
2278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2279 &#32;&#32;&#32;&#32;&#32;&#32;}
2280 
2281 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
2284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2285 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2286 &#32;&#32;&#32;&#32;&#32;&#32;{
2287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2289 &#32;&#32;&#32;&#32;&#32;&#32;}
2290 &#32;&#32;};
2291 
2292 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__is_partitioned_fn&#32;<link linkend="_namespacestd_1a1437bae2cd332f755a3e88e264a04525">is_partitioned</link>{};
2293 
2294 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__partition_fn
2295 &#32;&#32;{
2296 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;permutable&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
2299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;subrange&lt;_Iter&gt;
2300 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2302 &#32;&#32;&#32;&#32;&#32;&#32;{
2303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(bidirectional_iterator&lt;_Iter&gt;)
2304 &#32;&#32;&#32;&#32;&#32;&#32;{
2305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
2306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__tail&#32;=&#32;__lasti;
2307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
2308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__tail)
2311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first)))
2314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__tail;
2318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
2319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__tail)
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
2321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__pred,
2322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__tail)))
2323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__tail;
2324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first,&#32;__tail);
2327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2329 &#32;&#32;&#32;&#32;&#32;&#32;}
2330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2331 &#32;&#32;&#32;&#32;&#32;&#32;{
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
2334 
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
2336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__first&#32;==&#32;__last)
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,&#32;__first};
2338 
2339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__next&#32;=&#32;__first;
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__next&#32;!=&#32;__last)
2341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__next)))
2342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__first,&#32;__next);
2344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2346 
2347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__next)};
2348 &#32;&#32;&#32;&#32;&#32;&#32;}
2349 &#32;&#32;&#32;&#32;&#32;&#32;}
2350 
2351 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
2354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
2355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_subrange_t&lt;_Range&gt;
2356 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2357 &#32;&#32;&#32;&#32;&#32;&#32;{
2358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2360 &#32;&#32;&#32;&#32;&#32;&#32;}
2361 &#32;&#32;};
2362 
2363 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__partition_fn&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link>{};
2364 
2365 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__stable_partition_fn
2366 &#32;&#32;{
2367 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
2370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;_Iter&gt;
2371 &#32;&#32;&#32;&#32;&#32;&#32;subrange&lt;_Iter&gt;
2372 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2374 &#32;&#32;&#32;&#32;&#32;&#32;{
2375 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
2376 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__middle
2377 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">std::stable_partition</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;__lasti,
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_pred_proj(__pred,&#32;__proj));
2379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti)};
2380 &#32;&#32;&#32;&#32;&#32;&#32;}
2381 
2382 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;bidirectional_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
2385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;permutable&lt;iterator_t&lt;_Range&gt;&gt;
2386 &#32;&#32;&#32;&#32;&#32;&#32;borrowed_subrange_t&lt;_Range&gt;
2387 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2388 &#32;&#32;&#32;&#32;&#32;&#32;{
2389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2391 &#32;&#32;&#32;&#32;&#32;&#32;}
2392 &#32;&#32;};
2393 
2394 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__stable_partition_fn&#32;<link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">stable_partition</link>{};
2395 
2396 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out2&gt;
2397 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>in_out_out_result
2398 &#32;&#32;&#32;&#32;{
2399 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
2400 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Out1&#32;out1;
2401 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Out2&#32;out2;
2402 
2403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OOut1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OOut2&gt;
2404 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_Iter&amp;,&#32;_IIter&gt;
2405 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Out1&amp;,&#32;_OOut1&gt;
2406 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;const&#32;_Out2&amp;,&#32;_OOut2&gt;
2407 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
2408 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_out_out_result&lt;_IIter,&#32;_OOut1,&#32;_OOut2&gt;()&#32;const&#32;&amp;
2409 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;out1,&#32;out2};&#32;}
2410 
2411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OOut1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OOut2&gt;
2412 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;_Iter,&#32;_IIter&gt;
2413 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Out1,&#32;_OOut1&gt;
2414 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;convertible_to&lt;_Out2,&#32;_OOut2&gt;
2415 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
2416 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_out_out_result&lt;_IIter,&#32;_OOut1,&#32;_OOut2&gt;()&#32;&amp;&amp;
2417 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(out1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(out2)};&#32;}
2418 &#32;&#32;&#32;&#32;};
2419 
2420 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out2&gt;
2421 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>partition_copy_result&#32;=&#32;in_out_out_result&lt;_Iter,&#32;_Out1,&#32;_Out2&gt;;
2422 
2423 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__partition_copy_fn
2424 &#32;&#32;{
2425 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out1,&#32;weakly_incrementable&#32;_Out2,
2427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
2429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;_Iter,&#32;_Out1&gt;
2430 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_copyable&lt;_Iter,&#32;_Out2&gt;
2431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;partition_copy_result&lt;_Iter,&#32;_Out1,&#32;_Out2&gt;
2432 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out1&#32;__out_true,&#32;_Out2&#32;__out_false,
2434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2435 &#32;&#32;&#32;&#32;&#32;&#32;{
2436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
2437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__first)))
2438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out_true&#32;=&#32;*__first;
2440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__out_true;
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out_false&#32;=&#32;*__first;
2445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__out_false;
2446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2447 
2448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),
2449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out_true),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out_false)};
2450 &#32;&#32;&#32;&#32;&#32;&#32;}
2451 
2452 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;weakly_incrementable&#32;_Out1,
2453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out2,
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
2457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out1&gt;
2458 &#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_copyable&lt;iterator_t&lt;_Range&gt;,&#32;_Out2&gt;
2459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;partition_copy_result&lt;borrowed_iterator_t&lt;_Range&gt;,&#32;_Out1,&#32;_Out2&gt;
2460 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Out1&#32;__out_true,&#32;_Out2&#32;__out_false,
2461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2462 &#32;&#32;&#32;&#32;&#32;&#32;{
2463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out_true),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__out_false),
2465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2466 &#32;&#32;&#32;&#32;&#32;&#32;}
2467 &#32;&#32;};
2468 
2469 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__partition_copy_fn&#32;<link linkend="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b">partition_copy</link>{};
2470 
2471 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__partition_point_fn
2472 &#32;&#32;{
2473 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;&#32;_Pred&gt;
2476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
2477 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
2478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2479 &#32;&#32;&#32;&#32;&#32;&#32;{
2480 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;ranges::distance(__first,&#32;__last);
2481 
2482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
2483 &#32;&#32;&#32;&#32;&#32;&#32;{
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__half&#32;=&#32;__len&#32;/&#32;2;
2485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__middle&#32;=&#32;__first;
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::advance(__middle,&#32;__half);
2487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__pred,&#32;std::__invoke(__proj,&#32;*__middle)))
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
2491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
2492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
2495 &#32;&#32;&#32;&#32;&#32;&#32;}
2496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2497 &#32;&#32;&#32;&#32;&#32;&#32;}
2498 
2499 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_unary_predicate&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&gt;
2502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
2503 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Pred&#32;__pred,&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2504 &#32;&#32;&#32;&#32;&#32;&#32;{
2505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
2506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__pred),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2507 &#32;&#32;&#32;&#32;&#32;&#32;}
2508 &#32;&#32;};
2509 
2510 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__partition_point_fn&#32;partition_point{};
2511 
2512 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
2513 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>merge_result&#32;=&#32;in_in_out_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;;
2514 
2515 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__merge_fn
2516 &#32;&#32;{
2517 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
2518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
2519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
2521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;_Iter1,&#32;_Iter2,&#32;_Out,&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;merge_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;
2523 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
2524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Out&#32;__result,
2525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2527 &#32;&#32;&#32;&#32;&#32;&#32;{
2528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2529 &#32;&#32;&#32;&#32;&#32;&#32;{
2530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2),
2532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1)))
2533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first2;
2535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
2540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
2543 &#32;&#32;&#32;&#32;&#32;&#32;}
2544 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy1&#32;=&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1),
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
2546 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy2&#32;=&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last2),
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.out));
2548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.in),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy2.in),
2549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy2.out)&#32;};
2550 &#32;&#32;&#32;&#32;&#32;&#32;}
2551 
2552 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,&#32;weakly_incrementable&#32;_Out,
2553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
2555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,&#32;_Out,
2556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;merge_result&lt;borrowed_iterator_t&lt;_Range1&gt;,
2558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range2&gt;,
2559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&gt;
2560 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Out&#32;__result,
2561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2563 &#32;&#32;&#32;&#32;&#32;&#32;{
2564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
2565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
2566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
2567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
2568 &#32;&#32;&#32;&#32;&#32;&#32;}
2569 &#32;&#32;};
2570 
2571 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__merge_fn&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>{};
2572 
2573 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__inplace_merge_fn
2574 &#32;&#32;{
2575 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
2576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
2578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
2579 &#32;&#32;&#32;&#32;&#32;&#32;_Iter
2580 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Iter&#32;__middle,&#32;_Sent&#32;__last,
2581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2582 &#32;&#32;&#32;&#32;&#32;&#32;{
2583 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
2584 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">std::inplace_merge</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),&#32;__lasti,
2585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__make_comp_proj(__comp,&#32;__proj));
2586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lasti;
2587 &#32;&#32;&#32;&#32;&#32;&#32;}
2588 
2589 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;bidirectional_range&#32;_Range,
2590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
2591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
2592 &#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range&gt;
2593 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;iterator_t&lt;_Range&gt;&#32;__middle,
2594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2595 &#32;&#32;&#32;&#32;&#32;&#32;{
2596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__middle),
2597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::end(__r),
2598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2599 &#32;&#32;&#32;&#32;&#32;&#32;}
2600 &#32;&#32;};
2601 
2602 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__inplace_merge_fn&#32;<link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">inplace_merge</link>{};
2603 
2604 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__includes_fn
2605 &#32;&#32;{
2606 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
2607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
2608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
2609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter1,&#32;_Proj1&gt;,
2610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter2,&#32;_Proj2&gt;&gt;
2611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2613 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
2614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,
2615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2617 &#32;&#32;&#32;&#32;&#32;&#32;{
2618 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2),
2621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1)))
2622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
2625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
2626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2632 
2633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2&#32;==&#32;__last2;
2634 &#32;&#32;&#32;&#32;&#32;&#32;}
2635 
2636 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,
2637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range1&gt;,&#32;_Proj1&gt;,
2639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range2&gt;,&#32;_Proj2&gt;&gt;
2640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2642 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Comp&#32;__comp&#32;=&#32;{},
2643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2644 &#32;&#32;&#32;&#32;&#32;&#32;{
2645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
2646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
2647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
2648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
2649 &#32;&#32;&#32;&#32;&#32;&#32;}
2650 &#32;&#32;};
2651 
2652 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__includes_fn&#32;<link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">includes</link>{};
2653 
2654 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
2655 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>set_union_result&#32;=&#32;in_in_out_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;;
2656 
2657 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__set_union_fn
2658 &#32;&#32;{
2659 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
2660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
2661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
2663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;_Iter1,&#32;_Iter2,&#32;_Out,&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_union_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;
2665 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
2666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,
2667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&#32;__result,&#32;_Comp&#32;__comp&#32;=&#32;{},
2668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2669 &#32;&#32;&#32;&#32;&#32;&#32;{
2670 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2671 &#32;&#32;&#32;&#32;&#32;&#32;{
2672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
2674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
2675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
2677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2),
2681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1)))
2682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first2;
2684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
2689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
2693 &#32;&#32;&#32;&#32;&#32;&#32;}
2694 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy1&#32;=&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1),
2695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
2696 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy2&#32;=&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last2),
2697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.out));
2698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.in),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy2.in),
2699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy2.out)};
2700 &#32;&#32;&#32;&#32;&#32;&#32;}
2701 
2702 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,&#32;weakly_incrementable&#32;_Out,
2703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
2705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,&#32;_Out,
2706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_union_result&lt;borrowed_iterator_t&lt;_Range1&gt;,
2708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range2&gt;,&#32;_Out&gt;
2709 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,
2710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&#32;__result,&#32;_Comp&#32;__comp&#32;=&#32;{},
2711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2712 &#32;&#32;&#32;&#32;&#32;&#32;{
2713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
2714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
2715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
2716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
2717 &#32;&#32;&#32;&#32;&#32;&#32;}
2718 &#32;&#32;};
2719 
2720 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__set_union_fn&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>{};
2721 
2722 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
2723 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>set_intersection_result&#32;=&#32;in_in_out_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;;
2724 
2725 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__set_intersection_fn
2726 &#32;&#32;{
2727 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
2728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
2729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
2731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;_Iter1,&#32;_Iter2,&#32;_Out,&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_intersection_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;
2733 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
2734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Out&#32;__result,
2735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2737 &#32;&#32;&#32;&#32;&#32;&#32;{
2738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
2741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
2742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2),
2745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1)))
2746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
2750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
2753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2754 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Eliminating&#32;these&#32;variables&#32;triggers&#32;an&#32;ICE.</emphasis>
2755 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__last1i&#32;=&#32;ranges::next(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1));
2756 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__last2i&#32;=&#32;ranges::next(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last2));
2757 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1i),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last2i),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result)};
2758 &#32;&#32;&#32;&#32;&#32;&#32;}
2759 
2760 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,&#32;weakly_incrementable&#32;_Out,
2761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
2763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,&#32;_Out,
2764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_intersection_result&lt;borrowed_iterator_t&lt;_Range1&gt;,
2766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range2&gt;,&#32;_Out&gt;
2767 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Out&#32;__result,
2768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2770 &#32;&#32;&#32;&#32;&#32;&#32;{
2771 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
2772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
2773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
2774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
2775 &#32;&#32;&#32;&#32;&#32;&#32;}
2776 &#32;&#32;};
2777 
2778 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__set_intersection_fn&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>{};
2779 
2780 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
2781 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>set_difference_result&#32;=&#32;in_out_result&lt;_Iter,&#32;_Out&gt;;
2782 
2783 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__set_difference_fn
2784 &#32;&#32;{
2785 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
2786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
2787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
2789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;_Iter1,&#32;_Iter2,&#32;_Out,&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_difference_result&lt;_Iter1,&#32;_Out&gt;
2791 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
2792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,&#32;_Out&#32;__result,
2793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2795 &#32;&#32;&#32;&#32;&#32;&#32;{
2796 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
2799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
2800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
2802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
2804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2),
2807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1)))
2808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2814 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1),
2815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
2816 &#32;&#32;&#32;&#32;&#32;&#32;}
2817 
2818 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,&#32;weakly_incrementable&#32;_Out,
2819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
2821 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,&#32;_Out,
2822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_difference_result&lt;borrowed_iterator_t&lt;_Range1&gt;,&#32;_Out&gt;
2824 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Out&#32;__result,
2825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2827 &#32;&#32;&#32;&#32;&#32;&#32;{
2828 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
2829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
2832 &#32;&#32;&#32;&#32;&#32;&#32;}
2833 &#32;&#32;};
2834 
2835 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__set_difference_fn&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>{};
2836 
2837 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
2838 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>set_symmetric_difference_result
2839 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;in_in_out_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;;
2840 
2841 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__set_symmetric_difference_fn
2842 &#32;&#32;{
2843 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
2844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
2845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;weakly_incrementable&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
2847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;_Iter1,&#32;_Iter2,&#32;_Out,&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2848 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_symmetric_difference_result&lt;_Iter1,&#32;_Iter2,&#32;_Out&gt;
2849 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
2850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,
2851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&#32;__result,&#32;_Comp&#32;__comp&#32;=&#32;{},
2852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2853 &#32;&#32;&#32;&#32;&#32;&#32;{
2854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
2855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
2857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
2858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first1;
2860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2),
2865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1)))
2866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first2;
2868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
2870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
2874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
2875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2876 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy1&#32;=&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1),
2877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result));
2878 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy2&#32;=&#32;ranges::copy(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last2),
2879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.out));
2880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy1.in),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy2.in),
2881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__copy2.out)};
2882 &#32;&#32;&#32;&#32;&#32;&#32;}
2883 
2884 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,&#32;weakly_incrementable&#32;_Out,
2885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
2886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
2887 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;mergeable&lt;iterator_t&lt;_Range1&gt;,&#32;iterator_t&lt;_Range2&gt;,&#32;_Out,
2888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp,&#32;_Proj1,&#32;_Proj2&gt;
2889 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;set_symmetric_difference_result&lt;borrowed_iterator_t&lt;_Range1&gt;,
2890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrowed_iterator_t&lt;_Range2&gt;,
2891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Out&gt;
2892 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Out&#32;__result,
2893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
2894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2895 &#32;&#32;&#32;&#32;&#32;&#32;{
2896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
2897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
2898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__result),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
2899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
2900 &#32;&#32;&#32;&#32;&#32;&#32;}
2901 &#32;&#32;};
2902 
2903 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__set_symmetric_difference_fn&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>{};
2904 
2905 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__min_fn
2906 &#32;&#32;{
2907 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;const&#32;_Tp*,&#32;_Proj&gt;&gt;
2909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
2911 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b,
2912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2913 &#32;&#32;&#32;&#32;&#32;&#32;{
2914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__b),
2916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__a)))
2917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
2918 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2919 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
2920 &#32;&#32;&#32;&#32;&#32;&#32;}
2921 
2922 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2925 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable_storable&lt;iterator_t&lt;_Range&gt;,
2926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;range_value_t&lt;_Range&gt;*&gt;
2927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;range_value_t&lt;_Range&gt;
2928 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2929 &#32;&#32;&#32;&#32;&#32;&#32;{
2930 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__first&#32;=&#32;ranges::begin(__r);
2931 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__last&#32;=&#32;ranges::end(__r);
2932 &#32;&#32;&#32;&#32;__glibcxx_assert(__first&#32;!=&#32;__last);
2933 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;*__first;
2934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
2935 &#32;&#32;&#32;&#32;&#32;&#32;{
2936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*__first;
2937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),
2939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__result)))
2940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2941 &#32;&#32;&#32;&#32;&#32;&#32;}
2942 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2943 &#32;&#32;&#32;&#32;&#32;&#32;}
2944 
2945 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;copyable&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;const&#32;_Tp*,&#32;_Proj&gt;&gt;
2947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2948 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
2949 &#32;&#32;&#32;&#32;&#32;&#32;operator()(initializer_list&lt;_Tp&gt;&#32;__r,
2950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2951 &#32;&#32;&#32;&#32;&#32;&#32;{
2952 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::subrange(__r),
2953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
2954 &#32;&#32;&#32;&#32;&#32;&#32;}
2955 &#32;&#32;};
2956 
2957 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__min_fn&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>{};
2958 
2959 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__max_fn
2960 &#32;&#32;{
2961 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;const&#32;_Tp*,&#32;_Proj&gt;&gt;
2963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
2965 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b,
2966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2967 &#32;&#32;&#32;&#32;&#32;&#32;{
2968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__a),
2970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__b)))
2971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
2972 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
2974 &#32;&#32;&#32;&#32;&#32;&#32;}
2975 
2976 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
2978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
2979 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable_storable&lt;iterator_t&lt;_Range&gt;,
2980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;range_value_t&lt;_Range&gt;*&gt;
2981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;range_value_t&lt;_Range&gt;
2982 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
2983 &#32;&#32;&#32;&#32;&#32;&#32;{
2984 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__first&#32;=&#32;ranges::begin(__r);
2985 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__last&#32;=&#32;ranges::end(__r);
2986 &#32;&#32;&#32;&#32;__glibcxx_assert(__first&#32;!=&#32;__last);
2987 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;*__first;
2988 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
2989 &#32;&#32;&#32;&#32;&#32;&#32;{
2990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*__first;
2991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
2992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__result),
2993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>)))
2994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
2995 &#32;&#32;&#32;&#32;&#32;&#32;}
2996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2997 &#32;&#32;&#32;&#32;&#32;&#32;}
2998 
2999 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;copyable&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;const&#32;_Tp*,&#32;_Proj&gt;&gt;
3001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3002 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
3003 &#32;&#32;&#32;&#32;&#32;&#32;operator()(initializer_list&lt;_Tp&gt;&#32;__r,
3004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3005 &#32;&#32;&#32;&#32;&#32;&#32;{
3006 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::subrange(__r),
3007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
3008 &#32;&#32;&#32;&#32;&#32;&#32;}
3009 &#32;&#32;};
3010 
3011 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_fn&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>{};
3012 
3013 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__clamp_fn
3014 &#32;&#32;{
3015 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;const&#32;_Tp*,&#32;_Proj&gt;&gt;&#32;_Comp
3017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::less&gt;
3018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
3019 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__lo,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__hi,
3020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3021 &#32;&#32;&#32;&#32;&#32;&#32;{
3022 &#32;&#32;&#32;&#32;__glibcxx_assert(!(std::__invoke(__comp,
3023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__hi),
3024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__lo))));
3025 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__proj_val&#32;=&#32;std::__invoke(__proj,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
3026 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,&#32;__proj_val,&#32;std::__invoke(__proj,&#32;__lo)))
3027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lo;
3028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,&#32;std::__invoke(__proj,&#32;__hi),&#32;__proj_val))
3029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__hi;
3030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3031 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
3032 &#32;&#32;&#32;&#32;&#32;&#32;}
3033 &#32;&#32;};
3034 
3035 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__clamp_fn&#32;<link linkend="_namespaceclamp">clamp</link>{};
3036 
3037 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3038 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>min_max_result
3039 &#32;&#32;&#32;&#32;{
3040 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Tp&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>;
3041 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Tp&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>;
3042 
3043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
3044 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_Tp&amp;,&#32;_Tp2&gt;
3045 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
3046 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;min_max_result&lt;_Tp2&gt;()&#32;const&#32;&amp;
3047 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>,&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>};&#32;}
3048 
3049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
3050 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;_Tp,&#32;_Tp2&gt;
3051 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
3052 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;min_max_result&lt;_Tp2&gt;()&#32;&amp;&amp;
3053 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(max)};&#32;}
3054 &#32;&#32;&#32;&#32;};
3055 
3056 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3057 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>minmax_result&#32;=&#32;min_max_result&lt;_Tp&gt;;
3058 
3059 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__minmax_fn
3060 &#32;&#32;{
3061 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;const&#32;_Tp*,&#32;_Proj&gt;&gt;
3063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;minmax_result&lt;const&#32;_Tp&amp;&gt;
3065 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b,
3066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3067 &#32;&#32;&#32;&#32;&#32;&#32;{
3068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
3069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__b),
3070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;__a)))
3071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__b,&#32;__a};
3072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__a,&#32;__b};
3074 &#32;&#32;&#32;&#32;&#32;&#32;}
3075 
3076 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
3078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;indirectly_copyable_storable&lt;iterator_t&lt;_Range&gt;,&#32;range_value_t&lt;_Range&gt;*&gt;
3080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;minmax_result&lt;range_value_t&lt;_Range&gt;&gt;
3081 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3082 &#32;&#32;&#32;&#32;&#32;&#32;{
3083 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__first&#32;=&#32;ranges::begin(__r);
3084 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__last&#32;=&#32;ranges::end(__r);
3085 &#32;&#32;&#32;&#32;__glibcxx_assert(__first&#32;!=&#32;__last);
3086 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__comp_proj&#32;=&#32;__detail::__make_comp_proj(__comp,&#32;__proj);
3087 &#32;&#32;&#32;&#32;minmax_result&lt;range_value_t&lt;_Range&gt;&gt;&#32;__result&#32;=&#32;{*__first,&#32;__result.min};
3088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__first&#32;==&#32;__last)
3089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3091 &#32;&#32;&#32;&#32;&#32;&#32;{
3092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;At&#32;this&#32;point&#32;__result.min&#32;==&#32;__result.max,&#32;so&#32;a&#32;single</emphasis>
3093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comparison&#32;with&#32;the&#32;next&#32;element&#32;suffices.</emphasis>
3094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;=&#32;*__first;
3095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__result.min))
3096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;std::forward&lt;decltype(__val)&gt;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
3097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;std::forward&lt;decltype(__val)&gt;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
3099 &#32;&#32;&#32;&#32;&#32;&#32;}
3100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
3101 &#32;&#32;&#32;&#32;&#32;&#32;{
3102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;process&#32;two&#32;elements&#32;at&#32;a&#32;time&#32;so&#32;that&#32;we&#32;perform&#32;at&#32;most</emphasis>
3103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1&#32;+&#32;3*(N-2)/2&#32;comparisons&#32;in&#32;total&#32;(each&#32;of&#32;the&#32;(N-2)/2</emphasis>
3104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterations&#32;of&#32;this&#32;loop&#32;performs&#32;three&#32;comparisons).</emphasis>
3105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;range_value_t&lt;_Range&gt;&#32;__val1&#32;=&#32;*__first;
3106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__first&#32;==&#32;__last)
3107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;N&#32;is&#32;odd;&#32;in&#32;this&#32;final&#32;iteration,&#32;we&#32;perform&#32;at&#32;most&#32;two</emphasis>
3109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comparisons,&#32;for&#32;a&#32;total&#32;of&#32;1&#32;+&#32;3*(N-3)/2&#32;+&#32;2&#32;comparisons,</emphasis>
3110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;is&#32;not&#32;more&#32;than&#32;3*N/2,&#32;as&#32;required.</emphasis>
3111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(__val1,&#32;__result.min))
3112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__val1);
3113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(__val1,&#32;__result.max))
3114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__val1);
3115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__val2&#32;=&#32;*__first;
3118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(__val2,&#32;__val1))
3119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(__val1,&#32;__result.min))
3121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__val1);
3122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(__val2,&#32;__result.max))
3123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;std::forward&lt;decltype(__val2)&gt;(__val2);
3124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(__val2,&#32;__result.min))
3128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;std::forward&lt;decltype(__val2)&gt;(__val2);
3129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(__val1,&#32;__result.max))
3130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__val1);
3131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3132 &#32;&#32;&#32;&#32;&#32;&#32;}
3133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3134 &#32;&#32;&#32;&#32;&#32;&#32;}
3135 
3136 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;copyable&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;const&#32;_Tp*,&#32;_Proj&gt;&gt;
3138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;minmax_result&lt;_Tp&gt;
3140 &#32;&#32;&#32;&#32;&#32;&#32;operator()(initializer_list&lt;_Tp&gt;&#32;__r,
3141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3142 &#32;&#32;&#32;&#32;&#32;&#32;{
3143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::subrange(__r),
3144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
3145 &#32;&#32;&#32;&#32;&#32;&#32;}
3146 &#32;&#32;};
3147 
3148 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__minmax_fn&#32;minmax{};
3149 
3150 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__min_element_fn
3151 &#32;&#32;{
3152 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
3153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
3154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
3155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
3157 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
3158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3159 &#32;&#32;&#32;&#32;&#32;&#32;{
3160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
3161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3162 
3163 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__first;
3164 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__i&#32;!=&#32;__last)
3165 &#32;&#32;&#32;&#32;&#32;&#32;{
3166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
3167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i),
3168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first)))
3169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__i;
3170 &#32;&#32;&#32;&#32;&#32;&#32;}
3171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3172 &#32;&#32;&#32;&#32;&#32;&#32;}
3173 
3174 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
3176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
3178 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3179 &#32;&#32;&#32;&#32;&#32;&#32;{
3180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
3181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
3182 &#32;&#32;&#32;&#32;&#32;&#32;}
3183 &#32;&#32;};
3184 
3185 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__min_element_fn&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>{};
3186 
3187 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__max_element_fn
3188 &#32;&#32;{
3189 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
3190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
3191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
3192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Iter
3194 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
3195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3196 &#32;&#32;&#32;&#32;&#32;&#32;{
3197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
3198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3199 
3200 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__first;
3201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__i&#32;!=&#32;__last)
3202 &#32;&#32;&#32;&#32;&#32;&#32;{
3203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
3204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__first),
3205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i)))
3206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__i;
3207 &#32;&#32;&#32;&#32;&#32;&#32;}
3208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3209 &#32;&#32;&#32;&#32;&#32;&#32;}
3210 
3211 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
3213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;borrowed_iterator_t&lt;_Range&gt;
3215 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3216 &#32;&#32;&#32;&#32;&#32;&#32;{
3217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
3218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
3219 &#32;&#32;&#32;&#32;&#32;&#32;}
3220 &#32;&#32;};
3221 
3222 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__max_element_fn&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>{};
3223 
3224 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
3225 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>minmax_element_result&#32;=&#32;min_max_result&lt;_Iter&gt;;
3226 
3227 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__minmax_element_fn
3228 &#32;&#32;{
3229 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
3230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
3231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
3232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;minmax_element_result&lt;_Iter&gt;
3234 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
3235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3236 &#32;&#32;&#32;&#32;&#32;&#32;{
3237 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__comp_proj&#32;=&#32;__detail::__make_comp_proj(__comp,&#32;__proj);
3238 &#32;&#32;&#32;&#32;minmax_element_result&lt;_Iter&gt;&#32;__result&#32;=&#32;{__first,&#32;__first};
3239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last&#32;||&#32;++__first&#32;==&#32;__last)
3240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3242 &#32;&#32;&#32;&#32;&#32;&#32;{
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;At&#32;this&#32;point&#32;__result.min&#32;==&#32;__result.max,&#32;so&#32;a&#32;single</emphasis>
3244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comparison&#32;with&#32;the&#32;next&#32;element&#32;suffices.</emphasis>
3245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(*__first,&#32;*__result.min))
3246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;__first;
3247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;__first;
3249 &#32;&#32;&#32;&#32;&#32;&#32;}
3250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(++__first&#32;!=&#32;__last)
3251 &#32;&#32;&#32;&#32;&#32;&#32;{
3252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;process&#32;two&#32;elements&#32;at&#32;a&#32;time&#32;so&#32;that&#32;we&#32;perform&#32;at&#32;most</emphasis>
3253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1&#32;+&#32;3*(N-2)/2&#32;comparisons&#32;in&#32;total&#32;(each&#32;of&#32;the&#32;(N-2)/2</emphasis>
3254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterations&#32;of&#32;this&#32;loop&#32;performs&#32;three&#32;comparisons).</emphasis>
3255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__prev&#32;=&#32;__first;
3256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++__first&#32;==&#32;__last)
3257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;N&#32;is&#32;odd;&#32;in&#32;this&#32;final&#32;iteration,&#32;we&#32;perform&#32;at&#32;most&#32;two</emphasis>
3259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comparisons,&#32;for&#32;a&#32;total&#32;of&#32;1&#32;+&#32;3*(N-3)/2&#32;+&#32;2&#32;comparisons,</emphasis>
3260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;which&#32;is&#32;not&#32;more&#32;than&#32;3*N/2,&#32;as&#32;required.</emphasis>
3261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(*__prev,&#32;*__result.min))
3262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;__prev;
3263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(*__prev,&#32;*__result.max))
3264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;__prev;
3265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(*__first,&#32;*__prev))
3268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(*__prev,&#32;*__result.min))
3270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;__prev;
3271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(*__first,&#32;*__result.max))
3272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;__first;
3273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp_proj(*__first,&#32;*__result.min))
3277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.min&#32;=&#32;__first;
3278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp_proj(*__prev,&#32;*__result.max))
3279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result.max&#32;=&#32;__prev;
3280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3281 &#32;&#32;&#32;&#32;&#32;&#32;}
3282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3283 &#32;&#32;&#32;&#32;&#32;&#32;}
3284 
3285 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;forward_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range&gt;,&#32;_Proj&gt;&gt;
3287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;minmax_element_result&lt;borrowed_iterator_t&lt;_Range&gt;&gt;
3289 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3290 &#32;&#32;&#32;&#32;&#32;&#32;{
3291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
3292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
3293 &#32;&#32;&#32;&#32;&#32;&#32;}
3294 &#32;&#32;};
3295 
3296 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__minmax_element_fn&#32;<link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">minmax_element</link>{};
3297 
3298 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__lexicographical_compare_fn
3299 &#32;&#32;{
3300 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_iterator&#32;_Iter1,&#32;sentinel_for&lt;_Iter1&gt;&#32;_Sent1,
3301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator&#32;_Iter2,&#32;sentinel_for&lt;_Iter2&gt;&#32;_Sent2,
3302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity,
3303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;_Iter1,&#32;_Proj1&gt;,
3304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_Iter2,&#32;_Proj2&gt;&gt;
3305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3307 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter1&#32;__first1,&#32;_Sent1&#32;__last1,
3308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter2&#32;__first2,&#32;_Sent2&#32;__last2,
3309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},
3310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3311 &#32;&#32;&#32;&#32;&#32;&#32;{
3312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__detail::__is_normal_iterator&lt;_Iter1&gt;
3313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;_Iter1,&#32;_Sent1&gt;)
3314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(__first1.base(),&#32;__last1.base(),
3315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first2),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last2),
3316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
3317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
3318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__detail::__is_normal_iterator&lt;_Iter2&gt;
3319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;_Iter2,&#32;_Sent2&gt;)
3320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last1),
3321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2.base(),&#32;__last2.base(),
3322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
3323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
3324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3325 &#32;&#32;&#32;&#32;&#32;&#32;{
3326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__sized_iters
3327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(sized_sentinel_for&lt;_Sent1,&#32;_Iter1&gt;
3328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sized_sentinel_for&lt;_Sent2,&#32;_Iter2&gt;);
3329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__sized_iters)
3330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValueType1&#32;=&#32;iter_value_t&lt;_Iter1&gt;;
3332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValueType2&#32;=&#32;iter_value_t&lt;_Iter2&gt;;
3333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;condition&#32;is&#32;consistent&#32;with&#32;the&#32;one&#32;in</emphasis>
3334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__lexicographical_compare_aux&#32;in&#32;&lt;bits/stl_algobase.h&gt;.</emphasis>
3335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__use_memcmp
3336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;(__is_memcmp_ordered_with&lt;_ValueType1,&#32;_ValueType2&gt;::__value
3337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__ptr_to_nonvolatile&lt;_Iter1&gt;
3338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__ptr_to_nonvolatile&lt;_Iter2&gt;
3339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(is_same_v&lt;_Comp,&#32;ranges::less&gt;
3340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_same_v&lt;_Comp,&#32;ranges::greater&gt;)
3341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Proj1,&#32;identity&gt;
3342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_Proj2,&#32;identity&gt;);
3343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__use_memcmp)
3344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;__last1&#32;-&#32;__first1;
3346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;__last2&#32;-&#32;__first2;
3347 
3348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;std::min(__d1,&#32;__d2))
3349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__c
3351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__memcmp(__first1,&#32;__first2,&#32;__len);
3352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Comp,&#32;ranges::less&gt;)
3353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&lt;&#32;0)
3355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&gt;&#32;0)
3357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Comp,&#32;ranges::greater&gt;)
3360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&gt;&#32;0)
3362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&lt;&#32;0)
3364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d1&#32;&lt;&#32;__d2;
3368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3370 
3371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
3372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__first2)
3373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
3375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1),
3376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2)))
3377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
3379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj2,&#32;*__first2),
3380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj1,&#32;*__first1)))
3381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1&#32;==&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
3384 &#32;&#32;&#32;&#32;&#32;&#32;}
3385 &#32;&#32;&#32;&#32;&#32;&#32;}
3386 
3387 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;input_range&#32;_Range1,&#32;input_range&#32;_Range2,
3388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
3389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;_Range1&gt;,&#32;_Proj1&gt;,
3390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;iterator_t&lt;_Range2&gt;,&#32;_Proj2&gt;&gt;
3391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;=&#32;ranges::less&gt;
3392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3393 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range1&amp;&amp;&#32;__r1,&#32;_Range2&amp;&amp;&#32;__r2,&#32;_Comp&#32;__comp&#32;=&#32;{},
3394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Proj1&#32;__proj1&#32;=&#32;{},&#32;_Proj2&#32;__proj2&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3395 &#32;&#32;&#32;&#32;&#32;&#32;{
3396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r1),&#32;ranges::end(__r1),
3397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::begin(__r2),&#32;ranges::end(__r2),
3398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),
3399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj1),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj2));
3400 &#32;&#32;&#32;&#32;&#32;&#32;}
3401 
3402 &#32;&#32;<emphasis role="keyword">private</emphasis>:
3403 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref&#32;=&#32;iter_reference_t&lt;_Iter&gt;&gt;
3404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ptr_to_nonvolatile
3405 &#32;&#32;&#32;&#32;=&#32;is_pointer_v&lt;_Iter&gt;&#32;&amp;&amp;&#32;!is_volatile_v&lt;remove_reference_t&lt;_Ref&gt;&gt;;
3406 &#32;&#32;};
3407 
3408 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__lexicographical_compare_fn&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>;
3409 
3410 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
3411 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>in_found_result
3412 &#32;&#32;&#32;&#32;{
3413 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Iter&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
3414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;found;
3415 
3416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
3417 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;const&#32;_Iter&amp;,&#32;_Iter2&gt;
3418 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
3419 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_found_result&lt;_Iter2&gt;()&#32;const&#32;&amp;
3420 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;found};&#32;}
3421 
3422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
3423 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;convertible_to&lt;_Iter,&#32;_Iter2&gt;
3424 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
3425 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;in_found_result&lt;_Iter2&gt;()&#32;&amp;&amp;
3426 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>),&#32;found};&#32;}
3427 &#32;&#32;&#32;&#32;};
3428 
3429 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
3430 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>next_permutation_result&#32;=&#32;in_found_result&lt;_Iter&gt;;
3431 
3432 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__next_permutation_fn
3433 &#32;&#32;{
3434 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
3435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
3436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
3437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;next_permutation_result&lt;_Iter&gt;
3438 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
3439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3440 &#32;&#32;&#32;&#32;&#32;&#32;{
3441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
3442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<emphasis role="keyword">false</emphasis>};
3443 
3444 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__first;
3445 &#32;&#32;&#32;&#32;++__i;
3446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__last)
3447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__i),&#32;<emphasis role="keyword">false</emphasis>};
3448 
3449 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
3450 &#32;&#32;&#32;&#32;__i&#32;=&#32;__lasti;
3451 &#32;&#32;&#32;&#32;--__i;
3452 
3453 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
3454 &#32;&#32;&#32;&#32;&#32;&#32;{
3455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ii&#32;=&#32;__i;
3456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__i;
3457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
3458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i),
3459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__ii)))
3460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__j&#32;=&#32;__lasti;
3462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__comp,
3463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i),
3464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*--__j)))
3465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
3466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__i,&#32;__j);
3467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__ii,&#32;__last);
3468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<emphasis role="keyword">true</emphasis>};
3469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__first)
3471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__first,&#32;__last);
3473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<emphasis role="keyword">false</emphasis>};
3474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3475 &#32;&#32;&#32;&#32;&#32;&#32;}
3476 &#32;&#32;&#32;&#32;&#32;&#32;}
3477 
3478 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;bidirectional_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
3479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
3480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
3481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;next_permutation_result&lt;borrowed_iterator_t&lt;_Range&gt;&gt;
3482 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3483 &#32;&#32;&#32;&#32;&#32;&#32;{
3484 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
3485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
3486 &#32;&#32;&#32;&#32;&#32;&#32;}
3487 &#32;&#32;};
3488 
3489 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__next_permutation_fn&#32;next_permutation{};
3490 
3491 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
3492 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>prev_permutation_result&#32;=&#32;in_found_result&lt;_Iter&gt;;
3493 
3494 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__prev_permutation_fn
3495 &#32;&#32;{
3496 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;b<emphasis role="keywordtype">id</emphasis>irectional_iterator&#32;_Iter,&#32;sentinel_for&lt;_Iter&gt;&#32;_Sent,
3497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<emphasis role="keywordtype">id</emphasis>entity&gt;
3498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;_Iter,&#32;_Comp,&#32;_Proj&gt;
3499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;prev_permutation_result&lt;_Iter&gt;
3500 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Iter&#32;__first,&#32;_Sent&#32;__last,
3501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3502 &#32;&#32;&#32;&#32;&#32;&#32;{
3503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
3504 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<emphasis role="keyword">false</emphasis>};
3505 
3506 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i&#32;=&#32;__first;
3507 &#32;&#32;&#32;&#32;++__i;
3508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__last)
3509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__i),&#32;<emphasis role="keyword">false</emphasis>};
3510 
3511 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lasti&#32;=&#32;ranges::next(__first,&#32;__last);
3512 &#32;&#32;&#32;&#32;__i&#32;=&#32;__lasti;
3513 &#32;&#32;&#32;&#32;--__i;
3514 
3515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
3516 &#32;&#32;&#32;&#32;&#32;&#32;{
3517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ii&#32;=&#32;__i;
3518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__i;
3519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__invoke(__comp,
3520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__ii),
3521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i)))
3522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__j&#32;=&#32;__lasti;
3524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!(<emphasis role="keywordtype">bool</emphasis>)std::__invoke(__comp,
3525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*--__j),
3526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__invoke(__proj,&#32;*__i)))
3527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
3528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::iter_swap(__i,&#32;__j);
3529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__ii,&#32;__last);
3530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<emphasis role="keyword">true</emphasis>};
3531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;__first)
3533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::reverse(__first,&#32;__last);
3535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lasti),&#32;<emphasis role="keyword">false</emphasis>};
3536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3537 &#32;&#32;&#32;&#32;&#32;&#32;}
3538 &#32;&#32;&#32;&#32;&#32;&#32;}
3539 
3540 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;bidirectional_range&#32;_Range,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&#32;=&#32;ranges::less,
3541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
3542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;sortable&lt;iterator_t&lt;_Range&gt;,&#32;_Comp,&#32;_Proj&gt;
3543 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;prev_permutation_result&lt;borrowed_iterator_t&lt;_Range&gt;&gt;
3544 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Range&amp;&amp;&#32;__r,&#32;_Comp&#32;__comp&#32;=&#32;{},&#32;_Proj&#32;__proj&#32;=&#32;{})&#32;<emphasis role="keyword">const</emphasis>
3545 &#32;&#32;&#32;&#32;&#32;&#32;{
3546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)(ranges::begin(__r),&#32;ranges::end(__r),
3547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__comp),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__proj));
3548 &#32;&#32;&#32;&#32;&#32;&#32;}
3549 &#32;&#32;};
3550 
3551 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__prev_permutation_fn&#32;prev_permutation{};
3552 
3553 }&#32;<emphasis role="comment">//&#32;namespace&#32;ranges</emphasis>
3554 
3555 <emphasis role="preprocessor">#define&#32;__cpp_lib_shift&#32;201806L</emphasis>
3556 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
3557 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ForwardIterator
3558 &#32;&#32;&#32;&#32;shift_left(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
3559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type&#32;__n)
3560 &#32;&#32;&#32;&#32;{
3561 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__n&#32;&gt;=&#32;0);
3562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
3563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3564 
3565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mid&#32;=&#32;ranges::next(__first,&#32;__n,&#32;__last);
3566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__mid&#32;==&#32;__last)
3567 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__mid),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first));
3569 &#32;&#32;&#32;&#32;}
3570 
3571 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
3572 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ForwardIterator
3573 &#32;&#32;&#32;&#32;shift_right(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
3574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type&#32;__n)
3575 &#32;&#32;&#32;&#32;{
3576 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__n&#32;&gt;=&#32;0);
3577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
3578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
3579 
3580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat
3581 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::iterator_category;
3582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(derived_from&lt;_Cat,&#32;bidirectional_iterator_tag&gt;)
3583 &#32;&#32;&#32;&#32;{
3584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mid&#32;=&#32;ranges::next(__last,&#32;-__n,&#32;__first);
3585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__mid&#32;==&#32;__first)
3586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3587 
3588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::move_backward(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__mid),
3589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__last));
3590 &#32;&#32;&#32;&#32;}
3591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3592 &#32;&#32;&#32;&#32;{
3593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;ranges::next(__first,&#32;__n,&#32;__last);
3594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;==&#32;__last)
3595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3596 
3597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__dest_head&#32;=&#32;__first,&#32;__dest_tail&#32;=&#32;__result;
3598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__dest_head&#32;!=&#32;__result)
3599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dest_tail&#32;==&#32;__last)
3601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;get&#32;here,&#32;then&#32;we&#32;must&#32;have</emphasis>
3603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;2*n&#32;&gt;=&#32;distance(__first,&#32;__last)</emphasis>
3604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;i.e.&#32;we&#32;are&#32;shifting&#32;out&#32;at&#32;least&#32;half&#32;of&#32;the&#32;range.&#32;&#32;In</emphasis>
3605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;this&#32;case&#32;we&#32;can&#32;safely&#32;perform&#32;the&#32;shift&#32;with&#32;a&#32;single</emphasis>
3606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move.</emphasis>
3607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__dest_head),&#32;__result);
3608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__dest_head;
3611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__dest_tail;
3612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3613 
3614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
3615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;At&#32;the&#32;start&#32;of&#32;each&#32;iteration&#32;of&#32;this&#32;outer&#32;loop,&#32;the&#32;range</emphasis>
3617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[__first,&#32;__result)&#32;contains&#32;those&#32;elements&#32;that&#32;after&#32;shifting</emphasis>
3618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;whole&#32;range&#32;right&#32;by&#32;__n,&#32;should&#32;end&#32;up&#32;in</emphasis>
3619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[__dest_head,&#32;__dest_tail)&#32;in&#32;order.</emphasis>
3620 
3621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;below&#32;inner&#32;loop&#32;swaps&#32;the&#32;elements&#32;of&#32;[__first,&#32;__result)</emphasis>
3622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;[__dest_head,&#32;__dest_tail),&#32;while&#32;simultaneously&#32;shifting</emphasis>
3623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;latter&#32;range&#32;by&#32;__n.</emphasis>
3624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__cursor&#32;=&#32;__first;
3625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__cursor&#32;!=&#32;__result)
3626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__dest_tail&#32;==&#32;__last)
3628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;At&#32;this&#32;point&#32;the&#32;ranges&#32;[__first,&#32;result)&#32;and</emphasis>
3630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[__dest_head,&#32;dest_tail)&#32;are&#32;disjoint,&#32;so&#32;we&#32;can&#32;safely</emphasis>
3631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move&#32;the&#32;remaining&#32;elements.</emphasis>
3632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dest_head&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__cursor,&#32;__result,
3633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__dest_head));
3634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__cursor),
3635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__dest_head));
3636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__cursor,&#32;__dest_head);
3639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__dest_head;
3640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__dest_tail;
3641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__cursor;
3642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3644 &#32;&#32;&#32;&#32;}
3645 &#32;&#32;&#32;&#32;}
3646 
3647 _GLIBCXX_END_NAMESPACE_VERSION
3648 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
3649 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;concepts</emphasis>
3650 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
3651 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_RANGES_ALGO_H</emphasis>
</programlisting></section>
