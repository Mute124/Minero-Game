<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2_raylib_erosion_standalone-main_2raylib_2src_2external_2glfw_2deps_2glad_2vk__platform_8h_source" xml:lang="en-US">
<title>vk_platform.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/RaylibErosionStandalone-main/raylib/src/external/glfw/deps/glad/vk_platform.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;*/</emphasis>
2 <emphasis role="comment">/*&#32;File:&#32;vk_platform.h&#32;*/</emphasis>
3 <emphasis role="comment">/*&#32;*/</emphasis>
4 <emphasis role="comment">/*</emphasis>
5 <emphasis role="comment">**&#32;Copyright&#32;(c)&#32;2014-2017&#32;The&#32;Khronos&#32;Group&#32;Inc.</emphasis>
6 <emphasis role="comment">**</emphasis>
7 <emphasis role="comment">**&#32;Licensed&#32;under&#32;the&#32;Apache&#32;License,&#32;Version&#32;2.0&#32;(the&#32;&quot;License&quot;);</emphasis>
8 <emphasis role="comment">**&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except&#32;in&#32;compliance&#32;with&#32;the&#32;License.</emphasis>
9 <emphasis role="comment">**&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
10 <emphasis role="comment">**</emphasis>
11 <emphasis role="comment">**&#32;&#32;&#32;&#32;&#32;http://www.apache.org/licenses/LICENSE-2.0</emphasis>
12 <emphasis role="comment">**</emphasis>
13 <emphasis role="comment">**&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software</emphasis>
14 <emphasis role="comment">**&#32;distributed&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,</emphasis>
15 <emphasis role="comment">**&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.</emphasis>
16 <emphasis role="comment">**&#32;See&#32;the&#32;License&#32;for&#32;the&#32;specific&#32;language&#32;governing&#32;permissions&#32;and</emphasis>
17 <emphasis role="comment">**&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
18 <emphasis role="comment">*/</emphasis>
19 
20 
21 <emphasis role="preprocessor">#ifndef&#32;VK_PLATFORM_H_</emphasis>
22 <emphasis role="preprocessor">#define&#32;VK_PLATFORM_H_</emphasis>
23 
24 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
25 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>
26 {
27 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__cplusplus&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
28 
29 <emphasis role="comment">/*</emphasis>
30 <emphasis role="comment">***************************************************************************************************</emphasis>
31 <emphasis role="comment">*&#32;&#32;&#32;Platform-specific&#32;directives&#32;and&#32;type&#32;declarations</emphasis>
32 <emphasis role="comment">***************************************************************************************************</emphasis>
33 <emphasis role="comment">*/</emphasis>
34 
35 <emphasis role="comment">/*&#32;Platform-specific&#32;calling&#32;convention&#32;macros.</emphasis>
36 <emphasis role="comment">&#32;*</emphasis>
37 <emphasis role="comment">&#32;*&#32;Platforms&#32;should&#32;define&#32;these&#32;so&#32;that&#32;Vulkan&#32;clients&#32;call&#32;Vulkan&#32;commands</emphasis>
38 <emphasis role="comment">&#32;*&#32;with&#32;the&#32;same&#32;calling&#32;conventions&#32;that&#32;the&#32;Vulkan&#32;implementation&#32;expects.</emphasis>
39 <emphasis role="comment">&#32;*</emphasis>
40 <emphasis role="comment">&#32;*&#32;VKAPI_ATTR&#32;-&#32;Placed&#32;before&#32;the&#32;return&#32;type&#32;in&#32;function&#32;declarations.</emphasis>
41 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Useful&#32;for&#32;C++11&#32;and&#32;GCC/Clang-style&#32;function&#32;attribute&#32;syntax.</emphasis>
42 <emphasis role="comment">&#32;*&#32;VKAPI_CALL&#32;-&#32;Placed&#32;after&#32;the&#32;return&#32;type&#32;in&#32;function&#32;declarations.</emphasis>
43 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Useful&#32;for&#32;MSVC-style&#32;calling&#32;convention&#32;syntax.</emphasis>
44 <emphasis role="comment">&#32;*&#32;VKAPI_PTR&#32;&#32;-&#32;Placed&#32;between&#32;the&#32;&apos;(&apos;&#32;and&#32;&apos;*&apos;&#32;in&#32;function&#32;pointer&#32;types.</emphasis>
45 <emphasis role="comment">&#32;*</emphasis>
46 <emphasis role="comment">&#32;*&#32;Function&#32;declaration:&#32;&#32;VKAPI_ATTR&#32;void&#32;VKAPI_CALL&#32;vkCommand(void);</emphasis>
47 <emphasis role="comment">&#32;*&#32;Function&#32;pointer&#32;type:&#32;typedef&#32;void&#32;(VKAPI_PTR&#32;*PFN_vkCommand)(void);</emphasis>
48 <emphasis role="comment">&#32;*/</emphasis>
49 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
50 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;On&#32;Windows,&#32;Vulkan&#32;commands&#32;use&#32;the&#32;stdcall&#32;convention&#32;*/</emphasis>
51 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_ATTR</emphasis>
52 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_CALL&#32;__stdcall</emphasis>
53 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_PTR&#32;&#32;VKAPI_CALL</emphasis>
54 <emphasis role="preprocessor">#elif&#32;defined(__ANDROID__)&#32;&amp;&amp;&#32;defined(__ARM_ARCH)&#32;&amp;&amp;&#32;__ARM_ARCH&#32;&lt;&#32;7</emphasis>
55 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#error&#32;&quot;Vulkan&#32;isn&apos;t&#32;supported&#32;for&#32;the&#32;&apos;armeabi&apos;&#32;NDK&#32;ABI&quot;</emphasis>
56 <emphasis role="preprocessor">#elif&#32;defined(__ANDROID__)&#32;&amp;&amp;&#32;defined(__ARM_ARCH)&#32;&amp;&amp;&#32;__ARM_ARCH&#32;&gt;=&#32;7&#32;&amp;&amp;&#32;defined(__ARM_32BIT_STATE)</emphasis>
57 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;On&#32;Android&#32;32-bit&#32;ARM&#32;targets,&#32;Vulkan&#32;functions&#32;use&#32;the&#32;&quot;hardfloat&quot;&#32;*/</emphasis>
58 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;calling&#32;convention,&#32;i.e.&#32;float&#32;parameters&#32;are&#32;passed&#32;in&#32;registers.&#32;This&#32;*/</emphasis>
59 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is&#32;true&#32;even&#32;if&#32;the&#32;rest&#32;of&#32;the&#32;application&#32;passes&#32;floats&#32;on&#32;the&#32;stack,&#32;*/</emphasis>
60 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;as&#32;it&#32;does&#32;by&#32;default&#32;when&#32;compiling&#32;for&#32;the&#32;armeabi-v7a&#32;NDK&#32;ABI.&#32;*/</emphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_ATTR&#32;__attribute__((pcs(&quot;aapcs-vfp&quot;)))</emphasis>
62 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_CALL</emphasis>
63 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_PTR&#32;&#32;VKAPI_ATTR</emphasis>
64 <emphasis role="preprocessor">#else</emphasis>
65 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;On&#32;other&#32;platforms,&#32;use&#32;the&#32;default&#32;calling&#32;convention&#32;*/</emphasis>
66 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_ATTR</emphasis>
67 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_CALL</emphasis>
68 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VKAPI_PTR</emphasis>
69 <emphasis role="preprocessor">#endif</emphasis>
70 
71 <emphasis role="preprocessor">#include&#32;&lt;stddef.h&gt;</emphasis>
72 
73 <emphasis role="preprocessor">#if&#32;!defined(VK_NO_STDINT_H)</emphasis>
74 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;(_MSC_VER&#32;&lt;&#32;1600)</emphasis>
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;&#32;&#32;__int8&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aef44329758059c91c76d334e8fc09700">int8_t</link>;
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int8&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>;
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;&#32;&#32;__int16&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a269259c924dce846340ddbb810db2e3c">int16_t</link>;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int16&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>;
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;&#32;&#32;__int32&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link>;
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int32&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>;
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;&#32;&#32;__int64&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>;
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int64&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>;
83 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
84 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#include&#32;&lt;stdint.h&gt;</emphasis>
85 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
86 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;!defined(VK_NO_STDINT_H)&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
87 
88 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
89 }&#32;<emphasis role="comment">/*&#32;extern&#32;&quot;C&quot;&#32;*/</emphasis>
90 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__cplusplus&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
91 
92 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
