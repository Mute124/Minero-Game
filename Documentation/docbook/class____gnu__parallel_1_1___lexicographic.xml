<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__parallel_1_1___lexicographic" xml:lang="en-US">
<title>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt; Class Template Reference</title>
<indexterm><primary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</primary></indexterm>
<para>

<para>Compare __a pair of types lexicographically, ascending. </para>
 
</para>
<para>
<computeroutput>#include &lt;multiseq_selection.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__parallel_1_1___lexicographic__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__parallel_1_1___lexicographic__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__parallel_1_1___lexicographic_1a817d3d5fce2ae6352e239310ab0b8333">_Lexicographic</link> (_Compare &amp;__comp)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__parallel_1_1___lexicographic_1aa60a1ad0f152e8351f8297a7e3c63a51">operator()</link> (const std::pair&lt; _T1, _T2 &gt; &amp;__p1, const std::pair&lt; _T1, _T2 &gt; &amp;__p2) const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__parallel_1_1___lexicographic_1a817d3d5fce2ae6352e239310ab0b8333">_Lexicographic</link> (_Compare &amp;__comp)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__parallel_1_1___lexicographic_1aa60a1ad0f152e8351f8297a7e3c63a51">operator()</link> (const std::pair&lt; _T1, _T2 &gt; &amp;__p1, const std::pair&lt; _T1, _T2 &gt; &amp;__p2) const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__parallel_1_1___lexicographic_1a817d3d5fce2ae6352e239310ab0b8333">_Lexicographic</link> (_Compare &amp;__comp)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__parallel_1_1___lexicographic_1aa60a1ad0f152e8351f8297a7e3c63a51">operator()</link> (const std::pair&lt; _T1, _T2 &gt; &amp;__p1, const std::pair&lt; _T1, _T2 &gt; &amp;__p2) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename _T1, typename _T2, typename _Compare&gt;<?linebreak?>class __gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</title></simplesect>

<para>Compare __a pair of types lexicographically, ascending. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__parallel_1_1___lexicographic_1a817d3d5fce2ae6352e239310ab0b8333"/><section>
    <title>_Lexicographic()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_Lexicographic</primary><secondary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</primary><secondary>_Lexicographic</secondary></indexterm>
<computeroutput>template&lt;typename _T1 , typename _T2 , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__parallel_1_1___lexicographic">__gnu_parallel::_Lexicographic</link>&lt; _T1, _T2, _Compare &gt;::_Lexicographic (_Compare &amp; __comp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1___lexicographic_1a817d3d5fce2ae6352e239310ab0b8333"/><section>
    <title>_Lexicographic()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_Lexicographic</primary><secondary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</primary><secondary>_Lexicographic</secondary></indexterm>
<computeroutput>template&lt;typename _T1 , typename _T2 , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__parallel_1_1___lexicographic">__gnu_parallel::_Lexicographic</link>&lt; _T1, _T2, _Compare &gt;::_Lexicographic (_Compare &amp; __comp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1___lexicographic_1a817d3d5fce2ae6352e239310ab0b8333"/><section>
    <title>_Lexicographic()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_Lexicographic</primary><secondary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</primary><secondary>_Lexicographic</secondary></indexterm>
<computeroutput>template&lt;typename _T1 , typename _T2 , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__parallel_1_1___lexicographic">__gnu_parallel::_Lexicographic</link>&lt; _T1, _T2, _Compare &gt;::_Lexicographic (_Compare &amp; __comp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__parallel_1_1___lexicographic_1aa60a1ad0f152e8351f8297a7e3c63a51"/><section>
    <title>operator()()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _T1 , typename _T2 , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__parallel_1_1___lexicographic">__gnu_parallel::_Lexicographic</link>&lt; _T1, _T2, _Compare &gt;::operator() (const std::pair&lt; _T1, _T2 &gt; &amp; __p1, const std::pair&lt; _T1, _T2 &gt; &amp; __p2) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1___lexicographic_1aa60a1ad0f152e8351f8297a7e3c63a51"/><section>
    <title>operator()()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _T1 , typename _T2 , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__parallel_1_1___lexicographic">__gnu_parallel::_Lexicographic</link>&lt; _T1, _T2, _Compare &gt;::operator() (const std::pair&lt; _T1, _T2 &gt; &amp; __p1, const std::pair&lt; _T1, _T2 &gt; &amp; __p2) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__parallel_1_1___lexicographic_1aa60a1ad0f152e8351f8297a7e3c63a51"/><section>
    <title>operator()()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</secondary></indexterm>
<indexterm><primary>__gnu_parallel::_Lexicographic&lt; _T1, _T2, _Compare &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _T1 , typename _T2 , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__parallel_1_1___lexicographic">__gnu_parallel::_Lexicographic</link>&lt; _T1, _T2, _Compare &gt;::operator() (const std::pair&lt; _T1, _T2 &gt; &amp; __p1, const std::pair&lt; _T1, _T2 &gt; &amp; __p2) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h">multiseq_selection.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/<link linkend="_lib_2include_2c_09_09_2parallel_2multiseq__selection_8h">multiseq_selection.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/parallel/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2parallel_2multiseq__selection_8h">multiseq_selection.h</link></section>
</section>
