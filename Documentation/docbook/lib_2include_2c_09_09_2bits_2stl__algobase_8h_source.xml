<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__algobase_8h_source" xml:lang="en-US">
<title>stl_algobase.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_algobase.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Core&#32;algorithmic&#32;facilities&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1998</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_ALGOBASE_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_ALGOBASE_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;bits/cpp_type_traits.h&gt;</emphasis>
62 <emphasis role="preprocessor">#include&#32;&lt;ext/type_traits.h&gt;</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;ext/numeric_traits.h&gt;</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_pair.h&gt;</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
66 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_funcs.h&gt;</emphasis>
67 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator.h&gt;</emphasis>
68 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
69 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
70 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;For&#32;std::swap</emphasis>
71 <emphasis role="preprocessor">#include&#32;&lt;bits/predefined_ops.h&gt;</emphasis>
72 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
73 <emphasis role="preprocessor">#&#32;include&#32;&lt;type_traits&gt;</emphasis>
74 <emphasis role="preprocessor">#endif</emphasis>
75 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
76 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
77 <emphasis role="preprocessor">#endif</emphasis>
78 
79 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
80 {
81 _GLIBCXX_BEGIN_NAMESPACE_VERSION
82 
83 &#32;&#32;<emphasis role="comment">/*</emphasis>
84 <emphasis role="comment">&#32;&#32;&#32;*&#32;A&#32;constexpr&#32;wrapper&#32;for&#32;__builtin_memcmp.</emphasis>
85 <emphasis role="comment">&#32;&#32;&#32;*&#32;@param&#32;__num&#32;The&#32;number&#32;of&#32;elements&#32;of&#32;type&#32;_Tp&#32;(not&#32;bytes).</emphasis>
86 <emphasis role="comment">&#32;&#32;&#32;*/</emphasis>
87 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
88 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
90 &#32;&#32;&#32;&#32;__memcmp(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__first1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__first2,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__num)
91 &#32;&#32;&#32;&#32;{
92 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Up),&#32;<emphasis role="stringliteral">&quot;can&#32;be&#32;compared&#32;with&#32;memcmp&quot;</emphasis>);
94 <emphasis role="preprocessor">#endif</emphasis>
95 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
97 &#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(;&#32;__num&#32;&gt;&#32;0;&#32;++__first1,&#32;++__first2,&#32;--__num)
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__first1&#32;!=&#32;*__first2)
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__first1&#32;&lt;&#32;*__first2&#32;?&#32;-1&#32;:&#32;1;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
102 &#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
104 <emphasis role="preprocessor">#endif</emphasis>
105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_memcmp(__first1,&#32;__first2,&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__num);
106 &#32;&#32;&#32;&#32;}
107 
108 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
109 &#32;&#32;<emphasis role="comment">//&#32;See&#32;http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html:&#32;in&#32;a</emphasis>
110 &#32;&#32;<emphasis role="comment">//&#32;nutshell,&#32;we&#32;are&#32;partially&#32;implementing&#32;the&#32;resolution&#32;of&#32;DR&#32;187,</emphasis>
111 &#32;&#32;<emphasis role="comment">//&#32;when&#32;it&apos;s&#32;safe,&#32;i.e.,&#32;the&#32;value_types&#32;are&#32;equal.</emphasis>
112 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_BoolType&gt;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iter_swap
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
117 &#32;&#32;&#32;&#32;iter_swap(_ForwardIterator1&#32;__a,&#32;_ForwardIterator2&#32;__b)
118 &#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType1;
121 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType1&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*__a;
122 &#32;&#32;&#32;&#32;&#32;&#32;*__a&#32;=&#32;*__b;
123 &#32;&#32;&#32;&#32;&#32;&#32;*__b&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
124 &#32;&#32;&#32;&#32;}
125 &#32;&#32;&#32;&#32;};
126 
127 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iter_swap&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
129 &#32;&#32;&#32;&#32;{
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2&gt;
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
132 &#32;&#32;&#32;&#32;iter_swap(_ForwardIterator1&#32;__a,&#32;_ForwardIterator2&#32;__b)
133 &#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;swap(*__a,&#32;*__b);
135 &#32;&#32;&#32;&#32;}
136 &#32;&#32;&#32;&#32;};
137 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++03</emphasis>
138 
149 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2&gt;
150 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
151 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
152 &#32;&#32;&#32;&#32;iter_swap(_ForwardIterator1&#32;__a,&#32;_ForwardIterator2&#32;__b)
153 &#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator1&gt;)
157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&gt;)
159 
160 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type
162 &#32;&#32;&#32;&#32;_ValueType1;
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::value_type
164 &#32;&#32;&#32;&#32;_ValueType2;
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_ValueType1,
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType2&gt;)
168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_ValueType2,
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType1&gt;)
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::reference
172 &#32;&#32;&#32;&#32;_ReferenceType1;
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::reference
174 &#32;&#32;&#32;&#32;_ReferenceType2;
175 &#32;&#32;&#32;&#32;&#32;&#32;std::__iter_swap&lt;__are_same&lt;_ValueType1,&#32;_ValueType2&gt;::__value
176 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__are_same&lt;_ValueType1&amp;,&#32;_ReferenceType1&gt;::__value
177 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__are_same&lt;_ValueType2&amp;,&#32;_ReferenceType2&gt;::__value&gt;::
178 &#32;&#32;&#32;&#32;iter_swap(__a,&#32;__b);
179 <emphasis role="preprocessor">#else</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;187.&#32;iter_swap&#32;underspecified</emphasis>
182 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(*__a,&#32;*__b);
183 <emphasis role="preprocessor">#endif</emphasis>
184 &#32;&#32;&#32;&#32;}
185 
198 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2&gt;
199 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
200 &#32;&#32;&#32;&#32;_ForwardIterator2
201 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200">swap_ranges</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2)
203 &#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator1&gt;)
207 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&gt;)
209 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
210 
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
212 &#32;&#32;&#32;&#32;std::iter_swap(__first1,&#32;__first2);
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2;
214 &#32;&#32;&#32;&#32;}
215 
227 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
228 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
230 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b)
231 &#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
233 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;_Tp&gt;)
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;__b&#32;&lt;&#32;__a&#32;?&#32;__b&#32;:&#32;__a;</emphasis>
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b&#32;&lt;&#32;__a)
236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
238 &#32;&#32;&#32;&#32;}
239 
251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
252 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
254 &#32;&#32;&#32;&#32;max(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b)
255 &#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
257 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanComparableConcept&lt;_Tp&gt;)
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;&#32;__a&#32;&lt;&#32;__b&#32;?&#32;__b&#32;:&#32;__a;</emphasis>
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a&#32;&lt;&#32;__b)
260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
262 &#32;&#32;&#32;&#32;}
263 
275 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
276 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
278 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b,&#32;_Compare&#32;__comp)
279 &#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;__comp(__b,&#32;__a)&#32;?&#32;__b&#32;:&#32;__a;</emphasis>
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__b,&#32;__a))
282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
284 &#32;&#32;&#32;&#32;}
285 
297 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
298 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
299 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
300 &#32;&#32;&#32;&#32;max(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b,&#32;_Compare&#32;__comp)
301 &#32;&#32;&#32;&#32;{
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;__comp(__a,&#32;__b)&#32;?&#32;__b&#32;:&#32;__a;</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__a,&#32;__b))
304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b;
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;
306 &#32;&#32;&#32;&#32;}
307 
308 &#32;&#32;<emphasis role="comment">//&#32;Fallback&#32;implementation&#32;of&#32;the&#32;function&#32;in&#32;bits/stl_iterator.h&#32;used&#32;to</emphasis>
309 &#32;&#32;<emphasis role="comment">//&#32;remove&#32;the&#32;__normal_iterator&#32;wrapper.&#32;See&#32;copy,&#32;fill,&#32;...</emphasis>
310 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
311 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
312 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Iterator
313 &#32;&#32;&#32;&#32;__niter_base(_Iterator&#32;__it)
314 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible&lt;_Iterator&gt;::value)
315 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it;&#32;}
316 
317 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
318 &#32;&#32;&#32;&#32;_Ite
319 &#32;&#32;&#32;&#32;__niter_base(const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag&gt;&amp;);
321 
322 &#32;&#32;<emphasis role="comment">//&#32;Reverse&#32;the&#32;__niter_base&#32;transformation&#32;to&#32;get&#32;a</emphasis>
323 &#32;&#32;<emphasis role="comment">//&#32;__normal_iterator&#32;back&#32;again&#32;(this&#32;assumes&#32;that&#32;__normal_iterator</emphasis>
324 &#32;&#32;<emphasis role="comment">//&#32;is&#32;only&#32;used&#32;to&#32;wrap&#32;random&#32;access&#32;iterators,&#32;like&#32;pointers).</emphasis>
325 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
326 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
327 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_From
328 &#32;&#32;&#32;&#32;__niter_wrap(_From&#32;__from,&#32;_To&#32;__res)
329 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__from&#32;+&#32;(__res&#32;-&#32;std::__niter_base(__from));&#32;}
330 
331 &#32;&#32;<emphasis role="comment">//&#32;No&#32;need&#32;to&#32;wrap,&#32;iterator&#32;already&#32;has&#32;the&#32;right&#32;type.</emphasis>
332 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
333 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
334 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Iterator
335 &#32;&#32;&#32;&#32;__niter_wrap(<emphasis role="keyword">const</emphasis>&#32;_Iterator&amp;,&#32;_Iterator&#32;__res)
336 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res;&#32;}
337 
338 &#32;&#32;<emphasis role="comment">//&#32;All&#32;of&#32;these&#32;auxiliary&#32;structs&#32;serve&#32;two&#32;purposes.&#32;&#32;(1)&#32;Replace</emphasis>
339 &#32;&#32;<emphasis role="comment">//&#32;calls&#32;to&#32;copy&#32;with&#32;memmove&#32;whenever&#32;possible.&#32;&#32;(Memmove,&#32;not&#32;memcpy,</emphasis>
340 &#32;&#32;<emphasis role="comment">//&#32;because&#32;the&#32;input&#32;and&#32;output&#32;ranges&#32;are&#32;permitted&#32;to&#32;overlap.)</emphasis>
341 &#32;&#32;<emphasis role="comment">//&#32;(2)&#32;If&#32;we&apos;re&#32;using&#32;random&#32;access&#32;iterators,&#32;then&#32;write&#32;the&#32;loop&#32;as</emphasis>
342 &#32;&#32;<emphasis role="comment">//&#32;a&#32;for&#32;loop&#32;with&#32;an&#32;explicit&#32;count.</emphasis>
343 
344 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_IsSimple,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
345 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move
346 &#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
348 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
349 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_OI
350 &#32;&#32;&#32;&#32;__copy_m(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
351 &#32;&#32;&#32;&#32;{
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__result,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first)
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
355 &#32;&#32;&#32;&#32;}
356 &#32;&#32;&#32;&#32;};
357 
358 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
359 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
360 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_Category&gt;
361 &#32;&#32;&#32;&#32;{
362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
363 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
364 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_OI
365 &#32;&#32;&#32;&#32;__copy_m(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
366 &#32;&#32;&#32;&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__result,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first)
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
370 &#32;&#32;&#32;&#32;}
371 &#32;&#32;&#32;&#32;};
372 <emphasis role="preprocessor">#endif</emphasis>
373 
374 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;random_access_iterator_tag&gt;
376 &#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
378 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
379 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_OI
380 &#32;&#32;&#32;&#32;__copy_m(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
381 &#32;&#32;&#32;&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II&gt;::difference_type&#32;_Distance;
383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(_Distance&#32;__n&#32;=&#32;__last&#32;-&#32;__first;&#32;__n&#32;&gt;&#32;0;&#32;--__n)
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
390 &#32;&#32;&#32;&#32;}
391 &#32;&#32;&#32;&#32;};
392 
393 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
394 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
395 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;random_access_iterator_tag&gt;
396 &#32;&#32;&#32;&#32;{
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
398 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
399 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_OI
400 &#32;&#32;&#32;&#32;__copy_m(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
401 &#32;&#32;&#32;&#32;{
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II&gt;::difference_type&#32;_Distance;
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(_Distance&#32;__n&#32;=&#32;__last&#32;-&#32;__first;&#32;__n&#32;&gt;&#32;0;&#32;--__n)
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
410 &#32;&#32;&#32;&#32;}
411 &#32;&#32;&#32;&#32;};
412 <emphasis role="preprocessor">#endif</emphasis>
413 
414 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove&gt;
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move&lt;_IsMove,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;random_access_iterator_tag&gt;
416 &#32;&#32;&#32;&#32;{
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
418 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp*
420 &#32;&#32;&#32;&#32;__copy_m(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__last,&#32;_Tp*&#32;__result)
421 &#32;&#32;&#32;&#32;{
422 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__assignable&#32;=&#32;__conditional_t&lt;_IsMove,
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_move_assignable&lt;_Tp&gt;,
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_copy_assignable&lt;_Tp&gt;&gt;;
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trivial&#32;types&#32;can&#32;have&#32;deleted&#32;assignment</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;__assignable::value,&#32;<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;assignable&quot;</emphasis>&#32;);
428 <emphasis role="preprocessor">#endif</emphasis>
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;_Num&#32;=&#32;__last&#32;-&#32;__first;
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Num)
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memmove(__result,&#32;__first,&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Num);
432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;_Num;
433 &#32;&#32;&#32;&#32;}
434 &#32;&#32;&#32;&#32;};
435 
436 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
437 
438 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
439 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Deque_iterator;
440 
441 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Bit_iterator;
442 
443 _GLIBCXX_END_NAMESPACE_CONTAINER
444 
445 &#32;&#32;<emphasis role="comment">//&#32;Helpers&#32;for&#32;streambuf&#32;iterators&#32;(either&#32;istream&#32;or&#32;ostream).</emphasis>
446 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;avoid&#32;including&#32;&lt;iosfwd&gt;,&#32;relatively&#32;large.</emphasis>
447 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
448 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>char_traits;
449 
450 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
451 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>istreambuf_iterator;
452 
453 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ostreambuf_iterator;
455 
456 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;&#32;&gt;::__type
459 &#32;&#32;&#32;&#32;__copy_move_a2(_CharT*,&#32;_CharT*,
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;);
461 
462 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
463 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;&#32;&gt;::__type
465 &#32;&#32;&#32;&#32;__copy_move_a2(<emphasis role="keyword">const</emphasis>&#32;_CharT*,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*,
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;);
467 
468 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
469 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&gt;::__type
471 &#32;&#32;&#32;&#32;__copy_move_a2(istreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;,
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;,&#32;_CharT*);
473 
474 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
475 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;
476 &#32;&#32;&#32;&#32;&#32;&#32;__is_char&lt;_CharT&gt;::__value,
477 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_CharT,&#32;_CharT&amp;,&#32;_CharT*&gt;&#32;&gt;::__type
478 &#32;&#32;&#32;&#32;__copy_move_a2(
479 &#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;,
480 &#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;,
481 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_CharT,&#32;_CharT&amp;,&#32;_CharT*&gt;);
482 
483 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
484 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
485 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OI
486 &#32;&#32;&#32;&#32;__copy_move_a2(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
487 &#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II&gt;::iterator_category&#32;_Category;
489 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move&lt;_IsMove,&#32;false,&#32;_Category&gt;::
492 &#32;&#32;&#32;&#32;&#32;&#32;__copy_m(__first,&#32;__last,&#32;__result);
493 <emphasis role="preprocessor">#endif</emphasis>
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move&lt;_IsMove,&#32;__memcpyable&lt;_OI,&#32;_II&gt;::__value,
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Category&gt;::__copy_m(__first,&#32;__last,&#32;__result);
496 &#32;&#32;&#32;&#32;}
497 
498 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
500 &#32;&#32;&#32;&#32;_OI
501 &#32;&#32;&#32;&#32;__copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Ref,&#32;_Ptr&gt;,
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Ref,&#32;_Ptr&gt;,
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OI);
504 
505 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ITp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IRef,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IPtr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OTp&gt;
507 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_OTp,&#32;_OTp&amp;,&#32;_OTp*&gt;
508 &#32;&#32;&#32;&#32;__copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator&lt;_ITp,&#32;_IRef,&#32;_IPtr&gt;,
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_ITp,&#32;_IRef,&#32;_IPtr&gt;,
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_OTp,&#32;_OTp&amp;,&#32;_OTp*&gt;);
511 
512 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;
514 &#32;&#32;&#32;&#32;&#32;&#32;__is_random_access_iter&lt;_II&gt;::__value,
515 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Tp*&gt;&#32;&gt;::__type
516 &#32;&#32;&#32;&#32;__copy_move_a1(_II,&#32;_II,&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Tp*&gt;);
517 
518 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
519 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
520 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OI
521 &#32;&#32;&#32;&#32;__copy_move_a1(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
522 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_a2&lt;_IsMove&gt;(__first,&#32;__last,&#32;__result);&#32;}
523 
524 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
525 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OI
527 &#32;&#32;&#32;&#32;__copy_move_a(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
528 &#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__niter_wrap(__result,
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__copy_move_a1&lt;_IsMove&gt;(std::__niter_base(__first),
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__last),
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__result)));
533 &#32;&#32;&#32;&#32;}
534 
535 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
537 &#32;&#32;&#32;&#32;_OI
538 &#32;&#32;&#32;&#32;__copy_move_a(const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;,
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;,
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OI);
541 
542 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat&gt;
544 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt;_Ite, _Seq, _Cat&gt;</link>
545 &#32;&#32;&#32;&#32;__copy_move_a(_II,&#32;_II,
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;);
547 
548 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIte,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ISeq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ICat,
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIte,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OSeq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OCat&gt;
551 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">::__gnu_debug::_Safe_iterator&lt;_OIte, _OSeq, _OCat&gt;</link>
552 &#32;&#32;&#32;&#32;__copy_move_a(const&#32;::__gnu_debug::_Safe_iterator&lt;_IIte,&#32;_ISeq,&#32;_ICat&gt;&amp;,
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_IIte,&#32;_ISeq,&#32;_ICat&gt;&amp;,
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_OIte,&#32;_OSeq,&#32;_OCat&gt;&amp;);
555 
556 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
557 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
558 &#32;&#32;&#32;&#32;_OutputIterator
559 &#32;&#32;&#32;&#32;__copy_n_a(_InputIterator&#32;__first,&#32;_Size&#32;__n,&#32;_OutputIterator&#32;__result,
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>)
561 &#32;&#32;&#32;&#32;{
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;0)
563 &#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;*__first;
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--__n&#32;&gt;&#32;0)
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
573 &#32;&#32;&#32;&#32;}
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
575 &#32;&#32;&#32;&#32;}
576 
577 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;
579 &#32;&#32;&#32;&#32;&#32;&#32;__is_char&lt;_CharT&gt;::__value,&#32;_CharT*&gt;::__type
580 &#32;&#32;&#32;&#32;__copy_n_a(istreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;,
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size,&#32;_CharT*,&#32;<emphasis role="keywordtype">bool</emphasis>);
582 
583 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
584 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;
585 &#32;&#32;&#32;&#32;&#32;&#32;__is_char&lt;_CharT&gt;::__value,
586 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_CharT,&#32;_CharT&amp;,&#32;_CharT*&gt;&#32;&gt;::__type
587 &#32;&#32;&#32;&#32;__copy_n_a(istreambuf_iterator&lt;_CharT,&#32;char_traits&lt;_CharT&gt;&#32;&gt;,&#32;_Size,
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_CharT,&#32;_CharT&amp;,&#32;_CharT*&gt;,
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>);
590 
608 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
609 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
610 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OI
611 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
612 &#32;&#32;&#32;&#32;{
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
614 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II&gt;)
615 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OI,
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II&gt;::reference&gt;)
617 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a8242123f4908a0c212008f055e8b49a5">__glibcxx_requires_can_increment_range</link>(__first,&#32;__last,&#32;__result);
618 
619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_a&lt;__is_move_iterator&lt;_II&gt;::__value&gt;
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::__miter_base(__first),&#32;std::__miter_base(__last),&#32;__result);
621 &#32;&#32;&#32;&#32;}
622 
623 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
641 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
642 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
643 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OI
644 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
645 &#32;&#32;&#32;&#32;{
646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
647 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II&gt;)
648 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OI,
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II&gt;::value_type&amp;&amp;&gt;)
650 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a8242123f4908a0c212008f055e8b49a5">__glibcxx_requires_can_increment_range</link>(__first,&#32;__last,&#32;__result);
651 
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_a&lt;true&gt;(std::__miter_base(__first),
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__miter_base(__last),&#32;__result);
654 &#32;&#32;&#32;&#32;}
655 
656 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOVE3(_Tp,&#32;_Up,&#32;_Vp)&#32;std::move(_Tp,&#32;_Up,&#32;_Vp)</emphasis>
657 <emphasis role="preprocessor">#else</emphasis>
658 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOVE3(_Tp,&#32;_Up,&#32;_Vp)&#32;std::copy(_Tp,&#32;_Up,&#32;_Vp)</emphasis>
659 <emphasis role="preprocessor">#endif</emphasis>
660 
661 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_IsSimple,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
662 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move_backward
663 &#32;&#32;&#32;&#32;{
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
665 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
666 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_BI2
667 &#32;&#32;&#32;&#32;__copy_move_b(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
668 &#32;&#32;&#32;&#32;{
669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*--__result&#32;=&#32;*--__last;
671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
672 &#32;&#32;&#32;&#32;}
673 &#32;&#32;&#32;&#32;};
674 
675 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
676 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Category&gt;
677 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move_backward&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_Category&gt;
678 &#32;&#32;&#32;&#32;{
679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
680 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
681 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_BI2
682 &#32;&#32;&#32;&#32;__copy_move_b(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
683 &#32;&#32;&#32;&#32;{
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*--__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*--__last);
686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
687 &#32;&#32;&#32;&#32;}
688 &#32;&#32;&#32;&#32;};
689 <emphasis role="preprocessor">#endif</emphasis>
690 
691 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
692 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move_backward&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;random_access_iterator_tag&gt;
693 &#32;&#32;&#32;&#32;{
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
695 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_BI2
697 &#32;&#32;&#32;&#32;__copy_move_b(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
698 &#32;&#32;&#32;&#32;{
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_BI1&gt;::difference_type
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n)
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*--__result&#32;=&#32;*--__last;
703 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
704 &#32;&#32;&#32;&#32;}
705 &#32;&#32;&#32;&#32;};
706 
707 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
708 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move_backward&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;random_access_iterator_tag&gt;
710 &#32;&#32;&#32;&#32;{
711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
712 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
713 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_BI2
714 &#32;&#32;&#32;&#32;__copy_move_b(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
715 &#32;&#32;&#32;&#32;{
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_BI1&gt;::difference_type
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n)
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*--__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*--__last);
720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
721 &#32;&#32;&#32;&#32;}
722 &#32;&#32;&#32;&#32;};
723 <emphasis role="preprocessor">#endif</emphasis>
724 
725 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove&gt;
726 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__copy_move_backward&lt;_IsMove,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;random_access_iterator_tag&gt;
727 &#32;&#32;&#32;&#32;{
728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
729 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
730 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp*
731 &#32;&#32;&#32;&#32;__copy_move_b(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__last,&#32;_Tp*&#32;__result)
732 &#32;&#32;&#32;&#32;{
733 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__assignable&#32;=&#32;__conditional_t&lt;_IsMove,
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_move_assignable&lt;_Tp&gt;,
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_copy_assignable&lt;_Tp&gt;&gt;;
737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trivial&#32;types&#32;can&#32;have&#32;deleted&#32;assignment</emphasis>
738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;__assignable::value,&#32;<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;assignable&quot;</emphasis>&#32;);
739 <emphasis role="preprocessor">#endif</emphasis>
740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;_Num&#32;=&#32;__last&#32;-&#32;__first;
741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Num)
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memmove(__result&#32;-&#32;_Num,&#32;__first,&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Num);
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;-&#32;_Num;
744 &#32;&#32;&#32;&#32;}
745 &#32;&#32;&#32;&#32;};
746 
747 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
748 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
749 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_BI2
750 &#32;&#32;&#32;&#32;__copy_move_backward_a2(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
751 &#32;&#32;&#32;&#32;{
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_BI1&gt;::iterator_category&#32;_Category;
753 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
755 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_backward&lt;_IsMove,&#32;false,&#32;_Category&gt;::
756 &#32;&#32;&#32;&#32;&#32;&#32;__copy_move_b(__first,&#32;__last,&#32;__result);
757 <emphasis role="preprocessor">#endif</emphasis>
758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_backward&lt;_IsMove,
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__memcpyable&lt;_BI2,&#32;_BI1&gt;::__value,
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Category&gt;::__copy_move_b(__first,
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last,
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result);
763 &#32;&#32;&#32;&#32;}
764 
765 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
766 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
767 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_BI2
768 &#32;&#32;&#32;&#32;__copy_move_backward_a1(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
769 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_backward_a2&lt;_IsMove&gt;(__first,&#32;__last,&#32;__result);&#32;}
770 
771 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
773 &#32;&#32;&#32;&#32;_OI
774 &#32;&#32;&#32;&#32;__copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Ref,&#32;_Ptr&gt;,
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Ref,&#32;_Ptr&gt;,
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OI);
777 
778 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ITp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IRef,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IPtr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OTp&gt;
780 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_OTp,&#32;_OTp&amp;,&#32;_OTp*&gt;
781 &#32;&#32;&#32;&#32;__copy_move_backward_a1(
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_ITp,&#32;_IRef,&#32;_IPtr&gt;,
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_ITp,&#32;_IRef,&#32;_IPtr&gt;,
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_OTp,&#32;_OTp&amp;,&#32;_OTp*&gt;);
785 
786 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
787 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;
788 &#32;&#32;&#32;&#32;&#32;&#32;__is_random_access_iter&lt;_II&gt;::__value,
789 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Tp*&gt;&#32;&gt;::__type
790 &#32;&#32;&#32;&#32;__copy_move_backward_a1(_II,&#32;_II,
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Tp*&gt;);
792 
793 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
794 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
795 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OI
796 &#32;&#32;&#32;&#32;__copy_move_backward_a(_II&#32;__first,&#32;_II&#32;__last,&#32;_OI&#32;__result)
797 &#32;&#32;&#32;&#32;{
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__niter_wrap(__result,
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__copy_move_backward_a1&lt;_IsMove&gt;
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::__niter_base(__first),&#32;std::__niter_base(__last),
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__result)));
802 &#32;&#32;&#32;&#32;}
803 
804 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OI&gt;
806 &#32;&#32;&#32;&#32;_OI
807 &#32;&#32;&#32;&#32;__copy_move_backward_a(
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;,
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;,
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OI);
811 
812 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat&gt;
814 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt;_Ite, _Seq, _Cat&gt;</link>
815 &#32;&#32;&#32;&#32;__copy_move_backward_a(_II,&#32;_II,
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;);
817 
818 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIte,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ISeq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ICat,
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OIte,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OSeq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OCat&gt;
821 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">::__gnu_debug::_Safe_iterator&lt;_OIte, _OSeq, _OCat&gt;</link>
822 &#32;&#32;&#32;&#32;__copy_move_backward_a(
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_IIte,&#32;_ISeq,&#32;_ICat&gt;&amp;,
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_IIte,&#32;_ISeq,&#32;_ICat&gt;&amp;,
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_OIte,&#32;_OSeq,&#32;_OCat&gt;&amp;);
826 
845 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
846 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_BI2
848 &#32;&#32;&#32;&#32;copy_backward(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
849 &#32;&#32;&#32;&#32;{
850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
851 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;_BI1&gt;)
852 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_BidirectionalIteratorConcept&lt;_BI2&gt;)
853 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_BI2,
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_BI1&gt;::reference&gt;)
855 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a425cc6801001e95b92c3788adb476114">__glibcxx_requires_can_decrement_range</link>(__first,&#32;__last,&#32;__result);
856 
857 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_backward_a&lt;__is_move_iterator&lt;_BI1&gt;::__value&gt;
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::__miter_base(__first),&#32;std::__miter_base(__last),&#32;__result);
859 &#32;&#32;&#32;&#32;}
860 
861 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
880 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BI2&gt;
881 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
882 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_BI2
883 &#32;&#32;&#32;&#32;move_backward(_BI1&#32;__first,&#32;_BI1&#32;__last,&#32;_BI2&#32;__result)
884 &#32;&#32;&#32;&#32;{
885 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
886 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_BidirectionalIteratorConcept&lt;_BI1&gt;)
887 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_BidirectionalIteratorConcept&lt;_BI2&gt;)
888 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_BI2,
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_BI1&gt;::value_type&amp;&amp;&gt;)
890 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a425cc6801001e95b92c3788adb476114">__glibcxx_requires_can_decrement_range</link>(__first,&#32;__last,&#32;__result);
891 
892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__copy_move_backward_a&lt;true&gt;(std::__miter_base(__first),
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__miter_base(__last),
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result);
895 &#32;&#32;&#32;&#32;}
896 
897 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOVE_BACKWARD3(_Tp,&#32;_Up,&#32;_Vp)&#32;std::move_backward(_Tp,&#32;_Up,&#32;_Vp)</emphasis>
898 <emphasis role="preprocessor">#else</emphasis>
899 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOVE_BACKWARD3(_Tp,&#32;_Up,&#32;_Vp)&#32;std::copy_backward(_Tp,&#32;_Up,&#32;_Vp)</emphasis>
900 <emphasis role="preprocessor">#endif</emphasis>
901 
902 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
903 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
904 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
905 &#32;&#32;&#32;&#32;__gnu_cxx::__enable_if&lt;!__is_scalar&lt;_Tp&gt;::__value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::__type
906 &#32;&#32;&#32;&#32;__fill_a1(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
908 &#32;&#32;&#32;&#32;{
909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
910 &#32;&#32;&#32;&#32;*__first&#32;=&#32;__value;
911 &#32;&#32;&#32;&#32;}
912 
913 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
914 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
915 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
916 &#32;&#32;&#32;&#32;__gnu_cxx::__enable_if&lt;__is_scalar&lt;_Tp&gt;::__value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::__type
917 &#32;&#32;&#32;&#32;__fill_a1(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
919 &#32;&#32;&#32;&#32;{
920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__value;
921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
922 &#32;&#32;&#32;&#32;*__first&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
923 &#32;&#32;&#32;&#32;}
924 
925 &#32;&#32;<emphasis role="comment">//&#32;Specialization:&#32;for&#32;char&#32;types&#32;we&#32;can&#32;use&#32;memset.</emphasis>
926 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
927 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
928 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
929 &#32;&#32;&#32;&#32;__gnu_cxx::__enable_if&lt;__is_byte&lt;_Tp&gt;::__value,&#32;<emphasis role="keywordtype">void</emphasis>&gt;::__type
930 &#32;&#32;&#32;&#32;__fill_a1(_Tp*&#32;__first,&#32;_Tp*&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__c)
931 &#32;&#32;&#32;&#32;{
932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__c;
933 <emphasis role="preprocessor">#if&#32;__cpp_lib_is_constant_evaluated</emphasis>
934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
935 &#32;&#32;&#32;&#32;{
936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__first&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
939 &#32;&#32;&#32;&#32;}
940 <emphasis role="preprocessor">#endif</emphasis>
941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len&#32;=&#32;__last&#32;-&#32;__first)
942 &#32;&#32;&#32;&#32;__builtin_memset(__first,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),&#32;__len);
943 &#32;&#32;&#32;&#32;}
944 
945 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cont,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
946 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
947 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
948 &#32;&#32;&#32;&#32;__fill_a1(::__gnu_cxx::__normal_iterator&lt;_Ite,&#32;_Cont&gt;&#32;__first,
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::__gnu_cxx::__normal_iterator&lt;_Ite,&#32;_Cont&gt;&#32;__last,
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
951 &#32;&#32;&#32;&#32;{&#32;std::__fill_a1(__first.base(),&#32;__last.base(),&#32;__value);&#32;}
952 
953 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_VTp&gt;
954 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
955 &#32;&#32;&#32;&#32;__fill_a1(<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Tp*&gt;&amp;,
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Tp&amp;,&#32;_Tp*&gt;&amp;,
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_VTp&amp;);
958 
959 &#32;&#32;_GLIBCXX20_CONSTEXPR
960 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
961 &#32;&#32;__fill_a1(_GLIBCXX_STD_C::_Bit_iterator,&#32;_GLIBCXX_STD_C::_Bit_iterator,
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&amp;);
963 
964 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIte,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
965 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
966 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
967 &#32;&#32;&#32;&#32;__fill_a(_FIte&#32;__first,&#32;_FIte&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
968 &#32;&#32;&#32;&#32;{&#32;std::__fill_a1(__first,&#32;__last,&#32;__value);&#32;}
969 
970 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
971 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
972 &#32;&#32;&#32;&#32;__fill_a(const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;,
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;,
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;);
975 
988 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
989 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
990 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
991 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">fill</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
992 &#32;&#32;&#32;&#32;{
993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
994 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_Mutable_ForwardIteratorConcept&lt;
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&gt;)
996 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
997 
998 &#32;&#32;&#32;&#32;&#32;&#32;std::__fill_a(__first,&#32;__last,&#32;__value);
999 &#32;&#32;&#32;&#32;}
1000 
1001 &#32;&#32;<emphasis role="comment">//&#32;Used&#32;by&#32;fill_n,&#32;generate_n,&#32;etc.&#32;to&#32;convert&#32;_Size&#32;to&#32;an&#32;integral&#32;type:</emphasis>
1002 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
1003 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">int</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1004 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>
1005 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">unsigned</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1006 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>
1007 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">long</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1008 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1009 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1010 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1011 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1012 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1013 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1014 
1015 <emphasis role="preprocessor">#if&#32;defined(__GLIBCXX_TYPE_INT_N_0)</emphasis>
1016 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;__GLIBCXX_TYPE_INT_N_0
1017 &#32;&#32;__size_to_integer(__GLIBCXX_TYPE_INT_N_0&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1018 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_0
1019 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_0&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1020 <emphasis role="preprocessor">#endif</emphasis>
1021 <emphasis role="preprocessor">#if&#32;defined(__GLIBCXX_TYPE_INT_N_1)</emphasis>
1022 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;__GLIBCXX_TYPE_INT_N_1
1023 &#32;&#32;__size_to_integer(__GLIBCXX_TYPE_INT_N_1&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1024 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_1
1025 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_1&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1026 <emphasis role="preprocessor">#endif</emphasis>
1027 <emphasis role="preprocessor">#if&#32;defined(__GLIBCXX_TYPE_INT_N_2)</emphasis>
1028 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;__GLIBCXX_TYPE_INT_N_2
1029 &#32;&#32;__size_to_integer(__GLIBCXX_TYPE_INT_N_2&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1030 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_2
1031 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_2&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1032 <emphasis role="preprocessor">#endif</emphasis>
1033 <emphasis role="preprocessor">#if&#32;defined(__GLIBCXX_TYPE_INT_N_3)</emphasis>
1034 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_3
1035 &#32;&#32;__size_to_integer(__GLIBCXX_TYPE_INT_N_3&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1036 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;__GLIBCXX_TYPE_INT_N_3
1037 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">unsigned</emphasis>&#32;__GLIBCXX_TYPE_INT_N_3&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;}
1038 <emphasis role="preprocessor">#endif</emphasis>
1039 
1040 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1041 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">float</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)__n;&#32;}
1042 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1043 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">double</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)__n;&#32;}
1044 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1045 &#32;&#32;__size_to_integer(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)__n;&#32;}
1046 <emphasis role="preprocessor">#if&#32;!defined(__STRICT_ANSI__)&#32;&amp;&amp;&#32;defined(_GLIBCXX_USE_FLOAT128)</emphasis>
1047 &#32;&#32;__extension__&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1048 &#32;&#32;__size_to_integer(__float128&#32;__n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)__n;&#32;}
1049 <emphasis role="preprocessor">#endif</emphasis>
1050 
1051 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1052 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1053 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
1054 &#32;&#32;&#32;&#32;__gnu_cxx::__enable_if&lt;!__is_scalar&lt;_Tp&gt;::__value,&#32;_OutputIterator&gt;::__type
1055 &#32;&#32;&#32;&#32;__fill_n_a1(_OutputIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
1056 &#32;&#32;&#32;&#32;{
1057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__first)
1058 &#32;&#32;&#32;&#32;*__first&#32;=&#32;__value;
1059 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1060 &#32;&#32;&#32;&#32;}
1061 
1062 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1063 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1064 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>
1065 &#32;&#32;&#32;&#32;__gnu_cxx::__enable_if&lt;__is_scalar&lt;_Tp&gt;::__value,&#32;_OutputIterator&gt;::__type
1066 &#32;&#32;&#32;&#32;__fill_n_a1(_OutputIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
1067 &#32;&#32;&#32;&#32;{
1068 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__value;
1069 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__first)
1070 &#32;&#32;&#32;&#32;*__first&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1072 &#32;&#32;&#32;&#32;}
1073 
1074 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ite,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1076 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator">::__gnu_debug::_Safe_iterator&lt;_Ite, _Seq, _Cat&gt;</link>
1077 &#32;&#32;&#32;&#32;__fill_n_a(const&#32;::__gnu_debug::_Safe_iterator&lt;_Ite,&#32;_Seq,&#32;_Cat&gt;&amp;&#32;__first,
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag);
1080 
1081 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1082 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1083 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1084 &#32;&#32;&#32;&#32;__fill_n_a(_OutputIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::output_iterator_tag)
1086 &#32;&#32;&#32;&#32;{
1087 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral&lt;_Size&gt;{},&#32;<emphasis role="stringliteral">&quot;fill_n&#32;must&#32;pass&#32;integral&#32;size&quot;</emphasis>);
1089 <emphasis role="preprocessor">#endif</emphasis>
1090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fill_n_a1(__first,&#32;__n,&#32;__value);
1091 &#32;&#32;&#32;&#32;}
1092 
1093 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1094 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1095 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1096 &#32;&#32;&#32;&#32;__fill_n_a(_OutputIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
1098 &#32;&#32;&#32;&#32;{
1099 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral&lt;_Size&gt;{},&#32;<emphasis role="stringliteral">&quot;fill_n&#32;must&#32;pass&#32;integral&#32;size&quot;</emphasis>);
1101 <emphasis role="preprocessor">#endif</emphasis>
1102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fill_n_a1(__first,&#32;__n,&#32;__value);
1103 &#32;&#32;&#32;&#32;}
1104 
1105 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1106 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1107 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1108 &#32;&#32;&#32;&#32;__fill_n_a(_OutputIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::random_access_iterator_tag)
1110 &#32;&#32;&#32;&#32;{
1111 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral&lt;_Size&gt;{},&#32;<emphasis role="stringliteral">&quot;fill_n&#32;must&#32;pass&#32;integral&#32;size&quot;</emphasis>);
1113 <emphasis role="preprocessor">#endif</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;0)
1115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1116 
1117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a8639cfda67f852ea3b94a64ce0381c00">__glibcxx_requires_can_increment</link>(__first,&#32;__n);
1118 
1119 &#32;&#32;&#32;&#32;&#32;&#32;std::__fill_a(__first,&#32;__first&#32;+&#32;__n,&#32;__value);
1120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__n;
1121 &#32;&#32;&#32;&#32;}
1122 
1137 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1138 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;865.&#32;More&#32;algorithms&#32;that&#32;throw&#32;away&#32;information</emphasis>
1139 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;426.&#32;search_n(),&#32;fill_n(),&#32;and&#32;generate_n()&#32;with&#32;negative&#32;n</emphasis>
1140 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OI,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1141 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1142 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OI
1143 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">fill_n</link>(_OI&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
1144 &#32;&#32;&#32;&#32;{
1145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1146 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_OutputIteratorConcept&lt;_OI,&#32;const&#32;_Tp&amp;&gt;)
1147 
1148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__fill_n_a(__first,&#32;std::__size_to_integer(__n),&#32;__value,
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
1150 &#32;&#32;&#32;&#32;}
1151 
1152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_BoolType&gt;
1153 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__equal
1154 &#32;&#32;&#32;&#32;{
1155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1156 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1157 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1158 &#32;&#32;&#32;&#32;equal(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2)
1159 &#32;&#32;&#32;&#32;{
1160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)&#32;++__first2)
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(*__first1&#32;==&#32;*__first2))
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1164 &#32;&#32;&#32;&#32;}
1165 &#32;&#32;&#32;&#32;};
1166 
1167 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1168 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__equal&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
1169 &#32;&#32;&#32;&#32;{
1170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1171 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1172 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1173 &#32;&#32;&#32;&#32;equal(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__first1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__last1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__first2)
1174 &#32;&#32;&#32;&#32;{
1175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len&#32;=&#32;(__last1&#32;-&#32;__first1))
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!std::__memcmp(__first1,&#32;__first2,&#32;__len);
1177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1178 &#32;&#32;&#32;&#32;}
1179 &#32;&#32;&#32;&#32;};
1180 
1181 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II&gt;
1182 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;
1183 &#32;&#32;&#32;&#32;&#32;&#32;__is_random_access_iter&lt;_II&gt;::__value,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;::__type
1184 &#32;&#32;&#32;&#32;__equal_aux1(_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Ref,&#32;_Ptr&gt;,
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Ref,&#32;_Ptr&gt;,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II);
1187 
1188 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr1,
1189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr2&gt;
1190 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1191 &#32;&#32;&#32;&#32;__equal_aux1(_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp1,&#32;_Ref1,&#32;_Ptr1&gt;,
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp1,&#32;_Ref1,&#32;_Ptr1&gt;,
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp2,&#32;_Ref2,&#32;_Ptr2&gt;);
1194 
1195 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
1196 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;
1197 &#32;&#32;&#32;&#32;&#32;&#32;__is_random_access_iter&lt;_II&gt;::__value,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;::__type
1198 &#32;&#32;&#32;&#32;__equal_aux1(_II,&#32;_II,
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp,&#32;_Ref,&#32;_Ptr&gt;);
1200 
1201 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1202 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1203 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1204 &#32;&#32;&#32;&#32;__equal_aux1(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2)
1205 &#32;&#32;&#32;&#32;{
1206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::value_type&#32;_ValueType1;
1207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__simple&#32;=&#32;((__is_integer&lt;_ValueType1&gt;::__value
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__is_pointer&lt;_ValueType1&gt;::__value)
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__memcmpable&lt;_II1,&#32;_II2&gt;::__value);
1210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__equal&lt;__simple&gt;::equal(__first1,&#32;__last1,&#32;__first2);
1211 &#32;&#32;&#32;&#32;}
1212 
1213 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1214 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1215 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1216 &#32;&#32;&#32;&#32;__equal_aux(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2)
1217 &#32;&#32;&#32;&#32;{
1218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__equal_aux1(std::__niter_base(__first1),
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__last1),
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__first2));
1221 &#32;&#32;&#32;&#32;}
1222 
1223 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1225 &#32;&#32;&#32;&#32;__equal_aux(const&#32;::__gnu_debug::_Safe_iterator&lt;_II1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_II1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II2);
1228 
1229 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat2&gt;
1230 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1231 &#32;&#32;&#32;&#32;__equal_aux(_II1,&#32;_II1,
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_II2,&#32;_Seq2,&#32;_Cat2&gt;&amp;);
1233 
1234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat1,
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat2&gt;
1236 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1237 &#32;&#32;&#32;&#32;__equal_aux(const&#32;::__gnu_debug::_Safe_iterator&lt;_II1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_II1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_II2,&#32;_Seq2,&#32;_Cat2&gt;&amp;);
1240 
1241 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1242 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__lc_rai
1243 &#32;&#32;&#32;&#32;{
1244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1245 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1246 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_II1
1247 &#32;&#32;&#32;&#32;__newlast1(_II1,&#32;_II1&#32;__last1,&#32;_II2,&#32;_II2)
1248 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last1;&#32;}
1249 
1250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II&gt;
1251 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1252 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1253 &#32;&#32;&#32;&#32;__cnd2(_II&#32;__first,&#32;_II&#32;__last)
1254 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;!=&#32;__last;&#32;}
1255 &#32;&#32;&#32;&#32;};
1256 
1257 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1258 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__lc_rai&lt;random_access_iterator_tag,&#32;random_access_iterator_tag&gt;
1259 &#32;&#32;&#32;&#32;{
1260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAI1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAI2&gt;
1261 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1262 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_RAI1
1263 &#32;&#32;&#32;&#32;__newlast1(_RAI1&#32;__first1,&#32;_RAI1&#32;__last1,
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAI2&#32;__first2,&#32;_RAI2&#32;__last2)
1265 &#32;&#32;&#32;&#32;{
1266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAI1&gt;::difference_type
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__diff1&#32;=&#32;__last1&#32;-&#32;__first1;
1268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAI2&gt;::difference_type
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__diff2&#32;=&#32;__last2&#32;-&#32;__first2;
1270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__diff2&#32;&lt;&#32;__diff1&#32;?&#32;__first1&#32;+&#32;__diff2&#32;:&#32;__last1;
1271 &#32;&#32;&#32;&#32;}
1272 
1273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAI&gt;
1274 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
1275 &#32;&#32;&#32;&#32;__cnd2(_RAI,&#32;_RAI)
1276 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
1277 &#32;&#32;&#32;&#32;};
1278 
1279 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1280 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1281 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1282 &#32;&#32;&#32;&#32;__lexicographical_compare_impl(_II1&#32;__first1,&#32;_II1&#32;__last1,
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II2&#32;__first2,&#32;_II2&#32;__last2,
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)
1285 &#32;&#32;&#32;&#32;{
1286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::iterator_category&#32;_Category1;
1287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II2&gt;::iterator_category&#32;_Category2;
1288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::__lc_rai&lt;_Category1,&#32;_Category2&gt;&#32;__rai_type;
1289 
1290 &#32;&#32;&#32;&#32;&#32;&#32;__last1&#32;=&#32;__rai_type::__newlast1(__first1,&#32;__last1,&#32;__first2,&#32;__last2);
1291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__rai_type::__cnd2(__first2,&#32;__last2);
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
1293 &#32;&#32;&#32;&#32;{
1294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first1,&#32;__first2))
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1298 &#32;&#32;&#32;&#32;}
1299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1&#32;==&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
1300 &#32;&#32;&#32;&#32;}
1301 
1302 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_BoolType&gt;
1303 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__lexicographical_compare
1304 &#32;&#32;&#32;&#32;{
1305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1306 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1307 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1308 &#32;&#32;&#32;&#32;__lc(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2,&#32;_II2&#32;__last2)
1309 &#32;&#32;&#32;&#32;{
1310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace____gnu__cxx_1_1____ops_1a0079ef487bb9b6eed21338bd55bd6c82">__gnu_cxx::__ops::__iter_less_iter</link>;
1311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__lexicographical_compare_impl(__first1,&#32;__last1,
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2,
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_less_iter());
1314 &#32;&#32;&#32;&#32;}
1315 
1316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1317 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1318 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1319 &#32;&#32;&#32;&#32;__3way(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2,&#32;_II2&#32;__last2)
1320 &#32;&#32;&#32;&#32;{
1321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1)
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;+1;
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__first1&#32;&lt;&#32;*__first2)
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__first2&#32;&lt;&#32;*__first1)
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;+1;
1329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first1;
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(__first2&#32;==&#32;__last2)&#32;-&#32;1;
1333 &#32;&#32;&#32;&#32;}
1334 &#32;&#32;&#32;&#32;};
1335 
1336 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
1337 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__lexicographical_compare&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
1338 &#32;&#32;&#32;&#32;{
1339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1340 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1341 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1342 &#32;&#32;&#32;&#32;__lc(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__first1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__last1,
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__first2,&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__last2)
1344 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__3way(__first1,&#32;__last1,&#32;__first2,&#32;__last2)&#32;&lt;&#32;0;&#32;}
1345 
1346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1347 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1348 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
1349 &#32;&#32;&#32;&#32;__3way(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__first1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__last1,
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__first2,&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__last2)
1351 &#32;&#32;&#32;&#32;{
1352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len1&#32;=&#32;__last1&#32;-&#32;__first1;
1353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len2&#32;=&#32;__last2&#32;-&#32;__first2;
1354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len&#32;=&#32;std::min(__len1,&#32;__len2))
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__result&#32;=&#32;std::__memcmp(__first1,&#32;__first2,&#32;__len))
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>(__len1&#32;-&#32;__len2);
1358 &#32;&#32;&#32;&#32;}
1359 &#32;&#32;&#32;&#32;};
1360 
1361 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1362 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1363 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1364 &#32;&#32;&#32;&#32;__lexicographical_compare_aux1(_II1&#32;__first1,&#32;_II1&#32;__last1,
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II2&#32;__first2,&#32;_II2&#32;__last2)
1366 &#32;&#32;&#32;&#32;{
1367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::value_type&#32;_ValueType1;
1368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II2&gt;::value_type&#32;_ValueType2;
1369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__simple&#32;=
1370 &#32;&#32;&#32;&#32;(__is_memcmp_ordered_with&lt;_ValueType1,&#32;_ValueType2&gt;::__value
1371 &#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_pointer&lt;_II1&gt;::__value
1372 &#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_pointer&lt;_II2&gt;::__value
1373 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
1374 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;C++20&#32;iterator_traits&lt;volatile&#32;T*&gt;::value_type&#32;is&#32;non-volatile</emphasis>
1375 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;__is_byte&lt;T&gt;&#32;could&#32;be&#32;true,&#32;but&#32;we&#32;can&apos;t&#32;use&#32;memcmp&#32;with</emphasis>
1376 &#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;volatile&#32;data.</emphasis>
1377 &#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_volatile_v&lt;remove_reference_t&lt;iter_reference_t&lt;_II1&gt;&gt;&gt;
1378 &#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_volatile_v&lt;remove_reference_t&lt;iter_reference_t&lt;_II2&gt;&gt;&gt;
1379 <emphasis role="preprocessor">#endif</emphasis>
1380 &#32;&#32;&#32;&#32;&#32;);
1381 
1382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__lexicographical_compare&lt;__simple&gt;::__lc(__first1,&#32;__last1,
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2);
1384 &#32;&#32;&#32;&#32;}
1385 
1386 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr1,
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2&gt;
1388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1389 &#32;&#32;&#32;&#32;__lexicographical_compare_aux1(
1390 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp1,&#32;_Ref1,&#32;_Ptr1&gt;,
1391 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp1,&#32;_Ref1,&#32;_Ptr1&gt;,
1392 &#32;&#32;&#32;&#32;_Tp2*,&#32;_Tp2*);
1393 
1394 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr2&gt;
1396 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1397 &#32;&#32;&#32;&#32;__lexicographical_compare_aux1(_Tp1*,&#32;_Tp1*,
1398 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp2,&#32;_Ref2,&#32;_Ptr2&gt;,
1399 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp2,&#32;_Ref2,&#32;_Ptr2&gt;);
1400 
1401 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr1,
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ref2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr2&gt;
1403 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1404 &#32;&#32;&#32;&#32;__lexicographical_compare_aux1(
1405 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp1,&#32;_Ref1,&#32;_Ptr1&gt;,
1406 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp1,&#32;_Ref1,&#32;_Ptr1&gt;,
1407 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp2,&#32;_Ref2,&#32;_Ptr2&gt;,
1408 &#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_Deque_iterator&lt;_Tp2,&#32;_Ref2,&#32;_Ptr2&gt;);
1409 
1410 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1411 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1412 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1413 &#32;&#32;&#32;&#32;__lexicographical_compare_aux(_II1&#32;__first1,&#32;_II1&#32;__last1,
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II2&#32;__first2,&#32;_II2&#32;__last2)
1415 &#32;&#32;&#32;&#32;{
1416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__lexicographical_compare_aux1(std::__niter_base(__first1),
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__last1),
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__first2),
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__niter_base(__last2));
1420 &#32;&#32;&#32;&#32;}
1421 
1422 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat1,
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1424 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1425 &#32;&#32;&#32;&#32;__lexicographical_compare_aux(
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II2,&#32;_II2);
1429 
1430 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat2&gt;
1432 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1433 &#32;&#32;&#32;&#32;__lexicographical_compare_aux(
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II1,&#32;_II1,
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter2,&#32;_Seq2,&#32;_Cat2&gt;&amp;,
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter2,&#32;_Seq2,&#32;_Cat2&gt;&amp;);
1437 
1438 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat1,
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cat2&gt;
1440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1441 &#32;&#32;&#32;&#32;__lexicographical_compare_aux(
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter1,&#32;_Seq1,&#32;_Cat1&gt;&amp;,
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter2,&#32;_Seq2,&#32;_Cat2&gt;&amp;,
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;::__gnu_debug::_Safe_iterator&lt;_Iter2,&#32;_Seq2,&#32;_Cat2&gt;&amp;);
1446 
1447 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1448 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1449 &#32;&#32;&#32;&#32;_ForwardIterator
1450 &#32;&#32;&#32;&#32;__lower_bound(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_Compare&#32;__comp)
1452 &#32;&#32;&#32;&#32;{
1453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::difference_type
1454 &#32;&#32;&#32;&#32;_DistanceType;
1455 
1456 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__len&#32;=&#32;std::distance(__first,&#32;__last);
1457 
1458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__len&#32;&gt;&#32;0)
1459 &#32;&#32;&#32;&#32;{
1460 &#32;&#32;&#32;&#32;&#32;&#32;_DistanceType&#32;__half&#32;=&#32;__len&#32;&gt;&gt;&#32;1;
1461 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__middle&#32;=&#32;__first;
1462 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__middle,&#32;__half);
1463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__middle,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__middle;
1466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__len&#32;-&#32;__half&#32;-&#32;1;
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__len&#32;=&#32;__half;
1471 &#32;&#32;&#32;&#32;}
1472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
1473 &#32;&#32;&#32;&#32;}
1474 
1486 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1487 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1488 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1489 &#32;&#32;&#32;&#32;lower_bound(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
1491 &#32;&#32;&#32;&#32;{
1492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1493 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator&gt;)
1494 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type,&#32;_Tp&gt;)
1496 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aec059a798cc2e17fd1d5fc382bfd92b7">__glibcxx_requires_partitioned_lower</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1497 
1498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__lower_bound(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a989ca7f3bc9fdf169da0c938214c81bf">__gnu_cxx::__ops::__iter_less_val</link>());
1500 &#32;&#32;&#32;&#32;}
1501 
1503 &#32;&#32;<emphasis role="comment">//&#32;&#32;Precondition:&#32;__n&#32;&gt;&#32;0.</emphasis>
1504 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
1505 &#32;&#32;__lg(<emphasis role="keywordtype">int</emphasis>&#32;__n)
1506 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<emphasis role="keyword">sizeof</emphasis>(int)&#32;*&#32;__CHAR_BIT__&#32;&#32;-&#32;1&#32;-&#32;__builtin_clz(__n);&#32;}
1507 
1508 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>
1509 &#32;&#32;__lg(<emphasis role="keywordtype">unsigned</emphasis>&#32;__n)
1510 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<emphasis role="keyword">sizeof</emphasis>(int)&#32;*&#32;__CHAR_BIT__&#32;&#32;-&#32;1&#32;-&#32;__builtin_clz(__n);&#32;}
1511 
1512 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>
1513 &#32;&#32;__lg(<emphasis role="keywordtype">long</emphasis>&#32;__n)
1514 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<emphasis role="keyword">sizeof</emphasis>(long)&#32;*&#32;__CHAR_BIT__&#32;-&#32;1&#32;-&#32;__builtin_clzl(__n);&#32;}
1515 
1516 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1517 &#32;&#32;__lg(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__n)
1518 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<emphasis role="keyword">sizeof</emphasis>(long)&#32;*&#32;__CHAR_BIT__&#32;-&#32;1&#32;-&#32;__builtin_clzl(__n);&#32;}
1519 
1520 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1521 &#32;&#32;__lg(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__n)
1522 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;long)&#32;*&#32;__CHAR_BIT__&#32;-&#32;1&#32;-&#32;__builtin_clzll(__n);&#32;}
1523 
1524 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1525 &#32;&#32;__lg(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__n)
1526 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;long)&#32;*&#32;__CHAR_BIT__&#32;-&#32;1&#32;-&#32;__builtin_clzll(__n);&#32;}
1527 
1528 _GLIBCXX_BEGIN_NAMESPACE_ALGO
1529 
1542 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1543 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1544 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1545 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2)
1546 &#32;&#32;&#32;&#32;{
1547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1548 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II1&gt;)
1549 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II2&gt;)
1550 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::value_type,
1552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II2&gt;::value_type&gt;)
1553 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a8242123f4908a0c212008f055e8b49a5">__glibcxx_requires_can_increment_range</link>(__first1,&#32;__last1,&#32;__first2);
1554 
1555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__equal_aux(__first1,&#32;__last1,&#32;__first2);
1556 &#32;&#32;&#32;&#32;}
1557 
1573 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1574 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1575 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1576 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__first1,&#32;_IIter1&#32;__last1,
1577 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__first2,&#32;_BinaryPredicate&#32;__binary_pred)
1578 &#32;&#32;&#32;&#32;{
1579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1580 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_IIter1&gt;)
1581 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_IIter2&gt;)
1582 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1583 
1584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
1585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">bool</emphasis>(__binary_pred(*__first1,&#32;*__first2)))
1586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1588 &#32;&#32;&#32;&#32;}
1589 
1590 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1591 &#32;&#32;<emphasis role="comment">//&#32;4-iterator&#32;version&#32;of&#32;std::equal&lt;It1,&#32;It2&gt;&#32;for&#32;use&#32;in&#32;C++11.</emphasis>
1592 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1593 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1594 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1595 &#32;&#32;&#32;&#32;__equal4(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2,&#32;_II2&#32;__last2)
1596 &#32;&#32;&#32;&#32;{
1597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RATag&#32;=&#32;random_access_iterator_tag;
1598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat1&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::iterator_category;
1599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II2&gt;::iterator_category;
1600 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RAIters&#32;=&#32;__and_&lt;is_same&lt;_Cat1,&#32;_RATag&gt;,&#32;is_same&lt;_Cat2,&#32;_RATag&gt;&gt;;
1601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_RAIters())
1602 &#32;&#32;&#32;&#32;{
1603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;std::distance(__first1,&#32;__last1);
1604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;std::distance(__first2,&#32;__last2);
1605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;!=&#32;__d2)
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__first1,&#32;__last1,&#32;__first2);
1608 &#32;&#32;&#32;&#32;}
1609 
1610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
1611 &#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
1612 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(*__first1&#32;==&#32;*__first2))
1613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1&#32;==&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;==&#32;__last2;
1615 &#32;&#32;&#32;&#32;}
1616 
1617 &#32;&#32;<emphasis role="comment">//&#32;4-iterator&#32;version&#32;of&#32;std::equal&lt;It1,&#32;It2,&#32;BinaryPred&gt;&#32;for&#32;use&#32;in&#32;C++11.</emphasis>
1618 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1619 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1620 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1621 &#32;&#32;&#32;&#32;__equal4(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2,&#32;_II2&#32;__last2,
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
1623 &#32;&#32;&#32;&#32;{
1624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RATag&#32;=&#32;random_access_iterator_tag;
1625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat1&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::iterator_category;
1626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat2&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II2&gt;::iterator_category;
1627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RAIters&#32;=&#32;__and_&lt;is_same&lt;_Cat1,&#32;_RATag&gt;,&#32;is_same&lt;_Cat2,&#32;_RATag&gt;&gt;;
1628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_RAIters())
1629 &#32;&#32;&#32;&#32;{
1630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d1&#32;=&#32;std::distance(__first1,&#32;__last1);
1631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__d2&#32;=&#32;std::distance(__first2,&#32;__last2);
1632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d1&#32;!=&#32;__d2)
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1634 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::equal(__first1,&#32;__last1,&#32;__first2,
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred);
1636 &#32;&#32;&#32;&#32;}
1637 
1638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2;
1639 &#32;&#32;&#32;&#32;&#32;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
1640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<emphasis role="keywordtype">bool</emphasis>(__binary_pred(*__first1,&#32;*__first2)))
1641 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first1&#32;==&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;==&#32;__last2;
1643 &#32;&#32;&#32;&#32;}
1644 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1645 
1646 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1647 
1648 <emphasis role="preprocessor">#define&#32;__cpp_lib_robust_nonmodifying_seq_ops&#32;201304L</emphasis>
1649 
1663 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1664 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1665 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1666 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_II1&#32;__first1,&#32;_II1&#32;__last1,&#32;_II2&#32;__first2,&#32;_II2&#32;__last2)
1667 &#32;&#32;&#32;&#32;{
1668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1669 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II1&gt;)
1670 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II2&gt;)
1671 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::value_type,
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II2&gt;::value_type&gt;)
1674 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1675 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
1676 
1677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::__equal4(__first1,&#32;__last1,&#32;__first2,&#32;__last2);
1678 &#32;&#32;&#32;&#32;}
1679 
1696 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1697 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1698 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1699 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link>(_IIter1&#32;__first1,&#32;_IIter1&#32;__last1,
1700 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__first2,&#32;_IIter2&#32;__last2,&#32;_BinaryPredicate&#32;__binary_pred)
1701 &#32;&#32;&#32;&#32;{
1702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1703 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_IIter1&gt;)
1704 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_IIter2&gt;)
1705 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1706 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
1707 
1708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::__equal4(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred);
1710 &#32;&#32;&#32;&#32;}
1711 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
1712 
1728 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2&gt;
1729 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1730 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1731 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_II1&#32;__first1,&#32;_II1&#32;__last1,
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II2&#32;__first2,&#32;_II2&#32;__last2)
1733 &#32;&#32;&#32;&#32;{
1734 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
1735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II1&gt;::value_type&#32;_ValueType1;
1737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_II2&gt;::value_type&#32;_ValueType2;
1738 <emphasis role="preprocessor">#endif</emphasis>
1739 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II1&gt;)
1740 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II2&gt;)
1741 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;_ValueType1,&#32;_ValueType2&gt;)
1742 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_LessThanOpConcept&lt;_ValueType2,&#32;_ValueType1&gt;)
1743 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1744 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
1745 
1746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__lexicographical_compare_aux(__first1,&#32;__last1,
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2,&#32;__last2);
1748 &#32;&#32;&#32;&#32;}
1749 
1763 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_II1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_II2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1764 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1765 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1766 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link>(_II1&#32;__first1,&#32;_II1&#32;__last1,
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_II2&#32;__first2,&#32;_II2&#32;__last2,&#32;_Compare&#32;__comp)
1768 &#32;&#32;&#32;&#32;{
1769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1770 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II1&gt;)
1771 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_II2&gt;)
1772 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1773 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
1774 
1775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__lexicographical_compare_impl
1776 &#32;&#32;&#32;&#32;(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
1777 &#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__comp));
1778 &#32;&#32;&#32;&#32;}
1779 
1780 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1781 &#32;&#32;<emphasis role="comment">//&#32;Iter&#32;points&#32;to&#32;a&#32;contiguous&#32;range&#32;of&#32;unsigned&#32;narrow&#32;character&#32;type</emphasis>
1782 &#32;&#32;<emphasis role="comment">//&#32;or&#32;std::byte,&#32;suitable&#32;for&#32;comparison&#32;by&#32;memcmp.</emphasis>
1783 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
1784 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__is_byte_iter&#32;=&#32;contiguous_iterator&lt;_Iter&gt;
1785 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_memcmp_ordered&lt;iter_value_t&lt;_Iter&gt;&gt;::__value;
1786 
1787 &#32;&#32;<emphasis role="comment">//&#32;Return&#32;a&#32;struct&#32;with&#32;two&#32;members,&#32;initialized&#32;to&#32;the&#32;smaller&#32;of&#32;x&#32;and&#32;y</emphasis>
1788 &#32;&#32;<emphasis role="comment">//&#32;(or&#32;x&#32;if&#32;they&#32;compare&#32;equal)&#32;and&#32;the&#32;result&#32;of&#32;the&#32;comparison&#32;x&#32;&lt;=&gt;&#32;y.</emphasis>
1789 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1790 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1791 &#32;&#32;&#32;&#32;__min_cmp(_Tp&#32;__x,&#32;_Tp&#32;__y)
1792 &#32;&#32;&#32;&#32;{
1793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Res&#32;{
1794 &#32;&#32;&#32;&#32;_Tp&#32;_M_min;
1795 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(__x&#32;&lt;=&gt;&#32;__y)&#32;_M_cmp;
1796 &#32;&#32;&#32;&#32;&#32;&#32;};
1797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;__x&#32;&lt;=&gt;&#32;__y;
1798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;&gt;&#32;0)
1799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res{__y,&#32;__c};
1800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Res{__x,&#32;__c};
1801 &#32;&#32;&#32;&#32;}
1802 
1814 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Comp&gt;
1815 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1816 &#32;&#32;&#32;&#32;lexicographical_compare_three_way(_InputIter1&#32;__first1,
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIter1&#32;__last1,
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIter2&#32;__first2,
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIter2&#32;__last2,
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Comp&#32;__comp)
1821 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__comp(*__first1,&#32;*__first2))
1822 &#32;&#32;&#32;&#32;{
1823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1824 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIter1&gt;)
1825 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIter2&gt;)
1826 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1827 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
1828 
1829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Cat&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__comp(*__first1,&#32;*__first2));
1830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(same_as&lt;common_comparison_category_t&lt;_Cat&gt;,&#32;_Cat&gt;);
1831 
1832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!std::__is_constant_evaluated())
1833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(same_as&lt;_Comp,&#32;__detail::_Synth3way&gt;
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;same_as&lt;_Comp,&#32;compare_three_way&gt;)
1835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_byte_iter&lt;_InputIter1&gt;)
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_byte_iter&lt;_InputIter2&gt;)
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;[__len,&#32;__lencmp]&#32;=&#32;_GLIBCXX_STD_A::
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__min_cmp(__last1&#32;-&#32;__first1,&#32;__last2&#32;-&#32;__first2);
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__len)
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__c
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__builtin_memcmp(&amp;*__first1,&#32;&amp;*__first2,&#32;__len)&#32;&lt;=&gt;&#32;0;
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__c&#32;!=&#32;0)
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c;
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lencmp;
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1849 
1850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1)
1851 &#32;&#32;&#32;&#32;{
1852 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strong_ordering::greater;
1854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__cmp&#32;=&#32;__comp(*__first1,&#32;*__first2);&#32;__cmp&#32;!=&#32;0)
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cmp;
1856 &#32;&#32;&#32;&#32;&#32;&#32;++__first1;
1857 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1858 &#32;&#32;&#32;&#32;}
1859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__first2&#32;==&#32;__last2)&#32;&lt;=&gt;&#32;<emphasis role="keyword">true</emphasis>;&#32;<emphasis role="comment">//&#32;See&#32;PR&#32;94006</emphasis>
1860 &#32;&#32;&#32;&#32;}
1861 
1862 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIter2&gt;
1863 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1864 &#32;&#32;&#32;&#32;lexicographical_compare_three_way(_InputIter1&#32;__first1,
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIter1&#32;__last1,
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIter2&#32;__first2,
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIter2&#32;__last2)
1868 &#32;&#32;&#32;&#32;{
1869 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::
1870 &#32;&#32;&#32;&#32;lexicographical_compare_three_way(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compare_three_way{});
1872 &#32;&#32;&#32;&#32;}
1873 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three_way_comparison</emphasis>
1874 
1875 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1877 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1878 &#32;&#32;&#32;&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
1879 &#32;&#32;&#32;&#32;__mismatch(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_BinaryPredicate&#32;__binary_pred)
1881 &#32;&#32;&#32;&#32;{
1882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__binary_pred(__first1,&#32;__first2))
1883 &#32;&#32;&#32;&#32;{
1884 &#32;&#32;&#32;&#32;&#32;&#32;++__first1;
1885 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1886 &#32;&#32;&#32;&#32;}
1887 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;(__first1,&#32;__first2);
1888 &#32;&#32;&#32;&#32;}
1889 
1903 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2&gt;
1904 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1905 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
1906 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2)
1908 &#32;&#32;&#32;&#32;{
1909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1910 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
1911 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
1912 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
1915 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1916 
1917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::__mismatch(__first1,&#32;__last1,&#32;__first2,
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1aa90ca822baf3304eee461dda8b0fb4cf">__gnu_cxx::__ops::__iter_equal_to_iter</link>());
1919 &#32;&#32;&#32;&#32;}
1920 
1937 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1939 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1940 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
1941 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
1942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_BinaryPredicate&#32;__binary_pred)
1943 &#32;&#32;&#32;&#32;{
1944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1945 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
1946 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
1947 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1948 
1949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::__mismatch(__first1,&#32;__last1,&#32;__first2,
1950 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__binary_pred));
1951 &#32;&#32;&#32;&#32;}
1952 
1953 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201103L</emphasis>
1954 
1955 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1957 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1958 &#32;&#32;&#32;&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
1959 &#32;&#32;&#32;&#32;__mismatch(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
1962 &#32;&#32;&#32;&#32;{
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__binary_pred(__first1,&#32;__first2))
1965 &#32;&#32;&#32;&#32;{
1966 &#32;&#32;&#32;&#32;&#32;&#32;++__first1;
1967 &#32;&#32;&#32;&#32;&#32;&#32;++__first2;
1968 &#32;&#32;&#32;&#32;}
1969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;(__first1,&#32;__first2);
1970 &#32;&#32;&#32;&#32;}
1971 
1986 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2&gt;
1987 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1988 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
1989 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
1990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2)
1991 &#32;&#32;&#32;&#32;{
1992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
1993 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
1994 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
1995 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator1&gt;::value_type,
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator2&gt;::value_type&gt;)
1998 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
1999 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
2000 
2001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::__mismatch(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1aa90ca822baf3304eee461dda8b0fb4cf">__gnu_cxx::__ops::__iter_equal_to_iter</link>());
2003 &#32;&#32;&#32;&#32;}
2004 
2022 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator2,
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
2024 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2025 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;pair&lt;_InputIterator1,&#32;_InputIterator2&gt;
2026 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link>(_InputIterator1&#32;__first1,&#32;_InputIterator1&#32;__last1,
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator2&#32;__first2,&#32;_InputIterator2&#32;__last2,
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred)
2029 &#32;&#32;&#32;&#32;{
2030 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2031 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator1&gt;)
2032 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_InputIteratorConcept&lt;_InputIterator2&gt;)
2033 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
2034 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first2,&#32;__last2);
2035 
2036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::__mismatch(__first1,&#32;__last1,&#32;__first2,&#32;__last2,
2037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__binary_pred));
2038 &#32;&#32;&#32;&#32;}
2039 <emphasis role="preprocessor">#endif</emphasis>
2040 
2041 _GLIBCXX_END_NAMESPACE_ALGO
2042 
2044 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
2045 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2046 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_InputIterator
2047 &#32;&#32;&#32;&#32;__find_if(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;input_iterator_tag)
2049 &#32;&#32;&#32;&#32;{
2050 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;!__pred(__first))
2051 &#32;&#32;&#32;&#32;++__first;
2052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2053 &#32;&#32;&#32;&#32;}
2054 
2056 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
2057 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2058 &#32;&#32;&#32;&#32;_RandomAccessIterator
2059 &#32;&#32;&#32;&#32;__find_if(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;random_access_iterator_tag)
2061 &#32;&#32;&#32;&#32;{
2062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RandomAccessIterator&gt;::difference_type
2063 &#32;&#32;&#32;&#32;__trip_count&#32;=&#32;(__last&#32;-&#32;__first)&#32;&gt;&gt;&#32;2;
2064 
2065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__trip_count&#32;&gt;&#32;0;&#32;--__trip_count)
2066 &#32;&#32;&#32;&#32;{
2067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2069 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2070 
2071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2073 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2074 
2075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2077 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2078 
2079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2081 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2082 &#32;&#32;&#32;&#32;}
2083 
2084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(__last&#32;-&#32;__first)
2085 &#32;&#32;&#32;&#32;{
2086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
2087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2089 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FALLTHRU</emphasis>
2091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
2092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2094 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FALLTHRU</emphasis>
2096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
2097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2099 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FALLTHRU</emphasis>
2101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
2102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
2103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
2104 &#32;&#32;&#32;&#32;}
2105 &#32;&#32;&#32;&#32;}
2106 
2107 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
2108 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2109 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Iterator
2110 &#32;&#32;&#32;&#32;__find_if(_Iterator&#32;__first,&#32;_Iterator&#32;__last,&#32;_Predicate&#32;__pred)
2111 &#32;&#32;&#32;&#32;{
2112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__find_if(__first,&#32;__last,&#32;__pred,
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__first));
2114 &#32;&#32;&#32;&#32;}
2115 
2116 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
2117 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2118 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::difference_type
2119 &#32;&#32;&#32;&#32;__count_if(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_Predicate&#32;__pred)
2120 &#32;&#32;&#32;&#32;{
2121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::difference_type&#32;__n&#32;=&#32;0;
2122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
2123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(__first))
2124 &#32;&#32;&#32;&#32;&#32;&#32;++__n;
2125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
2126 &#32;&#32;&#32;&#32;}
2127 
2128 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
2129 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2130 &#32;&#32;&#32;&#32;_ForwardIterator
2131 &#32;&#32;&#32;&#32;__remove_if(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
2133 &#32;&#32;&#32;&#32;{
2134 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;std::__find_if(__first,&#32;__last,&#32;__pred);
2135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
2136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
2137 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result&#32;=&#32;__first;
2138 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
2140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pred(__first))
2141 &#32;&#32;&#32;&#32;&#32;&#32;{
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(*__first);
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
2144 &#32;&#32;&#32;&#32;&#32;&#32;}
2145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2146 &#32;&#32;&#32;&#32;}
2147 
2148 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2149 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2,
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
2151 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2152 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2153 &#32;&#32;&#32;&#32;__is_permutation(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
2154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_BinaryPredicate&#32;__pred)
2155 &#32;&#32;&#32;&#32;{
2156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Efficiently&#32;compare&#32;identical&#32;prefixes:&#32;&#32;O(N)&#32;if&#32;sequences</emphasis>
2157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;have&#32;the&#32;same&#32;elements&#32;in&#32;the&#32;same&#32;order.</emphasis>
2158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__first2)
2159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__pred(__first1,&#32;__first2))
2160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2161 
2162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
2163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2164 
2165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Establish&#32;__last2&#32;assuming&#32;equal&#32;ranges&#32;by&#32;iterating&#32;over&#32;the</emphasis>
2166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;rest&#32;of&#32;the&#32;list.</emphasis>
2167 &#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2&#32;=&#32;__first2;
2168 &#32;&#32;&#32;&#32;&#32;&#32;std::advance(__last2,&#32;std::distance(__first1,&#32;__last1));
2169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_ForwardIterator1&#32;__scan&#32;=&#32;__first1;&#32;__scan&#32;!=&#32;__last1;&#32;++__scan)
2170 &#32;&#32;&#32;&#32;{
2171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__scan&#32;!=&#32;std::__find_if(__first1,&#32;__scan,
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__pred,&#32;__scan)))
2173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;We&apos;ve&#32;seen&#32;this&#32;one&#32;before.</emphasis>
2174 
2175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__matches
2176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__count_if(__first2,&#32;__last2,
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__pred,&#32;__scan));
2178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(0&#32;==&#32;__matches&#32;||
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__count_if(__scan,&#32;__last1,
2180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1a56402c6d8e082f0657636c1eebee5fe2">__gnu_cxx::__ops::__iter_comp_iter</link>(__pred,&#32;__scan))
2181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!=&#32;__matches)
2182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2183 &#32;&#32;&#32;&#32;}
2184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2185 &#32;&#32;&#32;&#32;}
2186 
2199 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator2&gt;
2200 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2201 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2202 &#32;&#32;&#32;&#32;is_permutation(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
2203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2)
2204 &#32;&#32;&#32;&#32;{
2205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
2206 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator1&gt;)
2207 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ForwardIteratorConcept&lt;_ForwardIterator2&gt;)
2208 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_EqualOpConcept&lt;
2209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type,
2210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator2&gt;::value_type&gt;)
2211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first1,&#32;__last1);
2212 
2213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__is_permutation(__first1,&#32;__last1,&#32;__first2,
2214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__cxx_1_1____ops_1aa90ca822baf3304eee461dda8b0fb4cf">__gnu_cxx::__ops::__iter_equal_to_iter</link>());
2215 &#32;&#32;&#32;&#32;}
2216 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
2217 
2218 _GLIBCXX_END_NAMESPACE_VERSION
2219 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
2220 
2221 <emphasis role="comment">//&#32;NB:&#32;This&#32;file&#32;is&#32;included&#32;within&#32;many&#32;other&#32;C++&#32;includes,&#32;as&#32;a&#32;way</emphasis>
2222 <emphasis role="comment">//&#32;of&#32;getting&#32;the&#32;base&#32;algorithms.&#32;So,&#32;make&#32;sure&#32;that&#32;parallel&#32;bits</emphasis>
2223 <emphasis role="comment">//&#32;come&#32;in&#32;too&#32;if&#32;requested.</emphasis>
2224 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_PARALLEL</emphasis>
2225 <emphasis role="preprocessor">#&#32;include&#32;&lt;parallel/algobase.h&gt;</emphasis>
2226 <emphasis role="preprocessor">#endif</emphasis>
2227 
2228 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
