<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacestd" xml:lang="en-US">
<title>std Namespace Reference</title>
<indexterm><primary>std</primary></indexterm>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacestd_1_1____debug">__debug</link></para>

<para>GNU debug code, replaces standard behavior with debug behavior. </para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacestd_1_1____exception__ptr">__exception_ptr</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacestd_1_1____parallel">__parallel</link></para>

<para>GNU parallel code, replaces standard behavior with parallel behavior. </para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacestd_1_1execution">execution</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacestd_1_1regex__constants">regex_constants</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacestd_1_1rel__ops">rel_ops</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structstd_1_1____denorm__min">__denorm_min</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____denorm__min__impl">__denorm_min_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits">__digits</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10">__digits10</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl">__digits10_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01___tp_00_01true_01_4">__digits10_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01double_00_01true_01_4">__digits10_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01float_00_01true_01_4">__digits10_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01long_01double_00_01true_01_4">__digits10_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl">__digits_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01___tp_00_01true_01_4">__digits_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01double_00_01true_01_4">__digits_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01float_00_01true_01_4">__digits_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01long_01double_00_01true_01_4">__digits_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon">__epsilon</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl">__epsilon_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01double_01_4">__epsilon_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01float_01_4">__epsilon_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01long_01double_01_4">__epsilon_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max">__finite_max</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl">__finite_max_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01___tp_00_01true_01_4">__finite_max_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01double_00_01true_01_4">__finite_max_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01float_00_01true_01_4">__finite_max_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01long_01double_00_01true_01_4">__finite_max_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min">__finite_min</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl">__finite_min_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01___tp_00_01true_01_4">__finite_min_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01double_00_01true_01_4">__finite_min_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01float_00_01true_01_4">__finite_min_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01long_01double_00_01true_01_4">__finite_min_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____has__iec559__behavior">__has_iec559_behavior</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____has__iec559__storage__format">__has_iec559_storage_format</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____infinity">__infinity</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____infinity__impl">__infinity_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10">__max_digits10</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10__impl">__max_digits10_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10__impl_3_01___tp_00_01true_01_4">__max_digits10_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent">__max_exponent</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10">__max_exponent10</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl">__max_exponent10_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01double_01_4">__max_exponent10_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01float_01_4">__max_exponent10_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01long_01double_01_4">__max_exponent10_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl">__max_exponent_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01double_01_4">__max_exponent_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01float_01_4">__max_exponent_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01long_01double_01_4">__max_exponent_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent">__min_exponent</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10">__min_exponent10</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl">__min_exponent10_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01double_01_4">__min_exponent10_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01float_01_4">__min_exponent10_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01long_01double_01_4">__min_exponent10_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl">__min_exponent_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01double_01_4">__min_exponent_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01float_01_4">__min_exponent_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01long_01double_01_4">__min_exponent_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min">__norm_min</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl">__norm_min_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01___tp_00_01true_01_4">__norm_min_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01double_00_01true_01_4">__norm_min_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01float_00_01true_01_4">__norm_min_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01long_01double_00_01true_01_4">__norm_min_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____quiet___na_n">__quiet_NaN</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____quiet___na_n__impl">__quiet_NaN_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix">__radix</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix__impl">__radix_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix__impl_3_01___tp_00_01true_01_4">__radix_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold">__reciprocal_overflow_threshold</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold__impl">__reciprocal_overflow_threshold_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold__impl_3_01___tp_00_01true_01_4">__reciprocal_overflow_threshold_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error">__round_error</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error__impl">__round_error_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error__impl_3_01___tp_00_01true_01_4">__round_error_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____signaling___na_n">__signaling_NaN</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____signaling___na_n__impl">__signaling_NaN_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists">__value_exists</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists__impl">__value_exists_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists__impl_3_01___trait_00_01___tp_00_01void__t_3_01decltype_07___trai2a9d6c26cbf51bee76e01c3e3a87e2f8">__value_exists_impl&lt; _Trait, _Tp, void_t&lt; decltype(_Trait&lt; _Tp &gt;::value)&gt; &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classstd_1_1exception">exception</link></para>

<para>Base class for all library exceptions. </para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_012_00_012_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 2, 2, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_012_00_013_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 2, 3, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_012_00_014_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 2, 4, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_013_00_012_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 3, 2, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_013_00_013_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 3, 3, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_013_00_014_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 3, 4, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_014_00_012_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 4, 2, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_014_00_013_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 4, 3, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1mat_3_014_00_014_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::mat&lt; 4, 4, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1qua_3_01_t_00_01_q_01_4_01_4">hash&lt; glm::qua&lt; T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1tdualquat_3_01_t_00_01_q_01_4_01_4">hash&lt; glm::tdualquat&lt; T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1vec_3_011_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::vec&lt; 1, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1vec_3_012_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::vec&lt; 2, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1vec_3_013_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::vec&lt; 3, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01glm_1_1vec_3_014_00_01_t_00_01_q_01_4_01_4">hash&lt; glm::vec&lt; 4, T, Q &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1hash_3_01nlohmann_1_1_n_l_o_h_m_a_n_n___b_a_s_i_c___j_s_o_n___t_p_l_01_4">hash&lt; nlohmann::NLOHMANN_BASIC_JSON_TPL &gt;</link></para>

<para>hash value for JSON objects </para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1less_3_01_1_1nlohmann_1_1detail_1_1value__t_01_4">less&lt; ::nlohmann::detail::value_t &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classstd_1_1tuple__element_3_01_n_00_01_1_1nlohmann_1_1detail_1_1iteration__proxy__value_3_01_iterator_type_01_4_01_4">tuple_element&lt; N, ::nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classstd_1_1tuple__size_3_1_1nlohmann_1_1detail_1_1iteration__proxy__value_3_01_iterator_type_01_4_01_4">tuple_size&lt;::nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link> (nlohmann::NLOHMANN_BASIC_JSON_TPL &amp;j1, nlohmann::NLOHMANN_BASIC_JSON_TPL &amp;j2) noexcept(//NOLINT(readability-inconsistent-declaration-parameter-<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>) is_nothrow_move_constructible&lt; nlohmann::NLOHMANN_BASIC_JSON_TPL &gt;<link linkend="_classvalue">::value</link> &amp;&amp;//NOLINT(misc-redundant-expression) is_nothrow_move_assignable&lt; nlohmann::NLOHMANN_BASIC_JSON_TPL &gt;<link linkend="_classvalue">::value</link>)</para>

<para>exchanges the values of two JSON objects </para>
</listitem>
            <listitem><para><link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link> <link linkend="_group__exceptions_1gafcca609a0e064086e3d37ff25c85ab69">current_exception</link> () _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para>template&lt;typename _Ex &gt; </para><para><link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link> <link linkend="_group__exceptions_1ga90822fbbd4a65b89480fb64d67fc69b6">make_exception_ptr</link> (_Ex) _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_group__exceptions_1ga64d0b68338d7edbfd7d95f4177dbc442">rethrow_exception</link> (<link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link>) <link linkend="_group__exceptions_1gab4148f172d910c82bf981da4f900c4a4">__attribute__</link>((__noreturn__))</para>

<para>Throw the object pointed to by the exception_ptr. </para>
</listitem>
            <listitem><para>template&lt;typename _Ex &gt; </para><para><link linkend="_group__exceptions_1gab4148f172d910c82bf981da4f900c4a4">__attribute__</link> ((__always_inline__)) <link linkend="_classstd_1_1____exception__ptr_1_1exception__ptr">exception_ptr</link> <link linkend="_group__exceptions_1ga90822fbbd4a65b89480fb64d67fc69b6">make_exception_ptr</link>(_Ex) _GLIBCXX_USE_NOEXCEPT</para>

<para>Obtain an exception_ptr pointing to a copy of the supplied object. </para>
</listitem>
            <listitem><para>_GLIBCXX_BEGIN_NAMESPACE_VERSION <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_namespacestd_1a46efad1a1add9933b471435df48b3c04">_Hash_bytes</link> (const <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> *__ptr, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __len, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __seed)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_namespacestd_1ae22dd3a584b885cf26cf4e6f9d5d0f6b">_Fnv_hash_bytes</link> (const <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> *__ptr, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __len, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __seed)</para>
</listitem>
            <listitem><para>template&lt;template&lt; typename &gt; class _Trait, typename _Tp , typename _Up  = _Tp&gt; </para><para>constexpr _Up <link linkend="_namespacestd_1afb0b54c9aca639344dd22870d4179eca">__value_or</link> (_Up __def=_Up()) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Function __f)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Function &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a5bd8d5cb6d63d354aff5188eb885e8b2">for_each_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size __n, _Function __f)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">find_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79">find_if_not</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">find</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">find_end</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1ad8f4aed2165ebe2d5240b1fa234776cf">find_end</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1a71512565e1497b9ce56857765928e8e3">find_first_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1aa1bf0f14825b217232cc4f177835a3b4">adjacent_find</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::difference_type &gt; <link linkend="_namespacestd_1a30e2af881094d0e954ce605fdd3e0993">count</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::difference_type &gt; <link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; <link linkend="_namespacestd_1a85624c38582d6a8f19c5cc603f5e5030">search</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ab25c361092dc8a9c370f721518d8df9f">search_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1ad65e2656aa6e6ce70150b2dfa9669cde">copy_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _Size __n, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1">copy_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200">swap_ranges</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _UnaryOperation __op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ad85cc45f3c0dc516af5c6f8bcd61d8e4">transform</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator __result, _BinaryOperation __op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__old_value, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryPredicate , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a2923a872c909e0531e5db0309ad30a95">replace_copy_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _UnaryPredicate __pred, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1aa606c48e16f23e6c4f613d187cc3675c">replace_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, const _Tp &amp;__old_value, const _Tp &amp;__new_value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">fill</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">fill_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">generate</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Generator __g)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Generator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>, _Generator __g)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a11eaff910d723a0ea9707f30aead68c4">remove_copy_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Predicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a6b787bee96a52b5b62d7fe8aa6f15fd8">remove_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908">remove_if</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a275f04febe0d9145fede11f1d1627a2d">unique</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1addc3e78fa4058506fec441905945106a">unique_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719">reverse</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1aa750b5b7ee58a0ba12515997f5066c49">reverse_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _ForwardIterator __d_first)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e">rotate</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a6a632f2677de3977838e216e3a33338c">rotate_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __middle, _ForwardIterator1 __last, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a1437bae2cd332f755a3e88e264a04525">is_partitioned</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _BidirectionalIterator &gt; <link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">stable_partition</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b">partition_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _ForwardIterator1 __out_true, _ForwardIterator2 __out_false, _UnaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a78836d4b04390fe30b1d0cfb42bf1087">sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9841b78691c821d191b9aa5d9d1c53a6">stable_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a18b2972571349d61b13f4f75cd358f46">mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1a1dde41f94bd1e5cfdc526470babc1a91">mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; <link linkend="_namespacestd_1aeff88a322fe7ab5920e8b5e2d8acd38c">mismatch</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __p)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1aba28c0609155ea9f764f40b7c48e6038">equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1afe0bae5a5207d612ff014fb2c16de5d4">equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __p)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a118dcf28eed2f57fcda6bc9ce104eaeb">equal</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ab329791debf9c7a8f4a889c1061bdc7e">partial_sort</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1aede1625926fee2cb08e34aed9a057213">partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1aeb7f6e67afcfda133325f05b62ff07df">partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0">is_sorted_until</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ad84595cc9efa97a3a4dcac71313ac09a">is_sorted_until</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9">is_sorted</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1ac41a95bbe3e1331f92c23363be5bb854">is_sorted</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ab25aacd25552d74a9237a4aff3c5f656">nth_element</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __d_first, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a15aa5c441c6b2acac483ff75859b033b">merge</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __d_first)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">inplace_merge</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a7715c3f4724785a62e9031f4a3b1abd7">inplace_merge</link> (_ExecutionPolicy &amp;&amp;__exec, _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">includes</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a3f21045ddf76c4d9d6b509f671d8ab40">includes</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1acbe17c0b9e5d21022cb31bf04c70c3c1">set_union</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af62ea2ea980805f2fd1b3d618f9d2f4f">set_intersection</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1afebe1b2ef2d0cc35e7ff53a696137b60">set_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator <link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ac7e3ddca0a97bca42d21aa4716dcd427">set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">is_heap_until</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; <link linkend="_namespacestd_1ae230f0e2ee8681939a937fd9eaa7f37f">is_heap_until</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d">is_heap</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1afed3afc40878f31c5a96c44cd0a1f480">is_heap</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1af7c25027b854ae83cf508a7299ecab0c">min_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a27269a7197d5ade0591a77cc101ed485">max_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator, _ForwardIterator &gt; &gt; <link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">minmax_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator, _ForwardIterator &gt; &gt; <link linkend="_namespacestd_1afb7b9758cf43dfdffabf6b265dc8edb2">minmax_element</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a19067eeaeed9ed2ab0c58efdf30a681d">lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_namespacestd_1a66f6d03062f9318edb49d98126540ff7">all_of</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Pred __pred)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _InputIterator , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">uninitialized_copy</link> (_ExecutionPolicy &amp;&amp;__exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _InputIterator , class _Size , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a05e4bc318c0d5f2efb68a9ea6c55739b">uninitialized_copy_n</link> (_ExecutionPolicy &amp;&amp;__exec, _InputIterator __first, _Size __n, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _InputIterator , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1affe72b3822ef701f99b9ba1a6c953aed">uninitialized_move</link> (_ExecutionPolicy &amp;&amp;__exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _InputIterator , class _Size , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ab613a9e189675f990f49fa9de211d509">uninitialized_move_n</link> (_ExecutionPolicy &amp;&amp;__exec, _InputIterator __first, _Size __n, _ForwardIterator __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a10e163c934df1d0793031027dd113f45">uninitialized_fill</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a53c0988739169fa73adec7bc92953ee2">uninitialized_fill_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size __n, const _Tp &amp;__value)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1a8f834ac1395ecb3ee484e6dcdbd8998c">destroy_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size __n)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1ad2a13bc06282fe96b24e2246025bc8a9">uninitialized_default_construct</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1acf95338aa12ecf2e9d44b3195412bfac">uninitialized_default_construct_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size __n)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; <link linkend="_namespacestd_1a08ede7ab702bb5649a587b656f0e0c2c">uninitialized_value_construct</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; <link linkend="_namespacestd_1ab737a726156b3474897e2283525b46aa">uninitialized_value_construct_n</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _Size __n)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; <link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; <link linkend="_namespacestd_1a05a85e0c93686270851eb8e1595f1736">reduce</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::value_type &gt; <link linkend="_namespacestd_1a272bfd867dce9fef5466c0b0505dde51">reduce</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; <link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">transform_reduce</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; <link linkend="_namespacestd_1ab7b461f1bcd80edda19139acdb6bb1fb">transform_reduce</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; <link linkend="_namespacestd_1ac899f61a65c086a8d00fbb8c5d15b910">transform_reduce</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1aac1171bbebbee1cee2ad392f6a76f824">exclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1aa45a821ef980f3372b209a64330db959">exclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init, _BinaryOperation __binary_op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1aa444107e571b4df65fd6162079d2cbc3">inclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1aea2c2e5d71a04e8fb59cd8c3e655da4a">inclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a4a699ae1c2b38239135a9f33ee20e569">inclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _Tp __init)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation , class _UnaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a5fbaaeef2064a2cd0bc45351cd8671cd">transform_exclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation , class _UnaryOperation , class _Tp &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3">transform_inclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _UnaryOperation __unary_op, _Tp __init)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryOperation , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1ae847e73d2cfc1bf212e9360cd58afe9c">transform_inclusive_scan</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _UnaryOperation __unary_op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1a8e0ebcf0b7a1a4e60d98f9a377ed012a">adjacent_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first, _BinaryOperation op)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </para><para><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; <link linkend="_namespacestd_1af79891b7c38ea4330e0ef2c83acb4226">adjacent_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>template&lt;template&lt; typename &gt; class _Trait, typename _Tp &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacestd_1aa7ae232fbcf2790918a97f10f6ac2da4">__value_exists_v</link> = <link linkend="_structstd_1_1____value__exists">__value_exists</link>&lt;_Trait, _Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a62381ea7149c93b6d057c647ff1d1c49">__denorm_min_v</link> = <link linkend="_structstd_1_1____denorm__min">__denorm_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a3760ff6d7b14de23097c9a1e007ae635">__epsilon_v</link> = <link linkend="_structstd_1_1____epsilon">__epsilon</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a0d8da259a6a4c3a911b5a4f46a91bd65">__finite_max_v</link> = <link linkend="_structstd_1_1____finite__max">__finite_max</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1af108d927d1d48c236ee58f02e1f66206">__finite_min_v</link> = <link linkend="_structstd_1_1____finite__min">__finite_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a459ce5336666d09ed2cbda6902f8d464">__infinity_v</link> = <link linkend="_structstd_1_1____infinity">__infinity</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1ae82e3e386cb77c5f9df37f8a7e4002f8">__norm_min_v</link> = <link linkend="_structstd_1_1____norm__min">__norm_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a739eba7491f4e358b44a95d43570d4bf">__quiet_NaN_v</link> = <link linkend="_structstd_1_1____quiet___na_n">__quiet_NaN</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1ab133749ec0bcee1e1f914509b5512cb4">__reciprocal_overflow_threshold_v</link> = <link linkend="_structstd_1_1____reciprocal__overflow__threshold">__reciprocal_overflow_threshold</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a95c232e9e27c7f3d49016b0732483957">__round_error_v</link> = <link linkend="_structstd_1_1____round__error">__round_error</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a2d6041736fd2bd49d6492956f0b85f8f">__signaling_NaN_v</link> = <link linkend="_structstd_1_1____signaling___na_n">__signaling_NaN</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a3b0642926b321992beb023600ace989e">__digits_v</link> = <link linkend="_structstd_1_1____digits">__digits</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1ab4cb32ee09031f5ba80a0c177ad45b30">__digits10_v</link> = <link linkend="_structstd_1_1____digits10">__digits10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1aad62a7deedbdb38c20d9a5e398cdd4b9">__max_digits10_v</link> = <link linkend="_structstd_1_1____max__digits10">__max_digits10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a13620c564d7575a1e3c9057a9b42d4b1">__max_exponent_v</link> = <link linkend="_structstd_1_1____max__exponent">__max_exponent</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a70b9e37a46d30c3c7bb2f38e88d40802">__max_exponent10_v</link> = <link linkend="_structstd_1_1____max__exponent10">__max_exponent10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a1299ac5d8f27c5d9767c12358ca28971">__min_exponent_v</link> = <link linkend="_structstd_1_1____min__exponent">__min_exponent</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a40b4fcdd5587c393e222b408e5747b09">__min_exponent10_v</link> = <link linkend="_structstd_1_1____min__exponent10">__min_exponent10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr auto <link linkend="_namespacestd_1a511c20ecb8405016527733b89d3aada3">__radix_v</link> = <link linkend="_structstd_1_1____radix">__radix</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacestd_1aa15f4d72f6eb58958e3763c45a2dfcdc">__has_iec559_storage_format_v</link> = <link linkend="_structstd_1_1____has__iec559__storage__format">__has_iec559_storage_format</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
            <listitem><para>template&lt;template&lt; typename &gt; class _Trait, typename _Tp &gt; </para><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacestd_1a18c96fc1fd03305b7bffd337c2911751">__has_iec559_behavior_v</link> = <link linkend="_structstd_1_1____has__iec559__behavior">__has_iec559_behavior</link>&lt;_Trait, _Tp&gt;<link linkend="_classvalue">::value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacestd_1afb0b54c9aca639344dd22870d4179eca"/><section>
    <title>__value_or()</title>
<indexterm><primary>__value_or</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__value_or</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename &gt; class _Trait, typename _Tp , typename _Up  = _Tp&gt; </computeroutput><para><computeroutput>constexpr _Up std::__value_or (_Up __def = <computeroutput>_Up()</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1ae22dd3a584b885cf26cf4e6f9d5d0f6b"/><section>
    <title>_Fnv_hash_bytes()</title>
<indexterm><primary>_Fnv_hash_bytes</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>_Fnv_hash_bytes</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> std::_Fnv_hash_bytes (const <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> * __ptr, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __len, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __seed)</computeroutput></para></section>
<anchor xml:id="_namespacestd_1a46efad1a1add9933b471435df48b3c04"/><section>
    <title>_Hash_bytes()</title>
<indexterm><primary>_Hash_bytes</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>_Hash_bytes</secondary></indexterm>
<para><computeroutput>_GLIBCXX_BEGIN_NAMESPACE_VERSION <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> std::_Hash_bytes (const <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> * __ptr, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __len, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __seed)</computeroutput></para></section>
<anchor xml:id="_namespacestd_1af79891b7c38ea4330e0ef2c83acb4226"/><section>
    <title>adjacent_difference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>adjacent_difference</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::adjacent_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af79891b7c38ea4330e0ef2c83acb4226_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a8e0ebcf0b7a1a4e60d98f9a377ed012a"/><section>
    <title>adjacent_difference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>adjacent_difference</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::adjacent_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first, _BinaryOperation op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a8e0ebcf0b7a1a4e60d98f9a377ed012a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a8e0ebcf0b7a1a4e60d98f9a377ed012a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7"/><section>
    <title>adjacent_find()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>adjacent_find</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>adjacent_find</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::adjacent_find (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a2e464ead1e536b9225fdcd8e87438bc7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a2e464ead1e536b9225fdcd8e87438bc7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aa1bf0f14825b217232cc4f177835a3b4"/><section>
    <title>adjacent_find()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>adjacent_find</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>adjacent_find</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::adjacent_find (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa1bf0f14825b217232cc4f177835a3b4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a66f6d03062f9318edb49d98126540ff7"/><section>
    <title>all_of()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>all_of</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>all_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::all_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Pred __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a66f6d03062f9318edb49d98126540ff7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d"/><section>
    <title>all_of()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>all_of</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>all_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::all_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af69ea32ebd7865fb57714d6b5f12f26d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f"/><section>
    <title>any_of()</title>
<indexterm><primary>any_of</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>any_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::any_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9dc98b4fd1f056dcea526d7b9b90ba7f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9dc98b4fd1f056dcea526d7b9b90ba7f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d"/><section>
    <title>copy()</title>
<indexterm><primary>copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a4e3366cc5ea1e47fac759952b877ed0d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a4e3366cc5ea1e47fac759952b877ed0d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1"/><section>
    <title>copy_if()</title>
<indexterm><primary>copy_if</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>copy_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::copy_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 result, _Predicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a05892b1ecb6a5d694a84a4567b1f77e1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a05892b1ecb6a5d694a84a4567b1f77e1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ad65e2656aa6e6ce70150b2dfa9669cde"/><section>
    <title>copy_n()</title>
<indexterm><primary>copy_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>copy_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::copy_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _Size __n, _ForwardIterator2 __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad65e2656aa6e6ce70150b2dfa9669cde_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad65e2656aa6e6ce70150b2dfa9669cde_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a30e2af881094d0e954ce605fdd3e0993"/><section>
    <title>count()</title>
<indexterm><primary>count</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::difference_type &gt; std::count (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a30e2af881094d0e954ce605fdd3e0993_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c"/><section>
    <title>count_if()</title>
<indexterm><primary>count_if</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>count_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::difference_type &gt; std::count_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a3211beceffa7786771b08add1e4a7f9c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a3211beceffa7786771b08add1e4a7f9c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a9d87212966db1577458d10be75ce7131"/><section>
    <title>destroy()</title>
<indexterm><primary>destroy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>destroy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::destroy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9d87212966db1577458d10be75ce7131_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9d87212966db1577458d10be75ce7131_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a8f834ac1395ecb3ee484e6dcdbd8998c"/><section>
    <title>destroy_n()</title>
<indexterm><primary>destroy_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>destroy_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::destroy_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _Size __n)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a8f834ac1395ecb3ee484e6dcdbd8998c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a8f834ac1395ecb3ee484e6dcdbd8998c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aba28c0609155ea9f764f40b7c48e6038"/><section>
    <title>equal()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>equal</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::equal (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aba28c0609155ea9f764f40b7c48e6038_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd"/><section>
    <title>equal()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>equal</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::equal (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __p)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a94ada91841cca21a2327b0235f9a82cd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a94ada91841cca21a2327b0235f9a82cd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a118dcf28eed2f57fcda6bc9ce104eaeb"/><section>
    <title>equal()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>equal</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::equal (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a118dcf28eed2f57fcda6bc9ce104eaeb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1afe0bae5a5207d612ff014fb2c16de5d4"/><section>
    <title>equal()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>equal</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::equal (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __p)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afe0bae5a5207d612ff014fb2c16de5d4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aac1171bbebbee1cee2ad392f6a76f824"/><section>
    <title>exclusive_scan()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>exclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>exclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::exclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init)</computeroutput></para></section>
<anchor xml:id="_namespacestd_1aa45a821ef980f3372b209a64330db959"/><section>
    <title>exclusive_scan()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>exclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>exclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::exclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init, _BinaryOperation __binary_op)</computeroutput></para></section>
<anchor xml:id="_namespacestd_1a9042ae744521b1770e868813f939b4b7"/><section>
    <title>fill()</title>
<indexterm><primary>fill</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>fill</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::fill (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9042ae744521b1770e868813f939b4b7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9042ae744521b1770e868813f939b4b7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37"/><section>
    <title>fill_n()</title>
<indexterm><primary>fill_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>fill_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::fill_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _Size __count, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad0962bae53d415481fe8bc9f90239d37_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad0962bae53d415481fe8bc9f90239d37_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ae3e398a3f38b0182e770944d57402701"/><section>
    <title>find()</title>
<indexterm><primary>find</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::find (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae3e398a3f38b0182e770944d57402701_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae3e398a3f38b0182e770944d57402701_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ad8f4aed2165ebe2d5240b1fa234776cf"/><section>
    <title>find_end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>find_end</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>find_end</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; std::find_end (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad8f4aed2165ebe2d5240b1fa234776cf_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aca2377528194645193c34ceb0f268ebc"/><section>
    <title>find_end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>find_end</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>find_end</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; std::find_end (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aca2377528194645193c34ceb0f268ebc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aca2377528194645193c34ceb0f268ebc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a71512565e1497b9ce56857765928e8e3"/><section>
    <title>find_first_of()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>find_first_of</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>find_first_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; std::find_first_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a71512565e1497b9ce56857765928e8e3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16"/><section>
    <title>find_first_of()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>find_first_of</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>find_first_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; std::find_first_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af918ddff6ab7ea6140872b65660e9b16_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af918ddff6ab7ea6140872b65660e9b16_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81"/><section>
    <title>find_if()</title>
<indexterm><primary>find_if</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>find_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::find_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a12540b98a8b3f5862173e50b92f1de81_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a12540b98a8b3f5862173e50b92f1de81_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ae19772fb8787d5b9c35285c98dfa5d79"/><section>
    <title>find_if_not()</title>
<indexterm><primary>find_if_not</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>find_if_not</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::find_if_not (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae19772fb8787d5b9c35285c98dfa5d79_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae19772fb8787d5b9c35285c98dfa5d79_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aefb696460665211a0f32f8a15f444c57"/><section>
    <title>for_each()</title>
<indexterm><primary>for_each</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>for_each</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::for_each (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Function __f)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aefb696460665211a0f32f8a15f444c57_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aefb696460665211a0f32f8a15f444c57_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a5bd8d5cb6d63d354aff5188eb885e8b2"/><section>
    <title>for_each_n()</title>
<indexterm><primary>for_each_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>for_each_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Function &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::for_each_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _Size __n, _Function __f)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a5bd8d5cb6d63d354aff5188eb885e8b2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a5bd8d5cb6d63d354aff5188eb885e8b2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7"/><section>
    <title>generate()</title>
<indexterm><primary>generate</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>generate</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::generate (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Generator __g)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af6065e33e83259566f3eed5b4ab8c0c7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af6065e33e83259566f3eed5b4ab8c0c7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a81641e273e00fcf6a7109be182426757"/><section>
    <title>generate_n()</title>
<indexterm><primary>generate_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>generate_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Generator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::generate_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _Size count, _Generator __g)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a81641e273e00fcf6a7109be182426757_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a81641e273e00fcf6a7109be182426757_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a3f21045ddf76c4d9d6b509f671d8ab40"/><section>
    <title>includes()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>includes</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>includes</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::includes (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a3f21045ddf76c4d9d6b509f671d8ab40_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1adb975e56185878896dee97fb7fb84156"/><section>
    <title>includes()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>includes</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>includes</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::includes (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_adb975e56185878896dee97fb7fb84156_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_adb975e56185878896dee97fb7fb84156_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aa444107e571b4df65fd6162079d2cbc3"/><section>
    <title>inclusive_scan()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>inclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>inclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::inclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa444107e571b4df65fd6162079d2cbc3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aea2c2e5d71a04e8fb59cd8c3e655da4a"/><section>
    <title>inclusive_scan()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>inclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>inclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::inclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aea2c2e5d71a04e8fb59cd8c3e655da4a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a4a699ae1c2b38239135a9f33ee20e569"/><section>
    <title>inclusive_scan()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>inclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>inclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::inclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _Tp __init)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a4a699ae1c2b38239135a9f33ee20e569_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a7715c3f4724785a62e9031f4a3b1abd7"/><section>
    <title>inplace_merge()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>inplace_merge</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>inplace_merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::inplace_merge (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a7715c3f4724785a62e9031f4a3b1abd7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1"/><section>
    <title>inplace_merge()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>inplace_merge</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>inplace_merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::inplace_merge (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1e57e7ac29f9c775cbcefa93feb3d2b1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1e57e7ac29f9c775cbcefa93feb3d2b1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1afed3afc40878f31c5a96c44cd0a1f480"/><section>
    <title>is_heap()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_heap</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_heap</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::is_heap (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afed3afc40878f31c5a96c44cd0a1f480_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aec7cee16cd32be74d90ce8f66f5a241d"/><section>
    <title>is_heap()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_heap</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_heap</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::is_heap (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aec7cee16cd32be74d90ce8f66f5a241d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aec7cee16cd32be74d90ce8f66f5a241d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ae230f0e2ee8681939a937fd9eaa7f37f"/><section>
    <title>is_heap_until()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_heap_until</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_heap_until</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; std::is_heap_until (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae230f0e2ee8681939a937fd9eaa7f37f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf"/><section>
    <title>is_heap_until()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_heap_until</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_heap_until</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; std::is_heap_until (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad64dc604fbb7c9f5f08518dfdf695dcf_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad64dc604fbb7c9f5f08518dfdf695dcf_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a1437bae2cd332f755a3e88e264a04525"/><section>
    <title>is_partitioned()</title>
<indexterm><primary>is_partitioned</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_partitioned</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::is_partitioned (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1437bae2cd332f755a3e88e264a04525_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1437bae2cd332f755a3e88e264a04525_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ac41a95bbe3e1331f92c23363be5bb854"/><section>
    <title>is_sorted()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_sorted</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_sorted</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::is_sorted (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac41a95bbe3e1331f92c23363be5bb854_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a042892d225ddbeba3c9cbd839dba38a9"/><section>
    <title>is_sorted()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_sorted</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_sorted</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::is_sorted (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a042892d225ddbeba3c9cbd839dba38a9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a042892d225ddbeba3c9cbd839dba38a9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ad84595cc9efa97a3a4dcac71313ac09a"/><section>
    <title>is_sorted_until()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>is_sorted_until</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_sorted_until</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::is_sorted_until (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad84595cc9efa97a3a4dcac71313ac09a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1afc42d9c3bc8c47863c93f03a9485dcc0"/><section>
    <title>is_sorted_until()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>is_sorted_until</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>is_sorted_until</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::is_sorted_until (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afc42d9c3bc8c47863c93f03a9485dcc0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afc42d9c3bc8c47863c93f03a9485dcc0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a19067eeaeed9ed2ab0c58efdf30a681d"/><section>
    <title>lexicographical_compare()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>lexicographical_compare</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>lexicographical_compare</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::lexicographical_compare (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a19067eeaeed9ed2ab0c58efdf30a681d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a076cfce541233dc2534e44d067d41ad4"/><section>
    <title>lexicographical_compare()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>lexicographical_compare</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>lexicographical_compare</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::lexicographical_compare (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a076cfce541233dc2534e44d067d41ad4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a076cfce541233dc2534e44d067d41ad4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a27269a7197d5ade0591a77cc101ed485"/><section>
    <title>max_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>max_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>max_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::max_element (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a27269a7197d5ade0591a77cc101ed485_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4"/><section>
    <title>max_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>max_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>max_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::max_element (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa1e6cdbc0afeb988a4d89d1dab4066d4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa1e6cdbc0afeb988a4d89d1dab4066d4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a15aa5c441c6b2acac483ff75859b033b"/><section>
    <title>merge()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>merge</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::merge (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __d_first)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a15aa5c441c6b2acac483ff75859b033b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f"/><section>
    <title>merge()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>merge</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::merge (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __d_first, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a23f39d0444be06ebfa219bbfd4e3854f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a23f39d0444be06ebfa219bbfd4e3854f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1af7c25027b854ae83cf508a7299ecab0c"/><section>
    <title>min_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>min_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>min_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::min_element (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af7c25027b854ae83cf508a7299ecab0c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e"/><section>
    <title>min_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>min_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>min_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::min_element (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af1620d34bc7426f2bafc5a3b1849588e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af1620d34bc7426f2bafc5a3b1849588e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1afb7b9758cf43dfdffabf6b265dc8edb2"/><section>
    <title>minmax_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>minmax_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>minmax_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator, _ForwardIterator &gt; &gt; std::minmax_element (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afb7b9758cf43dfdffabf6b265dc8edb2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a656914c176851f1d49d931e6953b90af"/><section>
    <title>minmax_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>minmax_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>minmax_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator, _ForwardIterator &gt; &gt; std::minmax_element (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a656914c176851f1d49d931e6953b90af_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a656914c176851f1d49d931e6953b90af_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aeff88a322fe7ab5920e8b5e2d8acd38c"/><section>
    <title>mismatch()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>mismatch</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; std::mismatch (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aeff88a322fe7ab5920e8b5e2d8acd38c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a18b2972571349d61b13f4f75cd358f46"/><section>
    <title>mismatch()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>mismatch</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; std::mismatch (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a18b2972571349d61b13f4f75cd358f46_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a1dde41f94bd1e5cfdc526470babc1a91"/><section>
    <title>mismatch()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>mismatch</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; std::mismatch (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1dde41f94bd1e5cfdc526470babc1a91_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a14e973b0980afe3afbceb376817e29f0"/><section>
    <title>mismatch()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>mismatch</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; std::mismatch (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a14e973b0980afe3afbceb376817e29f0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a14e973b0980afe3afbceb376817e29f0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be"/><section>
    <title>move()</title>
<indexterm><primary>move</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>move</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::move (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac7095819f6a8da64d69b1ee3029c52be_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c"/><section>
    <title>none_of()</title>
<indexterm><primary>none_of</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>none_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; std::none_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9ed705e7dfee41b5d879e6e0450cbc6c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9ed705e7dfee41b5d879e6e0450cbc6c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab25aacd25552d74a9237a4aff3c5f656"/><section>
    <title>nth_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>nth_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>nth_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::nth_element (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab25aacd25552d74a9237a4aff3c5f656_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919"/><section>
    <title>nth_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>nth_element</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>nth_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::nth_element (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9aedeebce40e8d85738b1e6f9ba8c919_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9aedeebce40e8d85738b1e6f9ba8c919_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab329791debf9c7a8f4a889c1061bdc7e"/><section>
    <title>partial_sort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>partial_sort</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>partial_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::partial_sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab329791debf9c7a8f4a889c1061bdc7e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc"/><section>
    <title>partial_sort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>partial_sort</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>partial_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::partial_sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a52a9f99b3fdcc2a91f5984ac6a4a24bc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a52a9f99b3fdcc2a91f5984ac6a4a24bc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aeb7f6e67afcfda133325f05b62ff07df"/><section>
    <title>partial_sort_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>partial_sort_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>partial_sort_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; std::partial_sort_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aeb7f6e67afcfda133325f05b62ff07df_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aede1625926fee2cb08e34aed9a057213"/><section>
    <title>partial_sort_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>partial_sort_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>partial_sort_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _RandomAccessIterator &gt; std::partial_sort_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aede1625926fee2cb08e34aed9a057213_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aede1625926fee2cb08e34aed9a057213_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f"/><section>
    <title>partition()</title>
<indexterm><primary>partition</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>partition</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::partition (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a7dde62cf155d6b5bde1a1c0577a9a57f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a7dde62cf155d6b5bde1a1c0577a9a57f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b"/><section>
    <title>partition_copy()</title>
<indexterm><primary>partition_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>partition_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; &gt; std::partition_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _ForwardIterator1 __out_true, _ForwardIterator2 __out_false, _UnaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a7ecc1add6d1142770929cc97a10d801b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a7ecc1add6d1142770929cc97a10d801b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a272bfd867dce9fef5466c0b0505dde51"/><section>
    <title>reduce()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>reduce</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, typename iterator_traits&lt; _ForwardIterator &gt;::value_type &gt; std::reduce (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a272bfd867dce9fef5466c0b0505dde51_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a05a85e0c93686270851eb8e1595f1736"/><section>
    <title>reduce()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>reduce</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; std::reduce (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a05a85e0c93686270851eb8e1595f1736_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d"/><section>
    <title>reduce()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>reduce</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; std::reduce (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a8b8d511ebd97a4d4753e9bf015f7d44d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7"/><section>
    <title>remove()</title>
<indexterm><primary>remove</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>remove</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::remove (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a4e25a1e93784cb07fd8a6e9a00be03a7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a4e25a1e93784cb07fd8a6e9a00be03a7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a6b787bee96a52b5b62d7fe8aa6f15fd8"/><section>
    <title>remove_copy()</title>
<indexterm><primary>remove_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>remove_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::remove_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a6b787bee96a52b5b62d7fe8aa6f15fd8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a6b787bee96a52b5b62d7fe8aa6f15fd8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a11eaff910d723a0ea9707f30aead68c4"/><section>
    <title>remove_copy_if()</title>
<indexterm><primary>remove_copy_if</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>remove_copy_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::remove_copy_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Predicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a11eaff910d723a0ea9707f30aead68c4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a11eaff910d723a0ea9707f30aead68c4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908"/><section>
    <title>remove_if()</title>
<indexterm><primary>remove_if</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>remove_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::remove_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af35a5645ec4634e402bf77d3edcaa908_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af35a5645ec4634e402bf77d3edcaa908_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97"/><section>
    <title>replace()</title>
<indexterm><primary>replace</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>replace</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::replace (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __old_value, const _Tp &amp; __new_value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac844ba281c4c66f83f6aebc21498fc97_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac844ba281c4c66f83f6aebc21498fc97_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aa606c48e16f23e6c4f613d187cc3675c"/><section>
    <title>replace_copy()</title>
<indexterm><primary>replace_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>replace_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::replace_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, const _Tp &amp; __old_value, const _Tp &amp; __new_value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa606c48e16f23e6c4f613d187cc3675c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa606c48e16f23e6c4f613d187cc3675c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a2923a872c909e0531e5db0309ad30a95"/><section>
    <title>replace_copy_if()</title>
<indexterm><primary>replace_copy_if</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>replace_copy_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryPredicate , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::replace_copy_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _UnaryPredicate __pred, const _Tp &amp; __new_value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a2923a872c909e0531e5db0309ad30a95_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a2923a872c909e0531e5db0309ad30a95_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7"/><section>
    <title>replace_if()</title>
<indexterm><primary>replace_if</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>replace_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::replace_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, const _Tp &amp; __new_value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9e0540c56b14e041d7db2a1c36b34fd7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9e0540c56b14e041d7db2a1c36b34fd7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719"/><section>
    <title>reverse()</title>
<indexterm><primary>reverse</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>reverse</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::reverse (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a66cd7f2a58b728c4a8f98ca025941719_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a66cd7f2a58b728c4a8f98ca025941719_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1aa750b5b7ee58a0ba12515997f5066c49"/><section>
    <title>reverse_copy()</title>
<indexterm><primary>reverse_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>reverse_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::reverse_copy (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _ForwardIterator __d_first)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa750b5b7ee58a0ba12515997f5066c49_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_aa750b5b7ee58a0ba12515997f5066c49_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e"/><section>
    <title>rotate()</title>
<indexterm><primary>rotate</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>rotate</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::rotate (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac75ea63fabdb7cfcc58a907d7ac2ae8e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac75ea63fabdb7cfcc58a907d7ac2ae8e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a6a632f2677de3977838e216e3a33338c"/><section>
    <title>rotate_copy()</title>
<indexterm><primary>rotate_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>rotate_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::rotate_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __middle, _ForwardIterator1 __last, _ForwardIterator2 __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a6a632f2677de3977838e216e3a33338c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a6a632f2677de3977838e216e3a33338c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a85624c38582d6a8f19c5cc603f5e5030"/><section>
    <title>search()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>search</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>search</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; std::search (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a85624c38582d6a8f19c5cc603f5e5030_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2"/><section>
    <title>search()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>search</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>search</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator1 &gt; std::search (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a5a4354dff231af6d172e1f24befda7f2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a5a4354dff231af6d172e1f24befda7f2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab25c361092dc8a9c370f721518d8df9f"/><section>
    <title>search_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>search_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>search_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::search_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab25c361092dc8a9c370f721518d8df9f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a"/><section>
    <title>search_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>search_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>search_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::search_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp &amp; __value, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a514f8e6fe1bd2905e5e94f231ce5255a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a514f8e6fe1bd2905e5e94f231ce5255a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1afebe1b2ef2d0cc35e7ff53a696137b60"/><section>
    <title>set_difference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_difference</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afebe1b2ef2d0cc35e7ff53a696137b60_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70"/><section>
    <title>set_difference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_difference</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_adb4e8e1785a2a6604b9f327ce4b7fd70_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_adb4e8e1785a2a6604b9f327ce4b7fd70_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1af62ea2ea980805f2fd1b3d618f9d2f4f"/><section>
    <title>set_intersection()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_intersection</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_intersection</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_intersection (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_af62ea2ea980805f2fd1b3d618f9d2f4f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa"/><section>
    <title>set_intersection()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_intersection</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_intersection</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_intersection (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1ea0f963e5844bd26cf0a784c6257cfa_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1ea0f963e5844bd26cf0a784c6257cfa_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ac7e3ddca0a97bca42d21aa4716dcd427"/><section>
    <title>set_symmetric_difference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_symmetric_difference</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_symmetric_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_symmetric_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac7e3ddca0a97bca42d21aa4716dcd427_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c"/><section>
    <title>set_symmetric_difference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_symmetric_difference</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_symmetric_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_symmetric_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator result, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab9be505d384524d65c4cd4e07090db6c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab9be505d384524d65c4cd4e07090db6c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1acbe17c0b9e5d21022cb31bf04c70c3c1"/><section>
    <title>set_union()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set_union</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_union</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_union (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_acbe17c0b9e5d21022cb31bf04c70c3c1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a1a155557f687cee85bd20e448e8739c8"/><section>
    <title>set_union()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set_union</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>set_union</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::set_union (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1a155557f687cee85bd20e448e8739c8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1a155557f687cee85bd20e448e8739c8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a78836d4b04390fe30b1d0cfb42bf1087"/><section>
    <title>sort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sort</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a78836d4b04390fe30b1d0cfb42bf1087_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a73a397864aa701b5bd48fae555f4f935"/><section>
    <title>sort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sort</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a73a397864aa701b5bd48fae555f4f935_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a73a397864aa701b5bd48fae555f4f935_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4"/><section>
    <title>stable_partition()</title>
<indexterm><primary>stable_partition</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>stable_partition</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _BidirectionalIterator &gt; std::stable_partition (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afd107e6f24ea89b04af2b04b929601b4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_afd107e6f24ea89b04af2b04b929601b4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a9841b78691c821d191b9aa5d9d1c53a6"/><section>
    <title>stable_sort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>stable_sort</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>stable_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::stable_sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a9841b78691c821d191b9aa5d9d1c53a6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ac4ae475114c7f06297db807234405f8a"/><section>
    <title>stable_sort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>stable_sort</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>stable_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::stable_sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac4ae475114c7f06297db807234405f8a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac4ae475114c7f06297db807234405f8a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8"/><section>
    <title>swap()</title>
<indexterm><primary>swap</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>swap</secondary></indexterm>
<para><computeroutput><link linkend="_json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f">NLOHMANN_BASIC_JSON_TPL_DECLARATION</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> std::swap (nlohmann::NLOHMANN_BASIC_JSON_TPL &amp; j1, nlohmann::NLOHMANN_BASIC_JSON_TPL &amp; j2)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>exchanges the values of two JSON objects </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/std_swap/">https://json.nlohmann.me/api/basic_json/std_swap/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a3ece115a1c8ed9020a20f1d0b70efda8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200"/><section>
    <title>swap_ranges()</title>
<indexterm><primary>swap_ranges</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>swap_ranges</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::swap_ranges (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab5c0ba367019a22e04563f7ecbf2f200_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab5c0ba367019a22e04563f7ecbf2f200_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a83797c5677d80005911de218c819adab"/><section>
    <title>transform()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>transform</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::transform (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _UnaryOperation __op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a83797c5677d80005911de218c819adab_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a83797c5677d80005911de218c819adab_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ad85cc45f3c0dc516af5c6f8bcd61d8e4"/><section>
    <title>transform()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>transform</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator , class _BinaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::transform (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator __result, _BinaryOperation __op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad85cc45f3c0dc516af5c6f8bcd61d8e4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a5fbaaeef2064a2cd0bc45351cd8671cd"/><section>
    <title>transform_exclusive_scan()</title>
<indexterm><primary>transform_exclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform_exclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation , class _UnaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::transform_exclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a5fbaaeef2064a2cd0bc45351cd8671cd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ae847e73d2cfc1bf212e9360cd58afe9c"/><section>
    <title>transform_inclusive_scan()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>transform_inclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform_inclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _UnaryOperation , class _BinaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::transform_inclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _UnaryOperation __unary_op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae847e73d2cfc1bf212e9360cd58afe9c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3"/><section>
    <title>transform_inclusive_scan()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>transform_inclusive_scan</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform_inclusive_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation , class _UnaryOperation , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::transform_inclusive_scan (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _UnaryOperation __unary_op, _Tp __init)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a290fe0a53840e3a23288a43e7ae3ebf3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a290fe0a53840e3a23288a43e7ae3ebf3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ac899f61a65c086a8d00fbb8c5d15b910"/><section>
    <title>transform_reduce()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>transform_reduce</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; std::transform_reduce (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ac899f61a65c086a8d00fbb8c5d15b910_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015"/><section>
    <title>transform_reduce()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>transform_reduce</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; std::transform_reduce (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a704ff380cbc127a2f0a5583f1108f015_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a704ff380cbc127a2f0a5583f1108f015_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab7b461f1bcd80edda19139acdb6bb1fb"/><section>
    <title>transform_reduce()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>transform_reduce</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _Tp &gt; std::transform_reduce (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab7b461f1bcd80edda19139acdb6bb1fb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97"/><section>
    <title>uninitialized_copy()</title>
<indexterm><primary>uninitialized_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _InputIterator , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::uninitialized_copy (_ExecutionPolicy &amp;&amp; __exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae8f76360bfad6375b33b57235ca96d97_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ae8f76360bfad6375b33b57235ca96d97_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a05e4bc318c0d5f2efb68a9ea6c55739b"/><section>
    <title>uninitialized_copy_n()</title>
<indexterm><primary>uninitialized_copy_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_copy_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _InputIterator , class _Size , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::uninitialized_copy_n (_ExecutionPolicy &amp;&amp; __exec, _InputIterator __first, _Size __n, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a05e4bc318c0d5f2efb68a9ea6c55739b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ad2a13bc06282fe96b24e2246025bc8a9"/><section>
    <title>uninitialized_default_construct()</title>
<indexterm><primary>uninitialized_default_construct</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_default_construct</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::uninitialized_default_construct (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ad2a13bc06282fe96b24e2246025bc8a9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1acf95338aa12ecf2e9d44b3195412bfac"/><section>
    <title>uninitialized_default_construct_n()</title>
<indexterm><primary>uninitialized_default_construct_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_default_construct_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::uninitialized_default_construct_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _Size __n)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_acf95338aa12ecf2e9d44b3195412bfac_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a10e163c934df1d0793031027dd113f45"/><section>
    <title>uninitialized_fill()</title>
<indexterm><primary>uninitialized_fill</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_fill</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::uninitialized_fill (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a10e163c934df1d0793031027dd113f45_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a53c0988739169fa73adec7bc92953ee2"/><section>
    <title>uninitialized_fill_n()</title>
<indexterm><primary>uninitialized_fill_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_fill_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::uninitialized_fill_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _Size __n, const _Tp &amp; __value)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a53c0988739169fa73adec7bc92953ee2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1affe72b3822ef701f99b9ba1a6c953aed"/><section>
    <title>uninitialized_move()</title>
<indexterm><primary>uninitialized_move</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_move</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _InputIterator , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::uninitialized_move (_ExecutionPolicy &amp;&amp; __exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_affe72b3822ef701f99b9ba1a6c953aed_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab613a9e189675f990f49fa9de211d509"/><section>
    <title>uninitialized_move_n()</title>
<indexterm><primary>uninitialized_move_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_move_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _InputIterator , class _Size , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::uninitialized_move_n (_ExecutionPolicy &amp;&amp; __exec, _InputIterator __first, _Size __n, _ForwardIterator __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab613a9e189675f990f49fa9de211d509_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a08ede7ab702bb5649a587b656f0e0c2c"/><section>
    <title>uninitialized_value_construct()</title>
<indexterm><primary>uninitialized_value_construct</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_value_construct</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; std::uninitialized_value_construct (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a08ede7ab702bb5649a587b656f0e0c2c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1ab737a726156b3474897e2283525b46aa"/><section>
    <title>uninitialized_value_construct_n()</title>
<indexterm><primary>uninitialized_value_construct_n</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>uninitialized_value_construct_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::uninitialized_value_construct_n (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _Size __n)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_ab737a726156b3474897e2283525b46aa_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a275f04febe0d9145fede11f1d1627a2d"/><section>
    <title>unique()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>unique</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>unique</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::unique (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a275f04febe0d9145fede11f1d1627a2d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b"/><section>
    <title>unique()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>unique</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>unique</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator &gt; std::unique (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1a02827fc3005a9ac8b6e3d39478529b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a1a02827fc3005a9ac8b6e3d39478529b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1addc3e78fa4058506fec441905945106a"/><section>
    <title>unique_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>unique_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::unique_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_addc3e78fa4058506fec441905945106a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9"/><section>
    <title>unique_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>unique_copy</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt; _ExecutionPolicy, _ForwardIterator2 &gt; std::unique_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a5dca0b0436966649ae7ffb41cf4c67d9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacestd_a5dca0b0436966649ae7ffb41cf4c67d9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespacestd_1a62381ea7149c93b6d057c647ff1d1c49"/><section>
    <title>__denorm_min_v</title>
<indexterm><primary>__denorm_min_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__denorm_min_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__denorm_min_v = <link linkend="_structstd_1_1____denorm__min">__denorm_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1ab4cb32ee09031f5ba80a0c177ad45b30"/><section>
    <title>__digits10_v</title>
<indexterm><primary>__digits10_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__digits10_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__digits10_v = <link linkend="_structstd_1_1____digits10">__digits10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a3b0642926b321992beb023600ace989e"/><section>
    <title>__digits_v</title>
<indexterm><primary>__digits_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__digits_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__digits_v = <link linkend="_structstd_1_1____digits">__digits</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a3760ff6d7b14de23097c9a1e007ae635"/><section>
    <title>__epsilon_v</title>
<indexterm><primary>__epsilon_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__epsilon_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__epsilon_v = <link linkend="_structstd_1_1____epsilon">__epsilon</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a0d8da259a6a4c3a911b5a4f46a91bd65"/><section>
    <title>__finite_max_v</title>
<indexterm><primary>__finite_max_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__finite_max_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__finite_max_v = <link linkend="_structstd_1_1____finite__max">__finite_max</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1af108d927d1d48c236ee58f02e1f66206"/><section>
    <title>__finite_min_v</title>
<indexterm><primary>__finite_min_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__finite_min_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__finite_min_v = <link linkend="_structstd_1_1____finite__min">__finite_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a18c96fc1fd03305b7bffd337c2911751"/><section>
    <title>__has_iec559_behavior_v</title>
<indexterm><primary>__has_iec559_behavior_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__has_iec559_behavior_v</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename &gt; class _Trait, typename _Tp &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> std::__has_iec559_behavior_v = <link linkend="_structstd_1_1____has__iec559__behavior">__has_iec559_behavior</link>&lt;_Trait, _Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1aa15f4d72f6eb58958e3763c45a2dfcdc"/><section>
    <title>__has_iec559_storage_format_v</title>
<indexterm><primary>__has_iec559_storage_format_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__has_iec559_storage_format_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> std::__has_iec559_storage_format_v = <link linkend="_structstd_1_1____has__iec559__storage__format">__has_iec559_storage_format</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a459ce5336666d09ed2cbda6902f8d464"/><section>
    <title>__infinity_v</title>
<indexterm><primary>__infinity_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__infinity_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__infinity_v = <link linkend="_structstd_1_1____infinity">__infinity</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1aad62a7deedbdb38c20d9a5e398cdd4b9"/><section>
    <title>__max_digits10_v</title>
<indexterm><primary>__max_digits10_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__max_digits10_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__max_digits10_v = <link linkend="_structstd_1_1____max__digits10">__max_digits10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a70b9e37a46d30c3c7bb2f38e88d40802"/><section>
    <title>__max_exponent10_v</title>
<indexterm><primary>__max_exponent10_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__max_exponent10_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__max_exponent10_v = <link linkend="_structstd_1_1____max__exponent10">__max_exponent10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a13620c564d7575a1e3c9057a9b42d4b1"/><section>
    <title>__max_exponent_v</title>
<indexterm><primary>__max_exponent_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__max_exponent_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__max_exponent_v = <link linkend="_structstd_1_1____max__exponent">__max_exponent</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a40b4fcdd5587c393e222b408e5747b09"/><section>
    <title>__min_exponent10_v</title>
<indexterm><primary>__min_exponent10_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__min_exponent10_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__min_exponent10_v = <link linkend="_structstd_1_1____min__exponent10">__min_exponent10</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a1299ac5d8f27c5d9767c12358ca28971"/><section>
    <title>__min_exponent_v</title>
<indexterm><primary>__min_exponent_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__min_exponent_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__min_exponent_v = <link linkend="_structstd_1_1____min__exponent">__min_exponent</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1ae82e3e386cb77c5f9df37f8a7e4002f8"/><section>
    <title>__norm_min_v</title>
<indexterm><primary>__norm_min_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__norm_min_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__norm_min_v = <link linkend="_structstd_1_1____norm__min">__norm_min</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a739eba7491f4e358b44a95d43570d4bf"/><section>
    <title>__quiet_NaN_v</title>
<indexterm><primary>__quiet_NaN_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__quiet_NaN_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__quiet_NaN_v = <link linkend="_structstd_1_1____quiet___na_n">__quiet_NaN</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a511c20ecb8405016527733b89d3aada3"/><section>
    <title>__radix_v</title>
<indexterm><primary>__radix_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__radix_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__radix_v = <link linkend="_structstd_1_1____radix">__radix</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1ab133749ec0bcee1e1f914509b5512cb4"/><section>
    <title>__reciprocal_overflow_threshold_v</title>
<indexterm><primary>__reciprocal_overflow_threshold_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__reciprocal_overflow_threshold_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__reciprocal_overflow_threshold_v = <link linkend="_structstd_1_1____reciprocal__overflow__threshold">__reciprocal_overflow_threshold</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a95c232e9e27c7f3d49016b0732483957"/><section>
    <title>__round_error_v</title>
<indexterm><primary>__round_error_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__round_error_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__round_error_v = <link linkend="_structstd_1_1____round__error">__round_error</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1a2d6041736fd2bd49d6492956f0b85f8f"/><section>
    <title>__signaling_NaN_v</title>
<indexterm><primary>__signaling_NaN_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__signaling_NaN_v</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>constexpr auto std::__signaling_NaN_v = <link linkend="_structstd_1_1____signaling___na_n">__signaling_NaN</link>&lt;_Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacestd_1aa7ae232fbcf2790918a97f10f6ac2da4"/><section>
    <title>__value_exists_v</title>
<indexterm><primary>__value_exists_v</primary><secondary>std</secondary></indexterm>
<indexterm><primary>std</primary><secondary>__value_exists_v</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename &gt; class _Trait, typename _Tp &gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> std::__value_exists_v = <link linkend="_structstd_1_1____value__exists">__value_exists</link>&lt;_Trait, _Tp&gt;<link linkend="_classvalue">::value</link><computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
</section>
</section>
