<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/unseq_backend_simd.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/unseq_backend_simd.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;type_traits&gt;<?linebreak?>#include &quot;utils.h&quot;<?linebreak?></programlisting>Include dependency graph for unseq_backend_simd.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">__pstl::__unseq_backend::_Combiner&lt; _Tp, _BinaryOp &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespace____pstl">__pstl</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespace____pstl_1_1____unseq__backend">__pstl::__unseq_backend</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;class _Iterator , class _DifferenceType , class _Function &gt; </para><para>_Iterator <link linkend="_namespace____pstl_1_1____unseq__backend_1a2196b03264f94d6785c560717628cfd2">__pstl::__unseq_backend::__simd_walk_1</link> (_Iterator __first, _DifferenceType __n, _Function __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Iterator1 , class _DifferenceType , class _Iterator2 , class _Function &gt; </para><para>_Iterator2 <link linkend="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932">__pstl::__unseq_backend::__simd_walk_2</link> (_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Function __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Iterator1 , class _DifferenceType , class _Iterator2 , class _Iterator3 , class _Function &gt; </para><para>_Iterator3 <link linkend="_namespace____pstl_1_1____unseq__backend_1a08f3845eaf1306879cde3522c5e2d542">__pstl::__unseq_backend::__simd_walk_3</link> (_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Iterator3 __first3, _Function __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Pred &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a84dca71a2f0e2711f0e53a5894296ca7">__pstl::__unseq_backend::__simd_or</link> (_Index __first, _DifferenceType __n, _Pred __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Compare &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__pstl::__unseq_backend::__simd_first</link> (_Index __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index1 , class _DifferenceType , class _Index2 , class _Pred &gt; </para><para>std::pair&lt; _Index1, _Index2 &gt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a237b7602b1b54731b7c40f0530ec02f4">__pstl::__unseq_backend::__simd_first</link> (_Index1 __first1, _DifferenceType __n, _Index2 __first2, _Pred __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Pred &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____unseq__backend_1aa5db97c5dd4abf4d3f9e36bb4b87246d">__pstl::__unseq_backend::__simd_count</link> (_Index __index, _DifferenceType __n, _Pred __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _BinaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1a8f4a13b8b7a0ae886233c0f39105d74b">__pstl::__unseq_backend::__simd_unique_copy</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _BinaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _Assigner &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__pstl::__unseq_backend::__simd_assign</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _Assigner __assigner) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _UnaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1aed82f294600d447d733a67b243739a33">__pstl::__unseq_backend::__simd_copy_if</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _UnaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____unseq__backend_1a2a17cb1cac91c919487a9a14776a4b29">__pstl::__unseq_backend::__simd_calc_mask_2</link> (_InputIterator __first, _DifferenceType __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask, _BinaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _UnaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____unseq__backend_1ac0071b0b112cd9a2338904f168f77e46">__pstl::__unseq_backend::__simd_calc_mask_1</link> (_InputIterator __first, _DifferenceType __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask, _UnaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _Assigner &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1ab878b934153baa9dd2feb302c14a6300">__pstl::__unseq_backend::__simd_copy_by_mask</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask, _Assigner __assigner) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator1 , class _OutputIterator2 &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a496b19bf0c9d0074ec201b5925959300">__pstl::__unseq_backend::__simd_partition_by_mask</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator1 __out_true, _OutputIterator2 __out_false, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Tp &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1a983f96df75978314ca65ca251d12dcca">__pstl::__unseq_backend::__simd_fill_n</link> (_Index __first, _DifferenceType __n, const _Tp &amp;__value) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Generator &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1a688fc4a4ac7c94084efa0a2ba118fbbd">__pstl::__unseq_backend::__simd_generate_n</link> (_Index __first, _DifferenceType __size, _Generator __g) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _BinaryPredicate &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1adc51efbb93e46158542f104631cfa2e3">__pstl::__unseq_backend::__simd_adjacent_find</link> (_Index __first, _Index __last, _BinaryPredicate __pred, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __or_semantic) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _DifferenceType , typename _Tp , typename _BinaryOperation , typename _UnaryOperation &gt; </para><para>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, _Tp &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1afc12596caaca4854e89120ed63e7261e">__pstl::__unseq_backend::__simd_transform_reduce</link> (_DifferenceType __n, _Tp __init, _BinaryOperation, _UnaryOperation __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _Size , typename _Tp , typename _BinaryOperation , typename _UnaryOperation &gt; </para><para>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, _Tp &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a13b301c34c843be5a75edc3878672a5e">__pstl::__unseq_backend::__simd_transform_reduce</link> (_Size __n, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1ab2bb4d082cad248f414d6cd55326980c">__pstl::__unseq_backend::__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1abc23b8d5064c6b0534d222a9edefe155">__pstl::__unseq_backend::__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a75706353071ac21a213fb178f75d2e91">__pstl::__unseq_backend::__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a88d20e1fca48435f7a488d01ea3bc0f1">__pstl::__unseq_backend::__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Size , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1abef9031d6d8ae9b085d54cbfc8fd0b7e">__pstl::__unseq_backend::__simd_min_element</link> (_ForwardIterator __first, _Size __n, _Compare __comp) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Size , typename _Compare &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a2ed9a294e155700282c9599e705b4f90">__pstl::__unseq_backend::__simd_minmax_element</link> (_ForwardIterator __first, _Size __n, _Compare __comp) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____unseq__backend_1ac6ab4cceb121c8d40ff90ab47badf64c">__pstl::__unseq_backend::__simd_partition_copy</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _UnaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____unseq__backend_1a34b5595f5511ca6085e97c33055d6b8f">__pstl::__unseq_backend::__simd_find_first_of</link> (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _DifferenceType , class _UnaryPredicate &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1af3e3465f13790c9379d715942bfd8234">__pstl::__unseq_backend::__simd_remove_if</link> (_RandomAccessIterator __first, _DifferenceType __n, _UnaryPredicate __pred) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
