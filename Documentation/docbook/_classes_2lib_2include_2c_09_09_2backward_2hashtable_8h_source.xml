<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2backward_2hashtable_8h_source" xml:lang="en-US">
<title>hashtable.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/backward/hashtable.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Hashtable&#32;implementation&#32;used&#32;by&#32;containers&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
27 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
28 <emphasis role="comment">&#32;*</emphasis>
29 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
30 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
31 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
32 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
33 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
34 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
35 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
36 <emphasis role="comment">&#32;*</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
39 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
40 <emphasis role="comment">&#32;*</emphasis>
41 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
42 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
43 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
44 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
45 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
46 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
47 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
48 <emphasis role="comment">&#32;*</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_BACKWARD_HASHTABLE_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_BACKWARD_HASHTABLE_H&#32;1</emphasis>
58 
59 <emphasis role="comment">//&#32;Hashtable&#32;class,&#32;used&#32;to&#32;implement&#32;the&#32;hashed&#32;associative&#32;containers</emphasis>
60 <emphasis role="comment">//&#32;hash_set,&#32;hash_map,&#32;hash_multiset,&#32;and&#32;hash_multimap.</emphasis>
61 
62 <emphasis role="preprocessor">#include&#32;&lt;vector&gt;</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>
66 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
67 <emphasis role="preprocessor">#include&#32;&lt;backward/hash_fun.h&gt;</emphasis>
68 
69 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
70 {
71 _GLIBCXX_BEGIN_NAMESPACE_VERSION
72 
73 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val&gt;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_node
75 &#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_node*&#32;_M_next;
77 &#32;&#32;&#32;&#32;&#32;&#32;_Val&#32;_M_val;
78 &#32;&#32;&#32;&#32;};
79 
80 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HashFcn,&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtractKey,&#32;
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_EqualKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&#32;=&#32;std::allocator&lt;_Val&gt;&#32;&gt;
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>hashtable;
83 
84 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HashFcn,
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtractKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqualKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&gt;
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_iterator;
87 
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HashFcn,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtractKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqualKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&gt;
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_const_iterator;
91 
92 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HashFcn,
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtractKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqualKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_iterator
95 &#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HashFcn,&#32;_ExtractKey,&#32;_EqualKey,&#32;_Alloc&gt;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hashtable;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_iterator&lt;_Val,&#32;_Key,&#32;_HashFcn,
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey,&#32;_EqualKey,&#32;_Alloc&gt;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HashFcn,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey,&#32;_EqualKey,&#32;_Alloc&gt;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_node&lt;_Val&gt;&#32;_Node;
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;iterator_category;
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Val&#32;value_type;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;difference_type;
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;size_type;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Val&amp;&#32;reference;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Val*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
111 &#32;&#32;&#32;&#32;&#32;&#32;
112 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;_M_cur;
113 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable*&#32;_M_ht;
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator(_Node*&#32;__n,&#32;_Hashtable*&#32;__tab)
116 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__n),&#32;_M_ht(__tab)&#32;{&#32;}
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator()&#32;{&#32;}
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;reference
121 &#32;&#32;&#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
122 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur-&gt;_M_val;&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
125 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
126 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(operator*());&#32;}
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;iterator&amp;
129 &#32;&#32;&#32;&#32;&#32;&#32;operator++();
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;iterator
132 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>);
133 
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__it)<emphasis role="keyword">&#32;const</emphasis>
136 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur&#32;==&#32;__it._M_cur;&#32;}
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__it)<emphasis role="keyword">&#32;const</emphasis>
140 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur&#32;!=&#32;__it._M_cur;&#32;}
141 &#32;&#32;&#32;&#32;};
142 
143 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HashFcn,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtractKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqualKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&gt;
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_const_iterator
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HashFcn,&#32;_ExtractKey,&#32;_EqualKey,&#32;_Alloc&gt;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hashtable;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_iterator&lt;_Val,_Key,_HashFcn,
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey,_EqualKey,_Alloc&gt;
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HashFcn,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey,&#32;_EqualKey,&#32;_Alloc&gt;
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_node&lt;_Val&gt;&#32;_Node;
156 
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;iterator_category;
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Val&#32;value_type;
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;difference_type;
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;size_type;
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Val&amp;&#32;reference;
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Val*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
163 &#32;&#32;&#32;&#32;&#32;&#32;
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;_M_cur;
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Hashtable*&#32;_M_ht;
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator(<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Hashtable*&#32;__tab)
168 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__n),&#32;_M_ht(__tab)&#32;{&#32;}
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator()&#32;{&#32;}
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__it)
173 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cur(__it._M_cur),&#32;_M_ht(__it._M_ht)&#32;{&#32;}
174 
175 &#32;&#32;&#32;&#32;&#32;&#32;reference
176 &#32;&#32;&#32;&#32;&#32;&#32;operator*()<emphasis role="keyword">&#32;const</emphasis>
177 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur-&gt;_M_val;&#32;}
178 
179 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
180 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
181 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(operator*());&#32;}
182 
183 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&amp;
184 &#32;&#32;&#32;&#32;&#32;&#32;operator++();
185 
186 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
187 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>);
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;const_iterator&amp;&#32;__it)<emphasis role="keyword">&#32;const</emphasis>
191 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur&#32;==&#32;__it._M_cur;&#32;}
192 
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;const_iterator&amp;&#32;__it)<emphasis role="keyword">&#32;const</emphasis>
195 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cur&#32;!=&#32;__it._M_cur;&#32;}
196 &#32;&#32;&#32;&#32;};
197 
198 &#32;&#32;<emphasis role="comment">//&#32;Note:&#32;assumes&#32;long&#32;is&#32;at&#32;least&#32;32&#32;bits.</emphasis>
199 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_num_primes&#32;=&#32;29&#32;};
200 
201 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_PrimeType&gt;
202 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hashtable_prime_list
203 &#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_PrimeType&#32;&#32;__stl_prime_list[_S_num_primes];
205 
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_PrimeType*
207 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_prime_list();
208 &#32;&#32;&#32;&#32;};
209 
210 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_PrimeType&gt;&#32;<emphasis role="keyword">const</emphasis>&#32;_PrimeType
211 &#32;&#32;_Hashtable_prime_list&lt;_PrimeType&gt;::__stl_prime_list[_S_num_primes]&#32;=
212 &#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;5ul,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;53ul,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;97ul,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;193ul,&#32;&#32;&#32;&#32;&#32;&#32;&#32;389ul,
214 &#32;&#32;&#32;&#32;&#32;&#32;769ul,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1543ul,&#32;&#32;&#32;&#32;&#32;&#32;&#32;3079ul,&#32;&#32;&#32;&#32;&#32;&#32;&#32;6151ul,&#32;&#32;&#32;&#32;&#32;&#32;12289ul,
215 &#32;&#32;&#32;&#32;&#32;&#32;24593ul,&#32;&#32;&#32;&#32;&#32;&#32;49157ul,&#32;&#32;&#32;&#32;&#32;&#32;98317ul,&#32;&#32;&#32;&#32;&#32;&#32;196613ul,&#32;&#32;&#32;&#32;393241ul,
216 &#32;&#32;&#32;&#32;&#32;&#32;786433ul,&#32;&#32;&#32;&#32;&#32;1572869ul,&#32;&#32;&#32;&#32;3145739ul,&#32;&#32;&#32;&#32;6291469ul,&#32;&#32;&#32;12582917ul,
217 &#32;&#32;&#32;&#32;&#32;&#32;25165843ul,&#32;&#32;&#32;50331653ul,&#32;&#32;&#32;100663319ul,&#32;&#32;201326611ul,&#32;402653189ul,
218 &#32;&#32;&#32;&#32;&#32;&#32;805306457ul,&#32;&#32;1610612741ul,&#32;3221225473ul,&#32;4294967291ul
219 &#32;&#32;&#32;&#32;};
220 
221 &#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_PrimeType&gt;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_PrimeType*
222 &#32;_Hashtable_prime_list&lt;_PrimeType&gt;::_S_get_prime_list()
223 &#32;{
224 &#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__stl_prime_list;
225 &#32;}
226 
227 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
228 &#32;&#32;__stl_next_prime(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__n)
229 &#32;&#32;{
230 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*&#32;__first&#32;=&#32;_Hashtable_prime_list&lt;unsigned&#32;long&gt;::_S_get_prime_list();
231 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*&#32;__last&#32;=&#32;__first&#32;+&#32;(int)_S_num_primes;
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*&#32;pos&#32;=&#32;std::lower_bound(__first,&#32;__last,&#32;__n);
233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pos&#32;==&#32;__last&#32;?&#32;*(__last&#32;-&#32;1)&#32;:&#32;*pos;
234 &#32;&#32;}
235 
236 &#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declaration&#32;of&#32;operator==.&#32;&#32;</emphasis>
237 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_Ex,
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Eq,&#32;<emphasis role="keyword">class&#32;</emphasis>_All&gt;
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>hashtable;
240 
241 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_Ex,
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Eq,&#32;<emphasis role="keyword">class&#32;</emphasis>_All&gt;
243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
244 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;&amp;&#32;__ht1,
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;&amp;&#32;__ht2);
246 
247 &#32;&#32;<emphasis role="comment">//&#32;Hashtables&#32;handle&#32;allocators&#32;a&#32;bit&#32;differently&#32;than&#32;other</emphasis>
248 &#32;&#32;<emphasis role="comment">//&#32;containers&#32;do.&#32;&#32;If&#32;we&apos;re&#32;using&#32;standard-conforming&#32;allocators,&#32;then</emphasis>
249 &#32;&#32;<emphasis role="comment">//&#32;a&#32;hashtable&#32;unconditionally&#32;has&#32;a&#32;member&#32;variable&#32;to&#32;hold&#32;its</emphasis>
250 &#32;&#32;<emphasis role="comment">//&#32;allocator,&#32;even&#32;if&#32;it&#32;so&#32;happens&#32;that&#32;all&#32;instances&#32;of&#32;the</emphasis>
251 &#32;&#32;<emphasis role="comment">//&#32;allocator&#32;type&#32;are&#32;identical.&#32;&#32;This&#32;is&#32;because,&#32;for&#32;hashtables,</emphasis>
252 &#32;&#32;<emphasis role="comment">//&#32;this&#32;extra&#32;storage&#32;is&#32;negligible.&#32;&#32;Additionally,&#32;a&#32;base&#32;class</emphasis>
253 &#32;&#32;<emphasis role="comment">//&#32;wouldn&apos;t&#32;serve&#32;any&#32;other&#32;purposes;&#32;it&#32;wouldn&apos;t,&#32;for&#32;example,</emphasis>
254 &#32;&#32;<emphasis role="comment">//&#32;simplify&#32;the&#32;exception-handling&#32;code.&#32;&#32;</emphasis>
255 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HashFcn,
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_ExtractKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqualKey,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&gt;
257 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>hashtable
258 &#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Key&#32;key_type;
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Val&#32;value_type;
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_HashFcn&#32;hasher;
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_EqualKey&#32;key_equal;
264 
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;const_pointer;
269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;const_reference;
271 
272 &#32;&#32;&#32;&#32;&#32;&#32;hasher
273 &#32;&#32;&#32;&#32;&#32;&#32;hash_funct()<emphasis role="keyword">&#32;const</emphasis>
274 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_hash;&#32;}
275 
276 &#32;&#32;&#32;&#32;&#32;&#32;key_equal
277 &#32;&#32;&#32;&#32;&#32;&#32;key_eq()<emphasis role="keyword">&#32;const</emphasis>
278 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_equals;&#32;}
279 
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_node&lt;_Val&gt;&#32;_Node;
282 
283 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
285 &#32;&#32;&#32;&#32;rebind&lt;value_type&gt;::other&#32;allocator_type;
286 
287 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
288 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()<emphasis role="keyword">&#32;const</emphasis>
289 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_node_allocator;&#32;}
290 
291 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;allocator_type&gt;&#32;_Alloc_traits;
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::template&#32;rebind&lt;_Node&gt;::other
294 &#32;&#32;&#32;&#32;_Node_Alloc;
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::template&#32;rebind&lt;_Node*&gt;::other
296 &#32;&#32;&#32;&#32;_Nodeptr_Alloc;
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::vector&lt;_Node*,&#32;_Nodeptr_Alloc&gt;&#32;_Vector_type;
298 
299 &#32;&#32;&#32;&#32;&#32;&#32;_Node_Alloc&#32;_M_node_allocator;
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;_Node*
302 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_node()
303 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_node_allocator.allocate(1);&#32;}
304 
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(_Node*&#32;__p)
307 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_node_allocator.deallocate(__p,&#32;1);&#32;}
308 
309 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
310 &#32;&#32;&#32;&#32;&#32;&#32;hasher&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_hash;
311 &#32;&#32;&#32;&#32;&#32;&#32;key_equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_equals;
312 &#32;&#32;&#32;&#32;&#32;&#32;_ExtractKey&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_key;
313 &#32;&#32;&#32;&#32;&#32;&#32;_Vector_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buckets;
314 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_num_elements;
315 &#32;&#32;&#32;&#32;&#32;&#32;
316 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_iterator&lt;_Val,&#32;_Key,&#32;_HashFcn,&#32;_ExtractKey,
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_EqualKey,&#32;_Alloc&gt;
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HashFcn,&#32;_ExtractKey,
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_EqualKey,&#32;_Alloc&gt;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_iterator&lt;_Val,&#32;_Key,&#32;_HashFcn,&#32;_ExtractKey,&#32;_EqualKey,&#32;_Alloc&gt;;
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HashFcn,&#32;_ExtractKey,
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_EqualKey,&#32;_Alloc&gt;;
330 
331 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
332 &#32;&#32;&#32;&#32;&#32;&#32;hashtable(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_HashFcn&amp;&#32;__hf,
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_EqualKey&amp;&#32;__eql,&#32;<emphasis role="keyword">const</emphasis>&#32;_ExtractKey&amp;&#32;__ext,
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
335 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node_allocator(__a),&#32;_M_hash(__hf),&#32;_M_equals(__eql),
336 &#32;&#32;&#32;&#32;_M_get_key(__ext),&#32;_M_buckets(__a),&#32;_M_num_elements(0)
337 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_buckets(__n);&#32;}
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;hashtable(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_HashFcn&amp;&#32;__hf,
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_EqualKey&amp;&#32;__eql,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
342 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node_allocator(__a),&#32;_M_hash(__hf),&#32;_M_equals(__eql),
343 &#32;&#32;&#32;&#32;_M_get_key(_ExtractKey()),&#32;_M_buckets(__a),&#32;_M_num_elements(0)
344 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_buckets(__n);&#32;}
345 
346 &#32;&#32;&#32;&#32;&#32;&#32;hashtable(<emphasis role="keyword">const</emphasis>&#32;hashtable&amp;&#32;__ht)
347 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node_allocator(__ht.get_allocator()),&#32;_M_hash(__ht._M_hash),
348 &#32;&#32;&#32;&#32;&#32;&#32;_M_equals(__ht._M_equals),&#32;_M_get_key(__ht._M_get_key),
349 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets(__ht.get_allocator()),&#32;_M_num_elements(0)
350 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_copy_from(__ht);&#32;}
351 
352 &#32;&#32;&#32;&#32;&#32;&#32;hashtable&amp;
353 &#32;&#32;&#32;&#32;&#32;&#32;operator=&#32;(<emphasis role="keyword">const</emphasis>&#32;hashtable&amp;&#32;__ht)
354 &#32;&#32;&#32;&#32;&#32;&#32;{
355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;__ht&#32;!=&#32;<emphasis role="keyword">this</emphasis>)
356 &#32;&#32;&#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clear();
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_hash&#32;=&#32;__ht._M_hash;
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_equals&#32;=&#32;__ht._M_equals;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_key&#32;=&#32;__ht._M_get_key;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_copy_from(__ht);
362 &#32;&#32;&#32;&#32;&#32;&#32;}
363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
364 &#32;&#32;&#32;&#32;&#32;&#32;}
365 
366 &#32;&#32;&#32;&#32;&#32;&#32;~hashtable()
367 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;clear();&#32;}
368 
369 &#32;&#32;&#32;&#32;&#32;&#32;size_type
370 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const</emphasis>
371 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_num_elements;&#32;}
372 
373 &#32;&#32;&#32;&#32;&#32;&#32;size_type
374 &#32;&#32;&#32;&#32;&#32;&#32;max_size()<emphasis role="keyword">&#32;const</emphasis>
375 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;size_type(-1);&#32;}
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;empty()<emphasis role="keyword">&#32;const</emphasis>
379 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;==&#32;0;&#32;}
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
382 &#32;&#32;&#32;&#32;&#32;&#32;swap(hashtable&amp;&#32;__ht)
383 &#32;&#32;&#32;&#32;&#32;&#32;{
384 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_hash,&#32;__ht._M_hash);
385 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_equals,&#32;__ht._M_equals);
386 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_get_key,&#32;__ht._M_get_key);
387 &#32;&#32;&#32;&#32;_M_buckets.swap(__ht._M_buckets);
388 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_num_elements,&#32;__ht._M_num_elements);
389 &#32;&#32;&#32;&#32;&#32;&#32;}
390 
391 &#32;&#32;&#32;&#32;&#32;&#32;iterator
392 &#32;&#32;&#32;&#32;&#32;&#32;begin()
393 &#32;&#32;&#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__n&#32;=&#32;0;&#32;__n&#32;&lt;&#32;_M_buckets.size();&#32;++__n)
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_buckets[__n])
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_buckets[__n],&#32;<emphasis role="keyword">this</emphasis>);
397 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
398 &#32;&#32;&#32;&#32;&#32;&#32;}
399 
400 &#32;&#32;&#32;&#32;&#32;&#32;iterator
401 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()
402 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(0,&#32;<emphasis role="keyword">this</emphasis>);&#32;}
403 
404 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
405 &#32;&#32;&#32;&#32;&#32;&#32;begin()<emphasis role="keyword">&#32;const</emphasis>
406 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__n&#32;=&#32;0;&#32;__n&#32;&lt;&#32;_M_buckets.size();&#32;++__n)
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_buckets[__n])
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_buckets[__n],&#32;<emphasis role="keyword">this</emphasis>);
410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
411 &#32;&#32;&#32;&#32;&#32;&#32;}
412 
413 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
414 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()<emphasis role="keyword">&#32;const</emphasis>
415 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(0,&#32;<emphasis role="keyword">this</emphasis>);&#32;}
416 
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Vl,&#32;<emphasis role="keyword">class&#32;</emphasis>_Ky,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_Ex,&#32;<emphasis role="keyword">class&#32;</emphasis>_Eq,
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Al&gt;
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Vl,&#32;_Ky,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_Al&gt;&amp;,
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Vl,&#32;_Ky,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_Al&gt;&amp;);
422 
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
424 &#32;&#32;&#32;&#32;&#32;&#32;size_type
425 &#32;&#32;&#32;&#32;&#32;&#32;bucket_count()<emphasis role="keyword">&#32;const</emphasis>
426 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_buckets.size();&#32;}
427 
428 &#32;&#32;&#32;&#32;&#32;&#32;size_type
429 &#32;&#32;&#32;&#32;&#32;&#32;max_bucket_count()<emphasis role="keyword">&#32;const</emphasis>
430 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Hashtable_prime_list&lt;unsigned&#32;long&gt;::
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_get_prime_list()[(int)_S_num_primes&#32;-&#32;1];
432 &#32;&#32;&#32;&#32;&#32;&#32;}
433 
434 &#32;&#32;&#32;&#32;&#32;&#32;size_type
435 &#32;&#32;&#32;&#32;&#32;&#32;elems_in_bucket(size_type&#32;__bucket)<emphasis role="keyword">&#32;const</emphasis>
436 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
437 &#32;&#32;&#32;&#32;size_type&#32;__result&#32;=&#32;0;
438 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Node*&#32;__n&#32;=&#32;_M_buckets[__bucket];&#32;__n;&#32;__n&#32;=&#32;__n-&gt;_M_next)
439 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+=&#32;1;
440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
441 &#32;&#32;&#32;&#32;&#32;&#32;}
442 
443 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
444 &#32;&#32;&#32;&#32;&#32;&#32;insert_unique(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj)
445 &#32;&#32;&#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;resize(_M_num_elements&#32;+&#32;1);
447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_unique_noresize(__obj);
448 &#32;&#32;&#32;&#32;&#32;&#32;}
449 
450 &#32;&#32;&#32;&#32;&#32;&#32;iterator
451 &#32;&#32;&#32;&#32;&#32;&#32;insert_equal(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj)
452 &#32;&#32;&#32;&#32;&#32;&#32;{
453 &#32;&#32;&#32;&#32;resize(_M_num_elements&#32;+&#32;1);
454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_equal_noresize(__obj);
455 &#32;&#32;&#32;&#32;&#32;&#32;}
456 
457 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
458 &#32;&#32;&#32;&#32;&#32;&#32;insert_unique_noresize(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj);
459 
460 &#32;&#32;&#32;&#32;&#32;&#32;iterator
461 &#32;&#32;&#32;&#32;&#32;&#32;insert_equal_noresize(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj);
462 
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_unique(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l)
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;insert_unique(__f,&#32;__l,&#32;std::__iterator_category(__f));&#32;}
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_equal(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l)
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;insert_equal(__f,&#32;__l,&#32;std::__iterator_category(__f));&#32;}
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_unique(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l,
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;;&#32;__f&#32;!=&#32;__l;&#32;++__f)
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_unique(*__f);
480 &#32;&#32;&#32;&#32;}
481 
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_equal(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l,
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag)
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;;&#32;__f&#32;!=&#32;__l;&#32;++__f)
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_equal(*__f);
489 &#32;&#32;&#32;&#32;}
490 
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_unique(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__l,
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;std::distance(__f,&#32;__l);
497 &#32;&#32;&#32;&#32;&#32;&#32;resize(_M_num_elements&#32;+&#32;__n);
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;++__f)
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_unique_noresize(*__f);
500 &#32;&#32;&#32;&#32;}
501 
502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_equal(_ForwardIterator&#32;__f,&#32;_ForwardIterator&#32;__l,
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag)
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
507 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;std::distance(__f,&#32;__l);
508 &#32;&#32;&#32;&#32;&#32;&#32;resize(_M_num_elements&#32;+&#32;__n);
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(&#32;;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;++__f)
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_equal_noresize(*__f);
511 &#32;&#32;&#32;&#32;}
512 
513 &#32;&#32;&#32;&#32;&#32;&#32;reference
514 &#32;&#32;&#32;&#32;&#32;&#32;find_or_insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj);
515 
516 &#32;&#32;&#32;&#32;&#32;&#32;iterator
517 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
518 &#32;&#32;&#32;&#32;&#32;&#32;{
519 &#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num_key(__key);
520 &#32;&#32;&#32;&#32;_Node*&#32;__first;
521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__first&#32;=&#32;_M_buckets[__n];
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;&amp;&amp;&#32;!_M_equals(_M_get_key(__first-&gt;_M_val),&#32;__key);
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__first-&gt;_M_next)
524 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
525 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(__first,&#32;<emphasis role="keyword">this</emphasis>);
526 &#32;&#32;&#32;&#32;&#32;&#32;}
527 
528 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
529 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
530 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
531 &#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num_key(__key);
532 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__first;
533 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__first&#32;=&#32;_M_buckets[__n];
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;&amp;&amp;&#32;!_M_equals(_M_get_key(__first-&gt;_M_val),&#32;__key);
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__first-&gt;_M_next)
536 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
537 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(__first,&#32;<emphasis role="keyword">this</emphasis>);
538 &#32;&#32;&#32;&#32;&#32;&#32;}
539 
540 &#32;&#32;&#32;&#32;&#32;&#32;size_type
541 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
542 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
543 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num_key(__key);
544 &#32;&#32;&#32;&#32;size_type&#32;__result&#32;=&#32;0;
545 &#32;&#32;&#32;&#32;
546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__cur&#32;=&#32;_M_buckets[__n];&#32;__cur;
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__cur-&gt;_M_next)
548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_equals(_M_get_key(__cur-&gt;_M_val),&#32;__key))
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
551 &#32;&#32;&#32;&#32;&#32;&#32;}
552 
553 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
554 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key);
555 
556 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
557 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)&#32;<emphasis role="keyword">const</emphasis>;
558 
559 &#32;&#32;&#32;&#32;&#32;&#32;size_type
560 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key);
561 &#32;&#32;&#32;&#32;&#32;&#32;
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
563 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__it);
564 
565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
566 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last);
567 
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;const_iterator&amp;&#32;__it);
570 
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
572 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last);
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
575 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__num_elements_hint);
576 
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;clear();
579 
580 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
581 &#32;&#32;&#32;&#32;&#32;&#32;size_type
582 &#32;&#32;&#32;&#32;&#32;&#32;_M_next_size(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
583 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__stl_next_prime(__n);&#32;}
584 
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
586 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_buckets(size_type&#32;__n)
587 &#32;&#32;&#32;&#32;&#32;&#32;{
588 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n_buckets&#32;=&#32;_M_next_size(__n);
589 &#32;&#32;&#32;&#32;_M_buckets.reserve(__n_buckets);
590 &#32;&#32;&#32;&#32;_M_buckets.insert(_M_buckets.end(),&#32;__n_buckets,&#32;(_Node*)&#32;0);
591 &#32;&#32;&#32;&#32;_M_num_elements&#32;=&#32;0;
592 &#32;&#32;&#32;&#32;&#32;&#32;}
593 
594 &#32;&#32;&#32;&#32;&#32;&#32;size_type
595 &#32;&#32;&#32;&#32;&#32;&#32;_M_bkt_num_key(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
596 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bkt_num_key(__key,&#32;_M_buckets.size());&#32;}
597 
598 &#32;&#32;&#32;&#32;&#32;&#32;size_type
599 &#32;&#32;&#32;&#32;&#32;&#32;_M_bkt_num(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj)<emphasis role="keyword">&#32;const</emphasis>
600 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bkt_num_key(_M_get_key(__obj));&#32;}
601 
602 &#32;&#32;&#32;&#32;&#32;&#32;size_type
603 &#32;&#32;&#32;&#32;&#32;&#32;_M_bkt_num_key(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key,&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
604 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_hash(__key)&#32;%&#32;__n;&#32;}
605 
606 &#32;&#32;&#32;&#32;&#32;&#32;size_type
607 &#32;&#32;&#32;&#32;&#32;&#32;_M_bkt_num(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj,&#32;std::size_t&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
608 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bkt_num_key(_M_get_key(__obj),&#32;__n);&#32;}
609 
610 &#32;&#32;&#32;&#32;&#32;&#32;_Node*
611 &#32;&#32;&#32;&#32;&#32;&#32;_M_new_node(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj)
612 &#32;&#32;&#32;&#32;&#32;&#32;{
613 &#32;&#32;&#32;&#32;_Node*&#32;__n&#32;=&#32;_M_get_node();
614 &#32;&#32;&#32;&#32;__n-&gt;_M_next&#32;=&#32;0;
615 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
616 &#32;&#32;&#32;&#32;&#32;&#32;{
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type&#32;__a&#32;=&#32;this-&gt;get_allocator();
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::construct(__a,&#32;&amp;__n-&gt;_M_val,&#32;__obj);
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
620 &#32;&#32;&#32;&#32;&#32;&#32;}
621 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
622 &#32;&#32;&#32;&#32;&#32;&#32;{
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(__n);
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
625 &#32;&#32;&#32;&#32;&#32;&#32;}
626 &#32;&#32;&#32;&#32;&#32;&#32;}
627 
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(_Node*&#32;__n)
630 &#32;&#32;&#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;allocator_type&#32;__a&#32;=&#32;this-&gt;get_allocator();
632 &#32;&#32;&#32;&#32;_Alloc_traits::destroy(__a,&#32;&amp;__n-&gt;_M_val);
633 &#32;&#32;&#32;&#32;_M_put_node(__n);
634 &#32;&#32;&#32;&#32;&#32;&#32;}
635 &#32;&#32;&#32;&#32;&#32;&#32;
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
637 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_bucket(<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n,&#32;_Node*&#32;__first,&#32;_Node*&#32;__last);
638 
639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_bucket(<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n,&#32;_Node*&#32;__last);
641 
642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;_M_copy_from(<emphasis role="keyword">const</emphasis>&#32;hashtable&amp;&#32;__ht);
644 &#32;&#32;&#32;&#32;};
645 
646 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_ExK,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqK,
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_All&gt;
648 &#32;&#32;&#32;&#32;_Hashtable_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;&amp;
649 &#32;&#32;&#32;&#32;_Hashtable_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;::
650 &#32;&#32;&#32;&#32;operator++()
651 &#32;&#32;&#32;&#32;{
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__old&#32;=&#32;_M_cur;
653 &#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;=&#32;_M_cur-&gt;_M_next;
654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_cur)
655 &#32;&#32;&#32;&#32;{
656 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__bucket&#32;=&#32;_M_ht-&gt;_M_bkt_num(__old-&gt;_M_val);
657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!_M_cur&#32;&amp;&amp;&#32;++__bucket&#32;&lt;&#32;_M_ht-&gt;_M_buckets.size())
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;=&#32;_M_ht-&gt;_M_buckets[__bucket];
659 &#32;&#32;&#32;&#32;}
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
661 &#32;&#32;&#32;&#32;}
662 
663 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_ExK,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqK,
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_All&gt;
665 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Hashtable_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;
666 &#32;&#32;&#32;&#32;_Hashtable_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;::
667 &#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
668 &#32;&#32;&#32;&#32;{
669 &#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
670 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
671 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
672 &#32;&#32;&#32;&#32;}
673 
674 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_ExK,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqK,
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_All&gt;
676 &#32;&#32;&#32;&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;&amp;
677 &#32;&#32;&#32;&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;::
678 &#32;&#32;&#32;&#32;operator++()
679 &#32;&#32;&#32;&#32;{
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__old&#32;=&#32;_M_cur;
681 &#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;=&#32;_M_cur-&gt;_M_next;
682 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_cur)
683 &#32;&#32;&#32;&#32;{
684 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__bucket&#32;=&#32;_M_ht-&gt;_M_bkt_num(__old-&gt;_M_val);
685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!_M_cur&#32;&amp;&amp;&#32;++__bucket&#32;&lt;&#32;_M_ht-&gt;_M_buckets.size())
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_cur&#32;=&#32;_M_ht-&gt;_M_buckets[__bucket];
687 &#32;&#32;&#32;&#32;}
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
689 &#32;&#32;&#32;&#32;}
690 
691 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_ExK,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqK,
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_All&gt;
693 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;
694 &#32;&#32;&#32;&#32;_Hashtable_const_iterator&lt;_Val,&#32;_Key,&#32;_HF,&#32;_ExK,&#32;_EqK,&#32;_All&gt;::
695 &#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
696 &#32;&#32;&#32;&#32;{
697 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
698 &#32;&#32;&#32;&#32;&#32;&#32;++*<emphasis role="keyword">this</emphasis>;
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
700 &#32;&#32;&#32;&#32;}
701 
702 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
703 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
704 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;&amp;&#32;__ht1,
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;&amp;&#32;__ht2)
706 &#32;&#32;&#32;&#32;{
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::_Node&#32;_Node;
708 
709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ht1._M_buckets.size()&#32;!=&#32;__ht2._M_buckets.size())
710 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
711 
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(std::size_t&#32;__n&#32;=&#32;0;&#32;__n&#32;&lt;&#32;__ht1._M_buckets.size();&#32;++__n)
713 &#32;&#32;&#32;&#32;{
714 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__cur1&#32;=&#32;__ht1._M_buckets[__n];
715 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__cur2&#32;=&#32;__ht2._M_buckets[__n];
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;same&#32;length&#32;of&#32;lists</emphasis>
717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__cur1&#32;&amp;&amp;&#32;__cur2;
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur1&#32;=&#32;__cur1-&gt;_M_next,&#32;__cur2&#32;=&#32;__cur2-&gt;_M_next)
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}&#32;
720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__cur1&#32;||&#32;__cur2)
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;check&#32;one&apos;s&#32;elements&#32;are&#32;in&#32;the&#32;other</emphasis>
723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__cur1&#32;=&#32;__ht1._M_buckets[__n]&#32;;&#32;__cur1;
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur1&#32;=&#32;__cur1-&gt;_M_next)
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_found__cur1&#32;=&#32;<emphasis role="keyword">false</emphasis>;
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__cur2&#32;=&#32;__ht2._M_buckets[__n];
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur2;&#32;__cur2&#32;=&#32;__cur2-&gt;_M_next)
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__cur1-&gt;_M_val&#32;==&#32;__cur2-&gt;_M_val)
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_found__cur1&#32;=&#32;<emphasis role="keyword">true</emphasis>;
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_found__cur1)
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
739 &#32;&#32;&#32;&#32;}
740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
741 &#32;&#32;&#32;&#32;}
742 
743 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
744 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
745 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;&amp;&#32;__ht1,
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;&amp;&#32;__ht2)
747 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__ht1&#32;==&#32;__ht2);&#32;}
748 
749 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Val,&#32;<emphasis role="keyword">class&#32;</emphasis>_Key,&#32;<emphasis role="keyword">class&#32;</emphasis>_HF,&#32;<emphasis role="keyword">class&#32;</emphasis>_Extract,&#32;<emphasis role="keyword">class&#32;</emphasis>_EqKey,
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_All&gt;
751 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
752 &#32;&#32;&#32;&#32;swap(hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Extract,&#32;_EqKey,&#32;_All&gt;&amp;&#32;__ht1,
753 &#32;&#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Extract,&#32;_EqKey,&#32;_All&gt;&amp;&#32;__ht2)
754 &#32;&#32;&#32;&#32;{&#32;__ht1.swap(__ht2);&#32;}
755 
756 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
757 &#32;&#32;&#32;&#32;std::pair&lt;typename&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::iterator,
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
759 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
760 &#32;&#32;&#32;&#32;insert_unique_noresize(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj)
761 &#32;&#32;&#32;&#32;{
762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num(__obj);
763 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__first&#32;=&#32;_M_buckets[__n];
764 &#32;&#32;&#32;&#32;&#32;&#32;
765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Node*&#32;__cur&#32;=&#32;__first;&#32;__cur;&#32;__cur&#32;=&#32;__cur-&gt;_M_next)
766 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_equals(_M_get_key(__cur-&gt;_M_val),&#32;_M_get_key(__obj)))
767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;iterator,&#32;bool&gt;(iterator(__cur,&#32;<emphasis role="keyword">this</emphasis>),&#32;<emphasis role="keyword">false</emphasis>);
768 &#32;&#32;&#32;&#32;&#32;&#32;
769 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_new_node(__obj);
770 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_next&#32;=&#32;__first;
771 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__n]&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
772 &#32;&#32;&#32;&#32;&#32;&#32;++_M_num_elements;
773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pair&lt;iterator,&#32;bool&gt;(iterator(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<emphasis role="keyword">this</emphasis>),&#32;<emphasis role="keyword">true</emphasis>);
774 &#32;&#32;&#32;&#32;}
775 
776 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
777 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::iterator
778 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
779 &#32;&#32;&#32;&#32;insert_equal_noresize(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj)
780 &#32;&#32;&#32;&#32;{
781 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num(__obj);
782 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__first&#32;=&#32;_M_buckets[__n];
783 &#32;&#32;&#32;&#32;&#32;&#32;
784 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Node*&#32;__cur&#32;=&#32;__first;&#32;__cur;&#32;__cur&#32;=&#32;__cur-&gt;_M_next)
785 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_equals(_M_get_key(__cur-&gt;_M_val),&#32;_M_get_key(__obj)))
786 &#32;&#32;&#32;&#32;&#32;&#32;{
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_new_node(__obj);
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_next&#32;=&#32;__cur-&gt;_M_next;
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur-&gt;_M_next&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++_M_num_elements;
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<emphasis role="keyword">this</emphasis>);
792 &#32;&#32;&#32;&#32;&#32;&#32;}
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_new_node(__obj);
795 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_next&#32;=&#32;__first;
796 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__n]&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
797 &#32;&#32;&#32;&#32;&#32;&#32;++_M_num_elements;
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;<emphasis role="keyword">this</emphasis>);
799 &#32;&#32;&#32;&#32;}
800 
801 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
802 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::reference
803 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
804 &#32;&#32;&#32;&#32;find_or_insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__obj)
805 &#32;&#32;&#32;&#32;{
806 &#32;&#32;&#32;&#32;&#32;&#32;resize(_M_num_elements&#32;+&#32;1);
807 
808 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num(__obj);
809 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__first&#32;=&#32;_M_buckets[__n];
810 &#32;&#32;&#32;&#32;&#32;&#32;
811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Node*&#32;__cur&#32;=&#32;__first;&#32;__cur;&#32;__cur&#32;=&#32;__cur-&gt;_M_next)
812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_equals(_M_get_key(__cur-&gt;_M_val),&#32;_M_get_key(__obj)))
813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur-&gt;_M_val;
814 &#32;&#32;&#32;&#32;&#32;&#32;
815 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_new_node(__obj);
816 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_next&#32;=&#32;__first;
817 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__n]&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
818 &#32;&#32;&#32;&#32;&#32;&#32;++_M_num_elements;
819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_val;
820 &#32;&#32;&#32;&#32;}
821 
822 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
823 &#32;&#32;&#32;&#32;std::pair&lt;typename&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::iterator,
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::iterator&gt;
825 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
826 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
827 &#32;&#32;&#32;&#32;{
828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;iterator,&#32;iterator&gt;&#32;_Pii;
829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num_key(__key);
830 
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Node*&#32;__first&#32;=&#32;_M_buckets[__n];&#32;__first;
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__first-&gt;_M_next)
833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_equals(_M_get_key(__first-&gt;_M_val),&#32;__key))
834 &#32;&#32;&#32;&#32;&#32;&#32;{
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Node*&#32;__cur&#32;=&#32;__first-&gt;_M_next;&#32;__cur;
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__cur-&gt;_M_next)
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_equals(_M_get_key(__cur-&gt;_M_val),&#32;__key))
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(iterator(__first,&#32;<emphasis role="keyword">this</emphasis>),&#32;iterator(__cur,&#32;<emphasis role="keyword">this</emphasis>));
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__m&#32;=&#32;__n&#32;+&#32;1;&#32;__m&#32;&lt;&#32;_M_buckets.size();&#32;++__m)
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_buckets[__m])
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(iterator(__first,&#32;<emphasis role="keyword">this</emphasis>),
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(_M_buckets[__m],&#32;<emphasis role="keyword">this</emphasis>));
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(iterator(__first,&#32;<emphasis role="keyword">this</emphasis>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
844 &#32;&#32;&#32;&#32;&#32;&#32;}
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
846 &#32;&#32;&#32;&#32;}
847 
848 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
849 &#32;&#32;&#32;&#32;std::pair&lt;
850 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::const_iterator,
851 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::const_iterator&gt;
852 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
853 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
854 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
855 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;&#32;_Pii;
856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num_key(__key);
857 
858 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__first&#32;=&#32;_M_buckets[__n];&#32;__first;
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__first-&gt;_M_next)
860 &#32;&#32;&#32;&#32;{
861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_equals(_M_get_key(__first-&gt;_M_val),&#32;__key))
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__cur&#32;=&#32;__first-&gt;_M_next;&#32;__cur;
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__cur-&gt;_M_next)
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_equals(_M_get_key(__cur-&gt;_M_val),&#32;__key))
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(const_iterator(__first,&#32;<emphasis role="keyword">this</emphasis>),
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator(__cur,&#32;<emphasis role="keyword">this</emphasis>));
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__m&#32;=&#32;__n&#32;+&#32;1;&#32;__m&#32;&lt;&#32;_M_buckets.size();&#32;++__m)
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_buckets[__m])
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(const_iterator(__first,&#32;<emphasis role="keyword">this</emphasis>),
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator(_M_buckets[__m],&#32;<emphasis role="keyword">this</emphasis>));
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(const_iterator(__first,&#32;<emphasis role="keyword">this</emphasis>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
874 &#32;&#32;&#32;&#32;}
875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Pii(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
876 &#32;&#32;&#32;&#32;}
877 
878 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
879 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::size_type
880 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
881 &#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
882 &#32;&#32;&#32;&#32;{
883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num_key(__key);
884 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__first&#32;=&#32;_M_buckets[__n];
885 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__saved_slot&#32;=&#32;0;
886 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__erased&#32;=&#32;0;
887 
888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first)
889 &#32;&#32;&#32;&#32;{
890 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__cur&#32;=&#32;__first;
891 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__next&#32;=&#32;__cur-&gt;_M_next;
892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__next)
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_equals(_M_get_key(__next-&gt;_M_val),&#32;__key))
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;_M_get_key(__next-&gt;_M_val)&#32;!=&#32;&amp;__key)
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur-&gt;_M_next&#32;=&#32;__next-&gt;_M_next;
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__next);
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__cur-&gt;_M_next;
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__erased;
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--_M_num_elements;
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__saved_slot&#32;=&#32;__cur;
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next;
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__cur-&gt;_M_next;
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next;
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__cur-&gt;_M_next;
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__delete_first&#32;=&#32;_M_equals(_M_get_key(__first-&gt;_M_val),&#32;__key);
918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__saved_slot)
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__saved_slot-&gt;_M_next;
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__saved_slot-&gt;_M_next&#32;=&#32;__next-&gt;_M_next;
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__next);
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__erased;
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--_M_num_elements;
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__delete_first)
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__n]&#32;=&#32;__first-&gt;_M_next;
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__first);
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__erased;
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--_M_num_elements;
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
933 &#32;&#32;&#32;&#32;}
934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__erased;
935 &#32;&#32;&#32;&#32;}
936 
937 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
938 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
939 &#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__it)
940 &#32;&#32;&#32;&#32;{
941 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__p&#32;=&#32;__it._M_cur;
942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p)
943 &#32;&#32;&#32;&#32;{
944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_bkt_num(__p-&gt;_M_val);
945 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__cur&#32;=&#32;_M_buckets[__n];
946 &#32;&#32;&#32;&#32;&#32;&#32;
947 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__cur&#32;==&#32;__p)
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__n]&#32;=&#32;__cur-&gt;_M_next;
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__cur);
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--_M_num_elements;
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
953 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__next&#32;=&#32;__cur-&gt;_M_next;
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__next)
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__next&#32;==&#32;__p)
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur-&gt;_M_next&#32;=&#32;__next-&gt;_M_next;
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__next);
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--_M_num_elements;
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next;
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__cur-&gt;_M_next;
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
972 &#32;&#32;&#32;&#32;}
973 &#32;&#32;&#32;&#32;}
974 
975 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
976 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
977 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
978 &#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
979 &#32;&#32;&#32;&#32;{
980 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__f_bucket&#32;=&#32;__first._M_cur&#32;?&#32;_M_bkt_num(__first._M_cur-&gt;_M_val)
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_buckets.size();
982 
983 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__l_bucket&#32;=&#32;__last._M_cur&#32;?&#32;_M_bkt_num(__last._M_cur-&gt;_M_val)
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_buckets.size();
985 
986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_cur&#32;==&#32;__last._M_cur)
987 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
988 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__f_bucket&#32;==&#32;__l_bucket)
989 &#32;&#32;&#32;&#32;_M_erase_bucket(__f_bucket,&#32;__first._M_cur,&#32;__last._M_cur);
990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
991 &#32;&#32;&#32;&#32;{
992 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_bucket(__f_bucket,&#32;__first._M_cur,&#32;0);
993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__n&#32;=&#32;__f_bucket&#32;+&#32;1;&#32;__n&#32;&lt;&#32;__l_bucket;&#32;++__n)
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase_bucket(__n,&#32;0);
995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__l_bucket&#32;!=&#32;_M_buckets.size())
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_erase_bucket(__l_bucket,&#32;__last._M_cur);
997 &#32;&#32;&#32;&#32;}
998 &#32;&#32;&#32;&#32;}
999 
1000 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
1001 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1002 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
1003 &#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1004 &#32;&#32;&#32;&#32;{
1005 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator(<emphasis role="keyword">const_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(__first._M_cur),
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis>hashtable*<emphasis role="keyword">&gt;</emphasis>(__first._M_ht)),
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(__last._M_cur),
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis>hashtable*<emphasis role="keyword">&gt;</emphasis>(__last._M_ht)));
1009 &#32;&#32;&#32;&#32;}
1010 
1011 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
1012 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1013 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
1014 &#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;const_iterator&amp;&#32;__it)
1015 &#32;&#32;&#32;&#32;{&#32;erase(iterator(<emphasis role="keyword">const_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(__it._M_cur),
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis>hashtable*<emphasis role="keyword">&gt;</emphasis>(__it._M_ht)));&#32;}
1017 
1018 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
1019 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1020 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
1021 &#32;&#32;&#32;&#32;resize(size_type&#32;__num_elements_hint)
1022 &#32;&#32;&#32;&#32;{
1023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__old_n&#32;=&#32;_M_buckets.size();
1024 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_elements_hint&#32;&gt;&#32;__old_n)
1025 &#32;&#32;&#32;&#32;{
1026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;_M_next_size(__num_elements_hint);
1027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;__old_n)
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Vector_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(__n,&#32;(_Node*)(0),&#32;_M_buckets.get_allocator());
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__bucket&#32;=&#32;0;&#32;__bucket&#32;&lt;&#32;__old_n;&#32;++__bucket)
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__first&#32;=&#32;_M_buckets[__bucket];
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first)
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__new_bucket&#32;=&#32;_M_bkt_num(__first-&gt;_M_val,
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n);
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__bucket]&#32;=&#32;__first-&gt;_M_next;
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first-&gt;_M_next&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[__new_bucket];
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[__new_bucket]&#32;=&#32;__first;
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;_M_buckets[__bucket];
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buckets.swap(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__bucket&#32;=&#32;0;&#32;__bucket&#32;&lt;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>.size();
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__bucket)
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[__bucket])
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__next&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[__bucket]-&gt;_M_next;
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[__bucket]);
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>[__bucket]&#32;=&#32;__next;
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1062 &#32;&#32;&#32;&#32;}
1063 &#32;&#32;&#32;&#32;}
1064 
1065 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
1066 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1067 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
1068 &#32;&#32;&#32;&#32;_M_erase_bucket(<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n,&#32;_Node*&#32;__first,&#32;_Node*&#32;__last)
1069 &#32;&#32;&#32;&#32;{
1070 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__cur&#32;=&#32;_M_buckets[__n];
1071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__cur&#32;==&#32;__first)
1072 &#32;&#32;&#32;&#32;_M_erase_bucket(__n,&#32;__last);
1073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1074 &#32;&#32;&#32;&#32;{
1075 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__next;
1076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__next&#32;=&#32;__cur-&gt;_M_next;
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;!=&#32;__first;
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next,&#32;__next&#32;=&#32;__cur-&gt;_M_next)
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
1080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__next&#32;!=&#32;__last)
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur-&gt;_M_next&#32;=&#32;__next-&gt;_M_next;
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__next);
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next&#32;=&#32;__cur-&gt;_M_next;
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--_M_num_elements;
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1087 &#32;&#32;&#32;&#32;}
1088 &#32;&#32;&#32;&#32;}
1089 
1090 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
1091 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1092 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
1093 &#32;&#32;&#32;&#32;_M_erase_bucket(<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n,&#32;_Node*&#32;__last)
1094 &#32;&#32;&#32;&#32;{
1095 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__cur&#32;=&#32;_M_buckets[__n];
1096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__cur&#32;!=&#32;__last)
1097 &#32;&#32;&#32;&#32;{
1098 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__next&#32;=&#32;__cur-&gt;_M_next;
1099 &#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__cur);
1100 &#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next;
1101 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__n]&#32;=&#32;__cur;
1102 &#32;&#32;&#32;&#32;&#32;&#32;--_M_num_elements;
1103 &#32;&#32;&#32;&#32;}
1104 &#32;&#32;&#32;&#32;}
1105 
1106 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
1107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1108 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
1109 &#32;&#32;&#32;&#32;clear()
1110 &#32;&#32;&#32;&#32;{
1111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_num_elements&#32;==&#32;0)
1112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1113 
1114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_M_buckets.size();&#32;++__i)
1115 &#32;&#32;&#32;&#32;{
1116 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__cur&#32;=&#32;_M_buckets[__i];
1117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__cur&#32;!=&#32;0)
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__next&#32;=&#32;__cur-&gt;_M_next;
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_delete_node(__cur);
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next;
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1123 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__i]&#32;=&#32;0;
1124 &#32;&#32;&#32;&#32;}
1125 &#32;&#32;&#32;&#32;&#32;&#32;_M_num_elements&#32;=&#32;0;
1126 &#32;&#32;&#32;&#32;}
1127 
1128 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Val,&#32;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_HF,&#32;<emphasis role="keyword">class</emphasis>&#32;_Ex,&#32;<emphasis role="keyword">class</emphasis>&#32;_Eq,&#32;<emphasis role="keyword">class</emphasis>&#32;_All&gt;
1129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1130 &#32;&#32;&#32;&#32;hashtable&lt;_Val,&#32;_Key,&#32;_HF,&#32;_Ex,&#32;_Eq,&#32;_All&gt;::
1131 &#32;&#32;&#32;&#32;_M_copy_from(<emphasis role="keyword">const</emphasis>&#32;hashtable&amp;&#32;__ht)
1132 &#32;&#32;&#32;&#32;{
1133 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets.clear();
1134 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets.reserve(__ht._M_buckets.size());
1135 &#32;&#32;&#32;&#32;&#32;&#32;_M_buckets.insert(_M_buckets.end(),&#32;__ht._M_buckets.size(),&#32;(_Node*)&#32;0);
1136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
1137 &#32;&#32;&#32;&#32;{
1138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__ht._M_buckets.size();&#32;++__i)&#32;{
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node*&#32;__cur&#32;=&#32;__ht._M_buckets[__i];
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__cur)
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__local_copy&#32;=&#32;_M_new_node(__cur-&gt;_M_val);
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buckets[__i]&#32;=&#32;__local_copy;
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_Node*&#32;__next&#32;=&#32;__cur-&gt;_M_next;
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__next;
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__next,&#32;__next&#32;=&#32;__cur-&gt;_M_next)
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__local_copy-&gt;_M_next&#32;=&#32;_M_new_node(__next-&gt;_M_val);
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__local_copy&#32;=&#32;__local_copy-&gt;_M_next;
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1153 &#32;&#32;&#32;&#32;&#32;&#32;}
1154 &#32;&#32;&#32;&#32;&#32;&#32;_M_num_elements&#32;=&#32;__ht._M_num_elements;
1155 &#32;&#32;&#32;&#32;}
1156 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
1157 &#32;&#32;&#32;&#32;{
1158 &#32;&#32;&#32;&#32;&#32;&#32;clear();
1159 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
1160 &#32;&#32;&#32;&#32;}
1161 &#32;&#32;&#32;&#32;}
1162 
1163 _GLIBCXX_END_NAMESPACE_VERSION
1164 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
1165 
1166 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
