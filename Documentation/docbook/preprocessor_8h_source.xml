<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_preprocessor_8h_source" xml:lang="en-US">
<title>preprocessor.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/preprocessor.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="comment">//#=====================================================================================================================</emphasis>
8 <emphasis role="comment">//#&#32;C++&#32;VERSION</emphasis>
9 <emphasis role="comment">//#=====================================================================================================================</emphasis>
10 
11 <emphasis role="preprocessor">#ifndef&#32;__cplusplus</emphasis>
12 <emphasis role="preprocessor">#error&#32;toml++&#32;is&#32;a&#32;C++&#32;library.</emphasis>
13 <emphasis role="preprocessor">#endif</emphasis>
14 <emphasis role="preprocessor">#ifdef&#32;_MSVC_LANG</emphasis>
15 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;_MSVC_LANG</emphasis>
16 <emphasis role="preprocessor">#else</emphasis>
17 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;__cplusplus</emphasis>
18 <emphasis role="preprocessor">#endif</emphasis>
19 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;202002L</emphasis>
20 <emphasis role="preprocessor">#undef&#32;TOML_CPP</emphasis>
21 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;20</emphasis>
22 <emphasis role="preprocessor">#elif&#32;TOML_CPP&#32;&gt;=&#32;201703L</emphasis>
23 <emphasis role="preprocessor">#undef&#32;TOML_CPP</emphasis>
24 <emphasis role="preprocessor">#define&#32;TOML_CPP&#32;17</emphasis>
25 <emphasis role="preprocessor">#else</emphasis>
26 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&lt;&#32;201103L</emphasis>
27 <emphasis role="preprocessor">#error&#32;toml++&#32;requires&#32;C++17&#32;or&#32;higher.&#32;For&#32;a&#32;pre-C++11&#32;TOML&#32;library&#32;see&#32;https:</emphasis><emphasis role="comment">//github.com/ToruNiina/Boost.toml</emphasis>
28 <emphasis role="preprocessor">#elif&#32;TOML_CPP&#32;&lt;&#32;201703L</emphasis>
29 <emphasis role="preprocessor">#error&#32;toml++&#32;requires&#32;C++17&#32;or&#32;higher.&#32;For&#32;a&#32;C++11&#32;TOML&#32;library&#32;see&#32;https:</emphasis><emphasis role="comment">//github.com/ToruNiina/toml11</emphasis>
30 <emphasis role="preprocessor">#endif</emphasis>
31 <emphasis role="preprocessor">#endif</emphasis>
32 
33 <emphasis role="comment">//#=====================================================================================================================</emphasis>
34 <emphasis role="comment">//#&#32;COMPILER&#32;/&#32;OS</emphasis>
35 <emphasis role="comment">//#=====================================================================================================================</emphasis>
36 
37 <emphasis role="preprocessor">#define&#32;TOML_MAKE_VERSION(major,&#32;minor,&#32;patch)&#32;(((major)*10000)&#32;+&#32;((minor)*100)&#32;+&#32;((patch)))</emphasis>
38 
39 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
40 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__clang_major__</emphasis>
41 <emphasis role="preprocessor">#define&#32;TOML_CLANG_VERSION&#32;TOML_MAKE_VERSION(__clang_major__,&#32;__clang_minor__,&#32;__clang_patchlevel__)</emphasis>
42 <emphasis role="preprocessor">#else</emphasis>
43 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;0</emphasis>
44 <emphasis role="preprocessor">#endif</emphasis>
45 <emphasis role="preprocessor">#ifdef&#32;__INTEL_COMPILER</emphasis>
46 <emphasis role="preprocessor">#define&#32;TOML_ICC&#32;__INTEL_COMPILER</emphasis>
47 <emphasis role="preprocessor">#ifdef&#32;__ICL</emphasis>
48 <emphasis role="preprocessor">#define&#32;TOML_ICC_CL&#32;TOML_ICC</emphasis>
49 <emphasis role="preprocessor">#else</emphasis>
50 <emphasis role="preprocessor">#define&#32;TOML_ICC_CL&#32;0</emphasis>
51 <emphasis role="preprocessor">#endif</emphasis>
52 <emphasis role="preprocessor">#else</emphasis>
53 <emphasis role="preprocessor">#define&#32;TOML_ICC&#32;&#32;&#32;&#32;0</emphasis>
54 <emphasis role="preprocessor">#define&#32;TOML_ICC_CL&#32;0</emphasis>
55 <emphasis role="preprocessor">#endif</emphasis>
56 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;!TOML_CLANG&#32;&amp;&amp;&#32;!TOML_ICC</emphasis>
57 <emphasis role="preprocessor">#define&#32;TOML_MSVC&#32;_MSC_VER</emphasis>
58 <emphasis role="preprocessor">#else</emphasis>
59 <emphasis role="preprocessor">#define&#32;TOML_MSVC&#32;0</emphasis>
60 <emphasis role="preprocessor">#endif</emphasis>
61 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;!TOML_CLANG&#32;&amp;&amp;&#32;!TOML_ICC</emphasis>
62 <emphasis role="preprocessor">#define&#32;TOML_GCC&#32;__GNUC__</emphasis>
63 <emphasis role="preprocessor">#else</emphasis>
64 <emphasis role="preprocessor">#define&#32;TOML_GCC&#32;0</emphasis>
65 <emphasis role="preprocessor">#endif</emphasis>
66 <emphasis role="preprocessor">#if&#32;defined(WIN32)&#32;||&#32;defined(_WIN32)&#32;||&#32;defined(__WIN32__)&#32;||&#32;defined(__NT__)&#32;||&#32;defined(__CYGWIN__)</emphasis>
67 <emphasis role="preprocessor">#define&#32;TOML_WINDOWS&#32;1</emphasis>
68 <emphasis role="preprocessor">#else</emphasis>
69 <emphasis role="preprocessor">#define&#32;TOML_WINDOWS&#32;0</emphasis>
70 <emphasis role="preprocessor">#endif</emphasis>
71 <emphasis role="preprocessor">#if&#32;defined(DOXYGEN)&#32;||&#32;defined(__DOXYGEN__)&#32;||&#32;defined(__POXY__)&#32;||&#32;defined(__poxy__)</emphasis>
72 <emphasis role="preprocessor">#define&#32;TOML_DOXYGEN&#32;1</emphasis>
73 <emphasis role="preprocessor">#else</emphasis>
74 <emphasis role="preprocessor">#define&#32;TOML_DOXYGEN&#32;0</emphasis>
75 <emphasis role="preprocessor">#endif</emphasis>
76 <emphasis role="preprocessor">#ifdef&#32;__INTELLISENSE__</emphasis>
77 <emphasis role="preprocessor">#define&#32;TOML_INTELLISENSE&#32;1</emphasis>
78 <emphasis role="preprocessor">#else</emphasis>
79 <emphasis role="preprocessor">#define&#32;TOML_INTELLISENSE&#32;0</emphasis>
80 <emphasis role="preprocessor">#endif</emphasis>
81 
82 <emphasis role="comment">//&#32;special&#32;handling&#32;for&#32;apple&#32;clang;&#32;see:</emphasis>
83 <emphasis role="comment">//&#32;-&#32;https://github.com/marzer/tomlplusplus/issues/189</emphasis>
84 <emphasis role="comment">//&#32;-&#32;https://en.wikipedia.org/wiki/Xcode</emphasis>
85 <emphasis role="comment">//&#32;-&#32;https://stackoverflow.com/questions/19387043/how-can-i-reliably-detect-the-version-of-clang-at-preprocessing-time</emphasis>
86 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&amp;&amp;&#32;defined(__apple_build_version__)</emphasis>
87 <emphasis role="preprocessor">#undef&#32;TOML_CLANG</emphasis>
88 <emphasis role="preprocessor">#if&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(14,&#32;0,&#32;0)</emphasis>
89 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;14</emphasis>
90 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(13,&#32;1,&#32;6)</emphasis>
91 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;13</emphasis>
92 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(13,&#32;0,&#32;0)</emphasis>
93 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;12</emphasis>
94 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(12,&#32;0,&#32;5)</emphasis>
95 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;11</emphasis>
96 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(12,&#32;0,&#32;0)</emphasis>
97 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;10</emphasis>
98 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(11,&#32;0,&#32;3)</emphasis>
99 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;9</emphasis>
100 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(11,&#32;0,&#32;0)</emphasis>
101 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;8</emphasis>
102 <emphasis role="preprocessor">#elif&#32;TOML_CLANG_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(10,&#32;0,&#32;1)</emphasis>
103 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;7</emphasis>
104 <emphasis role="preprocessor">#else</emphasis>
105 <emphasis role="preprocessor">#define&#32;TOML_CLANG&#32;6&#32;</emphasis><emphasis role="comment">//&#32;not&#32;strictly&#32;correct&#32;but&#32;doesn&apos;t&#32;matter&#32;below&#32;this</emphasis>
106 <emphasis role="preprocessor">#endif</emphasis>
107 <emphasis role="preprocessor">#endif</emphasis>
108 
109 <emphasis role="comment">//#=====================================================================================================================</emphasis>
110 <emphasis role="comment">//#&#32;ARCHITECTURE</emphasis>
111 <emphasis role="comment">//#=====================================================================================================================</emphasis>
112 
113 <emphasis role="comment">//&#32;IA64</emphasis>
114 <emphasis role="preprocessor">#if&#32;defined(__ia64__)&#32;||&#32;defined(__ia64)&#32;||&#32;defined(_IA64)&#32;||&#32;defined(__IA64__)&#32;||&#32;defined(_M_IA64)</emphasis>
115 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ITANIUM&#32;1</emphasis>
116 <emphasis role="preprocessor">#else</emphasis>
117 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ITANIUM&#32;0</emphasis>
118 <emphasis role="preprocessor">#endif</emphasis>
119 
120 <emphasis role="comment">//&#32;AMD64</emphasis>
121 <emphasis role="preprocessor">#if&#32;defined(__amd64__)&#32;||&#32;defined(__amd64)&#32;||&#32;defined(__x86_64__)&#32;||&#32;defined(__x86_64)&#32;||&#32;defined(_M_AMD64)</emphasis>
122 <emphasis role="preprocessor">#define&#32;TOML_ARCH_AMD64&#32;1</emphasis>
123 <emphasis role="preprocessor">#else</emphasis>
124 <emphasis role="preprocessor">#define&#32;TOML_ARCH_AMD64&#32;0</emphasis>
125 <emphasis role="preprocessor">#endif</emphasis>
126 
127 <emphasis role="comment">//&#32;32-bit&#32;x86</emphasis>
128 <emphasis role="preprocessor">#if&#32;defined(__i386__)&#32;||&#32;defined(_M_IX86)</emphasis>
129 <emphasis role="preprocessor">#define&#32;TOML_ARCH_X86&#32;1</emphasis>
130 <emphasis role="preprocessor">#else</emphasis>
131 <emphasis role="preprocessor">#define&#32;TOML_ARCH_X86&#32;0</emphasis>
132 <emphasis role="preprocessor">#endif</emphasis>
133 
134 <emphasis role="comment">//&#32;ARM</emphasis>
135 <emphasis role="preprocessor">#if&#32;defined(__aarch64__)&#32;||&#32;defined(__ARM_ARCH_ISA_A64)&#32;||&#32;defined(_M_ARM64)&#32;||&#32;defined(__ARM_64BIT_STATE)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
136 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;defined(_M_ARM64EC)</emphasis>
137 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM32&#32;0</emphasis>
138 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM64&#32;1</emphasis>
139 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM&#32;&#32;&#32;1</emphasis>
140 <emphasis role="preprocessor">#elif&#32;defined(__arm__)&#32;||&#32;defined(_M_ARM)&#32;||&#32;defined(__ARM_32BIT_STATE)</emphasis>
141 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM32&#32;1</emphasis>
142 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM64&#32;0</emphasis>
143 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM&#32;&#32;&#32;1</emphasis>
144 <emphasis role="preprocessor">#else</emphasis>
145 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM32&#32;0</emphasis>
146 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM64&#32;0</emphasis>
147 <emphasis role="preprocessor">#define&#32;TOML_ARCH_ARM&#32;&#32;&#32;0</emphasis>
148 <emphasis role="preprocessor">#endif</emphasis>
149 
150 <emphasis role="comment">//#=====================================================================================================================</emphasis>
151 <emphasis role="comment">//#&#32;ATTRIBUTES&#32;/&#32;FEATURE&#32;DETECTION&#32;/&#32;UTILITY&#32;MACROS</emphasis>
152 <emphasis role="comment">//#=====================================================================================================================</emphasis>
153 
154 <emphasis role="comment">//&#32;TOML_HAS_INCLUDE</emphasis>
155 <emphasis role="preprocessor">#ifdef&#32;__has_include</emphasis>
156 <emphasis role="preprocessor">#define&#32;TOML_HAS_INCLUDE(header)&#32;__has_include(header)</emphasis>
157 <emphasis role="preprocessor">#else</emphasis>
158 <emphasis role="preprocessor">#define&#32;TOML_HAS_INCLUDE(header)&#32;0</emphasis>
159 <emphasis role="preprocessor">#endif</emphasis>
160 
161 <emphasis role="preprocessor">#ifdef&#32;__has_builtin</emphasis>
162 <emphasis role="preprocessor">#define&#32;TOML_HAS_BUILTIN(name)&#32;__has_builtin(name)</emphasis>
163 <emphasis role="preprocessor">#else</emphasis>
164 <emphasis role="preprocessor">#define&#32;TOML_HAS_BUILTIN(name)&#32;0</emphasis>
165 <emphasis role="preprocessor">#endif</emphasis>
166 
167 <emphasis role="comment">//&#32;TOML_HAS_FEATURE</emphasis>
168 <emphasis role="preprocessor">#ifdef&#32;__has_feature</emphasis>
169 <emphasis role="preprocessor">#define&#32;TOML_HAS_FEATURE(name)&#32;__has_feature(name)</emphasis>
170 <emphasis role="preprocessor">#else</emphasis>
171 <emphasis role="preprocessor">#define&#32;TOML_HAS_FEATURE(name)&#32;0</emphasis>
172 <emphasis role="preprocessor">#endif</emphasis>
173 
174 <emphasis role="comment">//&#32;TOML_HAS_ATTR</emphasis>
175 <emphasis role="preprocessor">#ifdef&#32;__has_attribute</emphasis>
176 <emphasis role="preprocessor">#define&#32;TOML_HAS_ATTR(attr)&#32;__has_attribute(attr)</emphasis>
177 <emphasis role="preprocessor">#else</emphasis>
178 <emphasis role="preprocessor">#define&#32;TOML_HAS_ATTR(attr)&#32;0</emphasis>
179 <emphasis role="preprocessor">#endif</emphasis>
180 
181 <emphasis role="comment">//&#32;TOML_HAS_CPP_ATTR</emphasis>
182 <emphasis role="preprocessor">#ifdef&#32;__has_cpp_attribute</emphasis>
183 <emphasis role="preprocessor">#define&#32;TOML_HAS_CPP_ATTR(attr)&#32;__has_cpp_attribute(attr)</emphasis>
184 <emphasis role="preprocessor">#else</emphasis>
185 <emphasis role="preprocessor">#define&#32;TOML_HAS_CPP_ATTR(attr)&#32;0</emphasis>
186 <emphasis role="preprocessor">#endif</emphasis>
187 
188 <emphasis role="comment">//&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
189 <emphasis role="preprocessor">#if&#32;defined(__EXCEPTIONS)&#32;||&#32;defined(_CPPUNWIND)&#32;||&#32;defined(__cpp_exceptions)</emphasis>
190 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;1</emphasis>
191 <emphasis role="preprocessor">#else</emphasis>
192 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_EXCEPTIONS&#32;0</emphasis>
193 <emphasis role="preprocessor">#endif</emphasis>
194 
195 <emphasis role="comment">//&#32;TOML_COMPILER_HAS_RTTI</emphasis>
196 <emphasis role="preprocessor">#if&#32;defined(_CPPRTTI)&#32;||&#32;defined(__GXX_RTTI)&#32;||&#32;TOML_HAS_FEATURE(cxx_rtti)</emphasis>
197 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_RTTI&#32;1</emphasis>
198 <emphasis role="preprocessor">#else</emphasis>
199 <emphasis role="preprocessor">#define&#32;TOML_COMPILER_HAS_RTTI&#32;0</emphasis>
200 <emphasis role="preprocessor">#endif</emphasis>
201 
202 <emphasis role="comment">//&#32;TOML_ATTR&#32;(gnu&#32;attributes)</emphasis>
203 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_GCC&#32;||&#32;defined(__GNUC__)</emphasis>
204 <emphasis role="preprocessor">#define&#32;TOML_ATTR(...)&#32;__attribute__((__VA_ARGS__))</emphasis>
205 <emphasis role="preprocessor">#else</emphasis>
206 <emphasis role="preprocessor">#define&#32;TOML_ATTR(...)</emphasis>
207 <emphasis role="preprocessor">#endif</emphasis>
208 
209 <emphasis role="comment">//&#32;TOML_DECLSPEC&#32;(msvc&#32;attributes)</emphasis>
210 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
211 <emphasis role="preprocessor">#define&#32;TOML_DECLSPEC(...)&#32;__declspec(__VA_ARGS__)</emphasis>
212 <emphasis role="preprocessor">#else</emphasis>
213 <emphasis role="preprocessor">#define&#32;TOML_DECLSPEC(...)</emphasis>
214 <emphasis role="preprocessor">#endif</emphasis>
215 
216 <emphasis role="comment">//&#32;TOML_CONCAT</emphasis>
217 <emphasis role="preprocessor">#define&#32;TOML_CONCAT_1(x,&#32;y)&#32;x##y</emphasis>
218 <emphasis role="preprocessor">#define&#32;TOML_CONCAT(x,&#32;y)&#32;&#32;&#32;TOML_CONCAT_1(x,&#32;y)</emphasis>
219 
220 <emphasis role="comment">//&#32;TOML_MAKE_STRING</emphasis>
221 <emphasis role="preprocessor">#define&#32;TOML_MAKE_STRING_1(s)&#32;#s</emphasis>
222 <emphasis role="preprocessor">#define&#32;TOML_MAKE_STRING(s)&#32;&#32;&#32;TOML_MAKE_STRING_1(s)</emphasis>
223 
224 <emphasis role="comment">//&#32;TOML_PRAGMA_XXXX&#32;(compiler-specific&#32;pragmas)</emphasis>
225 <emphasis role="preprocessor">#if&#32;TOML_CLANG</emphasis>
226 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG(decl)&#32;_Pragma(TOML_MAKE_STRING(clang&#32;decl))</emphasis>
227 <emphasis role="preprocessor">#else</emphasis>
228 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
229 <emphasis role="preprocessor">#endif</emphasis>
230 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&gt;=&#32;9</emphasis>
231 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_9(decl)&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
232 <emphasis role="preprocessor">#else</emphasis>
233 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_9(decl)</emphasis>
234 <emphasis role="preprocessor">#endif</emphasis>
235 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&gt;=&#32;10</emphasis>
236 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_10(decl)&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
237 <emphasis role="preprocessor">#else</emphasis>
238 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_10(decl)</emphasis>
239 <emphasis role="preprocessor">#endif</emphasis>
240 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;&gt;=&#32;11</emphasis>
241 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_11(decl)&#32;TOML_PRAGMA_CLANG(decl)</emphasis>
242 <emphasis role="preprocessor">#else</emphasis>
243 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_CLANG_GE_11(decl)</emphasis>
244 <emphasis role="preprocessor">#endif</emphasis>
245 <emphasis role="preprocessor">#if&#32;TOML_GCC</emphasis>
246 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_GCC(decl)&#32;_Pragma(TOML_MAKE_STRING(GCC&#32;decl))</emphasis>
247 <emphasis role="preprocessor">#else</emphasis>
248 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_GCC(decl)</emphasis>
249 <emphasis role="preprocessor">#endif</emphasis>
250 <emphasis role="preprocessor">#if&#32;TOML_MSVC</emphasis>
251 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_MSVC(...)&#32;__pragma(__VA_ARGS__)</emphasis>
252 <emphasis role="preprocessor">#else</emphasis>
253 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_MSVC(...)</emphasis>
254 <emphasis role="preprocessor">#endif</emphasis>
255 <emphasis role="preprocessor">#if&#32;TOML_ICC</emphasis>
256 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_ICC(...)&#32;__pragma(__VA_ARGS__)</emphasis>
257 <emphasis role="preprocessor">#else</emphasis>
258 <emphasis role="preprocessor">#define&#32;TOML_PRAGMA_ICC(...)</emphasis>
259 <emphasis role="preprocessor">#endif</emphasis>
260 
261 <emphasis role="comment">//&#32;TOML_ALWAYS_INLINE</emphasis>
262 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
263 <emphasis role="preprocessor">#define&#32;TOML_ALWAYS_INLINE&#32;__forceinline</emphasis>
264 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(__always_inline__)</emphasis>
265 <emphasis role="preprocessor">#define&#32;TOML_ALWAYS_INLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
266 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_ATTR(__always_inline__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
267 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline</emphasis>
268 <emphasis role="preprocessor">#else</emphasis>
269 <emphasis role="preprocessor">#define&#32;TOML_ALWAYS_INLINE&#32;inline</emphasis>
270 <emphasis role="preprocessor">#endif</emphasis>
271 
272 <emphasis role="comment">//&#32;TOML_NEVER_INLINE</emphasis>
273 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
274 <emphasis role="preprocessor">#define&#32;TOML_NEVER_INLINE&#32;TOML_DECLSPEC(noinline)</emphasis>
275 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(__noinline__)</emphasis>
276 <emphasis role="preprocessor">#define&#32;TOML_NEVER_INLINE&#32;TOML_ATTR(__noinline__)</emphasis>
277 <emphasis role="preprocessor">#else</emphasis>
278 <emphasis role="preprocessor">#define&#32;TOML_NEVER_INLINE</emphasis>
279 <emphasis role="preprocessor">#endif</emphasis>
280 
281 <emphasis role="comment">//&#32;MSVC&#32;attributes</emphasis>
282 <emphasis role="preprocessor">#define&#32;TOML_ABSTRACT_INTERFACE&#32;TOML_DECLSPEC(novtable)</emphasis>
283 <emphasis role="preprocessor">#define&#32;TOML_EMPTY_BASES&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_DECLSPEC(empty_bases)</emphasis>
284 
285 <emphasis role="comment">//&#32;TOML_TRIVIAL_ABI</emphasis>
286 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(__trivial_abi__)</emphasis>
287 <emphasis role="preprocessor">#define&#32;TOML_TRIVIAL_ABI&#32;TOML_ATTR(__trivial_abi__)</emphasis>
288 <emphasis role="preprocessor">#else</emphasis>
289 <emphasis role="preprocessor">#define&#32;TOML_TRIVIAL_ABI</emphasis>
290 <emphasis role="preprocessor">#endif</emphasis>
291 
292 <emphasis role="comment">//&#32;TOML_NODISCARD</emphasis>
293 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;17&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(nodiscard)&#32;&gt;=&#32;201603</emphasis>
294 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD&#32;[[nodiscard]]</emphasis>
295 <emphasis role="preprocessor">#elif&#32;TOML_CLANG&#32;||&#32;TOML_GCC&#32;||&#32;TOML_HAS_ATTR(__warn_unused_result__)</emphasis>
296 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD&#32;TOML_ATTR(__warn_unused_result__)</emphasis>
297 <emphasis role="preprocessor">#else</emphasis>
298 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD</emphasis>
299 <emphasis role="preprocessor">#endif</emphasis>
300 
301 <emphasis role="comment">//&#32;TOML_NODISCARD_CTOR</emphasis>
302 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;17&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(nodiscard)&#32;&gt;=&#32;201907</emphasis>
303 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD_CTOR&#32;[[nodiscard]]</emphasis>
304 <emphasis role="preprocessor">#else</emphasis>
305 <emphasis role="preprocessor">#define&#32;TOML_NODISCARD_CTOR</emphasis>
306 <emphasis role="preprocessor">#endif</emphasis>
307 
308 <emphasis role="comment">//&#32;pure&#32;+&#32;const</emphasis>
309 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
310 <emphasis role="preprocessor">#ifdef&#32;NDEBUG</emphasis>
311 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_DECLSPEC(noalias)&#32;&#32;TOML_ATTR(__pure__)</emphasis>
312 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_DECLSPEC(noalias)&#32;&#32;TOML_ATTR(__const__)</emphasis>
313 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_PURE</emphasis>
314 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_CONST</emphasis>
315 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_INLINE_GETTER&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE&#32;&#32;TOML_PURE</emphasis>
316 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_INLINE_GETTER&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE&#32;&#32;TOML_CONST</emphasis>
317 <emphasis role="preprocessor">#else</emphasis>
318 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE</emphasis>
319 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST</emphasis>
320 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;</emphasis>
321 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_GETTER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;</emphasis>
322 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_PURE_INLINE_GETTER&#32;&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE</emphasis>
323 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_CONST_INLINE_GETTER&#32;&#32;&#32;&#32;TOML_NODISCARD&#32;&#32;TOML_ALWAYS_INLINE</emphasis>
324 <emphasis role="preprocessor">#endif</emphasis>
325 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
326 
327 <emphasis role="comment">//&#32;TOML_ASSUME</emphasis>
328 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
329 <emphasis role="preprocessor">#define&#32;TOML_ASSUME(...)&#32;__assume(__VA_ARGS__)</emphasis>
330 <emphasis role="preprocessor">#elif&#32;TOML_ICC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_BUILTIN(__builtin_assume)</emphasis>
331 <emphasis role="preprocessor">#define&#32;TOML_ASSUME(...)&#32;__builtin_assume(__VA_ARGS__)</emphasis>
332 <emphasis role="preprocessor">#else</emphasis>
333 <emphasis role="preprocessor">#define&#32;TOML_ASSUME(...)&#32;static_assert(true)</emphasis>
334 <emphasis role="preprocessor">#endif</emphasis>
335 
336 <emphasis role="comment">//&#32;TOML_UNREACHABLE</emphasis>
337 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
338 <emphasis role="preprocessor">#define&#32;TOML_UNREACHABLE&#32;__assume(0)</emphasis>
339 <emphasis role="preprocessor">#elif&#32;TOML_ICC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_GCC&#32;||&#32;TOML_HAS_BUILTIN(__builtin_unreachable)</emphasis>
340 <emphasis role="preprocessor">#define&#32;TOML_UNREACHABLE&#32;__builtin_unreachable()</emphasis>
341 <emphasis role="preprocessor">#else</emphasis>
342 <emphasis role="preprocessor">#define&#32;TOML_UNREACHABLE&#32;static_assert(true)</emphasis>
343 <emphasis role="preprocessor">#endif</emphasis>
344 
345 <emphasis role="comment">//&#32;TOML_LIKELY</emphasis>
346 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;20&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(likely)&#32;&gt;=&#32;201803</emphasis>
347 <emphasis role="preprocessor">#define&#32;TOML_LIKELY(...)&#32;(__VA_ARGS__)&#32;[[likely]]</emphasis>
348 <emphasis role="preprocessor">#define&#32;TOML_LIKELY_CASE&#32;[[likely]]</emphasis>
349 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_BUILTIN(__builtin_expect)</emphasis>
350 <emphasis role="preprocessor">#define&#32;TOML_LIKELY(...)&#32;(__builtin_expect(!!(__VA_ARGS__),&#32;1))</emphasis>
351 <emphasis role="preprocessor">#else</emphasis>
352 <emphasis role="preprocessor">#define&#32;TOML_LIKELY(...)&#32;(__VA_ARGS__)</emphasis>
353 <emphasis role="preprocessor">#endif</emphasis>
354 <emphasis role="preprocessor">#ifndef&#32;TOML_LIKELY_CASE</emphasis>
355 <emphasis role="preprocessor">#define&#32;TOML_LIKELY_CASE</emphasis>
356 <emphasis role="preprocessor">#endif</emphasis>
357 
358 <emphasis role="comment">//&#32;TOML_UNLIKELY</emphasis>
359 <emphasis role="preprocessor">#if&#32;TOML_CPP&#32;&gt;=&#32;20&#32;&amp;&amp;&#32;TOML_HAS_CPP_ATTR(unlikely)&#32;&gt;=&#32;201803</emphasis>
360 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY(...)&#32;(__VA_ARGS__)&#32;[[unlikely]]</emphasis>
361 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY_CASE&#32;[[unlikely]]</emphasis>
362 <emphasis role="preprocessor">#elif&#32;TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;TOML_HAS_BUILTIN(__builtin_expect)</emphasis>
363 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY(...)&#32;(__builtin_expect(!!(__VA_ARGS__),&#32;0))</emphasis>
364 <emphasis role="preprocessor">#else</emphasis>
365 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY(...)&#32;(__VA_ARGS__)</emphasis>
366 <emphasis role="preprocessor">#endif</emphasis>
367 <emphasis role="preprocessor">#ifndef&#32;TOML_UNLIKELY_CASE</emphasis>
368 <emphasis role="preprocessor">#define&#32;TOML_UNLIKELY_CASE</emphasis>
369 <emphasis role="preprocessor">#endif</emphasis>
370 
371 <emphasis role="comment">//&#32;TOML_FLAGS_ENUM</emphasis>
372 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(flag_enum)</emphasis>
373 <emphasis role="preprocessor">#define&#32;TOML_FLAGS_ENUM&#32;__attribute__((flag_enum))</emphasis>
374 <emphasis role="preprocessor">#else</emphasis>
375 <emphasis role="preprocessor">#define&#32;TOML_FLAGS_ENUM</emphasis>
376 <emphasis role="preprocessor">#endif</emphasis>
377 
378 <emphasis role="comment">//&#32;TOML_OPEN_ENUM&#32;+&#32;TOML_CLOSED_ENUM</emphasis>
379 <emphasis role="preprocessor">#if&#32;TOML_CLANG&#32;||&#32;TOML_HAS_ATTR(enum_extensibility)</emphasis>
380 <emphasis role="preprocessor">#define&#32;TOML_OPEN_ENUM&#32;&#32;&#32;__attribute__((enum_extensibility(open)))</emphasis>
381 <emphasis role="preprocessor">#define&#32;TOML_CLOSED_ENUM&#32;__attribute__((enum_extensibility(closed)))</emphasis>
382 <emphasis role="preprocessor">#else</emphasis>
383 <emphasis role="preprocessor">#define&#32;TOML_OPEN_ENUM</emphasis>
384 <emphasis role="preprocessor">#define&#32;TOML_CLOSED_ENUM</emphasis>
385 <emphasis role="preprocessor">#endif</emphasis>
386 
387 <emphasis role="comment">//&#32;TOML_OPEN_FLAGS_ENUM&#32;+&#32;TOML_CLOSED_FLAGS_ENUM</emphasis>
388 <emphasis role="preprocessor">#define&#32;TOML_OPEN_FLAGS_ENUM&#32;&#32;&#32;TOML_OPEN_ENUM&#32;TOML_FLAGS_ENUM</emphasis>
389 <emphasis role="preprocessor">#define&#32;TOML_CLOSED_FLAGS_ENUM&#32;TOML_CLOSED_ENUM&#32;TOML_FLAGS_ENUM</emphasis>
390 
391 <emphasis role="comment">//&#32;TOML_MAKE_FLAGS</emphasis>
392 <emphasis role="preprocessor">#define&#32;TOML_MAKE_FLAGS_2(T,&#32;op,&#32;linkage)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
393 <emphasis role="preprocessoremphasis>
394 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;T&#32;operator&#32;op(T&#32;lhs,&#32;T&#32;rhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
395 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
396 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;under&#32;=&#32;std::underlying_type_t&lt;T&gt;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
397 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;static_cast&lt;T&gt;(static_cast&lt;under&gt;(lhs)&#32;op&#32;static_cast&lt;under&gt;(rhs));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
398 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
399 <emphasis role="preprocessoremphasis>
400 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;T&amp;&#32;operator&#32;TOML_CONCAT(op,&#32;=)(T&#32;&amp;&#32;lhs,&#32;T&#32;rhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
401 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
402 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;lhs&#32;=&#32;(lhs&#32;op&#32;rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
403 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
404 <emphasis role="preprocessoremphasis>
405 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
406 <emphasis role="preprocessor">#define&#32;TOML_MAKE_FLAGS_1(T,&#32;linkage)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
407 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(std::is_enum_v&lt;T&gt;);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
408 <emphasis role="preprocessoremphasis>
409 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_MAKE_FLAGS_2(T,&#32;&amp;,&#32;linkage);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
410 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_MAKE_FLAGS_2(T,&#32;|,&#32;linkage);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
411 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_MAKE_FLAGS_2(T,&#32;^,&#32;linkage);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
412 <emphasis role="preprocessoremphasis>
413 <emphasis role="preprocessoremphasis>
414 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;T&#32;operator~(T&#32;val)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
415 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
416 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;under&#32;=&#32;std::underlying_type_t&lt;T&gt;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
417 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;static_cast&lt;T&gt;(~static_cast&lt;under&gt;(val));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
418 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
419 <emphasis role="preprocessoremphasis>
420 <emphasis role="preprocessoremphasis>
421 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;linkage&#32;constexpr&#32;bool&#32;operator!(T&#32;val)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
422 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
423 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;under&#32;=&#32;std::underlying_type_t&lt;T&gt;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
424 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;!static_cast&lt;under&gt;(val);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
425 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
426 <emphasis role="preprocessoremphasis>
427 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
428 <emphasis role="preprocessor">#define&#32;TOML_MAKE_FLAGS(T)&#32;TOML_MAKE_FLAGS_1(T,&#32;)</emphasis>
429 
430 <emphasis role="preprocessor">#define&#32;TOML_UNUSED(...)&#32;static_cast&lt;void&gt;(__VA_ARGS__)</emphasis>
431 
432 <emphasis role="preprocessor">#define&#32;TOML_DELETE_DEFAULTS(T)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
433 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T(const&#32;T&amp;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;delete;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
434 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T(T&amp;&amp;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;delete;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
435 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T&amp;&#32;operator=(const&#32;T&amp;)&#32;=&#32;delete;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
436 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;T&amp;&#32;operator=(T&amp;&amp;)&#32;&#32;&#32;&#32;&#32;&#32;=&#32;delete</emphasis>
437 
438 <emphasis role="preprocessor">#define&#32;TOML_ASYMMETRICAL_EQUALITY_OPS(LHS,&#32;RHS,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
439 <emphasis role="preprocessoremphasis>
440 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;bool&#32;operator==(RHS&#32;rhs,&#32;LHS&#32;lhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
441 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
442 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;lhs&#32;==&#32;rhs;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
443 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
444 <emphasis role="preprocessoremphasis>
445 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;bool&#32;operator!=(LHS&#32;lhs,&#32;RHS&#32;rhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
446 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
447 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;!(lhs&#32;==&#32;rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
448 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
449 <emphasis role="preprocessoremphasis>
450 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;friend&#32;bool&#32;operator!=(RHS&#32;rhs,&#32;LHS&#32;lhs)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
451 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{emphasis>
452 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;!(lhs&#32;==&#32;rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
453 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}emphasis>
454 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
455 
456 <emphasis role="preprocessor">#define&#32;TOML_EVAL_BOOL_1(T,&#32;F)&#32;T</emphasis>
457 <emphasis role="preprocessor">#define&#32;TOML_EVAL_BOOL_0(T,&#32;F)&#32;F</emphasis>
458 
459 <emphasis role="preprocessor">#if&#32;!defined(__POXY__)&#32;&amp;&amp;&#32;!defined(POXY_IMPLEMENTATION_DETAIL)</emphasis>
460 <emphasis role="preprocessor">#define&#32;POXY_IMPLEMENTATION_DETAIL(...)&#32;__VA_ARGS__</emphasis>
461 <emphasis role="preprocessor">#endif</emphasis>
462 
463 <emphasis role="comment">//======================================================================================================================</emphasis>
464 <emphasis role="comment">//&#32;COMPILER-SPECIFIC&#32;WARNING&#32;MANAGEMENT</emphasis>
465 <emphasis role="comment">//======================================================================================================================</emphasis>
466 
467 <emphasis role="preprocessor">#if&#32;TOML_CLANG</emphasis>
468 
469 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
470 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
471 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wunknown-warning-option&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
472 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
473 
474 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
475 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wswitch&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
476 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
477 
478 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
479 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wfloat-equal&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
480 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wdouble-promotion&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
481 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
482 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wshift-sign-overflow&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
483 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
484 
485 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
486 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG_GE_9(diagnostic&#32;ignored&#32;&quot;-Wctad-maybe-unsupported&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
487 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG_GE_10(diagnostic&#32;ignored&#32;&quot;-Wzero-as-null-pointer-constant&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
488 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG_GE_11(diagnostic&#32;ignored&#32;&quot;-Wsuggest-destructor-override&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
489 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wweak-vtables&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
490 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wweak-template-vtables&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
491 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wdouble-promotion&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
492 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
493 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wmissing-field-initializers&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
494 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
495 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
496 
497 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
498 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
499 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
500 
501 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
502 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
503 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;ignored&#32;&quot;-Weverything&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
504 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true,&#32;&quot;&quot;)</emphasis>
505 
506 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
507 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_CLANG(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
508 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
509 
510 <emphasis role="preprocessor">#define&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES&#32;1</emphasis>
511 
512 <emphasis role="preprocessor">#elif&#32;TOML_MSVC</emphasis>
513 
514 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
515 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
516 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
517 
518 <emphasis role="preprocessor">#if&#32;TOML_HAS_INCLUDE(&lt;CodeAnalysis/Warnings.h&gt;)</emphasis>
519 <emphasis role="preprocessor">#pragma&#32;warning(push,&#32;0)</emphasis>
520 <emphasis role="preprocessor">#include&#32;&lt;CodeAnalysis/Warnings.h&gt;</emphasis>
521 <emphasis role="preprocessor">#pragma&#32;warning(pop)</emphasis>
522 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
523 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;ALL_CODE_ANALYSIS_WARNINGS))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
524 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
525 <emphasis role="preprocessor">#else</emphasis>
526 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS&#32;static_assert(true)</emphasis>
527 <emphasis role="preprocessor">#endif</emphasis>
528 
529 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
530 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4061))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
531 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4062))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
532 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4063))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
533 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5262))&#32;&#32;</emphasis><emphasis role="comment">/*&#32;switch-case&#32;implicit&#32;fallthrough&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
534 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26819))&#32;</emphasis><emphasis role="comment">/*&#32;cg:&#32;unannotated&#32;fallthrough&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
535 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
536 
537 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
538 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4127))&#32;</emphasis><emphasis role="comment">/*&#32;conditional&#32;expr&#32;is&#32;constant&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
539 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4324))&#32;</emphasis><emphasis role="comment">/*&#32;structure&#32;was&#32;padded&#32;due&#32;to&#32;alignment&#32;specifier&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
540 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4348))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
541 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4464))&#32;</emphasis><emphasis role="comment">/*&#32;relative&#32;include&#32;path&#32;contains&#32;&apos;..&apos;&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
542 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4505))&#32;</emphasis><emphasis role="comment">/*&#32;unreferenced&#32;local&#32;function&#32;removed&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
543 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4514))&#32;</emphasis><emphasis role="comment">/*&#32;unreferenced&#32;inline&#32;function&#32;has&#32;been&#32;removed&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
544 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4582))&#32;</emphasis><emphasis role="comment">/*&#32;constructor&#32;is&#32;not&#32;implicitly&#32;called&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
545 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4619))&#32;</emphasis><emphasis role="comment">/*&#32;&#32;there&#32;is&#32;no&#32;warning&#32;number&#32;&apos;XXXX&apos;&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
546 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4623))&#32;</emphasis><emphasis role="comment">/*&#32;default&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
547 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4625))&#32;</emphasis><emphasis role="comment">/*&#32;copy&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
548 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4626))&#32;</emphasis><emphasis role="comment">/*&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
549 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4710))&#32;</emphasis><emphasis role="comment">/*&#32;function&#32;not&#32;inlined&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
550 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4711))&#32;</emphasis><emphasis role="comment">/*&#32;function&#32;selected&#32;for&#32;automatic&#32;expansion&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4820))&#32;</emphasis><emphasis role="comment">/*&#32;N&#32;bytes&#32;padding&#32;added&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4946))&#32;</emphasis><emphasis role="comment">/*&#32;reinterpret_cast&#32;used&#32;between&#32;related&#32;classes&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5026))&#32;</emphasis><emphasis role="comment">/*&#32;move&#32;constructor&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
554 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5027))&#32;</emphasis><emphasis role="comment">/*&#32;move&#32;assignment&#32;operator&#32;was&#32;implicitly&#32;defined&#32;as&#32;deleted&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
555 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5039))&#32;</emphasis><emphasis role="comment">/*&#32;potentially&#32;throwing&#32;function&#32;passed&#32;to&#32;&apos;extern&#32;&quot;C&quot;&apos;&#32;function&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
556 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5045))&#32;</emphasis><emphasis role="comment">/*&#32;Compiler&#32;will&#32;insert&#32;Spectre&#32;mitigation&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5264))&#32;</emphasis><emphasis role="comment">/*&#32;const&#32;variable&#32;is&#32;not&#32;used&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
558 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26451))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26490))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
560 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26495))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
561 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26812))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
562 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;26819))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
563 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
564 
565 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
566 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4365))&#32;</emphasis><emphasis role="comment">/*&#32;argument&#32;signed/unsigned&#32;mismatch&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
567 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4738))&#32;</emphasis><emphasis role="comment">/*&#32;storing&#32;32-bit&#32;float&#32;result&#32;in&#32;memory&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5219))&#32;</emphasis><emphasis role="comment">/*&#32;implicit&#32;conversion&#32;from&#32;integral&#32;to&#32;float&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
569 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
570 
571 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(pop))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
573 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
574 
575 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
576 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push,&#32;0))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
577 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4348))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
578 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;4668))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
579 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5105))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
580 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;5264))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
581 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
582 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SWITCH_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
583 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SPAM_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
584 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_ARITHMETIC_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
585 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
586 
587 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;TOML_POP_WARNINGS</emphasis>
588 
589 <emphasis role="preprocessor">#elif&#32;TOML_ICC</emphasis>
590 
591 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
592 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
593 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
594 
595 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
596 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;82))&#32;&#32;&#32;</emphasis><emphasis role="comment">/*&#32;storage&#32;class&#32;is&#32;not&#32;first&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
597 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;111))&#32;&#32;</emphasis><emphasis role="comment">/*&#32;statement&#32;unreachable&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
598 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;869))&#32;&#32;</emphasis><emphasis role="comment">/*&#32;unreferenced&#32;parameter&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
599 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;1011))&#32;</emphasis><emphasis role="comment">/*&#32;missing&#32;return&#32;(false-positive)&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
600 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(disable&#32;:&#32;2261))&#32;</emphasis><emphasis role="comment">/*&#32;assume&#32;expr&#32;side-effects&#32;discarded&#32;*/</emphasis><emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
601 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
602 
603 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
604 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(pop))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
605 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
606 
607 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
608 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(push,&#32;0))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
609 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SPAM_WARNINGS</emphasis>
610 
611 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
612 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__pragma(warning(pop))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
613 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
614 
615 <emphasis role="preprocessor">#elif&#32;TOML_GCC</emphasis>
616 
617 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
618 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
619 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
620 
621 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
622 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wswitch&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
623 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wswitch-enum&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
624 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wswitch-default&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
625 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
626 
627 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
628 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wfloat-equal&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
629 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsign-conversion&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
630 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
631 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
632 
633 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
634 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsuggest-attribute=const&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
635 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsuggest-attribute=pure&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
636 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
637 
638 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
639 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wpadded&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
640 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wcast-align&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
641 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wcomment&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
642 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wtype-limits&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
643 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wuseless-cast&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
644 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wchar-subscripts&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
645 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wsubobject-linkage&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
646 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wmissing-field-initializers&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
647 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wmaybe-uninitialized&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
648 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wnoexcept&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
649 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wnull-dereference&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
650 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wduplicated-branches&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
651 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
652 
653 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
654 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
655 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
656 
657 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
658 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;push)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
659 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wall&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
660 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wextra&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
661 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;ignored&#32;&quot;-Wpedantic&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
662 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SWITCH_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
663 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_ARITHMETIC_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
664 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
665 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_DISABLE_SPAM_WARNINGS;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
666 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
667 
668 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
669 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_PRAGMA_GCC(diagnostic&#32;pop)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
670 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
671 
672 <emphasis role="preprocessor">#endif</emphasis>
673 
674 <emphasis role="preprocessor">#ifndef&#32;TOML_PUSH_WARNINGS</emphasis>
675 <emphasis role="preprocessor">#define&#32;TOML_PUSH_WARNINGS&#32;static_assert(true)</emphasis>
676 <emphasis role="preprocessor">#endif</emphasis>
677 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS</emphasis>
678 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_CODE_ANALYSIS_WARNINGS&#32;static_assert(true)</emphasis>
679 <emphasis role="preprocessor">#endif</emphasis>
680 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_SWITCH_WARNINGS</emphasis>
681 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SWITCH_WARNINGS&#32;static_assert(true)</emphasis>
682 <emphasis role="preprocessor">#endif</emphasis>
683 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS</emphasis>
684 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SUGGEST_ATTR_WARNINGS&#32;static_assert(true)</emphasis>
685 <emphasis role="preprocessor">#endif</emphasis>
686 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_SPAM_WARNINGS</emphasis>
687 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_SPAM_WARNINGS&#32;static_assert(true)</emphasis>
688 <emphasis role="preprocessor">#endif</emphasis>
689 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_ARITHMETIC_WARNINGS</emphasis>
690 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_ARITHMETIC_WARNINGS&#32;static_assert(true)</emphasis>
691 <emphasis role="preprocessor">#endif</emphasis>
692 <emphasis role="preprocessor">#ifndef&#32;TOML_POP_WARNINGS</emphasis>
693 <emphasis role="preprocessor">#define&#32;TOML_POP_WARNINGS&#32;static_assert(true)</emphasis>
694 <emphasis role="preprocessor">#endif</emphasis>
695 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_WARNINGS</emphasis>
696 <emphasis role="preprocessor">#define&#32;TOML_DISABLE_WARNINGS&#32;static_assert(true)</emphasis>
697 <emphasis role="preprocessor">#endif</emphasis>
698 <emphasis role="preprocessor">#ifndef&#32;TOML_ENABLE_WARNINGS</emphasis>
699 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WARNINGS&#32;static_assert(true)</emphasis>
700 <emphasis role="preprocessor">#endif</emphasis>
701 <emphasis role="preprocessor">#ifndef&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES</emphasis>
702 <emphasis role="preprocessor">#define&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES&#32;0</emphasis>
703 <emphasis role="preprocessor">#endif</emphasis>
704 
705 <emphasis role="comment">//#====================================================================================================================</emphasis>
706 <emphasis role="comment">//#&#32;USER&#32;CONFIGURATION</emphasis>
707 <emphasis role="comment">//#====================================================================================================================</emphasis>
714 
715 <emphasis role="preprocessor">#ifdef&#32;TOML_CONFIG_HEADER</emphasis>
716 <emphasis role="preprocessor">#include&#32;TOML_CONFIG_HEADER</emphasis>
717 <emphasis role="preprocessor">#endif</emphasis>
718 <emphasis role="comment">//#&#32;{{</emphasis>
719 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN</emphasis>
720 <emphasis role="preprocessor">#define&#32;TOML_CONFIG_HEADER</emphasis>
721 <emphasis role="preprocessor">#endif</emphasis>
725 <emphasis role="comment">//#&#32;}}</emphasis>
726 
727 <emphasis role="comment">//&#32;is&#32;the&#32;library&#32;being&#32;built&#32;as&#32;a&#32;shared&#32;lib/dll&#32;using&#32;meson&#32;and&#32;friends?</emphasis>
728 <emphasis role="preprocessor">#ifndef&#32;TOML_SHARED_LIB</emphasis>
729 <emphasis role="preprocessor">#define&#32;TOML_SHARED_LIB&#32;0</emphasis>
730 <emphasis role="preprocessor">#endif</emphasis>
731 
732 <emphasis role="comment">//&#32;header-only&#32;mode</emphasis>
733 <emphasis role="preprocessor">#if&#32;!defined(TOML_HEADER_ONLY)&#32;&amp;&amp;&#32;defined(TOML_ALL_INLINE)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_ALL_INLINE&#32;pre-2.0</emphasis>
734 <emphasis role="preprocessor">#define&#32;TOML_HEADER_ONLY&#32;TOML_ALL_INLINE</emphasis>
735 <emphasis role="preprocessor">#endif</emphasis>
736 <emphasis role="preprocessor">#if&#32;!defined(TOML_HEADER_ONLY)&#32;||&#32;(defined(TOML_HEADER_ONLY)&#32;&amp;&amp;&#32;TOML_HEADER_ONLY)&#32;||&#32;TOML_INTELLISENSE</emphasis>
737 <emphasis role="preprocessor">#undef&#32;TOML_HEADER_ONLY</emphasis>
738 <emphasis role="preprocessor">#define&#32;TOML_HEADER_ONLY&#32;1</emphasis>
739 <emphasis role="preprocessor">#endif</emphasis>
740 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;TOML_SHARED_LIB</emphasis>
741 <emphasis role="preprocessor">#undef&#32;TOML_HEADER_ONLY</emphasis>
742 <emphasis role="preprocessor">#define&#32;TOML_HEADER_ONLY&#32;0</emphasis>
743 <emphasis role="preprocessor">#endif</emphasis>
758 
759 <emphasis role="comment">//&#32;internal&#32;implementation&#32;switch</emphasis>
760 <emphasis role="preprocessor">#if&#32;defined(TOML_IMPLEMENTATION)&#32;||&#32;TOML_HEADER_ONLY</emphasis>
761 <emphasis role="preprocessor">#undef&#32;TOML_IMPLEMENTATION</emphasis>
762 <emphasis role="preprocessor">#define&#32;TOML_IMPLEMENTATION&#32;1</emphasis>
763 <emphasis role="preprocessor">#else</emphasis>
764 <emphasis role="preprocessor">#define&#32;TOML_IMPLEMENTATION&#32;0</emphasis>
765 <emphasis role="preprocessor">#endif</emphasis>
769 
770 <emphasis role="comment">//&#32;dll/shared&#32;lib&#32;function&#32;exports&#32;(legacy&#32;-&#32;TOML_API&#32;was&#32;the&#32;old&#32;name&#32;for&#32;this&#32;setting)</emphasis>
771 <emphasis role="preprocessor">#if&#32;!defined(TOML_EXPORTED_MEMBER_FUNCTION)&#32;&amp;&amp;&#32;!defined(TOML_EXPORTED_STATIC_FUNCTION)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
772 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;!defined(TOML_EXPORTED_FREE_FUNCTION)&#32;&amp;&amp;&#32;!defined(TOML_EXPORTED_CLASS)&#32;&amp;&amp;&#32;defined(TOML_API)</emphasis>
773 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_MEMBER_FUNCTION&#32;TOML_API</emphasis>
774 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_STATIC_FUNCTION&#32;TOML_API</emphasis>
775 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;&#32;&#32;TOML_API</emphasis>
776 <emphasis role="preprocessor">#endif</emphasis>
777 
778 <emphasis role="comment">//&#32;dll/shared&#32;lib&#32;exports</emphasis>
779 <emphasis role="preprocessor">#if&#32;TOML_SHARED_LIB</emphasis>
780 <emphasis role="preprocessor">#undef&#32;TOML_API</emphasis>
781 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_CLASS</emphasis>
782 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_MEMBER_FUNCTION</emphasis>
783 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_STATIC_FUNCTION</emphasis>
784 <emphasis role="preprocessor">#undef&#32;TOML_EXPORTED_FREE_FUNCTION</emphasis>
785 <emphasis role="preprocessor">#if&#32;TOML_WINDOWS</emphasis>
786 <emphasis role="preprocessor">#if&#32;TOML_IMPLEMENTATION</emphasis>
787 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__declspec(dllexport)</emphasis>
788 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;__declspec(dllexport)</emphasis>
789 <emphasis role="preprocessor">#else</emphasis>
790 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__declspec(dllimport)</emphasis>
791 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;__declspec(dllimport)</emphasis>
792 <emphasis role="preprocessor">#endif</emphasis>
793 <emphasis role="preprocessor">#ifndef&#32;TOML_CALLCONV</emphasis>
794 <emphasis role="preprocessor">#define&#32;TOML_CALLCONV&#32;__cdecl</emphasis>
795 <emphasis role="preprocessor">#endif</emphasis>
796 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)&#32;&amp;&amp;&#32;__GNUC__&#32;&gt;=&#32;4</emphasis>
797 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
798 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_MEMBER_FUNCTION&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
799 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_STATIC_FUNCTION&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
800 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION&#32;&#32;&#32;__attribute__((visibility(&quot;default&quot;)))</emphasis>
801 <emphasis role="preprocessor">#endif</emphasis>
802 <emphasis role="preprocessor">#endif</emphasis>
803 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_CLASS</emphasis>
804 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_CLASS</emphasis>
805 <emphasis role="preprocessor">#endif</emphasis>
806 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_MEMBER_FUNCTION</emphasis>
807 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_MEMBER_FUNCTION</emphasis>
808 <emphasis role="preprocessor">#endif</emphasis>
809 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_STATIC_FUNCTION</emphasis>
810 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_STATIC_FUNCTION</emphasis>
811 <emphasis role="preprocessor">#endif</emphasis>
812 <emphasis role="preprocessor">#ifndef&#32;TOML_EXPORTED_FREE_FUNCTION</emphasis>
813 <emphasis role="preprocessor">#define&#32;TOML_EXPORTED_FREE_FUNCTION</emphasis>
814 <emphasis role="preprocessor">#endif</emphasis>
838 
839 <emphasis role="comment">//&#32;experimental&#32;language&#32;features</emphasis>
840 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_UNRELEASED_FEATURES)&#32;&amp;&amp;&#32;defined(TOML_UNRELEASED_FEATURES)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_UNRELEASED_FEATURES</emphasis>
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pre-3.0</emphasis>
842 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_UNRELEASED_FEATURES&#32;TOML_UNRELEASED_FEATURES</emphasis>
843 <emphasis role="preprocessor">#endif</emphasis>
844 <emphasis role="preprocessor">#if&#32;(defined(TOML_ENABLE_UNRELEASED_FEATURES)&#32;&amp;&amp;&#32;TOML_ENABLE_UNRELEASED_FEATURES)&#32;||&#32;TOML_INTELLISENSE</emphasis>
845 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_UNRELEASED_FEATURES</emphasis>
846 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_UNRELEASED_FEATURES&#32;1</emphasis>
847 <emphasis role="preprocessor">#endif</emphasis>
848 <emphasis role="preprocessor">#ifndef&#32;TOML_ENABLE_UNRELEASED_FEATURES</emphasis>
849 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_UNRELEASED_FEATURES&#32;0</emphasis>
850 <emphasis role="preprocessor">#endif</emphasis>
856 
857 <emphasis role="comment">//&#32;parser</emphasis>
858 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_PARSER)&#32;&amp;&amp;&#32;defined(TOML_PARSER)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_PARSER&#32;pre-3.0</emphasis>
859 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_PARSER&#32;TOML_PARSER</emphasis>
860 <emphasis role="preprocessor">#endif</emphasis>
861 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_PARSER)&#32;||&#32;(defined(TOML_ENABLE_PARSER)&#32;&amp;&amp;&#32;TOML_ENABLE_PARSER)&#32;||&#32;TOML_INTELLISENSE</emphasis>
862 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_PARSER</emphasis>
863 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_PARSER&#32;1</emphasis>
864 <emphasis role="preprocessor">#endif</emphasis>
870 
871 <emphasis role="comment">//&#32;formatters</emphasis>
872 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_FORMATTERS)&#32;||&#32;(defined(TOML_ENABLE_FORMATTERS)&#32;&amp;&amp;&#32;TOML_ENABLE_FORMATTERS)&#32;||&#32;TOML_INTELLISENSE</emphasis>
873 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_FORMATTERS</emphasis>
874 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_FORMATTERS&#32;1</emphasis>
875 <emphasis role="preprocessor">#endif</emphasis>
885 
886 <emphasis role="comment">//&#32;SIMD</emphasis>
887 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_SIMD)&#32;||&#32;(defined(TOML_ENABLE_SIMD)&#32;&amp;&amp;&#32;TOML_ENABLE_SIMD)&#32;||&#32;TOML_INTELLISENSE</emphasis>
888 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_SIMD</emphasis>
889 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_SIMD&#32;1</emphasis>
890 <emphasis role="preprocessor">#endif</emphasis>
891 
892 <emphasis role="comment">//&#32;windows&#32;compat</emphasis>
893 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_WINDOWS_COMPAT)&#32;&amp;&amp;&#32;defined(TOML_WINDOWS_COMPAT)&#32;</emphasis><emphasis role="comment">//&#32;was&#32;TOML_WINDOWS_COMPAT&#32;pre-3.0</emphasis>
894 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;TOML_WINDOWS_COMPAT</emphasis>
895 <emphasis role="preprocessor">#endif</emphasis>
896 <emphasis role="preprocessor">#if&#32;!defined(TOML_ENABLE_WINDOWS_COMPAT)&#32;||&#32;(defined(TOML_ENABLE_WINDOWS_COMPAT)&#32;&amp;&amp;&#32;TOML_ENABLE_WINDOWS_COMPAT)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
897 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;||&#32;TOML_INTELLISENSE</emphasis>
898 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
899 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;1</emphasis>
900 <emphasis role="preprocessor">#endif</emphasis>
902 <emphasis role="preprocessor">#if&#32;!TOML_WINDOWS</emphasis>
903 <emphasis role="preprocessor">#undef&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
904 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_WINDOWS_COMPAT&#32;0</emphasis>
905 <emphasis role="preprocessor">#endif</emphasis>
907 <emphasis role="preprocessor">#ifndef&#32;TOML_INCLUDE_WINDOWS_H</emphasis>
908 <emphasis role="preprocessor">#define&#32;TOML_INCLUDE_WINDOWS_H&#32;0</emphasis>
909 <emphasis role="preprocessor">#endif</emphasis>
921 
922 <emphasis role="comment">//&#32;custom&#32;optional</emphasis>
923 <emphasis role="preprocessor">#ifdef&#32;TOML_OPTIONAL_TYPE</emphasis>
924 <emphasis role="preprocessor">#define&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE&#32;1</emphasis>
925 <emphasis role="preprocessor">#else</emphasis>
926 <emphasis role="preprocessor">#define&#32;TOML_HAS_CUSTOM_OPTIONAL_TYPE&#32;0</emphasis>
927 <emphasis role="preprocessor">#endif</emphasis>
928 <emphasis role="comment">//#&#32;{{</emphasis>
929 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN</emphasis>
930 <emphasis role="preprocessor">#define&#32;TOML_OPTIONAL_TYPE</emphasis>
931 <emphasis role="preprocessor">#endif</emphasis>
938 <emphasis role="comment">//#&#32;}}</emphasis>
939 
940 <emphasis role="comment">//&#32;exceptions&#32;(library&#32;use)</emphasis>
941 <emphasis role="preprocessor">#if&#32;TOML_COMPILER_HAS_EXCEPTIONS</emphasis>
942 <emphasis role="preprocessor">#if&#32;!defined(TOML_EXCEPTIONS)&#32;||&#32;(defined(TOML_EXCEPTIONS)&#32;&amp;&amp;&#32;TOML_EXCEPTIONS)</emphasis>
943 <emphasis role="preprocessor">#undef&#32;TOML_EXCEPTIONS</emphasis>
944 <emphasis role="preprocessor">#define&#32;TOML_EXCEPTIONS&#32;1</emphasis>
945 <emphasis role="preprocessor">#endif</emphasis>
946 <emphasis role="preprocessor">#else</emphasis>
947 <emphasis role="preprocessor">#if&#32;defined(TOML_EXCEPTIONS)&#32;&amp;&amp;&#32;TOML_EXCEPTIONS</emphasis>
948 <emphasis role="preprocessor">#error&#32;TOML_EXCEPTIONS&#32;was&#32;explicitly&#32;enabled&#32;but&#32;exceptions&#32;are&#32;disabled/unsupported&#32;by&#32;the&#32;compiler.</emphasis>
949 <emphasis role="preprocessor">#endif</emphasis>
950 <emphasis role="preprocessor">#undef&#32;TOML_EXCEPTIONS</emphasis>
951 <emphasis role="preprocessor">#define&#32;TOML_EXCEPTIONS&#32;0</emphasis>
952 <emphasis role="preprocessor">#endif</emphasis>
956 
957 <emphasis role="comment">//&#32;calling&#32;convention&#32;for&#32;static/free/friend&#32;functions</emphasis>
958 <emphasis role="preprocessor">#ifndef&#32;TOML_CALLCONV</emphasis>
959 <emphasis role="preprocessor">#define&#32;TOML_CALLCONV</emphasis>
960 <emphasis role="preprocessor">#endif</emphasis>
964 
965 <emphasis role="comment">//#&#32;{{</emphasis>
966 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN</emphasis>
967 <emphasis role="preprocessor">#define&#32;TOML_SMALL_FLOAT_TYPE</emphasis>
968 <emphasis role="preprocessor">#endif</emphasis>
972 <emphasis role="comment">//#&#32;}}</emphasis>
973 
974 <emphasis role="preprocessor">#ifndef&#32;TOML_UNDEF_MACROS</emphasis>
975 <emphasis role="preprocessor">#define&#32;TOML_UNDEF_MACROS&#32;1</emphasis>
976 <emphasis role="preprocessor">#endif</emphasis>
977 
978 <emphasis role="preprocessor">#ifndef&#32;TOML_MAX_NESTED_VALUES</emphasis>
979 <emphasis role="preprocessor">#define&#32;TOML_MAX_NESTED_VALUES&#32;256</emphasis>
980 <emphasis role="comment">//&#32;this&#32;refers&#32;to&#32;the&#32;depth&#32;of&#32;nested&#32;values,&#32;e.g.&#32;inline&#32;tables&#32;and&#32;arrays.</emphasis>
981 <emphasis role="comment">//&#32;256&#32;is&#32;crazy&#32;high!&#32;if&#32;you&apos;re&#32;hitting&#32;this&#32;limit&#32;with&#32;real&#32;input,&#32;TOML&#32;is&#32;probably&#32;the&#32;wrong&#32;tool&#32;for&#32;the&#32;job...</emphasis>
982 <emphasis role="preprocessor">#endif</emphasis>
983 
984 <emphasis role="preprocessor">#ifdef&#32;TOML_CHAR_8_STRINGS</emphasis>
985 <emphasis role="preprocessor">#if&#32;TOML_CHAR_8_STRINGS</emphasis>
986 <emphasis role="preprocessor">#error&#32;TOML_CHAR_8_STRINGS&#32;was&#32;removed&#32;in&#32;toml++&#32;2.0.0;&#32;all&#32;value&#32;setters&#32;and&#32;getters&#32;now&#32;work&#32;with&#32;char8_t&#32;strings&#32;implicitly.</emphasis>
987 <emphasis role="preprocessor">#endif</emphasis>
988 <emphasis role="preprocessor">#endif</emphasis>
989 
990 <emphasis role="preprocessor">#ifdef&#32;TOML_LARGE_FILES</emphasis>
991 <emphasis role="preprocessor">#if&#32;!TOML_LARGE_FILES</emphasis>
992 <emphasis role="preprocessor">#error&#32;Support&#32;for&#32;!TOML_LARGE_FILES&#32;(i.e.&#32;&apos;small&#32;files&apos;)&#32;was&#32;removed&#32;in&#32;toml++&#32;3.0.0.</emphasis>
993 <emphasis role="preprocessor">#endif</emphasis>
994 <emphasis role="preprocessor">#endif</emphasis>
995 
996 <emphasis role="preprocessor">#ifndef&#32;TOML_LIFETIME_HOOKS</emphasis>
997 <emphasis role="preprocessor">#define&#32;TOML_LIFETIME_HOOKS&#32;0</emphasis>
998 <emphasis role="preprocessor">#endif</emphasis>
999 
1000 <emphasis role="preprocessor">#ifdef&#32;NDEBUG</emphasis>
1001 <emphasis role="preprocessor">#undef&#32;TOML_ASSERT</emphasis>
1002 <emphasis role="preprocessor">#define&#32;TOML_ASSERT(expr)&#32;static_assert(true)</emphasis>
1003 <emphasis role="preprocessor">#endif</emphasis>
1004 <emphasis role="preprocessor">#ifndef&#32;TOML_ASSERT</emphasis>
1005 <emphasis role="preprocessor">#ifndef&#32;assert</emphasis>
1006 <link linkend="_preprocessor_8h_1a44b1f68de11411aefbcb6635f9a39471">TOML_DISABLE_WARNINGS</link>;
1007 <emphasis role="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>
1008 <link linkend="_preprocessor_8h_1ad37422b7ddec78b06f09d3d368fbb428">TOML_ENABLE_WARNINGS</link>;
1009 <emphasis role="preprocessor">#endif</emphasis>
1010 <emphasis role="preprocessor">#define&#32;TOML_ASSERT(expr)&#32;assert(expr)</emphasis>
1011 <emphasis role="preprocessor">#endif</emphasis>
1012 <emphasis role="preprocessor">#ifdef&#32;NDEBUG</emphasis>
1013 <emphasis role="preprocessor">#define&#32;TOML_ASSERT_ASSUME(expr)&#32;TOML_ASSUME(expr)</emphasis>
1014 <emphasis role="preprocessor">#else</emphasis>
1015 <emphasis role="preprocessor">#define&#32;TOML_ASSERT_ASSUME(expr)&#32;TOML_ASSERT(expr)</emphasis>
1016 <emphasis role="preprocessor">#endif</emphasis>
1020 
1021 <emphasis role="comment">//#&#32;{{</emphasis>
1022 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN</emphasis>
1023 <emphasis role="preprocessor">#define&#32;TOML_SMALL_INT_TYPE</emphasis>
1024 <emphasis role="preprocessor">#endif</emphasis>
1028 <emphasis role="comment">//#&#32;}}</emphasis>
1029 
1030 <emphasis role="preprocessor">#ifndef&#32;TOML_ENABLE_FLOAT16</emphasis>
1031 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_FLOAT16&#32;0</emphasis>
1032 <emphasis role="preprocessor">#endif</emphasis>
1033 <emphasis role="comment">//#&#32;{{</emphasis>
1037 <emphasis role="comment">//#&#32;}}</emphasis>
1038 
1040 <emphasis role="comment">//#====================================================================================================================</emphasis>
1041 <emphasis role="comment">//#&#32;CHARCONV&#32;SUPPORT</emphasis>
1042 <emphasis role="comment">//#====================================================================================================================</emphasis>
1043 
1044 <emphasis role="preprocessor">#if&#32;!defined(TOML_FLOAT_CHARCONV)&#32;&amp;&amp;&#32;(TOML_GCC&#32;||&#32;TOML_CLANG&#32;||&#32;(TOML_ICC&#32;&amp;&amp;&#32;!TOML_ICC_CL))</emphasis>
1045 <emphasis role="comment">//&#32;not&#32;supported&#32;by&#32;any&#32;version&#32;of&#32;GCC&#32;or&#32;Clang&#32;as&#32;of&#32;26/11/2020</emphasis>
1046 <emphasis role="comment">//&#32;not&#32;supported&#32;by&#32;any&#32;version&#32;of&#32;ICC&#32;on&#32;Linux&#32;as&#32;of&#32;11/01/2021</emphasis>
1047 <emphasis role="preprocessor">#define&#32;TOML_FLOAT_CHARCONV&#32;0</emphasis>
1048 <emphasis role="preprocessor">#endif</emphasis>
1049 <emphasis role="preprocessor">#if&#32;!defined(TOML_INT_CHARCONV)&#32;&amp;&amp;&#32;(defined(__EMSCRIPTEN__)&#32;||&#32;defined(__APPLE__))</emphasis>
1050 <emphasis role="comment">//&#32;causes&#32;link&#32;errors&#32;on&#32;emscripten</emphasis>
1051 <emphasis role="comment">//&#32;causes&#32;Mac&#32;OS&#32;SDK&#32;version&#32;errors&#32;on&#32;some&#32;versions&#32;of&#32;Apple&#32;Clang</emphasis>
1052 <emphasis role="preprocessor">#define&#32;TOML_INT_CHARCONV&#32;0</emphasis>
1053 <emphasis role="preprocessor">#endif</emphasis>
1054 <emphasis role="preprocessor">#ifndef&#32;TOML_INT_CHARCONV</emphasis>
1055 <emphasis role="preprocessor">#define&#32;TOML_INT_CHARCONV&#32;1</emphasis>
1056 <emphasis role="preprocessor">#endif</emphasis>
1057 <emphasis role="preprocessor">#ifndef&#32;TOML_FLOAT_CHARCONV</emphasis>
1058 <emphasis role="preprocessor">#define&#32;TOML_FLOAT_CHARCONV&#32;1</emphasis>
1059 <emphasis role="preprocessor">#endif</emphasis>
1060 <emphasis role="preprocessor">#if&#32;(TOML_INT_CHARCONV&#32;||&#32;TOML_FLOAT_CHARCONV)&#32;&amp;&amp;&#32;!TOML_HAS_INCLUDE(&lt;charconv&gt;)</emphasis>
1061 <emphasis role="preprocessor">#undef&#32;TOML_INT_CHARCONV</emphasis>
1062 <emphasis role="preprocessor">#undef&#32;TOML_FLOAT_CHARCONV</emphasis>
1063 <emphasis role="preprocessor">#define&#32;TOML_INT_CHARCONV&#32;&#32;&#32;0</emphasis>
1064 <emphasis role="preprocessor">#define&#32;TOML_FLOAT_CHARCONV&#32;0</emphasis>
1065 <emphasis role="preprocessor">#endif</emphasis>
1066 
1067 <emphasis role="comment">//#=====================================================================================================================</emphasis>
1068 <emphasis role="comment">//#&#32;SFINAE</emphasis>
1069 <emphasis role="comment">//#=====================================================================================================================</emphasis>
1070 
1072 <emphasis role="preprocessor">#if&#32;defined(__cpp_concepts)&#32;&amp;&amp;&#32;__cpp_concepts&#32;&gt;=&#32;201907</emphasis>
1073 <emphasis role="preprocessor">#define&#32;TOML_REQUIRES(...)&#32;requires(__VA_ARGS__)</emphasis>
1074 <emphasis role="preprocessor">#else</emphasis>
1075 <emphasis role="preprocessor">#define&#32;TOML_REQUIRES(...)</emphasis>
1076 <emphasis role="preprocessor">#endif</emphasis>
1077 <emphasis role="preprocessor">#define&#32;TOML_ENABLE_IF(...)&#32;,&#32;typename&#32;std::enable_if&lt;(__VA_ARGS__),&#32;int&gt;::type&#32;=&#32;0</emphasis>
1078 <emphasis role="preprocessor">#define&#32;TOML_CONSTRAINED_TEMPLATE(condition,&#32;...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1079 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;__VA_ARGS__&#32;TOML_ENABLE_IF(condition)&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1080 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_REQUIRES(condition)</emphasis>
1081 <emphasis role="preprocessor">#define&#32;TOML_HIDDEN_CONSTRAINT(condition,&#32;...)&#32;TOML_CONSTRAINED_TEMPLATE(condition,&#32;__VA_ARGS__)</emphasis>
1083 <emphasis role="comment">//#&#32;{{</emphasis>
1084 <emphasis role="preprocessor">#ifndef&#32;TOML_CONSTRAINED_TEMPLATE</emphasis>
1085 <emphasis role="preprocessor">#define&#32;TOML_CONSTRAINED_TEMPLATE(condition,&#32;...)&#32;template&#32;&lt;__VA_ARGS__&gt;</emphasis>
1086 <emphasis role="preprocessor">#endif</emphasis>
1087 <emphasis role="preprocessor">#ifndef&#32;TOML_HIDDEN_CONSTRAINT</emphasis>
1088 <emphasis role="preprocessor">#define&#32;TOML_HIDDEN_CONSTRAINT(condition,&#32;...)</emphasis>
1089 <emphasis role="preprocessor">#endif</emphasis>
1090 <emphasis role="comment">//#&#32;}}</emphasis>
1091 
1092 <emphasis role="comment">//#=====================================================================================================================</emphasis>
1093 <emphasis role="comment">//#&#32;FLOAT128</emphasis>
1094 <emphasis role="comment">//#=====================================================================================================================</emphasis>
1095 
1096 <emphasis role="preprocessor">#if&#32;defined(__SIZEOF_FLOAT128__)&#32;&amp;&amp;&#32;defined(__FLT128_MANT_DIG__)&#32;&amp;&amp;&#32;defined(__LDBL_MANT_DIG__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1097 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&amp;&amp;&#32;__FLT128_MANT_DIG__&#32;&gt;&#32;__LDBL_MANT_DIG__</emphasis>
1098 <emphasis role="preprocessor">#define&#32;TOML_FLOAT128&#32;__float128</emphasis>
1099 <emphasis role="preprocessor">#endif</emphasis>
1100 
1101 <emphasis role="comment">//#=====================================================================================================================</emphasis>
1102 <emphasis role="comment">//#&#32;INT128</emphasis>
1103 <emphasis role="comment">//#=====================================================================================================================</emphasis>
1104 
1105 <emphasis role="preprocessor">#ifdef&#32;__SIZEOF_INT128__</emphasis>
1106 <emphasis role="preprocessor">#define&#32;TOML_INT128&#32;&#32;__int128_t</emphasis>
1107 <emphasis role="preprocessor">#define&#32;TOML_UINT128&#32;__uint128_t</emphasis>
1108 <emphasis role="preprocessor">#endif</emphasis>
1109 
1110 <emphasis role="comment">//#====================================================================================================================</emphasis>
1111 <emphasis role="comment">//#&#32;VERSIONS&#32;AND&#32;NAMESPACES</emphasis>
1112 <emphasis role="comment">//#====================================================================================================================</emphasis>
1113 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1114 
1115 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_version_8h">version.h</link>&quot;</emphasis>
1116 
1117 <emphasis role="preprocessor">#define&#32;TOML_LIB_SINGLE_HEADER&#32;0</emphasis>
1118 
1119 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_UNRELEASED_FEATURES</emphasis>
1120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_LANG_EFFECTIVE_VERSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_MAKE_VERSION(TOML_LANG_MAJOR,&#32;TOML_LANG_MINOR,&#32;TOML_LANG_PATCH+1)</emphasis>
1122 <emphasis role="preprocessor">#else</emphasis>
1123 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_LANG_EFFECTIVE_VERSION&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1124 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_MAKE_VERSION(TOML_LANG_MAJOR,&#32;TOML_LANG_MINOR,&#32;TOML_LANG_PATCH)</emphasis>
1125 <emphasis role="preprocessor">#endif</emphasis>
1126 
1127 <emphasis role="preprocessor">#define&#32;TOML_LANG_HIGHER_THAN(major,&#32;minor,&#32;patch)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1128 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(TOML_LANG_EFFECTIVE_VERSION&#32;&gt;&#32;TOML_MAKE_VERSION(major,&#32;minor,&#32;patch))</emphasis>
1129 
1130 <emphasis role="preprocessor">#define&#32;TOML_LANG_AT_LEAST(major,&#32;minor,&#32;patch)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1131 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(TOML_LANG_EFFECTIVE_VERSION&#32;&gt;=&#32;TOML_MAKE_VERSION(major,&#32;minor,&#32;patch))</emphasis>
1132 
1133 <emphasis role="preprocessor">#define&#32;TOML_LANG_UNRELEASED&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1134 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_LANG_HIGHER_THAN(TOML_LANG_MAJOR,&#32;TOML_LANG_MINOR,&#32;TOML_LANG_PATCH)</emphasis>
1135 
1136 <emphasis role="preprocessor">#ifndef&#32;TOML_ABI_NAMESPACES</emphasis>
1137 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;TOML_DOXYGEN</emphasis>
1138 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACES&#32;0</emphasis>
1139 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1140 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACES&#32;1</emphasis>
1141 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1142 <emphasis role="preprocessor">#endif</emphasis>
1143 <emphasis role="preprocessor">#if&#32;TOML_ABI_NAMESPACES</emphasis>
1144 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;toml&#32;{&#32;inline&#32;namespace&#32;TOML_CONCAT(v,&#32;TOML_LIB_MAJOR)</emphasis>
1145 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;static_assert(true)</emphasis>
1146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::toml::TOML_CONCAT(v,&#32;TOML_LIB_MAJOR)</emphasis>
1147 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_START(name)&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;namespace&#32;name&#32;{&#32;static_assert(true)</emphasis>
1148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_BOOL(cond,&#32;T,&#32;F)&#32;TOML_ABI_NAMESPACE_START(TOML_CONCAT(TOML_EVAL_BOOL_,&#32;cond)(T,&#32;F))</emphasis>
1149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;static_assert(true)</emphasis>
1150 <emphasis role="preprocessor">#else</emphasis>
1151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace&#32;toml</emphasis>
1152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_NAMESPACE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml</emphasis>
1154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_START(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_BOOL(...)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ABI_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1157 <emphasis role="preprocessor">#endif</emphasis>
1158 <emphasis role="preprocessor">#define&#32;TOML_IMPL_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NAMESPACE_START&#32;{&#32;namespace&#32;impl</emphasis>
1159 <emphasis role="preprocessor">#define&#32;TOML_IMPL_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;TOML_NAMESPACE_END</emphasis>
1160 <emphasis role="preprocessor">#if&#32;TOML_HEADER_ONLY</emphasis>
1161 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(TOML_IMPLEMENTATION);&#32;TOML_IMPL_NAMESPACE_START</emphasis>
1162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_IMPL_NAMESPACE_END</emphasis>
1163 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_NAMESPACE::impl</emphasis>
1164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_EXTERNAL_LINKAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline</emphasis>
1165 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_INTERNAL_LINKAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;inline</emphasis>
1166 <emphasis role="preprocessor">#else</emphasis>
1167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_START&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(TOML_IMPLEMENTATION);&#32;\</emphasis>
1168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;namespace&#32;toml;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;namespace</emphasis>
1170 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE_END&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_assert(true)</emphasis>
1171 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_ANON_NAMESPACE</emphasis>
1172 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_EXTERNAL_LINKAGE</emphasis>
1173 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_INTERNAL_LINKAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static</emphasis>
1174 <emphasis role="preprocessor">#endif</emphasis>
1175 
1176 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
1177 <emphasis role="comment">//#====================================================================================================================</emphasis>
1178 <emphasis role="comment">//#&#32;ASSERT</emphasis>
1179 <emphasis role="comment">//#====================================================================================================================</emphasis>
1180 
1181 <emphasis role="comment">//#====================================================================================================================</emphasis>
1182 <emphasis role="comment">//#&#32;STATIC&#32;ASSERT&#32;MESSAGE&#32;FORMATTING</emphasis>
1183 <emphasis role="comment">//#====================================================================================================================</emphasis>
1184 <emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
1186 
1187 <emphasis role="preprocessor">#if&#32;TOML_SIMPLE_STATIC_ASSERT_MESSAGES</emphasis>
1188 
1189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_NEWLINE&#32;&#32;&#32;&#32;&#32;&quot;&#32;&quot;</emphasis>
1190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;,&#32;&quot;</emphasis>
1191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&quot;&#32;(&quot;</emphasis>
1192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_END&#32;&#32;&#32;&#32;&quot;)&quot;</emphasis>
1193 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NEW&#32;&#32;&#32;&#32;&quot;&#32;&quot;</emphasis>
1194 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NXT&#32;&#32;&#32;&#32;&quot;,&#32;&quot;</emphasis>
1195 
1196 <emphasis role="preprocessor">#else</emphasis>
1197 
1198 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_NEWLINE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;\n|&#32;&quot;</emphasis>
1199 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_NEWLINE&#32;&quot;&#32;&#32;-&#32;&quot;</emphasis>
1200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP</emphasis>
1201 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_END</emphasis>
1202 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NEW&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_NEWLINE&#32;TOML_SA_NEWLINE</emphasis>
1203 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TOML_SA_LIST_NXT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW</emphasis>
1204 
1205 <emphasis role="preprocessor">#endif</emphasis>
1206 
1207 <emphasis role="preprocessor">#define&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1208 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&quot;std::string&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1209 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;int64_t&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;double&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1211 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;bool&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::date&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::time&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::date_time&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
1216 
1217 <emphasis role="preprocessor">#define&#32;TOML_SA_NODE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_BEG&#32;&#32;&#32;&#32;&quot;toml::table&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::array&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1220 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;std::string&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1221 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;int64_t&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;double&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;bool&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1224 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;toml::date&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1225 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;toml::time&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1226 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_SEP&#32;&#32;&#32;&#32;&quot;toml::value&lt;toml::date_time&gt;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1227 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_END</emphasis>
1228 
1229 <emphasis role="preprocessor">#define&#32;TOML_SA_UNWRAPPED_NODE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1230 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NEW&#32;&#32;&#32;&#32;&quot;A&#32;native&#32;TOML&#32;value&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1231 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NATIVE_VALUE_TYPE_LIST&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1232 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1233 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_LIST_NXT&#32;&#32;&#32;&#32;&quot;A&#32;TOML&#32;node&#32;type&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1234 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;TOML_SA_NODE_TYPE_LIST</emphasis>
1235 
1237 <emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
</programlisting></section>
