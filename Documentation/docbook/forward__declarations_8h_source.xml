<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_forward__declarations_8h_source" xml:lang="en-US">
<title>forward_declarations.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/forward_declarations.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__string_8h">std_string.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_std__new_8h">std_new.h</link>&quot;</emphasis>
9 <link linkend="_forward__declarations_8h_1a6c2a5b158c0a6d208edd992229d91d78">TOML_DISABLE_WARNINGS</link>;
10 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&lt;cstddef&gt;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
13 <emphasis role="preprocessor">#include&#32;&lt;cfloat&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;climits&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
20 <link linkend="_forward__declarations_8h_1a4e1f9eaceb60becba33cd64d3a85e3ed">TOML_ENABLE_WARNINGS</link>;
21 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
22 
23 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
24 <emphasis role="comment">//#&#32;ENVIRONMENT&#32;GROUND-TRUTHS</emphasis>
25 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
27 
28 <emphasis role="preprocessor">#ifndef&#32;TOML_DISABLE_ENVIRONMENT_CHECKS</emphasis>
29 <emphasis role="preprocessor">#define&#32;TOML_ENV_MESSAGE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
30 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;If&#32;you&apos;re&#32;seeing&#32;this&#32;error&#32;it&apos;s&#32;because&#32;you&apos;re&#32;building&#32;toml++&#32;for&#32;an&#32;environment&#32;that&#32;doesn&apos;t&#32;conform&#32;to&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
31 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;one&#32;of&#32;the&#32;&apos;ground&#32;truths&apos;&#32;assumed&#32;by&#32;the&#32;library.&#32;Essentially&#32;this&#32;just&#32;means&#32;that&#32;I&#32;don&apos;t&#32;have&#32;the&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
32 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;resources&#32;to&#32;test&#32;on&#32;more&#32;platforms,&#32;but&#32;I&#32;wish&#32;I&#32;did!&#32;You&#32;can&#32;try&#32;disabling&#32;the&#32;checks&#32;by&#32;defining&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
33 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;TOML_DISABLE_ENVIRONMENT_CHECKS,&#32;but&#32;your&#32;mileage&#32;may&#32;vary.&#32;Please&#32;consider&#32;filing&#32;an&#32;issue&#32;at&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
34 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;https://github.com/marzer/tomlplusplus/issues&#32;to&#32;help&#32;me&#32;improve&#32;support&#32;for&#32;your&#32;target&#32;environment.&#32;&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
35 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&quot;Thanks!&quot;</emphasis>
36 
37 <emphasis role="keyword">static_assert</emphasis>(CHAR_BIT&#32;==&#32;8,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
38 <emphasis role="keyword">static_assert</emphasis>(<link linkend="__classes_2lib_2include_2float_8h_1a566d8859d1a43f73f0e76619833d4d98">FLT_RADIX</link>&#32;==&#32;2,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
39 <emphasis role="keyword">static_assert</emphasis>(<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;==&#32;65,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
40 <emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(double)&#32;==&#32;8,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
41 <emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;double&gt;::is_iec559,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
42 <emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;double&gt;::digits&#32;==&#32;53,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
43 <emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;double&gt;::digits10&#32;==&#32;15,&#32;<link linkend="_toml_8hpp_1a71c24cd992d03ea4bebf16534e60c4f9">TOML_ENV_MESSAGE</link>);
44 
45 <emphasis role="preprocessor">#undef&#32;TOML_ENV_MESSAGE</emphasis>
46 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!TOML_DISABLE_ENVIRONMENT_CHECKS</emphasis>
47 
49 
50 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
51 <emphasis role="comment">//#&#32;UNDOCUMENTED&#32;TYPEDEFS&#32;AND&#32;FORWARD&#32;DECLARATIONS</emphasis>
52 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
54 <emphasis role="comment">//&#32;undocumented&#32;forward&#32;declarations&#32;are&#32;hidden&#32;from&#32;doxygen&#32;because&#32;they&#32;fuck&#32;it&#32;up&#32;=/</emphasis>
55 
56 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacetoml">toml</link>&#32;<emphasis role="comment">//&#32;non-abi&#32;namespace;&#32;this&#32;is&#32;not&#32;an&#32;error</emphasis>
57 {
58 &#32;&#32;&#32;&#32;using&#32;::std::size_t;
59 &#32;&#32;&#32;&#32;using&#32;::std::intptr_t;
60 &#32;&#32;&#32;&#32;using&#32;::std::uintptr_t;
61 &#32;&#32;&#32;&#32;using&#32;::std::ptrdiff_t;
62 &#32;&#32;&#32;&#32;using&#32;::std::nullptr_t;
63 &#32;&#32;&#32;&#32;using&#32;::std::int8_t;
64 &#32;&#32;&#32;&#32;using&#32;::std::int16_t;
65 &#32;&#32;&#32;&#32;using&#32;::std::int32_t;
66 &#32;&#32;&#32;&#32;using&#32;::std::int64_t;
67 &#32;&#32;&#32;&#32;using&#32;::std::uint8_t;
68 &#32;&#32;&#32;&#32;using&#32;::std::uint16_t;
69 &#32;&#32;&#32;&#32;using&#32;::std::uint32_t;
70 &#32;&#32;&#32;&#32;using&#32;::std::uint64_t;
71 &#32;&#32;&#32;&#32;using&#32;::std::uint_least32_t;
72 &#32;&#32;&#32;&#32;using&#32;::std::uint_least64_t;
73 }
74 
75 <link linkend="_forward__declarations_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
76 {
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>date;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtime">time</link>;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structtime__offset">time_offset</link>;
80 
81 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga0f6a688021ea2fc13e1c76acd64e4bbc">TOML_HAS_CUSTOM_OPTIONAL_TYPE</link>,&#32;custopt,&#32;stdopt);
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdate__time">date_time</link>;
83 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsource__position">source_position</link>;
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsource__region">source_region</link>;
87 
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>node;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classnode__view">node_view</link>;
91 
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>key;
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classarray">array</link>;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classtable">table</link>;
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classvalue">value</link>;
97 
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classpath">path</link>;
99 
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>toml_formatter;
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>json_formatter;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>yaml_formatter;
103 
104 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;ex,&#32;noex);
105 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classparse__result">parse_result</link>&#32;=&#32;<link linkend="_classtable">table</link>;
107 <emphasis role="preprocessor">#else</emphasis>
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classparse__result">parse_result</link>;
109 <emphasis role="preprocessor">#endif</emphasis>
110 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
111 }
112 <link linkend="_forward__declarations_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
113 
114 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
115 {
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_ptr&#32;=&#32;std::unique_ptr&lt;node&gt;;
117 
118 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1b2e27349c9e21d35138a1196acd6d58">TOML_ABI_NAMESPACE_BOOL</link>(<link linkend="_group__configuration_1ga93097ecd88ca4bca393f60a78bda643b">TOML_EXCEPTIONS</link>,&#32;impl_ex,&#32;impl_noex);
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classparser">parser</link>;
120 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a2fc00b0b434c5deb14a83523be1b7e3f">TOML_ABI_NAMESPACE_END</link>;&#32;<emphasis role="comment">//&#32;TOML_EXCEPTIONS</emphasis>
121 
122 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;off</emphasis>
123 
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::string_view&#32;<link linkend="_toml_8hpp_1a6b12f27cd2f2075ecfa8109f2149ebdf">control_char_escapes</link>[]&#32;=
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0000&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0001&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0002&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0003&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0004&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0005&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0006&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0007&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\b&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\t&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\n&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u000B&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\f&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\r&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u000E&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u000F&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0010&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0011&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0012&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0013&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0014&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0015&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0016&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0017&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0018&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u0019&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001A&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001B&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001C&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001D&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001E&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\\u001F&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
158 &#32;&#32;&#32;&#32;};
159 
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::string_view&#32;<link linkend="_toml_8hpp_1af493727019d023763b73c4ee58a1e327">node_type_friendly_names</link>[]&#32;=
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;none&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;table&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;array&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;string&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;integer&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;floating-point&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;boolean&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;date&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;time&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;date-time&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>
172 &#32;&#32;&#32;&#32;};
173 
174 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clang-format&#32;on</emphasis>
175 }
176 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
177 
178 <emphasis role="preprocessor">#if&#32;TOML_ABI_NAMESPACES</emphasis>
179 <emphasis role="preprocessor">#if&#32;TOML_EXCEPTIONS</emphasis>
180 <emphasis role="preprocessor">#define&#32;TOML_PARSER_TYPENAME&#32;TOML_NAMESPACE::impl::impl_ex::parser</emphasis>
181 <emphasis role="preprocessor">#else</emphasis>
182 <emphasis role="preprocessor">#define&#32;TOML_PARSER_TYPENAME&#32;TOML_NAMESPACE::impl::impl_noex::parser</emphasis>
183 <emphasis role="preprocessor">#endif</emphasis>
184 <emphasis role="preprocessor">#else</emphasis>
185 <emphasis role="preprocessor">#define&#32;TOML_PARSER_TYPENAME&#32;TOML_NAMESPACE::impl::parser</emphasis>
186 <emphasis role="preprocessor">#endif</emphasis>
187 
189 
190 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
191 <emphasis role="comment">//#&#32;DOCUMENTED&#32;TYPEDEFS&#32;AND&#32;FORWARD&#32;DECLARATIONS</emphasis>
192 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
193 
195 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacetoml">toml</link>
196 {
197 }
198 
199 <link linkend="_forward__declarations_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>&#32;<emphasis role="comment">//&#32;abi&#32;namespace</emphasis>
200 {
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceliterals">literals</link>
220 &#32;&#32;&#32;&#32;{
221 &#32;&#32;&#32;&#32;}
222 
224 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;node_type&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>
225 &#32;&#32;&#32;&#32;{
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;integer,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;floating_point,&#32;
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;boolean,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;date,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structdate__time">date_time</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;
236 &#32;&#32;&#32;&#32;};
237 
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Char&gt;
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;std::basic_ostream&lt;Char&gt;&amp;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(std::basic_ostream&lt;Char&gt;&amp;&#32;lhs,&#32;node_type&#32;rhs)
254 &#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;str&#32;&#32;&#32;=&#32;impl::node_type_friendly_names[<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type_t&lt;node_type&gt;<emphasis role="keyword">&gt;</emphasis>(rhs)];
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>str_char_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(str)::value_type;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(std::is_same_v&lt;Char,&#32;str_char_t&gt;)
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;str;
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(Char)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(str_char_t))
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;std::basic_string_view&lt;Char&gt;{&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>Char*<emphasis role="keyword">&gt;</emphasis>(str.data()),&#32;str.length()&#32;};
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lhs&#32;&lt;&lt;&#32;str.data();
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;}
267 
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1aa1fd95f7d76d1d3b628ea04378447d0e">TOML_OPEN_FLAGS_ENUM</link>&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link>&#32;<emphasis role="comment">//&#32;being&#32;an&#32;&quot;OPEN&quot;&#32;flags&#32;enum&#32;is&#32;not&#32;an&#32;error</emphasis>
270 &#32;&#32;&#32;&#32;{
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
273 
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ab82bdeb4dd19cff4de2266a27d3dda18">format_as_binary</link>&#32;=&#32;1,
276 
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a23ea604a4d31b811ee1dcf554577c906">format_as_octal</link>&#32;=&#32;2,
279 
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a00083906b4f76536fcccf16aa0fe3c94">format_as_hexadecimal</link>&#32;=&#32;3,
282 &#32;&#32;&#32;&#32;};
283 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1af3268f6dd1413971826ff207adc92d49">TOML_MAKE_FLAGS</link>(<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>);
284 
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>&#32;<link linkend="_forward__declarations_8h_1ab28140ef75c3f18305fb795d6a7917c5">preserve_source_value_flags</link>&#32;=
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a1234ac91a810b3bd926ed6721ad1e44a">POXY_IMPLEMENTATION_DETAIL</link>(<link linkend="_forward__declarations_8h_1a0c7177c8470bcc9d80d5b97c482f4a86">value_flags</link>{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type_t&lt;value_flags&gt;<emphasis role="keyword">&gt;</emphasis>(-1)&#32;});
289 
294 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link>&#32;<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>&#32;:&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>
295 &#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
298 
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a2545d18c6766d54922be39e868fe4bf6">quote_dates_and_times</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;0),
301 
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a7ae1c6e457ad741d30ce82ed08c78ab1">quote_infinities_and_nans</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;1),
304 
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a8aed9fba74baf504c741d36149cb46a3">allow_literal_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;2),
307 
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a24920e85768d19625e1084e3ca601620">allow_multi_line_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;3),
310 
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a3e541c3ac7db3737fe85987dcdcf7dd8">allow_real_tabs_in_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;4),
313 
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a300010e368604efe47dbcae9fd8554fe">allow_unicode_strings</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;5),
316 
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a5c5bd51ada006fec47f0a14d90f6ac41">allow_binary_integers</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;6),
319 
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a48afee63c154da708ccdf978957db363">allow_octal_integers</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;7),
322 
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a8002cf32a7117fe62831fa23aa75cc84">allow_hexadecimal_integers</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;8),
325 
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;9),
328 
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;10),
331 
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1aeff1bb793cb4a2cf6c9be1b90fa0ec7d">indentation</link>&#32;=&#32;<link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link>&#32;|&#32;<link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link>,
334 
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ab6c9a08132134d6f8fb431cf7e71c022">relaxed_float_precision</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;11),
340 
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1a9349d47dff26b543042f8d1ffb50e28c">terse_key_value_pairs</link>&#32;=&#32;(1ull&#32;&lt;&lt;&#32;12),
343 &#32;&#32;&#32;&#32;};
344 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1af3268f6dd1413971826ff207adc92d49">TOML_MAKE_FLAGS</link>(<link linkend="_forward__declarations_8h_1ac3bcacae523bb832111f5195c46d68f4">format_flags</link>);
345 
361 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
362 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_preprocessor_8h_1a0d667de514e1435f8cfba9b403dd6665">TOML_TRIVIAL_ABI</link>&#32;<link linkend="_structinserter">inserter</link>
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::is_reference_v&lt;T&gt;);
365 
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<link linkend="_structinserter_1a7bc3a7baf430a2bb2e1141471d2f44f5">value</link>;
367 &#32;&#32;&#32;&#32;};
368 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
369 &#32;&#32;&#32;&#32;<link linkend="_structinserter">inserter</link>(T&#32;&amp;&amp;)&#32;-&gt;&#32;<link linkend="_structinserter">inserter&lt;T&amp;&amp;&gt;</link>;
370 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
371 &#32;&#32;&#32;&#32;<link linkend="_structinserter">inserter</link>(T&amp;)&#32;-&gt;&#32;<link linkend="_structinserter">inserter&lt;T&amp;&gt;</link>;
372 
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_forward__declarations_8h_1a081dc6ee550d344af321209d765fbe45">default_formatter</link>&#32;=&#32;toml_formatter;
376 }
377 <link linkend="_forward__declarations_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
378 
379 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
380 <emphasis role="comment">//#&#32;METAFUNCTIONS&#32;&amp;&#32;TYPE&#32;TRAITS</emphasis>
381 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
383 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
384 {
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
386 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>remove_cvref&#32;=&#32;std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;;
387 
388 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
389 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a3ad4b4468010a85a19ac9b40dab8b22a">common_signed_type</link>&#32;=&#32;std::common_type_t&lt;std::make_signed_t&lt;T&gt;...&gt;;
390 
391 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a815e932c93486480761ca77d94447901">is_one_of</link>&#32;=&#32;(<emphasis role="keyword">false</emphasis>&#32;||&#32;...&#32;||&#32;std::is_same_v&lt;T,&#32;U&gt;);
393 
394 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;T&gt;
395 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a76e834946c5dd85fc42b186f7ce325aa">all_integral</link>&#32;=&#32;(std::is_integral_v&lt;T&gt;&#32;&amp;&amp;&#32;...);
396 
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a97417fee781e1c7ba52d5c76ba4459a4">is_cvref</link>&#32;=&#32;std::is_reference_v&lt;T&gt;&#32;||&#32;std::is_const_v&lt;T&gt;&#32;||&#32;std::is_volatile_v&lt;T&gt;;
399 
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
401 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1af586d464952e4eac442a23643c69618d">is_wide_string</link>&#32;=
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_one_of&lt;std::decay_t&lt;T&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;<emphasis role="keywordtype">wchar_t</emphasis>*,&#32;std::wstring_view,&#32;std::wstring&gt;;
403 
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
405 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a165b6f8b86d0dd7f59d0cc6f3db5777d">value_retrieval_is_nothrow</link>&#32;=&#32;!std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;std::string&gt;
406 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!std::is_same_v&lt;remove_cvref&lt;T&gt;,&#32;std::u8string&gt;
408 <emphasis role="preprocessor">#endif</emphasis>
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_wide_string&lt;T&gt;;
411 
412 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>;
414 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1afe2778ba6d59f6bd36d5e426cf2b18e2">copy_ref</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structcopy__ref___1a6ad5cf45f8a2ac3ccaa2c1525f6923c9">copy_ref_&lt;Dest, Src&gt;::type</link>;
416 
417 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>
419 &#32;&#32;&#32;&#32;{
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;Dest;
421 &#32;&#32;&#32;&#32;};
422 
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>&lt;Dest,&#32;Src&amp;&gt;
425 &#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_lvalue_reference_t&lt;Dest&gt;;
427 &#32;&#32;&#32;&#32;};
428 
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__ref__">copy_ref_</link>&lt;Dest,&#32;Src&amp;&amp;&gt;
431 &#32;&#32;&#32;&#32;{
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_rvalue_reference_t&lt;Dest&gt;;
433 &#32;&#32;&#32;&#32;};
434 
435 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
436 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>;
437 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
438 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a5b72589fd4f35a9fdf114bd4dac17067">copy_cv</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structcopy__cv___1a29a7eb254004121ba4266360e4a39b9e">copy_cv_&lt;Dest, Src&gt;::type</link>;
439 
440 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
441 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>
442 &#32;&#32;&#32;&#32;{
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;Dest;
444 &#32;&#32;&#32;&#32;};
445 
446 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
447 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>&lt;Dest,&#32;const&#32;Src&gt;
448 &#32;&#32;&#32;&#32;{
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_const_t&lt;Dest&gt;;
450 &#32;&#32;&#32;&#32;};
451 
452 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
453 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>&lt;Dest,&#32;volatile&#32;Src&gt;
454 &#32;&#32;&#32;&#32;{
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_volatile_t&lt;Dest&gt;;
456 &#32;&#32;&#32;&#32;};
457 
458 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
459 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structcopy__cv__">copy_cv_</link>&lt;Dest,&#32;const&#32;volatile&#32;Src&gt;
460 &#32;&#32;&#32;&#32;{
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_cv_t&lt;Dest&gt;;
462 &#32;&#32;&#32;&#32;};
463 
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Dest,&#32;<emphasis role="keyword">typename</emphasis>&#32;Src&gt;
465 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a48304ccb99bc32a64f1e4bc7a3506f77">copy_cvref</link>&#32;=
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1afe2778ba6d59f6bd36d5e426cf2b18e2">copy_ref&lt;copy_ref&lt;copy_cv&lt;std::remove_reference_t&lt;Dest&gt;</link>,&#32;std::remove_reference_t&lt;Src&gt;&gt;,&#32;Dest&gt;,&#32;Src&gt;;
467 
468 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
469 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a10bb30a701ab034872fb59c5ef53b14d">dependent_false</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
470 
471 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
472 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a7097288127e91d1b819796e8e82d4768">first_is_same</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
474 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a7097288127e91d1b819796e8e82d4768">first_is_same</link>&lt;T,&#32;T,&#32;U...&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
475 
476 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;general&#32;value&#32;traits</emphasis>
477 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(as&#32;they&#32;relate&#32;to&#32;their&#32;equivalent&#32;native&#32;TOML&#32;type)</emphasis>
478 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
479 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>
480 &#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structvalue__traits_1a1f52ae9fa00169bc44b9a9ff1269b89c">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1a21eb6591c46f1ad03fde6c023e505459">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1ac77371ee33a336f20163058f130fac36">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1ac288ebd160d91ab2d37be04c48ba41cb">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structvalue__traits_1a5ab3010c8298c454cc2747be071e52a5">can_partially_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::none;
487 &#32;&#32;&#32;&#32;};
488 
489 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
490 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;T&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits</link>&lt;T&gt;
491 &#32;&#32;&#32;&#32;{};
492 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
493 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;volatile&#32;T&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits</link>&lt;T&gt;
494 &#32;&#32;&#32;&#32;{};
495 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;volatile&#32;T&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits</link>&lt;T&gt;
497 &#32;&#32;&#32;&#32;{};
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
499 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;T&amp;&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;</link>
500 &#32;&#32;&#32;&#32;{};
501 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
502 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;T&amp;&amp;&gt;&#32;:&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;</link>
503 &#32;&#32;&#32;&#32;{};
504 
505 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer&#32;value_traits&#32;specializations&#32;-&#32;standard&#32;types</emphasis>
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
507 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__limits">integer_limits</link>
508 &#32;&#32;&#32;&#32;{
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structinteger__limits_1a76a6fb2afdf3f0d854dc0419a0b77cf6">min</link>&#32;=&#32;(std::numeric_limits&lt;T&gt;::min)();
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;=&#32;(std::numeric_limits&lt;T&gt;::max)();
511 &#32;&#32;&#32;&#32;};
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__traits__base">integer_traits_base</link>&#32;:&#32;<link linkend="_structinteger__limits">integer_limits</link>&lt;T&gt;
514 &#32;&#32;&#32;&#32;{
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structinteger__traits__base_1ac1e2ddba29af450fd6991533e88f88c7">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>;
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinteger__traits__base_1abdf523a6640d95157dcd22f7ac5c47e7">is_native</link>&#32;=&#32;std::is_same_v&lt;T,&#32;native_type&gt;;
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinteger__traits__base_1a2483663732c9967c3c5e1c50c53bc11c">is_signed</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(-1)&#32;&lt;&#32;T{};&#32;<emphasis role="comment">//&#32;for&#32;impls&#32;not&#32;specializing&#32;std::is_signed&lt;T&gt;</emphasis>
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::integer;
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinteger__traits__base_1ada5df7608f26eb97427bdc96870d40f9">can_partially_represent_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
520 &#32;&#32;&#32;&#32;};
521 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
522 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structunsigned__integer__traits">unsigned_integer_traits</link>&#32;:&#32;<link linkend="_structinteger__traits__base">integer_traits_base</link>&lt;T&gt;
523 &#32;&#32;&#32;&#32;{
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structunsigned__integer__traits_1a30c3ba40f0b36f795cce3bc93e9f55b3">is_losslessly_convertible_to_native</link>&#32;=&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::max</link>&#32;&lt;=&#32;9223372036854775807ULL;
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structunsigned__integer__traits_1acd06024136896aee5e96cb295a62cbcf">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
526 &#32;&#32;&#32;&#32;};
527 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
528 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsigned__integer__traits">signed_integer_traits</link>&#32;:&#32;<link linkend="_structinteger__traits__base">integer_traits_base</link>&lt;T&gt;
529 &#32;&#32;&#32;&#32;{
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structsigned__integer__traits_1a4dd4ecbdb678eec9b60daabf7469e264">native_type</link>&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>;
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsigned__integer__traits_1a612713b8adc366ed102d13e90c844328">is_losslessly_convertible_to_native</link>&#32;=
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::min</link>&#32;&gt;=&#32;(-9223372036854775807LL&#32;-&#32;1LL)&#32;&amp;&amp;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::max</link>&#32;&lt;=&#32;9223372036854775807LL;
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structsigned__integer__traits_1a0a9cb1c7131e697ef124bba01d544998">can_represent_native</link>&#32;=
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::min</link>&#32;&lt;=&#32;(-9223372036854775807LL&#32;-&#32;1LL)&#32;&amp;&amp;&#32;<link linkend="_structinteger__limits">integer_limits&lt;T&gt;::max</link>&#32;&gt;=&#32;9223372036854775807LL;
535 &#32;&#32;&#32;&#32;};
536 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;T,&#32;bool&#32;S&#32;=&#32;integer_traits_base&lt;T&gt;::is_signed&gt;
537 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__traits">integer_traits</link>&#32;:&#32;<link linkend="_structsigned__integer__traits">signed_integer_traits</link>&lt;T&gt;
538 &#32;&#32;&#32;&#32;{};
539 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
540 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__traits">integer_traits</link>&lt;T,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;&#32;:&#32;<link linkend="_structunsigned__integer__traits">unsigned_integer_traits</link>&lt;T&gt;
541 &#32;&#32;&#32;&#32;{};
542 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
543 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;char&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;char&gt;
544 &#32;&#32;&#32;&#32;{};
545 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
546 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;char&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;char&gt;
547 &#32;&#32;&#32;&#32;{};
548 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
549 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;short&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;short&gt;
550 &#32;&#32;&#32;&#32;{};
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
552 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;short&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;short&gt;
553 &#32;&#32;&#32;&#32;{};
554 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
555 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;int&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;int&gt;
556 &#32;&#32;&#32;&#32;{};
557 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
558 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;int&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;int&gt;
559 &#32;&#32;&#32;&#32;{};
560 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;long&gt;
562 &#32;&#32;&#32;&#32;{};
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
564 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;long&gt;
565 &#32;&#32;&#32;&#32;{};
566 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
567 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;signed&#32;long&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;signed&#32;long&#32;long&gt;
568 &#32;&#32;&#32;&#32;{};
569 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
570 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;unsigned&#32;long&#32;long&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;unsigned&#32;long&#32;long&gt;
571 &#32;&#32;&#32;&#32;{};
572 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::is_native</link>);
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::is_signed</link>);
574 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::is_losslessly_convertible_to_native</link>);
575 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::can_represent_native</link>);
576 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;int64_t&gt;::can_partially_represent_native</link>);
577 
578 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;integer&#32;value_traits&#32;specializations&#32;-&#32;non-standard&#32;types</emphasis>
579 <emphasis role="preprocessor">#ifdef&#32;TOML_INT128</emphasis>
580 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
581 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__limits">integer_limits</link>&lt;TOML_INT128&gt;
582 &#32;&#32;&#32;&#32;{
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_INT128&#32;<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;=
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>TOML_INT128<emphasis role="keyword">&gt;</emphasis>((TOML_UINT128{&#32;1u&#32;}&#32;&lt;&lt;&#32;((__SIZEOF_INT128__&#32;*&#32;CHAR_BIT)&#32;-&#32;1))&#32;-&#32;1);
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_INT128&#32;<link linkend="_structinteger__limits_1a76a6fb2afdf3f0d854dc0419a0b77cf6">min</link>&#32;=&#32;-<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;-&#32;TOML_INT128{&#32;1&#32;};
586 &#32;&#32;&#32;&#32;};
587 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
588 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinteger__limits">integer_limits</link>&lt;TOML_UINT128&gt;
589 &#32;&#32;&#32;&#32;{
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_UINT128&#32;<link linkend="_structinteger__limits_1a76a6fb2afdf3f0d854dc0419a0b77cf6">min</link>&#32;=&#32;TOML_UINT128{};
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;TOML_UINT128&#32;<link linkend="_structinteger__limits_1a9e478e2835082b1fc3a5c41dfcc98dab">max</link>&#32;=&#32;(2u&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis>TOML_UINT128<emphasis role="keyword">&gt;</emphasis>(<link linkend="_structinteger__limits">integer_limits&lt;TOML_INT128&gt;::max</link>))&#32;+&#32;1u;
592 &#32;&#32;&#32;&#32;};
593 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
594 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_INT128&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;TOML_INT128&gt;
595 &#32;&#32;&#32;&#32;{};
596 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
597 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_UINT128&gt;&#32;:&#32;<link linkend="_structinteger__traits">integer_traits</link>&lt;TOML_UINT128&gt;
598 &#32;&#32;&#32;&#32;{};
599 <emphasis role="preprocessor">#endif</emphasis>
600 <emphasis role="preprocessor">#ifdef&#32;TOML_SMALL_INT_TYPE</emphasis>
601 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
602 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_SMALL_INT_TYPE&gt;&#32;:&#32;<link linkend="_structsigned__integer__traits">signed_integer_traits</link>&lt;TOML_SMALL_INT_TYPE&gt;
603 &#32;&#32;&#32;&#32;{};
604 <emphasis role="preprocessor">#endif</emphasis>
605 
606 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;floating-point&#32;traits&#32;base</emphasis>
607 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keywordtype">int</emphasis>&#32;MantissaDigits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;DecimalDigits&gt;
608 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits__base">float_traits_base</link>
609 &#32;&#32;&#32;&#32;{
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::floating_point;
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structfloat__traits__base_1a6a7083aaaa3f62b2212c8657511e7e75">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;double;
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1ad099d6e475393ed450feb7f298439bf6">is_native</link>&#32;=&#32;std::is_same_v&lt;T,&#32;native_type&gt;;
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1a911b70345331901cccc08432d0c25982">is_signed</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
614 
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structfloat__traits__base_1a34fb923e57b2764aeff3bc778d99e3ab">bits</link>&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;CHAR_BIT);
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&#32;&#32;=&#32;MantissaDigits;
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;=&#32;DecimalDigits;
618 
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1a61910dabf251ab11bb5ebad090931b4c">is_losslessly_convertible_to_native</link>&#32;=&#32;<link linkend="_structfloat__traits__base_1a34fb923e57b2764aeff3bc778d99e3ab">bits</link>&#32;&lt;=&#32;64&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&lt;=&#32;53&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DBL_MANT_DIG</emphasis>
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;&lt;=&#32;15;&#32;<emphasis role="comment">//&#32;DBL_DIG</emphasis>
622 
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1a6c6a275189b956e146f140326aa9b89c">can_represent_native</link>&#32;=&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&gt;=&#32;53&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DBL_MANT_DIG</emphasis>
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;&gt;=&#32;15;&#32;<emphasis role="comment">//&#32;DBL_DIG</emphasis>
625 
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structfloat__traits__base_1ae9ea5d9f69ff288b5b2f73c635507dbc">can_partially_represent_native</link>&#32;=&#32;<link linkend="_structfloat__traits__base_1ad976b39cf3b0596767b66e7f7767d906">digits</link>&#32;&gt;&#32;0&#32;&amp;&amp;&#32;<link linkend="_structfloat__traits__base_1aaad59133743a29cc81e0e7e0476e5e44">digits10</link>&#32;&gt;&#32;0;
627 &#32;&#32;&#32;&#32;};
628 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
629 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits">float_traits</link>&#32;:&#32;<link linkend="_structfloat__traits__base">float_traits_base</link>&lt;T,&#32;std::numeric_limits&lt;T&gt;::digits,&#32;std::numeric_limits&lt;T&gt;::digits10&gt;
630 &#32;&#32;&#32;&#32;{};
631 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FLOAT16</emphasis>
632 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
633 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits">float_traits</link>&lt;_Float16&gt;&#32;:&#32;<link linkend="_structfloat__traits__base">float_traits_base</link>&lt;_Float16,&#32;__FLT16_MANT_DIG__,&#32;__FLT16_DIG__&gt;
634 &#32;&#32;&#32;&#32;{};
635 <emphasis role="preprocessor">#endif</emphasis>
636 <emphasis role="preprocessor">#ifdef&#32;TOML_FLOAT128</emphasis>
637 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
638 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structfloat__traits">float_traits</link>&lt;TOML_FLOAT128&gt;&#32;:&#32;<link linkend="_structfloat__traits__base">float_traits_base</link>&lt;TOML_FLOAT128,&#32;__FLT128_MANT_DIG__,&#32;__FLT128_DIG__&gt;
639 &#32;&#32;&#32;&#32;{};
640 <emphasis role="preprocessor">#endif</emphasis>
641 
642 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;floating-point&#32;traits</emphasis>
643 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
644 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;float&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;float&gt;
645 &#32;&#32;&#32;&#32;{};
646 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;double&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;double&gt;
648 &#32;&#32;&#32;&#32;{};
649 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
650 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;long&#32;double&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;long&#32;double&gt;
651 &#32;&#32;&#32;&#32;{};
652 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FLOAT16</emphasis>
653 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
654 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;_Float16&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;_Float16&gt;
655 &#32;&#32;&#32;&#32;{};
656 <emphasis role="preprocessor">#endif</emphasis>
657 <emphasis role="preprocessor">#ifdef&#32;TOML_FLOAT128</emphasis>
658 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
659 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_FLOAT128&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;TOML_FLOAT128&gt;
660 &#32;&#32;&#32;&#32;{};
661 <emphasis role="preprocessor">#endif</emphasis>
662 <emphasis role="preprocessor">#ifdef&#32;TOML_SMALL_FLOAT_TYPE</emphasis>
663 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
664 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;TOML_SMALL_FLOAT_TYPE&gt;&#32;:&#32;<link linkend="_structfloat__traits">float_traits</link>&lt;TOML_SMALL_FLOAT_TYPE&gt;
665 &#32;&#32;&#32;&#32;{};
666 <emphasis role="preprocessor">#endif</emphasis>
667 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::is_native</link>);
668 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::is_losslessly_convertible_to_native</link>);
669 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::can_represent_native</link>);
670 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_structvalue__traits">value_traits&lt;double&gt;::can_partially_represent_native</link>);
671 
672 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;value_traits&#32;specializations&#32;-&#32;char-based&#32;strings</emphasis>
673 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
674 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structstring__traits">string_traits</link>
675 &#32;&#32;&#32;&#32;{
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structstring__traits_1acb511fff6377c844357fb14c998d4cf4">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::string;
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1a92f2ca5b8bb6e573abf39c8ce5efb292">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::is_same_v&lt;T,&#32;native_type&gt;;
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1aa142eeee0dde6e84f42a9fb90d3b9f3c">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54">can_represent_native</link>&#32;=
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!std::is_array_v&lt;T&gt;&#32;&amp;&amp;&#32;(!std::is_pointer_v&lt;T&gt;&#32;||&#32;std::is_const_v&lt;std::remove_pointer_t&lt;T&gt;&gt;);
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structstring__traits_1ab9b6819ab5edb3cb5c8ae02589a0e762">can_partially_represent_native</link>&#32;=&#32;<link linkend="_structstring__traits_1addfef4231e0b4e0b102b2ad5c2c80b54">can_represent_native</link>;
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::string;
683 &#32;&#32;&#32;&#32;};
684 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
685 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::string&gt;
686 &#32;&#32;&#32;&#32;{};
687 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
688 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::string_view&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::string_view&gt;
689 &#32;&#32;&#32;&#32;{};
690 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
691 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;const char*&gt;</link>
692 &#32;&#32;&#32;&#32;{};
693 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
694 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;const&#32;char[N]&gt;
695 &#32;&#32;&#32;&#32;{};
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
697 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;char*&gt;</link>
698 &#32;&#32;&#32;&#32;{};
699 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
700 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;char[N]&gt;
701 &#32;&#32;&#32;&#32;{};
702 
703 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;value_traits&#32;specializations&#32;-&#32;char8_t-based&#32;strings</emphasis>
704 <emphasis role="preprocessor">#if&#32;TOML_HAS_CHAR8</emphasis>
705 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
706 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::u8string&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::u8string&gt;
707 &#32;&#32;&#32;&#32;{};
708 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
709 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::u8string_view&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;std::u8string_view&gt;
710 &#32;&#32;&#32;&#32;{};
711 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
712 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char8_t*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;const char8_t*&gt;</link>
713 &#32;&#32;&#32;&#32;{};
714 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
715 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;char8_t[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;const&#32;char8_t[N]&gt;
716 &#32;&#32;&#32;&#32;{};
717 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
718 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char8_t*&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits&lt;char8_t*&gt;</link>
719 &#32;&#32;&#32;&#32;{};
720 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
721 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;char8_t[N]&gt;&#32;:&#32;<link linkend="_structstring__traits">string_traits</link>&lt;char8_t[N]&gt;
722 &#32;&#32;&#32;&#32;{};
723 <emphasis role="preprocessor">#endif</emphasis>
724 
725 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string&#32;value_traits&#32;specializations&#32;-&#32;wchar_t-based&#32;strings&#32;on&#32;Windows</emphasis>
726 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
727 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
728 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>wstring_traits
729 &#32;&#32;&#32;&#32;{
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::string;
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a0b9e60ca26c89aac055ec4e01170cb78">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a8d7224fe162a50f062ee1328b0968e15">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;narrow</emphasis>
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::is_same_v&lt;T,&#32;std::wstring&gt;;&#32;<emphasis role="comment">//&#32;widen</emphasis>
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a4123c1368fa8dd3bb05aff779a3afbfa">can_partially_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">can_represent_native</link>;
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;node_type::string;
736 &#32;&#32;&#32;&#32;};
737 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
738 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::wstring&gt;&#32;:&#32;wstring_traits&lt;std::wstring&gt;
739 &#32;&#32;&#32;&#32;{};
740 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
741 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_namespacestd">std</link>::wstring_view&gt;&#32;:&#32;wstring_traits&lt;std::wstring_view&gt;
742 &#32;&#32;&#32;&#32;{};
743 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
744 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;wstring_traits&lt;const&#32;wchar_t*&gt;
745 &#32;&#32;&#32;&#32;{};
746 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
747 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;const&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>[N]&gt;&#32;:&#32;wstring_traits&lt;const&#32;wchar_t[N]&gt;
748 &#32;&#32;&#32;&#32;{};
749 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
750 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>*&gt;&#32;:&#32;wstring_traits&lt;wchar_t*&gt;
751 &#32;&#32;&#32;&#32;{};
752 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
753 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>[N]&gt;&#32;:&#32;wstring_traits&lt;wchar_t[N]&gt;
754 &#32;&#32;&#32;&#32;{};
755 <emphasis role="preprocessor">#endif</emphasis>
756 
757 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;other&#32;&apos;native&apos;&#32;value_traits&#32;specializations</emphasis>
758 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;node_type&#32;NodeType&gt;
759 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnative__value__traits">native_value_traits</link>
760 &#32;&#32;&#32;&#32;{
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_structnative__value__traits_1acb9bb4c233e53efda4e52ee6b1d7c6a2">native_type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;T;
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1a6e882a8f3b23326993e92f69aa5dca7e">is_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1aa085e6ea9dfd8bbe4e4bd95121b474e9">is_losslessly_convertible_to_native</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1ae6816b96da077408cd540f9591ca2e8e">can_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structnative__value__traits_1ab3e14472a7bcdb9a3676151edb811bfc">can_partially_represent_native</link>&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;NodeType;
767 &#32;&#32;&#32;&#32;};
768 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
769 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;bool,&#32;node_type::boolean&gt;
770 &#32;&#32;&#32;&#32;{};
771 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
772 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;date&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;date,&#32;node_type::date&gt;
773 &#32;&#32;&#32;&#32;{};
774 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
775 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_structtime">time</link>&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;time,&#32;node_type::time&gt;
776 &#32;&#32;&#32;&#32;{};
777 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
778 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structvalue__traits">value_traits</link>&lt;<link linkend="_structdate__time">date_time</link>&gt;&#32;:&#32;<link linkend="_structnative__value__traits">native_value_traits</link>&lt;date_time,&#32;node_type::date_time&gt;
779 &#32;&#32;&#32;&#32;{};
780 
781 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;native&#32;value&#32;category&#32;queries</emphasis>
782 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
783 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a360741865d63894a80dd761769957c4f">native_type_of</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structvalue__traits_1a1f52ae9fa00169bc44b9a9ff1269b89c">value_traits&lt;T&gt;::native_type</link>;
784 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
785 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a0b9e60ca26c89aac055ec4e01170cb78">is_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::is_native</link>;
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
787 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1ad85ed5826d3f6fd7002bbc6ed3aa02e7">can_represent_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::can_represent_native</link>;
788 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
789 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a4123c1368fa8dd3bb05aff779a3afbfa">can_partially_represent_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::can_partially_represent_native</link>;
790 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
791 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a8d7224fe162a50f062ee1328b0968e15">is_losslessly_convertible_to_native</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::is_losslessly_convertible_to_native</link>;
792 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>...&#32;U&gt;
793 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a954dd8a60050010ad38f8e0112dc1645">is_natively_one_of</link>&#32;=&#32;is_one_of&lt;native_type_of&lt;T&gt;,&#32;U...&gt;;
794 
795 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;native&#32;value&#32;types&#32;=&gt;&#32;nodes</emphasis>
796 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
797 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>
798 &#32;&#32;&#32;&#32;{
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;T;
800 &#32;&#32;&#32;&#32;};
801 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
802 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;const&#32;T&gt;
803 &#32;&#32;&#32;&#32;{
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_const_t&lt;typename&#32;node_wrapper&lt;T&gt;::type&gt;;
805 &#32;&#32;&#32;&#32;};
806 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
807 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;volatile&#32;T&gt;
808 &#32;&#32;&#32;&#32;{
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_volatile_t&lt;typename&#32;node_wrapper&lt;T&gt;::type&gt;;
810 &#32;&#32;&#32;&#32;};
811 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;const&#32;volatile&#32;T&gt;
813 &#32;&#32;&#32;&#32;{
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_const_t&lt;std::add_volatile_t&lt;typename&#32;node_wrapper&lt;T&gt;::type&gt;&gt;;
815 &#32;&#32;&#32;&#32;};
816 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
817 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>&gt;
818 &#32;&#32;&#32;&#32;{
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>;
820 &#32;&#32;&#32;&#32;};
821 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
822 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&gt;
823 &#32;&#32;&#32;&#32;{
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>;
825 &#32;&#32;&#32;&#32;};
826 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
827 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;double&gt;
828 &#32;&#32;&#32;&#32;{
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;double&gt;</link>;
830 &#32;&#32;&#32;&#32;};
831 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
832 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;
833 &#32;&#32;&#32;&#32;{
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>;
835 &#32;&#32;&#32;&#32;};
836 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
837 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;date&gt;
838 &#32;&#32;&#32;&#32;{
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;date&gt;</link>;
840 &#32;&#32;&#32;&#32;};
841 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
842 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="_structtime">time</link>&gt;
843 &#32;&#32;&#32;&#32;{
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;time&gt;</link>;
845 &#32;&#32;&#32;&#32;};
846 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__wrapper">node_wrapper</link>&lt;<link linkend="_structdate__time">date_time</link>&gt;
848 &#32;&#32;&#32;&#32;{
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>;
850 &#32;&#32;&#32;&#32;};
851 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
852 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a44f601b3d02e062b7ec543291aa84fcb">wrap_node</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnode__wrapper">node_wrapper&lt;std::remove_reference_t&lt;T&gt;</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
853 
854 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nodes&#32;=&gt;&#32;native&#32;value&#32;types</emphasis>
855 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
856 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>
857 &#32;&#32;&#32;&#32;{
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;T;
859 &#32;&#32;&#32;&#32;};
860 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
861 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
862 &#32;&#32;&#32;&#32;{
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;T;
864 &#32;&#32;&#32;&#32;};
865 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
866 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;const&#32;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
867 &#32;&#32;&#32;&#32;{
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_const_t&lt;T&gt;;
869 &#32;&#32;&#32;&#32;};
870 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
871 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;volatile&#32;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
872 &#32;&#32;&#32;&#32;{
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_volatile_t&lt;T&gt;;
874 &#32;&#32;&#32;&#32;};
875 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
876 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__unwrapper">node_unwrapper</link>&lt;const&#32;volatile&#32;<link linkend="_classvalue">value</link>&lt;T&gt;&gt;
877 &#32;&#32;&#32;&#32;{
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;std::add_volatile_t&lt;std::add_const_t&lt;T&gt;&gt;;
879 &#32;&#32;&#32;&#32;};
880 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
881 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_toml_8hpp_1a0f4621a6694e07daea7a5c0282138524">unwrap_node</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_structnode__unwrapper">node_unwrapper&lt;std::remove_reference_t&lt;T&gt;</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
882 
883 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
884 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>
885 &#32;&#32;&#32;&#32;{
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;<link linkend="_structvalue__traits">value_traits&lt;T&gt;::type</link>;
887 &#32;&#32;&#32;&#32;};
888 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
889 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>&lt;<link linkend="_classtable">table</link>&gt;
890 &#32;&#32;&#32;&#32;{
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;node_type::table;
892 &#32;&#32;&#32;&#32;};
893 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
894 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>&lt;<link linkend="_classarray">array</link>&gt;
895 &#32;&#32;&#32;&#32;{
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;node_type::array;
897 &#32;&#32;&#32;&#32;};
898 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
899 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structnode__type__getter">node_type_getter</link>&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
900 &#32;&#32;&#32;&#32;{
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_classvalue">value</link>&#32;=&#32;node_type::none;
902 &#32;&#32;&#32;&#32;};
903 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
904 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;node_type&#32;<link linkend="_toml_8hpp_1a2ca921a72e58d33056ffcf88b9a2ae8d">node_type_of</link>&#32;=&#32;<link linkend="_structnode__type__getter">node_type_getter&lt;unwrap_node&lt;remove_cvref&lt;T&gt;</link>&gt;&gt;<link linkend="_classvalue">::value</link>;
905 
906 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;ConvertFrom&gt;
907 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a0b26579e78da4e151c2aaff1101d9d63">is_constructible_or_convertible</link>&#32;=&#32;std::is_constructible_v&lt;T,&#32;ConvertFrom&gt;&#32;<emphasis role="comment">//</emphasis>
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_convertible_v&lt;ConvertFrom,&#32;T&gt;;
909 }
910 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
912 
913 <link linkend="_forward__declarations_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
914 {
916 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
917 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_table&#32;=&#32;std::is_same_v&lt;impl::remove_cvref&lt;T&gt;,&#32;<link linkend="_classtable">table</link>&gt;;
918 
920 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
921 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>&#32;=&#32;std::is_same_v&lt;impl::remove_cvref&lt;T&gt;,&#32;<link linkend="_classarray">array</link>&gt;;
922 
924 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
925 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1aa34941ab50c25915afb9afe528fea814">is_container</link>&#32;=&#32;is_table&lt;T&gt;&#32;||&#32;is_array&lt;T&gt;;
926 
928 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
929 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a5d9214f3694adcc143822884ec06aac6">is_string</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&gt;;
932 
934 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
935 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a8b617e5248756c383118df7cf633176c">is_integer</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>&gt;;
938 
940 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
941 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;double&gt;</link>&gt;;
944 
946 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
947 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a1e443b4df05673f810658b66cb1f628d">is_number</link>&#32;=&#32;is_integer&lt;T&gt;&#32;||&#32;is_floating_point&lt;T&gt;;
948 
950 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
951 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a3dc64661a1bb4eb998b3b28a1893ee6b">is_boolean</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>&gt;;
954 
956 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
957 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a40c5fb13e28fdf655d3a6c7127bcb2b4">is_date</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date&gt;</link>&gt;;
960 
962 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
963 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1ae8325165bb42cc419d4b55c888a0d69f">is_time</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;time&gt;</link>&gt;;
966 
968 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
969 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a7fb2820864834a9cfcc07aab9ee4566b">is_date_time</link>&#32;=&#32;std::is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;impl::remove_cvref&lt;impl::wrap_node&lt;impl::remove_cvref&lt;T&gt;&gt;&gt;,&#32;<emphasis role="comment">//</emphasis>
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>&gt;;
972 
974 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
975 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1a7ecc8ff96d2556cce78ebef9c0433601">is_chronological</link>&#32;=&#32;is_date&lt;T&gt;&#32;||&#32;is_time&lt;T&gt;&#32;||&#32;is_date_time&lt;T&gt;;
976 
978 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
979 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1afced5bc5ef559606e3d75268ca601709">is_value</link>&#32;=&#32;is_string&lt;T&gt;&#32;||&#32;is_number&lt;T&gt;&#32;||&#32;is_boolean&lt;T&gt;&#32;||&#32;is_chronological&lt;T&gt;;
980 
982 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
983 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1adab17769fd14cb533f58e9600c31701c">is_node</link>&#32;=&#32;std::is_same_v&lt;toml::node,&#32;impl::remove_cvref&lt;T&gt;&gt;&#32;<emphasis role="comment">//</emphasis>
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::is_base_of_v&lt;toml::node,&#32;impl::remove_cvref&lt;T&gt;&gt;;
985 
987 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
988 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_forward__declarations_8h_1ac0b3c59d6626e469f1a2d97359ac0892">is_node_view</link>&#32;=&#32;impl::is_one_of&lt;impl::remove_cvref&lt;T&gt;,&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>,&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&gt;;
989 }
990 <link linkend="_forward__declarations_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
991 
992 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
993 <emphasis role="comment">//#&#32;INTERNAL&#32;HELPERS</emphasis>
994 <emphasis role="comment">//#---------------------------------------------------------------------------------------------------------------------</emphasis>
996 <link linkend="_preprocessor_8h_1ac9e12bb017879603274ac1765b85b872">TOML_IMPL_NAMESPACE_START</link>
997 {
998 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
999 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ad26b309f170b9504c99f7dd7b1a912f0">TOML_CONST_INLINE_GETTER</link>
1000 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::underlying_type_t&lt;T&gt;&#32;unwrap_enum(T&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1001 &#32;&#32;&#32;&#32;{
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::underlying_type_t&lt;T&gt;<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
1003 &#32;&#32;&#32;&#32;}
1004 
1005 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Q:&#32;&quot;why&#32;not&#32;use&#32;std::fpclassify?&quot;</emphasis>
1006 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A:&#32;Because&#32;it&#32;gets&#32;broken&#32;by&#32;-ffast-math&#32;and&#32;friends</emphasis>
1007 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1a3c0b0ffb1299e1086599b0748e8e36a1">TOML_CLOSED_ENUM</link>&#32;fp_class&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>
1008 &#32;&#32;&#32;&#32;{
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ok,
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;neg_inf,
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos_inf,
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nan
1013 &#32;&#32;&#32;&#32;};
1014 
1015 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1016 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;fp_class&#32;<link linkend="_toml_8hpp_1a2c39cdb56141a8d5637c9933c53e8bb6">fpclassify</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
1017 &#32;&#32;&#32;&#32;{
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>));
1019 
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_namespacesign">sign</link>&#32;&#32;&#32;&#32;&#32;=&#32;0b1000000000000000000000000000000000000000000000000000000000000000ull;
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;exponent&#32;=&#32;0b0111111111110000000000000000000000000000000000000000000000000000ull;
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;mantissa&#32;=&#32;0b0000000000001111111111111111111111111111111111111111111111111111ull;
1023 
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;val_bits;
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(&amp;val_bits,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>));
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((val_bits&#32;&amp;&#32;exponent)&#32;!=&#32;exponent)
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fp_class::ok;
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((val_bits&#32;&amp;&#32;mantissa))
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fp_class::nan;
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(val_bits&#32;&amp;&#32;<link linkend="_namespacesign">sign</link>)&#32;?&#32;fp_class::neg_inf&#32;:&#32;fp_class::pos_inf;
1031 &#32;&#32;&#32;&#32;}
1032 
1033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Q:&#32;&quot;why&#32;not&#32;use&#32;std::find&#32;and&#32;std::min?&quot;</emphasis>
1034 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A:&#32;Because&#32;&lt;algorithm&gt;&#32;is&#32;_huge_&#32;and&#32;these&#32;would&#32;be&#32;the&#32;only&#32;things&#32;I&#32;used&#32;from&#32;it.</emphasis>
1035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;I&#32;don&apos;t&#32;want&#32;to&#32;impose&#32;such&#32;a&#32;heavy&#32;compile-time&#32;burden&#32;on&#32;users.</emphasis>
1036 
1037 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1038 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
1039 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(Iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>,&#32;Iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;needle)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&gt;decltype(&amp;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>))
1041 &#32;&#32;&#32;&#32;{
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>++)
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>&#32;==&#32;needle)
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;(*start);
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
1046 &#32;&#32;&#32;&#32;}
1047 
1048 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1049 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab8168e9569e1eb2294b344fbb81983b5">TOML_PURE_INLINE_GETTER</link>
1050 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;T&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
1051 &#32;&#32;&#32;&#32;{
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>&#32;?&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;:&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>;
1053 &#32;&#32;&#32;&#32;}
1054 }
1055 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
1057 
1058 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
