<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2backward_2auto__ptr_8h_source" xml:lang="en-US">
<title>auto_ptr.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/backward/auto_ptr.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;auto_ptr&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_BACKWARD_AUTO_PTR_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_BACKWARD_AUTO_PTR_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
35 
36 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
37 {
38 _GLIBCXX_BEGIN_NAMESPACE_VERSION
39 
47 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
48 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>auto_ptr_ref
49 &#32;&#32;&#32;&#32;{
50 &#32;&#32;&#32;&#32;&#32;&#32;_Tp1*&#32;_M_ptr;
51 &#32;&#32;&#32;&#32;&#32;&#32;
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
53 &#32;&#32;&#32;&#32;&#32;&#32;auto_ptr_ref(_Tp1*&#32;__p):&#32;_M_ptr(__p)&#32;{&#32;}
54 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
55 
56 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
57 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
58 
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>auto_ptr
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
92 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;_M_ptr;
93 &#32;&#32;&#32;&#32;&#32;&#32;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;element_type;
97 &#32;&#32;&#32;&#32;&#32;&#32;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;auto_ptr(element_type*&#32;__p&#32;=&#32;0)&#32;<emphasis role="keywordflow">throw</emphasis>()&#32;:&#32;_M_ptr(__p)&#32;{&#32;}
106 
114 &#32;&#32;&#32;&#32;&#32;&#32;auto_ptr(auto_ptr&amp;&#32;__a)&#32;<emphasis role="keywordflow">throw</emphasis>()&#32;:&#32;_M_ptr(__a.release())&#32;{&#32;}
115 
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto_ptr(auto_ptr&lt;_Tp1&gt;&amp;&#32;__a)&#32;<emphasis role="keywordflow">throw</emphasis>()&#32;:&#32;_M_ptr(__a.release())&#32;{&#32;}
128 
137 &#32;&#32;&#32;&#32;&#32;&#32;auto_ptr&amp;
138 &#32;&#32;&#32;&#32;&#32;&#32;operator=(auto_ptr&amp;&#32;__a)&#32;<emphasis role="keywordflow">throw</emphasis>()
139 &#32;&#32;&#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;reset(__a.release());
141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
142 &#32;&#32;&#32;&#32;&#32;&#32;}
143 
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto_ptr&amp;
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(auto_ptr&lt;_Tp1&gt;&amp;&#32;__a)&#32;<emphasis role="keywordflow">throw</emphasis>()
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;reset(__a.release());
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
160 &#32;&#32;&#32;&#32;}
161 
172 &#32;&#32;&#32;&#32;&#32;&#32;~auto_ptr()&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;_M_ptr;&#32;}
173 &#32;&#32;&#32;&#32;&#32;&#32;
182 &#32;&#32;&#32;&#32;&#32;&#32;element_type&amp;
183 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()&#32;
184 &#32;&#32;&#32;&#32;&#32;&#32;{
185 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_ptr&#32;!=&#32;0);
186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_ptr;&#32;
187 &#32;&#32;&#32;&#32;&#32;&#32;}
188 &#32;&#32;&#32;&#32;&#32;&#32;
195 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
196 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()&#32;
197 &#32;&#32;&#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_ptr&#32;!=&#32;0);
199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;&#32;
200 &#32;&#32;&#32;&#32;&#32;&#32;}
201 &#32;&#32;&#32;&#32;&#32;&#32;
212 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
213 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordflow">throw</emphasis>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;&#32;}
214 &#32;&#32;&#32;&#32;&#32;&#32;
226 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
227 &#32;&#32;&#32;&#32;&#32;&#32;release()&#32;<emphasis role="keywordflow">throw</emphasis>()
228 &#32;&#32;&#32;&#32;&#32;&#32;{
229 &#32;&#32;&#32;&#32;element_type*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_ptr;
230 &#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;0;
231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
232 &#32;&#32;&#32;&#32;&#32;&#32;}
233 &#32;&#32;&#32;&#32;&#32;&#32;
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;reset(element_type*&#32;__p&#32;=&#32;0)&#32;<emphasis role="keywordflow">throw</emphasis>()
243 &#32;&#32;&#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p&#32;!=&#32;_M_ptr)
245 &#32;&#32;&#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;_M_ptr;
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__p;
248 &#32;&#32;&#32;&#32;&#32;&#32;}
249 &#32;&#32;&#32;&#32;&#32;&#32;}
250 &#32;&#32;&#32;&#32;&#32;&#32;
266 &#32;&#32;&#32;&#32;&#32;&#32;auto_ptr(auto_ptr_ref&lt;element_type&gt;&#32;__ref)&#32;<emphasis role="keywordflow">throw</emphasis>()
267 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__ref._M_ptr)&#32;{&#32;}
268 &#32;&#32;&#32;&#32;&#32;&#32;
269 &#32;&#32;&#32;&#32;&#32;&#32;auto_ptr&amp;
270 &#32;&#32;&#32;&#32;&#32;&#32;operator=(auto_ptr_ref&lt;element_type&gt;&#32;__ref)&#32;<emphasis role="keywordflow">throw</emphasis>()
271 &#32;&#32;&#32;&#32;&#32;&#32;{
272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ref._M_ptr&#32;!=&#32;this-&gt;get())
273 &#32;&#32;&#32;&#32;&#32;&#32;{
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;_M_ptr;
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__ref._M_ptr;
276 &#32;&#32;&#32;&#32;&#32;&#32;}
277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
278 &#32;&#32;&#32;&#32;&#32;&#32;}
279 &#32;&#32;&#32;&#32;&#32;&#32;
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;auto_ptr_ref&lt;_Tp1&gt;()&#32;<emphasis role="keywordflow">throw</emphasis>()
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;auto_ptr_ref&lt;_Tp1&gt;(this-&gt;release());&#32;}
283 
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;auto_ptr&lt;_Tp1&gt;()&#32;<emphasis role="keywordflow">throw</emphasis>()
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;auto_ptr&lt;_Tp1&gt;(this-&gt;release());&#32;}
287 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a227f63a23a506856d08dcd7ea5fa8085">_GLIBCXX11_DEPRECATED_SUGGEST</link>(<emphasis role="stringliteral">&quot;std::unique_ptr&quot;</emphasis>);
288 
289 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
290 &#32;&#32;<emphasis role="comment">//&#32;541.&#32;shared_ptr&#32;template&#32;assignment&#32;and&#32;void</emphasis>
291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>auto_ptr&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
293 &#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;element_type;
296 &#32;&#32;&#32;&#32;}&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a20ec3344b6d8eba4fa0edcb544d1b851">_GLIBCXX11_DEPRECATED</link>;
297 
298 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
299 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
300 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
301 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
302 &#32;&#32;&#32;&#32;__shared_count&lt;_Lp&gt;::__shared_count(std::auto_ptr&lt;_Tp&gt;&amp;&amp;&#32;__r)
303 &#32;&#32;&#32;&#32;:&#32;_M_pi(<emphasis role="keyword">new</emphasis>&#32;_Sp_counted_ptr&lt;_Tp*,&#32;_Lp&gt;(__r.get()))
304 &#32;&#32;&#32;&#32;{&#32;__r.release();&#32;}
305 
306 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
307 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&gt;
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
309 &#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;::__shared_ptr(std::auto_ptr&lt;_Tp1&gt;&amp;&amp;&#32;__r)
310 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r.get()),&#32;_M_refcount()
311 &#32;&#32;&#32;&#32;{
312 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_ConvertibleConcept&lt;_Tp1*,&#32;_Tp*&gt;)
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp1)&#32;&gt;&#32;0,&#32;<emphasis role="stringliteral">&quot;incomplete&#32;type&quot;</emphasis>&#32;);
314 &#32;&#32;&#32;&#32;&#32;&#32;_Tp1*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r.get();
315 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__shared_count&lt;_Lp&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r));
316 &#32;&#32;&#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
317 &#32;&#32;&#32;&#32;}
318 
319 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
320 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&gt;
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
322 &#32;&#32;&#32;&#32;shared_ptr&lt;_Tp&gt;::shared_ptr(std::auto_ptr&lt;_Tp1&gt;&amp;&amp;&#32;__r)
323 &#32;&#32;&#32;&#32;:&#32;__shared_ptr&lt;_Tp&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r))&#32;{&#32;}
324 
325 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dp&gt;
326 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&gt;
327 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
328 &#32;&#32;&#32;&#32;unique_ptr&lt;_Tp,&#32;_Dp&gt;::unique_ptr(auto_ptr&lt;_Up&gt;&amp;&amp;&#32;__u)&#32;noexcept
329 &#32;&#32;&#32;&#32;:&#32;_M_t(__u.release(),&#32;deleter_type())&#32;{&#32;}
330 <emphasis role="preprocessor">#endif</emphasis>
331 
332 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
333 
334 _GLIBCXX_END_NAMESPACE_VERSION
335 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
336 
337 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_BACKWARD_AUTO_PTR_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
