<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2parallel_2balanced__quicksort_8h_source" xml:lang="en-US">
<title>balanced_quicksort.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/parallel/balanced_quicksort.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
40 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler.</emphasis>
41 
42 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_BALANCED_QUICKSORT_H</emphasis>
43 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_BALANCED_QUICKSORT_H&#32;1</emphasis>
44 
45 <emphasis role="preprocessor">#include&#32;&lt;parallel/basic_iterator.h&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algo.h&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>
48 
49 <emphasis role="preprocessor">#include&#32;&lt;parallel/settings.h&gt;</emphasis>
50 <emphasis role="preprocessor">#include&#32;&lt;parallel/partition.h&gt;</emphasis>
51 <emphasis role="preprocessor">#include&#32;&lt;parallel/random_number.h&gt;</emphasis>
52 <emphasis role="preprocessor">#include&#32;&lt;parallel/queue.h&gt;</emphasis>
53 
54 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
55 <emphasis role="preprocessor">#include&#32;&lt;parallel/checkers.h&gt;</emphasis>
56 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAVE_UNISTD_H</emphasis>
57 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
58 <emphasis role="preprocessor">#endif</emphasis>
59 <emphasis role="preprocessor">#endif</emphasis>
60 
61 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
62 {
64 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_QSBThreadLocal
66 &#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a1fb2f487e249373accb75cdb89928c93">_TraitsType</link>;
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a6c8c7846694fcbd41d9cbfcd26bf9e0f">_DifferenceType</link>;
69 
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;_RAIter,&#32;_RAIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a4b151f36b1cac07063a9e6ae1ae9fd5a">_Piece</link>;
73 
75 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a4b151f36b1cac07063a9e6ae1ae9fd5a">_Piece</link>&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a0018330a1faea8911bb0a8a7ee44f72e">_M_initial</link>;
76 
78 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___restricted_bounded_concurrent_queue">_RestrictedBoundedConcurrentQueue&lt;_Piece&gt;</link>&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a2ee6e3c4f078150a32f8c6b8695eb4f6">_M_leftover_parts</link>;
79 
81 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a0b63568837becdfbbd1f7accc1c05d1d">_M_num_threads</link>;
82 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a6c8c7846694fcbd41d9cbfcd26bf9e0f">_DifferenceType</link>*&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a3e79be4a873561b530aca36493c6c12b">_M_elements_leftover</link>;
85 
87 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a4b151f36b1cac07063a9e6ae1ae9fd5a">_Piece</link>&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1aba7a5f9235cc1a847e3754df018eb9b4">_M_global</link>;
88 
91 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a47e9a744d2981943c13ac5a0af56f493">_QSBThreadLocal</link>(<emphasis role="keywordtype">int</emphasis>&#32;__queue_size)&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local_1a2ee6e3c4f078150a32f8c6b8695eb4f6">_M_leftover_parts</link>(__queue_size)&#32;{&#32;}
92 &#32;&#32;&#32;&#32;};
93 
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;::difference_type
103 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af5df990f9c6b42ec71b0b3245efd8e56">__qsb_divide</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads)
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(__num_threads&#32;&gt;&#32;0);
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
111 
112 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__pivot_pos&#32;=
113 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a74914ea59d68887b517e12c90189dbcd">__median_of_three_iterators</link>(__begin,&#32;__begin&#32;+&#32;(__end&#32;-&#32;__begin)&#32;/&#32;2,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end&#32;&#32;-&#32;1,&#32;__comp);
115 
116 <emphasis role="preprocessor">#if&#32;defined(_GLIBCXX_PARALLEL_ASSERTIONS)</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;be&#32;in&#32;between&#32;somewhere.</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>((!__comp(*__pivot_pos,&#32;*__begin)
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__comp(*(__begin&#32;+&#32;__n&#32;/&#32;2),
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__pivot_pos))
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(!__comp(*__pivot_pos,&#32;*__begin)
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__comp(*(__end&#32;-&#32;1),&#32;*__pivot_pos))
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(!__comp(*__pivot_pos,&#32;*(__begin&#32;+&#32;__n&#32;/&#32;2))
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__comp(*__begin,&#32;*__pivot_pos))
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(!__comp(*__pivot_pos,&#32;*(__begin&#32;+&#32;__n&#32;/&#32;2))
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__comp(*(__end&#32;-&#32;1),&#32;*__pivot_pos))
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(!__comp(*__pivot_pos,&#32;*(__end&#32;-&#32;1))
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__comp(*__begin,&#32;*__pivot_pos))
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(!__comp(*__pivot_pos,&#32;*(__end&#32;-&#32;1))
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__comp(*(__begin&#32;+&#32;__n&#32;/&#32;2),
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__pivot_pos)));
134 <emphasis role="preprocessor">#endif</emphasis>
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Swap&#32;pivot&#32;value&#32;to&#32;end.</emphasis>
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pivot_pos&#32;!=&#32;(__end&#32;-&#32;1))
138 &#32;&#32;&#32;&#32;std::iter_swap(__pivot_pos,&#32;__end&#32;-&#32;1);
139 &#32;&#32;&#32;&#32;&#32;&#32;__pivot_pos&#32;=&#32;__end&#32;-&#32;1;
140 
141 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd">__gnu_parallel::__binder2nd&lt;_Compare, _ValueType, _ValueType, bool&gt;</link>
142 &#32;&#32;&#32;&#32;__pred(__comp,&#32;*__pivot_pos);
143 
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Divide,&#32;returning&#32;__end&#32;-&#32;__begin&#32;-&#32;1&#32;in&#32;the&#32;worst&#32;case.</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__split_pos&#32;=&#32;<link linkend="_namespace____gnu__parallel_1ac870af1d69405f2f53cd7a96e1d92348">__parallel_partition</link>(__begin,&#32;__end&#32;-&#32;1,
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_threads);
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Swap&#32;back&#32;pivot&#32;to&#32;middle.</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__begin&#32;+&#32;__split_pos,&#32;__pivot_pos);
151 &#32;&#32;&#32;&#32;&#32;&#32;__pivot_pos&#32;=&#32;__begin&#32;+&#32;__split_pos;
152 
153 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__r;
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(__r&#32;=&#32;__begin;&#32;__r&#32;!=&#32;__pivot_pos;&#32;++__r)
156 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(__comp(*__r,&#32;*__pivot_pos));
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__r&#32;!=&#32;__end;&#32;++__r)
158 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(!__comp(*__r,&#32;*__pivot_pos));
159 <emphasis role="preprocessor">#endif</emphasis>
160 
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__split_pos;
162 &#32;&#32;&#32;&#32;}
163 
172 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
173 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
174 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8d9c5686c4621822c7c3cdd015f7e693">__qsb_conquer</link>(_QSBThreadLocal&lt;_RAIter&gt;**&#32;__tls,
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam,&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads,
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__parent_wait)
179 &#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
185 
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_threads&#32;&lt;=&#32;1&#32;||&#32;__n&#32;&lt;=&#32;1)
187 &#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tls[__iam]-&gt;_M_initial.first&#32;&#32;=&#32;__begin;
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tls[__iam]-&gt;_M_initial.second&#32;=&#32;__end;
190 
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a7565d258aacb02328cef6eb2781ab711">__qsb_local_sort_with_helping</link>(__tls,&#32;__comp,&#32;__iam,&#32;__parent_wait);
192 
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
194 &#32;&#32;&#32;&#32;}
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Divide&#32;step.</emphasis>
197 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__split_pos&#32;=
198 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1af5df990f9c6b42ec71b0b3245efd8e56">__qsb_divide</link>(__begin,&#32;__end,&#32;__comp,&#32;__num_threads);
199 
200 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(0&#32;&lt;=&#32;__split_pos&#32;&amp;&amp;
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__split_pos&#32;&lt;&#32;(__end&#32;-&#32;__begin));
203 <emphasis role="preprocessor">#endif</emphasis>
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>
206 &#32;&#32;&#32;&#32;__num_threads_leftside&#32;=&#32;std::max&lt;_ThreadIndex&gt;
207 &#32;&#32;&#32;&#32;(1,&#32;std::min&lt;_ThreadIndex&gt;(__num_threads&#32;-&#32;1,&#32;__split_pos
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__num_threads&#32;/&#32;__n));
209 
210 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;atomic</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;*__tls[__iam]-&gt;_M_elements_leftover&#32;-=&#32;(_DifferenceType)1;
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conquer&#32;step.</emphasis>
214 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;num_threads(2)</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__wait;
217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>()&#32;&lt;&#32;2)
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__wait&#32;=&#32;<emphasis role="keyword">false</emphasis>;
219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__wait&#32;=&#32;__parent_wait;
221 
222 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;sections</emphasis>
223 &#32;&#32;&#32;&#32;{
224 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;section</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;{
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8d9c5686c4621822c7c3cdd015f7e693">__qsb_conquer</link>(__tls,&#32;__begin,&#32;__begin&#32;+&#32;__split_pos,&#32;__comp,
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iam,&#32;__num_threads_leftside,&#32;__wait);
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__wait&#32;=&#32;__parent_wait;
229 &#32;&#32;&#32;&#32;&#32;&#32;}
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;pivot_pos&#32;is&#32;left&#32;in&#32;place,&#32;to&#32;ensure&#32;termination.</emphasis>
231 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;section</emphasis>
232 &#32;&#32;&#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8d9c5686c4621822c7c3cdd015f7e693">__qsb_conquer</link>(__tls,&#32;__begin&#32;+&#32;__split_pos&#32;+&#32;1,&#32;__end,&#32;__comp,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iam&#32;+&#32;__num_threads_leftside,
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_threads&#32;-&#32;__num_threads_leftside,&#32;__wait);
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__wait&#32;=&#32;__parent_wait;
237 &#32;&#32;&#32;&#32;&#32;&#32;}
238 &#32;&#32;&#32;&#32;}
239 &#32;&#32;&#32;&#32;&#32;&#32;}
240 &#32;&#32;&#32;&#32;}
241 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
250 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a7565d258aacb02328cef6eb2781ab711">__qsb_local_sort_with_helping</link>(_QSBThreadLocal&lt;_RAIter&gt;**&#32;__tls,
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&amp;&#32;__comp,&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam,
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__wait)
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;_RAIter,&#32;_RAIter&gt;&#32;_Piece;
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;_QSBThreadLocal&lt;_RAIter&gt;&amp;&#32;__tl&#32;=&#32;*__tls[__iam];
260 
261 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType
262 &#32;&#32;&#32;&#32;__base_case_n&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>().<link linkend="_struct____gnu__parallel_1_1___settings_1a3a0bbce1f017d9a3ea2ea176722ed853">sort_qsb_base_case_maximal_n</link>;
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__base_case_n&#32;&lt;&#32;2)
264 &#32;&#32;&#32;&#32;__base_case_n&#32;=&#32;2;
265 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=&#32;__tl._M_num_threads;
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Every&#32;thread&#32;has&#32;its&#32;own&#32;random&#32;number&#32;generator.</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;_RandomNumber&#32;__rng(__iam&#32;+&#32;1);
269 
270 &#32;&#32;&#32;&#32;&#32;&#32;_Piece&#32;__current&#32;=&#32;__tl._M_initial;
271 
272 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__elements_done&#32;=&#32;0;
273 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__total_elements_done&#32;=&#32;0;
275 <emphasis role="preprocessor">#endif</emphasis>
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
278 &#32;&#32;&#32;&#32;{
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invariant:&#32;__current&#32;must&#32;be&#32;a&#32;valid&#32;(maybe&#32;empty)&#32;range.</emphasis>
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__begin&#32;=&#32;__current.first,&#32;__end&#32;=&#32;__current.second;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;__base_case_n)
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Divide.</emphasis>
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__pivot_pos&#32;=&#32;__begin&#32;+&#32;&#32;__rng(__n);
287 
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Swap&#32;__pivot_pos&#32;value&#32;to&#32;end.</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pivot_pos&#32;!=&#32;(__end&#32;-&#32;1))
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__pivot_pos,&#32;__end&#32;-&#32;1);
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pivot_pos&#32;=&#32;__end&#32;-&#32;1;
292 
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd">__gnu_parallel::__binder2nd</link>
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;_Compare,&#32;_ValueType,&#32;_ValueType,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred(__comp,&#32;*__pivot_pos);
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Divide,&#32;leave&#32;pivot&#32;unchanged&#32;in&#32;last&#32;place.</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__split_pos1,&#32;__split_pos2;
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__split_pos1&#32;=&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">__gnu_sequential::partition</link>(__begin,&#32;__end&#32;-&#32;1,
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred);
301 
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;side:&#32;&lt;&#32;__pivot_pos;&#32;__right&#32;side:&#32;&gt;=&#32;__pivot_pos.</emphasis>
303 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(__begin&#32;&lt;=&#32;__split_pos1
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__split_pos1&#32;&lt;&#32;__end);
306 <emphasis role="preprocessor">#endif</emphasis>
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Swap&#32;pivot&#32;back&#32;to&#32;middle.</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__split_pos1&#32;!=&#32;__pivot_pos)
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::iter_swap(__split_pos1,&#32;__pivot_pos);
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pivot_pos&#32;=&#32;__split_pos1;
311 
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;case&#32;all&#32;elements&#32;are&#32;equal,&#32;__split_pos1&#32;==&#32;0.</emphasis>
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__split_pos1&#32;+&#32;1&#32;-&#32;__begin)&#32;&lt;&#32;(__n&#32;&gt;&gt;&#32;7)
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__end&#32;-&#32;__split_pos1)&#32;&lt;&#32;(__n&#32;&gt;&gt;&#32;7))
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Very&#32;unequal&#32;split,&#32;one&#32;part&#32;smaller&#32;than&#32;one&#32;128th</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;elements&#32;not&#32;strictly&#32;larger&#32;than&#32;the&#32;pivot.</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____unary__negate">__gnu_parallel::__unary_negate</link>&lt;<link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;_Compare,&#32;_ValueType,&#32;_ValueType,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;,&#32;_ValueType&gt;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred(<link linkend="_class____gnu__parallel_1_1____binder1st">__gnu_parallel::__binder1st</link>
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;_Compare,&#32;_ValueType,&#32;_ValueType,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__comp,&#32;*__pivot_pos));
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;other&#32;end&#32;of&#32;pivot-equal&#32;range.</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__split_pos2&#32;=&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">__gnu_sequential::partition</link>(__split_pos1&#32;+&#32;1,
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end,&#32;__pred);
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;skip&#32;the&#32;pivot.</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__split_pos2&#32;=&#32;__split_pos1&#32;+&#32;1;
331 
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Elements&#32;equal&#32;to&#32;pivot&#32;are&#32;done.</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__elements_done&#32;+=&#32;(__split_pos2&#32;-&#32;__split_pos1);
334 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__total_elements_done&#32;+=&#32;(__split_pos2&#32;-&#32;__split_pos1);
336 <emphasis role="preprocessor">#endif</emphasis>
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;push&#32;larger&#32;part&#32;onto&#32;stack.</emphasis>
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((__split_pos1&#32;+&#32;1)&#32;-&#32;__begin)&#32;&lt;&#32;(__end&#32;-&#32;(__split_pos2)))
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;side&#32;larger.</emphasis>
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__split_pos2)&#32;!=&#32;__end)
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tl._M_leftover_parts.push_front
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::make_pair(__split_pos2,&#32;__end));
344 
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//__current.first&#32;=&#32;__begin;&#32;&#32;&#32;&#32;//already&#32;set&#32;anyway</emphasis>
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__current.second&#32;=&#32;__split_pos1;
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;side&#32;larger.</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__begin&#32;!=&#32;__split_pos1)
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tl._M_leftover_parts.push_front(std::make_pair
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__begin,&#32;__split_pos1));
355 
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__current.first&#32;=&#32;__split_pos2;
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//__current.second&#32;=&#32;__end;&#32;&#32;&#32;&#32;&#32;//already&#32;set&#32;anyway</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">__gnu_sequential::sort</link>(__begin,&#32;__end,&#32;__comp);
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__elements_done&#32;+=&#32;__n;
365 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__total_elements_done&#32;+=&#32;__n;
367 <emphasis role="preprocessor">#endif</emphasis>
368 
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prefer&#32;own&#32;stack,&#32;small&#32;pieces.</emphasis>
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__tl._M_leftover_parts.pop_front(__current))
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
372 
373 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;atomic</emphasis>
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__tl._M_elements_leftover&#32;-=&#32;__elements_done;
375 
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__elements_done&#32;=&#32;0;
377 
378 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;__search_start&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1a801f329e937820fb742b2faf5974d57f">omp_get_wtime</link>();
380 <emphasis role="preprocessor">#endif</emphasis>
381 
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;new&#32;work.</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__successfully_stolen&#32;=&#32;<emphasis role="keyword">false</emphasis>;
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__wait&#32;&amp;&amp;&#32;*__tl._M_elements_leftover&#32;&gt;&#32;0
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__successfully_stolen
386 #<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a1210f57e55592f3e44cf8a870ede1e26">_GLIBCXX_PARALLEL_ASSERTIONS</link>
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Possible&#32;dead-lock.</emphasis>
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(<link linkend="__classes_2lib_2include_2omp_8h_1a801f329e937820fb742b2faf5974d57f">omp_get_wtime</link>()&#32;&lt;&#32;(__search_start&#32;+&#32;1.0))
389 #endif
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__victim;
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__victim&#32;=&#32;__rng(__num_threads);
394 
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Large&#32;pieces.</emphasis>
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__successfully_stolen&#32;=&#32;(__victim&#32;!=&#32;__iam)
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__tls[__victim]-&gt;_M_leftover_parts.pop_back(__current);
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__successfully_stolen)
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aaa76236af73146ae89f726921bc3f2cb">__yield</link>();
400 <emphasis role="preprocessor">#if&#32;!defined(__ICC)&#32;&amp;&amp;&#32;!defined(__ECC)</emphasis>
401 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;flush</emphasis>
402 <emphasis role="preprocessor">#endif</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
404 
405 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2omp_8h_1a801f329e937820fb742b2faf5974d57f">omp_get_wtime</link>()&#32;&gt;=&#32;(__search_start&#32;+&#32;1.0))
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sleep(1);
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(<link linkend="__classes_2lib_2include_2omp_8h_1a801f329e937820fb742b2faf5974d57f">omp_get_wtime</link>()
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;(__search_start&#32;+&#32;1.0));
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
412 <emphasis role="preprocessor">#endif</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__successfully_stolen)
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
415 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(*__tl._M_elements_leftover&#32;==&#32;0);
417 <emphasis role="preprocessor">#endif</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
421 &#32;&#32;&#32;&#32;}
422 &#32;&#32;&#32;&#32;}
423 
431 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
432 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
433 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a4093dd098b32542e3d3f43ebd4c6f940">__parallel_sort_qsb</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads)
435 &#32;&#32;&#32;&#32;{
436 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__end&#32;-&#32;__begin)
437 
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;_RAIter,&#32;_RAIter&gt;&#32;_Piece;
442 
443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_QSBThreadLocal&lt;_RAIter&gt;&#32;_TLSType;
444 
445 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
446 
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;1)
448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
449 
450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;At&#32;least&#32;one&#32;element&#32;per&#32;processor.</emphasis>
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_threads&#32;&gt;&#32;__n)
452 &#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link><emphasis role="keyword">&gt;</emphasis>(__n);
453 
454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;thread&#32;local&#32;storage</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;_TLSType**&#32;__tls&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_TLSType*[__num_threads];
456 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__queue_size&#32;=&#32;(__num_threads
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>)(<link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link>(__n)&#32;+&#32;1));
458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__t&#32;=&#32;0;&#32;__t&#32;&lt;&#32;__num_threads;&#32;++__t)
459 &#32;&#32;&#32;&#32;__tls[__t]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_QSBThreadLocal&lt;_RAIter&gt;(__queue_size);
460 
461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;can&#32;never&#32;be&#32;more&#32;than&#32;ceil(__rd_log2(__n))&#32;ranges&#32;on&#32;the</emphasis>
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stack,&#32;because</emphasis>
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.&#32;Only&#32;one&#32;processor&#32;pushes&#32;onto&#32;the&#32;stack</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;The&#32;largest&#32;range&#32;has&#32;at&#32;most&#32;length&#32;__n</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3.&#32;Each&#32;range&#32;is&#32;larger&#32;than&#32;half&#32;of&#32;the&#32;range&#32;remaining</emphasis>
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;_DifferenceType&#32;__elements_leftover&#32;=&#32;__n;
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__num_threads;&#32;++__i)
468 &#32;&#32;&#32;&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tls[__i]-&gt;_M_elements_leftover&#32;=&#32;&amp;__elements_leftover;
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tls[__i]-&gt;_M_num_threads&#32;=&#32;__num_threads;
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tls[__i]-&gt;_M_global&#32;=&#32;std::make_pair(__begin,&#32;__end);
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Just&#32;in&#32;case&#32;nothing&#32;is&#32;left&#32;to&#32;assign.</emphasis>
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tls[__i]-&gt;_M_initial&#32;=&#32;std::make_pair(__end,&#32;__end);
475 &#32;&#32;&#32;&#32;}
476 
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Main&#32;recursion&#32;call.</emphasis>
478 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8d9c5686c4621822c7c3cdd015f7e693">__qsb_conquer</link>(__tls,&#32;__begin,&#32;__begin&#32;+&#32;__n,&#32;__comp,&#32;0,
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_threads,&#32;<emphasis role="keyword">true</emphasis>);
480 
481 <emphasis role="preprocessor">#if&#32;_GLIBCXX_PARALLEL_ASSERTIONS</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;stack&#32;must&#32;be&#32;empty.</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;_Piece&#32;__dummy;
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;1;&#32;__i&#32;&lt;&#32;__num_threads;&#32;++__i)
485 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2base_8h_1acff27ea0a7532ee31661cbd47a95d3de">_GLIBCXX_PARALLEL_ASSERT</link>(
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!__tls[__i]-&gt;_M_leftover_parts.pop_back(__dummy));
487 <emphasis role="preprocessor">#endif</emphasis>
488 
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__num_threads;&#32;++__i)
490 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;__tls[__i];
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__tls;
492 &#32;&#32;&#32;&#32;}
493 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_parallel</emphasis>
494 
495 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_BALANCED_QUICKSORT_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
