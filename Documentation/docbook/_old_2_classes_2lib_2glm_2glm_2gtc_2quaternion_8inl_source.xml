<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2glm_2glm_2gtc_2quaternion_8inl_source" xml:lang="en-US">
<title>quaternion.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/glm/glm/gtc/quaternion.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#include&#32;&quot;../trigonometric.hpp&quot;</emphasis>
2 <emphasis role="preprocessor">#include&#32;&quot;../geometric.hpp&quot;</emphasis>
3 <emphasis role="preprocessor">#include&#32;&quot;../exponential.hpp&quot;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2glm_2glm_2gtc_2epsilon_8hpp">epsilon.hpp</link>&quot;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
6 
7 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>
8 {
9 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
10 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1gad3117cce1d062f28ed9bbadabcdac8fc">eulerAngles</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
11 &#32;&#32;&#32;&#32;{
12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vec&lt;3,&#32;T,&#32;Q&gt;(<link linkend="_group__gtc__quaternion_1ga7603e81477b46ddb448896909bc04928">pitch</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>),&#32;<link linkend="_group__gtc__quaternion_1ga8da38cdfdc452dafa660c2f46506bad5">yaw</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>),&#32;<link linkend="_group__gtc__quaternion_1ga0cc5ad970d0b00829b139fe0fe5a1e13">roll</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>));
13 &#32;&#32;&#32;&#32;}
14 
15 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
16 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;T&#32;<link linkend="_group__gtc__quaternion_1ga0cc5ad970d0b00829b139fe0fe5a1e13">roll</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
17 &#32;&#32;&#32;&#32;{
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>(<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(2)&#32;*&#32;(q.x&#32;*&#32;q.y&#32;+&#32;q.w&#32;*&#32;q.z),&#32;q.w&#32;*&#32;q.w&#32;+&#32;q.x&#32;*&#32;q.x&#32;-&#32;q.y&#32;*&#32;q.y&#32;-&#32;q.z&#32;*&#32;q.z));
19 &#32;&#32;&#32;&#32;}
20 
21 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
22 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;T&#32;<link linkend="_group__gtc__quaternion_1ga7603e81477b46ddb448896909bc04928">pitch</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
23 &#32;&#32;&#32;&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;T(atan(T(2)&#32;*&#32;(q.y&#32;*&#32;q.z&#32;+&#32;q.w&#32;*&#32;q.x),&#32;q.w&#32;*&#32;q.w&#32;-&#32;q.x&#32;*&#32;q.x&#32;-&#32;q.y&#32;*&#32;q.y&#32;+&#32;q.z&#32;*&#32;q.z));</emphasis>
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(2)&#32;*&#32;(q.y&#32;*&#32;q.z&#32;+&#32;q.w&#32;*&#32;q.x);
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;q.w&#32;*&#32;q.w&#32;-&#32;q.x&#32;*&#32;q.x&#32;-&#32;q.y&#32;*&#32;q.y&#32;+&#32;q.z&#32;*&#32;q.z;
27 
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>(<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>(vec&lt;2,&#32;T,&#32;Q&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>),&#32;vec&lt;2,&#32;T,&#32;Q&gt;(0),&#32;epsilon&lt;T&gt;())))&#32;<emphasis role="comment">//avoid&#32;atan2(0,0)&#32;-&#32;handle&#32;singularity&#32;-&#32;Matiis</emphasis>
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(2)&#32;*&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>(q.x,&#32;q.w));
30 
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>));
32 &#32;&#32;&#32;&#32;}
33 
34 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
35 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;T&#32;<link linkend="_group__gtc__quaternion_1ga8da38cdfdc452dafa660c2f46506bad5">yaw</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
36 &#32;&#32;&#32;&#32;{
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1aa2375efebaed504113d91f1822bafa38">asin</link>(<link linkend="_namespaceclamp">clamp</link>(<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(-2)&#32;*&#32;(q.x&#32;*&#32;q.z&#32;-&#32;q.w&#32;*&#32;q.y),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(-1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(1)));
38 &#32;&#32;&#32;&#32;}
39 
40 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
41 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;mat&lt;3,&#32;3,&#32;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1ga485b4423fd52c3ae1ff1051bda614c93">mat3_cast</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
42 &#32;&#32;&#32;&#32;{
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mat&lt;3,&#32;3,&#32;T,&#32;Q&gt;&#32;Result(T(1));
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qxx(q.x&#32;*&#32;q.x);
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qyy(q.y&#32;*&#32;q.y);
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qzz(q.z&#32;*&#32;q.z);
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qxz(q.x&#32;*&#32;q.z);
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qxy(q.x&#32;*&#32;q.y);
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qyz(q.y&#32;*&#32;q.z);
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qwx(q.w&#32;*&#32;q.x);
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qwy(q.w&#32;*&#32;q.y);
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;qwz(q.w&#32;*&#32;q.z);
53 
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[0][0]&#32;=&#32;T(1)&#32;-&#32;T(2)&#32;*&#32;(qyy&#32;+&#32;&#32;qzz);
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[0][1]&#32;=&#32;T(2)&#32;*&#32;(qxy&#32;+&#32;qwz);
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[0][2]&#32;=&#32;T(2)&#32;*&#32;(qxz&#32;-&#32;qwy);
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[1][0]&#32;=&#32;T(2)&#32;*&#32;(qxy&#32;-&#32;qwz);
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[1][1]&#32;=&#32;T(1)&#32;-&#32;T(2)&#32;*&#32;(qxx&#32;+&#32;&#32;qzz);
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[1][2]&#32;=&#32;T(2)&#32;*&#32;(qyz&#32;+&#32;qwx);
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[2][0]&#32;=&#32;T(2)&#32;*&#32;(qxz&#32;+&#32;qwy);
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[2][1]&#32;=&#32;T(2)&#32;*&#32;(qyz&#32;-&#32;qwx);
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[2][2]&#32;=&#32;T(1)&#32;-&#32;T(2)&#32;*&#32;(qxx&#32;+&#32;&#32;qyy);
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
66 &#32;&#32;&#32;&#32;}
67 
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
69 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;mat&lt;4,&#32;4,&#32;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1gaa6dc632fb953f612d07ad5b533d0390f">mat4_cast</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;q)
70 &#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mat&lt;4,&#32;4,&#32;T,&#32;Q&gt;(<link linkend="_group__gtc__quaternion_1ga485b4423fd52c3ae1ff1051bda614c93">mat3_cast</link>(q));
72 &#32;&#32;&#32;&#32;}
73 
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
75 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1ga3d350068ce0d14e4496cb844eb79a05f">quat_cast</link>(mat&lt;3,&#32;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;m)
76 &#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;fourXSquaredMinus1&#32;=&#32;m[0][0]&#32;-&#32;m[1][1]&#32;-&#32;m[2][2];
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;fourYSquaredMinus1&#32;=&#32;m[1][1]&#32;-&#32;m[0][0]&#32;-&#32;m[2][2];
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;fourZSquaredMinus1&#32;=&#32;m[2][2]&#32;-&#32;m[0][0]&#32;-&#32;m[1][1];
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;fourWSquaredMinus1&#32;=&#32;m[0][0]&#32;+&#32;m[1][1]&#32;+&#32;m[2][2];
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;biggestIndex&#32;=&#32;0;
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;fourBiggestSquaredMinus1&#32;=&#32;fourWSquaredMinus1;
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fourXSquaredMinus1&#32;&gt;&#32;fourBiggestSquaredMinus1)
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fourBiggestSquaredMinus1&#32;=&#32;fourXSquaredMinus1;
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggestIndex&#32;=&#32;1;
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fourYSquaredMinus1&#32;&gt;&#32;fourBiggestSquaredMinus1)
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fourBiggestSquaredMinus1&#32;=&#32;fourYSquaredMinus1;
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggestIndex&#32;=&#32;2;
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(fourZSquaredMinus1&#32;&gt;&#32;fourBiggestSquaredMinus1)
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fourBiggestSquaredMinus1&#32;=&#32;fourZSquaredMinus1;
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;biggestIndex&#32;=&#32;3;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;biggestVal&#32;=&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(fourBiggestSquaredMinus1&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(1))&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.5);
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;mult&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.25)&#32;/&#32;biggestVal;
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(biggestIndex)
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(biggestVal,&#32;(m[1][2]&#32;-&#32;m[2][1])&#32;*&#32;mult,&#32;(m[2][0]&#32;-&#32;m[0][2])&#32;*&#32;mult,&#32;(m[0][1]&#32;-&#32;m[1][0])&#32;*&#32;mult);
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;((m[1][2]&#32;-&#32;m[2][1])&#32;*&#32;mult,&#32;biggestVal,&#32;(m[0][1]&#32;+&#32;m[1][0])&#32;*&#32;mult,&#32;(m[2][0]&#32;+&#32;m[0][2])&#32;*&#32;mult);
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;((m[2][0]&#32;-&#32;m[0][2])&#32;*&#32;mult,&#32;(m[0][1]&#32;+&#32;m[1][0])&#32;*&#32;mult,&#32;biggestVal,&#32;(m[1][2]&#32;+&#32;m[2][1])&#32;*&#32;mult);
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;((m[0][1]&#32;-&#32;m[1][0])&#32;*&#32;mult,&#32;(m[2][0]&#32;+&#32;m[0][2])&#32;*&#32;mult,&#32;(m[1][2]&#32;+&#32;m[2][1])&#32;*&#32;mult,&#32;biggestVal);
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="comment">//&#32;Silence&#32;a&#32;-Wswitch-default&#32;warning&#32;in&#32;GCC.&#32;Should&#32;never&#32;actually&#32;get&#32;here.&#32;Assert&#32;is&#32;just&#32;for&#32;sanity.</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<emphasis role="keyword">false</emphasis>);
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;qua&lt;T,&#32;Q&gt;(1,&#32;0,&#32;0,&#32;0);
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
117 &#32;&#32;&#32;&#32;}
118 
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
120 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1ga3d350068ce0d14e4496cb844eb79a05f">quat_cast</link>(mat&lt;4,&#32;4,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;m4)
121 &#32;&#32;&#32;&#32;{
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__gtc__quaternion_1ga3d350068ce0d14e4496cb844eb79a05f">quat_cast</link>(mat&lt;3,&#32;3,&#32;T,&#32;Q&gt;(m4));
123 &#32;&#32;&#32;&#32;}
124 
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
126 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;<link linkend="_group__core__func__vector__relational_1gaedc3a837f960109afe22ea3f267b9a19">lessThan</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)
127 &#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;Result;
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.length();&#32;++i)
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[i]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[i]&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>[i];
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
132 &#32;&#32;&#32;&#32;}
133 
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
135 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;<link linkend="_group__core__func__vector__relational_1gae4adee3ccfca4f66ff5b0ce3686399c2">lessThanEqual</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)
136 &#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;Result;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.length();&#32;++i)
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[i]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[i]&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>[i];
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
141 &#32;&#32;&#32;&#32;}
142 
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
144 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;<link linkend="_group__core__func__vector__relational_1ga9987ddebd3528e92f84e23d995320861">greaterThan</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)
145 &#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;Result;
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.length();&#32;++i)
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[i]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[i]&#32;&gt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>[i];
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
150 &#32;&#32;&#32;&#32;}
151 
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
153 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;<link linkend="_group__core__func__vector__relational_1ga932c94a34799d65dfe36762158a58d90">greaterThanEqual</link>(qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;qua&lt;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;4,&#32;bool,&#32;Q&gt;&#32;Result;
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>.length();&#32;++i)
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[i]&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>[i]&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>[i];
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
159 &#32;&#32;&#32;&#32;}
160 
161 
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
163 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1ga6796cf6b03ae8ea20a2152571bd66656">quatLookAt</link>(vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;direction,&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;up)
164 &#32;&#32;&#32;&#32;{
165 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;GLM_CONFIG_CLIP_CONTROL&#32;&amp;&#32;GLM_CLIP_CONTROL_LH_BIT</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__gtc__quaternion_1gaf1b1a94a4bf495b0a357180e2ab44dd3">quatLookAtLH</link>(direction,&#32;up);
167 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;else</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__gtc__quaternion_1ga63626b02ab5b21692758c0d43618188a">quatLookAtRH</link>(direction,&#32;up);
169 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;endif</emphasis>
170 &#32;&#32;&#32;&#32;}
171 
172 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
173 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1ga63626b02ab5b21692758c0d43618188a">quatLookAtRH</link>(vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;direction,&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;up)
174 &#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mat&lt;3,&#32;3,&#32;T,&#32;Q&gt;&#32;Result;
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[2]&#32;=&#32;-direction;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Right&#32;=&#32;<link linkend="_namespacecross">cross</link>(up,&#32;Result[2]);
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[0]&#32;=&#32;Right&#32;*&#32;<link linkend="_namespaceglm_1a5e3dd2bba414db15477d43ca9d71acf5">inversesqrt</link>(<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.00001),&#32;<link linkend="_namespacedot">dot</link>(Right,&#32;Right)));
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[1]&#32;=&#32;<link linkend="_namespacecross">cross</link>(Result[2],&#32;Result[0]);
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__gtc__quaternion_1ga3d350068ce0d14e4496cb844eb79a05f">quat_cast</link>(Result);
183 &#32;&#32;&#32;&#32;}
184 
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
186 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;qua&lt;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__quaternion_1gaf1b1a94a4bf495b0a357180e2ab44dd3">quatLookAtLH</link>(vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;direction,&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;up)
187 &#32;&#32;&#32;&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mat&lt;3,&#32;3,&#32;T,&#32;Q&gt;&#32;Result;
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[2]&#32;=&#32;direction;
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vec&lt;3,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Right&#32;=&#32;<link linkend="_namespacecross">cross</link>(up,&#32;Result[2]);
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[0]&#32;=&#32;Right&#32;*&#32;<link linkend="_namespaceglm_1a5e3dd2bba414db15477d43ca9d71acf5">inversesqrt</link>(<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.00001),&#32;<link linkend="_namespacedot">dot</link>(Right,&#32;Right)));
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Result[1]&#32;=&#32;<link linkend="_namespacecross">cross</link>(Result[2],&#32;Result[0]);
194 
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__gtc__quaternion_1ga3d350068ce0d14e4496cb844eb79a05f">quat_cast</link>(Result);
196 &#32;&#32;&#32;&#32;}
197 }<emphasis role="comment">//namespace&#32;glm</emphasis>
198 
199 <emphasis role="preprocessor">#if&#32;GLM_CONFIG_SIMD&#32;==&#32;GLM_ENABLE</emphasis>
200 <emphasis role="preprocessor">#&#32;&#32;&#32;include&#32;&quot;quaternion_simd.inl&quot;</emphasis>
201 <emphasis role="preprocessor">#endif</emphasis>
202 
</programlisting></section>
