<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2insert__join__fn__imps_8hpp_source" xml:lang="en-US">
<title>insert_join_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keywordtype">void</emphasis>
45 PB_DS_CLASS_C_DEC::
46 join(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
47 {
48 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
49 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
50 &#32;&#32;branch_bag&#32;bag;
51 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(!join_prep(other,&#32;bag))
52 &#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
54 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
55 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
56 &#32;&#32;&#32;&#32;}
57 
58 &#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;rec_join(m_p_head-&gt;m_p_parent,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;other.m_p_head-&gt;m_p_parent,&#32;0,&#32;bag);
60 
61 &#32;&#32;m_p_head-&gt;m_p_parent-&gt;m_p_parent&#32;=&#32;m_p_head;
62 &#32;&#32;m_size&#32;+=&#32;other.m_size;
63 &#32;&#32;other.initialize();
64 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
65 &#32;&#32;m_p_head-&gt;m_p_min&#32;=&#32;leftmost_descendant(m_p_head-&gt;m_p_parent);
66 &#32;&#32;m_p_head-&gt;m_p_max&#32;=&#32;rightmost_descendant(m_p_head-&gt;m_p_parent);
67 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
68 }
69 
70 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
71 <emphasis role="keywordtype">bool</emphasis>
72 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
73 join_prep(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other,&#32;branch_bag&amp;&#32;r_bag)
74 {
75 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
76 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>(other)
77 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(other.m_size&#32;==&#32;0)
78 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>;
79 
80 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(m_size&#32;==&#32;0)
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;value_swap(other);
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
84 &#32;&#32;&#32;&#32;}
85 
86 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;greater&#32;=
87 &#32;&#32;&#32;&#32;synth_access_traits::cmp_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(m_p_head-&gt;m_p_max)-&gt;value()),
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(other.m_p_head-&gt;m_p_min)-&gt;value()));
89 
90 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;lesser&#32;=
91 &#32;&#32;&#32;&#32;synth_access_traits::cmp_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(other.m_p_head-&gt;m_p_max)-&gt;value()),
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(m_p_head-&gt;m_p_min)-&gt;value()));
93 
94 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!greater&#32;&amp;&amp;&#32;!lesser)
95 &#32;&#32;&#32;&#32;<link linkend="_group__exceptions-pbds_1ga5a976d09aeecf7566442abcebd07f1d8">__throw_join_error</link>();
96 
97 &#32;&#32;rec_join_prep(m_p_head-&gt;m_p_parent,&#32;other.m_p_head-&gt;m_p_parent,&#32;r_bag);
98 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::join(other,&#32;<emphasis role="keyword">false</emphasis>);)
99 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
100 }
101 
102 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
103 <emphasis role="keywordtype">void</emphasis>
104 PB_DS_CLASS_C_DEC::
105 rec_join_prep(node_const_pointer&#32;p_l,&#32;node_const_pointer&#32;p_r,&#32;
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
107 {
108 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l-&gt;m_type&#32;==&#32;leaf_node)
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;m_type&#32;==&#32;leaf_node)
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;rec_join_prep(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),&#32;r_bag);
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
115 &#32;&#32;&#32;&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r-&gt;m_type&#32;==&#32;i_node);
118 &#32;&#32;&#32;&#32;&#32;&#32;rec_join_prep(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),&#32;r_bag);
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
121 &#32;&#32;&#32;&#32;}
122 
123 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_l-&gt;m_type&#32;==&#32;i_node);
124 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;m_type&#32;==&#32;leaf_node)
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;rec_join_prep(<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),&#32;r_bag);
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
129 &#32;&#32;&#32;&#32;}
130 
131 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r-&gt;m_type&#32;==&#32;i_node);
132 
133 &#32;&#32;rec_join_prep(<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_const_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),&#32;r_bag);
135 }
136 
137 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
138 <emphasis role="keywordtype">void</emphasis>
139 PB_DS_CLASS_C_DEC::
140 rec_join_prep(leaf_const_pointer&#32;<emphasis role="comment">/*p_l*/</emphasis>,&#32;leaf_const_pointer&#32;<emphasis role="comment">/*p_r*/</emphasis>,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
142 {&#32;r_bag.add_branch();&#32;}
143 
144 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
145 <emphasis role="keywordtype">void</emphasis>
146 PB_DS_CLASS_C_DEC::
147 rec_join_prep(leaf_const_pointer&#32;<emphasis role="comment">/*p_l*/</emphasis>,&#32;inode_const_pointer&#32;<emphasis role="comment">/*p_r*/</emphasis>,
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
149 {&#32;r_bag.add_branch();&#32;}
150 
151 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
152 <emphasis role="keywordtype">void</emphasis>
153 PB_DS_CLASS_C_DEC::
154 rec_join_prep(inode_const_pointer&#32;<emphasis role="comment">/*p_l*/</emphasis>,&#32;leaf_const_pointer&#32;<emphasis role="comment">/*p_r*/</emphasis>,
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
156 {&#32;r_bag.add_branch();&#32;}
157 
158 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
159 <emphasis role="keywordtype">void</emphasis>
160 PB_DS_CLASS_C_DEC::
161 rec_join_prep(inode_const_pointer&#32;p_l,&#32;inode_const_pointer&#32;p_r,
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
163 {
164 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l-&gt;get_e_ind()&#32;==&#32;p_r-&gt;get_e_ind()&#32;&amp;&amp;
165 &#32;&#32;&#32;&#32;&#32;&#32;synth_access_traits::equal_prefixes(p_l-&gt;pref_b_it(),&#32;p_l-&gt;pref_e_it(),
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_r-&gt;pref_b_it(),&#32;p_r-&gt;pref_e_it()))
167 &#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;inode::const_iterator&#32;it&#32;=&#32;p_r-&gt;begin();
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;!=&#32;p_r-&gt;end();&#32;++&#32;it)
170 &#32;&#32;&#32;&#32;{
171 &#32;&#32;&#32;&#32;&#32;&#32;node_const_pointer&#32;p_l_join_child&#32;=&#32;p_l-&gt;get_join_child(*it,&#32;<emphasis role="keyword">this</emphasis>);
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l_join_child&#32;!=&#32;0)
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rec_join_prep(p_l_join_child,&#32;*&#32;it,&#32;r_bag);
174 &#32;&#32;&#32;&#32;}
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
176 &#32;&#32;&#32;&#32;}
177 
178 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;get_e_ind()&#32;&lt;&#32;p_l-&gt;get_e_ind()&#32;&amp;&amp;
179 &#32;&#32;&#32;&#32;&#32;&#32;p_r-&gt;should_be_mine(p_l-&gt;pref_b_it(),&#32;p_l-&gt;pref_e_it(),&#32;0,&#32;<emphasis role="keyword">this</emphasis>))
180 &#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;node_const_pointer&#32;p_r_join_child&#32;=&#32;p_r-&gt;get_join_child(p_l,&#32;<emphasis role="keyword">this</emphasis>);
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r_join_child&#32;!=&#32;0)
183 &#32;&#32;&#32;&#32;rec_join_prep(p_r_join_child,&#32;p_l,&#32;r_bag);
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
185 &#32;&#32;&#32;&#32;}
186 
187 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;get_e_ind()&#32;&lt;&#32;p_l-&gt;get_e_ind()&#32;&amp;&amp;
188 &#32;&#32;&#32;&#32;&#32;&#32;p_r-&gt;should_be_mine(p_l-&gt;pref_b_it(),&#32;p_l-&gt;pref_e_it(),&#32;0,&#32;<emphasis role="keyword">this</emphasis>))
189 &#32;&#32;&#32;&#32;{
190 &#32;&#32;&#32;&#32;&#32;&#32;node_const_pointer&#32;p_r_join_child&#32;=&#32;p_r-&gt;get_join_child(p_l,&#32;<emphasis role="keyword">this</emphasis>);
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r_join_child&#32;!=&#32;0)
192 &#32;&#32;&#32;&#32;rec_join_prep(p_r_join_child,&#32;p_l,&#32;r_bag);
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
194 &#32;&#32;&#32;&#32;}
195 &#32;&#32;r_bag.add_branch();
196 }
197 
198 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
199 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
200 PB_DS_CLASS_C_DEC::
201 rec_join(node_pointer&#32;p_l,&#32;node_pointer&#32;p_r,&#32;size_type&#32;checked_ind,&#32;
202 &#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
203 {
204 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r&#32;!=&#32;0);
205 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l&#32;==&#32;0)
206 &#32;&#32;&#32;&#32;{
207 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_r,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(p_r);
209 &#32;&#32;&#32;&#32;}
210 
211 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l-&gt;m_type&#32;==&#32;leaf_node)
212 &#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;m_type&#32;==&#32;leaf_node)
214 &#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_ret&#32;=&#32;rec_join(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),&#32;r_bag);
217 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_ret,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
219 &#32;&#32;&#32;&#32;}
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r-&gt;m_type&#32;==&#32;i_node);
222 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_ret&#32;=&#32;rec_join(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checked_ind,&#32;r_bag);
225 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_ret,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
227 &#32;&#32;&#32;&#32;}
228 
229 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_l-&gt;m_type&#32;==&#32;i_node);
230 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;m_type&#32;==&#32;leaf_node)
231 &#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_ret&#32;=&#32;rec_join(<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;checked_ind,&#32;r_bag);
235 &#32;&#32;&#32;&#32;&#32;&#32;apply_update(p_ret,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
237 &#32;&#32;&#32;&#32;}
238 
239 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r-&gt;m_type&#32;==&#32;i_node);
240 &#32;&#32;node_pointer&#32;p_ret&#32;=&#32;rec_join(<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_l),
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>inode_pointer<emphasis role="keyword">&gt;</emphasis>(p_r),
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_bag);
243 
244 &#32;&#32;apply_update(p_ret,&#32;(node_update*)<emphasis role="keyword">this</emphasis>);
245 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
246 }
247 
248 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
249 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
250 PB_DS_CLASS_C_DEC::
251 rec_join(leaf_pointer&#32;p_l,&#32;leaf_pointer&#32;p_r,&#32;branch_bag&amp;&#32;r_bag)
252 {
253 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r&#32;!=&#32;0);
254 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l&#32;==&#32;0)
255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(p_r);
256 &#32;&#32;node_pointer&#32;p_ret&#32;=&#32;insert_branch(p_l,&#32;p_r,&#32;r_bag);
257 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_ret)&#32;==&#32;2);
258 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
259 }
260 
261 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
262 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
263 PB_DS_CLASS_C_DEC::
264 rec_join(leaf_pointer&#32;p_l,&#32;inode_pointer&#32;p_r,&#32;size_type&#32;checked_ind,
265 &#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
266 {
267 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
268 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;lhs_leafs&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_l);
269 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;rhs_leafs&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_r);
270 <emphasis role="preprocessor">#endif</emphasis>
271 
272 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r&#32;!=&#32;0);
273 &#32;&#32;node_pointer&#32;p_ret&#32;=&#32;rec_join(p_r,&#32;p_l,&#32;checked_ind,&#32;r_bag);
274 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_ret)&#32;==&#32;lhs_leafs&#32;+&#32;rhs_leafs);
275 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
276 }
277 
278 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
279 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
280 PB_DS_CLASS_C_DEC::
281 rec_join(inode_pointer&#32;p_l,&#32;leaf_pointer&#32;p_r,&#32;size_type&#32;checked_ind,&#32;branch_bag&amp;&#32;r_bag)
282 {
283 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_l&#32;!=&#32;0);
284 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r&#32;!=&#32;0);
285 
286 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
287 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;lhs_leafs&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_l);
288 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;rhs_leafs&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_r);
289 <emphasis role="preprocessor">#endif</emphasis>
290 
291 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!p_l-&gt;should_be_mine(pref_begin(p_r),&#32;pref_end(p_r),&#32;checked_ind,&#32;<emphasis role="keyword">this</emphasis>))
292 &#32;&#32;&#32;&#32;{
293 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_ret&#32;=&#32;insert_branch(p_l,&#32;p_r,&#32;r_bag);
294 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_ret)
295 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_ret)&#32;==
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lhs_leafs&#32;+&#32;rhs_leafs);
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
298 &#32;&#32;&#32;&#32;}
299 
300 &#32;&#32;node_pointer&#32;p_pot_child&#32;=&#32;p_l-&gt;add_child(p_r,&#32;pref_begin(p_r),
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(p_r),&#32;<emphasis role="keyword">this</emphasis>);
302 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_pot_child&#32;!=&#32;p_r)
303 &#32;&#32;&#32;&#32;{
304 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_new_child&#32;=&#32;rec_join(p_pot_child,&#32;p_r,&#32;p_l-&gt;get_e_ind(),
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r_bag);
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;p_l-&gt;replace_child(p_new_child,&#32;pref_begin(p_new_child),
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(p_new_child),&#32;<emphasis role="keyword">this</emphasis>);
309 &#32;&#32;&#32;&#32;}
310 
311 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_l)
312 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_l)&#32;==&#32;lhs_leafs&#32;+&#32;rhs_leafs);
313 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_l;
314 }
315 
316 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
317 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_pointer
318 PB_DS_CLASS_C_DEC::
319 rec_join(inode_pointer&#32;p_l,&#32;inode_pointer&#32;p_r,&#32;
320 &#32;&#32;&#32;&#32;&#32;branch_bag&amp;&#32;r_bag)
321 {
322 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_l&#32;!=&#32;0);
323 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(p_r&#32;!=&#32;0);
324 
325 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
326 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;lhs_leafs&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_l);
327 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;rhs_leafs&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_r);
328 <emphasis role="preprocessor">#endif</emphasis>
329 
330 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l-&gt;get_e_ind()&#32;==&#32;p_r-&gt;get_e_ind()&#32;&amp;&amp;
331 &#32;&#32;&#32;&#32;&#32;&#32;synth_access_traits::equal_prefixes(p_l-&gt;pref_b_it(),&#32;p_l-&gt;pref_e_it(),
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_r-&gt;pref_b_it(),&#32;p_r-&gt;pref_e_it()))
333 &#32;&#32;&#32;&#32;{
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;inode::iterator&#32;it&#32;=&#32;p_r-&gt;begin();
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;it&#32;!=&#32;p_r-&gt;end();&#32;++&#32;it)
336 &#32;&#32;&#32;&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_new_child&#32;=&#32;rec_join(p_l-&gt;get_join_child(*it,&#32;<emphasis role="keyword">this</emphasis>),
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;it,&#32;0,&#32;r_bag);
339 &#32;&#32;&#32;&#32;&#32;&#32;p_l-&gt;replace_child(p_new_child,&#32;pref_begin(p_new_child),
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(p_new_child),&#32;<emphasis role="keyword">this</emphasis>);
341 &#32;&#32;&#32;&#32;}
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;p_r-&gt;~inode();
344 &#32;&#32;&#32;&#32;&#32;&#32;s_inode_allocator.deallocate(p_r,&#32;1);
345 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_l)
346 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_l)&#32;==&#32;lhs_leafs&#32;+&#32;rhs_leafs);
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_l;
348 &#32;&#32;&#32;&#32;}
349 
350 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_l-&gt;get_e_ind()&#32;&lt;&#32;p_r-&gt;get_e_ind()&#32;&amp;&amp;
351 &#32;&#32;&#32;&#32;&#32;&#32;p_l-&gt;should_be_mine(p_r-&gt;pref_b_it(),&#32;p_r-&gt;pref_e_it(),&#32;0,&#32;<emphasis role="keyword">this</emphasis>))
352 &#32;&#32;&#32;&#32;{
353 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_new_child&#32;=&#32;rec_join(p_l-&gt;get_join_child(p_r,&#32;<emphasis role="keyword">this</emphasis>),
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_r,&#32;0,&#32;r_bag);
355 &#32;&#32;&#32;&#32;&#32;&#32;p_l-&gt;replace_child(p_new_child,&#32;pref_begin(p_new_child),
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(p_new_child),&#32;<emphasis role="keyword">this</emphasis>);
357 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_l)
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_l;
359 &#32;&#32;&#32;&#32;}
360 
361 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_r-&gt;get_e_ind()&#32;&lt;&#32;p_l-&gt;get_e_ind()&#32;&amp;&amp;
362 &#32;&#32;&#32;&#32;&#32;&#32;p_r-&gt;should_be_mine(p_l-&gt;pref_b_it(),&#32;p_l-&gt;pref_e_it(),&#32;0,&#32;<emphasis role="keyword">this</emphasis>))
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_new_child&#32;=&#32;rec_join(p_r-&gt;get_join_child(p_l,&#32;<emphasis role="keyword">this</emphasis>),&#32;p_l,
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;r_bag);
366 
367 &#32;&#32;&#32;&#32;&#32;&#32;p_r-&gt;replace_child(p_new_child,&#32;pref_begin(p_new_child),
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pref_end(p_new_child),&#32;<emphasis role="keyword">this</emphasis>);
369 
370 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_r)
371 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_r)&#32;==&#32;lhs_leafs&#32;+&#32;rhs_leafs);
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_r;
373 &#32;&#32;&#32;&#32;}
374 
375 &#32;&#32;node_pointer&#32;p_ret&#32;=&#32;insert_branch(p_l,&#32;p_r,&#32;r_bag);
376 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_ret)
377 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1a7a0239af82eb23e34d17bfd085617c75">PB_DS_RECURSIVE_COUNT_LEAFS</link>(p_ret)&#32;==&#32;lhs_leafs&#32;+&#32;rhs_leafs);
378 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
379 }
380 
381 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
382 <emphasis role="keyword">inline</emphasis>&#32;std::pair&lt;typename&#32;PB_DS_CLASS_C_DEC::iterator,&#32;bool&gt;
383 PB_DS_CLASS_C_DEC::
384 insert(const_reference&#32;r_val)
385 {
386 &#32;&#32;node_pointer&#32;p_lf&#32;=&#32;find_imp(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_val));
387 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_lf&#32;!=&#32;0&#32;&amp;&amp;&#32;p_lf-&gt;m_type&#32;==&#32;leaf_node&#32;&amp;&amp;
388 &#32;&#32;&#32;&#32;&#32;&#32;synth_access_traits::equal_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_pointer<emphasis role="keyword">&gt;</emphasis>(p_lf)-&gt;<link linkend="_classvalue">value</link>()),&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_val)))
389 &#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1acfae3994df576dbc37edc392d027c7ef">PB_DS_CHECK_KEY_EXISTS</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_val))
391 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*<emphasis role="keyword">this</emphasis>))
392 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::make_pair(iterator(p_lf),&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>);
393 &#32;&#32;&#32;&#32;}
394 
395 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1aabe976c8ae811576bfa1b0786dcfe377">PB_DS_CHECK_KEY_DOES_NOT_EXIST</link>(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_val))
396 
397 &#32;&#32;leaf_pointer&#32;p_new_lf&#32;=&#32;s_leaf_allocator.allocate(1);
398 &#32;&#32;cond_dealtor&#32;cond(p_new_lf);
399 
400 &#32;&#32;new&#32;(p_new_lf)&#32;leaf(r_val);
401 &#32;&#32;apply_update(p_new_lf,&#32;(node_update*)this);
402 &#32;&#32;cond.set_call_destructor();
403 &#32;&#32;branch_bag&#32;bag;
404 &#32;&#32;bag.add_branch();
405 &#32;&#32;m_p_head-&gt;m_p_parent&#32;=&#32;rec_join(m_p_head-&gt;m_p_parent,&#32;p_new_lf,&#32;0,&#32;bag);
406 &#32;&#32;m_p_head-&gt;m_p_parent-&gt;m_p_parent&#32;=&#32;m_p_head;
407 &#32;&#32;cond.set_no_action_dtor();
408 &#32;&#32;++m_size;
409 &#32;&#32;update_min_max_for_inserted_leaf(p_new_lf);
410 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(debug_base::insert_new(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(r_val));)
411 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1aee3eacf80388cda3950a668bc1e40110">PB_DS_ASSERT_VALID</link>((*this))
412 &#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;<link linkend="_namespacestd">std</link>::make_pair(point_iterator(p_new_lf),&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>);
413 }
414 
415 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
416 typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::size_type
417 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
418 keys_diff_ind(typename&#32;access_traits::const_iterator&#32;b_l,
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;access_traits::const_iterator&#32;e_l,
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;access_traits::const_iterator&#32;b_r,
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;access_traits::const_iterator&#32;e_r)
422 {
423 &#32;&#32;size_type&#32;diff_pos&#32;=&#32;0;
424 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(b_l&#32;!=&#32;e_l)
425 &#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(b_r&#32;==&#32;e_r)
427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(diff_pos);
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(access_traits::e_pos(*b_l)&#32;!=&#32;access_traits::e_pos(*b_r))
429 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(diff_pos);
430 &#32;&#32;&#32;&#32;&#32;&#32;++b_l;
431 &#32;&#32;&#32;&#32;&#32;&#32;++b_r;
432 &#32;&#32;&#32;&#32;&#32;&#32;++diff_pos;
433 &#32;&#32;&#32;&#32;}
434 &#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(b_r&#32;!=&#32;e_r);
435 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;diff_pos;
436 }
437 
438 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
439 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::inode_pointer
440 PB_DS_CLASS_C_DEC::
441 insert_branch(node_pointer&#32;p_l,&#32;node_pointer&#32;p_r,&#32;branch_bag&amp;&#32;r_bag)
442 {
443 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;synth_access_traits::const_iterator&#32;left_b_it&#32;=&#32;pref_begin(p_l);
444 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;synth_access_traits::const_iterator&#32;left_e_it&#32;=&#32;pref_end(p_l);
445 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;synth_access_traits::const_iterator&#32;right_b_it&#32;=&#32;pref_begin(p_r);
446 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;synth_access_traits::const_iterator&#32;right_e_it&#32;=&#32;pref_end(p_r);
447 
448 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;diff_ind&#32;=&#32;keys_diff_ind(left_b_it,&#32;left_e_it,
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;right_b_it,&#32;right_e_it);
450 
451 &#32;&#32;inode_pointer&#32;p_new_nd&#32;=&#32;r_bag.get_branch();
452 &#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(p_new_nd)&#32;inode(diff_ind,&#32;left_b_it);
453 &#32;&#32;p_new_nd-&gt;add_child(p_l,&#32;left_b_it,&#32;left_e_it,&#32;<emphasis role="keyword">this</emphasis>);
454 &#32;&#32;p_new_nd-&gt;add_child(p_r,&#32;right_b_it,&#32;right_e_it,&#32;<emphasis role="keyword">this</emphasis>);
455 &#32;&#32;p_l-&gt;m_p_parent&#32;=&#32;p_new_nd;
456 &#32;&#32;p_r-&gt;m_p_parent&#32;=&#32;p_new_nd;
457 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2pat__trie___2pat__trie___8hpp_1acf6a9e64eab117967a73db18d6b8b23d">PB_DS_ASSERT_NODE_VALID</link>(p_new_nd)
458 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(p_new_nd);
459 }
460 
461 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
462 <emphasis role="keywordtype">void</emphasis>
463 PB_DS_CLASS_C_DEC::
464 update_min_max_for_inserted_leaf(leaf_pointer&#32;p_new_lf)
465 {
466 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_min&#32;==&#32;m_p_head&#32;||
467 &#32;&#32;&#32;&#32;&#32;&#32;synth_access_traits::cmp_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_new_lf-&gt;value()),
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(m_p_head-&gt;m_p_min)-&gt;value())))
469 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_min&#32;=&#32;p_new_lf;
470 
471 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_max&#32;==&#32;m_p_head&#32;||
472 &#32;&#32;&#32;&#32;&#32;&#32;synth_access_traits::cmp_keys(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(<emphasis role="keyword">static_cast&lt;</emphasis>leaf_const_pointer<emphasis role="keyword">&gt;</emphasis>(m_p_head-&gt;m_p_max)-&gt;value()),&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_new_lf-&gt;value())))
473 &#32;&#32;&#32;&#32;m_p_head-&gt;m_p_max&#32;=&#32;p_new_lf;
474 }
475 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
