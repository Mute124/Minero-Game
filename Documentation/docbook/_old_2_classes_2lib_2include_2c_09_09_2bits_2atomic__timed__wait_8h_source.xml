<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2atomic__timed__wait_8h_source" xml:lang="en-US">
<title>atomic_timed_wait.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/atomic_timed_wait.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-&#32;header.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_ATOMIC_TIMED_WAIT_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_ATOMIC_TIMED_WAIT_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/atomic_wait.h&gt;</emphasis>
36 
37 <emphasis role="preprocessor">#if&#32;__cpp_lib_atomic_wait</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/functional_hash.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/this_thread_sleep.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/chrono.h&gt;</emphasis>
41 
42 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAVE_LINUX_FUTEX</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;sys/time.h&gt;</emphasis>
44 <emphasis role="preprocessor">#endif</emphasis>
45 
46 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
47 {
48 _GLIBCXX_BEGIN_NAMESPACE_VERSION
49 
50 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
51 &#32;&#32;{
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__wait_clock_t&#32;=&#32;chrono::steady_clock;
53 
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
55 &#32;&#32;&#32;&#32;&#32;&#32;__wait_clock_t::time_point
56 &#32;&#32;&#32;&#32;&#32;&#32;__to_wait_clock(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
57 &#32;&#32;&#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock::time_point&#32;__c_entry&#32;=&#32;_Clock::now();
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__wait_clock_t::time_point&#32;__w_entry&#32;=&#32;__wait_clock_t::now();
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__delta&#32;=&#32;__atime&#32;-&#32;__c_entry;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__w_dur&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__wait_clock_t::duration;
62 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w_entry&#32;+&#32;chrono::ceil&lt;__w_dur&gt;(__delta);
63 &#32;&#32;&#32;&#32;&#32;&#32;}
64 
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
66 &#32;&#32;&#32;&#32;&#32;&#32;__wait_clock_t::time_point
67 &#32;&#32;&#32;&#32;&#32;&#32;__to_wait_clock(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;__wait_clock_t,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Dur&gt;&amp;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
69 &#32;&#32;&#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__w_dur&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__wait_clock_t::duration;
71 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;chrono::ceil&lt;__w_dur&gt;(__atime);
72 &#32;&#32;&#32;&#32;&#32;&#32;}
73 
74 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAVE_LINUX_FUTEX</emphasis>
75 <emphasis role="preprocessor">#define&#32;_GLIBCXX_HAVE_PLATFORM_TIMED_WAIT</emphasis>
76 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_until_impl(<emphasis role="keyword">const</emphasis>&#32;__platform_wait_t*&#32;__addr,
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_t&#32;__old,
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;__wait_clock_t,&#32;_Dur&gt;&amp;
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
83 &#32;&#32;&#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;chrono::time_point_cast&lt;chrono::seconds&gt;(__atime);
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ns&#32;=&#32;chrono::duration_cast&lt;chrono::nanoseconds&gt;(__atime&#32;-&#32;__s);
86 
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timespec&#32;__rt&#32;=
88 &#32;&#32;&#32;&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::time_t<emphasis role="keyword">&gt;</emphasis>(__s.time_since_epoch().count()),
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(__ns.count())
91 &#32;&#32;&#32;&#32;};
92 
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__e&#32;=&#32;syscall&#32;(SYS_futex,&#32;__addr,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__futex_wait_flags::
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__wait_bitset_private),
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__old,&#32;&amp;__rt,&#32;nullptr,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;int&gt;(__futex_wait_flags::
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bitset_match_any));
99 
100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__e)
101 &#32;&#32;&#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errno&#32;==&#32;<link linkend="__classes_2lib_2pthread_8h_1a597718e59a8fc9c4d4ab63f5a34e28b1">ETIMEDOUT</link>)
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errno&#32;!=&#32;EINTR&#32;&amp;&amp;&#32;errno&#32;!=&#32;EAGAIN)
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_system_error(errno);
106 &#32;&#32;&#32;&#32;&#32;&#32;}
107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
108 &#32;&#32;&#32;&#32;&#32;&#32;}
109 
110 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
113 &#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_until(<emphasis role="keyword">const</emphasis>&#32;__platform_wait_t*&#32;__addr,&#32;__platform_wait_t&#32;__old,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__atime)
115 &#32;&#32;&#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;__wait_clock_t,&#32;_Clock&gt;)
117 &#32;&#32;&#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__platform_wait_until_impl(__addr,&#32;__old,&#32;__atime);
119 &#32;&#32;&#32;&#32;&#32;&#32;}
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;{
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__platform_wait_until_impl(__addr,&#32;__old,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_wait_clock(__atime)))
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;got&#32;a&#32;timeout&#32;when&#32;measured&#32;against&#32;__clock_t&#32;but</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;need&#32;to&#32;check&#32;against&#32;the&#32;caller-supplied&#32;clock</emphasis>
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;tell&#32;whether&#32;we&#32;should&#32;return&#32;a&#32;timeout.</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Clock::now()&#32;&lt;&#32;__atime)
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
132 &#32;&#32;&#32;&#32;&#32;&#32;}
133 &#32;&#32;&#32;&#32;&#32;&#32;}
134 <emphasis role="preprocessor">#else</emphasis>
135 <emphasis role="comment">//&#32;define&#32;_GLIBCXX_HAVE_PLATFORM_TIMED_WAIT&#32;and&#32;implement&#32;__platform_wait_until()</emphasis>
136 <emphasis role="comment">//&#32;if&#32;there&#32;is&#32;a&#32;more&#32;efficient&#32;primitive&#32;supported&#32;by&#32;the&#32;platform</emphasis>
137 <emphasis role="comment">//&#32;(e.g.&#32;__ulock_wait())which&#32;is&#32;better&#32;than&#32;pthread_cond_clockwait</emphasis>
138 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;PLATFORM_TIMED_WAIT</emphasis>
139 
140 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
141 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout.</emphasis>
142 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Clock&#32;must&#32;be&#32;either&#32;steady_clock&#32;or&#32;system_clock.</emphasis>
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
145 &#32;&#32;&#32;&#32;&#32;&#32;__cond_wait_until_impl(__condvar&amp;&#32;__cv,&#32;mutex&amp;&#32;__mx,
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__atime)
147 &#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::__is_one_of&lt;_Clock,&#32;chrono::steady_clock,
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::system_clock&gt;<link linkend="_classvalue">::value</link>);
150 
151 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;chrono::time_point_cast&lt;chrono::seconds&gt;(__atime);
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ns&#32;=&#32;chrono::duration_cast&lt;chrono::nanoseconds&gt;(__atime&#32;-&#32;__s);
153 
154 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af7819bed58b3ca9c8a995141339d8a3c">__gthread_time_t</link>&#32;__ts&#32;=
155 &#32;&#32;&#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::time_t<emphasis role="keyword">&gt;</emphasis>(__s.time_since_epoch().count()),
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(__ns.count())
158 &#32;&#32;&#32;&#32;&#32;&#32;};
159 
160 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT</emphasis>
161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;chrono::steady_clock,&#32;_Clock&gt;)
162 &#32;&#32;&#32;&#32;&#32;&#32;__cv.wait_until(__mx,&#32;<link linkend="__classes_2lib_2pthread__time_8h_1a6fb83f5e91e704391ff796553d5e0f46">CLOCK_MONOTONIC</link>,&#32;__ts);
163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
164 <emphasis role="preprocessor">#endif</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;__cv.wait_until(__mx,&#32;__ts);
166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Clock::now()&#32;&lt;&#32;__atime;
167 &#32;&#32;&#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;__cond_wait_until(__condvar&amp;&#32;__cv,&#32;mutex&amp;&#32;__mx,
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__atime)
174 &#32;&#32;&#32;&#32;&#32;&#32;{
175 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT</emphasis>
176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Clock,&#32;chrono::steady_clock&gt;)
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__cond_wait_until_impl(__cv,&#32;__mx,&#32;__atime);
178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
179 <emphasis role="preprocessor">#endif</emphasis>
180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Clock,&#32;chrono::system_clock&gt;)
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__cond_wait_until_impl(__cv,&#32;__mx,&#32;__atime);
182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__cond_wait_until_impl(__cv,&#32;__mx,
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_wait_clock(__atime)))
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;got&#32;a&#32;timeout&#32;when&#32;measured&#32;against&#32;__clock_t&#32;but</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;need&#32;to&#32;check&#32;against&#32;the&#32;caller-supplied&#32;clock</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;tell&#32;whether&#32;we&#32;should&#32;return&#32;a&#32;timeout.</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Clock::now()&#32;&lt;&#32;__atime)
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
194 &#32;&#32;&#32;&#32;&#32;&#32;}
195 &#32;&#32;&#32;&#32;&#32;&#32;}
196 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
197 
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__timed_waiter_pool&#32;:&#32;__waiter_pool_base
199 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
202 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
203 &#32;&#32;&#32;&#32;_M_do_wait_until(__platform_wait_t*&#32;__addr,&#32;__platform_wait_t&#32;__old,
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__atime)
205 &#32;&#32;&#32;&#32;{
206 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAVE_PLATFORM_TIMED_WAIT</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__platform_wait_until(__addr,&#32;__old,&#32;__atime);
208 <emphasis role="preprocessor">#else</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_t&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
210 &#32;&#32;&#32;&#32;&#32;&#32;__atomic_load(__addr,&#32;&amp;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__ATOMIC_RELAXED);
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;==&#32;__old)
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lock_guard&lt;mutex&gt;&#32;__l(_M_mtx);
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cond_wait_until(_M_cv,&#32;_M_mtx,&#32;__atime);
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
218 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_HAVE_PLATFORM_TIMED_WAIT</emphasis>
219 &#32;&#32;&#32;&#32;}
220 &#32;&#32;&#32;&#32;};
221 
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__timed_backoff_spin_policy
223 &#32;&#32;&#32;&#32;{
224 &#32;&#32;&#32;&#32;&#32;&#32;__wait_clock_t::time_point&#32;_M_deadline;
225 &#32;&#32;&#32;&#32;&#32;&#32;__wait_clock_t::time_point&#32;_M_t0;
226 
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
228 &#32;&#32;&#32;&#32;__timed_backoff_spin_policy(chrono::time_point&lt;_Clock,&#32;_Dur&gt;
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__deadline&#32;=&#32;_Clock::time_point::max(),
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__t0&#32;=&#32;_Clock::now())&#32;noexcept
232 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_deadline(__to_wait_clock(__deadline))
233 &#32;&#32;&#32;&#32;&#32;&#32;,&#32;_M_t0(__to_wait_clock(__t0))
234 &#32;&#32;&#32;&#32;{&#32;}
235 
236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;operator()()&#32;const&#32;noexcept
238 &#32;&#32;&#32;&#32;&#32;&#32;{
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>literals::chrono_literals;
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__now&#32;=&#32;__wait_clock_t::now();
241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_deadline&#32;&lt;=&#32;__now)
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
243 
244 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;this_thread::sleep_for&#32;not&#32;available&#32;#ifdef&#32;_GLIBCXX_NO_SLEEP</emphasis>
245 
246 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__elapsed&#32;=&#32;__now&#32;-&#32;_M_t0;
247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__elapsed&#32;&gt;&#32;128ms)
248 &#32;&#32;&#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this_thread::sleep_for(64ms);
250 &#32;&#32;&#32;&#32;&#32;&#32;}
251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__elapsed&#32;&gt;&#32;64us)
252 &#32;&#32;&#32;&#32;&#32;&#32;{
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this_thread::sleep_for(__elapsed&#32;/&#32;2);
254 &#32;&#32;&#32;&#32;&#32;&#32;}
255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__elapsed&#32;&gt;&#32;4us)
256 &#32;&#32;&#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__thread_yield();
258 &#32;&#32;&#32;&#32;&#32;&#32;}
259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
262 &#32;&#32;&#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;};
264 
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_EntersWait&gt;
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__timed_waiter&#32;:&#32;__waiter_base&lt;__timed_waiter_pool&gt;
267 &#32;&#32;&#32;&#32;&#32;&#32;{
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__base_type&#32;=&#32;__waiter_base&lt;__timed_waiter_pool&gt;;
269 
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
271 &#32;&#32;&#32;&#32;&#32;&#32;__timed_waiter(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__addr)&#32;noexcept
272 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__base_type(__addr)
273 &#32;&#32;&#32;&#32;{
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_EntersWait::value)
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_w._M_enter_wait();
276 &#32;&#32;&#32;&#32;}
277 
278 &#32;&#32;&#32;&#32;~__timed_waiter()
279 &#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_EntersWait::value)
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_w._M_leave_wait();
282 &#32;&#32;&#32;&#32;}
283 
284 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
285 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValFn,
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;_M_do_wait_until_v(_Tp&#32;__old,&#32;_ValFn&#32;__vfn,
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_t&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_do_spin(__old,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__vfn),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__timed_backoff_spin_policy(__atime)))
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base_type::_M_w._M_do_wait_until(__base_type::_M_addr,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__atime);
297 &#32;&#32;&#32;&#32;&#32;&#32;}
298 
299 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;_M_do_wait_until(_Pred&#32;__pred,&#32;__platform_wait_t&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;{
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__now&#32;=&#32;_Clock::now();&#32;__now&#32;&lt;&#32;__atime;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__now&#32;=&#32;_Clock::now())
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__base_type::_M_w._M_do_wait_until(
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__base_type::_M_addr,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__atime)
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__pred())
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__base_type::_M_do_spin(__pred,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__timed_backoff_spin_policy(__atime,&#32;__now)))
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
320 &#32;&#32;&#32;&#32;&#32;&#32;}
321 
322 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;_M_do_wait_until(_Pred&#32;__pred,
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
329 &#32;&#32;&#32;&#32;&#32;&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_t&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__base_type::_M_do_spin(__pred,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__timed_backoff_spin_policy(__atime)))
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_do_wait_until(__pred,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__atime);
335 &#32;&#32;&#32;&#32;&#32;&#32;}
336 
337 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValFn,
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;_M_do_wait_for_v(_Tp&#32;__old,&#32;_ValFn&#32;__vfn,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rtime)&#32;<emphasis role="keyword">noexcept</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;{
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_t&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_do_spin_v(__old,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__vfn),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
347 
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__rtime.count())
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;no&#32;rtime&#32;supplied,&#32;and&#32;spin&#32;did&#32;not&#32;acquire</emphasis>
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__reltime&#32;=&#32;chrono::ceil&lt;__wait_clock_t::duration&gt;(__rtime);
352 
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__base_type::_M_w._M_do_wait_until(
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__base_type::_M_addr,
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::steady_clock::now()&#32;+&#32;__reltime);
357 &#32;&#32;&#32;&#32;&#32;&#32;}
358 
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
362 &#32;&#32;&#32;&#32;&#32;&#32;_M_do_wait_for(_Pred&#32;__pred,
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)&#32;<emphasis role="keyword">noexcept</emphasis>
364 &#32;&#32;&#32;&#32;&#32;&#32;{
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__platform_wait_t&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__base_type::_M_do_spin(__pred,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
368 
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__rtime.count())
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;<emphasis role="comment">//&#32;no&#32;rtime&#32;supplied,&#32;and&#32;spin&#32;did&#32;not&#32;acquire</emphasis>
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__reltime&#32;=&#32;chrono::ceil&lt;__wait_clock_t::duration&gt;(__rtime);
373 
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_do_wait_until(__pred,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::steady_clock::now()&#32;+&#32;__reltime);
376 &#32;&#32;&#32;&#32;&#32;&#32;}
377 &#32;&#32;&#32;&#32;&#32;&#32;};
378 
379 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__enters_timed_wait&#32;=&#32;__timed_waiter&lt;std::true_type&gt;;
380 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__bare_timed_wait&#32;=&#32;__timed_waiter&lt;std::false_type&gt;;
381 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
382 
383 &#32;&#32;<emphasis role="comment">//&#32;returns&#32;true&#32;if&#32;wait&#32;ended&#32;before&#32;timeout</emphasis>
384 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValFn,
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
386 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
387 &#32;&#32;&#32;&#32;__atomic_wait_address_until_v(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__addr,&#32;_Tp&amp;&amp;&#32;__old,&#32;_ValFn&amp;&amp;&#32;__vfn,
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
390 &#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__enters_timed_wait&#32;__w{__addr};
392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w._M_do_wait_until_v(__old,&#32;__vfn,&#32;__atime);
393 &#32;&#32;&#32;&#32;}
394 
395 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
397 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
398 &#32;&#32;&#32;&#32;__atomic_wait_address_until(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__addr,&#32;_Pred&#32;__pred,
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
401 &#32;&#32;&#32;&#32;{
402 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__enters_timed_wait&#32;__w{__addr};
403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w._M_do_wait_until(__pred,&#32;__atime);
404 &#32;&#32;&#32;&#32;}
405 
406 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
408 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
409 &#32;&#32;&#32;&#32;__atomic_wait_address_until_bare(<emphasis role="keyword">const</emphasis>&#32;__detail::__platform_wait_t*&#32;__addr,
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Dur&gt;&amp;
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atime)&#32;<emphasis role="keyword">noexcept</emphasis>
413 &#32;&#32;&#32;&#32;{
414 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__bare_timed_wait&#32;__w{__addr};
415 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w._M_do_wait_until(__pred,&#32;__atime);
416 &#32;&#32;&#32;&#32;}
417 
418 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValFn,
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
420 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
421 &#32;&#32;&#32;&#32;__atomic_wait_address_for_v(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__addr,&#32;_Tp&amp;&amp;&#32;__old,&#32;_ValFn&amp;&amp;&#32;__vfn,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)&#32;<emphasis role="keyword">noexcept</emphasis>
423 &#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__enters_timed_wait&#32;__w{__addr};
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w._M_do_wait_for_v(__old,&#32;__vfn,&#32;__rtime);
426 &#32;&#32;&#32;&#32;}
427 
428 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
430 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
431 &#32;&#32;&#32;&#32;__atomic_wait_address_for(<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;__addr,&#32;_Pred&#32;__pred,
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)&#32;<emphasis role="keyword">noexcept</emphasis>
433 &#32;&#32;&#32;&#32;{
434 
435 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__enters_timed_wait&#32;__w{__addr};
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w._M_do_wait_for(__pred,&#32;__rtime);
437 &#32;&#32;&#32;&#32;}
438 
439 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred,
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
441 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
442 &#32;&#32;&#32;&#32;__atomic_wait_address_for_bare(<emphasis role="keyword">const</emphasis>&#32;__detail::__platform_wait_t*&#32;__addr,
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred&#32;__pred,
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)&#32;<emphasis role="keyword">noexcept</emphasis>
445 &#32;&#32;&#32;&#32;{
446 &#32;&#32;&#32;&#32;&#32;&#32;__detail::__bare_timed_wait&#32;__w{__addr};
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__w._M_do_wait_for(__pred,&#32;__rtime);
448 &#32;&#32;&#32;&#32;}
449 _GLIBCXX_END_NAMESPACE_VERSION
450 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
451 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cpp_lib_atomic_wait</emphasis>
452 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_ATOMIC_TIMED_WAIT_H</emphasis>
</programlisting></section>
