<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2unwind_8h_source" xml:lang="en-US">
<title>unwind.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/unwind.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;Exception&#32;handling&#32;and&#32;frame&#32;unwind&#32;runtime&#32;interface&#32;routines.</emphasis>
2 <emphasis role="comment">&#32;&#32;&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
3 <emphasis role="comment"></emphasis>
4 <emphasis role="comment">&#32;&#32;&#32;This&#32;file&#32;is&#32;part&#32;of&#32;GCC.</emphasis>
5 <emphasis role="comment"></emphasis>
6 <emphasis role="comment">&#32;&#32;&#32;GCC&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it</emphasis>
7 <emphasis role="comment">&#32;&#32;&#32;under&#32;the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by</emphasis>
8 <emphasis role="comment">&#32;&#32;&#32;the&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">&#32;&#32;&#32;any&#32;later&#32;version.</emphasis>
10 <emphasis role="comment"></emphasis>
11 <emphasis role="comment">&#32;&#32;&#32;GCC&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but&#32;WITHOUT</emphasis>
12 <emphasis role="comment">&#32;&#32;&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of&#32;MERCHANTABILITY</emphasis>
13 <emphasis role="comment">&#32;&#32;&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU&#32;General&#32;Public</emphasis>
14 <emphasis role="comment">&#32;&#32;&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 <emphasis role="comment"></emphasis>
16 <emphasis role="comment">&#32;&#32;&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">&#32;&#32;&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">&#32;&#32;&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 <emphasis role="comment"></emphasis>
20 <emphasis role="comment">&#32;&#32;&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">&#32;&#32;&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">&#32;&#32;&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">&#32;&#32;&#32;&lt;http://www.gnu.org/licenses/&gt;.&#32;&#32;*/</emphasis>
24 
25 <emphasis role="comment">/*&#32;This&#32;is&#32;derived&#32;from&#32;the&#32;C++&#32;ABI&#32;for&#32;IA-64.&#32;&#32;Where&#32;we&#32;diverge</emphasis>
26 <emphasis role="comment">&#32;&#32;&#32;for&#32;cross-architecture&#32;compatibility&#32;are&#32;noted&#32;with&#32;&quot;@@@&quot;.&#32;&#32;*/</emphasis>
27 
28 <emphasis role="preprocessor">#ifndef&#32;_UNWIND_H</emphasis>
29 <emphasis role="preprocessor">#define&#32;_UNWIND_H</emphasis>
30 
31 <emphasis role="preprocessor">#if&#32;defined&#32;(__SEH__)&#32;&amp;&amp;&#32;!defined&#32;(__USING_SJLJ_EXCEPTIONS__)</emphasis>
32 <emphasis role="comment">/*&#32;Only&#32;for&#32;_GCC_specific_handler.&#32;&#32;*/</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;windows.h&gt;</emphasis>
34 <emphasis role="preprocessor">#endif</emphasis>
35 
36 <emphasis role="preprocessor">#ifndef&#32;HIDE_EXPORTS</emphasis>
37 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;push(default)</emphasis>
38 <emphasis role="preprocessor">#endif</emphasis>
39 
40 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
41 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
42 <emphasis role="preprocessor">#endif</emphasis>
43 
44 <emphasis role="comment">/*&#32;Level&#32;1:&#32;Base&#32;ABI&#32;&#32;*/</emphasis>
45 
46 <emphasis role="comment">/*&#32;@@@&#32;The&#32;IA-64&#32;ABI&#32;uses&#32;uint64&#32;throughout.&#32;&#32;Most&#32;places&#32;this&#32;is</emphasis>
47 <emphasis role="comment">&#32;&#32;&#32;inefficient&#32;for&#32;32-bit&#32;and&#32;smaller&#32;machines.&#32;&#32;*/</emphasis>
48 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;_Unwind_Word&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>((__mode__(__unwind_word__)));
49 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">signed</emphasis>&#32;_Unwind_Sword&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>((__mode__(__unwind_word__)));
50 <emphasis role="preprocessor">#if&#32;defined(__ia64__)&#32;&amp;&amp;&#32;defined(__hpux__)</emphasis>
51 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;_Unwind_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>((__mode__(__word__)));
52 <emphasis role="preprocessor">#else</emphasis>
53 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;_Unwind_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>((__mode__(__pointer__)));
54 <emphasis role="preprocessor">#endif</emphasis>
55 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;_Unwind_Internal_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>((__mode__(__pointer__)));
56 
57 <emphasis role="comment">/*&#32;@@@&#32;The&#32;IA-64&#32;ABI&#32;uses&#32;a&#32;64-bit&#32;word&#32;to&#32;identify&#32;the&#32;producer&#32;and</emphasis>
58 <emphasis role="comment">&#32;&#32;&#32;consumer&#32;of&#32;an&#32;exception.&#32;&#32;We&apos;ll&#32;go&#32;along&#32;with&#32;this&#32;for&#32;now&#32;even&#32;on</emphasis>
59 <emphasis role="comment">&#32;&#32;&#32;32-bit&#32;machines.&#32;&#32;We&apos;ll&#32;need&#32;to&#32;provide&#32;some&#32;other&#32;option&#32;for</emphasis>
60 <emphasis role="comment">&#32;&#32;&#32;16-bit&#32;machines&#32;and&#32;for&#32;machines&#32;with&#32;&gt;&#32;8&#32;bits&#32;per&#32;byte.&#32;&#32;*/</emphasis>
61 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;_Unwind_Exception_Class&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>((__mode__(__DI__)));
62 
63 <emphasis role="comment">/*&#32;The&#32;unwind&#32;interface&#32;uses&#32;reason&#32;codes&#32;in&#32;several&#32;contexts&#32;to</emphasis>
64 <emphasis role="comment">&#32;&#32;&#32;identify&#32;the&#32;reasons&#32;for&#32;failures&#32;or&#32;other&#32;actions.&#32;&#32;*/</emphasis>
65 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>
66 {
67 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2a41ad850ae0c5b105dca3d223df38af97">_URC_NO_REASON</link>&#32;=&#32;0,
68 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2a9fd826377b4f2f85771d886c1a4ce37b">_URC_FOREIGN_EXCEPTION_CAUGHT</link>&#32;=&#32;1,
69 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2a30528e6b6930b75402dca7f9af05cf9c">_URC_FATAL_PHASE2_ERROR</link>&#32;=&#32;2,
70 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2a53bf3ead23368c90ad6a0464eb47097a">_URC_FATAL_PHASE1_ERROR</link>&#32;=&#32;3,
71 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2afb395219565efdeddd6511bd94388586">_URC_NORMAL_STOP</link>&#32;=&#32;4,
72 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2ad764c4ff93e12350f072e0cbd70398c5">_URC_END_OF_STACK</link>&#32;=&#32;5,
73 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2a608f0da2ee309a1c1395063b8b6d028d">_URC_HANDLER_FOUND</link>&#32;=&#32;6,
74 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2a1f57f348816bdd0564bdfd9180e50fc0">_URC_INSTALL_CONTEXT</link>&#32;=&#32;7,
75 &#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2aceacf011e23d791d187b7b10b599bdb6">_URC_CONTINUE_UNWIND</link>&#32;=&#32;8
76 }&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>;
77 
78 
79 <emphasis role="comment">/*&#32;The&#32;unwind&#32;interface&#32;uses&#32;a&#32;pointer&#32;to&#32;an&#32;exception&#32;header&#32;object</emphasis>
80 <emphasis role="comment">&#32;&#32;&#32;as&#32;its&#32;representation&#32;of&#32;an&#32;exception&#32;being&#32;thrown.&#32;In&#32;general,&#32;the</emphasis>
81 <emphasis role="comment">&#32;&#32;&#32;full&#32;representation&#32;of&#32;an&#32;exception&#32;object&#32;is&#32;language-&#32;and</emphasis>
82 <emphasis role="comment">&#32;&#32;&#32;implementation-specific,&#32;but&#32;it&#32;will&#32;be&#32;prefixed&#32;by&#32;a&#32;header</emphasis>
83 <emphasis role="comment">&#32;&#32;&#32;understood&#32;by&#32;the&#32;unwind&#32;interface.&#32;&#32;*/</emphasis>
84 
85 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___unwind___exception">_Unwind_Exception</link>;
86 
87 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(*<link linkend="__classes_2lib_2include_2unwind_8h_1aa315b38b270688a4d979ec71a9f33586">_Unwind_Exception_Cleanup_Fn</link>)&#32;(<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>,
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
89 
90 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___unwind___exception">_Unwind_Exception</link>
91 {
92 &#32;&#32;_Unwind_Exception_Class&#32;<link linkend="_struct___unwind___exception_1ade34d40df51766d7ff384a01237209ae">exception_class</link>;
93 &#32;&#32;<link linkend="__old_2_classes_2lib_2include_2unwind_8h_1aa315b38b270688a4d979ec71a9f33586">_Unwind_Exception_Cleanup_Fn</link>&#32;<link linkend="_struct___unwind___exception_1a44d69c695cdcc6fcde54ae458a69a4c8">exception_cleanup</link>;
94 
95 <emphasis role="preprocessor">#if&#32;!defined&#32;(__USING_SJLJ_EXCEPTIONS__)&#32;&amp;&amp;&#32;defined&#32;(__SEH__)</emphasis>
96 &#32;&#32;_Unwind_Word&#32;private_[6];
97 <emphasis role="preprocessor">#else</emphasis>
98 &#32;&#32;_Unwind_Word&#32;<link linkend="_struct___unwind___exception_1a90fbbe59c5adade160b6bb21b5f71d3d">private_1</link>;
99 &#32;&#32;_Unwind_Word&#32;<link linkend="_struct___unwind___exception_1a5baef90b9b72c2b612cf44326674ef24">private_2</link>;
100 <emphasis role="preprocessor">#endif</emphasis>
101 
102 &#32;&#32;<emphasis role="comment">/*&#32;@@@&#32;The&#32;IA-64&#32;ABI&#32;says&#32;that&#32;this&#32;structure&#32;must&#32;be&#32;double-word&#32;aligned.</emphasis>
103 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;Taking&#32;that&#32;literally&#32;does&#32;not&#32;make&#32;much&#32;sense&#32;generically.&#32;&#32;Instead&#32;we</emphasis>
104 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;provide&#32;the&#32;maximum&#32;alignment&#32;required&#32;by&#32;any&#32;type&#32;for&#32;the&#32;machine.&#32;&#32;*/</emphasis>
105 }&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>((__aligned__));
106 
107 
108 <emphasis role="comment">/*&#32;The&#32;ACTIONS&#32;argument&#32;to&#32;the&#32;personality&#32;routine&#32;is&#32;a&#32;bitwise&#32;OR&#32;of&#32;one</emphasis>
109 <emphasis role="comment">&#32;&#32;&#32;or&#32;more&#32;of&#32;the&#32;following&#32;constants.&#32;&#32;*/</emphasis>
110 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a09fdc8f727b214f5168e3690b0ddfa21">_Unwind_Action</link>;
111 
112 <emphasis role="preprocessor">#define&#32;_UA_SEARCH_PHASE&#32;&#32;&#32;&#32;1</emphasis>
113 <emphasis role="preprocessor">#define&#32;_UA_CLEANUP_PHASE&#32;&#32;&#32;2</emphasis>
114 <emphasis role="preprocessor">#define&#32;_UA_HANDLER_FRAME&#32;&#32;&#32;4</emphasis>
115 <emphasis role="preprocessor">#define&#32;_UA_FORCE_UNWIND&#32;&#32;&#32;&#32;8</emphasis>
116 <emphasis role="preprocessor">#define&#32;_UA_END_OF_STACK&#32;&#32;&#32;&#32;16</emphasis>
117 
118 <emphasis role="comment">/*&#32;The&#32;target&#32;can&#32;override&#32;this&#32;macro&#32;to&#32;define&#32;any&#32;back-end-specific</emphasis>
119 <emphasis role="comment">&#32;&#32;&#32;attributes&#32;required&#32;for&#32;the&#32;lowest-level&#32;stack&#32;frame.&#32;&#32;*/</emphasis>
120 <emphasis role="preprocessor">#ifndef&#32;LIBGCC2_UNWIND_ATTRIBUTE</emphasis>
121 <emphasis role="preprocessor">#define&#32;LIBGCC2_UNWIND_ATTRIBUTE</emphasis>
122 <emphasis role="preprocessor">#endif</emphasis>
123 
124 <emphasis role="comment">/*&#32;This&#32;is&#32;an&#32;opaque&#32;type&#32;used&#32;to&#32;refer&#32;to&#32;a&#32;system-specific&#32;data</emphasis>
125 <emphasis role="comment">&#32;&#32;&#32;structure&#32;used&#32;by&#32;the&#32;system&#32;unwinder.&#32;This&#32;context&#32;is&#32;created&#32;and</emphasis>
126 <emphasis role="comment">&#32;&#32;&#32;destroyed&#32;by&#32;the&#32;system,&#32;and&#32;passed&#32;to&#32;the&#32;personality&#32;routine</emphasis>
127 <emphasis role="comment">&#32;&#32;&#32;during&#32;unwinding.&#32;&#32;*/</emphasis>
128 <emphasis role="keyword">struct&#32;</emphasis>_Unwind_Context;
129 
130 <emphasis role="comment">/*&#32;Raise&#32;an&#32;exception,&#32;passing&#32;along&#32;the&#32;given&#32;exception&#32;object.&#32;&#32;*/</emphasis>
131 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
132 <link linkend="__classes_2lib_2include_2unwind_8h_1a5fdc6b896bc6dcbdad62de19575ddcc7">_Unwind_RaiseException</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
133 
134 <emphasis role="comment">/*&#32;Raise&#32;an&#32;exception&#32;for&#32;forced&#32;unwinding.&#32;&#32;*/</emphasis>
135 
136 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;(*<link linkend="__classes_2lib_2include_2unwind_8h_1a7bcb888c9fda97a1eeff6dc523c504c2">_Unwind_Stop_Fn</link>)
137 &#32;&#32;&#32;&#32;&#32;(int,&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a09fdc8f727b214f5168e3690b0ddfa21">_Unwind_Action</link>,&#32;_Unwind_Exception_Class,
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*,&#32;<emphasis role="keyword">struct&#32;</emphasis>_Unwind_Context&#32;*,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*);
139 
140 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
141 <link linkend="__classes_2lib_2include_2unwind_8h_1a52bd6807315630ad5e2de02fe7d863da">_Unwind_ForcedUnwind</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*,&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a7bcb888c9fda97a1eeff6dc523c504c2">_Unwind_Stop_Fn</link>,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*);
142 
143 <emphasis role="comment">/*&#32;Helper&#32;to&#32;invoke&#32;the&#32;exception_cleanup&#32;routine.&#32;&#32;*/</emphasis>
144 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a17c82e92329af856df9ead3406350b79">_Unwind_DeleteException</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
145 
146 <emphasis role="comment">/*&#32;Resume&#32;propagation&#32;of&#32;an&#32;existing&#32;exception.&#32;&#32;This&#32;is&#32;used&#32;after</emphasis>
147 <emphasis role="comment">&#32;&#32;&#32;e.g.&#32;executing&#32;cleanup&#32;code,&#32;and&#32;not&#32;to&#32;implement&#32;rethrowing.&#32;&#32;*/</emphasis>
148 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
149 <link linkend="__classes_2lib_2include_2unwind_8h_1a14d9ebf25d0801c5d02a9d26bef9830c">_Unwind_Resume</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
150 
151 <emphasis role="comment">/*&#32;@@@&#32;Resume&#32;propagation&#32;of&#32;a&#32;FORCE_UNWIND&#32;exception,&#32;or&#32;to&#32;rethrow</emphasis>
152 <emphasis role="comment">&#32;&#32;&#32;a&#32;normal&#32;exception&#32;that&#32;was&#32;handled.&#32;&#32;*/</emphasis>
153 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
154 <link linkend="__classes_2lib_2include_2unwind_8h_1aee02af3d31560ca7afd286981d177920">_Unwind_Resume_or_Rethrow</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
155 
156 <emphasis role="comment">/*&#32;@@@&#32;Use&#32;unwind&#32;data&#32;to&#32;perform&#32;a&#32;stack&#32;backtrace.&#32;&#32;The&#32;trace&#32;callback</emphasis>
157 <emphasis role="comment">&#32;&#32;&#32;is&#32;called&#32;for&#32;every&#32;stack&#32;frame&#32;in&#32;the&#32;call&#32;chain,&#32;but&#32;no&#32;cleanup</emphasis>
158 <emphasis role="comment">&#32;&#32;&#32;actions&#32;are&#32;performed.&#32;&#32;*/</emphasis>
159 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;(*<link linkend="__classes_2lib_2include_2unwind_8h_1a7a93af20df595d1d6158fa23bc489e9d">_Unwind_Trace_Fn</link>)
160 &#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">struct&#32;</emphasis>_Unwind_Context&#32;*,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*);
161 
162 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
163 <link linkend="__classes_2lib_2include_2unwind_8h_1a397d10951ad53e2d3c2b32eea2805f32">_Unwind_Backtrace</link>&#32;(<link linkend="__classes_2lib_2include_2unwind_8h_1a7a93af20df595d1d6158fa23bc489e9d">_Unwind_Trace_Fn</link>,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*);
164 
165 <emphasis role="comment">/*&#32;These&#32;functions&#32;are&#32;used&#32;for&#32;communicating&#32;information&#32;about&#32;the&#32;unwind</emphasis>
166 <emphasis role="comment">&#32;&#32;&#32;context&#32;(i.e.&#32;the&#32;unwind&#32;descriptors&#32;and&#32;the&#32;user&#32;register&#32;state)&#32;between</emphasis>
167 <emphasis role="comment">&#32;&#32;&#32;the&#32;unwind&#32;library&#32;and&#32;the&#32;personality&#32;routine&#32;and&#32;landing&#32;pad.&#32;&#32;Only</emphasis>
168 <emphasis role="comment">&#32;&#32;&#32;selected&#32;registers&#32;may&#32;be&#32;manipulated.&#32;&#32;*/</emphasis>
169 
170 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Word&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1af2c27f2b761efe66e15efb337a384c52">_Unwind_GetGR</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*,&#32;<emphasis role="keywordtype">int</emphasis>);
171 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a4d9528afb24b3d38fc21fa3251ba687d">_Unwind_SetGR</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;_Unwind_Word);
172 
173 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1afb807818d0d7c2eefc156e2c7697c401">_Unwind_GetIP</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*);
174 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a2f3e33d119bc8217909b1f2674b3990d">_Unwind_GetIPInfo</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*);
175 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1ad9799e7d7cf1f0630a15910fd48a0fe1">_Unwind_SetIP</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*,&#32;_Unwind_Ptr);
176 
177 <emphasis role="comment">/*&#32;@@@&#32;Retrieve&#32;the&#32;CFA&#32;of&#32;the&#32;given&#32;context.&#32;&#32;*/</emphasis>
178 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Word&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f54fd26ac13708ed3821227ffe93db6">_Unwind_GetCFA</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*);
179 
180 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2include_2unwind_8h_1aeffeaf5a08a2ce979e3d5ff9678e5ab6">_Unwind_GetLanguageSpecificData</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*);
181 
182 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a39ffe47b1bc1c2f52a21ef87284f0604">_Unwind_GetRegionStart</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*);
183 
184 
185 <emphasis role="comment">/*&#32;The&#32;personality&#32;routine&#32;is&#32;the&#32;function&#32;in&#32;the&#32;C++&#32;(or&#32;other&#32;language)</emphasis>
186 <emphasis role="comment">&#32;&#32;&#32;runtime&#32;library&#32;which&#32;serves&#32;as&#32;an&#32;interface&#32;between&#32;the&#32;system&#32;unwind</emphasis>
187 <emphasis role="comment">&#32;&#32;&#32;library&#32;and&#32;language-specific&#32;exception&#32;handling&#32;semantics.&#32;&#32;It&#32;is</emphasis>
188 <emphasis role="comment">&#32;&#32;&#32;specific&#32;to&#32;the&#32;code&#32;fragment&#32;described&#32;by&#32;an&#32;unwind&#32;info&#32;block,&#32;and</emphasis>
189 <emphasis role="comment">&#32;&#32;&#32;it&#32;is&#32;always&#32;referenced&#32;via&#32;the&#32;pointer&#32;in&#32;the&#32;unwind&#32;info&#32;block,&#32;and</emphasis>
190 <emphasis role="comment">&#32;&#32;&#32;hence&#32;it&#32;has&#32;no&#32;ABI-specified&#32;name.</emphasis>
191 <emphasis role="comment"></emphasis>
192 <emphasis role="comment">&#32;&#32;&#32;Note&#32;that&#32;this&#32;implies&#32;that&#32;two&#32;different&#32;C++&#32;implementations&#32;can</emphasis>
193 <emphasis role="comment">&#32;&#32;&#32;use&#32;different&#32;names,&#32;and&#32;have&#32;different&#32;contents&#32;in&#32;the&#32;language</emphasis>
194 <emphasis role="comment">&#32;&#32;&#32;specific&#32;data&#32;area.&#32;&#32;Moreover,&#32;that&#32;the&#32;language&#32;specific&#32;data</emphasis>
195 <emphasis role="comment">&#32;&#32;&#32;area&#32;contains&#32;no&#32;version&#32;info&#32;because&#32;name&#32;of&#32;the&#32;function&#32;invoked</emphasis>
196 <emphasis role="comment">&#32;&#32;&#32;provides&#32;more&#32;effective&#32;versioning&#32;by&#32;detecting&#32;at&#32;link&#32;time&#32;the</emphasis>
197 <emphasis role="comment">&#32;&#32;&#32;lack&#32;of&#32;code&#32;to&#32;handle&#32;the&#32;different&#32;data&#32;format.&#32;&#32;*/</emphasis>
198 
199 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;(*<link linkend="__classes_2lib_2include_2unwind_8h_1af993119cf60777f0bbf2b0909ca4f1cb">_Unwind_Personality_Fn</link>)
200 &#32;&#32;&#32;&#32;&#32;(int,&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a09fdc8f727b214f5168e3690b0ddfa21">_Unwind_Action</link>,&#32;_Unwind_Exception_Class,
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*,&#32;<emphasis role="keyword">struct&#32;</emphasis>_Unwind_Context&#32;*);
202 
203 <emphasis role="comment">/*&#32;@@@&#32;The&#32;following&#32;alternate&#32;entry&#32;points&#32;are&#32;for&#32;setjmp/longjmp</emphasis>
204 <emphasis role="comment">&#32;&#32;&#32;based&#32;unwinding.&#32;&#32;*/</emphasis>
205 
206 <emphasis role="keyword">struct&#32;</emphasis>SjLj_Function_Context;
207 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a6b67fa1b54986c9a96f0137e0fbe240c">_Unwind_SjLj_Register</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;SjLj_Function_Context&#32;*);
208 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1adb8f2cec6a538248fce68366a64004c6">_Unwind_SjLj_Unregister</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;SjLj_Function_Context&#32;*);
209 
210 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
211 <link linkend="__classes_2lib_2include_2unwind_8h_1a6ae26d9a827688844f38f8d5706837b4">_Unwind_SjLj_RaiseException</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
212 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
213 <link linkend="__classes_2lib_2include_2unwind_8h_1a8f342914830c4a2b90209ca288f2ca47">_Unwind_SjLj_ForcedUnwind</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*,&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a7bcb888c9fda97a1eeff6dc523c504c2">_Unwind_Stop_Fn</link>,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*);
214 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
215 <link linkend="__classes_2lib_2include_2unwind_8h_1aa3e6d96ec12ad32913d5cee6e9b38ae2">_Unwind_SjLj_Resume</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
216 <emphasis role="keyword">extern</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a26f33dc6f6d23dc64517389b6b786ac2">_Unwind_Reason_Code</link>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a3f191391b2ad80f22385ffdf3b785ae1">LIBGCC2_UNWIND_ATTRIBUTE</link>
217 <link linkend="__classes_2lib_2include_2unwind_8h_1ab9820977c98081453bbfc8e00bfc6376">_Unwind_SjLj_Resume_or_Rethrow</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_struct___unwind___exception">_Unwind_Exception</link>&#32;*);
218 
219 <emphasis role="comment">/*&#32;@@@&#32;The&#32;following&#32;provide&#32;access&#32;to&#32;the&#32;base&#32;addresses&#32;for&#32;text</emphasis>
220 <emphasis role="comment">&#32;&#32;&#32;and&#32;data-relative&#32;addressing&#32;in&#32;the&#32;LDSA.&#32;&#32;In&#32;order&#32;to&#32;stay&#32;link</emphasis>
221 <emphasis role="comment">&#32;&#32;&#32;compatible&#32;with&#32;the&#32;standard&#32;ABI&#32;for&#32;IA-64,&#32;we&#32;inline&#32;these.&#32;&#32;*/</emphasis>
222 
223 <emphasis role="preprocessor">#ifdef&#32;__ia64__</emphasis>
224 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_Unwind_Ptr
225 <link linkend="__classes_2lib_2include_2unwind_8h_1a852b60087b48edf3e86055dcaff6ad56">_Unwind_GetDataRelBase</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*_C)
226 {
227 &#32;&#32;<emphasis role="comment">/*&#32;The&#32;GP&#32;is&#32;stored&#32;in&#32;R1.&#32;&#32;*/</emphasis>
228 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1af2c27f2b761efe66e15efb337a384c52">_Unwind_GetGR</link>&#32;(_C,&#32;1);
229 }
230 
231 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_Unwind_Ptr
232 <link linkend="__classes_2lib_2include_2unwind_8h_1a1ee680d76f69d55c81036411d8261691">_Unwind_GetTextRelBase</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*_C&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a5beb53ab4af402f53fd1c764c3ef21ad">__attribute__</link>&#32;((__unused__)))
233 {
234 &#32;&#32;__builtin_abort&#32;();
235 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
236 }
237 
238 <emphasis role="comment">/*&#32;@@@&#32;Retrieve&#32;the&#32;Backing&#32;Store&#32;Pointer&#32;of&#32;the&#32;given&#32;context.&#32;&#32;*/</emphasis>
239 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Word&#32;_Unwind_GetBSP&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*);
240 <emphasis role="preprocessor">#else</emphasis>
241 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a852b60087b48edf3e86055dcaff6ad56">_Unwind_GetDataRelBase</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*);
242 <emphasis role="keyword">extern</emphasis>&#32;_Unwind_Ptr&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a1ee680d76f69d55c81036411d8261691">_Unwind_GetTextRelBase</link>&#32;(<emphasis role="keyword">struct</emphasis>&#32;_Unwind_Context&#32;*);
243 <emphasis role="preprocessor">#endif</emphasis>
244 
245 <emphasis role="comment">/*&#32;@@@&#32;Given&#32;an&#32;address,&#32;return&#32;the&#32;entry&#32;point&#32;of&#32;the&#32;function&#32;that</emphasis>
246 <emphasis role="comment">&#32;&#32;&#32;contains&#32;it.&#32;&#32;*/</emphasis>
247 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a9648034fbc3dc12372af7499b87d7ce3">_Unwind_FindEnclosingFunction</link>&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*pc);
248 
249 <emphasis role="preprocessor">#ifndef&#32;__SIZEOF_LONG__</emphasis>
250 <emphasis role="preprocessor">&#32;&#32;#error&#32;&quot;__SIZEOF_LONG__&#32;macro&#32;not&#32;defined&quot;</emphasis>
251 <emphasis role="preprocessor">#endif</emphasis>
252 
253 <emphasis role="preprocessor">#ifndef&#32;__SIZEOF_POINTER__</emphasis>
254 <emphasis role="preprocessor">&#32;&#32;#error&#32;&quot;__SIZEOF_POINTER__&#32;macro&#32;not&#32;defined&quot;</emphasis>
255 <emphasis role="preprocessor">#endif</emphasis>
256 
257 
258 <emphasis role="comment">/*&#32;leb128&#32;type&#32;numbers&#32;have&#32;a&#32;potentially&#32;unlimited&#32;size.</emphasis>
259 <emphasis role="comment">&#32;&#32;&#32;The&#32;target&#32;of&#32;the&#32;following&#32;definitions&#32;of&#32;_sleb128_t&#32;and&#32;_uleb128_t</emphasis>
260 <emphasis role="comment">&#32;&#32;&#32;is&#32;to&#32;have&#32;efficient&#32;data&#32;types&#32;large&#32;enough&#32;to&#32;hold&#32;the&#32;leb128&#32;type</emphasis>
261 <emphasis role="comment">&#32;&#32;&#32;numbers&#32;used&#32;in&#32;the&#32;unwind&#32;code.</emphasis>
262 <emphasis role="comment">&#32;&#32;&#32;Mostly&#32;these&#32;types&#32;will&#32;simply&#32;be&#32;defined&#32;to&#32;long&#32;and&#32;unsigned&#32;long</emphasis>
263 <emphasis role="comment">&#32;&#32;&#32;except&#32;when&#32;a&#32;unsigned&#32;long&#32;data&#32;type&#32;on&#32;the&#32;target&#32;machine&#32;is&#32;not</emphasis>
264 <emphasis role="comment">&#32;&#32;&#32;capable&#32;of&#32;storing&#32;a&#32;pointer.&#32;&#32;*/</emphasis>
265 
266 <emphasis role="preprocessor">#if&#32;__SIZEOF_LONG__&#32;&gt;=&#32;__SIZEOF_POINTER__</emphasis>
267 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a25493a9c148576f609feb79ffdf3c25f">_sleb128_t</link>;
268 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a0c41ffd43e62cbbd767b1f99c1bbb4ba">_uleb128_t</link>;
269 <emphasis role="preprocessor">#elif&#32;__SIZEOF_LONG_LONG__&#32;&gt;=&#32;__SIZEOF_POINTER__</emphasis>
270 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a25493a9c148576f609feb79ffdf3c25f">_sleb128_t</link>;
271 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1a0c41ffd43e62cbbd767b1f99c1bbb4ba">_uleb128_t</link>;
272 <emphasis role="preprocessor">#else</emphasis>
273 <emphasis role="preprocessor">#&#32;error&#32;&quot;What&#32;type&#32;shall&#32;we&#32;use&#32;for&#32;_sleb128_t?&quot;</emphasis>
274 <emphasis role="preprocessor">#endif</emphasis>
275 
276 <emphasis role="preprocessor">#if&#32;defined&#32;(__SEH__)&#32;&amp;&amp;&#32;!defined&#32;(__USING_SJLJ_EXCEPTIONS__)</emphasis>
277 <emphasis role="comment">/*&#32;Handles&#32;the&#32;mapping&#32;from&#32;SEH&#32;to&#32;GCC&#32;interfaces.&#32;&#32;*/</emphasis>
278 EXCEPTION_DISPOSITION&#32;_GCC_specific_handler&#32;(PEXCEPTION_RECORD,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*,
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCONTEXT,&#32;PDISPATCHER_CONTEXT,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2unwind_8h_1af993119cf60777f0bbf2b0909ca4f1cb">_Unwind_Personality_Fn</link>);
281 <emphasis role="preprocessor">#endif</emphasis>
282 
283 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
284 }
285 <emphasis role="preprocessor">#endif</emphasis>
286 
287 <emphasis role="preprocessor">#ifndef&#32;HIDE_EXPORTS</emphasis>
288 <emphasis role="preprocessor">#pragma&#32;GCC&#32;visibility&#32;pop</emphasis>
289 <emphasis role="preprocessor">#endif</emphasis>
290 
291 <emphasis role="comment">/*&#32;Additional&#32;actions&#32;to&#32;unwind&#32;number&#32;of&#32;stack&#32;frames.&#32;&#32;*/</emphasis>
292 <emphasis role="preprocessor">#define&#32;_Unwind_Frames_Extra(frames)</emphasis>
293 
294 <emphasis role="comment">/*&#32;Increment&#32;frame&#32;count.&#32;&#32;*/</emphasis>
295 <emphasis role="preprocessor">#define&#32;_Unwind_Frames_Increment(context,&#32;frames)&#32;frames++</emphasis>
296 
297 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;unwind.h&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
