<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2parallel_2random__shuffle_8h_source" xml:lang="en-US">
<title>random_shuffle.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/random_shuffle.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler.</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_RANDOM_SHUFFLE_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_RANDOM_SHUFFLE_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_numeric.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;parallel/random_number.h&gt;</emphasis>
39 
40 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
41 {
47 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>;
48 
51 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_DRandomShufflingGlobalData
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a07dcf3c6d7a8c0feb8461be6b6a70afa">_TraitsType</link>;
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a3860d6ae31d064929b5078a81d9863ce">_ValueType</link>;
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a4c74aad500851787fa50973e58b43a65">_DifferenceType</link>;
57 
59 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&amp;&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1acbeeaa7e9c24cf795212c77267a2839a">_M_source</link>;
60 
62 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a3860d6ae31d064929b5078a81d9863ce">_ValueType</link>**&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1adfb7f07e927fe9027fe7e53466711e81">_M_temporaries</link>;
63 
67 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a4c74aad500851787fa50973e58b43a65">_DifferenceType</link>**&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a16709c651141459bf357a160c32ba40c">_M_dist</link>;
68 
70 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a4c74aad500851787fa50973e58b43a65">_DifferenceType</link>*&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1ad3c05861ca45c7f96901cb10f1a46299">_M_starts</link>;
71 
74 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>*&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1aed045d92fb145fa066d457d4d774894b">_M_bin_proc</link>;
75 
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a97f25c495ee3f15f536662ab66ed3090">_M_num_bins</link>;
78 
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1aea997549c9b932168aa3604c93d8ffc8">_M_num_bits</link>;
81 
83 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1a49c246799f069b451b53333929d4084b">_DRandomShufflingGlobalData</link>(_RAIter&amp;&#32;__source)
84 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data_1acbeeaa7e9c24cf795212c77267a2839a">_M_source</link>(__source)&#32;{&#32;}
85 &#32;&#32;&#32;&#32;};
86 
90 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_DRSSorterPU
92 &#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u_1a98ee0afe2a8b24ccca4438ac7d9aa05d">_M_num_threads</link>;
95 
97 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u_1a4f1586846d7c1364d0bdb4495050be75">_M_bins_begin</link>;
98 
100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u_1a57cad95133be224e950058f49d8efa88">__bins_end</link>;
101 
103 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u_1a81dfd4b63950e76d2b540051a234cd5d">_M_seed</link>;
104 
106 &#32;&#32;&#32;&#32;&#32;&#32;_DRandomShufflingGlobalData&lt;_RAIter&gt;*&#32;<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u_1ad3412b7508ba84d11b474ca1aeacc77c">_M_sd</link>;
107 &#32;&#32;&#32;&#32;};
108 
113 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
115 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a06421834042f49edbb2abb2dd931315d">__random_number_pow2</link>(<emphasis role="keywordtype">int</emphasis>&#32;__logp,&#32;_RandomNumberGenerator&amp;&#32;__rng)
116 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rng.__genrand_bits(__logp);&#32;}
117 
120 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;
122 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ab52b56076dd965bea099a7187e621d0b">__parallel_random_shuffle_drs_pu</link>(_DRSSorterPU&lt;_RAIter,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&gt;*&#32;__pus)
124 &#32;&#32;&#32;&#32;{
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__iam&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1aa03cf372d8266eef024262a68d304e1b">omp_get_thread_num</link>();
130 &#32;&#32;&#32;&#32;&#32;&#32;_DRSSorterPU&lt;_RAIter,&#32;_RandomNumberGenerator&gt;*&#32;__d&#32;=&#32;&amp;__pus[__iam];
131 &#32;&#32;&#32;&#32;&#32;&#32;_DRandomShufflingGlobalData&lt;_RAIter&gt;*&#32;__sd&#32;=&#32;__d-&gt;_M_sd;
132 
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Indexing:&#32;_M_dist[bin][processor]</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__length&#32;=&#32;(__sd-&gt;_M_starts[__iam&#32;+&#32;1]
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-&#32;__sd-&gt;_M_starts[__iam]);
136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>*&#32;__oracles&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>[__length];
137 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__dist&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__sd-&gt;_M_num_bins&#32;+&#32;1];
138 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>*&#32;__bin_proc&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>[__sd-&gt;_M_num_bins];
139 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType**&#32;__temporaries&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_ValueType*[__d-&gt;_M_num_threads];
140 
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;oracles&#32;and&#32;count&#32;appearances.</emphasis>
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__sd-&gt;_M_num_bins&#32;+&#32;1;&#32;++__b)
143 &#32;&#32;&#32;&#32;__dist[__b]&#32;=&#32;0;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__num_bits&#32;=&#32;__sd-&gt;_M_num_bits;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;_RandomNumber&#32;__rng(__d-&gt;_M_seed);
147 
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;main&#32;loop.</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__length;&#32;++__i)
150 &#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__oracle&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a06421834042f49edbb2abb2dd931315d">__random_number_pow2</link>(__num_bits,&#32;__rng);
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__oracles[__i]&#32;=&#32;__oracle;
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;allow&#32;prefix&#32;(partial)&#32;sum.</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++(__dist[__oracle&#32;+&#32;1]);
156 &#32;&#32;&#32;&#32;}
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__sd-&gt;_M_num_bins&#32;+&#32;1;&#32;++__b)
159 &#32;&#32;&#32;&#32;__sd-&gt;_M_dist[__b][__iam&#32;+&#32;1]&#32;=&#32;__dist[__b];
160 
161 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
162 
163 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sum&#32;up&#32;bins,&#32;__sd-&gt;_M_dist[__s&#32;+&#32;1][__d-&gt;_M_num_threads]&#32;now</emphasis>
166 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;contains&#32;the&#32;total&#32;number&#32;of&#32;items&#32;in&#32;bin&#32;__s</emphasis>
167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__sd-&gt;_M_num_bins;&#32;++__s)
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_sequential::partial_sum(__sd-&gt;_M_dist[__s&#32;+&#32;1],
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_dist[__s&#32;+&#32;1]
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__d-&gt;_M_num_threads&#32;+&#32;1,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_dist[__s&#32;+&#32;1]);
172 &#32;&#32;&#32;&#32;&#32;&#32;}
173 
174 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">_SequenceIndex</link>&#32;__offset&#32;=&#32;0,&#32;__global_offset&#32;=&#32;0;
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__d-&gt;_M_bins_begin;&#32;++__s)
178 &#32;&#32;&#32;&#32;__global_offset&#32;+=&#32;__sd-&gt;_M_dist[__s&#32;+&#32;1][__d-&gt;_M_num_threads];
179 
180 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__s&#32;=&#32;__d-&gt;_M_bins_begin;&#32;__s&#32;&lt;&#32;__d-&gt;__bins_end;&#32;++__s)
183 &#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__t&#32;=&#32;0;&#32;__t&#32;&lt;&#32;__d-&gt;_M_num_threads&#32;+&#32;1;&#32;++__t)
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_dist[__s&#32;+&#32;1][__t]&#32;+=&#32;__offset;
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__offset&#32;=&#32;__sd-&gt;_M_dist[__s&#32;+&#32;1][__d-&gt;_M_num_threads];
187 &#32;&#32;&#32;&#32;}
188 
189 &#32;&#32;&#32;&#32;&#32;&#32;__sd-&gt;_M_temporaries[__iam]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_ValueType*<emphasis role="keyword">&gt;</emphasis>
190 &#32;&#32;&#32;&#32;(::operator&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_ValueType)&#32;*&#32;__offset));
191 
192 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
193 
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Draw&#32;local&#32;copies&#32;to&#32;avoid&#32;false&#32;sharing.</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__sd-&gt;_M_num_bins&#32;+&#32;1;&#32;++__b)
196 &#32;&#32;&#32;&#32;__dist[__b]&#32;=&#32;__sd-&gt;_M_dist[__b][__iam];
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__sd-&gt;_M_num_bins;&#32;++__b)
198 &#32;&#32;&#32;&#32;__bin_proc[__b]&#32;=&#32;__sd-&gt;_M_bin_proc[__b];
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__t&#32;=&#32;0;&#32;__t&#32;&lt;&#32;__d-&gt;_M_num_threads;&#32;++__t)
200 &#32;&#32;&#32;&#32;__temporaries[__t]&#32;=&#32;__sd-&gt;_M_temporaries[__t];
201 
202 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__source&#32;=&#32;__sd-&gt;_M_source;
203 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__start&#32;=&#32;__sd-&gt;_M_starts[__iam];
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Distribute&#32;according&#32;to&#32;oracles,&#32;second&#32;main&#32;loop.</emphasis>
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__length;&#32;++__i)
207 &#32;&#32;&#32;&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__target_bin&#32;=&#32;__oracles[__i];
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__target_p&#32;=&#32;__bin_proc[__target_bin];
210 
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Last&#32;column&#32;[__d-&gt;_M_num_threads]&#32;stays&#32;unchanged.</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;::new(&amp;(__temporaries[__target_p][__dist[__target_bin&#32;+&#32;1]++]))
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType(*(__source&#32;+&#32;__i&#32;+&#32;__start));
214 &#32;&#32;&#32;&#32;}
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;delete[]&#32;__oracles;
217 &#32;&#32;&#32;&#32;&#32;&#32;delete[]&#32;__dist;
218 &#32;&#32;&#32;&#32;&#32;&#32;delete[]&#32;__bin_proc;
219 &#32;&#32;&#32;&#32;&#32;&#32;delete[]&#32;__temporaries;
220 
221 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;barrier</emphasis>
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shuffle&#32;bins&#32;internally.</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__b&#32;=&#32;__d-&gt;_M_bins_begin;&#32;__b&#32;&lt;&#32;__d-&gt;__bins_end;&#32;++__b)
225 &#32;&#32;&#32;&#32;{
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType*&#32;__begin&#32;=
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__sd-&gt;_M_temporaries[__iam]
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__b&#32;==&#32;__d-&gt;_M_bins_begin
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;0&#32;:&#32;__sd-&gt;_M_dist[__b][__d-&gt;_M_num_threads])),
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__end&#32;=&#32;(__sd-&gt;_M_temporaries[__iam]
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__sd-&gt;_M_dist[__b&#32;+&#32;1][__d-&gt;_M_num_threads]);
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868">__sequential_random_shuffle</link>(__begin,&#32;__end,&#32;__rng);
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__begin,&#32;__end,&#32;__sd-&gt;_M_source&#32;+&#32;__global_offset
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;(__b&#32;==&#32;__d-&gt;_M_bins_begin
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;0&#32;:&#32;__sd-&gt;_M_dist[__b][__d-&gt;_M_num_threads]));
237 &#32;&#32;&#32;&#32;}
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">_SequenceIndex</link>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__offset;&#32;++__i)
240 &#32;&#32;&#32;&#32;__sd-&gt;_M_temporaries[__iam][__i].~_ValueType();
241 &#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__sd-&gt;_M_temporaries[__iam]);
242 &#32;&#32;&#32;&#32;}
243 
246 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
247 &#32;&#32;&#32;&#32;_Tp&#32;
248 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(_Tp&#32;__x)
249 &#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x&#32;&lt;=&#32;1)
251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_Tp)1&#32;&lt;&lt;&#32;(<link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link>(__x&#32;-&#32;1)&#32;+&#32;1);
254 &#32;&#32;&#32;&#32;}
255 
263 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
264 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
265 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a9152bade9629217427f065780bc3f4c2">__parallel_random_shuffle_drs</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;_RAIter&gt;::difference_type&#32;__n,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&amp;&#32;__rng)
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
274 
275 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__n)
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Settings&amp;&#32;__s&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>();
278 
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_threads&#32;&gt;&#32;__n)
280 &#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link><emphasis role="keyword">&gt;</emphasis>(__n);
281 
282 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__num_bins,&#32;__num_bins_cache;
283 
284 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_L1</emphasis>
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;the&#32;L1&#32;cache&#32;first.</emphasis>
286 
287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;fit&#32;into&#32;L1.</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=
289 &#32;&#32;&#32;&#32;std::max&lt;_DifferenceType&gt;(1,&#32;__n&#32;/&#32;(__s.L1_cache_size_lb
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueType)));
291 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins_cache);
292 
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;buckets&#32;than&#32;TLB&#32;entries,&#32;power&#32;of&#32;2</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;of&#32;2&#32;and&#32;at&#32;least&#32;one&#32;element&#32;per&#32;bin,&#32;at&#32;most&#32;the&#32;TLB&#32;size.</emphasis>
295 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;std::min&lt;_DifferenceType&gt;(__n,&#32;__num_bins_cache);
296 
297 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_TLB</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;TLB&#32;entries&#32;needed&#32;per&#32;bin.</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;std::min&lt;_DifferenceType&gt;(__s.TLB_size&#32;/&#32;2,&#32;__num_bins);
300 <emphasis role="preprocessor">#endif</emphasis>
301 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins);
302 
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_bins&#32;&lt;&#32;__num_bins_cache)
304 &#32;&#32;&#32;&#32;{
305 <emphasis role="preprocessor">#endif</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;try&#32;the&#32;L2&#32;cache</emphasis>
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;fit&#32;into&#32;L2</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link><emphasis role="keyword">&gt;</emphasis>
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::max&lt;_DifferenceType&gt;(1,&#32;__n&#32;/&#32;(__s.L2_cache_size
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueType))));
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins_cache);
312 
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;buckets&#32;than&#32;TLB&#32;entries,&#32;power&#32;of&#32;2.</emphasis>
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link><emphasis role="keyword">&gt;</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::min(__n,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_DifferenceType<emphasis role="keyword">&gt;</emphasis>(__num_bins_cache)));
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;of&#32;2&#32;and&#32;at&#32;least&#32;one&#32;element&#32;per&#32;bin,&#32;at&#32;most&#32;the&#32;TLB&#32;size.</emphasis>
317 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_TLB</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;TLB&#32;entries&#32;needed&#32;per&#32;bin.</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;std::min(<emphasis role="keyword">static_cast&lt;</emphasis>_DifferenceType<emphasis role="keyword">&gt;</emphasis>(__s.TLB_size&#32;/&#32;2),
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins);
321 <emphasis role="preprocessor">#endif</emphasis>
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins);
323 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_L1</emphasis>
324 &#32;&#32;&#32;&#32;}
325 <emphasis role="preprocessor">#endif</emphasis>
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::max&lt;_BinIndex&gt;(__num_threads,&#32;__num_bins));
329 
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_threads&#32;&lt;=&#32;1)
331 &#32;&#32;&#32;&#32;&#32;&#32;{
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumber&#32;__derived_rng(
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rng(std::numeric_limits&lt;uint32_t&gt;::max()));
334 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868">__sequential_random_shuffle</link>(__begin,&#32;__end,&#32;__derived_rng);
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
336 &#32;&#32;&#32;&#32;&#32;&#32;}
337 
338 &#32;&#32;&#32;&#32;&#32;&#32;_DRandomShufflingGlobalData&lt;_RAIter&gt;&#32;__sd(__begin);
339 &#32;&#32;&#32;&#32;&#32;&#32;_DRSSorterPU&lt;_RAIter,&#32;_RandomNumber&#32;&gt;*&#32;__pus;
340 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__starts;
341 
342 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;parallel&#32;num_threads(__num_threads)</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;{
344 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads&#32;=&#32;<link linkend="__classes_2lib_2include_2omp_8h_1ac42ead04531fd33507e3d3a6f648b200">omp_get_num_threads</link>();
345 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;&#32;&#32;&#32;pragma&#32;omp&#32;single</emphasis>
346 &#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;__pus&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DRSSorterPU&lt;_RAIter,&#32;_RandomNumber&gt;[__num_threads];
348 &#32;&#32;&#32;&#32;&#32;&#32;
349 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_temporaries&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_ValueType*[__num_threads];
350 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_dist&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType*[__num_bins&#32;+&#32;1];
351 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_bin_proc&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>[__num_bins];
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__num_bins&#32;+&#32;1;&#32;++__b)
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_dist[__b]&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;+&#32;1];
354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;(__num_bins&#32;+&#32;1);&#32;++__b)
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_dist[0][0]&#32;=&#32;0;
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_dist[__b][0]&#32;=&#32;0;
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
359 &#32;&#32;&#32;&#32;&#32;&#32;__starts&#32;=&#32;__sd._M_starts&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_threads&#32;+&#32;1];
360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__bin_cursor&#32;=&#32;0;
361 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_num_bins&#32;=&#32;__num_bins;
362 &#32;&#32;&#32;&#32;&#32;&#32;__sd._M_num_bits&#32;=&#32;<link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link>(__num_bins);
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__chunk_length&#32;=&#32;__n&#32;/&#32;__num_threads,
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1a412bd21d61e578eab6a5afe510c8f07d">__split</link>&#32;=&#32;__n&#32;%&#32;__num_threads,
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__start&#32;=&#32;0;
367 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__bin_chunk_length&#32;=&#32;__num_bins&#32;/&#32;__num_threads,
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bin_split&#32;=&#32;__num_bins&#32;%&#32;__num_threads;
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__num_threads;&#32;++__i)
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__starts[__i]&#32;=&#32;__start;
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__start&#32;+=&#32;(__i&#32;&lt;&#32;<link linkend="_namespace____pstl_1_1____tbb__backend_1a412bd21d61e578eab6a5afe510c8f07d">__split</link>
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(__chunk_length&#32;+&#32;1)&#32;:&#32;__chunk_length);
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__j&#32;=&#32;__pus[__i]._M_bins_begin&#32;=&#32;__bin_cursor;
375 
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Range&#32;of&#32;bins&#32;for&#32;this&#32;processor.</emphasis>
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bin_cursor&#32;+=&#32;(__i&#32;&lt;&#32;__bin_split
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;(__bin_chunk_length&#32;+&#32;1)
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;__bin_chunk_length);
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pus[__i].__bins_end&#32;=&#32;__bin_cursor;
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__j&#32;&lt;&#32;__bin_cursor;&#32;++__j)
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sd._M_bin_proc[__j]&#32;=&#32;__i;
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pus[__i]._M_num_threads&#32;=&#32;__num_threads;
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pus[__i]._M_seed&#32;=&#32;__rng(std::numeric_limits&lt;uint32_t&gt;::max());
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pus[__i]._M_sd&#32;=&#32;&amp;__sd;
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
387 &#32;&#32;&#32;&#32;&#32;&#32;__starts[__num_threads]&#32;=&#32;__start;
388 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//single</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;shuffle&#32;in&#32;parallel.</emphasis>
390 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ab52b56076dd965bea099a7187e621d0b">__parallel_random_shuffle_drs_pu</link>(__pus);
391 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;parallel</emphasis>
392 
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__starts;
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__sd._M_bin_proc;
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;(__num_bins&#32;+&#32;1);&#32;++__s)
396 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__sd._M_dist[__s];
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__sd._M_dist;
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__sd._M_temporaries;
399 
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__pus;
401 &#32;&#32;&#32;&#32;}
402 
408 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
409 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
410 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868">__sequential_random_shuffle</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&amp;&#32;__rng)
412 &#32;&#32;&#32;&#32;{
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
415 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
416 
417 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Settings&amp;&#32;__s&#32;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>();
419 
420 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__num_bins,&#32;__num_bins_cache;
421 
422 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_L1</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;the&#32;L1&#32;cache&#32;first,&#32;must&#32;fit&#32;into&#32;L1.</emphasis>
424 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=&#32;std::max&lt;_DifferenceType&gt;
425 &#32;&#32;&#32;&#32;(1,&#32;__n&#32;/&#32;(__s.L1_cache_size_lb&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueType)));
426 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins_cache);
427 
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;buckets&#32;than&#32;TLB&#32;entries,&#32;power&#32;of&#32;2</emphasis>
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;of&#32;2&#32;and&#32;at&#32;least&#32;one&#32;element&#32;per&#32;bin,&#32;at&#32;most&#32;the&#32;TLB&#32;size</emphasis>
430 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;std::min(__n,&#32;(_DifferenceType)__num_bins_cache);
431 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_TLB</emphasis>
432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;TLB&#32;entries&#32;needed&#32;per&#32;bin</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;std::min((_DifferenceType)__s.TLB_size&#32;/&#32;2,&#32;__num_bins);
434 <emphasis role="preprocessor">#endif</emphasis>
435 &#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins);
436 
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_bins&#32;&lt;&#32;__num_bins_cache)
438 &#32;&#32;&#32;&#32;{
439 <emphasis role="preprocessor">#endif</emphasis>
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;try&#32;the&#32;L2&#32;cache,&#32;must&#32;fit&#32;into&#32;L2.</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link><emphasis role="keyword">&gt;</emphasis>
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::max&lt;_DifferenceType&gt;(1,&#32;__n&#32;/&#32;(__s.L2_cache_size
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueType))));
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins_cache&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins_cache);
445 
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;more&#32;buckets&#32;than&#32;TLB&#32;entries,&#32;power&#32;of&#32;2</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Power&#32;of&#32;2&#32;and&#32;at&#32;least&#32;one&#32;element&#32;per&#32;bin,&#32;at&#32;most&#32;the&#32;TLB&#32;size.</emphasis>
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link><emphasis role="keyword">&gt;</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::min(__n,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_DifferenceType<emphasis role="keyword">&gt;</emphasis>(__num_bins_cache)));
450 
451 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_TLB</emphasis>
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2&#32;TLB&#32;entries&#32;needed&#32;per&#32;bin</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;std::min&lt;_DifferenceType&gt;(__s.TLB_size&#32;/&#32;2,&#32;__num_bins);
454 <emphasis role="preprocessor">#endif</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_bins&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link>(__num_bins);
456 <emphasis role="preprocessor">#if&#32;_GLIBCXX_RANDOM_SHUFFLE_CONSIDER_L1</emphasis>
457 &#32;&#32;&#32;&#32;}
458 <emphasis role="preprocessor">#endif</emphasis>
459 
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__num_bits&#32;=&#32;<link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link>(__num_bins);
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_bins&#32;&gt;&#32;1)
463 &#32;&#32;&#32;&#32;{
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType*&#32;__target&#32;=
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_ValueType*<emphasis role="keyword">&gt;</emphasis>(::operator&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_ValueType)&#32;*&#32;__n));
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>*&#32;__oracles&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>[__n];
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType*&#32;__dist0&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_bins&#32;+&#32;1],
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;__dist1&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_DifferenceType[__num_bins&#32;+&#32;1];
469 
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__num_bins&#32;+&#32;1;&#32;++__b)
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dist0[__b]&#32;=&#32;0;
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumber&#32;__bitrng(__rng(0xFFFFFFFF));
474 
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link>&#32;__oracle&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a06421834042f49edbb2abb2dd931315d">__random_number_pow2</link>(__num_bits,&#32;__bitrng);
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__oracles[__i]&#32;=&#32;__oracle;
479 
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;allow&#32;prefix&#32;(partial)&#32;sum.</emphasis>
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++(__dist0[__oracle&#32;+&#32;1]);
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
483 
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sum&#32;up&#32;bins.</emphasis>
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_sequential::partial_sum(__dist0,&#32;__dist0&#32;+&#32;__num_bins&#32;+&#32;1,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dist0);
487 
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__num_bins&#32;+&#32;1;&#32;++__b)
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dist1[__b]&#32;=&#32;__dist0[__b];
490 
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Distribute&#32;according&#32;to&#32;oracles.</emphasis>
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new(&amp;(__target[(__dist0[__oracles[__i]])++]))&#32;
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType(*(__begin&#32;+&#32;__i));
495 
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__b&#32;=&#32;0;&#32;__b&#32;&lt;&#32;__num_bins;&#32;++__b)
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868">__sequential_random_shuffle</link>(__target&#32;+&#32;__dist1[__b],
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__target&#32;+&#32;__dist1[__b&#32;+&#32;1],&#32;__rng);
499 
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;elements&#32;back.</emphasis>
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__target,&#32;__target&#32;+&#32;__n,&#32;__begin);
502 
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__dist0;
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__dist1;
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__oracles;
506 &#32;&#32;&#32;&#32;&#32;&#32;
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__target[__i].~_ValueType();
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__target);
510 &#32;&#32;&#32;&#32;}
511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
512 &#32;&#32;&#32;&#32;__gnu_sequential::random_shuffle(__begin,&#32;__end,&#32;__rng);
513 &#32;&#32;&#32;&#32;}
514 
520 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
521 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
522 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__parallel_random_shuffle</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&#32;__rng&#32;=&#32;_RandomNumber())
524 &#32;&#32;&#32;&#32;{
525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
527 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
528 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a9152bade9629217427f065780bc3f4c2">__parallel_random_shuffle_drs</link>(__begin,&#32;__end,&#32;__n,
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link>(),&#32;__rng);
530 &#32;&#32;&#32;&#32;}
531 }
532 
533 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_RANDOM_SHUFFLE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
