<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2charconv_8h_source" xml:lang="en-US">
<title>charconv.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/charconv.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Numeric&#32;conversions&#32;(to_string,&#32;to_chars)&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2017-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_CHARCONV_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_CHARCONV_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 <emphasis role="keyword">namespace&#32;</emphasis>__detail
43 {
44 &#32;&#32;<emphasis role="comment">//&#32;Generic&#32;implementation&#32;for&#32;arbitrary&#32;bases.</emphasis>
45 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
46 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">unsigned</emphasis>
47 &#32;&#32;&#32;&#32;__to_chars_len(_Tp&#32;__value,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)&#32;noexcept
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;implementation&#32;bug&quot;</emphasis>);
50 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_unsigned&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;implementation&#32;bug&quot;</emphasis>);
51 
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__n&#32;=&#32;1;
53 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ac7d43bb48a3aeccad2288b2c415f9e9f">__b2</link>&#32;=&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>&#32;&#32;*&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>;
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a6036ec9b0f699c02b3ecf91f0e4a822d">__b3</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ac7d43bb48a3aeccad2288b2c415f9e9f">__b2</link>&#32;*&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>;
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0cd52d49e252a4f222a993a9e53fb284">__b4</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a6036ec9b0f699c02b3ecf91f0e4a822d">__b3</link>&#32;*&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>;
56 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__value&#32;&lt;&#32;(<emphasis role="keywordtype">unsigned</emphasis>)<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__value&#32;&lt;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1ac7d43bb48a3aeccad2288b2c415f9e9f">__b2</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n&#32;+&#32;1;
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__value&#32;&lt;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a6036ec9b0f699c02b3ecf91f0e4a822d">__b3</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n&#32;+&#32;2;
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__value&#32;&lt;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0cd52d49e252a4f222a993a9e53fb284">__b4</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n&#32;+&#32;3;
62 &#32;&#32;&#32;&#32;&#32;&#32;__value&#32;/=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a0cd52d49e252a4f222a993a9e53fb284">__b4</link>;
63 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;+=&#32;4;
64 &#32;&#32;&#32;&#32;}
65 &#32;&#32;&#32;&#32;}
66 
67 &#32;&#32;<emphasis role="comment">//&#32;Write&#32;an&#32;unsigned&#32;integer&#32;value&#32;to&#32;the&#32;range&#32;[first,first+len).</emphasis>
68 &#32;&#32;<emphasis role="comment">//&#32;The&#32;caller&#32;is&#32;required&#32;to&#32;provide&#32;a&#32;buffer&#32;of&#32;exactly&#32;the&#32;right&#32;size</emphasis>
69 &#32;&#32;<emphasis role="comment">//&#32;(which&#32;can&#32;be&#32;determined&#32;by&#32;the&#32;__to_chars_len&#32;function).</emphasis>
70 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
71 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
72 &#32;&#32;&#32;&#32;__to_chars_10_impl(<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__len,&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
73 &#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_integral&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;implementation&#32;bug&quot;</emphasis>);
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_unsigned&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;implementation&#32;bug&quot;</emphasis>);
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__digits[201]&#32;=
78 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;0001020304050607080910111213141516171819&quot;</emphasis>
79 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;2021222324252627282930313233343536373839&quot;</emphasis>
80 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;4041424344454647484950515253545556575859&quot;</emphasis>
81 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;6061626364656667686970717273747576777879&quot;</emphasis>
82 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;8081828384858687888990919293949596979899&quot;</emphasis>;
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__pos&#32;=&#32;__len&#32;-&#32;1;
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;&gt;=&#32;100)
85 &#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__num&#32;=&#32;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;%&#32;100)&#32;*&#32;2;
87 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;/=&#32;100;
88 &#32;&#32;&#32;&#32;&#32;&#32;__first[__pos]&#32;=&#32;__digits[__num&#32;+&#32;1];
89 &#32;&#32;&#32;&#32;&#32;&#32;__first[__pos&#32;-&#32;1]&#32;=&#32;__digits[__num];
90 &#32;&#32;&#32;&#32;&#32;&#32;__pos&#32;-=&#32;2;
91 &#32;&#32;&#32;&#32;}
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;&gt;=&#32;10)
93 &#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__num&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;*&#32;2;
95 &#32;&#32;&#32;&#32;&#32;&#32;__first[1]&#32;=&#32;__digits[__num&#32;+&#32;1];
96 &#32;&#32;&#32;&#32;&#32;&#32;__first[0]&#32;=&#32;__digits[__num];
97 &#32;&#32;&#32;&#32;}
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
99 &#32;&#32;&#32;&#32;__first[0]&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;+&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
100 &#32;&#32;&#32;&#32;}
101 
102 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
103 _GLIBCXX_END_NAMESPACE_VERSION
104 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
105 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
106 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_CHARCONV_H</emphasis>
</programlisting></section>
