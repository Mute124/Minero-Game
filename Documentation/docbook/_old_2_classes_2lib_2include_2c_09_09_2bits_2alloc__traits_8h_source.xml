<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2alloc__traits_8h_source" xml:lang="en-US">
<title>alloc_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/alloc_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Allocator&#32;traits&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2011-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_ALLOC_TRAITS_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_ALLOC_TRAITS_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_construct.h&gt;</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;bits/memoryfwd.h&gt;</emphasis>
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/allocator.h&gt;</emphasis>
37 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/ptr_traits.h&gt;</emphasis>
38 <emphasis role="preprocessor">#&#32;include&#32;&lt;ext/numeric_traits.h&gt;</emphasis>
39 <emphasis role="preprocessor">#endif</emphasis>
40 
41 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
42 {
43 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
45 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
46 <emphasis role="preprocessor">#define&#32;__cpp_lib_allocator_traits_is_always_equal&#32;201411L</emphasis>
47 
49 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__allocator_traits_base
50 &#32;&#32;{
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
52 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__rebind&#32;:&#32;__replace_first_arg&lt;_Tp,&#32;_Up&gt;&#32;{&#32;};
53 
54 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
55 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__rebind&lt;_Tp,&#32;_Up,
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Tp::template&#32;rebind&lt;_Up&gt;::other&gt;&gt;
57 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::template&#32;rebind&lt;_Up&gt;::other;&#32;};
58 
59 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__pointer&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::pointer;
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__c_pointer&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::const_pointer;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__v_pointer&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::void_pointer;
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__cv_pointer&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::const_void_pointer;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__pocca&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::propagate_on_container_copy_assignment;
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__pocma&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::propagate_on_container_move_assignment;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__pocs&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::propagate_on_container_swap;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__equal&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::is_always_equal;
76 &#32;&#32;};
77 
78 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__alloc_rebind
80 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__allocator_traits_base::template&#32;__rebind&lt;_Alloc,&#32;_Up&gt;::type;
82 
89 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>allocator_traits&#32;:&#32;__allocator_traits_base
91 &#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;allocator_type;
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;value_type;
96 
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;__detected_or_t&lt;value_type*,&#32;__pointer,&#32;_Alloc&gt;;
103 
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;_Func&lt;_Alloc&gt;&#32;or&#32;pointer_traits&lt;pointer&gt;::rebind&lt;_Tp&gt;</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Ptr
108 &#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;pointer_traits&lt;pointer&gt;::template&#32;rebind&lt;_Tp&gt;;
110 &#32;&#32;&#32;&#32;};
111 
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Ptr&lt;_Func,&#32;_Tp,&#32;__void_t&lt;_Func&lt;_Alloc&gt;&gt;&gt;
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Func&lt;_Alloc&gt;;
116 &#32;&#32;&#32;&#32;};
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;_A2::difference_type&#32;or&#32;pointer_traits&lt;_Ptr&gt;::difference_type</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_A2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrT,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Diff
121 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;pointer_traits&lt;_PtrT&gt;::difference_type;&#32;};
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_A2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_PtrT&gt;
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Diff&lt;_A2,&#32;_PtrT,&#32;__void_t&lt;typename&#32;_A2::difference_type&gt;&gt;
125 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_A2::difference_type;&#32;};
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Select&#32;_A2::size_type&#32;or&#32;make_unsigned&lt;_DiffT&gt;::type</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_A2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DiffT,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Size&#32;:&#32;make_unsigned&lt;_DiffT&gt;&#32;{&#32;};
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_A2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_DiffT&gt;
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Size&lt;_A2,&#32;_DiffT,&#32;__void_t&lt;typename&#32;_A2::size_type&gt;&gt;
133 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_A2::size_type;&#32;};
134 
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_pointer&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&lt;__c_pointer,&#32;const&#32;value_type&gt;::type;
143 
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>void_pointer&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&lt;__v_pointer,&#32;void&gt;::type;
151 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_void_pointer&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&lt;__cv_pointer,&#32;const&#32;void&gt;::type;
159 
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Diff&lt;_Alloc,&#32;pointer&gt;::type;
167 
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>size_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&lt;_Alloc,&#32;difference_type&gt;::type;
175 
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_copy_assignment
183 &#32;&#32;&#32;&#32;=&#32;__detected_or_t&lt;false_type,&#32;__pocca,&#32;_Alloc&gt;;
184 
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_move_assignment
192 &#32;&#32;&#32;&#32;=&#32;__detected_or_t&lt;false_type,&#32;__pocma,&#32;_Alloc&gt;;
193 
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_swap
201 &#32;&#32;&#32;&#32;=&#32;__detected_or_t&lt;false_type,&#32;__pocs,&#32;_Alloc&gt;;
202 
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_always_equal
210 &#32;&#32;&#32;&#32;=&#32;__detected_or_t&lt;typename&#32;is_empty&lt;_Alloc&gt;::type,&#32;__equal,&#32;_Alloc&gt;;
211 
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind_alloc&#32;=&#32;__alloc_rebind&lt;_Alloc,&#32;_Tp&gt;;
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind_traits&#32;=&#32;allocator_traits&lt;rebind_alloc&lt;_Tp&gt;&gt;;
216 
217 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
220 &#32;&#32;&#32;&#32;_S_allocate(_Alloc2&amp;&#32;__a,&#32;size_type&#32;__n,&#32;const_void_pointer&#32;__hint,&#32;<emphasis role="keywordtype">int</emphasis>)
221 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__a.allocate(__n,&#32;__hint))
222 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n,&#32;__hint);&#32;}
223 
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
226 &#32;&#32;&#32;&#32;_S_allocate(_Alloc2&amp;&#32;__a,&#32;size_type&#32;__n,&#32;const_void_pointer,&#32;...)
227 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n);&#32;}
228 
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
230 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__construct_helper
231 &#32;&#32;&#32;&#32;{
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2,
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;_Alloc2*&gt;()-&gt;construct(
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Tp*&gt;(),&#32;std::declval&lt;_Args&gt;()...))&gt;
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;true_type&#32;__test(<emphasis role="keywordtype">int</emphasis>);
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;false_type&#32;__test(...);
239 
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__test&lt;_Alloc&gt;(0));
241 &#32;&#32;&#32;&#32;};
242 
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__has_construct
245 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__construct_helper&lt;_Tp,&#32;_Args...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
246 
247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
248 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;_Require&lt;__has_construct&lt;_Tp,&#32;_Args...&gt;&gt;
249 &#32;&#32;&#32;&#32;_S_construct(_Alloc&amp;&#32;__a,&#32;_Tp*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
250 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__a.construct(__p,&#32;std::forward&lt;_Args&gt;(__args)...)))
251 &#32;&#32;&#32;&#32;{&#32;__a.construct(__p,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
252 
253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR
255 &#32;&#32;&#32;&#32;_Require&lt;__and_&lt;__not_&lt;__has_construct&lt;_Tp,&#32;_Args...&gt;&gt;,
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;_Tp,&#32;_Args...&gt;&gt;&gt;
257 &#32;&#32;&#32;&#32;_S_construct(_Alloc&amp;,&#32;_Tp*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_constructible&lt;_Tp,&#32;_Args...&gt;<link linkend="_classvalue">::value</link>)
259 &#32;&#32;&#32;&#32;{
260 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
261 &#32;&#32;&#32;&#32;&#32;&#32;::new((<emphasis role="keywordtype">void</emphasis>*)__p)&#32;_Tp(std::forward&lt;_Args&gt;(__args)...);
262 <emphasis role="preprocessor">#else</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__p,&#32;std::forward&lt;_Args&gt;(__args)...);
264 <emphasis role="preprocessor">#endif</emphasis>
265 &#32;&#32;&#32;&#32;}
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>
269 &#32;&#32;&#32;&#32;_S_destroy(_Alloc2&amp;&#32;__a,&#32;_Tp*&#32;__p,&#32;<emphasis role="keywordtype">int</emphasis>)
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__a.destroy(__p)))
271 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__a.destroy(__p))
272 &#32;&#32;&#32;&#32;{&#32;__a.destroy(__p);&#32;}
273 
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
275 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
276 &#32;&#32;&#32;&#32;_S_destroy(_Alloc2&amp;,&#32;_Tp*&#32;__p,&#32;...)
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_destructible&lt;_Tp&gt;::value)
278 &#32;&#32;&#32;&#32;{&#32;std::_Destroy(__p);&#32;}
279 
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
281 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
282 &#32;&#32;&#32;&#32;_S_max_size(_Alloc2&amp;&#32;__a,&#32;<emphasis role="keywordtype">int</emphasis>)
283 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__a.max_size())
284 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.max_size();&#32;}
285 
286 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;size_type
288 &#32;&#32;&#32;&#32;_S_max_size(_Alloc2&amp;,&#32;...)
289 &#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2466.&#32;allocator_traits::max_size()&#32;default&#32;behavior&#32;is&#32;incorrect</emphasis>
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__numeric_traits&lt;size_type&gt;::__max
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
294 &#32;&#32;&#32;&#32;}
295 
296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
298 &#32;&#32;&#32;&#32;_S_select(_Alloc2&amp;&#32;__a,&#32;<emphasis role="keywordtype">int</emphasis>)
299 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__a.select_on_container_copy_construction())
300 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.select_on_container_copy_construction();&#32;}
301 
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
303 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Alloc2
304 &#32;&#32;&#32;&#32;_S_select(_Alloc2&amp;&#32;__a,&#32;...)
305 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;&#32;}
306 
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
308 
316 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
317 &#32;&#32;&#32;&#32;&#32;&#32;allocate(_Alloc&amp;&#32;__a,&#32;size_type&#32;__n)
318 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n);&#32;}
319 
331 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
332 &#32;&#32;&#32;&#32;&#32;&#32;allocate(_Alloc&amp;&#32;__a,&#32;size_type&#32;__n,&#32;const_void_pointer&#32;__hint)
333 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_allocate(__a,&#32;__n,&#32;__hint,&#32;0);&#32;}
334 
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
344 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(_Alloc&amp;&#32;__a,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
345 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__a.deallocate(__p,&#32;__n);&#32;}
346 
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>
360 &#32;&#32;&#32;&#32;construct(_Alloc&amp;&#32;__a,&#32;_Tp*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
361 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(_S_construct(__a,&#32;__p,
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...)))
363 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_S_construct(__a,&#32;__p,&#32;std::forward&lt;_Args&gt;(__args)...))
364 &#32;&#32;&#32;&#32;{&#32;_S_construct(__a,&#32;__p,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
365 
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
376 &#32;&#32;&#32;&#32;destroy(_Alloc&amp;&#32;__a,&#32;_Tp*&#32;__p)
377 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(_S_destroy(__a,&#32;__p,&#32;0)))
378 &#32;&#32;&#32;&#32;{&#32;_S_destroy(__a,&#32;__p,&#32;0);&#32;}
379 
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;size_type
389 &#32;&#32;&#32;&#32;&#32;&#32;max_size(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_max_size(__a,&#32;0);&#32;}
391 
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;_Alloc
401 &#32;&#32;&#32;&#32;&#32;&#32;select_on_container_copy_construction(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__rhs)
402 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_select(__rhs,&#32;0);&#32;}
403 &#32;&#32;&#32;&#32;};
404 
405 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
406 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_dynamic_alloc&#32;201907L</emphasis>
407 <emphasis role="preprocessor">#endif</emphasis>
408 
410 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
411 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>allocator_traits&lt;allocator&lt;_Tp&gt;&gt;
412 &#32;&#32;&#32;&#32;{
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>allocator_type&#32;=&#32;allocator&lt;_Tp&gt;;
415 
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
418 
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;_Tp*;
421 
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_pointer&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*;
424 
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>void_pointer&#32;=&#32;<emphasis role="keywordtype">void</emphasis>*;
427 
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_void_pointer&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*;
430 
432 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;std::ptrdiff_t;
433 
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>size_type&#32;=&#32;std::size_t;
436 
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_copy_assignment&#32;=&#32;false_type;
439 
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_move_assignment&#32;=&#32;true_type;
442 
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_swap&#32;=&#32;false_type;
445 
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_always_equal&#32;=&#32;true_type;
448 
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
450 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind_alloc&#32;=&#32;allocator&lt;_Up&gt;;
451 
452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
453 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind_traits&#32;=&#32;allocator_traits&lt;allocator&lt;_Up&gt;&gt;;
454 
462 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
463 &#32;&#32;&#32;&#32;&#32;&#32;allocate(allocator_type&amp;&#32;__a,&#32;size_type&#32;__n)
464 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n);&#32;}
465 
476 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
477 &#32;&#32;&#32;&#32;&#32;&#32;allocate(allocator_type&amp;&#32;__a,&#32;size_type&#32;__n,&#32;const_void_pointer&#32;__hint)
478 &#32;&#32;&#32;&#32;&#32;&#32;{
479 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n,&#32;__hint);
481 <emphasis role="preprocessor">#else</emphasis>
482 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n);
483 <emphasis role="preprocessor">#endif</emphasis>
484 &#32;&#32;&#32;&#32;&#32;&#32;}
485 
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
495 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(allocator_type&amp;&#32;__a,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
496 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__a.deallocate(__p,&#32;__n);&#32;}
497 
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
510 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
511 &#32;&#32;&#32;&#32;construct(allocator_type&amp;&#32;__a&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)),&#32;_Up*&#32;__p,
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_constructible&lt;_Up,&#32;_Args...&gt;<link linkend="_classvalue">::value</link>)
514 &#32;&#32;&#32;&#32;{
515 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;__a.construct(__p,&#32;std::forward&lt;_Args&gt;(__args)...);
517 <emphasis role="preprocessor">#else</emphasis>
518 &#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__p,&#32;std::forward&lt;_Args&gt;(__args)...);
519 <emphasis role="preprocessor">#endif</emphasis>
520 &#32;&#32;&#32;&#32;}
521 
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
530 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
531 &#32;&#32;&#32;&#32;destroy(allocator_type&amp;&#32;__a&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)),&#32;_Up*&#32;__p)
532 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_destructible&lt;_Up&gt;::value)
533 &#32;&#32;&#32;&#32;{
534 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
535 &#32;&#32;&#32;&#32;&#32;&#32;__a.destroy(__p);
536 <emphasis role="preprocessor">#else</emphasis>
537 &#32;&#32;&#32;&#32;&#32;&#32;std::destroy_at(__p);
538 <emphasis role="preprocessor">#endif</emphasis>
539 &#32;&#32;&#32;&#32;}
540 
546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;size_type
547 &#32;&#32;&#32;&#32;&#32;&#32;max_size(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)))&#32;<emphasis role="keyword">noexcept</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;{
549 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
550 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.max_size();
551 <emphasis role="preprocessor">#else</emphasis>
552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(-1)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
553 <emphasis role="preprocessor">#endif</emphasis>
554 &#32;&#32;&#32;&#32;&#32;&#32;}
555 
561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;allocator_type
562 &#32;&#32;&#32;&#32;&#32;&#32;select_on_container_copy_construction(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__rhs)
563 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs;&#32;}
564 &#32;&#32;&#32;&#32;};
565 
567 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
568 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>allocator_traits&lt;allocator&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;&gt;
569 &#32;&#32;&#32;&#32;{
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>allocator_type&#32;=&#32;allocator&lt;void&gt;;
572 
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
575 
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>*;
578 
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_pointer&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*;
581 
583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>void_pointer&#32;=&#32;<emphasis role="keywordtype">void</emphasis>*;
584 
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_void_pointer&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*;
587 
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;std::ptrdiff_t;
590 
592 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>size_type&#32;=&#32;std::size_t;
593 
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_copy_assignment&#32;=&#32;false_type;
596 
598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_move_assignment&#32;=&#32;true_type;
599 
601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>propagate_on_container_swap&#32;=&#32;false_type;
602 
604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_always_equal&#32;=&#32;true_type;
605 
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
607 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind_alloc&#32;=&#32;allocator&lt;_Up&gt;;
608 
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
610 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind_traits&#32;=&#32;allocator_traits&lt;allocator&lt;_Up&gt;&gt;;
611 
613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
614 &#32;&#32;&#32;&#32;&#32;&#32;allocate(allocator_type&amp;,&#32;size_type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
615 
617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(allocator_type&amp;,&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;size_type)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
619 
631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
632 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
633 &#32;&#32;&#32;&#32;construct(allocator_type&amp;,&#32;_Up*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
634 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(std::is_nothrow_constructible&lt;_Up,&#32;_Args...&gt;<link linkend="_classvalue">::value</link>)
635 &#32;&#32;&#32;&#32;{&#32;std::_Construct(__p,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
636 
644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
645 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>
646 &#32;&#32;&#32;&#32;destroy(allocator_type&amp;,&#32;_Up*&#32;__p)
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_destructible&lt;_Up&gt;::value)
648 &#32;&#32;&#32;&#32;{&#32;std::_Destroy(__p);&#32;}
649 
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;size_type
652 &#32;&#32;&#32;&#32;&#32;&#32;max_size(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
653 
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;allocator_type
660 &#32;&#32;&#32;&#32;&#32;&#32;select_on_container_copy_construction(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__rhs)
661 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs;&#32;}
662 &#32;&#32;&#32;&#32;};
663 
664 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201703L</emphasis>
665 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
666 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
667 &#32;&#32;&#32;&#32;__do_alloc_on_copy(_Alloc&amp;&#32;__one,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__two,&#32;true_type)
668 &#32;&#32;&#32;&#32;{&#32;__one&#32;=&#32;__two;&#32;}
669 
670 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
671 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
672 &#32;&#32;&#32;&#32;__do_alloc_on_copy(_Alloc&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;,&#32;false_type)
673 &#32;&#32;&#32;&#32;{&#32;}
674 <emphasis role="preprocessor">#endif</emphasis>
675 
676 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
677 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
678 &#32;&#32;&#32;&#32;__alloc_on_copy(_Alloc&amp;&#32;__one,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__two)
679 &#32;&#32;&#32;&#32;{
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator_traits&lt;_Alloc&gt;&#32;__traits;
681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits::propagate_on_container_copy_assignment&#32;__pocca;
682 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__pocca::value)
684 &#32;&#32;&#32;&#32;__one&#32;=&#32;__two;
685 <emphasis role="preprocessor">#else</emphasis>
686 &#32;&#32;&#32;&#32;&#32;&#32;__do_alloc_on_copy(__one,&#32;__two,&#32;__pocca());
687 <emphasis role="preprocessor">#endif</emphasis>
688 &#32;&#32;&#32;&#32;}
689 
690 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
691 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Alloc
692 &#32;&#32;&#32;&#32;__alloc_on_copy(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
693 &#32;&#32;&#32;&#32;{
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator_traits&lt;_Alloc&gt;&#32;__traits;
695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__traits::select_on_container_copy_construction(__a);
696 &#32;&#32;&#32;&#32;}
697 
698 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201703L</emphasis>
699 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
700 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__do_alloc_on_move(_Alloc&amp;&#32;__one,&#32;_Alloc&amp;&#32;__two,&#32;true_type)
701 &#32;&#32;&#32;&#32;{&#32;__one&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__two);&#32;}
702 
703 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
704 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__do_alloc_on_move(_Alloc&amp;,&#32;_Alloc&amp;,&#32;false_type)
705 &#32;&#32;&#32;&#32;{&#32;}
706 <emphasis role="preprocessor">#endif</emphasis>
707 
708 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
709 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
710 &#32;&#32;&#32;&#32;__alloc_on_move(_Alloc&amp;&#32;__one,&#32;_Alloc&amp;&#32;__two)
711 &#32;&#32;&#32;&#32;{
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator_traits&lt;_Alloc&gt;&#32;__traits;
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits::propagate_on_container_move_assignment&#32;__pocma;
714 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__pocma::value)
716 &#32;&#32;&#32;&#32;__one&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__two);
717 <emphasis role="preprocessor">#else</emphasis>
718 &#32;&#32;&#32;&#32;&#32;&#32;__do_alloc_on_move(__one,&#32;__two,&#32;__pocma());
719 <emphasis role="preprocessor">#endif</emphasis>
720 &#32;&#32;&#32;&#32;}
721 
722 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201703L</emphasis>
723 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
724 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__do_alloc_on_swap(_Alloc&amp;&#32;__one,&#32;_Alloc&amp;&#32;__two,&#32;true_type)
725 &#32;&#32;&#32;&#32;{
726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
727 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__one,&#32;__two);
728 &#32;&#32;&#32;&#32;}
729 
730 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
731 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__do_alloc_on_swap(_Alloc&amp;,&#32;_Alloc&amp;,&#32;false_type)
732 &#32;&#32;&#32;&#32;{&#32;}
733 <emphasis role="preprocessor">#endif</emphasis>
734 
735 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
736 &#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
737 &#32;&#32;&#32;&#32;__alloc_on_swap(_Alloc&amp;&#32;__one,&#32;_Alloc&amp;&#32;__two)
738 &#32;&#32;&#32;&#32;{
739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator_traits&lt;_Alloc&gt;&#32;__traits;
740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__traits::propagate_on_container_swap&#32;__pocs;
741 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__pocs::value)
743 &#32;&#32;&#32;&#32;{
744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
745 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__one,&#32;__two);
746 &#32;&#32;&#32;&#32;}
747 <emphasis role="preprocessor">#else</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;__do_alloc_on_swap(__one,&#32;__two,&#32;__pocs());
749 <emphasis role="preprocessor">#endif</emphasis>
750 &#32;&#32;&#32;&#32;}
751 
752 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueT&#32;=&#32;__remove_cvref_t&lt;typename&#32;_Alloc::value_type&gt;,
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
755 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_alloc_insertable_impl
756 &#32;&#32;&#32;&#32;:&#32;false_type
757 &#32;&#32;&#32;&#32;{&#32;};
758 
759 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueT&gt;
760 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_alloc_insertable_impl&lt;_Alloc,&#32;_Tp,&#32;_ValueT,
761 &#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;decltype(allocator_traits&lt;_Alloc&gt;::construct(
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Alloc&amp;&gt;(),&#32;std::declval&lt;_ValueT*&gt;(),
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Tp&gt;()))&gt;&gt;
764 &#32;&#32;&#32;&#32;:&#32;true_type
765 &#32;&#32;&#32;&#32;{&#32;};
766 
767 &#32;&#32;<emphasis role="comment">//&#32;true&#32;if&#32;_Alloc::value_type&#32;is&#32;CopyInsertable&#32;into&#32;containers&#32;using&#32;_Alloc</emphasis>
768 &#32;&#32;<emphasis role="comment">//&#32;(might&#32;be&#32;wrong&#32;if&#32;_Alloc::construct&#32;exists&#32;but&#32;is&#32;not&#32;constrained,</emphasis>
769 &#32;&#32;<emphasis role="comment">//&#32;i.e.&#32;actually&#32;trying&#32;to&#32;use&#32;it&#32;would&#32;still&#32;be&#32;invalid.&#32;Use&#32;with&#32;caution.)</emphasis>
770 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
771 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_copy_insertable
772 &#32;&#32;&#32;&#32;:&#32;__is_alloc_insertable_impl&lt;_Alloc,
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Alloc::value_type&#32;const&amp;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
774 &#32;&#32;&#32;&#32;{&#32;};
775 
776 &#32;&#32;<emphasis role="comment">//&#32;std::allocator&lt;_Tp&gt;&#32;just&#32;requires&#32;CopyConstructible</emphasis>
777 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
778 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_copy_insertable&lt;allocator&lt;_Tp&gt;&gt;
779 &#32;&#32;&#32;&#32;:&#32;is_copy_constructible&lt;_Tp&gt;
780 &#32;&#32;&#32;&#32;{&#32;};
781 
782 &#32;&#32;<emphasis role="comment">//&#32;true&#32;if&#32;_Alloc::value_type&#32;is&#32;MoveInsertable&#32;into&#32;containers&#32;using&#32;_Alloc</emphasis>
783 &#32;&#32;<emphasis role="comment">//&#32;(might&#32;be&#32;wrong&#32;if&#32;_Alloc::construct&#32;exists&#32;but&#32;is&#32;not&#32;constrained,</emphasis>
784 &#32;&#32;<emphasis role="comment">//&#32;i.e.&#32;actually&#32;trying&#32;to&#32;use&#32;it&#32;would&#32;still&#32;be&#32;invalid.&#32;Use&#32;with&#32;caution.)</emphasis>
785 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_move_insertable
787 &#32;&#32;&#32;&#32;:&#32;__is_alloc_insertable_impl&lt;_Alloc,&#32;typename&#32;_Alloc::value_type&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
788 &#32;&#32;&#32;&#32;{&#32;};
789 
790 &#32;&#32;<emphasis role="comment">//&#32;std::allocator&lt;_Tp&gt;&#32;just&#32;requires&#32;MoveConstructible</emphasis>
791 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
792 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_move_insertable&lt;allocator&lt;_Tp&gt;&gt;
793 &#32;&#32;&#32;&#32;:&#32;is_move_constructible&lt;_Tp&gt;
794 &#32;&#32;&#32;&#32;{&#32;};
795 
796 &#32;&#32;<emphasis role="comment">//&#32;Trait&#32;to&#32;detect&#32;Allocator-like&#32;types.</emphasis>
797 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
798 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_allocator&#32;:&#32;false_type&#32;{&#32;};
799 
800 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
801 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_allocator&lt;_Alloc,
802 &#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Alloc::value_type,
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decltype(std::declval&lt;_Alloc&amp;&gt;().allocate(size_t{}))&gt;&gt;
804 &#32;&#32;&#32;&#32;:&#32;true_type&#32;{&#32;};
805 
806 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
807 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RequireAllocator
808 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__is_allocator&lt;_Alloc&gt;::value,&#32;_Alloc&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
809 
810 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
811 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RequireNotAllocator
812 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;!__is_allocator&lt;_Alloc&gt;::value,&#32;_Alloc&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
813 
814 <emphasis role="preprocessor">#if&#32;__cpp_concepts&#32;&gt;=&#32;201907L</emphasis>
815 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
816 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__allocator_like&#32;=&#32;<emphasis role="keyword">requires</emphasis>&#32;(_Alloc&amp;&#32;__a)&#32;{
817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type;
818 &#32;&#32;&#32;&#32;&#32;&#32;__a.deallocate(__a.allocate(1u),&#32;1u);
819 &#32;&#32;&#32;&#32;};
820 <emphasis role="preprocessor">#endif</emphasis>
821 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
822 
829 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&gt;
830 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
831 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
832 &#32;&#32;&#32;&#32;_Destroy(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&amp;&#32;__alloc)
834 &#32;&#32;&#32;&#32;{
835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
836 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&lt;&#32;201103L
837 &#32;&#32;&#32;&#32;__alloc.destroy(std::__addressof(*__first));
838 <emphasis role="preprocessor">#else</emphasis>
839 &#32;&#32;&#32;&#32;allocator_traits&lt;_Allocator&gt;::destroy(__alloc,
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__addressof(*__first));
841 <emphasis role="preprocessor">#endif</emphasis>
842 &#32;&#32;&#32;&#32;}
843 
844 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
845 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
846 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
847 &#32;&#32;&#32;&#32;_Destroy(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator&lt;_Tp&gt;&amp;)
849 &#32;&#32;&#32;&#32;{
850 &#32;&#32;&#32;&#32;&#32;&#32;_Destroy(__first,&#32;__last);
851 &#32;&#32;&#32;&#32;}
852 
853 _GLIBCXX_END_NAMESPACE_VERSION
854 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
855 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_ALLOC_TRAITS_H</emphasis>
</programlisting></section>
