<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2locale__conv_8h_source" xml:lang="en-US">
<title>locale_conv.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/locale_conv.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;wstring_convert&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_LOCALE_CONV_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_LOCALE_CONV_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
35 <emphasis role="preprocessor">#else</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;streambuf&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/stringfwd.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/allocator.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/codecvt.h&gt;</emphasis>
41 
42 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
43 {
44 _GLIBCXX_BEGIN_NAMESPACE_VERSION
45 
51 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutStr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InChar,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Codecvt,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_State,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fn&gt;
53 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
54 &#32;&#32;&#32;&#32;__do_str_codecvt(<emphasis role="keyword">const</emphasis>&#32;_InChar*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_InChar*&#32;__last,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutStr&amp;&#32;__outstr,&#32;<emphasis role="keyword">const</emphasis>&#32;_Codecvt&amp;&#32;__cvt,&#32;_State&amp;&#32;__state,
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_Fn&#32;__fn)
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
59 &#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;__outstr.clear();
61 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;0;
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
63 &#32;&#32;&#32;&#32;}
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__outchars&#32;=&#32;0;
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__next&#32;=&#32;__first;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__maxlen&#32;=&#32;__cvt.max_length()&#32;+&#32;1;
68 
69 &#32;&#32;&#32;&#32;&#32;&#32;codecvt_base::result&#32;__result;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
71 &#32;&#32;&#32;&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;__outstr.resize(__outstr.size()&#32;+&#32;(__last&#32;-&#32;__next)&#32;*&#32;__maxlen);
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__outnext&#32;=&#32;&amp;__outstr.front()&#32;+&#32;__outchars;
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__outlast&#32;=&#32;&amp;__outstr.back()&#32;+&#32;1;
75 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;(__cvt.*__fn)(__state,&#32;__next,&#32;__last,&#32;__next,
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__outnext,&#32;__outlast,&#32;__outnext);
77 &#32;&#32;&#32;&#32;&#32;&#32;__outchars&#32;=&#32;__outnext&#32;-&#32;&amp;__outstr.front();
78 &#32;&#32;&#32;&#32;}
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__result&#32;==&#32;codecvt_base::partial&#32;&amp;&amp;&#32;__next&#32;!=&#32;__last
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>(__outstr.size()&#32;-&#32;__outchars)&#32;&lt;&#32;__maxlen);
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;==&#32;codecvt_base::error)
83 &#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;__next&#32;-&#32;__first;
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
86 &#32;&#32;&#32;&#32;}
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;codecvt&#32;facet&#32;will&#32;only&#32;return&#32;noconv&#32;when&#32;the&#32;types&#32;are</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;same,&#32;so&#32;avoid&#32;instantiating&#32;basic_string::assign&#32;otherwise</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(is_same&lt;<emphasis role="keyword">typename</emphasis>&#32;_Codecvt::intern_type,
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Codecvt::extern_type&gt;())
92 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(__result&#32;==&#32;codecvt_base::noconv)
93 &#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__outstr.assign(__first,&#32;__last);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;__last&#32;-&#32;__first;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
97 &#32;&#32;&#32;&#32;&#32;&#32;}
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;__outstr.resize(__outchars);
100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;__next&#32;-&#32;__first;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
102 &#32;&#32;&#32;&#32;}
103 
104 &#32;&#32;<emphasis role="comment">//&#32;Convert&#32;narrow&#32;character&#32;string&#32;to&#32;wide.</emphasis>
105 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
107 &#32;&#32;&#32;&#32;__str_codecvt_in(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last,
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;&amp;&#32;__cvt,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_State&amp;&#32;__state,&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Codecvt&#32;=&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;;
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ConvFn
114 &#32;&#32;&#32;&#32;=&#32;codecvt_base::result
115 &#32;&#32;&#32;&#32;&#32;&#32;(_Codecvt::*)(_State&amp;,&#32;const&#32;char*,&#32;const&#32;char*,&#32;const&#32;char*&amp;,
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*,&#32;_CharT*,&#32;_CharT*&amp;)&#32;const;
117 &#32;&#32;&#32;&#32;&#32;&#32;_ConvFn&#32;__fn&#32;=&#32;&amp;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;::in;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__do_str_codecvt(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__fn);
120 &#32;&#32;&#32;&#32;}
121 
122 &#32;&#32;<emphasis role="comment">//&#32;As&#32;above,&#32;but&#32;with&#32;no&#32;__count&#32;parameter</emphasis>
123 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
125 &#32;&#32;&#32;&#32;__str_codecvt_in(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last,
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;&amp;&#32;__cvt)
128 &#32;&#32;&#32;&#32;{
129 &#32;&#32;&#32;&#32;&#32;&#32;_State&#32;__state&#32;=&#32;{};
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n;
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str_codecvt_in(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,&#32;__n);
132 &#32;&#32;&#32;&#32;}
133 
134 &#32;&#32;<emphasis role="comment">//&#32;As&#32;above,&#32;but&#32;returns&#32;false&#32;for&#32;partial&#32;conversion</emphasis>
135 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
136 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
137 &#32;&#32;&#32;&#32;__str_codecvt_in_all(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last,
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;&amp;&#32;__cvt)
140 &#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;_State&#32;__state&#32;=&#32;{};
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str_codecvt_in(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,&#32;__n)
144 &#32;&#32;&#32;&#32;&amp;&amp;&#32;(__n&#32;==&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(__last&#32;-&#32;__first));
145 &#32;&#32;&#32;&#32;}
146 
147 &#32;&#32;<emphasis role="comment">//&#32;Convert&#32;wide&#32;character&#32;string&#32;to&#32;narrow.</emphasis>
148 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
150 &#32;&#32;&#32;&#32;__str_codecvt_out(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__last,
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;char, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;&amp;&#32;__cvt,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_State&amp;&#32;__state,&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Codecvt&#32;=&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;;
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ConvFn
157 &#32;&#32;&#32;&#32;=&#32;codecvt_base::result
158 &#32;&#32;&#32;&#32;&#32;&#32;(_Codecvt::*)(_State&amp;,&#32;const&#32;_CharT*,&#32;const&#32;_CharT*,&#32;const&#32;_CharT*&amp;,
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char*,&#32;char*,&#32;char*&amp;)&#32;const;
160 &#32;&#32;&#32;&#32;&#32;&#32;_ConvFn&#32;__fn&#32;=&#32;&amp;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;::out;
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__do_str_codecvt(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__fn);
163 &#32;&#32;&#32;&#32;}
164 
165 &#32;&#32;<emphasis role="comment">//&#32;As&#32;above,&#32;but&#32;with&#32;no&#32;__count&#32;parameter</emphasis>
166 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
168 &#32;&#32;&#32;&#32;__str_codecvt_out(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__last,
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;char, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;&amp;&#32;__cvt)
171 &#32;&#32;&#32;&#32;{
172 &#32;&#32;&#32;&#32;&#32;&#32;_State&#32;__state&#32;=&#32;{};
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n;
174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str_codecvt_out(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,&#32;__n);
175 &#32;&#32;&#32;&#32;}
176 
177 &#32;&#32;<emphasis role="comment">//&#32;As&#32;above,&#32;but&#32;returns&#32;false&#32;for&#32;partial&#32;conversions</emphasis>
178 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
179 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
180 &#32;&#32;&#32;&#32;__str_codecvt_out_all(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__last,
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;char, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char,&#32;_State&gt;&amp;&#32;__cvt)
183 &#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;_State&#32;__state&#32;=&#32;{};
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n;
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str_codecvt_out(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,&#32;__n)
187 &#32;&#32;&#32;&#32;&amp;&amp;&#32;(__n&#32;==&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>(__last&#32;-&#32;__first));
188 &#32;&#32;&#32;&#32;}
189 
190 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
191 
192 &#32;&#32;<emphasis role="comment">//&#32;Convert&#32;wide&#32;character&#32;string&#32;to&#32;narrow.</emphasis>
193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
195 &#32;&#32;&#32;&#32;__str_codecvt_out(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__last,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;char8_t, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char8_t,&#32;_State&gt;&amp;&#32;__cvt,
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_State&amp;&#32;__state,&#32;<emphasis role="keywordtype">size_t</emphasis>&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
199 &#32;&#32;&#32;&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Codecvt&#32;=&#32;codecvt&lt;_CharT,&#32;char8_t,&#32;_State&gt;;
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ConvFn
202 &#32;&#32;&#32;&#32;=&#32;codecvt_base::result
203 &#32;&#32;&#32;&#32;&#32;&#32;(_Codecvt::*)(_State&amp;,&#32;const&#32;_CharT*,&#32;const&#32;_CharT*,&#32;const&#32;_CharT*&amp;,
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char8_t*,&#32;char8_t*,&#32;char8_t*&amp;)&#32;const;
205 &#32;&#32;&#32;&#32;&#32;&#32;_ConvFn&#32;__fn&#32;=&#32;&amp;codecvt&lt;_CharT,&#32;char8_t,&#32;_State&gt;::out;
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__do_str_codecvt(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__fn);
208 &#32;&#32;&#32;&#32;}
209 
210 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_State&gt;
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
212 &#32;&#32;&#32;&#32;__str_codecvt_out(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__last,
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;char8_t, _Traits, _Alloc&gt;</link>&amp;&#32;__outstr,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;codecvt&lt;_CharT,&#32;char8_t,&#32;_State&gt;&amp;&#32;__cvt)
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;_State&#32;__state&#32;=&#32;{};
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n;
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str_codecvt_out(__first,&#32;__last,&#32;__outstr,&#32;__cvt,&#32;__state,&#32;__n);
219 &#32;&#32;&#32;&#32;}
220 
221 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
222 
223 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
224 &#32;&#32;{
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Scoped_ptr
227 &#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__nonnull__(2)))
229 &#32;&#32;&#32;&#32;explicit
230 &#32;&#32;&#32;&#32;_Scoped_ptr(_Tp*&#32;__ptr)&#32;noexcept
231 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__ptr)
232 &#32;&#32;&#32;&#32;{&#32;}
233 
234 &#32;&#32;&#32;&#32;_Scoped_ptr(_Tp*&#32;__ptr,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__msg)
235 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__ptr)
236 &#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ptr)
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_logic_error(__msg);
239 &#32;&#32;&#32;&#32;}
240 
241 &#32;&#32;&#32;&#32;~_Scoped_ptr()&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;_M_ptr;&#32;}
242 
243 &#32;&#32;&#32;&#32;_Scoped_ptr(<emphasis role="keyword">const</emphasis>&#32;_Scoped_ptr&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
244 &#32;&#32;&#32;&#32;_Scoped_ptr&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Scoped_ptr&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
245 
246 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__returns_nonnull__))
247 &#32;&#32;&#32;&#32;_Tp*&#32;operator-&gt;()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;&#32;}
248 
249 &#32;&#32;&#32;&#32;_Tp&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_ptr;&#32;}
250 
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
252 &#32;&#32;&#32;&#32;_Tp*&#32;_M_ptr;
253 &#32;&#32;&#32;&#32;&#32;&#32;};
254 &#32;&#32;}
255 
256 _GLIBCXX_BEGIN_NAMESPACE_CXX11
257 
259 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Codecvt,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Elem&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>,
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Wide_alloc&#32;=&#32;allocator&lt;_Elem&gt;,
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Byte_alloc&#32;=&#32;allocator&lt;char&gt;&gt;
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>wstring_convert
263 &#32;&#32;&#32;&#32;{
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char, char_traits&lt;char&gt;</link>,&#32;_Byte_alloc&gt;&#32;&#32;&#32;byte_string;
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Elem, char_traits&lt;_Elem&gt;</link>,&#32;_Wide_alloc&gt;&#32;wide_string;
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Codecvt::state_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type;
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;wide_string::traits_type::int_type&#32;&#32;&#32;&#32;&#32;&#32;int_type;
269 
271 &#32;&#32;&#32;&#32;&#32;&#32;wstring_convert()&#32;:&#32;_M_cvt(new&#32;_Codecvt())&#32;{&#32;}
272 
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
280 &#32;&#32;&#32;&#32;&#32;&#32;wstring_convert(_Codecvt*&#32;__pcvt)&#32;:&#32;_M_cvt(__pcvt,&#32;<emphasis role="stringliteral">&quot;wstring_convert&quot;</emphasis>)
281 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
282 
291 &#32;&#32;&#32;&#32;&#32;&#32;wstring_convert(_Codecvt*&#32;__pcvt,&#32;state_type&#32;__state)
292 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cvt(__pcvt,&#32;<emphasis role="stringliteral">&quot;wstring_convert&quot;</emphasis>),
293 &#32;&#32;&#32;&#32;_M_state(__state),&#32;_M_with_cvtstate(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
294 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
295 
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;wstring_convert(<emphasis role="keyword">const</emphasis>&#32;byte_string&amp;&#32;__byte_err,
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;wide_string&amp;&#32;__wide_err&#32;=&#32;wide_string())
304 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_cvt(new&#32;_Codecvt),
305 &#32;&#32;&#32;&#32;_M_byte_err_string(__byte_err),&#32;_M_wide_err_string(__wide_err),
306 &#32;&#32;&#32;&#32;_M_with_strings(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
307 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
308 
309 &#32;&#32;&#32;&#32;&#32;&#32;~wstring_convert()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
310 
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2176.&#32;Special&#32;members&#32;for&#32;wstring_convert&#32;and&#32;wbuffer_convert</emphasis>
313 &#32;&#32;&#32;&#32;&#32;&#32;wstring_convert(<emphasis role="keyword">const</emphasis>&#32;wstring_convert&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
314 &#32;&#32;&#32;&#32;&#32;&#32;wstring_convert&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;wstring_convert&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
315 
317 &#32;&#32;&#32;&#32;&#32;&#32;wide_string
318 &#32;&#32;&#32;&#32;&#32;&#32;from_bytes(<emphasis role="keywordtype">char</emphasis>&#32;__byte)
319 &#32;&#32;&#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__bytes[2]&#32;=&#32;{&#32;__byte&#32;};
321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;from_bytes(__bytes,&#32;__bytes+1);
322 &#32;&#32;&#32;&#32;&#32;&#32;}
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;wide_string
325 &#32;&#32;&#32;&#32;&#32;&#32;from_bytes(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__ptr)
326 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;from_bytes(__ptr,&#32;__ptr+char_traits&lt;char&gt;::length(__ptr));&#32;}
327 
328 &#32;&#32;&#32;&#32;&#32;&#32;wide_string
329 &#32;&#32;&#32;&#32;&#32;&#32;from_bytes(<emphasis role="keyword">const</emphasis>&#32;byte_string&amp;&#32;__str)
330 &#32;&#32;&#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;__str.data();
332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;from_bytes(__ptr,&#32;__ptr&#32;+&#32;__str.size());
333 &#32;&#32;&#32;&#32;&#32;&#32;}
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;wide_string
336 &#32;&#32;&#32;&#32;&#32;&#32;from_bytes(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__last)
337 &#32;&#32;&#32;&#32;&#32;&#32;{
338 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_with_cvtstate)
339 &#32;&#32;&#32;&#32;&#32;&#32;_M_state&#32;=&#32;state_type();
340 &#32;&#32;&#32;&#32;wide_string&#32;__out{&#32;_M_wide_err_string.get_allocator()&#32;};
341 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_in(__first,&#32;__last,&#32;__out,&#32;*_M_cvt,&#32;_M_state,
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_count))
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out;
344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_with_strings)
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_wide_err_string;
346 &#32;&#32;&#32;&#32;__throw_range_error(<emphasis role="stringliteral">&quot;wstring_convert::from_bytes&quot;</emphasis>);
347 &#32;&#32;&#32;&#32;&#32;&#32;}
349 
351 &#32;&#32;&#32;&#32;&#32;&#32;byte_string
352 &#32;&#32;&#32;&#32;&#32;&#32;to_bytes(_Elem&#32;__wchar)
353 &#32;&#32;&#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;_Elem&#32;__wchars[2]&#32;=&#32;{&#32;__wchar&#32;};
355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;to_bytes(__wchars,&#32;__wchars+1);
356 &#32;&#32;&#32;&#32;&#32;&#32;}
357 
358 &#32;&#32;&#32;&#32;&#32;&#32;byte_string
359 &#32;&#32;&#32;&#32;&#32;&#32;to_bytes(<emphasis role="keyword">const</emphasis>&#32;_Elem*&#32;__ptr)
360 &#32;&#32;&#32;&#32;&#32;&#32;{
361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;to_bytes(__ptr,&#32;__ptr+wide_string::traits_type::length(__ptr));
362 &#32;&#32;&#32;&#32;&#32;&#32;}
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;byte_string
365 &#32;&#32;&#32;&#32;&#32;&#32;to_bytes(<emphasis role="keyword">const</emphasis>&#32;wide_string&amp;&#32;__wstr)
366 &#32;&#32;&#32;&#32;&#32;&#32;{
367 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;__wstr.data();
368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;to_bytes(__ptr,&#32;__ptr&#32;+&#32;__wstr.size());
369 &#32;&#32;&#32;&#32;&#32;&#32;}
370 
371 &#32;&#32;&#32;&#32;&#32;&#32;byte_string
372 &#32;&#32;&#32;&#32;&#32;&#32;to_bytes(<emphasis role="keyword">const</emphasis>&#32;_Elem*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_Elem*&#32;__last)
373 &#32;&#32;&#32;&#32;&#32;&#32;{
374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_with_cvtstate)
375 &#32;&#32;&#32;&#32;&#32;&#32;_M_state&#32;=&#32;state_type();
376 &#32;&#32;&#32;&#32;byte_string&#32;__out{&#32;_M_byte_err_string.get_allocator()&#32;};
377 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str_codecvt_out(__first,&#32;__last,&#32;__out,&#32;*_M_cvt,&#32;_M_state,
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_count))
379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__out;
380 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_with_strings)
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_byte_err_string;
382 &#32;&#32;&#32;&#32;__throw_range_error(<emphasis role="stringliteral">&quot;wstring_convert::to_bytes&quot;</emphasis>);
383 &#32;&#32;&#32;&#32;&#32;&#32;}
385 
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2174.&#32;wstring_convert::converted()&#32;should&#32;be&#32;noexcept</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;converted()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_count;&#32;}
390 
392 &#32;&#32;&#32;&#32;&#32;&#32;state_type&#32;state()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_state;&#32;}
393 
394 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
395 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Scoped_ptr&lt;_Codecvt&gt;&#32;&#32;&#32;_M_cvt;
396 &#32;&#32;&#32;&#32;&#32;&#32;byte_string&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_byte_err_string;
397 &#32;&#32;&#32;&#32;&#32;&#32;wide_string&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_wide_err_string;
398 &#32;&#32;&#32;&#32;&#32;&#32;state_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_state&#32;=&#32;state_type();
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_count&#32;=&#32;0;
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_with_cvtstate&#32;=&#32;<emphasis role="keyword">false</emphasis>;
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_with_strings&#32;=&#32;<emphasis role="keyword">false</emphasis>;
402 &#32;&#32;&#32;&#32;};
403 
404 _GLIBCXX_END_NAMESPACE_CXX11
405 
407 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Codecvt,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Elem&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>,
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&#32;=&#32;char_traits&lt;_Elem&gt;&gt;
409 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>wbuffer_convert&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;basic_streambuf&lt;_Elem,&#32;_Tr&gt;
410 &#32;&#32;&#32;&#32;{
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_streambuf&lt;_Elem,&#32;_Tr&gt;&#32;_Wide_streambuf;
412 
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Codecvt::state_type&#32;state_type;
415 
417 &#32;&#32;&#32;&#32;&#32;&#32;wbuffer_convert()&#32;:&#32;wbuffer_convert(nullptr)&#32;{&#32;}
418 
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
428 &#32;&#32;&#32;&#32;&#32;&#32;wbuffer_convert(streambuf*&#32;__bytebuf,&#32;_Codecvt*&#32;__pcvt&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_Codecvt,
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_type&#32;__state&#32;=&#32;state_type())
430 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_buf(__bytebuf),&#32;_M_cvt(__pcvt,&#32;<emphasis role="stringliteral">&quot;wbuffer_convert&quot;</emphasis>),
431 &#32;&#32;&#32;&#32;_M_state(__state),&#32;_M_always_noconv(_M_cvt-&gt;always_noconv())
432 &#32;&#32;&#32;&#32;&#32;&#32;{
433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_buf)
434 &#32;&#32;&#32;&#32;&#32;&#32;{
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;setp(_M_put_area,&#32;_M_put_area&#32;+&#32;_S_buffer_length);
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;setg(_M_get_area&#32;+&#32;_S_putback_length,
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_area&#32;+&#32;_S_putback_length,
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_area&#32;+&#32;_S_putback_length);
439 &#32;&#32;&#32;&#32;&#32;&#32;}
440 &#32;&#32;&#32;&#32;&#32;&#32;}
441 
442 &#32;&#32;&#32;&#32;&#32;&#32;~wbuffer_convert()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
443 
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2176.&#32;Special&#32;members&#32;for&#32;wstring_convert&#32;and&#32;wbuffer_convert</emphasis>
446 &#32;&#32;&#32;&#32;&#32;&#32;wbuffer_convert(<emphasis role="keyword">const</emphasis>&#32;wbuffer_convert&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
447 &#32;&#32;&#32;&#32;&#32;&#32;wbuffer_convert&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;wbuffer_convert&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
448 
449 &#32;&#32;&#32;&#32;&#32;&#32;streambuf*&#32;rdbuf()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_buf;&#32;}
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;streambuf*
452 &#32;&#32;&#32;&#32;&#32;&#32;rdbuf(streambuf&#32;*__bytebuf)&#32;<emphasis role="keyword">noexcept</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;{
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__prev&#32;=&#32;_M_buf;
455 &#32;&#32;&#32;&#32;_M_buf&#32;=&#32;__bytebuf;
456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__prev;
457 &#32;&#32;&#32;&#32;&#32;&#32;}
458 
460 &#32;&#32;&#32;&#32;&#32;&#32;state_type&#32;state()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_state;&#32;}
461 
462 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1addb29f0a98e73f8d23d83bb9de5bc53d">sync</link>()
465 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_buf&#32;&amp;&amp;&#32;_M_conv_put()&#32;&amp;&amp;&#32;!_M_buf-&gt;pubsync()&#32;?&#32;0&#32;:&#32;-1;&#32;}
466 
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Wide_streambuf::int_type
468 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1_1detail_1a61efe122333bc00e81c57e0927bfdfb3">overflow</link>(<emphasis role="keyword">typename</emphasis>&#32;_Wide_streambuf::int_type&#32;__out)
469 &#32;&#32;&#32;&#32;&#32;&#32;{
470 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_buf&#32;||&#32;!_M_conv_put())
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tr::eof();
472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_Tr::eq_int_type(__out,&#32;_Tr::eof()))
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;sputc(__out);
474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tr::not_eof(__out);
475 &#32;&#32;&#32;&#32;&#32;&#32;}
476 
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Wide_streambuf::int_type
478 &#32;&#32;&#32;&#32;&#32;&#32;underflow()
479 &#32;&#32;&#32;&#32;&#32;&#32;{
480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_buf)
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tr::eof();
482 
483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;gptr()&#32;&lt;&#32;this-&gt;egptr()&#32;||&#32;(_M_buf&#32;&amp;&amp;&#32;_M_conv_get()))
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tr::to_int_type(*this-&gt;gptr());
485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tr::eof();
487 &#32;&#32;&#32;&#32;&#32;&#32;}
488 
489 &#32;&#32;&#32;&#32;&#32;&#32;streamsize
490 &#32;&#32;&#32;&#32;&#32;&#32;xsputn(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Wide_streambuf::char_type*&#32;__s,&#32;streamsize&#32;__n)
491 &#32;&#32;&#32;&#32;&#32;&#32;{
492 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_buf&#32;||&#32;__n&#32;==&#32;0)
493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
494 &#32;&#32;&#32;&#32;streamsize&#32;__done&#32;=&#32;0;
495 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
496 &#32;&#32;&#32;&#32;{
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__nn&#32;=&#32;std::min&lt;streamsize&gt;(this-&gt;epptr()&#32;-&#32;this-&gt;pptr(),
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;-&#32;__done);
499 &#32;&#32;&#32;&#32;&#32;&#32;_Tr::copy(this-&gt;pptr(),&#32;__s&#32;+&#32;__done,&#32;__nn);
500 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;pbump(__nn);
501 &#32;&#32;&#32;&#32;&#32;&#32;__done&#32;+=&#32;__nn;
502 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__done&#32;&lt;&#32;__n&#32;&amp;&amp;&#32;_M_conv_put());
503 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__done;
504 &#32;&#32;&#32;&#32;&#32;&#32;}
505 
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fill&#32;the&#32;get&#32;area&#32;from&#32;converted&#32;contents&#32;of&#32;the&#32;byte&#32;stream&#32;buffer</emphasis>
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;_M_conv_get()
510 &#32;&#32;&#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;__pb1&#32;=&#32;this-&gt;gptr()&#32;-&#32;this-&gt;eback();
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;__pb2&#32;=&#32;_S_putback_length;
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;__npb&#32;=&#32;std::min(__pb1,&#32;__pb2);
514 
515 &#32;&#32;&#32;&#32;_Tr::move(_M_get_area&#32;+&#32;_S_putback_length&#32;-&#32;__npb,
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;gptr()&#32;-&#32;__npb,&#32;__npb);
517 
518 &#32;&#32;&#32;&#32;streamsize&#32;__nbytes&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_M_get_buf)&#32;-&#32;_M_unconv;
519 &#32;&#32;&#32;&#32;__nbytes&#32;=&#32;std::min(__nbytes,&#32;_M_buf-&gt;in_avail());
520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nbytes&#32;&lt;&#32;1)
521 &#32;&#32;&#32;&#32;&#32;&#32;__nbytes&#32;=&#32;1;
522 &#32;&#32;&#32;&#32;__nbytes&#32;=&#32;_M_buf-&gt;sgetn(_M_get_buf&#32;+&#32;_M_unconv,&#32;__nbytes);
523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nbytes&#32;&lt;&#32;1)
524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
525 &#32;&#32;&#32;&#32;__nbytes&#32;+=&#32;_M_unconv;
526 
527 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;_M_get_buf&#32;into&#32;_M_get_area</emphasis>
528 
529 &#32;&#32;&#32;&#32;_Elem*&#32;__outbuf&#32;=&#32;_M_get_area&#32;+&#32;_S_putback_length;
530 &#32;&#32;&#32;&#32;_Elem*&#32;__outnext&#32;=&#32;__outbuf;
531 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__bnext&#32;=&#32;_M_get_buf;
532 
533 &#32;&#32;&#32;&#32;codecvt_base::result&#32;__result;
534 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_always_noconv)
535 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;codecvt_base::noconv;
536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
537 &#32;&#32;&#32;&#32;&#32;&#32;{
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Elem*&#32;__outend&#32;=&#32;_M_get_area&#32;+&#32;_S_buffer_length;
539 
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;_M_cvt-&gt;in(_M_state,
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bnext,&#32;__bnext&#32;+&#32;__nbytes,&#32;__bnext,
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__outbuf,&#32;__outend,&#32;__outnext);
543 &#32;&#32;&#32;&#32;&#32;&#32;}
544 
545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;==&#32;codecvt_base::noconv)
546 &#32;&#32;&#32;&#32;&#32;&#32;{
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;cast&#32;is&#32;safe&#32;because&#32;noconv&#32;means&#32;_Elem&#32;is&#32;same&#32;type&#32;as&#32;char</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__get_buf&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_Elem*<emphasis role="keyword">&gt;</emphasis>(_M_get_buf);
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tr::copy(__outbuf,&#32;__get_buf,&#32;__nbytes);
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_unconv&#32;=&#32;0;
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
552 &#32;&#32;&#32;&#32;&#32;&#32;}
553 
554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((_M_unconv&#32;=&#32;_M_get_buf&#32;+&#32;__nbytes&#32;-&#32;__bnext))
555 &#32;&#32;&#32;&#32;&#32;&#32;char_traits&lt;char&gt;::move(_M_get_buf,&#32;__bnext,&#32;_M_unconv);
556 
557 &#32;&#32;&#32;&#32;this-&gt;setg(__outbuf,&#32;__outbuf,&#32;__outnext);
558 
559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;!=&#32;codecvt_base::error;
560 &#32;&#32;&#32;&#32;&#32;&#32;}
561 
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unused</emphasis>
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
564 &#32;&#32;&#32;&#32;&#32;&#32;_M_put(...)
565 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
568 &#32;&#32;&#32;&#32;&#32;&#32;_M_put(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__p,&#32;streamsize&#32;__n)
569 &#32;&#32;&#32;&#32;&#32;&#32;{
570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_buf-&gt;sputn(__p,&#32;__n)&#32;&lt;&#32;__n)
571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
573 &#32;&#32;&#32;&#32;&#32;&#32;}
574 
575 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;convert&#32;the&#32;put&#32;area&#32;and&#32;write&#32;to&#32;the&#32;byte&#32;stream&#32;buffer</emphasis>
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
577 &#32;&#32;&#32;&#32;&#32;&#32;_M_conv_put()
578 &#32;&#32;&#32;&#32;&#32;&#32;{
579 &#32;&#32;&#32;&#32;_Elem*&#32;<emphasis role="keyword">const</emphasis>&#32;__first&#32;=&#32;this-&gt;pbase();
580 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Elem*&#32;<emphasis role="keyword">const</emphasis>&#32;__last&#32;=&#32;this-&gt;pptr();
581 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;__pending&#32;=&#32;__last&#32;-&#32;__first;
582 
583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_always_noconv)
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_put(__first,&#32;__pending);
585 
586 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__outbuf[2&#32;*&#32;_S_buffer_length];
587 
588 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Elem*&#32;__next&#32;=&#32;__first;
589 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Elem*&#32;__start;
590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
591 &#32;&#32;&#32;&#32;&#32;&#32;{
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__start&#32;=&#32;__next;
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__outnext&#32;=&#32;__outbuf;
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;__outlast&#32;=&#32;__outbuf&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(__outbuf);
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;_M_cvt-&gt;out(_M_state,&#32;__next,&#32;__last,&#32;__next,
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__outnext,&#32;__outlast,&#32;__outnext);
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;==&#32;codecvt_base::error)
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;==&#32;codecvt_base::noconv)
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_put(__next,&#32;__pending);
601 
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_put(__outbuf,&#32;__outnext&#32;-&#32;__outbuf))
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
604 &#32;&#32;&#32;&#32;&#32;&#32;}
605 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__next&#32;!=&#32;__last&#32;&amp;&amp;&#32;__next&#32;!=&#32;__start);
606 
607 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__next&#32;!=&#32;__last)
608 &#32;&#32;&#32;&#32;&#32;&#32;_Tr::move(__first,&#32;__next,&#32;__last&#32;-&#32;__next);
609 
610 &#32;&#32;&#32;&#32;this-&gt;pbump(__first&#32;-&#32;__next);
611 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__next&#32;!=&#32;__first;
612 &#32;&#32;&#32;&#32;&#32;&#32;}
613 
614 &#32;&#32;&#32;&#32;&#32;&#32;streambuf*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_buf;
615 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_Scoped_ptr&lt;_Codecvt&gt;&#32;&#32;&#32;_M_cvt;
616 &#32;&#32;&#32;&#32;&#32;&#32;state_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_state;
617 
618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;&#32;&#32;_S_buffer_length&#32;=&#32;32;
619 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;&#32;&#32;_S_putback_length&#32;=&#32;3;
620 &#32;&#32;&#32;&#32;&#32;&#32;_Elem&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_put_area[_S_buffer_length];
621 &#32;&#32;&#32;&#32;&#32;&#32;_Elem&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_area[_S_buffer_length];
622 &#32;&#32;&#32;&#32;&#32;&#32;streamsize&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_unconv&#32;=&#32;0;
623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_get_buf[_S_buffer_length-_S_putback_length];
624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_always_noconv;
625 &#32;&#32;&#32;&#32;};
626 
628 
629 _GLIBCXX_END_NAMESPACE_VERSION
630 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
631 
632 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus</emphasis>
633 
634 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_LOCALE_CONV_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
