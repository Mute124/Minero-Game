<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stream__iterator_8h_source" xml:lang="en-US">
<title>stream_iterator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stream_iterator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Stream&#32;iterators</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_STREAM_ITERATOR_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_STREAM_ITERATOR_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
46 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;std::iterator.</emphasis>
47 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
48 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
49 
51 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&#32;=&#32;char,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;char_traits&lt;_CharT&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dist&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&gt;
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>istream_iterator
54 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;input_iterator_tag,&#32;_Tp,&#32;_Dist,&#32;const&#32;_Tp*,&#32;const&#32;_Tp&amp;&gt;
55 &#32;&#32;&#32;&#32;{
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
57 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&#32;istream_type;
60 
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
62 &#32;&#32;&#32;&#32;&#32;&#32;istream_type*&#32;_M_stream;
63 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_value;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;bool&#32;becomes&#32;false&#32;at&#32;end-of-stream.&#32;It&#32;should&#32;be&#32;sufficient&#32;to</emphasis>
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;_M_stream&#32;!=&#32;nullptr&#32;instead,&#32;but&#32;historically&#32;we&#32;did&#32;not&#32;set</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_stream&#32;to&#32;null&#32;when&#32;reaching&#32;the&#32;end,&#32;so&#32;we&#32;need&#32;to&#32;keep&#32;this&#32;flag.</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_ok;
68 
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
71 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR&#32;istream_iterator()
72 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible&lt;_Tp&gt;::<link linkend="_classvalue">value</link>)
73 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_stream(0),&#32;_M_value(),&#32;_M_ok(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)&#32;{}
74 
76 &#32;&#32;&#32;&#32;&#32;&#32;istream_iterator(istream_type&amp;&#32;__s)
77 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_stream(<link linkend="_namespacestd">std</link>::__addressof(__s)),&#32;_M_ok(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
78 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_read();&#32;}
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;istream_iterator(<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;&#32;__obj)
81 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(is_nothrow_copy_constructible&lt;_Tp&gt;::value)
82 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_stream(__obj._M_stream),&#32;_M_value(__obj._M_value),
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ok(__obj._M_ok)
84 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
85 
86 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
88 &#32;&#32;&#32;&#32;&#32;&#32;istream_iterator(default_sentinel_t)
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_default_constructible_v&lt;_Tp&gt;)
90 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;istream_iterator()&#32;{&#32;}
91 <emphasis role="preprocessor">#endif</emphasis>
92 
93 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
94 &#32;&#32;&#32;&#32;&#32;&#32;istream_iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
95 &#32;&#32;&#32;&#32;&#32;&#32;~istream_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
96 <emphasis role="preprocessor">#endif</emphasis>
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
100 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
101 &#32;&#32;&#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(_M_ok,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3af2bae262cc1601d7fd3c5743eded23bc">__gnu_debug::__msg_deref_istream</link>)
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>));
105 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_value;
106 &#32;&#32;&#32;&#32;&#32;&#32;}
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*
110 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;_GLIBCXX_NOEXCEPT
111 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof((<emphasis role="keyword">operator</emphasis>*()));&#32;}
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;istream_iterator&amp;
114 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
115 &#32;&#32;&#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(_M_ok,
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3acf558490fef87f03bff36c559f5c5802">__gnu_debug::__msg_inc_istream</link>)
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>));
119 &#32;&#32;&#32;&#32;_M_read();
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
121 &#32;&#32;&#32;&#32;&#32;&#32;}
122 
123 &#32;&#32;&#32;&#32;&#32;&#32;istream_iterator
124 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
125 &#32;&#32;&#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(_M_ok,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3acf558490fef87f03bff36c559f5c5802">__gnu_debug::__msg_inc_istream</link>)
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>));
129 &#32;&#32;&#32;&#32;istream_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
130 &#32;&#32;&#32;&#32;_M_read();
131 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
132 &#32;&#32;&#32;&#32;&#32;&#32;}
133 
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
136 &#32;&#32;&#32;&#32;&#32;&#32;_M_equal(<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
137 &#32;&#32;&#32;&#32;&#32;&#32;{
138 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ideally&#32;this&#32;would&#32;just&#32;return&#32;_M_stream&#32;==&#32;__x._M_stream,</emphasis>
139 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;but&#32;code&#32;compiled&#32;with&#32;old&#32;versions&#32;never&#32;sets&#32;_M_stream&#32;to&#32;null.</emphasis>
140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_ok&#32;==&#32;__x._M_ok)&#32;&amp;&amp;&#32;(!_M_ok&#32;||&#32;_M_stream&#32;==&#32;__x._M_stream);
141 &#32;&#32;&#32;&#32;&#32;&#32;}
142 
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;_M_read()
145 &#32;&#32;&#32;&#32;&#32;&#32;{
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_stream&#32;&amp;&amp;&#32;!(*_M_stream&#32;&gt;&gt;&#32;_M_value))
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_stream&#32;=&#32;0;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ok&#32;=&#32;<emphasis role="keyword">false</emphasis>;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 &#32;&#32;&#32;&#32;&#32;&#32;}
152 
155 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;&#32;__y)
158 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
159 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_equal(__y);&#32;}
160 
161 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;&#32;__y)
167 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
168 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__x._M_equal(__y);&#32;}
169 <emphasis role="preprocessor">#endif</emphasis>
170 
171 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;istream_iterator&amp;&#32;__i,&#32;default_sentinel_t)&#32;<emphasis role="keyword">noexcept</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__i._M_stream;&#32;}
176 <emphasis role="preprocessor">#endif</emphasis>
177 &#32;&#32;&#32;&#32;};
178 
190 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&#32;=&#32;char,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&#32;=&#32;char_traits&lt;_CharT&gt;&#32;&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ostream_iterator
193 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;output_iterator_tag,&#32;void,&#32;void,&#32;void,&#32;void&gt;
194 &#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
198 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
200 <emphasis role="preprocessor">#endif</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;&#32;ostream_type;
205 
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
207 &#32;&#32;&#32;&#32;&#32;&#32;ostream_type*&#32;_M_stream;
208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;_M_string;
209 
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
212 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator(ostream_type&amp;&#32;__s)&#32;_GLIBCXX_NOEXCEPT
213 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_stream(std::__addressof(__s)),&#32;_M_string(0)&#32;{}
214 
225 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator(ostream_type&amp;&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__c)&#32;_GLIBCXX_NOEXCEPT
226 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_stream(std::__addressof(__s)),&#32;_M_string(__c)&#32;&#32;{&#32;}
227 
229 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator(<emphasis role="keyword">const</emphasis>&#32;ostream_iterator&amp;&#32;__obj)&#32;_GLIBCXX_NOEXCEPT
230 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_stream(__obj._M_stream),&#32;_M_string(__obj._M_string)&#32;&#32;{&#32;}
231 
232 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
233 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;ostream_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
234 <emphasis role="preprocessor">#endif</emphasis>
235 
238 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator&amp;
239 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
240 &#32;&#32;&#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(_M_stream&#32;!=&#32;0,
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aea59c41f740471d4a9e8f68bce42e2c4">__gnu_debug::__msg_output_ostream</link>)
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>));
244 &#32;&#32;&#32;&#32;*_M_stream&#32;&lt;&lt;&#32;__value;
245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_string)
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*_M_stream&#32;&lt;&lt;&#32;_M_string;
247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
248 &#32;&#32;&#32;&#32;&#32;&#32;}
249 
250 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
251 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator&amp;
252 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;_GLIBCXX_NOEXCEPT
253 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
254 
255 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator&amp;
256 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;_GLIBCXX_NOEXCEPT
257 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;ostream_iterator&amp;
260 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
262 &#32;&#32;&#32;&#32;};
263 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
264 
266 
267 _GLIBCXX_END_NAMESPACE_VERSION
268 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
269 
270 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
