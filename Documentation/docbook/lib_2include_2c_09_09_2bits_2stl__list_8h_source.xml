<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__list_8h_source" xml:lang="en-US">
<title>stl_list.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_list.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;List&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//&#32;Copyright&#32;The&#32;GNU&#32;Toolchain&#32;Authors.</emphasis>
5 <emphasis role="comment">//</emphasis>
6 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
7 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
8 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
9 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
10 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
11 
12 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
13 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
14 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
15 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
16 
17 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
18 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
19 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
20 
21 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
22 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
23 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
24 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
25 
26 <emphasis role="comment">/*</emphasis>
27 <emphasis role="comment">&#32;*</emphasis>
28 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
29 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
30 <emphasis role="comment">&#32;*</emphasis>
31 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
32 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
33 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
34 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
35 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
36 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
37 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*</emphasis>
40 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
41 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
42 <emphasis role="comment">&#32;*</emphasis>
43 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
44 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
45 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
46 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
47 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
48 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
49 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
50 <emphasis role="comment">&#32;*/</emphasis>
51 
57 <emphasis role="preprocessor">#ifndef&#32;_STL_LIST_H</emphasis>
58 <emphasis role="preprocessor">#define&#32;_STL_LIST_H&#32;1</emphasis>
59 
60 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
62 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;bits/allocated_ptr.h&gt;</emphasis>
65 <emphasis role="preprocessor">#include&#32;&lt;ext/aligned_buffer.h&gt;</emphasis>
66 <emphasis role="preprocessor">#endif</emphasis>
67 
68 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
69 {
70 _GLIBCXX_BEGIN_NAMESPACE_VERSION
71 
72 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
73 &#32;&#32;{
74 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Supporting&#32;structures&#32;are&#32;split&#32;into&#32;common&#32;and&#32;templated</emphasis>
75 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;types;&#32;the&#32;latter&#32;publicly&#32;inherits&#32;from&#32;the&#32;former&#32;in&#32;an</emphasis>
76 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;effort&#32;to&#32;reduce&#32;code&#32;duplication.&#32;&#32;This&#32;results&#32;in&#32;some</emphasis>
77 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;needless&quot;&#32;static_cast&apos;ing&#32;later&#32;on,&#32;but&#32;it&apos;s&#32;all&#32;safe</emphasis>
78 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;downcasting.</emphasis>
79 
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_node_base
82 &#32;&#32;&#32;&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;_M_next;
84 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;_M_prev;
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;swap(_List_node_base&amp;&#32;__x,&#32;_List_node_base&amp;&#32;__y)&#32;_GLIBCXX_USE_NOEXCEPT;
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;_M_transfer(_List_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__first,
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__last)&#32;_GLIBCXX_USE_NOEXCEPT;
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
94 &#32;&#32;&#32;&#32;&#32;&#32;_M_reverse()&#32;_GLIBCXX_USE_NOEXCEPT;
95 
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
97 &#32;&#32;&#32;&#32;&#32;&#32;_M_hook(_List_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__position)&#32;_GLIBCXX_USE_NOEXCEPT;
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;_M_unhook()&#32;_GLIBCXX_USE_NOEXCEPT;
101 &#32;&#32;&#32;&#32;};
102 
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_node_header&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_List_node_base
105 &#32;&#32;&#32;&#32;{
106 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;_M_size;
108 <emphasis role="preprocessor">#endif</emphasis>
109 
110 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_header()&#32;_GLIBCXX_NOEXCEPT
111 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_init();&#32;}
112 
113 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_header(_List_node_header&amp;&amp;&#32;__x)&#32;noexcept
115 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_List_node_base{&#32;__x._M_next,&#32;__x._M_prev&#32;}
116 <emphasis role="preprocessor">#&#32;if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;,&#32;_M_size(__x._M_size)
118 <emphasis role="preprocessor">#&#32;endif</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_base()-&gt;_M_next&#32;==&#32;__x._M_base())
121 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_next&#32;=&#32;this-&gt;_M_prev&#32;=&#32;<emphasis role="keyword">this</emphasis>;
122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;{
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_next-&gt;_M_prev&#32;=&#32;this-&gt;_M_prev-&gt;_M_next&#32;=&#32;this-&gt;_M_base();
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_init();
126 &#32;&#32;&#32;&#32;&#32;&#32;}
127 &#32;&#32;&#32;&#32;&#32;&#32;}
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
130 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_nodes(_List_node_header&amp;&amp;&#32;__x)
131 &#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;_List_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__xnode&#32;=&#32;__x._M_base();
133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__xnode-&gt;_M_next&#32;==&#32;__xnode)
134 &#32;&#32;&#32;&#32;&#32;&#32;_M_init();
135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
136 &#32;&#32;&#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__node&#32;=&#32;this-&gt;_M_base();
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node-&gt;_M_next&#32;=&#32;__xnode-&gt;_M_next;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node-&gt;_M_prev&#32;=&#32;__xnode-&gt;_M_prev;
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node-&gt;_M_next-&gt;_M_prev&#32;=&#32;__node-&gt;_M_prev-&gt;_M_next&#32;=&#32;__node;
141 <emphasis role="preprocessor">#&#32;if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_size&#32;=&#32;__x._M_size;
143 <emphasis role="preprocessor">#&#32;endif</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_init();
145 &#32;&#32;&#32;&#32;&#32;&#32;}
146 &#32;&#32;&#32;&#32;&#32;&#32;}
147 <emphasis role="preprocessor">#endif</emphasis>
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;_M_init()&#32;_GLIBCXX_NOEXCEPT
151 &#32;&#32;&#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;this-&gt;_M_next&#32;=&#32;this-&gt;_M_prev&#32;=&#32;<emphasis role="keyword">this</emphasis>;
153 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
154 &#32;&#32;&#32;&#32;this-&gt;_M_size&#32;=&#32;0;
155 <emphasis role="preprocessor">#endif</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;}
157 
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
159 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;_M_base()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
160 &#32;&#32;&#32;&#32;};
161 
162 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;by&#32;list::sort&#32;to&#32;hold&#32;nodes&#32;being&#32;sorted.</emphasis>
163 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Scratch_list&#32;:&#32;_List_node_base
164 &#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;_Scratch_list()&#32;{&#32;_M_next&#32;=&#32;_M_prev&#32;=&#32;<emphasis role="keyword">this</emphasis>;&#32;}
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_next&#32;==&#32;<emphasis role="keyword">this</emphasis>;&#32;}
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;swap(_List_node_base&amp;&#32;__l)&#32;{&#32;_List_node_base::swap(*<emphasis role="keyword">this</emphasis>,&#32;__l);&#32;}
170 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cmp&gt;
172 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Ptr_cmp
173 &#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;&#32;&#32;_Cmp&#32;_M_cmp;
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;operator()(__detail::_List_node_base*&#32;__lhs,
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_List_node_base*&#32;__rhs)&#32;<emphasis role="comment">/*&#32;not&#32;const&#32;*/</emphasis>
179 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cmp(*_Iter(__lhs),&#32;*_Iter(__rhs));&#32;}
180 &#32;&#32;&#32;&#32;};
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Ptr_cmp&lt;_Iter,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
184 &#32;&#32;&#32;&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
186 &#32;&#32;&#32;&#32;&#32;&#32;operator()(__detail::_List_node_base*&#32;__lhs,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_List_node_base*&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
188 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_Iter(__lhs)&#32;&lt;&#32;*_Iter(__rhs);&#32;}
189 &#32;&#32;&#32;&#32;};
190 
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Merge&#32;nodes&#32;from&#32;__x&#32;into&#32;*this.&#32;Both&#32;lists&#32;must&#32;be&#32;sorted&#32;wrt&#32;_Cmp.</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Cmp&gt;
193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
194 &#32;&#32;&#32;&#32;merge(_List_node_base&amp;&#32;__x,&#32;_Cmp&#32;__comp)
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;__first1&#32;=&#32;_M_next;
197 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__last1&#32;=&#32;<emphasis role="keyword">this</emphasis>;
198 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;__first2&#32;=&#32;__x._M_next;
199 &#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;<emphasis role="keyword">const</emphasis>&#32;__last2&#32;=&#32;std::__addressof(__x);
200 
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2)
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first2,&#32;__first1))
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_List_node_base*&#32;__next&#32;=&#32;__first2-&gt;_M_next;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first1-&gt;_M_transfer(__first2,&#32;__next);
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first2&#32;=&#32;__next;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first1&#32;=&#32;__first1-&gt;_M_next;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;!=&#32;__last2)
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_transfer(__first2,&#32;__last2);
214 &#32;&#32;&#32;&#32;}
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Splice&#32;the&#32;node&#32;at&#32;__i&#32;into&#32;*this.</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_take_one(_List_node_base*&#32;__i)
218 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_transfer(__i,&#32;__i-&gt;_M_next);&#32;}
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Splice&#32;all&#32;nodes&#32;from&#32;*this&#32;after&#32;__i.</emphasis>
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_put_all(_List_node_base*&#32;__i)
222 &#32;&#32;&#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!empty())
224 &#32;&#32;&#32;&#32;&#32;&#32;__i-&gt;_M_transfer(_M_next,&#32;<emphasis role="keyword">this</emphasis>);
225 &#32;&#32;&#32;&#32;&#32;&#32;}
226 &#32;&#32;&#32;&#32;};
227 
228 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;detail</emphasis>
229 
230 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
231 
233 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_node&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__detail::_List_node_base
235 &#32;&#32;&#32;&#32;{
236 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____aligned__membuf">__gnu_cxx::__aligned_membuf&lt;_Tp&gt;</link>&#32;_M_storage;
238 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_storage.<link linkend="_struct____gnu__cxx_1_1____aligned__membuf_1a3434c6ec6478f76db116927a26c4fec9">_M_ptr</link>();&#32;}
239 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;<emphasis role="keyword">const</emphasis>*&#32;_M_valptr()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_storage._M_ptr();&#32;}
240 <emphasis role="preprocessor">#else</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;_M_data;
242 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(_M_data);&#32;}
243 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;<emphasis role="keyword">const</emphasis>*&#32;_M_valptr()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(_M_data);&#32;}
244 <emphasis role="preprocessor">#endif</emphasis>
245 &#32;&#32;&#32;&#32;};
246 
252 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_iterator
254 &#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Self;
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_node&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node;
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::bidirectional_iterator_tag&#32;&#32;&#32;iterator_category;
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
263 
264 &#32;&#32;&#32;&#32;&#32;&#32;_List_iterator()&#32;_GLIBCXX_NOEXCEPT
265 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node()&#32;{&#32;}
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;_List_iterator(__detail::_List_node_base*&#32;__x)&#32;_GLIBCXX_NOEXCEPT
269 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__x)&#32;{&#32;}
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;_Self
272 &#32;&#32;&#32;&#32;&#32;&#32;_M_const_cast()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
273 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
274 
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;downcast&#32;from&#32;_List_node_base&#32;to&#32;_List_node&#32;to&#32;get&#32;to&#32;value.</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
277 &#32;&#32;&#32;&#32;&#32;&#32;reference
278 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
279 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(_M_node)-&gt;_M_valptr();&#32;}
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
282 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
283 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
284 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(_M_node)-&gt;_M_valptr();&#32;}
285 
286 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
287 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;_GLIBCXX_NOEXCEPT
288 &#32;&#32;&#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
291 &#32;&#32;&#32;&#32;&#32;&#32;}
292 
293 &#32;&#32;&#32;&#32;&#32;&#32;_Self
294 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
295 &#32;&#32;&#32;&#32;&#32;&#32;{
296 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
297 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
299 &#32;&#32;&#32;&#32;&#32;&#32;}
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
302 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;_GLIBCXX_NOEXCEPT
303 &#32;&#32;&#32;&#32;&#32;&#32;{
304 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_prev;
305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
306 &#32;&#32;&#32;&#32;&#32;&#32;}
307 
308 &#32;&#32;&#32;&#32;&#32;&#32;_Self
309 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
310 &#32;&#32;&#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
312 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_prev;
313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
314 &#32;&#32;&#32;&#32;&#32;&#32;}
315 
316 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
319 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;==&#32;__y._M_node;&#32;}
320 
321 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
322 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
324 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
325 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;!=&#32;__y._M_node;&#32;}
326 <emphasis role="preprocessor">#endif</emphasis>
327 
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;only&#32;member&#32;points&#32;to&#32;the&#32;%list&#32;element.</emphasis>
329 &#32;&#32;&#32;&#32;&#32;&#32;__detail::_List_node_base*&#32;_M_node;
330 &#32;&#32;&#32;&#32;};
331 
337 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
338 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_const_iterator
339 &#32;&#32;&#32;&#32;{
340 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_const_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;_Self;
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_List_node&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;_Node;
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
343 
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::bidirectional_iterator_tag&#32;&#32;&#32;iterator_category;
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
349 
350 &#32;&#32;&#32;&#32;&#32;&#32;_List_const_iterator()&#32;_GLIBCXX_NOEXCEPT
351 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node()&#32;{&#32;}
352 
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
354 &#32;&#32;&#32;&#32;&#32;&#32;_List_const_iterator(<emphasis role="keyword">const</emphasis>&#32;__detail::_List_node_base*&#32;__x)
355 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
356 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__x)&#32;{&#32;}
357 
358 &#32;&#32;&#32;&#32;&#32;&#32;_List_const_iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
359 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__x._M_node)&#32;{&#32;}
360 
361 &#32;&#32;&#32;&#32;&#32;&#32;iterator
362 &#32;&#32;&#32;&#32;&#32;&#32;_M_const_cast()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
363 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<emphasis role="keyword">const_cast&lt;</emphasis>__detail::_List_node_base*<emphasis role="keyword">&gt;</emphasis>(_M_node));&#32;}
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;downcast&#32;from&#32;List_node_base&#32;to&#32;_List_node&#32;to&#32;get&#32;to&#32;value.</emphasis>
366 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
367 &#32;&#32;&#32;&#32;&#32;&#32;reference
368 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
369 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(_M_node)-&gt;_M_valptr();&#32;}
370 
371 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
372 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
373 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
374 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(_M_node)-&gt;_M_valptr();&#32;}
375 
376 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
377 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;_GLIBCXX_NOEXCEPT
378 &#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
380 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
381 &#32;&#32;&#32;&#32;&#32;&#32;}
382 
383 &#32;&#32;&#32;&#32;&#32;&#32;_Self
384 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
385 &#32;&#32;&#32;&#32;&#32;&#32;{
386 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
387 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
389 &#32;&#32;&#32;&#32;&#32;&#32;}
390 
391 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
392 &#32;&#32;&#32;&#32;&#32;&#32;operator--()&#32;_GLIBCXX_NOEXCEPT
393 &#32;&#32;&#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_prev;
395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
396 &#32;&#32;&#32;&#32;&#32;&#32;}
397 
398 &#32;&#32;&#32;&#32;&#32;&#32;_Self
399 &#32;&#32;&#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;_GLIBCXX_NOEXCEPT
400 &#32;&#32;&#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
402 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_prev;
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
404 &#32;&#32;&#32;&#32;&#32;&#32;}
405 
406 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
409 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;==&#32;__y._M_node;&#32;}
410 
411 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
412 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;_GLIBCXX_NOEXCEPT
415 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;!=&#32;__y._M_node;&#32;}
416 <emphasis role="preprocessor">#endif</emphasis>
417 
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;only&#32;member&#32;points&#32;to&#32;the&#32;%list&#32;element.</emphasis>
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__detail::_List_node_base*&#32;_M_node;
420 &#32;&#32;&#32;&#32;};
421 
422 _GLIBCXX_BEGIN_NAMESPACE_CXX11
424 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
425 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_List_base
426 &#32;&#32;&#32;&#32;{
427 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
429 &#32;&#32;&#32;&#32;rebind&lt;_Tp&gt;::other&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type;
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;&#32;_Tp_alloc_traits;
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp_alloc_traits::template
432 &#32;&#32;&#32;&#32;rebind&lt;_List_node&lt;_Tp&gt;&#32;&gt;::other&#32;_Node_alloc_type;
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Node_alloc_type&gt;&#32;_Node_alloc_traits;
434 
435 <emphasis role="preprocessor">#if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
437 &#32;&#32;&#32;&#32;&#32;&#32;_S_distance(<emphasis role="keyword">const</emphasis>&#32;__detail::_List_node_base*&#32;__first,
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__detail::_List_node_base*&#32;__last)
439 &#32;&#32;&#32;&#32;&#32;&#32;{
440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n&#32;=&#32;0;
441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
442 &#32;&#32;&#32;&#32;&#32;&#32;{
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__first-&gt;_M_next;
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__n;
445 &#32;&#32;&#32;&#32;&#32;&#32;}
446 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
447 &#32;&#32;&#32;&#32;&#32;&#32;}
448 <emphasis role="preprocessor">#endif</emphasis>
449 
450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_List_impl
451 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Node_alloc_type
452 &#32;&#32;&#32;&#32;&#32;&#32;{
453 &#32;&#32;&#32;&#32;__detail::_List_node_header&#32;_M_node;
454 
455 &#32;&#32;&#32;&#32;_List_impl()&#32;_GLIBCXX_NOEXCEPT_IF(
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_default_constructible&lt;_Node_alloc_type&gt;::value)
457 &#32;&#32;&#32;&#32;:&#32;_Node_alloc_type()
458 &#32;&#32;&#32;&#32;{&#32;}
459 
460 &#32;&#32;&#32;&#32;_List_impl(<emphasis role="keyword">const</emphasis>&#32;_Node_alloc_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
461 &#32;&#32;&#32;&#32;:&#32;_Node_alloc_type(__a)
462 &#32;&#32;&#32;&#32;{&#32;}
463 
464 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
465 &#32;&#32;&#32;&#32;_List_impl(_List_impl&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
466 
467 &#32;&#32;&#32;&#32;_List_impl(_Node_alloc_type&amp;&amp;&#32;__a,&#32;_List_impl&amp;&amp;&#32;__x)
468 &#32;&#32;&#32;&#32;:&#32;_Node_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),&#32;_M_node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_node))
469 &#32;&#32;&#32;&#32;{&#32;}
470 
471 &#32;&#32;&#32;&#32;_List_impl(_Node_alloc_type&amp;&amp;&#32;__a)&#32;noexcept
472 &#32;&#32;&#32;&#32;:&#32;_Node_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
473 &#32;&#32;&#32;&#32;{&#32;}
474 <emphasis role="preprocessor">#endif</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;};
476 
477 &#32;&#32;&#32;&#32;&#32;&#32;_List_impl&#32;_M_impl;
478 
479 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_get_size()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl._M_node._M_size;&#32;}
481 
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_set_size(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)&#32;{&#32;_M_impl._M_node._M_size&#32;=&#32;__n;&#32;}
483 
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_inc_size(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)&#32;{&#32;_M_impl._M_node._M_size&#32;+=&#32;__n;&#32;}
485 
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_dec_size(<emphasis role="keywordtype">size_t</emphasis>&#32;__n)&#32;{&#32;_M_impl._M_node._M_size&#32;-=&#32;__n;&#32;}
487 
488 <emphasis role="preprocessor">#&#32;if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
489 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;_M_distance(<emphasis role="keyword">const</emphasis>&#32;__detail::_List_node_base*&#32;__first,
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__detail::_List_node_base*&#32;__last)<emphasis role="keyword">&#32;const</emphasis>
492 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_distance(__first,&#32;__last);&#32;}
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;the&#32;stored&#32;size</emphasis>
495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_node_count()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_size();&#32;}
496 <emphasis role="preprocessor">#&#32;endif</emphasis>
497 <emphasis role="preprocessor">#else</emphasis>
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dummy&#32;implementations&#32;used&#32;when&#32;the&#32;size&#32;is&#32;not&#32;stored</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_get_size()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_set_size(<emphasis role="keywordtype">size_t</emphasis>)&#32;{&#32;}
501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_inc_size(<emphasis role="keywordtype">size_t</emphasis>)&#32;{&#32;}
502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_dec_size(<emphasis role="keywordtype">size_t</emphasis>)&#32;{&#32;}
503 
504 <emphasis role="preprocessor">#&#32;if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_distance(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
506 
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;count&#32;the&#32;number&#32;of&#32;nodes</emphasis>
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_node_count()<emphasis role="keyword">&#32;const</emphasis>
509 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_distance(_M_impl._M_node._M_next,
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__addressof(_M_impl._M_node));
512 &#32;&#32;&#32;&#32;&#32;&#32;}
513 <emphasis role="preprocessor">#&#32;endif</emphasis>
514 <emphasis role="preprocessor">#endif</emphasis>
515 
516 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Node_alloc_traits::pointer
517 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_node()
518 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Node_alloc_traits::allocate(_M_impl,&#32;1);&#32;}
519 
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
521 &#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(<emphasis role="keyword">typename</emphasis>&#32;_Node_alloc_traits::pointer&#32;__p)&#32;_GLIBCXX_NOEXCEPT
522 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Node_alloc_traits::deallocate(_M_impl,&#32;__p,&#32;1);&#32;}
523 
524 &#32;&#32;<emphasis role="keyword">public</emphasis>:
525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;allocator_type;
526 
527 &#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_type&amp;
528 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Node_allocator()&#32;_GLIBCXX_NOEXCEPT
529 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl;&#32;}
530 
531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node_alloc_type&amp;
532 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Node_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
533 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl;&#32;}
534 
535 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
536 &#32;&#32;&#32;&#32;&#32;&#32;_List_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
537 <emphasis role="preprocessor">#else</emphasis>
538 &#32;&#32;&#32;&#32;&#32;&#32;_List_base()&#32;{&#32;}
539 <emphasis role="preprocessor">#endif</emphasis>
540 
541 &#32;&#32;&#32;&#32;&#32;&#32;_List_base(<emphasis role="keyword">const</emphasis>&#32;_Node_alloc_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
542 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__a)
543 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
544 
545 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
546 &#32;&#32;&#32;&#32;&#32;&#32;_List_base(_List_base&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
547 
548 <emphasis role="preprocessor">#&#32;if&#32;!_GLIBCXX_INLINE_VERSION</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;_List_base(_List_base&amp;&amp;&#32;__x,&#32;_Node_alloc_type&amp;&amp;&#32;__a)
550 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
551 &#32;&#32;&#32;&#32;&#32;&#32;{
552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_get_Node_allocator()&#32;==&#32;_M_get_Node_allocator())
553 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_nodes(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
554 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;caller&#32;must&#32;move&#32;individual&#32;elements.</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;}
556 <emphasis role="preprocessor">#&#32;endif</emphasis>
557 
558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;when&#32;allocator&#32;is_always_equal.</emphasis>
559 &#32;&#32;&#32;&#32;&#32;&#32;_List_base(_Node_alloc_type&amp;&amp;&#32;__a,&#32;_List_base&amp;&amp;&#32;__x)
560 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl))
561 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
562 
563 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;when&#32;allocator&#32;!is_always_equal.</emphasis>
564 &#32;&#32;&#32;&#32;&#32;&#32;_List_base(_Node_alloc_type&amp;&amp;&#32;__a)
565 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
566 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
567 
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
569 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_nodes(_List_base&amp;&amp;&#32;__x)
570 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl._M_node._M_move_nodes(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x._M_impl._M_node));&#32;}
571 <emphasis role="preprocessor">#endif</emphasis>
572 
573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;what&#32;actually&#32;destroys&#32;the&#32;list.</emphasis>
574 &#32;&#32;&#32;&#32;&#32;&#32;~_List_base()&#32;_GLIBCXX_NOEXCEPT
575 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_clear();&#32;}
576 
577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;_M_clear()&#32;_GLIBCXX_NOEXCEPT;
579 
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
581 &#32;&#32;&#32;&#32;&#32;&#32;_M_init()&#32;_GLIBCXX_NOEXCEPT
582 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_impl._M_node._M_init();&#32;}
583 &#32;&#32;&#32;&#32;};
584 
631 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;_Tp&gt;&#32;&gt;
632 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>list&#32;:&#32;<emphasis role="keyword">protected</emphasis>&#32;_List_base&lt;_Tp,&#32;_Alloc&gt;
633 &#32;&#32;&#32;&#32;{
634 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
635 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_value_type;
637 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
638 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
639 <emphasis role="preprocessor">#&#32;endif</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Tp,&#32;_Alloc_value_type,&#32;_SameTypeConcept)
641 <emphasis role="preprocessor">#endif</emphasis>
642 
643 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;remove_cv&lt;_Tp&gt;::type,&#32;_Tp&gt;<link linkend="_classvalue">::value</link>,
645 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::list&#32;must&#32;have&#32;a&#32;non-const,&#32;non-volatile&#32;value_type&quot;</emphasis>);
646 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
647 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;_Tp&gt;::value,
648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::list&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
649 <emphasis role="preprocessor">#&#32;endif</emphasis>
650 <emphasis role="preprocessor">#endif</emphasis>
651 
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_base&lt;_Tp,&#32;_Alloc&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base;
653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Tp_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type;
654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Tp_alloc_traits&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_traits;
655 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Node_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_type;
656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Node_alloc_traits&#32;&#32;&#32;&#32;_Node_alloc_traits;
657 
658 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
659 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp_alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp_alloc_traits::const_pointer&#32;&#32;&#32;const_pointer;
662 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp_alloc_traits::reference&#32;&#32;&#32;reference;
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp_alloc_traits::const_reference&#32;const_reference;
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_const_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;&#32;const_reverse_iterator;
667 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
671 
672 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;that&#32;pointers-to-_Node&apos;s&#32;can&#32;be&#32;ctor-converted&#32;to</emphasis>
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterator&#32;types.</emphasis>
675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_List_node&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node;
676 
677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_impl;
678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_put_node;
679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_get_node;
680 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_get_Node_allocator;
681 
688 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;_Node*
690 &#32;&#32;&#32;&#32;&#32;&#32;_M_create_node(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
691 &#32;&#32;&#32;&#32;&#32;&#32;{
692 &#32;&#32;&#32;&#32;_Node*&#32;__p&#32;=&#32;this-&gt;_M_get_node();
693 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
694 &#32;&#32;&#32;&#32;&#32;&#32;{
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp_alloc_type&#32;__alloc(_M_get_Node_allocator());
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__alloc.construct(__p-&gt;_M_valptr(),&#32;__x);
697 &#32;&#32;&#32;&#32;&#32;&#32;}
698 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
699 &#32;&#32;&#32;&#32;&#32;&#32;{
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(__p);
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
702 &#32;&#32;&#32;&#32;&#32;&#32;}
703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
704 &#32;&#32;&#32;&#32;&#32;&#32;}
705 <emphasis role="preprocessor">#else</emphasis>
706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
707 &#32;&#32;&#32;&#32;_Node*
708 &#32;&#32;&#32;&#32;_M_create_node(_Args&amp;&amp;...&#32;__args)
709 &#32;&#32;&#32;&#32;{
710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__p&#32;=&#32;this-&gt;_M_get_node();
711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__alloc&#32;=&#32;_M_get_Node_allocator();
712 &#32;&#32;&#32;&#32;&#32;&#32;__allocated_ptr&lt;_Node_alloc_type&gt;&#32;__guard{__alloc,&#32;__p};
713 &#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_traits::construct(__alloc,&#32;__p-&gt;_M_valptr(),
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
715 &#32;&#32;&#32;&#32;&#32;&#32;__guard&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
717 &#32;&#32;&#32;&#32;}
718 <emphasis role="preprocessor">#endif</emphasis>
719 
720 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
722 &#32;&#32;&#32;&#32;&#32;&#32;_S_distance(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
723 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::distance(__first,&#32;__last);&#32;}
724 
725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;return&#32;the&#32;stored&#32;size</emphasis>
726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
727 &#32;&#32;&#32;&#32;&#32;&#32;_M_node_count()<emphasis role="keyword">&#32;const</emphasis>
728 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_get_size();&#32;}
729 <emphasis role="preprocessor">#else</emphasis>
730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dummy&#32;implementations&#32;used&#32;when&#32;the&#32;size&#32;is&#32;not&#32;stored</emphasis>
731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
732 &#32;&#32;&#32;&#32;&#32;&#32;_S_distance(const_iterator,&#32;const_iterator)
733 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
734 
735 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;count&#32;the&#32;number&#32;of&#32;nodes</emphasis>
736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
737 &#32;&#32;&#32;&#32;&#32;&#32;_M_node_count()<emphasis role="keyword">&#32;const</emphasis>
738 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::distance(begin(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
739 <emphasis role="preprocessor">#endif</emphasis>
740 
741 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.2.1]&#32;construct/copy/destroy</emphasis>
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(assign()&#32;and&#32;get_allocator()&#32;are&#32;also&#32;listed&#32;in&#32;this&#32;section)</emphasis>
744 
748 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
749 &#32;&#32;&#32;&#32;&#32;&#32;list()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
750 <emphasis role="preprocessor">#else</emphasis>
751 &#32;&#32;&#32;&#32;&#32;&#32;list()&#32;{&#32;}
752 <emphasis role="preprocessor">#endif</emphasis>
753 
758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
759 &#32;&#32;&#32;&#32;&#32;&#32;list(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
760 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))&#32;{&#32;}
761 
762 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
772 &#32;&#32;&#32;&#32;&#32;&#32;list(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
773 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
774 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_default_initialize(__n);&#32;}
775 
784 &#32;&#32;&#32;&#32;&#32;&#32;list(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value,
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
786 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
787 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(__n,&#32;__value);&#32;}
788 <emphasis role="preprocessor">#else</emphasis>
797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
798 &#32;&#32;&#32;&#32;&#32;&#32;list(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value&#32;=&#32;value_type(),
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
800 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
801 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(__n,&#32;__value);&#32;}
802 <emphasis role="preprocessor">#endif</emphasis>
803 
811 &#32;&#32;&#32;&#32;&#32;&#32;list(<emphasis role="keyword">const</emphasis>&#32;list&amp;&#32;__x)
812 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_traits::
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_select_on_copy(__x._M_get_Node_allocator()))
814 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_dispatch(__x.begin(),&#32;__x.end(),&#32;__false_type());&#32;}
815 
816 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
824 &#32;&#32;&#32;&#32;&#32;&#32;list(list&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
825 
834 &#32;&#32;&#32;&#32;&#32;&#32;list(initializer_list&lt;value_type&gt;&#32;__l,
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
836 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
837 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_dispatch(__l.begin(),&#32;__l.end(),&#32;__false_type());&#32;}
838 
839 &#32;&#32;&#32;&#32;&#32;&#32;list(<emphasis role="keyword">const</emphasis>&#32;list&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
840 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
841 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_initialize_dispatch(__x.begin(),&#32;__x.end(),&#32;__false_type());&#32;}
842 
843 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
844 &#32;&#32;&#32;&#32;&#32;&#32;list(list&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;true_type)&#32;noexcept
845 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x))
846 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
847 
848 &#32;&#32;&#32;&#32;&#32;&#32;list(list&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a,&#32;false_type)
849 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
850 &#32;&#32;&#32;&#32;&#32;&#32;{
851 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_get_Node_allocator()&#32;==&#32;this-&gt;_M_get_Node_allocator())
852 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_move_nodes(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
853 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
854 &#32;&#32;&#32;&#32;&#32;&#32;insert(begin(),&#32;std::__make_move_if_noexcept_iterator(__x.begin()),
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__make_move_if_noexcept_iterator(__x.end()));
856 &#32;&#32;&#32;&#32;&#32;&#32;}
857 
858 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
859 &#32;&#32;&#32;&#32;&#32;&#32;list(list&amp;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;allocator_type&gt;&amp;&#32;__a)
860 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Node_alloc_traits::_S_always_equal())
861 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;list(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__a,
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Node_alloc_traits::is_always_equal{})
863 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
864 <emphasis role="preprocessor">#endif</emphasis>
865 
876 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
879 &#32;&#32;&#32;&#32;list(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
881 &#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
882 &#32;&#32;&#32;&#32;{&#32;_M_initialize_dispatch(__first,&#32;__last,&#32;__false_type());&#32;}
883 <emphasis role="preprocessor">#else</emphasis>
884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
885 &#32;&#32;&#32;&#32;list(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
887 &#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__a))
888 &#32;&#32;&#32;&#32;{
889 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
890 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
891 &#32;&#32;&#32;&#32;&#32;&#32;_M_initialize_dispatch(__first,&#32;__last,&#32;_Integral());
892 &#32;&#32;&#32;&#32;}
893 <emphasis role="preprocessor">#endif</emphasis>
894 
895 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
903 &#32;&#32;&#32;&#32;&#32;&#32;~list()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
904 <emphasis role="preprocessor">#endif</emphasis>
905 
914 &#32;&#32;&#32;&#32;&#32;&#32;list&amp;
915 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;list&amp;&#32;__x);
916 
917 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
928 &#32;&#32;&#32;&#32;&#32;&#32;list&amp;
929 &#32;&#32;&#32;&#32;&#32;&#32;operator=(list&amp;&amp;&#32;__x)
930 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Node_alloc_traits::_S_nothrow_move())
931 &#32;&#32;&#32;&#32;&#32;&#32;{
932 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__move_storage&#32;=
933 &#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_traits::_S_propagate_on_move_assign()
934 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;_Node_alloc_traits::_S_always_equal();
935 &#32;&#32;&#32;&#32;_M_move_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__bool_constant&lt;__move_storage&gt;());
936 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
937 &#32;&#32;&#32;&#32;&#32;&#32;}
938 
946 &#32;&#32;&#32;&#32;&#32;&#32;list&amp;
947 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
948 &#32;&#32;&#32;&#32;&#32;&#32;{
949 &#32;&#32;&#32;&#32;this-&gt;assign(__l.begin(),&#32;__l.end());
950 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
951 &#32;&#32;&#32;&#32;&#32;&#32;}
952 <emphasis role="preprocessor">#endif</emphasis>
953 
964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
965 &#32;&#32;&#32;&#32;&#32;&#32;assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
966 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
967 
980 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
983 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
984 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
985 &#32;&#32;&#32;&#32;{&#32;_M_assign_dispatch(__first,&#32;__last,&#32;__false_type());&#32;}
986 <emphasis role="preprocessor">#else</emphasis>
987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
988 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
989 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
990 &#32;&#32;&#32;&#32;{
991 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;whether&#32;it&apos;s&#32;an&#32;integral&#32;type.&#32;&#32;If&#32;so,&#32;it&apos;s&#32;not&#32;an&#32;iterator.</emphasis>
992 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
993 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_dispatch(__first,&#32;__last,&#32;_Integral());
994 &#32;&#32;&#32;&#32;}
995 <emphasis role="preprocessor">#endif</emphasis>
996 
997 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1006 &#32;&#32;&#32;&#32;&#32;&#32;assign(initializer_list&lt;value_type&gt;&#32;__l)
1007 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_assign_dispatch(__l.begin(),&#32;__l.end(),&#32;__false_type());&#32;}
1008 <emphasis role="preprocessor">#endif</emphasis>
1009 
1011 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
1012 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1013 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_Base::_M_get_Node_allocator());&#32;}
1014 
1015 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators</emphasis>
1020 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1021 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1022 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;_GLIBCXX_NOEXCEPT
1023 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_impl._M_node._M_next);&#32;}
1024 
1030 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1031 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1032 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1033 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_node._M_next);&#32;}
1034 
1040 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1041 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1042 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
1043 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(&amp;this-&gt;_M_impl._M_node);&#32;}
1044 
1050 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1051 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1052 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1053 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(&amp;this-&gt;_M_impl._M_node);&#32;}
1054 
1060 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1061 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
1062 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
1063 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
1064 
1070 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1071 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1072 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1073 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
1074 
1080 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1081 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
1082 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
1083 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(begin());&#32;}
1084 
1090 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1091 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1092 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1093 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
1094 
1095 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1101 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1102 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1103 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1104 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_node._M_next);&#32;}
1105 
1111 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1112 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1113 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(&amp;this-&gt;_M_impl._M_node);&#32;}
1115 
1121 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1122 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1123 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1124 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
1125 
1131 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
1132 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1133 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1134 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(begin());&#32;}
1135 <emphasis role="preprocessor">#endif</emphasis>
1136 
1137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.2.2]&#32;capacity</emphasis>
1142 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
1143 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1144 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_node._M_next&#32;==&#32;&amp;this-&gt;_M_impl._M_node;&#32;}
1145 
1147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1148 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1149 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1150 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_node_count();&#32;}
1151 
1153 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1154 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1155 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Node_alloc_traits::max_size(_M_get_Node_allocator());&#32;}
1157 
1158 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1169 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size);
1170 
1181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1182 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1183 <emphasis role="preprocessor">#else</emphasis>
1194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1195 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__new_size,&#32;value_type&#32;__x&#32;=&#32;value_type());
1196 <emphasis role="preprocessor">#endif</emphasis>
1197 
1198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;element&#32;access</emphasis>
1203 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1204 &#32;&#32;&#32;&#32;&#32;&#32;reference
1205 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;_GLIBCXX_NOEXCEPT
1206 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();&#32;}
1207 
1212 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1213 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1214 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1215 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*begin();&#32;}
1216 
1221 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1222 &#32;&#32;&#32;&#32;&#32;&#32;reference
1223 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;_GLIBCXX_NOEXCEPT
1224 &#32;&#32;&#32;&#32;&#32;&#32;{
1225 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1226 &#32;&#32;&#32;&#32;--<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1228 &#32;&#32;&#32;&#32;&#32;&#32;}
1229 
1234 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
1235 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1236 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1237 &#32;&#32;&#32;&#32;&#32;&#32;{
1238 &#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1239 &#32;&#32;&#32;&#32;--<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1241 &#32;&#32;&#32;&#32;&#32;&#32;}
1242 
1243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.2.3]&#32;modifiers</emphasis>
1254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1255 &#32;&#32;&#32;&#32;&#32;&#32;push_front(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1256 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_insert(begin(),&#32;__x);&#32;}
1257 
1258 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1260 &#32;&#32;&#32;&#32;&#32;&#32;push_front(value_type&amp;&amp;&#32;__x)
1261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_insert(begin(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1262 
1263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1264 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1265 &#32;&#32;&#32;&#32;reference
1266 <emphasis role="preprocessor">#else</emphasis>
1267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1268 <emphasis role="preprocessor">#endif</emphasis>
1269 &#32;&#32;&#32;&#32;emplace_front(_Args&amp;&amp;...&#32;__args)
1270 &#32;&#32;&#32;&#32;{
1271 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_insert(begin(),&#32;std::forward&lt;_Args&gt;(__args)...);
1272 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;front();
1274 <emphasis role="preprocessor">#endif</emphasis>
1275 &#32;&#32;&#32;&#32;}
1276 <emphasis role="preprocessor">#endif</emphasis>
1277 
1290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1291 &#32;&#32;&#32;&#32;&#32;&#32;pop_front()&#32;_GLIBCXX_NOEXCEPT
1292 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_erase(begin());&#32;}
1293 
1304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1305 &#32;&#32;&#32;&#32;&#32;&#32;push_back(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1306 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__x);&#32;}
1307 
1308 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1310 &#32;&#32;&#32;&#32;&#32;&#32;push_back(value_type&amp;&amp;&#32;__x)
1311 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1312 
1313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1314 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1315 &#32;&#32;&#32;&#32;reference
1316 <emphasis role="preprocessor">#else</emphasis>
1317 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1318 <emphasis role="preprocessor">#endif</emphasis>
1319 &#32;&#32;&#32;&#32;emplace_back(_Args&amp;&amp;...&#32;__args)
1320 &#32;&#32;&#32;&#32;{
1321 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_insert(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;std::forward&lt;_Args&gt;(__args)...);
1322 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;back();
1324 <emphasis role="preprocessor">#endif</emphasis>
1325 &#32;&#32;&#32;&#32;}
1326 <emphasis role="preprocessor">#endif</emphasis>
1327 
1339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1340 &#32;&#32;&#32;&#32;&#32;&#32;pop_back()&#32;_GLIBCXX_NOEXCEPT
1341 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_erase(iterator(this-&gt;_M_impl._M_node._M_prev));&#32;}
1342 
1343 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1357 &#32;&#32;&#32;&#32;iterator
1358 &#32;&#32;&#32;&#32;emplace(const_iterator&#32;__position,&#32;_Args&amp;&amp;...&#32;__args);
1359 
1371 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1372 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1373 <emphasis role="preprocessor">#else</emphasis>
1385 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1386 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1387 <emphasis role="preprocessor">#endif</emphasis>
1388 
1389 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1401 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1402 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;value_type&amp;&amp;&#32;__x)
1403 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;emplace(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1404 
1420 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1421 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__p,&#32;initializer_list&lt;value_type&gt;&#32;__l)
1422 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__p,&#32;__l.begin(),&#32;__l.end());&#32;}
1423 <emphasis role="preprocessor">#endif</emphasis>
1424 
1425 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1440 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1441 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x);
1442 <emphasis role="preprocessor">#else</emphasis>
1455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1456 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1457 &#32;&#32;&#32;&#32;&#32;&#32;{
1458 &#32;&#32;&#32;&#32;list&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(__n,&#32;__x,&#32;get_allocator());
1459 &#32;&#32;&#32;&#32;splice(__position,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
1460 &#32;&#32;&#32;&#32;&#32;&#32;}
1461 <emphasis role="preprocessor">#endif</emphasis>
1462 
1463 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1479 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1481 &#32;&#32;&#32;&#32;iterator
1482 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__position,&#32;_InputIterator&#32;__first,
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last);
1484 <emphasis role="preprocessor">#else</emphasis>
1498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1499 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1500 &#32;&#32;&#32;&#32;insert(iterator&#32;__position,&#32;_InputIterator&#32;__first,
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__last)
1502 &#32;&#32;&#32;&#32;{
1503 &#32;&#32;&#32;&#32;&#32;&#32;list&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(__first,&#32;__last,&#32;get_allocator());
1504 &#32;&#32;&#32;&#32;&#32;&#32;splice(__position,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
1505 &#32;&#32;&#32;&#32;}
1506 <emphasis role="preprocessor">#endif</emphasis>
1507 
1523 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1524 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1525 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)&#32;<emphasis role="keyword">noexcept</emphasis>;
1526 <emphasis role="preprocessor">#else</emphasis>
1527 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position);
1528 <emphasis role="preprocessor">#endif</emphasis>
1529 
1548 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1549 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1550 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)&#32;<emphasis role="keyword">noexcept</emphasis>
1551 <emphasis role="preprocessor">#else</emphasis>
1552 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__first,&#32;iterator&#32;__last)
1553 <emphasis role="preprocessor">#endif</emphasis>
1554 &#32;&#32;&#32;&#32;&#32;&#32;{
1555 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
1556 &#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;erase(__first);
1557 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last._M_const_cast();
1558 &#32;&#32;&#32;&#32;&#32;&#32;}
1559 
1571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1572 &#32;&#32;&#32;&#32;&#32;&#32;swap(list&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
1573 &#32;&#32;&#32;&#32;&#32;&#32;{
1574 &#32;&#32;&#32;&#32;__detail::_List_node_base::swap(this-&gt;_M_impl._M_node,
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_impl._M_node);
1576 
1577 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__xsize&#32;=&#32;__x._M_get_size();
1578 &#32;&#32;&#32;&#32;__x._M_set_size(this-&gt;_M_get_size());
1579 &#32;&#32;&#32;&#32;this-&gt;_M_set_size(__xsize);
1580 
1581 &#32;&#32;&#32;&#32;_Node_alloc_traits::_S_on_swap(this-&gt;_M_get_Node_allocator(),
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Node_allocator());
1583 &#32;&#32;&#32;&#32;&#32;&#32;}
1584 
1591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1592 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1593 &#32;&#32;&#32;&#32;&#32;&#32;{
1594 &#32;&#32;&#32;&#32;_Base::_M_clear();
1595 &#32;&#32;&#32;&#32;_Base::_M_init();
1596 &#32;&#32;&#32;&#32;&#32;&#32;}
1597 
1598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[23.2.2.4]&#32;list&#32;operations</emphasis>
1610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1611 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1612 &#32;&#32;&#32;&#32;&#32;&#32;splice(const_iterator&#32;__position,&#32;list&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1613 <emphasis role="preprocessor">#else</emphasis>
1614 &#32;&#32;&#32;&#32;&#32;&#32;splice(iterator&#32;__position,&#32;list&amp;&#32;__x)
1615 <emphasis role="preprocessor">#endif</emphasis>
1616 &#32;&#32;&#32;&#32;&#32;&#32;{
1617 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__x.empty())
1618 &#32;&#32;&#32;&#32;&#32;&#32;{
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check_equal_allocators(__x);
1620 
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_transfer(__position._M_const_cast(),
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.begin(),&#32;__x.end());
1623 
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_inc_size(__x._M_get_size());
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_set_size(0);
1626 &#32;&#32;&#32;&#32;&#32;&#32;}
1627 &#32;&#32;&#32;&#32;&#32;&#32;}
1628 
1629 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1631 &#32;&#32;&#32;&#32;&#32;&#32;splice(const_iterator&#32;__position,&#32;list&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1632 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;splice(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1633 <emphasis role="preprocessor">#endif</emphasis>
1634 
1635 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1647 &#32;&#32;&#32;&#32;&#32;&#32;splice(const_iterator&#32;__position,&#32;list&amp;&amp;&#32;__x,&#32;const_iterator&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1648 <emphasis role="preprocessor">#else</emphasis>
1658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1659 &#32;&#32;&#32;&#32;&#32;&#32;splice(iterator&#32;__position,&#32;list&amp;&#32;__x,&#32;iterator&#32;__i)
1660 <emphasis role="preprocessor">#endif</emphasis>
1661 &#32;&#32;&#32;&#32;&#32;&#32;{
1662 &#32;&#32;&#32;&#32;iterator&#32;__j&#32;=&#32;__i._M_const_cast();
1663 &#32;&#32;&#32;&#32;++__j;
1664 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__position&#32;==&#32;__i&#32;||&#32;__position&#32;==&#32;__j)
1665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1666 
1667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;std::__addressof(__x))
1668 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_equal_allocators(__x);
1669 
1670 &#32;&#32;&#32;&#32;this-&gt;_M_transfer(__position._M_const_cast(),
1671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i._M_const_cast(),&#32;__j);
1672 
1673 &#32;&#32;&#32;&#32;this-&gt;_M_inc_size(1);
1674 &#32;&#32;&#32;&#32;__x._M_dec_size(1);
1675 &#32;&#32;&#32;&#32;&#32;&#32;}
1676 
1677 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1689 &#32;&#32;&#32;&#32;&#32;&#32;splice(const_iterator&#32;__position,&#32;list&amp;&#32;__x,&#32;const_iterator&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1690 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;splice(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__i);&#32;}
1691 <emphasis role="preprocessor">#endif</emphasis>
1692 
1693 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1708 &#32;&#32;&#32;&#32;&#32;&#32;splice(const_iterator&#32;__position,&#32;list&amp;&amp;&#32;__x,&#32;const_iterator&#32;__first,
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__last)&#32;<emphasis role="keyword">noexcept</emphasis>
1710 <emphasis role="preprocessor">#else</emphasis>
1723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1724 &#32;&#32;&#32;&#32;&#32;&#32;splice(iterator&#32;__position,&#32;list&amp;&#32;__x,&#32;iterator&#32;__first,
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__last)
1726 <emphasis role="preprocessor">#endif</emphasis>
1727 &#32;&#32;&#32;&#32;&#32;&#32;{
1728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;!=&#32;__last)
1729 &#32;&#32;&#32;&#32;&#32;&#32;{
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;std::__addressof(__x))
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check_equal_allocators(__x);
1732 
1733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n&#32;=&#32;_S_distance(__first,&#32;__last);
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_inc_size(__n);
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_dec_size(__n);
1736 
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_transfer(__position._M_const_cast(),
1738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first._M_const_cast(),
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last._M_const_cast());
1740 &#32;&#32;&#32;&#32;&#32;&#32;}
1741 &#32;&#32;&#32;&#32;&#32;&#32;}
1742 
1743 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1758 &#32;&#32;&#32;&#32;&#32;&#32;splice(const_iterator&#32;__position,&#32;list&amp;&#32;__x,&#32;const_iterator&#32;__first,
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__last)&#32;<emphasis role="keyword">noexcept</emphasis>
1760 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;splice(__position,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__first,&#32;__last);&#32;}
1761 <emphasis role="preprocessor">#endif</emphasis>
1762 
1763 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1764 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1765 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_list_remove_return_type&#32;201806L</emphasis>
1766 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;size_type&#32;__remove_return_type;
1767 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG&#32;\</emphasis>
1768 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((__abi_tag__(&quot;__cxx20&quot;)))</emphasis>
1769 <emphasis role="preprocessor">#else</emphasis>
1770 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;__remove_return_type;
1771 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG</emphasis>
1772 <emphasis role="preprocessor">#endif</emphasis>
1773 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1774 
1786 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__list_8h_1a0a6e3cfff4c3dc6aeaeaf4edd2e19b69">_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG</link>
1787 &#32;&#32;&#32;&#32;&#32;&#32;__remove_return_type
1788 &#32;&#32;&#32;&#32;&#32;&#32;remove(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value);
1789 
1801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1802 &#32;&#32;&#32;&#32;__remove_return_type
1803 &#32;&#32;&#32;&#32;remove_if(_Predicate);
1804 
1815 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2stl__list_8h_1a0a6e3cfff4c3dc6aeaeaf4edd2e19b69">_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG</link>
1816 &#32;&#32;&#32;&#32;&#32;&#32;__remove_return_type
1817 &#32;&#32;&#32;&#32;&#32;&#32;unique();
1818 
1831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1832 &#32;&#32;&#32;&#32;__remove_return_type
1833 &#32;&#32;&#32;&#32;unique(_BinaryPredicate);
1834 
1835 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_LIST_REMOVE_RETURN_TYPE_TAG</emphasis>
1836 
1846 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1848 &#32;&#32;&#32;&#32;&#32;&#32;merge(list&amp;&amp;&#32;__x);
1849 
1850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1851 &#32;&#32;&#32;&#32;&#32;&#32;merge(list&amp;&#32;__x)
1852 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;merge(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1853 <emphasis role="preprocessor">#else</emphasis>
1854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1855 &#32;&#32;&#32;&#32;&#32;&#32;merge(list&amp;&#32;__x);
1856 <emphasis role="preprocessor">#endif</emphasis>
1857 
1871 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_StrictWeakOrdering&gt;
1873 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1874 &#32;&#32;&#32;&#32;merge(list&amp;&amp;&#32;__x,&#32;_StrictWeakOrdering&#32;__comp);
1875 
1876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_StrictWeakOrdering&gt;
1877 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1878 &#32;&#32;&#32;&#32;merge(list&amp;&#32;__x,&#32;_StrictWeakOrdering&#32;__comp)
1879 &#32;&#32;&#32;&#32;{&#32;merge(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;__comp);&#32;}
1880 <emphasis role="preprocessor">#else</emphasis>
1881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_StrictWeakOrdering&gt;
1882 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1883 &#32;&#32;&#32;&#32;merge(list&amp;&#32;__x,&#32;_StrictWeakOrdering&#32;__comp);
1884 <emphasis role="preprocessor">#endif</emphasis>
1885 
1891 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1892 &#32;&#32;&#32;&#32;&#32;&#32;reverse()&#32;_GLIBCXX_NOEXCEPT
1893 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_impl._M_node._M_reverse();&#32;}
1894 
1901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1902 &#32;&#32;&#32;&#32;&#32;&#32;sort();
1903 
1910 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_StrictWeakOrdering&gt;
1911 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1912 &#32;&#32;&#32;&#32;sort(_StrictWeakOrdering);
1913 
1914 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1915 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;constructor&#32;functions&#32;follow.</emphasis>
1916 
1917 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;constructor&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1918 
1919 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1922 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1923 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_Integer&#32;__n,&#32;_Integer&#32;__x,&#32;__true_type)
1924 &#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__n),&#32;__x);&#32;}
1925 
1926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;constructor&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1928 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1929 &#32;&#32;&#32;&#32;_M_initialize_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type)
1931 &#32;&#32;&#32;&#32;{
1932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first)
1933 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&gt;=&#32;201103L
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;emplace_back(*__first);
1935 <emphasis role="preprocessor">#else</emphasis>
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;push_back(*__first);
1937 <emphasis role="preprocessor">#endif</emphasis>
1938 &#32;&#32;&#32;&#32;}
1939 
1940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;list(n,v,a),&#32;and&#32;the&#32;range&#32;constructor&#32;when&#32;it&#32;turns&#32;out</emphasis>
1941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;be&#32;the&#32;same&#32;thing.</emphasis>
1942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1943 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_initialize(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1944 &#32;&#32;&#32;&#32;&#32;&#32;{
1945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n;&#32;--__n)
1946 &#32;&#32;&#32;&#32;&#32;&#32;push_back(__x);
1947 &#32;&#32;&#32;&#32;&#32;&#32;}
1948 
1949 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;list(n).</emphasis>
1951 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1952 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_initialize(size_type&#32;__n)
1953 &#32;&#32;&#32;&#32;&#32;&#32;{
1954 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n;&#32;--__n)
1955 &#32;&#32;&#32;&#32;&#32;&#32;emplace_back();
1956 &#32;&#32;&#32;&#32;&#32;&#32;}
1957 
1958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;resize(sz).</emphasis>
1959 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1960 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_append(size_type&#32;__n);
1961 <emphasis role="preprocessor">#endif</emphasis>
1962 
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Internal&#32;assign&#32;functions&#32;follow.</emphasis>
1964 
1965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;assign&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1966 
1967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
1969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
1970 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1971 &#32;&#32;&#32;&#32;_M_assign_dispatch(_Integer&#32;__n,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__true_type)
1972 &#32;&#32;&#32;&#32;{&#32;_M_fill_assign(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
1973 
1974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;assign&#32;to&#32;implement&#32;[23.1.1]/9</emphasis>
1975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1976 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1977 &#32;&#32;&#32;&#32;_M_assign_dispatch(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type);
1979 
1980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;assign(n,t),&#32;and&#32;the&#32;range&#32;assign&#32;when&#32;it&#32;turns&#32;out</emphasis>
1981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;be&#32;the&#32;same&#32;thing.</emphasis>
1982 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1983 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1984 
1985 
1986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Moves&#32;the&#32;elements&#32;from&#32;[first,last)&#32;before&#32;position.</emphasis>
1987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1988 &#32;&#32;&#32;&#32;&#32;&#32;_M_transfer(iterator&#32;__position,&#32;iterator&#32;__first,&#32;iterator&#32;__last)
1989 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__position._M_node-&gt;_M_transfer(__first._M_node,&#32;__last._M_node);&#32;}
1990 
1991 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Inserts&#32;new&#32;element&#32;at&#32;position&#32;given&#32;and&#32;with&#32;value&#32;given.</emphasis>
1992 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
1993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1994 &#32;&#32;&#32;&#32;&#32;&#32;_M_insert(iterator&#32;__position,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1995 &#32;&#32;&#32;&#32;&#32;&#32;{
1996 &#32;&#32;&#32;&#32;_Node*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_create_node(__x);
1997 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_hook(__position._M_node);
1998 &#32;&#32;&#32;&#32;this-&gt;_M_inc_size(1);
1999 &#32;&#32;&#32;&#32;&#32;&#32;}
2000 <emphasis role="preprocessor">#else</emphasis>
2001 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_insert(iterator&#32;__position,&#32;_Args&amp;&amp;...&#32;__args)
2004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2005 &#32;&#32;&#32;&#32;&#32;_Node*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;_M_create_node(std::forward&lt;_Args&gt;(__args)...);
2006 &#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_hook(__position._M_node);
2007 &#32;&#32;&#32;&#32;&#32;this-&gt;_M_inc_size(1);
2008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2009 <emphasis role="preprocessor">#endif</emphasis>
2010 
2011 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Erases&#32;element&#32;at&#32;position&#32;given.</emphasis>
2012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2013 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(iterator&#32;__position)&#32;_GLIBCXX_NOEXCEPT
2014 &#32;&#32;&#32;&#32;&#32;&#32;{
2015 &#32;&#32;&#32;&#32;this-&gt;_M_dec_size(1);
2016 &#32;&#32;&#32;&#32;__position._M_node-&gt;_M_unhook();
2017 &#32;&#32;&#32;&#32;_Node*&#32;__n&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(__position._M_node);
2018 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2019 &#32;&#32;&#32;&#32;_Node_alloc_traits::destroy(_M_get_Node_allocator(),&#32;__n-&gt;_M_valptr());
2020 <emphasis role="preprocessor">#else</emphasis>
2021 &#32;&#32;&#32;&#32;_Tp_alloc_type(_M_get_Node_allocator()).destroy(__n-&gt;_M_valptr());
2022 <emphasis role="preprocessor">#endif</emphasis>
2023 
2024 &#32;&#32;&#32;&#32;_M_put_node(__n);
2025 &#32;&#32;&#32;&#32;&#32;&#32;}
2026 
2027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;implement&#32;the&#32;splice&#32;(and&#32;merge)&#32;bits&#32;of&#32;N1599.</emphasis>
2028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2029 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_equal_allocators(list&amp;&#32;__x)&#32;_GLIBCXX_NOEXCEPT
2030 &#32;&#32;&#32;&#32;&#32;&#32;{
2031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__alloc_neq&lt;typename&#32;_Base::_Node_alloc_type&gt;::
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_do_it(_M_get_Node_allocator(),&#32;__x._M_get_Node_allocator()))
2033 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_abort();
2034 &#32;&#32;&#32;&#32;&#32;&#32;}
2035 
2036 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;to&#32;implement&#32;resize.</emphasis>
2037 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
2038 &#32;&#32;&#32;&#32;&#32;&#32;_M_resize_pos(size_type&amp;&#32;__new_size)&#32;<emphasis role="keyword">const</emphasis>;
2039 
2040 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2042 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(list&amp;&amp;&#32;__x,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2043 &#32;&#32;&#32;&#32;&#32;&#32;{
2044 &#32;&#32;&#32;&#32;this-&gt;clear();
2045 &#32;&#32;&#32;&#32;this-&gt;_M_move_nodes(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
2046 &#32;&#32;&#32;&#32;std::__alloc_on_move(this-&gt;_M_get_Node_allocator(),
2047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_get_Node_allocator());
2048 &#32;&#32;&#32;&#32;&#32;&#32;}
2049 
2050 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2051 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(list&amp;&amp;&#32;__x,&#32;false_type)
2052 &#32;&#32;&#32;&#32;&#32;&#32;{
2053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_get_Node_allocator()&#32;==&#32;this-&gt;_M_get_Node_allocator())
2054 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x),&#32;true_type{});
2055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2056 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rvalue&apos;s&#32;allocator&#32;cannot&#32;be&#32;moved,&#32;or&#32;is&#32;not&#32;equal,</emphasis>
2057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;need&#32;to&#32;individually&#32;move&#32;each&#32;element.</emphasis>
2058 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_dispatch(std::make_move_iterator(__x.begin()),
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(__x.end()),
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type{});
2061 &#32;&#32;&#32;&#32;&#32;&#32;}
2062 <emphasis role="preprocessor">#endif</emphasis>
2063 
2064 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
2065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;_M_size&#32;members&#32;after&#32;merging&#32;(some&#32;of)&#32;__src&#32;into&#32;__dest.</emphasis>
2066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Finalize_merge
2067 &#32;&#32;&#32;&#32;&#32;&#32;{
2068 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
2069 &#32;&#32;&#32;&#32;_Finalize_merge(list&amp;&#32;__dest,&#32;list&amp;&#32;__src,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__src_next)
2070 &#32;&#32;&#32;&#32;:&#32;_M_dest(__dest),&#32;_M_src(__src),&#32;_M_next(__src_next)
2071 &#32;&#32;&#32;&#32;{&#32;}
2072 
2073 &#32;&#32;&#32;&#32;~_Finalize_merge()
2074 &#32;&#32;&#32;&#32;{
2075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;the&#32;common&#32;case,&#32;_M_next&#32;==&#32;_M_sec.end()&#32;and&#32;the&#32;std::distance</emphasis>
2076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;call&#32;is&#32;fast.&#32;But&#32;if&#32;any&#32;*iter1&#32;&lt;&#32;*iter2&#32;comparison&#32;throws&#32;then&#32;we</emphasis>
2077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;have&#32;to&#32;count&#32;how&#32;many&#32;elements&#32;remain&#32;in&#32;_M_src.</emphasis>
2078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__num_unmerged&#32;=&#32;std::distance(_M_next,&#32;_M_src.end());
2079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__orig_size&#32;=&#32;_M_src._M_get_size();
2080 &#32;&#32;&#32;&#32;&#32;&#32;_M_dest._M_inc_size(__orig_size&#32;-&#32;__num_unmerged);
2081 &#32;&#32;&#32;&#32;&#32;&#32;_M_src._M_set_size(__num_unmerged);
2082 &#32;&#32;&#32;&#32;}
2083 
2084 &#32;&#32;&#32;&#32;list&amp;&#32;_M_dest;
2085 &#32;&#32;&#32;&#32;list&amp;&#32;_M_src;
2086 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;_M_next;
2087 
2088 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2089 &#32;&#32;&#32;&#32;_Finalize_merge(<emphasis role="keyword">const</emphasis>&#32;_Finalize_merge&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2090 <emphasis role="preprocessor">#endif</emphasis>
2091 &#32;&#32;&#32;&#32;&#32;&#32;};
2092 <emphasis role="preprocessor">#else</emphasis>
2093 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Finalize_merge
2094 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Finalize_merge(list&amp;,&#32;list&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;iterator&amp;)&#32;{&#32;}&#32;};
2095 <emphasis role="preprocessor">#endif</emphasis>
2096 
2097 &#32;&#32;&#32;&#32;};
2098 
2099 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
2100 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_ValT&gt;,
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2105 &#32;&#32;&#32;&#32;list(_InputIterator,&#32;_InputIterator,&#32;_Allocator&#32;=&#32;_Allocator())
2106 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;list&lt;_ValT,&#32;_Allocator&gt;;
2107 <emphasis role="preprocessor">#endif</emphasis>
2108 
2109 _GLIBCXX_END_NAMESPACE_CXX11
2110 
2121 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2122 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2123 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2124 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2125 &#32;&#32;&#32;&#32;{
2126 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
2127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x.size()&#32;!=&#32;__y.size())
2128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2129 <emphasis role="preprocessor">#endif</emphasis>
2130 
2131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;::const_iterator&#32;const_iterator;
2132 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__end1&#32;=&#32;__x.end();
2133 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__end2&#32;=&#32;__y.end();
2134 
2135 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;=&#32;__x.begin();
2136 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__i2&#32;=&#32;__y.begin();
2137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;!=&#32;__end1&#32;&amp;&amp;&#32;__i2&#32;!=&#32;__end2&#32;&amp;&amp;&#32;*<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;==&#32;*__i2)
2138 &#32;&#32;&#32;&#32;{
2139 &#32;&#32;&#32;&#32;&#32;&#32;++<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>;
2140 &#32;&#32;&#32;&#32;&#32;&#32;++__i2;
2141 &#32;&#32;&#32;&#32;}
2142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;==&#32;__end1&#32;&amp;&amp;&#32;__i2&#32;==&#32;__end2;
2143 &#32;&#32;&#32;&#32;}
2144 
2145 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
2157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2158 &#32;&#32;&#32;&#32;[[nodiscard]]
2159 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;_Tp&gt;
2160 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2161 &#32;&#32;&#32;&#32;{
2162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::lexicographical_compare_three_way(__x.begin(),&#32;__x.end(),
2163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end(),
2164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__synth3way);
2165 &#32;&#32;&#32;&#32;}
2166 <emphasis role="preprocessor">#else</emphasis>
2178 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2179 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2180 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2181 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2182 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare</link>(__x.begin(),&#32;__x.end(),
2183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end());&#32;}
2184 
2186 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2187 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2188 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2189 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2190 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
2191 
2193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2194 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2195 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2196 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2197 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
2198 
2200 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2201 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2202 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2203 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2204 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
2205 
2207 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2208 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
2209 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2210 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2211 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
2212 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
2213 
2215 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2216 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2217 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,&#32;list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
2218 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
2219 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
2220 
2221 _GLIBCXX_END_NAMESPACE_CONTAINER
2222 
2223 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
2224 
2225 &#32;&#32;<emphasis role="comment">//&#32;Detect&#32;when&#32;distance&#32;is&#32;used&#32;to&#32;compute&#32;the&#32;size&#32;of&#32;the&#32;whole&#32;list.</emphasis>
2226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2227 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
2228 &#32;&#32;&#32;&#32;__distance(_GLIBCXX_STD_C::_List_iterator&lt;_Tp&gt;&#32;__first,
2229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_List_iterator&lt;_Tp&gt;&#32;__last,
2230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag&#32;__tag)
2231 &#32;&#32;&#32;&#32;{
2232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_GLIBCXX_STD_C::_List_const_iterator&lt;_Tp&gt;&#32;_CIter;
2233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__distance(_CIter(__first),&#32;_CIter(__last),&#32;__tag);
2234 &#32;&#32;&#32;&#32;}
2235 
2236 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2237 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>
2238 &#32;&#32;&#32;&#32;__distance(_GLIBCXX_STD_C::_List_const_iterator&lt;_Tp&gt;&#32;__first,
2239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_List_const_iterator&lt;_Tp&gt;&#32;__last,
2240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input_iterator_tag)
2241 &#32;&#32;&#32;&#32;{
2242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__detail::_List_node_header&#32;_Sentinel;
2243 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::_List_const_iterator&lt;_Tp&gt;&#32;__beyond&#32;=&#32;__last;
2244 &#32;&#32;&#32;&#32;&#32;&#32;++__beyond;
2245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__whole&#32;=&#32;__first&#32;==&#32;__beyond;
2246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p&#32;(__whole)&#32;&amp;&amp;&#32;__whole)
2247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_Sentinel*<emphasis role="keyword">&gt;</emphasis>(__last._M_node)-&gt;_M_size;
2248 
2249 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__n&#32;=&#32;0;
2250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last)
2251 &#32;&#32;&#32;&#32;{
2252 &#32;&#32;&#32;&#32;&#32;&#32;++__first;
2253 &#32;&#32;&#32;&#32;&#32;&#32;++__n;
2254 &#32;&#32;&#32;&#32;}
2255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;
2256 &#32;&#32;&#32;&#32;}
2257 <emphasis role="preprocessor">#endif</emphasis>
2258 
2259 _GLIBCXX_END_NAMESPACE_VERSION
2260 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
2261 
2262 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_LIST_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
