<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2this__thread__sleep_8h_source" xml:lang="en-US">
<title>this_thread_sleep.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/this_thread_sleep.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;std::this_thread::sleep_for/until&#32;declarations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_THIS_THREAD_SLEEP_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_THIS_THREAD_SLEEP_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/chrono.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;std::chrono::*</emphasis>
37 
38 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_NANOSLEEP</emphasis>
39 <emphasis role="preprocessor">#&#32;include&#32;&lt;cerrno&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;errno,&#32;EINTR</emphasis>
40 <emphasis role="preprocessor">#&#32;include&#32;&lt;time.h&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;nanosleep</emphasis>
41 <emphasis role="preprocessor">#endif</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
56 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>this_thread
57 &#32;&#32;{
58 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_NO_SLEEP</emphasis>
59 
60 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_USE_NANOSLEEP</emphasis>
61 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
62 &#32;&#32;&#32;&#32;__sleep_for(chrono::seconds,&#32;chrono::nanoseconds);
63 <emphasis role="preprocessor">#endif</emphasis>
64 
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
68 &#32;&#32;&#32;&#32;&#32;&#32;sleep_for(<emphasis role="keyword">const</emphasis>&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__rtime)
69 &#32;&#32;&#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rtime&#32;&lt;=&#32;__rtime.zero())
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;chrono::duration_cast&lt;chrono::seconds&gt;(__rtime);
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ns&#32;=&#32;chrono::duration_cast&lt;chrono::nanoseconds&gt;(__rtime&#32;-&#32;__s);
74 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_NANOSLEEP</emphasis>
75 &#32;&#32;&#32;&#32;struct&#32;::timespec&#32;__ts&#32;=
76 &#32;&#32;&#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>std::time_t<emphasis role="keyword">&gt;</emphasis>(__s.count()),
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>(__ns.count())
79 &#32;&#32;&#32;&#32;&#32;&#32;};
80 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2pthread__time_8h_1a7d312dd72997b5c427ad9f37888bc543">::nanosleep</link>(&amp;__ts,&#32;&amp;__ts)&#32;==&#32;-1&#32;&amp;&amp;&#32;errno&#32;==&#32;EINTR)
81 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
82 <emphasis role="preprocessor">#else</emphasis>
83 &#32;&#32;&#32;&#32;__sleep_for(__s,&#32;__ns);
84 <emphasis role="preprocessor">#endif</emphasis>
85 &#32;&#32;&#32;&#32;&#32;&#32;}
86 
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;sleep_until(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;_Clock,&#32;_Duration&gt;&amp;&#32;__atime)
91 &#32;&#32;&#32;&#32;&#32;&#32;{
92 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
93 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(chrono::is_clock_v&lt;_Clock&gt;);
94 <emphasis role="preprocessor">#endif</emphasis>
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__now&#32;=&#32;_Clock::now();
96 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Clock::is_steady)
97 &#32;&#32;&#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__now&#32;&lt;&#32;__atime)
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sleep_for(__atime&#32;-&#32;__now);
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
101 &#32;&#32;&#32;&#32;&#32;&#32;}
102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__now&#32;&lt;&#32;__atime)
103 &#32;&#32;&#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sleep_for(__atime&#32;-&#32;__now);
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__now&#32;=&#32;_Clock::now();
106 &#32;&#32;&#32;&#32;&#32;&#32;}
107 &#32;&#32;&#32;&#32;&#32;&#32;}
108 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;NO_SLEEP</emphasis>
109 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;this_thread</emphasis>
110 
112 
113 _GLIBCXX_END_NAMESPACE_VERSION
114 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
115 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
116 
117 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_THIS_THREAD_SLEEP_H</emphasis>
</programlisting></section>
