<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2pstl_2algorithm__impl_8h_source" xml:lang="en-US">
<title>algorithm_impl.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/algorithm_impl.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;algorithm_impl.h&#32;--------------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_ALGORITHM_IMPL_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_ALGORITHM_IMPL_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;iterator&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
18 
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2execution__impl_8h">execution_impl.h</link>&quot;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2memory__impl_8h">memory_impl.h</link>&quot;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__utils_8h">parallel_backend_utils.h</link>&quot;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend_8h">parallel_backend.h</link>&quot;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__impl_8h">parallel_impl.h</link>&quot;</emphasis>
24 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2unseq__backend__simd_8h">unseq_backend_simd.h</link>&quot;</emphasis>
25 
26 
27 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>
28 {
29 <emphasis role="keyword">namespace&#32;</emphasis>__internal
30 {
31 
32 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
33 <emphasis role="comment">//&#32;any_of</emphasis>
34 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
35 
36 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred&gt;
37 <emphasis role="keywordtype">bool</emphasis>
38 <link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__brick_any_of</link>(<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator&#32;__last,&#32;_Pred&#32;__pred,
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
40 {
41 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">std::any_of</link>(__first,&#32;__last,&#32;__pred);
42 };
43 
44 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred&gt;
45 <emphasis role="keywordtype">bool</emphasis>
46 <link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__brick_any_of</link>(<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator&#32;__last,&#32;_Pred&#32;__pred,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
48 {
49 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a84dca71a2f0e2711f0e53a5894296ca7">__unseq_backend::__simd_or</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__pred);
50 };
51 
52 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
53 <emphasis role="keywordtype">bool</emphasis>
54 <link linkend="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd">__pattern_any_of</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Pred&#32;__pred,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
56 {
57 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__internal::__brick_any_of</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
58 }
59 
60 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
61 <emphasis role="keywordtype">bool</emphasis>
62 <link linkend="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd">__pattern_any_of</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Pred&#32;__pred,
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
64 {
65 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a0b24f24f2dfdffa3149539596892d0b0">__internal::__parallel_or</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__pred,&#32;__is_vector](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j)&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__internal::__brick_any_of</link>(__i,&#32;__j,&#32;__pred,&#32;__is_vector);
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
70 &#32;&#32;&#32;&#32;});
71 }
72 
73 <emphasis role="comment">//&#32;[alg.foreach]</emphasis>
74 <emphasis role="comment">//&#32;for_each_n&#32;with&#32;no&#32;policy</emphasis>
75 
76 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
77 _ForwardIterator
78 <link linkend="_namespace____pstl_1_1____internal_1a762eb8ef259f810b138bc5db0bb710a5">__for_each_n_it_serial</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Function&#32;__f)
79 {
80 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;++__first,&#32;--__n)
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__f(__first);
82 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
83 }
84 
85 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
86 <emphasis role="comment">//&#32;walk1&#32;(pseudo)</emphasis>
87 <emphasis role="comment">//</emphasis>
88 <emphasis role="comment">//&#32;walk1&#32;evaluates&#32;f(x)&#32;for&#32;each&#32;dereferenced&#32;value&#32;x&#32;drawn&#32;from&#32;[first,last)</emphasis>
89 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
90 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
91 <emphasis role="keywordtype">void</emphasis>
92 <link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__brick_walk1</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Function&#32;__f,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
93 {
94 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each</link>(__first,&#32;__last,&#32;__f);
95 }
96 
97 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
98 <emphasis role="keywordtype">void</emphasis>
99 <link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__brick_walk1</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Function&#32;__f,
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
101 {
102 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a2196b03264f94d6785c560717628cfd2">__unseq_backend::__simd_walk_1</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__f);
103 }
104 
105 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
106 <emphasis role="keywordtype">void</emphasis>
107 <link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pattern_walk1</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Function&#32;__f,
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
110 {
111 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__internal::__brick_walk1</link>(__first,&#32;__last,&#32;__f,&#32;__is_vector);
112 }
113 
114 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
115 <emphasis role="keywordtype">void</emphasis>
116 <link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pattern_walk1</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Function&#32;__f,
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
119 {
120 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__f,&#32;__is_vector](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j)&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__internal::__brick_walk1</link>(__i,&#32;__j,&#32;__f,&#32;__is_vector);
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
125 &#32;&#32;&#32;&#32;});
126 }
127 
128 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
129 <emphasis role="keywordtype">void</emphasis>
130 <link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pattern_walk_brick</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Brick&#32;__brick,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
132 {
133 &#32;&#32;&#32;&#32;__brick(__first,&#32;__last);
134 }
135 
136 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
137 <emphasis role="keywordtype">void</emphasis>
138 <link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pattern_walk_brick</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Brick&#32;__brick,
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
140 {
141 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__brick](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j)&#32;{&#32;__brick(__i,&#32;__j);&#32;});
144 &#32;&#32;&#32;&#32;});
145 }
146 
147 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
148 <emphasis role="comment">//&#32;walk1_n</emphasis>
149 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
150 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
151 _ForwardIterator
152 <link linkend="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348">__brick_walk1_n</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Function&#32;__f,&#32;<emphasis role="comment">/*_IsVectorTag=*/</emphasis>std::false_type)
153 {
154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a762eb8ef259f810b138bc5db0bb710a5">__internal::__for_each_n_it_serial</link>(__first,&#32;__n,
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__f](_ForwardIterator&#32;__it)&#32;{&#32;__f(*__it);&#32;});&#32;<emphasis role="comment">//&#32;calling&#32;serial&#32;version</emphasis>
156 }
157 
158 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
159 _RandomAccessIterator
160 <link linkend="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348">__brick_walk1_n</link>(_RandomAccessIterator&#32;__first,&#32;_DifferenceType&#32;__n,&#32;_Function&#32;__f,
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vectorTag=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
162 {
163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a2196b03264f94d6785c560717628cfd2">__unseq_backend::__simd_walk_1</link>(__first,&#32;__n,&#32;__f);
164 }
165 
166 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
167 _ForwardIterator
168 <link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pattern_walk1_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Function&#32;__f,&#32;_IsVector&#32;__is_vector,
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
170 {
171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348">__internal::__brick_walk1_n</link>(__first,&#32;__n,&#32;__f,&#32;__is_vector);
172 }
173 
174 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
175 _RandomAccessIterator
176 <link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pattern_walk1_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Function&#32;__f,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
179 {
180 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__internal::__pattern_walk1</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__first&#32;+&#32;__n,&#32;__f,&#32;__is_vector,
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type());
182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__n;
183 }
184 
185 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
186 _ForwardIterator
187 <link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pattern_walk_brick_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Brick&#32;__brick,
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
189 {
190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__brick(__first,&#32;__n);
191 }
192 
193 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
194 _RandomAccessIterator
195 <link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pattern_walk_brick_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_Size&#32;__n,&#32;_Brick&#32;__brick,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
197 {
198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__first&#32;+&#32;__n,
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__brick](_RandomAccessIterator&#32;__i,&#32;_RandomAccessIterator&#32;__j)&#32;{&#32;__brick(__i,&#32;__j&#32;-&#32;__i);&#32;});
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__n;
203 &#32;&#32;&#32;&#32;});
204 }
205 
206 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
207 <emphasis role="comment">//&#32;walk2&#32;(pseudo)</emphasis>
208 <emphasis role="comment">//</emphasis>
209 <emphasis role="comment">//&#32;walk2&#32;evaluates&#32;f(x,y)&#32;for&#32;deferenced&#32;values&#32;(x,y)&#32;drawn&#32;from&#32;[first1,last1)&#32;and&#32;[first2,...)</emphasis>
210 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
211 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
212 _ForwardIterator2
213 <link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__brick_walk2</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,&#32;_Function&#32;__f,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
215 {
216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;++__first2)
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__f(*__first1,&#32;*__first2);
218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2;
219 }
220 
221 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
222 _ForwardIterator2
223 <link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__brick_walk2</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,&#32;_Function&#32;__f,
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
225 {
226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932">__unseq_backend::__simd_walk_2</link>(__first1,&#32;__last1&#32;-&#32;__first1,&#32;__first2,&#32;__f);
227 }
228 
229 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
230 _ForwardIterator2
231 <link linkend="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93">__brick_walk2_n</link>(_ForwardIterator1&#32;__first1,&#32;_Size&#32;__n,&#32;_ForwardIterator2&#32;__first2,&#32;_Function&#32;__f,
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
233 {
234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__n&#32;&gt;&#32;0;&#32;--__n,&#32;++__first1,&#32;++__first2)
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__f(*__first1,&#32;*__first2);
236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2;
237 }
238 
239 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
240 _ForwardIterator2
241 <link linkend="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93">__brick_walk2_n</link>(_ForwardIterator1&#32;__first1,&#32;_Size&#32;__n,&#32;_ForwardIterator2&#32;__first2,&#32;_Function&#32;__f,
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
243 {
244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932">__unseq_backend::__simd_walk_2</link>(__first1,&#32;__n,&#32;__first2,&#32;__f);
245 }
246 
247 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
248 _ForwardIterator2
249 <link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pattern_walk2</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Function&#32;__f,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
251 {
252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__internal::__brick_walk2</link>(__first1,&#32;__last1,&#32;__first2,&#32;__f,&#32;__is_vector);
253 }
254 
255 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
256 _ForwardIterator2
257 <link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pattern_walk2</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_Function&#32;__f,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
259 {
260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__f,&#32;__first1,&#32;__first2,&#32;__is_vector](_ForwardIterator1&#32;__i,&#32;_ForwardIterator1&#32;__j)&#32;{
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__internal::__brick_walk2</link>(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__f,&#32;__is_vector);
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2&#32;+&#32;(__last1&#32;-&#32;__first1);
267 &#32;&#32;&#32;&#32;});
268 }
269 
270 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
272 _ForwardIterator2
273 <link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pattern_walk2_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_Size&#32;__n,&#32;_ForwardIterator2&#32;__first2,&#32;_Function&#32;__f,
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
275 {
276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93">__internal::__brick_walk2_n</link>(__first1,&#32;__n,&#32;__first2,&#32;__f,&#32;__is_vector);
277 }
278 
279 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
281 _RandomAccessIterator2
282 <link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pattern_walk2_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_Size&#32;__n,&#32;_RandomAccessIterator2&#32;__first2,
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Function&#32;__f,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
284 {
285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__internal::__pattern_walk2</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__first1&#32;+&#32;__n,&#32;__first2,&#32;__f,
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector,&#32;std::true_type());
287 }
288 
289 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
290 _ForwardIterator2
291 <link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pattern_walk2_brick</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_Brick&#32;__brick,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
293 {
294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__brick(__first1,&#32;__last1,&#32;__first2);
295 }
296 
297 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
298 _RandomAccessIterator2
299 <link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pattern_walk2_brick</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_Brick&#32;__brick,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
301 {
302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;__brick](_RandomAccessIterator1&#32;__i,&#32;_RandomAccessIterator1&#32;__j)&#32;{
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1));
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2&#32;+&#32;(__last1&#32;-&#32;__first1);
309 &#32;&#32;&#32;&#32;});
310 }
311 
312 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
313 _RandomAccessIterator2
314 <link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pattern_walk2_brick_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_Size&#32;__n,
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_Brick&#32;__brick,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
316 {
317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__first1&#32;+&#32;__n,
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;__brick](_RandomAccessIterator1&#32;__i,&#32;_RandomAccessIterator1&#32;__j)&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick(__i,&#32;__j&#32;-&#32;__i,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1));
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first2&#32;+&#32;__n;
324 &#32;&#32;&#32;&#32;});
325 }
326 
327 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
328 _ForwardIterator2
329 <link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pattern_walk2_brick_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_Size&#32;__n,&#32;_ForwardIterator2&#32;__first2,
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Brick&#32;__brick,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
331 {
332 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__brick(__first1,&#32;__n,&#32;__first2);
333 }
334 
335 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
336 <emphasis role="comment">//&#32;walk3&#32;(pseudo)</emphasis>
337 <emphasis role="comment">//</emphasis>
338 <emphasis role="comment">//&#32;walk3&#32;evaluates&#32;f(x,y,z)&#32;for&#32;(x,y,z)&#32;drawn&#32;from&#32;[first1,last1),&#32;[first2,...),&#32;[first3,...)</emphasis>
339 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
340 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator3,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
341 _ForwardIterator3
342 <link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__brick_walk3</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator3&#32;__first3,&#32;_Function&#32;__f,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
344 {
345 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1;&#32;++__first1,&#32;++__first2,&#32;++__first3)
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__f(*__first1,&#32;*__first2,&#32;*__first3);
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first3;
348 }
349 
350 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator3,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
351 _RandomAccessIterator3
352 <link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__brick_walk3</link>(_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,&#32;_RandomAccessIterator2&#32;__first2,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator3&#32;__first3,&#32;_Function&#32;__f,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
354 {
355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a08f3845eaf1306879cde3522c5e2d542">__unseq_backend::__simd_walk_3</link>(__first1,&#32;__last1&#32;-&#32;__first1,&#32;__first2,&#32;__first3,&#32;__f);
356 }
357 
358 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator3,
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
360 _ForwardIterator3
361 <link linkend="_namespace____pstl_1_1____internal_1a618223855e120744a00b409ddfb37ea3">__pattern_walk3</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator3&#32;__first3,&#32;_Function&#32;__f,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
363 {
364 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__internal::__brick_walk3</link>(__first1,&#32;__last1,&#32;__first2,&#32;__first3,&#32;__f,&#32;__is_vector);
365 }
366 
367 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator3,&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
369 _RandomAccessIterator3
370 <link linkend="_namespace____pstl_1_1____internal_1a618223855e120744a00b409ddfb37ea3">__pattern_walk3</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_RandomAccessIterator3&#32;__first3,&#32;_Function&#32;__f,&#32;_IsVector&#32;__is_vector,
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
373 {
374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__f,&#32;__first1,&#32;__first2,&#32;__first3,&#32;__is_vector](_RandomAccessIterator1&#32;__i,&#32;_RandomAccessIterator1&#32;__j)&#32;{
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__internal::__brick_walk3</link>(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__first3&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__f,
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first3&#32;+&#32;(__last1&#32;-&#32;__first1);
382 &#32;&#32;&#32;&#32;});
383 }
384 
385 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
386 <emphasis role="comment">//&#32;equal</emphasis>
387 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
388 
389 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
390 <emphasis role="keywordtype">bool</emphasis>
391 <link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_BinaryPredicate&#32;__p,&#32;<emphasis role="comment">/*&#32;IsVector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
393 {
394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__p);
395 }
396 
397 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
398 <emphasis role="keywordtype">bool</emphasis>
399 <link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,&#32;_RandomAccessIterator2&#32;__first2,
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__last2,&#32;_BinaryPredicate&#32;__p,&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
401 {
402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last1&#32;-&#32;__first1&#32;!=&#32;__last2&#32;-&#32;__first2)
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
404 
405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(__first1,&#32;__last1&#32;-&#32;__first1,&#32;__first2,&#32;std::not_fn(__p)).first&#32;==&#32;__last1;
406 }
407 
408 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
410 <emphasis role="keywordtype">bool</emphasis>
411 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_BinaryPredicate&#32;__p,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
414 {
415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__internal::__brick_equal</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__p,&#32;__is_vector);
416 }
417 
418 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
420 <emphasis role="keywordtype">bool</emphasis>
421 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_RandomAccessIterator2&#32;__last2,&#32;_BinaryPredicate&#32;__p,
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
424 {
425 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last1&#32;-&#32;__first1&#32;!=&#32;__last2&#32;-&#32;__first2)
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
427 
428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespace____pstl_1_1____internal_1a0b24f24f2dfdffa3149539596892d0b0">__internal::__parallel_or</link>(
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;__p,&#32;__is_vector](_RandomAccessIterator1&#32;__i,&#32;_RandomAccessIterator1&#32;__j)&#32;{
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__internal::__brick_equal</link>(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__first2&#32;+&#32;(__j&#32;-&#32;__first1),
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__p,&#32;__is_vector);
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
435 &#32;&#32;&#32;&#32;});
436 }
437 
438 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
439 <emphasis role="comment">//&#32;equal&#32;version&#32;for&#32;sequences&#32;with&#32;equal&#32;length</emphasis>
440 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
441 
442 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
443 <emphasis role="keywordtype">bool</emphasis>
444 <link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,&#32;_BinaryPredicate&#32;__p,
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;IsVector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
446 {
447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__first1,&#32;__last1,&#32;__first2,&#32;__p);
448 }
449 
450 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
451 <emphasis role="keywordtype">bool</emphasis>
452 <link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,&#32;_RandomAccessIterator2&#32;__first2,
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__p,&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
454 {
455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(__first1,&#32;__last1&#32;-&#32;__first1,&#32;__first2,&#32;std::not_fn(__p)).first&#32;==&#32;__last1;
456 }
457 
458 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
460 <emphasis role="keywordtype">bool</emphasis>
461 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__p,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
463 {
464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__internal::__brick_equal</link>(__first1,&#32;__last1,&#32;__first2,&#32;__p,&#32;__is_vector);
465 }
466 
467 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
469 <emphasis role="keywordtype">bool</emphasis>
470 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_BinaryPredicate&#32;__p,&#32;_IsVector&#32;__is_vector,
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
473 {
474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespace____pstl_1_1____internal_1a0b24f24f2dfdffa3149539596892d0b0">__internal::__parallel_or</link>(
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;__p,&#32;__is_vector](_RandomAccessIterator1&#32;__i,&#32;_RandomAccessIterator1&#32;__j)&#32;{
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__internal::__brick_equal</link>(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__p,&#32;__is_vector);
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
480 &#32;&#32;&#32;&#32;});
481 }
482 
483 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
484 <emphasis role="comment">//&#32;find_if</emphasis>
485 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
486 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
487 _ForwardIterator
488 <link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__brick_find_if</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Predicate&#32;__pred,
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
490 {
491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">std::find_if</link>(__first,&#32;__last,&#32;__pred);
492 }
493 
494 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
495 _RandomAccessIterator
496 <link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__brick_find_if</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Predicate&#32;__pred,
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
498 {
499 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_SizeType;
500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;_SizeType(0),&#32;__last&#32;-&#32;__first,
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__pred](_RandomAccessIterator&#32;__it,&#32;_SizeType&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pred(__it[__i]);&#32;});
503 }
504 
505 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
506 _ForwardIterator
507 <link linkend="_namespace____pstl_1_1____internal_1a048b6c9be4b418a089e7e1de87722139">__pattern_find_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Predicate&#32;__pred,
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
510 {
511 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
512 }
513 
514 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
515 _ForwardIterator
516 <link linkend="_namespace____pstl_1_1____internal_1a048b6c9be4b418a089e7e1de87722139">__pattern_find_if</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Predicate&#32;__pred,
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
519 {
520 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__internal::__parallel_find</link>(
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__pred,&#32;__is_vector](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j)&#32;{
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(__i,&#32;__j,&#32;__pred,&#32;__is_vector);
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;typename&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type&gt;(),
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">true</emphasis>);
528 &#32;&#32;&#32;&#32;});
529 }
530 
531 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
532 <emphasis role="comment">//&#32;find_end</emphasis>
533 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
534 
535 <emphasis role="comment">//&#32;find&#32;the&#32;first&#32;occurrence&#32;of&#32;the&#32;subsequence&#32;[s_first,&#32;s_last)</emphasis>
536 <emphasis role="comment">//&#32;&#32;&#32;or&#32;the&#32;&#32;last&#32;occurrence&#32;of&#32;the&#32;subsequence&#32;in&#32;the&#32;range&#32;[first,&#32;last)</emphasis>
537 <emphasis role="comment">//&#32;b_first&#32;determines&#32;what&#32;occurrence&#32;we&#32;want&#32;to&#32;find&#32;(first&#32;or&#32;last)</emphasis>
538 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
539 _RandomAccessIterator1
540 <link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__find_subrange</link>(_RandomAccessIterator1&#32;__first,&#32;_RandomAccessIterator1&#32;__last,&#32;_RandomAccessIterator1&#32;__global_last,
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__s_first,&#32;_RandomAccessIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__b_first,&#32;_IsVector&#32;__is_vector)&#32;<emphasis role="keyword">noexcept</emphasis>
543 {
544 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator2&gt;::value_type&#32;_ValueType;
545 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;__s_last&#32;-&#32;__s_first;
546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2&#32;&lt;&#32;1)
547 &#32;&#32;&#32;&#32;{
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__b_first&#32;?&#32;__first&#32;:&#32;__last;
549 &#32;&#32;&#32;&#32;}
550 
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n1&#32;=&#32;__global_last&#32;-&#32;__first;
552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n1&#32;&lt;&#32;__n2)
553 &#32;&#32;&#32;&#32;{
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
555 &#32;&#32;&#32;&#32;}
556 
557 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__cur&#32;=&#32;__last;
558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;(__global_last&#32;-&#32;__first&#32;&gt;=&#32;__n2))
559 &#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;position&#32;of&#32;*s_first&#32;in&#32;[first,&#32;last)&#32;(it&#32;can&#32;be&#32;start&#32;of&#32;subsequence)</emphasis>
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__last,&#32;__equal_value_by_pred&lt;_ValueType,&#32;_BinaryPredicate&gt;(*__s_first,&#32;__pred),&#32;__is_vector);
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;position&#32;that&#32;was&#32;found&#32;previously&#32;is&#32;the&#32;start&#32;of&#32;subsequence</emphasis>
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;we&#32;can&#32;exit&#32;the&#32;loop&#32;(b_first&#32;==&#32;true)&#32;or&#32;keep&#32;the&#32;position</emphasis>
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(b_first&#32;==&#32;false)</emphasis>
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;(__global_last&#32;-&#32;__first&#32;&gt;=&#32;__n2)&#32;&amp;&amp;
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__internal::__brick_equal</link>(__s_first&#32;+&#32;1,&#32;__s_last,&#32;__first&#32;+&#32;1,&#32;__pred,&#32;__is_vector))
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b_first)
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cur&#32;=&#32;__first;
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
586 
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;case&#32;of&#32;b_first&#32;==&#32;false&#32;we&#32;try&#32;to&#32;find&#32;new&#32;start&#32;position</emphasis>
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;the&#32;next&#32;subsequence</emphasis>
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
590 &#32;&#32;&#32;&#32;}
591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cur;
592 }
593 
594 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
595 _RandomAccessIterator
596 <link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__find_subrange</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_RandomAccessIterator&#32;__global_last,
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_BinaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector)&#32;<emphasis role="keyword">noexcept</emphasis>
598 {
599 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>_Size<emphasis role="keyword">&gt;</emphasis>(__global_last&#32;-&#32;__first)&#32;&lt;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;||&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;&lt;&#32;1)
600 &#32;&#32;&#32;&#32;{
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;&#32;<emphasis role="comment">//&#32;According&#32;to&#32;the&#32;standard&#32;last&#32;shall&#32;be&#32;returned&#32;when&#32;count&#32;&lt;&#32;1</emphasis>
602 &#32;&#32;&#32;&#32;}
603 
604 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__unary_pred&#32;=&#32;__equal_value_by_pred&lt;_Tp,&#32;_BinaryPredicate&gt;(__value,&#32;__pred);
605 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>_Size<emphasis role="keyword">&gt;</emphasis>(__global_last&#32;-&#32;__first)&#32;&gt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>))
606 &#32;&#32;&#32;&#32;{
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(__first,&#32;__last,&#32;__unary_pred,&#32;__is_vector);
608 
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;check&#32;that&#32;all&#32;of&#32;elements&#32;in&#32;[first+1,&#32;first+count)&#32;equal&#32;to&#32;value</emphasis>
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;!=&#32;__last&#32;&amp;&amp;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>_Size<emphasis role="keyword">&gt;</emphasis>(__global_last&#32;-&#32;__first)&#32;&gt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)&#32;&amp;&amp;
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__internal::__brick_any_of</link>(__first&#32;+&#32;1,&#32;__first&#32;+&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;std::not_fn(__unary_pred),&#32;__is_vector))
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
623 &#32;&#32;&#32;&#32;}
624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
625 }
626 
627 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
628 _ForwardIterator1
629 <link linkend="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6">__brick_find_end</link>(_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
631 {
632 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aca2377528194645193c34ceb0f268ebc">std::find_end</link>(__first,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred);
633 }
634 
635 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
636 _ForwardIterator1
637 <link linkend="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6">__brick_find_end</link>(_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
639 {
640 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__find_subrange</link>(__first,&#32;__last,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;<emphasis role="keyword">false</emphasis>,&#32;std::true_type());
641 }
642 
643 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
645 _ForwardIterator1
646 <link linkend="_namespace____pstl_1_1____internal_1ab41e2c44c1a0b564c5f9e350dc98cd07">__pattern_find_end</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
649 {
650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6">__internal::__brick_find_end</link>(__first,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;__is_vector);
651 }
652 
653 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
655 _ForwardIterator1
656 <link linkend="_namespace____pstl_1_1____internal_1ab41e2c44c1a0b564c5f9e350dc98cd07">__pattern_find_end</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_first,&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
659 {
660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;==&#32;__s_last&#32;-&#32;__s_first)
661 &#32;&#32;&#32;&#32;{
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__res&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__internal::__pattern_equal</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s_first,&#32;__pred,&#32;__is_vector,&#32;std::true_type());
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res&#32;?&#32;__first&#32;:&#32;__last;
665 &#32;&#32;&#32;&#32;}
666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
667 &#32;&#32;&#32;&#32;{
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__internal::__parallel_find</link>(
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;__is_vector](_ForwardIterator1&#32;__i,&#32;_ForwardIterator1&#32;__j)&#32;{
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__internal::__find_subrange</link>(__i,&#32;__j,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;<emphasis role="keyword">false</emphasis>,
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::greater&lt;typename&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&gt;(),&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">false</emphasis>);
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
677 &#32;&#32;&#32;&#32;}
678 }
679 
680 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
681 <emphasis role="comment">//&#32;find_first_of</emphasis>
682 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
683 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
684 _ForwardIterator1
685 <link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__brick_find_first_of</link>(_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
687 {
688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">std::find_first_of</link>(__first,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred);
689 }
690 
691 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
692 _ForwardIterator1
693 <link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__brick_find_first_of</link>(_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
695 {
696 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a34b5595f5511ca6085e97c33055d6b8f">__unseq_backend::__simd_find_first_of</link>(__first,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred);
697 }
698 
699 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
701 _ForwardIterator1
702 <link linkend="_namespace____pstl_1_1____internal_1ab87ed0d016b76e9009330174d6dd604f">__pattern_find_first_of</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_first,&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
705 {
706 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__internal::__brick_find_first_of</link>(__first,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;__is_vector);
707 }
708 
709 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
711 _ForwardIterator1
712 <link linkend="_namespace____pstl_1_1____internal_1ab87ed0d016b76e9009330174d6dd604f">__pattern_find_first_of</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_first,&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
715 {
716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__internal::__parallel_find</link>(
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__s_first,&#32;__s_last,&#32;__pred,&#32;__is_vector](_ForwardIterator1&#32;__i,&#32;_ForwardIterator1&#32;__j)&#32;{
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__internal::__brick_find_first_of</link>(__i,&#32;__j,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;__is_vector);
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;typename&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&gt;(),&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">true</emphasis>);
723 &#32;&#32;&#32;&#32;});
724 }
725 
726 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
727 <emphasis role="comment">//&#32;search</emphasis>
728 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
729 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
730 _ForwardIterator1
731 <link linkend="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f">__brick_search</link>(_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
733 {
734 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">std::search</link>(__first,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred);
735 }
736 
737 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
738 _ForwardIterator1
739 <link linkend="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f">__brick_search</link>(_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
741 {
742 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__internal::__find_subrange</link>(__first,&#32;__last,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;<emphasis role="keyword">true</emphasis>,&#32;std::true_type());
743 }
744 
745 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
747 _ForwardIterator1
748 <link linkend="_namespace____pstl_1_1____internal_1af101203bfce74b08bef3c56eaa652f97">__pattern_search</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,&#32;_ForwardIterator2&#32;__s_first,
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
751 {
752 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f">__internal::__brick_search</link>(__first,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;__is_vector);
753 }
754 
755 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
757 _ForwardIterator1
758 <link linkend="_namespace____pstl_1_1____internal_1af101203bfce74b08bef3c56eaa652f97">__pattern_search</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__s_first,&#32;_ForwardIterator2&#32;__s_last,&#32;_BinaryPredicate&#32;__pred,
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
762 {
763 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;==&#32;__s_last&#32;-&#32;__s_first)
764 &#32;&#32;&#32;&#32;{
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__res&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__internal::__pattern_equal</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s_first,&#32;__pred,&#32;__is_vector,&#32;std::true_type());
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res&#32;?&#32;__first&#32;:&#32;__last;
768 &#32;&#32;&#32;&#32;}
769 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
770 &#32;&#32;&#32;&#32;{
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__internal::__parallel_find</link>(
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;__is_vector](_ForwardIterator1&#32;__i,&#32;_ForwardIterator1&#32;__j)&#32;{
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__internal::__find_subrange</link>(__i,&#32;__j,&#32;__last,&#32;__s_first,&#32;__s_last,&#32;__pred,&#32;<emphasis role="keyword">true</emphasis>,
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;typename&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&gt;(),&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">true</emphasis>);
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
780 &#32;&#32;&#32;&#32;}
781 }
782 
783 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
784 <emphasis role="comment">//&#32;search_n</emphasis>
785 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
786 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
787 _ForwardIterator
788 <link linkend="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f">__brick_search_n</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
790 {
791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">std::search_n</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value,&#32;__pred);
792 }
793 
794 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
795 _ForwardIterator
796 <link linkend="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f">__brick_search_n</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
798 {
799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__internal::__find_subrange</link>(__first,&#32;__last,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value,&#32;__pred,&#32;std::true_type());
800 }
801 
802 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
804 _ForwardIterator
805 <link linkend="_namespace____pstl_1_1____internal_1aeee6ca536b74ecbe6543c70b07b0bbf4">__pattern_search_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_BinaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
808 {
809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f">__internal::__brick_search_n</link>(__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value,&#32;__pred,&#32;__is_vector);
810 }
811 
812 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
814 _RandomAccessIterator
815 <link linkend="_namespace____pstl_1_1____internal_1aeee6ca536b74ecbe6543c70b07b0bbf4">__pattern_search_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_BinaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
818 {
819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis>_Size<emphasis role="keyword">&gt;</emphasis>(__last&#32;-&#32;__first)&#32;==&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)
820 &#32;&#32;&#32;&#32;{
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__result&#32;=&#32;!<link linkend="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd">__internal::__pattern_any_of</link>(
822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__value,&#32;&amp;__pred](<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__pred(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__value);&#32;},&#32;__is_vector,
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel*/</emphasis>&#32;std::true_type());
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;?&#32;__first&#32;:&#32;__last;
826 &#32;&#32;&#32;&#32;}
827 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
828 &#32;&#32;&#32;&#32;{
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__first,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;&amp;__value,&#32;__pred,&#32;__is_vector]()&#32;{
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__internal::__parallel_find</link>(
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;&amp;__value,&#32;__pred,&#32;__is_vector](_RandomAccessIterator&#32;__i,&#32;_RandomAccessIterator&#32;__j)&#32;{
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__internal::__find_subrange</link>(__i,&#32;__j,&#32;__last,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value,&#32;__pred,&#32;__is_vector);
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;typename&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&gt;(),&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">true</emphasis>);
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
837 &#32;&#32;&#32;&#32;}
838 }
839 
840 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
841 <emphasis role="comment">//&#32;copy_n</emphasis>
842 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
843 
844 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
845 _OutputIterator
846 <link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__brick_copy_n</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;_OutputIterator&#32;__result,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
847 {
848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ad65e2656aa6e6ce70150b2dfa9669cde">std::copy_n</link>(__first,&#32;__n,&#32;__result);
849 }
850 
851 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
852 _OutputIterator
853 <link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__brick_copy_n</link>(_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;_OutputIterator&#32;__result,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
854 {
855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__unseq_backend::__simd_assign</link>(
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__n,&#32;__result,&#32;[](_ForwardIterator&#32;__first,&#32;_OutputIterator&#32;__result)&#32;{&#32;*__result&#32;=&#32;*__first;&#32;});
857 }
858 
859 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
860 <emphasis role="comment">//&#32;copy</emphasis>
861 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
862 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
863 _OutputIterator
864 <link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__brick_copy</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
866 {
867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(__first,&#32;__last,&#32;__result);
868 }
869 
870 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
871 _OutputIterator
872 <link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__brick_copy</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_OutputIterator&#32;__result,
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
874 {
875 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__unseq_backend::__simd_assign</link>(
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__last&#32;-&#32;__first,&#32;__result,
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_RandomAccessIterator&#32;__first,&#32;_OutputIterator&#32;__result)&#32;{&#32;*__result&#32;=&#32;*__first;&#32;});
878 }
879 
880 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
881 <emphasis role="comment">//&#32;move</emphasis>
882 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
883 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
884 _OutputIterator
885 <link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__brick_move</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
887 {
888 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__first,&#32;__last,&#32;__result);
889 }
890 
891 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
892 _OutputIterator
893 <link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__brick_move</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_OutputIterator&#32;__result,
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
895 {
896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__unseq_backend::__simd_assign</link>(
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__last&#32;-&#32;__first,&#32;__result,
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_RandomAccessIterator&#32;__first,&#32;_OutputIterator&#32;__result)&#32;{&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);&#32;});
899 }
900 
901 <emphasis role="keyword">struct&#32;</emphasis>__brick_move_destroy
902 {
903 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
904 &#32;&#32;&#32;&#32;_OutputIterator
905 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____brick__move__destroy_1a97222d71c6613f0dc25dbf4a78cdc6e6">operator()</link>(_Iterator&#32;__first,&#32;_Iterator&#32;__last,&#32;_OutputIterator&#32;__result,&#32;<emphasis role="comment">/*vec*/</emphasis>&#32;std::true_type)<emphasis role="keyword">&#32;const</emphasis>
906 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IteratorValueType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::value_type;
908 
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__unseq_backend::__simd_assign</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__result,
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_Iterator&#32;__first,&#32;_OutputIterator&#32;__result)&#32;{
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*__first).~_IteratorValueType();
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
914 &#32;&#32;&#32;&#32;}
915 
916 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
917 &#32;&#32;&#32;&#32;_OutputIterator
918 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____brick__move__destroy_1aea1f437d8d338c59612e021a58712a5c">operator()</link>(_Iterator&#32;__first,&#32;_Iterator&#32;__last,&#32;_OutputIterator&#32;__result,&#32;<emphasis role="comment">/*vec*/</emphasis>&#32;std::false_type)<emphasis role="keyword">&#32;const</emphasis>
919 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IteratorValueType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;::value_type;
921 
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;++__result)
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__first);
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*__first).~_IteratorValueType();
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
928 &#32;&#32;&#32;&#32;}
929 };
930 
931 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
932 <emphasis role="comment">//&#32;swap_ranges</emphasis>
933 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
934 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
935 _OutputIterator
936 <link linkend="_namespace____pstl_1_1____internal_1a5859660f8d8c3308e80935f3bda79577">__brick_swap_ranges</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
938 {
939 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ab5c0ba367019a22e04563f7ecbf2f200">std::swap_ranges</link>(__first,&#32;__last,&#32;__result);
940 }
941 
942 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
943 _OutputIterator
944 <link linkend="_namespace____pstl_1_1____internal_1a5859660f8d8c3308e80935f3bda79577">__brick_swap_ranges</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
946 {
947 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::iter_swap;
948 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__unseq_backend::__simd_assign</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__result,
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_swap&lt;_ForwardIterator,&#32;_OutputIterator&gt;);
950 }
951 
952 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
953 <emphasis role="comment">//&#32;copy_if</emphasis>
954 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
955 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
956 _OutputIterator
957 <link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__brick_copy_if</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,&#32;_UnaryPredicate&#32;__pred,
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
959 {
960 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1">std::copy_if</link>(__first,&#32;__last,&#32;__result,&#32;__pred);
961 }
962 
963 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
964 _OutputIterator
965 <link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__brick_copy_if</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,&#32;_UnaryPredicate&#32;__pred,
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
967 {
968 <emphasis role="preprocessor">#if&#32;(_PSTL_MONOTONIC_PRESENT)</emphasis>
969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1aed82f294600d447d733a67b243739a33">__unseq_backend::__simd_copy_if</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__result,&#32;__pred);
970 <emphasis role="preprocessor">#else</emphasis>
971 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a05892b1ecb6a5d694a84a4567b1f77e1">std::copy_if</link>(__first,&#32;__last,&#32;__result,&#32;__pred);
972 <emphasis role="preprocessor">#endif</emphasis>
973 }
974 
975 <emphasis role="comment">//&#32;TODO:&#32;Try&#32;to&#32;use&#32;transform_reduce&#32;for&#32;combining&#32;__brick_copy_if_phase1&#32;on&#32;IsVector.</emphasis>
976 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
977 std::pair&lt;_DifferenceType,&#32;_DifferenceType&gt;
978 <link linkend="_namespace____pstl_1_1____internal_1aa9f3335e6c5bc8f3c503f12c2c706399">__brick_calc_mask_1</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict&#32;__mask,&#32;_UnaryPredicate&#32;__pred,
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
980 {
981 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__count_true&#32;=&#32;_DifferenceType(0);
982 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__size&#32;=&#32;__last&#32;-&#32;__first;
983 
984 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1aea3ab79a62a13675de893e16c2f24cc0">__is_random_access_iterator&lt;_ForwardIterator&gt;::value</link>,
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Pattern-brick&#32;error.&#32;Should&#32;be&#32;a&#32;random&#32;access&#32;iterator.&quot;</emphasis>);
986 
987 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;++__mask)
988 &#32;&#32;&#32;&#32;{
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__mask&#32;=&#32;__pred(*__first);
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__mask)
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__count_true;
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
994 &#32;&#32;&#32;&#32;}
995 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__count_true,&#32;__size&#32;-&#32;__count_true);
996 }
997 
998 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
999 std::pair&lt;_DifferenceType,&#32;_DifferenceType&gt;
1000 <link linkend="_namespace____pstl_1_1____internal_1aa9f3335e6c5bc8f3c503f12c2c706399">__brick_calc_mask_1</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask,&#32;_UnaryPredicate&#32;__pred,
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1002 {
1003 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1ac0071b0b112cd9a2338904f168f77e46">__unseq_backend::__simd_calc_mask_1</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__mask,&#32;__pred);
1004 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__result,&#32;(__last&#32;-&#32;__first)&#32;-&#32;__result);
1005 }
1006 
1007 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Assigner&gt;
1008 <emphasis role="keywordtype">void</emphasis>
1009 <link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__brick_copy_by_mask</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask,
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Assigner&#32;__assigner,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1011 {
1012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;++__mask)
1013 &#32;&#32;&#32;&#32;{
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__mask)
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__assigner(__first,&#32;__result);
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1019 &#32;&#32;&#32;&#32;}
1020 }
1021 
1022 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Assigner&gt;
1023 <emphasis role="keywordtype">void</emphasis>
1024 <link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__brick_copy_by_mask</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict&#32;__mask,&#32;_Assigner&#32;__assigner,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1026 {
1027 <emphasis role="preprocessor">#if&#32;(_PSTL_MONOTONIC_PRESENT)</emphasis>
1028 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1ab878b934153baa9dd2feb302c14a6300">__unseq_backend::__simd_copy_by_mask</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__result,&#32;__mask,&#32;__assigner);
1029 <emphasis role="preprocessor">#else</emphasis>
1030 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__internal::__brick_copy_by_mask</link>(__first,&#32;__last,&#32;__result,&#32;__mask,&#32;__assigner,&#32;std::false_type());
1031 <emphasis role="preprocessor">#endif</emphasis>
1032 }
1033 
1034 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2&gt;
1035 <emphasis role="keywordtype">void</emphasis>
1036 <link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__brick_partition_by_mask</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator1&#32;__out_true,
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator2&#32;__out_false,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1038 {
1039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;++__mask)
1040 &#32;&#32;&#32;&#32;{
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*__mask)
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out_true&#32;=&#32;*__first;
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__out_true;
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__out_false&#32;=&#32;*__first;
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__out_false;
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1051 &#32;&#32;&#32;&#32;}
1052 }
1053 
1054 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2&gt;
1055 <emphasis role="keywordtype">void</emphasis>
1056 <link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__brick_partition_by_mask</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_OutputIterator1&#32;__out_true,
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator2&#32;__out_false,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1058 {
1059 <emphasis role="preprocessor">#if&#32;(_PSTL_MONOTONIC_PRESENT)</emphasis>
1060 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a496b19bf0c9d0074ec201b5925959300">__unseq_backend::__simd_partition_by_mask</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__out_true,&#32;__out_false,&#32;__mask);
1061 <emphasis role="preprocessor">#else</emphasis>
1062 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__internal::__brick_partition_by_mask</link>(__first,&#32;__last,&#32;__out_true,&#32;__out_false,&#32;__mask,&#32;std::false_type());
1063 <emphasis role="preprocessor">#endif</emphasis>
1064 }
1065 
1066 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1067 _OutputIterator
1068 <link linkend="_namespace____pstl_1_1____internal_1a00b73000f7d2c9884939b67f41de7bb3">__pattern_copy_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1070 {
1071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__internal::__brick_copy_if</link>(__first,&#32;__last,&#32;__result,&#32;__pred,&#32;__is_vector);
1072 }
1073 
1074 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryPredicate,
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1076 _OutputIterator
1077 <link linkend="_namespace____pstl_1_1____internal_1a00b73000f7d2c9884939b67f41de7bb3">__pattern_copy_if</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_UnaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
1079 {
1080 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_DifferenceType;
1081 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
1082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_DifferenceType(1)&#32;&lt;&#32;__n)
1083 &#32;&#32;&#32;&#32;{
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__buffer&lt;bool&gt;&#32;__mask_buf(__n);
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__n,&#32;__first,&#32;__result,&#32;__is_vector,&#32;__pred,&#32;&amp;__mask_buf]()&#32;{
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask&#32;=&#32;__mask_buf.get();
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__m{};
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_strict_scan(
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__n,&#32;_DifferenceType(0),
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len)&#32;{&#32;<emphasis role="comment">//&#32;Reduce</emphasis>
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__internal::__brick_calc_mask_1&lt;_DifferenceType&gt;(__first&#32;+&#32;__i,&#32;__first&#32;+&#32;(__i&#32;+&#32;__len),
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+&#32;__i,&#32;__pred,&#32;__is_vector)
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.first;
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_DifferenceType&gt;(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Combine</emphasis>
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len,&#32;_DifferenceType&#32;__initial)&#32;{&#32;<emphasis role="comment">//&#32;Scan</emphasis>
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__internal::__brick_copy_by_mask</link>(
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;__i,&#32;__first&#32;+&#32;(__i&#32;+&#32;__len),&#32;__result&#32;+&#32;__initial,&#32;__mask&#32;+&#32;__i,
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_RandomAccessIterator&#32;__x,&#32;_OutputIterator&#32;__z)&#32;{&#32;*__z&#32;=&#32;*__x;&#32;},&#32;__is_vector);
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__m](_DifferenceType&#32;__total)&#32;{&#32;__m&#32;=&#32;__total;&#32;});
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;__m;
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1104 &#32;&#32;&#32;&#32;}
1105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trivial&#32;sequence&#32;-&#32;use&#32;serial&#32;algorithm</emphasis>
1106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__internal::__brick_copy_if</link>(__first,&#32;__last,&#32;__result,&#32;__pred,&#32;__is_vector);
1107 }
1108 
1109 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1110 <emphasis role="comment">//&#32;count</emphasis>
1111 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1112 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
1113 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
1114 <link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__brick_count</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Predicate&#32;__pred,
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1116 {
1117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1aa5db97c5dd4abf4d3f9e36bb4b87246d">__unseq_backend::__simd_count</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__pred);
1118 }
1119 
1120 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
1121 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
1122 <link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__brick_count</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Predicate&#32;__pred,
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1124 {
1125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">std::count_if</link>(__first,&#32;__last,&#32;__pred);
1126 }
1127 
1128 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1129 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
1130 <link linkend="_namespace____pstl_1_1____internal_1ab6c85c9e6daf1ae911a899fb47a2dac9">__pattern_count</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Predicate&#32;__pred,
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::false_type,&#32;_IsVector&#32;__is_vector)&#32;<emphasis role="keyword">noexcept</emphasis>
1132 {
1133 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__internal::__brick_count</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
1134 }
1135 
1136 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1137 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
1138 <link linkend="_namespace____pstl_1_1____internal_1ab6c85c9e6daf1ae911a899fb47a2dac9">__pattern_count</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Predicate&#32;__pred,
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::true_type,&#32;_IsVector&#32;__is_vector)
1140 {
1141 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type&#32;_SizeType;
1142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__par_backend::__parallel_reduce(
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;_SizeType(0),
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__pred,&#32;__is_vector](_ForwardIterator&#32;__begin,&#32;_ForwardIterator&#32;__end,&#32;_SizeType&#32;__value)&#32;-&gt;&#32;_SizeType&#32;{
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__value&#32;+&#32;<link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__internal::__brick_count</link>(__begin,&#32;__end,&#32;__pred,&#32;__is_vector);
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_SizeType&gt;());
1149 &#32;&#32;&#32;&#32;});
1150 }
1151 
1152 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1153 <emphasis role="comment">//&#32;unique</emphasis>
1154 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1155 
1156 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
1157 _ForwardIterator
1158 <link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__brick_unique</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_BinaryPredicate&#32;__pred,
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1160 {
1161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">std::unique</link>(__first,&#32;__last,&#32;__pred);
1162 }
1163 
1164 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
1165 _ForwardIterator
1166 <link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__brick_unique</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_BinaryPredicate&#32;__pred,
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1168 {
1169 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
1170 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">std::unique</link>(__first,&#32;__last,&#32;__pred);
1171 }
1172 
1173 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1174 _ForwardIterator
1175 <link linkend="_namespace____pstl_1_1____internal_1a7d71081d25f6bd099154a9d7ab2acc0b">__pattern_unique</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_BinaryPredicate&#32;__pred,
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1177 {
1178 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__internal::__brick_unique</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
1179 }
1180 
1181 <emphasis role="comment">//&#32;That&#32;function&#32;is&#32;shared&#32;between&#32;two&#32;algorithms&#32;-&#32;remove_if&#32;(__pattern_remove_if)&#32;and&#32;unique&#32;(pattern&#32;unique).&#32;But&#32;a&#32;mask&#32;calculation&#32;is&#32;different.</emphasis>
1182 <emphasis role="comment">//&#32;So,&#32;a&#32;caller&#32;passes&#32;_CalcMask&#32;brick&#32;into&#32;remove_elements.</emphasis>
1183 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_CalcMask,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1184 _ForwardIterator
1185 <link linkend="_namespace____pstl_1_1____internal_1ab96ad0e98fb260ea102f3a20ddc0dbf0">__remove_elements</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_CalcMask&#32;__calc_mask,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector)
1187 {
1188 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type&#32;_DifferenceType;
1189 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_Tp;
1190 &#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
1191 &#32;&#32;&#32;&#32;__par_backend::__buffer&lt;bool&gt;&#32;__mask_buf(__n);
1192 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.&#32;find&#32;a&#32;first&#32;iterator&#32;that&#32;should&#32;be&#32;removed</emphasis>
1193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask&#32;=&#32;__mask_buf.get();
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__min&#32;=&#32;__par_backend::__parallel_reduce(
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;_DifferenceType(0),&#32;__n,&#32;__n,
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__mask,&#32;&amp;__calc_mask,&#32;__is_vector](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__j,
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__local_min)&#32;-&gt;&#32;_DifferenceType&#32;{
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;mask</emphasis>
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__calc_mask(__mask&#32;+&#32;__i,&#32;__mask&#32;+&#32;__j,&#32;__first&#32;+&#32;__i);
1201 
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;minimum&#32;was&#32;found&#32;in&#32;a&#32;previous&#32;range&#32;we&#32;shouldn&apos;t&#32;do&#32;anymore</emphasis>
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__local_min&#32;&lt;&#32;__i)
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__local_min;
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;first&#32;iterator&#32;that&#32;should&#32;be&#32;removed</emphasis>
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(__mask&#32;+&#32;__i,&#32;__mask&#32;+&#32;__j,
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;&#32;},&#32;__is_vector);
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;-&#32;__mask&#32;==&#32;__j)
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__local_min;
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::min(__local_min,&#32;_DifferenceType(__result&#32;-&#32;__mask));
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_DifferenceType&#32;__local_min1,&#32;_DifferenceType&#32;__local_min2)&#32;-&gt;&#32;_DifferenceType&#32;{
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::min(__local_min1,&#32;__local_min2);
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1219 
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;elements&#32;to&#32;remove&#32;-&#32;exit</emphasis>
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__min&#32;==&#32;__n)
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;-=&#32;__min;
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+=&#32;__min;
1227 
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__buffer&lt;_Tp&gt;&#32;__buf(__n);
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__result&#32;=&#32;__buf.get();
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+=&#32;__min;
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__m{};
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;Elements&#32;that&#32;doesn&apos;t&#32;satisfy&#32;pred&#32;are&#32;moved&#32;to&#32;result</emphasis>
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_strict_scan(
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__n,&#32;_DifferenceType(0),
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__mask,&#32;__is_vector](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len)&#32;{
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__internal::__brick_count</link>(__mask&#32;+&#32;__i,&#32;__mask&#32;+&#32;__i&#32;+&#32;__len,&#32;[](<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;&#32;},
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_DifferenceType&gt;(),
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len,&#32;_DifferenceType&#32;__initial)&#32;{
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__internal::__brick_copy_by_mask</link>(
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;__i,&#32;__first&#32;+&#32;__i&#32;+&#32;__len,&#32;__result&#32;+&#32;__initial,&#32;__mask&#32;+&#32;__i,
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ForwardIterator&#32;__x,&#32;_Tp*&#32;__z)&#32;{
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__internal::__invoke_if_else</link>(std::is_trivial&lt;_Tp&gt;(),&#32;[&amp;]()&#32;{&#32;*__z&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__x);&#32;},
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{&#32;::new&#32;(std::addressof(*__z))&#32;_Tp(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__x));&#32;});
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__m](_DifferenceType&#32;__total)&#32;{&#32;__m&#32;=&#32;__total;&#32;});
1250 
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3.&#32;Elements&#32;from&#32;result&#32;are&#32;moved&#32;to&#32;[first,&#32;last)</emphasis>
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__result,&#32;__result&#32;+&#32;__m,
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__result,&#32;__first,&#32;__is_vector](_Tp*&#32;__i,&#32;_Tp*&#32;__j)&#32;{
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__invoke_if_else</link>(
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_trivial&lt;_Tp&gt;(),
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{&#32;<link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__brick_move</link>(__i,&#32;__j,&#32;__first&#32;+&#32;(__i&#32;-&#32;__result),&#32;__is_vector);&#32;},
1258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick_move_destroy()(__i,&#32;__j,&#32;__first&#32;+&#32;(__i&#32;-&#32;__result),&#32;__is_vector);
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__m;
1263 &#32;&#32;&#32;&#32;});
1264 }
1265 
1266 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1267 _ForwardIterator
1268 <link linkend="_namespace____pstl_1_1____internal_1a7d71081d25f6bd099154a9d7ab2acc0b">__pattern_unique</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_BinaryPredicate&#32;__pred,
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1270 {
1271 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
1272 
1273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1274 &#32;&#32;&#32;&#32;{
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
1276 &#32;&#32;&#32;&#32;}
1277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;+&#32;1&#32;==&#32;__last&#32;||&#32;__first&#32;+&#32;2&#32;==&#32;__last)
1278 &#32;&#32;&#32;&#32;{
1279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Trivial&#32;sequence&#32;-&#32;use&#32;serial&#32;algorithm</emphasis>
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__internal::__brick_unique</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
1281 &#32;&#32;&#32;&#32;}
1282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ab96ad0e98fb260ea102f3a20ddc0dbf0">__internal::__remove_elements</link>(
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;++__first,&#32;__last,
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__pred,&#32;__is_vector](<emphasis role="keywordtype">bool</emphasis>*&#32;__b,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__e,&#32;_ForwardIterator&#32;__it)&#32;{
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__internal::__brick_walk3</link>(
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b,&#32;__e,&#32;__it&#32;-&#32;1,&#32;__it,
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__pred](<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x,&#32;_ReferenceType&#32;__y,&#32;_ReferenceType&#32;__z)&#32;{&#32;__x&#32;=&#32;!__pred(__y,&#32;__z);&#32;},&#32;__is_vector);
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
1290 }
1291 
1292 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1293 <emphasis role="comment">//&#32;unique_copy</emphasis>
1294 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1295 
1296 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
1297 OutputIterator
1298 <link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__brick_unique_copy</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;OutputIterator&#32;__result,&#32;_BinaryPredicate&#32;__pred,
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1300 {
1301 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">std::unique_copy</link>(__first,&#32;__last,&#32;__result,&#32;__pred);
1302 }
1303 
1304 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
1305 OutputIterator
1306 <link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__brick_unique_copy</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;OutputIterator&#32;__result,
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1308 {
1309 <emphasis role="preprocessor">#if&#32;(_PSTL_MONOTONIC_PRESENT)</emphasis>
1310 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a8f4a13b8b7a0ae886233c0f39105d74b">__unseq_backend::__simd_unique_copy</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__result,&#32;__pred);
1311 <emphasis role="preprocessor">#else</emphasis>
1312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">std::unique_copy</link>(__first,&#32;__last,&#32;__result,&#32;__pred);
1313 <emphasis role="preprocessor">#endif</emphasis>
1314 }
1315 
1316 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1318 _OutputIterator
1319 <link linkend="_namespace____pstl_1_1____internal_1ae5b4115f81569b63f8d0feb2bd3b90ec">__pattern_unique_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1321 {
1322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__internal::__brick_unique_copy</link>(__first,&#32;__last,&#32;__result,&#32;__pred,&#32;__is_vector);
1323 }
1324 
1325 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
1326 _DifferenceType
1327 <link linkend="_namespace____pstl_1_1____internal_1a0c5ab799fe2096f845371f4cc601a3e8">__brick_calc_mask_2</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict&#32;__mask,
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1329 {
1330 &#32;&#32;&#32;&#32;_DifferenceType&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;0;
1331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;++__mask)
1332 &#32;&#32;&#32;&#32;{
1333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__mask&#32;=&#32;!__pred(*__first,&#32;*(__first&#32;-&#32;1));
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;+=&#32;*__mask;
1335 &#32;&#32;&#32;&#32;}
1336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>;
1337 }
1338 
1339 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
1340 _DifferenceType
1341 <link linkend="_namespace____pstl_1_1____internal_1a0c5ab799fe2096f845371f4cc601a3e8">__brick_calc_mask_2</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict&#32;__mask,
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1343 {
1344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a2a17cb1cac91c919487a9a14776a4b29">__unseq_backend::__simd_calc_mask_2</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__mask,&#32;__pred);
1345 }
1346 
1347 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1349 _OutputIterator
1350 <link linkend="_namespace____pstl_1_1____internal_1ae5b4115f81569b63f8d0feb2bd3b90ec">__pattern_unique_copy</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_BinaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type)
1353 {
1354 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_DifferenceType;
1355 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
1356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_DifferenceType(2)&#32;&lt;&#32;__n)
1357 &#32;&#32;&#32;&#32;{
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__buffer&lt;bool&gt;&#32;__mask_buf(__n);
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_DifferenceType(2)&#32;&lt;&#32;__n)
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__n,&#32;__first,&#32;__result,&#32;__pred,&#32;__is_vector,&#32;&amp;__mask_buf]()&#32;{
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask&#32;=&#32;__mask_buf.get();
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__m{};
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_strict_scan(
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__n,&#32;_DifferenceType(0),
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len)&#32;-&gt;&#32;_DifferenceType&#32;{&#32;<emphasis role="comment">//&#32;Reduce</emphasis>
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__extra&#32;=&#32;0;
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;==&#32;0)
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Special&#32;boundary&#32;case</emphasis>
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask[__i]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--__len&#32;==&#32;0)
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__i;
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__extra;
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__internal::__brick_calc_mask_2&lt;_DifferenceType&gt;(__first&#32;+&#32;__i,&#32;__first&#32;+&#32;(__i&#32;+&#32;__len),
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+&#32;__i,&#32;__pred,&#32;__is_vector)&#32;+
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extra;
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_DifferenceType&gt;(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Combine</emphasis>
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len,&#32;_DifferenceType&#32;__initial)&#32;{&#32;<emphasis role="comment">//&#32;Scan</emphasis>
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Phase&#32;2&#32;is&#32;same&#32;as&#32;for&#32;__pattern_copy_if</emphasis>
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__internal::__brick_copy_by_mask</link>(
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;+&#32;__i,&#32;__first&#32;+&#32;(__i&#32;+&#32;__len),&#32;__result&#32;+&#32;__initial,&#32;__mask&#32;+&#32;__i,
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_RandomAccessIterator&#32;__x,&#32;_OutputIterator&#32;__z)&#32;{&#32;*__z&#32;=&#32;*__x;&#32;},&#32;__is_vector);
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__m](_DifferenceType&#32;__total)&#32;{&#32;__m&#32;=&#32;__total;&#32;});
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;__m;
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1392 &#32;&#32;&#32;&#32;}
1393 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trivial&#32;sequence&#32;-&#32;use&#32;serial&#32;algorithm</emphasis>
1394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__internal::__brick_unique_copy</link>(__first,&#32;__last,&#32;__result,&#32;__pred,&#32;__is_vector);
1395 }
1396 
1397 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1398 <emphasis role="comment">//&#32;reverse</emphasis>
1399 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1400 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
1401 <emphasis role="keywordtype">void</emphasis>
1402 <link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1403 {
1404 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a66cd7f2a58b728c4a8f98ca025941719">std::reverse</link>(__first,&#32;__last);
1405 }
1406 
1407 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
1408 <emphasis role="keywordtype">void</emphasis>
1409 <link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1410 {
1411 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_BidirectionalIterator&gt;::reference&#32;_ReferenceType;
1412 
1413 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;(__last&#32;-&#32;__first)&#32;/&#32;2;
1414 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932">__unseq_backend::__simd_walk_2</link>(__first,&#32;__n,&#32;std::reverse_iterator&lt;_BidirectionalIterator&gt;(__last),
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;__x,&#32;_ReferenceType&#32;__y)&#32;{
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__x,&#32;__y);
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1419 }
1420 
1421 <emphasis role="comment">//&#32;this&#32;brick&#32;is&#32;called&#32;in&#32;parallel&#32;version,&#32;so&#32;we&#32;can&#32;use&#32;iterator&#32;arithmetic</emphasis>
1422 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
1423 <emphasis role="keywordtype">void</emphasis>
1424 <link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;_BidirectionalIterator&#32;__d_last,
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1426 {
1427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(--__d_last;&#32;__first&#32;!=&#32;__last;&#32;++__first,&#32;--__d_last)
1428 &#32;&#32;&#32;&#32;{
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::iter_swap;
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_swap(__first,&#32;__d_last);
1431 &#32;&#32;&#32;&#32;}
1432 }
1433 
1434 <emphasis role="comment">//&#32;this&#32;brick&#32;is&#32;called&#32;in&#32;parallel&#32;version,&#32;so&#32;we&#32;can&#32;use&#32;iterator&#32;arithmetic</emphasis>
1435 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
1436 <emphasis role="keywordtype">void</emphasis>
1437 <link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;_BidirectionalIterator&#32;__d_last,
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1439 {
1440 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_BidirectionalIterator&gt;::reference&#32;_ReferenceType;
1441 
1442 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932">__unseq_backend::__simd_walk_2</link>(__first,&#32;__last&#32;-&#32;__first,&#32;std::reverse_iterator&lt;_BidirectionalIterator&gt;(__d_last),
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;__x,&#32;_ReferenceType&#32;__y)&#32;{
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__x,&#32;__y);
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1447 }
1448 
1449 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1450 <emphasis role="keywordtype">void</emphasis>
1451 <link linkend="_namespace____pstl_1_1____internal_1a5f2267ae5935da96528156e02f6f4303">__pattern_reverse</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;_is_vector,
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1454 {
1455 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__internal::__brick_reverse</link>(__first,&#32;__last,&#32;_is_vector);
1456 }
1457 
1458 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1459 <emphasis role="keywordtype">void</emphasis>
1460 <link linkend="_namespace____pstl_1_1____internal_1a5f2267ae5935da96528156e02f6f4303">__pattern_reverse</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
1462 {
1463 &#32;&#32;&#32;&#32;__par_backend::__parallel_for(
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__first&#32;+&#32;(__last&#32;-&#32;__first)&#32;/&#32;2,
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector,&#32;__first,&#32;__last](_BidirectionalIterator&#32;__inner_first,&#32;_BidirectionalIterator&#32;__inner_last)&#32;{
1466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__internal::__brick_reverse</link>(__inner_first,&#32;__inner_last,&#32;__last&#32;-&#32;(__inner_first&#32;-&#32;__first),&#32;__is_vector);
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1468 }
1469 
1470 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1471 <emphasis role="comment">//&#32;reverse_copy</emphasis>
1472 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1473 
1474 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
1475 _OutputIterator
1476 <link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__brick_reverse_copy</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;_OutputIterator&#32;__d_first,
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1478 {
1479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aa750b5b7ee58a0ba12515997f5066c49">std::reverse_copy</link>(__first,&#32;__last,&#32;__d_first);
1480 }
1481 
1482 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
1483 _OutputIterator
1484 <link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__brick_reverse_copy</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;_OutputIterator&#32;__d_first,
1485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1486 {
1487 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_BidirectionalIterator&gt;::reference&#32;_ReferenceType1;
1488 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_OutputIterator&gt;::reference&#32;_ReferenceType2;
1489 
1490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932">__unseq_backend::__simd_walk_2</link>(std::reverse_iterator&lt;_BidirectionalIterator&gt;(__last),&#32;__last&#32;-&#32;__first,
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__d_first,&#32;[](_ReferenceType1&#32;__x,&#32;_ReferenceType2&#32;__y)&#32;{&#32;__y&#32;=&#32;__x;&#32;});
1492 }
1493 
1494 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1495 _OutputIterator
1496 <link linkend="_namespace____pstl_1_1____internal_1af2c72d8af8666a15b6ddcdbd7756cce0">__pattern_reverse_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__d_first,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1498 {
1499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__internal::__brick_reverse_copy</link>(__first,&#32;__last,&#32;__d_first,&#32;__is_vector);
1500 }
1501 
1502 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1503 _OutputIterator
1504 <link linkend="_namespace____pstl_1_1____internal_1af2c72d8af8666a15b6ddcdbd7756cce0">__pattern_reverse_copy</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__d_first,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
1506 {
1507 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;__last&#32;-&#32;__first;
1508 &#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector,&#32;__first,&#32;__len,&#32;__d_first](_BidirectionalIterator&#32;__inner_first,
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__inner_last)&#32;{
1511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__internal::__brick_reverse_copy</link>(__inner_first,&#32;__inner_last,
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__d_first&#32;+&#32;(__len&#32;-&#32;(__inner_last&#32;-&#32;__first)),
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d_first&#32;+&#32;__len;
1516 }
1517 
1518 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1519 <emphasis role="comment">//&#32;rotate</emphasis>
1520 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1521 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
1522 _ForwardIterator
1523 <link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__brick_rotate</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,&#32;_ForwardIterator&#32;__last,
1524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1525 {
1526 <emphasis role="preprocessor">#if&#32;_PSTL_CPP11_STD_ROTATE_BROKEN</emphasis>
1527 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e">std::rotate</link>(__first,&#32;__middle,&#32;__last);
1528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::next(__first,&#32;std::distance(__middle,&#32;__last));
1529 <emphasis role="preprocessor">#else</emphasis>
1530 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac75ea63fabdb7cfcc58a907d7ac2ae8e">std::rotate</link>(__first,&#32;__middle,&#32;__last);
1531 <emphasis role="preprocessor">#endif</emphasis>
1532 }
1533 
1534 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
1535 _ForwardIterator
1536 <link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__brick_rotate</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,&#32;_ForwardIterator&#32;__last,
1537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1538 {
1539 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
1540 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__m&#32;=&#32;__middle&#32;-&#32;__first;
1541 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator&#32;__ret&#32;=&#32;__first&#32;+&#32;(__last&#32;-&#32;__middle);
1542 
1543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_left&#32;=&#32;(__m&#32;&lt;=&#32;__n&#32;/&#32;2);
1544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__is_left)
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m&#32;=&#32;__n&#32;-&#32;__m;
1546 
1547 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;&gt;&#32;1&#32;&amp;&amp;&#32;__m&#32;&gt;&#32;0)
1548 &#32;&#32;&#32;&#32;{
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::iter_swap;
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__m_2&#32;=&#32;__m&#32;*&#32;2;
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_left)
1552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__last&#32;-&#32;__first&#32;&gt;=&#32;__m_2;&#32;__first&#32;+=&#32;__m)
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__unseq_backend::__simd_assign</link>(__first,&#32;__m,&#32;__first&#32;+&#32;__m,
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_swap&lt;_ForwardIterator,&#32;_ForwardIterator&gt;);
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__last&#32;-&#32;__first&#32;&gt;=&#32;__m_2;&#32;__last&#32;-=&#32;__m)
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__unseq_backend::__simd_assign</link>(__last&#32;-&#32;__m,&#32;__m,&#32;__last&#32;-&#32;__m_2,
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_swap&lt;_ForwardIterator,&#32;_ForwardIterator&gt;);
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_left&#32;=&#32;!__is_left;
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m&#32;=&#32;__n&#32;%&#32;__m;
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
1570 &#32;&#32;&#32;&#32;}
1571 
1572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1573 }
1574 
1575 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1576 _ForwardIterator
1577 <link linkend="_namespace____pstl_1_1____internal_1aa1344d4c056259b28555671b7a23108d">__pattern_rotate</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,&#32;_ForwardIterator&#32;__last,
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1579 {
1580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__internal::__brick_rotate</link>(__first,&#32;__middle,&#32;__last,&#32;__is_vector);
1581 }
1582 
1583 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1584 _ForwardIterator
1585 <link linkend="_namespace____pstl_1_1____internal_1aa1344d4c056259b28555671b7a23108d">__pattern_rotate</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
1587 {
1588 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_Tp;
1589 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
1590 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__m&#32;=&#32;__middle&#32;-&#32;__first;
1591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m&#32;&lt;=&#32;__n&#32;/&#32;2)
1592 &#32;&#32;&#32;&#32;{
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__buffer&lt;_Tp&gt;&#32;__buf(__n&#32;-&#32;__m);
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__n,&#32;__m,&#32;__first,&#32;__middle,&#32;__last,&#32;__is_vector,&#32;&amp;__buf]()&#32;{
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__result&#32;=&#32;__buf.get();
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__middle,&#32;__last,
1598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__middle,&#32;__result,&#32;__is_vector](_ForwardIterator&#32;__b,&#32;_ForwardIterator&#32;__e)&#32;{
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1af0e19ee5ecb61c1dc825f6cf32f73187">__internal::__brick_uninitialized_move</link>(__b,&#32;__e,&#32;__result&#32;+&#32;(__b&#32;-&#32;__middle),&#32;__is_vector);
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1601 
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__middle,
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__last,&#32;__middle,&#32;__is_vector](_ForwardIterator&#32;__b,&#32;_ForwardIterator&#32;__e)&#32;{
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__internal::__brick_move</link>(__b,&#32;__e,&#32;__b&#32;+&#32;(__last&#32;-&#32;__middle),
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1607 
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__result,&#32;__result&#32;+&#32;(__n&#32;-&#32;__m),
1609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__result,&#32;__is_vector](_Tp*&#32;__b,&#32;_Tp*&#32;__e)&#32;{
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick_move_destroy()(
1611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b,&#32;__e,&#32;__first&#32;+&#32;(__b&#32;-&#32;__result),&#32;__is_vector);
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1613 
1614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;(__last&#32;-&#32;__middle);
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1616 &#32;&#32;&#32;&#32;}
1617 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1618 &#32;&#32;&#32;&#32;{
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__buffer&lt;_Tp&gt;&#32;__buf(__m);
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__n,&#32;__m,&#32;__first,&#32;__middle,&#32;__last,&#32;__is_vector,&#32;&amp;__buf]()&#32;{
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__result&#32;=&#32;__buf.get();
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__middle,
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__result,&#32;__is_vector](_ForwardIterator&#32;__b,&#32;_ForwardIterator&#32;__e)&#32;{
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1af0e19ee5ecb61c1dc825f6cf32f73187">__internal::__brick_uninitialized_move</link>(
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b,&#32;__e,&#32;__result&#32;+&#32;(__b&#32;-&#32;__first),&#32;__is_vector);
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1627 
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__middle,&#32;__last,
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__middle,&#32;__is_vector](_ForwardIterator&#32;__b,&#32;_ForwardIterator&#32;__e)&#32;{
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__internal::__brick_move</link>(__b,&#32;__e,&#32;__first&#32;+&#32;(__b&#32;-&#32;__middle),
1631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1633 
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__result,&#32;__result&#32;+&#32;__m,
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__n,&#32;__m,&#32;__first,&#32;__result,&#32;__is_vector](_Tp*&#32;__b,&#32;_Tp*&#32;__e)&#32;{
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick_move_destroy()(
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b,&#32;__e,&#32;__first&#32;+&#32;((__n&#32;-&#32;__m)&#32;+&#32;(__b&#32;-&#32;__result)),&#32;__is_vector);
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1639 
1640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;(__last&#32;-&#32;__middle);
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1642 &#32;&#32;&#32;&#32;}
1643 }
1644 
1645 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1646 <emphasis role="comment">//&#32;rotate_copy</emphasis>
1647 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1648 
1649 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
1650 _OutputIterator
1651 <link linkend="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d">__brick_rotate_copy</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,&#32;_ForwardIterator&#32;__last,
1652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1653 {
1654 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a6a632f2677de3977838e216e3a33338c">std::rotate_copy</link>(__first,&#32;__middle,&#32;__last,&#32;__result);
1655 }
1656 
1657 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
1658 _OutputIterator
1659 <link linkend="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d">__brick_rotate_copy</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,&#32;_ForwardIterator&#32;__last,
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1661 {
1662 &#32;&#32;&#32;&#32;_OutputIterator&#32;__res&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__middle,&#32;__last,&#32;__result,&#32;std::true_type());
1663 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__first,&#32;__middle,&#32;__res,&#32;std::true_type());
1664 }
1665 
1666 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1667 _OutputIterator
1668 <link linkend="_namespace____pstl_1_1____internal_1a6a5ba3b17e77b55a76e8ed1b6130f2e2">__pattern_rotate_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,&#32;_ForwardIterator&#32;__last,
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1670 {
1671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d">__internal::__brick_rotate_copy</link>(__first,&#32;__middle,&#32;__last,&#32;__result,&#32;__is_vector);
1672 }
1673 
1674 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1675 _OutputIterator
1676 <link linkend="_namespace____pstl_1_1____internal_1a6a5ba3b17e77b55a76e8ed1b6130f2e2">__pattern_rotate_copy</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__middle,
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,&#32;_IsVector&#32;__is_vector,
1678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
1679 {
1680 &#32;&#32;&#32;&#32;__par_backend::__parallel_for(
1681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__last,&#32;__middle,&#32;__result,&#32;__is_vector](_ForwardIterator&#32;__b,&#32;_ForwardIterator&#32;__e)&#32;{
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b&#32;&gt;&#32;__middle)
1684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__b,&#32;__e,&#32;__result&#32;+&#32;(__b&#32;-&#32;__middle),&#32;__is_vector);
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__new_result&#32;=&#32;__result&#32;+&#32;((__last&#32;-&#32;__middle)&#32;+&#32;(__b&#32;-&#32;__first));
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__e&#32;&lt;&#32;__middle)
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__b,&#32;__e,&#32;__new_result,&#32;__is_vector);
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__b,&#32;__middle,&#32;__new_result,&#32;__is_vector);
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__middle,&#32;__e,&#32;__result,&#32;__is_vector);
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;(__last&#32;-&#32;__first);
1702 }
1703 
1704 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1705 <emphasis role="comment">//&#32;is_partitioned</emphasis>
1706 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1707 
1708 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
1709 <emphasis role="keywordtype">bool</emphasis>
1710 <link linkend="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd">__brick_is_partitioned</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1712 {
1713 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1437bae2cd332f755a3e88e264a04525">std::is_partitioned</link>(__first,&#32;__last,&#32;__pred);
1714 }
1715 
1716 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
1717 <emphasis role="keywordtype">bool</emphasis>
1718 <link linkend="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd">__brick_is_partitioned</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1720 {
1721 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type&#32;_SizeType;
1722 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1723 &#32;&#32;&#32;&#32;{
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1725 &#32;&#32;&#32;&#32;}
1726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1727 &#32;&#32;&#32;&#32;{
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;_SizeType(0),&#32;__last&#32;-&#32;__first,
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__pred](_ForwardIterator&#32;__it,&#32;_SizeType&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__pred(__it[__i]);&#32;});
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;==&#32;__last)
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__result;
1738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a84dca71a2f0e2711f0e53a5894296ca7">__unseq_backend::__simd_or</link>(__result,&#32;__last&#32;-&#32;__result,&#32;__pred);
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1740 &#32;&#32;&#32;&#32;}
1741 }
1742 
1743 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1744 <emphasis role="keywordtype">bool</emphasis>
1745 <link linkend="_namespace____pstl_1_1____internal_1a3c61e6bb9156e92c5f8e13ad0c5e5e5b">__pattern_is_partitioned</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1747 {
1748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd">__internal::__brick_is_partitioned</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
1749 }
1750 
1751 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1752 <emphasis role="keywordtype">bool</emphasis>
1753 <link linkend="_namespace____pstl_1_1____internal_1a3c61e6bb9156e92c5f8e13ad0c5e5e5b">__pattern_is_partitioned</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
1755 {
1756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
1757 &#32;&#32;&#32;&#32;{
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1759 &#32;&#32;&#32;&#32;}
1760 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1761 &#32;&#32;&#32;&#32;{
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;State&#32;of&#32;current&#32;range:</emphasis>
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;broken&#32;&#32;&#32;&#32;&#32;-&#32;current&#32;range&#32;is&#32;not&#32;partitioned&#32;by&#32;pred</emphasis>
1765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all_true&#32;&#32;&#32;-&#32;all&#32;elements&#32;in&#32;current&#32;range&#32;satisfy&#32;pred</emphasis>
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all_false&#32;&#32;-&#32;all&#32;elements&#32;in&#32;current&#32;range&#32;don&apos;t&#32;satisfy&#32;pred</emphasis>
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;true_false&#32;-&#32;elements&#32;satisfy&#32;pred&#32;are&#32;placed&#32;before&#32;elements&#32;that&#32;don&apos;t&#32;satisfy&#32;pred</emphasis>
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_ReduceType
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_init&#32;=&#32;-1,
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__broken,
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__all_true,
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__all_false,
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__true_false
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ReduceType&#32;__init&#32;=&#32;__not_init;
1777 
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Array&#32;with&#32;states&#32;that&#32;we&apos;ll&#32;have&#32;when&#32;state&#32;from&#32;the&#32;left&#32;branch&#32;is&#32;merged&#32;with&#32;state&#32;from&#32;the&#32;right&#32;branch.</emphasis>
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;State&#32;is&#32;calculated&#32;by&#32;formula:&#32;new_state&#32;=&#32;table[left_state&#32;*&#32;4&#32;+&#32;right_state]</emphasis>
1780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ReduceType&#32;__table[]&#32;=&#32;{__broken,&#32;&#32;&#32;&#32;&#32;__broken,&#32;&#32;&#32;&#32;&#32;__broken,&#32;&#32;&#32;&#32;&#32;__broken,&#32;__broken,&#32;&#32;&#32;&#32;__all_true,
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__true_false,&#32;__true_false,&#32;__broken,&#32;&#32;&#32;&#32;&#32;__broken,&#32;__all_false,&#32;__broken,
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__broken,&#32;&#32;&#32;&#32;&#32;__broken,&#32;&#32;&#32;&#32;&#32;__true_false,&#32;__broken};
1783 
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__init&#32;=&#32;__par_backend::__parallel_reduce(
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__init,
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__pred,&#32;&amp;__table,&#32;__is_vector](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j,
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ReduceType&#32;__value)&#32;-&gt;&#32;_ReduceType&#32;{
1788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__value&#32;==&#32;__broken)
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__broken;
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ReduceType&#32;__res&#32;=&#32;__not_init;
1793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;first&#32;element&#32;satisfy&#32;pred</emphasis>
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pred(*__i))
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;first&#32;element&#32;that&#32;don&apos;t&#32;satisfy&#32;pred</emphasis>
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__x&#32;=
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(__i&#32;+&#32;1,&#32;__j,&#32;std::not_fn(__pred),&#32;__is_vector);
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x&#32;!=&#32;__j)
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;first&#32;element&#32;after&#32;&quot;x&quot;&#32;that&#32;satisfy&#32;pred</emphasis>
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__y&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(__x&#32;+&#32;1,&#32;__j,&#32;__pred,&#32;__is_vector);
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;it&#32;was&#32;found&#32;then&#32;range&#32;isn&apos;t&#32;partitioned&#32;by&#32;pred</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;!=&#32;__j)
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__broken;
1807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res&#32;=&#32;__true_false;
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res&#32;=&#32;__all_true;
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;first&#32;element&#32;doesn&apos;t&#32;satisfy&#32;pred</emphasis>
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;we&#32;should&#32;find&#32;the&#32;first&#32;element&#32;that&#32;satisfy&#32;pred.</emphasis>
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;found&#32;it&#32;then&#32;range&#32;isn&apos;t&#32;partitioned&#32;by&#32;pred</emphasis>
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__internal::__brick_find_if</link>(__i&#32;+&#32;1,&#32;__j,&#32;__pred,&#32;__is_vector)&#32;!=&#32;__j)
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__broken;
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res&#32;=&#32;__all_false;
1829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;we&#32;have&#32;value&#32;from&#32;left&#32;range&#32;then&#32;we&#32;should&#32;calculate&#32;the&#32;result</emphasis>
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__value&#32;==&#32;-1)&#32;?&#32;__res&#32;:&#32;__table[__value&#32;*&#32;4&#32;+&#32;__res];
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1834 
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__table](_ReduceType&#32;__val1,&#32;_ReduceType&#32;__val2)&#32;-&gt;&#32;_ReduceType&#32;{
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__val1&#32;==&#32;__broken&#32;||&#32;__val2&#32;==&#32;__broken)
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__broken;
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;the&#32;result&#32;for&#32;new&#32;big&#32;range</emphasis>
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__table[__val1&#32;*&#32;4&#32;+&#32;__val2];
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__init&#32;!=&#32;__broken;
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1845 &#32;&#32;&#32;&#32;}
1846 }
1847 
1848 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1849 <emphasis role="comment">//&#32;partition</emphasis>
1850 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1851 
1852 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
1853 _ForwardIterator
1854 <link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__brick_partition</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1856 {
1857 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">std::partition</link>(__first,&#32;__last,&#32;__pred);
1858 }
1859 
1860 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
1861 _ForwardIterator
1862 <link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__brick_partition</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1864 {
1865 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
1866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">std::partition</link>(__first,&#32;__last,&#32;__pred);
1867 }
1868 
1869 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1870 _ForwardIterator
1871 <link linkend="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523">__pattern_partition</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1873 {
1874 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__internal::__brick_partition</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
1875 }
1876 
1877 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1878 _ForwardIterator
1879 <link linkend="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523">__pattern_partition</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
1881 {
1882 
1883 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;partitioned&#32;range:&#32;elements&#32;before&#32;pivot&#32;satisfy&#32;pred&#32;(true&#32;part),</emphasis>
1884 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elements&#32;after&#32;pivot&#32;don&apos;t&#32;satisfy&#32;pred&#32;(false&#32;part)</emphasis>
1885 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_PartitionRange
1886 &#32;&#32;&#32;&#32;{
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__begin;
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__pivot;
1889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__end;
1890 &#32;&#32;&#32;&#32;};
1891 
1892 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PartitionRange&#32;__init{__last,&#32;__last,&#32;__last};
1894 
1895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lambda&#32;for&#32;merging&#32;two&#32;partitioned&#32;ranges&#32;to&#32;one&#32;partitioned&#32;range</emphasis>
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__reductor&#32;=&#32;[&amp;__exec,&#32;__is_vector](_PartitionRange&#32;__val1,&#32;_PartitionRange&#32;__val2)&#32;-&gt;&#32;_PartitionRange&#32;{
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__size1&#32;=&#32;__val1.__end&#32;-&#32;__val1.__pivot;
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__size2&#32;=&#32;__val2.__pivot&#32;-&#32;__val2.__begin;
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__new_begin&#32;=&#32;__val2.__begin&#32;-&#32;(__val1.__end&#32;-&#32;__val1.__begin);
1900 
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;all&#32;elements&#32;in&#32;left&#32;range&#32;satisfy&#32;pred&#32;then&#32;we&#32;can&#32;move&#32;new&#32;pivot&#32;to&#32;pivot&#32;of&#32;right&#32;range</emphasis>
1902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__val1.__end&#32;==&#32;__val1.__pivot)
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__new_begin,&#32;__val2.__pivot,&#32;__val2.__end};
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;true&#32;part&#32;of&#32;right&#32;range&#32;greater&#32;than&#32;false&#32;part&#32;of&#32;left&#32;range</emphasis>
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;we&#32;should&#32;swap&#32;the&#32;false&#32;part&#32;of&#32;left&#32;range&#32;and&#32;last&#32;part&#32;of&#32;true&#32;part&#32;of&#32;right&#32;range</emphasis>
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size2&#32;&gt;&#32;__size1)
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__val1.__pivot,&#32;__val1.__pivot&#32;+&#32;__size1,
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__val1,&#32;__val2,&#32;__size1,&#32;__is_vector](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j)&#32;{
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__internal::__brick_swap_ranges(__i,&#32;__j,&#32;(__val2.__pivot&#32;-&#32;__size1)&#32;+&#32;(__i&#32;-&#32;__val1.__pivot),
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__new_begin,&#32;__val2.__pivot&#32;-&#32;__size1,&#32;__val2.__end};
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;we&#32;should&#32;swap&#32;the&#32;first&#32;part&#32;of&#32;false&#32;part&#32;of&#32;left&#32;range&#32;and&#32;true&#32;part&#32;of&#32;right&#32;range</emphasis>
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__val1.__pivot,&#32;__val1.__pivot&#32;+&#32;__size2,
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__val1,&#32;__val2,&#32;__is_vector](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j)&#32;{
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__internal::__brick_swap_ranges(__i,&#32;__j,&#32;__val2.__begin&#32;+&#32;(__i&#32;-&#32;__val1.__pivot),&#32;__is_vector);
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__new_begin,&#32;__val1.__pivot&#32;+&#32;__size2,&#32;__val2.__end};
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1929 
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PartitionRange&#32;__result&#32;=&#32;__par_backend::__parallel_reduce(
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__init,
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__pred,&#32;__is_vector,&#32;__reductor](_ForwardIterator&#32;__i,&#32;_ForwardIterator&#32;__j,
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PartitionRange&#32;__value)&#32;-&gt;&#32;_PartitionRange&#32;{
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//1.&#32;serial&#32;partition</emphasis>
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__pivot&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__internal::__brick_partition</link>(__i,&#32;__j,&#32;__pred,&#32;__is_vector);
1936 
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;merging&#32;of&#32;two&#32;ranges&#32;(left&#32;and&#32;right&#32;respectively)</emphasis>
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__reductor(__value,&#32;{__i,&#32;__pivot,&#32;__j});
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__reductor);
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result.__pivot;
1942 &#32;&#32;&#32;&#32;});
1943 }
1944 
1945 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1946 <emphasis role="comment">//&#32;stable_partition</emphasis>
1947 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1948 
1949 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
1950 _BidirectionalIterator
1951 <link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__brick_stable_partition</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1953 {
1954 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">std::stable_partition</link>(__first,&#32;__last,&#32;__pred);
1955 }
1956 
1957 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
1958 _BidirectionalIterator
1959 <link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__brick_stable_partition</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1961 {
1962 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
1963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1afd107e6f24ea89b04af2b04b929601b4">std::stable_partition</link>(__first,&#32;__last,&#32;__pred);
1964 }
1965 
1966 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1967 _BidirectionalIterator
1968 <link linkend="_namespace____pstl_1_1____internal_1a8c278dd40fdab60b98fd9a0046876130">__pattern_stable_partition</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1971 {
1972 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__internal::__brick_stable_partition</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
1973 }
1974 
1975 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1976 _BidirectionalIterator
1977 <link linkend="_namespace____pstl_1_1____internal_1a8c278dd40fdab60b98fd9a0046876130">__pattern_stable_partition</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__last,
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1980 {
1981 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;partitioned&#32;range:&#32;elements&#32;before&#32;pivot&#32;satisfy&#32;pred&#32;(true&#32;part),</emphasis>
1982 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elements&#32;after&#32;pivot&#32;don&apos;t&#32;satisfy&#32;pred&#32;(false&#32;part)</emphasis>
1983 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_PartitionRange
1984 &#32;&#32;&#32;&#32;{
1985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__begin;
1986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__pivot;
1987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__end;
1988 &#32;&#32;&#32;&#32;};
1989 
1990 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
1991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PartitionRange&#32;__init{__last,&#32;__last,&#32;__last};
1992 
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lambda&#32;for&#32;merging&#32;two&#32;partitioned&#32;ranges&#32;to&#32;one&#32;partitioned&#32;range</emphasis>
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__reductor&#32;=&#32;[__is_vector](_PartitionRange&#32;__val1,&#32;_PartitionRange&#32;__val2)&#32;-&gt;&#32;_PartitionRange&#32;{
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__size1&#32;=&#32;__val1.__end&#32;-&#32;__val1.__pivot;
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__new_begin&#32;=&#32;__val2.__begin&#32;-&#32;(__val1.__end&#32;-&#32;__val1.__begin);
1997 
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;all&#32;elements&#32;in&#32;left&#32;range&#32;satisfy&#32;pred&#32;then&#32;we&#32;can&#32;move&#32;new&#32;pivot&#32;to&#32;pivot&#32;of&#32;right&#32;range</emphasis>
1999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__val1.__end&#32;==&#32;__val1.__pivot)
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__new_begin,&#32;__val2.__pivot,&#32;__val2.__end};
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;true&#32;part&#32;of&#32;right&#32;range&#32;greater&#32;than&#32;false&#32;part&#32;of&#32;left&#32;range</emphasis>
2004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;we&#32;should&#32;swap&#32;the&#32;false&#32;part&#32;of&#32;left&#32;range&#32;and&#32;last&#32;part&#32;of&#32;true&#32;part&#32;of&#32;right&#32;range</emphasis>
2005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__internal::__brick_rotate</link>(__val1.__pivot,&#32;__val2.__begin,&#32;__val2.__pivot,&#32;__is_vector);
2008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__new_begin,&#32;__val2.__pivot&#32;-&#32;__size1,&#32;__val2.__end};
2009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2011 
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PartitionRange&#32;__result&#32;=&#32;__par_backend::__parallel_reduce(
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__init,
2014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__pred,&#32;__is_vector,&#32;__reductor](_BidirectionalIterator&#32;__i,&#32;_BidirectionalIterator&#32;__j,
2015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PartitionRange&#32;__value)&#32;-&gt;&#32;_PartitionRange&#32;{
2016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//1.&#32;serial&#32;stable_partition</emphasis>
2017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__pivot&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__internal::__brick_stable_partition</link>(__i,&#32;__j,&#32;__pred,&#32;__is_vector);
2018 
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;merging&#32;of&#32;two&#32;ranges&#32;(left&#32;and&#32;right&#32;respectively)</emphasis>
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__reductor(__value,&#32;{__i,&#32;__pivot,&#32;__j});
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__reductor);
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result.__pivot;
2024 &#32;&#32;&#32;&#32;});
2025 }
2026 
2027 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2028 <emphasis role="comment">//&#32;partition_copy</emphasis>
2029 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2030 
2031 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
2032 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
2033 <link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__brick_partition_copy</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator1&#32;__out_true,
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator2&#32;__out_false,&#32;_UnaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2035 {
2036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b">std::partition_copy</link>(__first,&#32;__last,&#32;__out_true,&#32;__out_false,&#32;__pred);
2037 }
2038 
2039 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
2040 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
2041 <link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__brick_partition_copy</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator1&#32;__out_true,
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator2&#32;__out_false,&#32;_UnaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2043 {
2044 <emphasis role="preprocessor">#if&#32;(_PSTL_MONOTONIC_PRESENT)</emphasis>
2045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1ac6ab4cceb121c8d40ff90ab47badf64c">__unseq_backend::__simd_partition_copy</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__out_true,&#32;__out_false,&#32;__pred);
2046 <emphasis role="preprocessor">#else</emphasis>
2047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a7ecc1add6d1142770929cc97a10d801b">std::partition_copy</link>(__first,&#32;__last,&#32;__out_true,&#32;__out_false,&#32;__pred);
2048 <emphasis role="preprocessor">#endif</emphasis>
2049 }
2050 
2051 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator2,
2052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryPredicate,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
2053 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
2054 <link linkend="_namespace____pstl_1_1____internal_1a213f0e051dd1ea6261325ac6f2f65cb2">__pattern_partition_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator1&#32;__out_true,&#32;_OutputIterator2&#32;__out_false,&#32;_UnaryPredicate&#32;__pred,
2056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2057 {
2058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__internal::__brick_partition_copy</link>(__first,&#32;__last,&#32;__out_true,&#32;__out_false,&#32;__pred,&#32;__is_vector);
2059 }
2060 
2061 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator2,
2062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryPredicate,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
2063 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
2064 <link linkend="_namespace____pstl_1_1____internal_1a213f0e051dd1ea6261325ac6f2f65cb2">__pattern_partition_copy</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
2065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator1&#32;__out_true,&#32;_OutputIterator2&#32;__out_false,&#32;_UnaryPredicate&#32;__pred,
2066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::true_type)
2067 {
2068 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_DifferenceType;
2069 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;_DifferenceType,&#32;_DifferenceType&gt;&#32;_ReturnType;
2070 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
2071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_DifferenceType(1)&#32;&lt;&#32;__n)
2072 &#32;&#32;&#32;&#32;{
2073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__buffer&lt;bool&gt;&#32;__mask_buf(__n);
2074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__n,&#32;__first,&#32;__out_true,&#32;__out_false,&#32;__is_vector,&#32;__pred,
2075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;__mask_buf]()&#32;{
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mask&#32;=&#32;__mask_buf.get();
2077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ReturnType&#32;__m{};
2078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_strict_scan(
2079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__n,&#32;std::make_pair(_DifferenceType(0),&#32;_DifferenceType(0)),
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len)&#32;{&#32;<emphasis role="comment">//&#32;Reduce</emphasis>
2081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__internal::__brick_calc_mask_1&lt;_DifferenceType&gt;(__first&#32;+&#32;__i,&#32;__first&#32;+&#32;(__i&#32;+&#32;__len),
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+&#32;__i,&#32;__pred,&#32;__is_vector);
2083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;_ReturnType&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_ReturnType&amp;&#32;__y)&#32;-&gt;&#32;_ReturnType&#32;{
2085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__x.first&#32;+&#32;__y.first,&#32;__x.second&#32;+&#32;__y.second);
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Combine</emphasis>
2087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len,&#32;_ReturnType&#32;__initial)&#32;{&#32;<emphasis role="comment">//&#32;Scan</emphasis>
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__internal::__brick_partition_by_mask</link>(__first&#32;+&#32;__i,&#32;__first&#32;+&#32;(__i&#32;+&#32;__len),
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__out_true&#32;+&#32;__initial.first,&#32;__out_false&#32;+&#32;__initial.second,
2090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mask&#32;+&#32;__i,&#32;__is_vector);
2091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__m](_ReturnType&#32;__total)&#32;{&#32;__m&#32;=&#32;__total;&#32;});
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__out_true&#32;+&#32;__m.first,&#32;__out_false&#32;+&#32;__m.second);
2094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2095 &#32;&#32;&#32;&#32;}
2096 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trivial&#32;sequence&#32;-&#32;use&#32;serial&#32;algorithm</emphasis>
2097 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__internal::__brick_partition_copy</link>(__first,&#32;__last,&#32;__out_true,&#32;__out_false,&#32;__pred,&#32;__is_vector);
2098 }
2099 
2100 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2101 <emphasis role="comment">//&#32;sort</emphasis>
2102 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2103 
2104 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector,
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsMoveConstructible&gt;
2106 <emphasis role="keywordtype">void</emphasis>
2107 <link linkend="_namespace____pstl_1_1____internal_1a5ccc13fdf58da10d6d45be7770ad0a4c">__pattern_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsMoveConstructible)&#32;<emphasis role="keyword">noexcept</emphasis>
2109 {
2110 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link>(__first,&#32;__last,&#32;__comp);
2111 }
2112 
2113 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2114 <emphasis role="keywordtype">void</emphasis>
2115 <link linkend="_namespace____pstl_1_1____internal_1a5ccc13fdf58da10d6d45be7770ad0a4c">__pattern_sort</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;<emphasis role="comment">/*is_move_constructible=*/</emphasis>std::true_type)
2117 {
2118 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_stable_sort(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__comp,
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
2121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)&#32;{&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link>(__first,&#32;__last,&#32;__comp);&#32;});
2122 &#32;&#32;&#32;&#32;});
2123 }
2124 
2125 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2126 <emphasis role="comment">//&#32;stable_sort</emphasis>
2127 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2128 
2129 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2130 <emphasis role="keywordtype">void</emphasis>
2131 <link linkend="_namespace____pstl_1_1____internal_1aee8744385f4f206ef9dd2c11f1af9b48">__pattern_stable_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2133 {
2134 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">std::stable_sort</link>(__first,&#32;__last,&#32;__comp);
2135 }
2136 
2137 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2138 <emphasis role="keywordtype">void</emphasis>
2139 <link linkend="_namespace____pstl_1_1____internal_1aee8744385f4f206ef9dd2c11f1af9b48">__pattern_stable_sort</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
2141 {
2142 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_stable_sort(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__comp,
2144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)&#32;{&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">std::stable_sort</link>(__first,&#32;__last,&#32;__comp);&#32;});
2146 &#32;&#32;&#32;&#32;});
2147 }
2148 
2149 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2150 <emphasis role="comment">//&#32;partial_sort</emphasis>
2151 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2152 
2153 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2154 <emphasis role="keywordtype">void</emphasis>
2155 <link linkend="_namespace____pstl_1_1____internal_1a913b070daf38b8f0c138c1c5df02f47c">__pattern_partial_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__middle,
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,&#32;_IsVector,
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2158 {
2159 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">std::partial_sort</link>(__first,&#32;__middle,&#32;__last,&#32;__comp);
2160 }
2161 
2162 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2163 <emphasis role="keywordtype">void</emphasis>
2164 <link linkend="_namespace____pstl_1_1____internal_1a913b070daf38b8f0c138c1c5df02f47c">__pattern_partial_sort</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__middle,
2165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
2166 {
2167 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__middle&#32;-&#32;__first;
2168 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
2169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2170 
2171 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_stable_sort(
2173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__comp,
2174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__n](_RandomAccessIterator&#32;__begin,&#32;_RandomAccessIterator&#32;__end,&#32;_Compare&#32;__comp)&#32;{
2175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;&#32;__end&#32;-&#32;__begin)
2176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">std::partial_sort</link>(__begin,&#32;__begin&#32;+&#32;__n,&#32;__end,&#32;__comp);
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link>(__begin,&#32;__end,&#32;__comp);
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n);
2181 &#32;&#32;&#32;&#32;});
2182 }
2183 
2184 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2185 <emphasis role="comment">//&#32;partial_sort_copy</emphasis>
2186 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2187 
2188 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2189 _RandomAccessIterator
2190 <link linkend="_namespace____pstl_1_1____internal_1ac7fa2ccc37779ff9c32374cab3d19453">__pattern_partial_sort_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__d_first,&#32;_RandomAccessIterator&#32;__d_last,&#32;_Compare&#32;__comp,&#32;_IsVector,
2192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2193 {
2194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aede1625926fee2cb08e34aed9a057213">std::partial_sort_copy</link>(__first,&#32;__last,&#32;__d_first,&#32;__d_last,&#32;__comp);
2195 }
2196 
2197 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2198 _RandomAccessIterator
2199 <link linkend="_namespace____pstl_1_1____internal_1ac7fa2ccc37779ff9c32374cab3d19453">__pattern_partial_sort_copy</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__d_first,&#32;_RandomAccessIterator&#32;__d_last,&#32;_Compare&#32;__comp,
2201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
2202 {
2203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;==&#32;__first&#32;||&#32;__d_last&#32;==&#32;__d_first)
2204 &#32;&#32;&#32;&#32;{
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d_first;
2206 &#32;&#32;&#32;&#32;}
2207 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n1&#32;=&#32;__last&#32;-&#32;__first;
2208 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;__d_last&#32;-&#32;__d_first;
2209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2&#32;&gt;=&#32;__n1)
2211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_stable_sort(
2213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__d_first,&#32;__d_first&#32;+&#32;__n1,&#32;__comp,
2214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__d_first,&#32;__is_vector](_RandomAccessIterator&#32;__i,&#32;_RandomAccessIterator&#32;__j,
2215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)&#32;{
2216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;=&#32;__first&#32;+&#32;(__i&#32;-&#32;__d_first);
2217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__j1&#32;=&#32;__first&#32;+&#32;(__j&#32;-&#32;__d_first);
2218 
2219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.&#32;Copy&#32;elements&#32;from&#32;input&#32;to&#32;output</emphasis>
2220 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;if&#32;!_PSTL_ICC_18_OMP_SIMD_BROKEN</emphasis>
2221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__j1,&#32;__i,&#32;__is_vector);
2222 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;else</emphasis>
2223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">std::copy</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__j1,&#32;__i);
2224 <emphasis role="preprocessor">#&#32;&#32;&#32;&#32;endif</emphasis>
2225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;Sort&#32;elements&#32;in&#32;output&#32;sequence</emphasis>
2226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link>(__i,&#32;__j,&#32;__comp);
2227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n1);
2229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d_first&#32;+&#32;__n1;
2230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_T1;
2234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::value_type&#32;_T2;
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__buffer&lt;_T1&gt;&#32;__buf(__n1);
2236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_T1*&#32;__r&#32;=&#32;__buf.get();
2237 
2238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_stable_sort(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__r,&#32;__r&#32;+&#32;__n1,&#32;__comp,
2239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__n2,&#32;__first,&#32;__r](_T1*&#32;__i,&#32;_T1*&#32;__j,&#32;_Compare&#32;__comp)&#32;{
2240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator&#32;__it&#32;=&#32;__first&#32;+&#32;(__i&#32;-&#32;__r);
2241 
2242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.&#32;Copy&#32;elements&#32;from&#32;input&#32;to&#32;raw&#32;memory</emphasis>
2243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_T1*&#32;__k&#32;=&#32;__i;&#32;__k&#32;!=&#32;__j;&#32;++__k,&#32;++__it)
2244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(__k)&#32;_T2(*__it);
2246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2247 
2248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;Sort&#32;elements&#32;in&#32;temporary&#32;__buffer</emphasis>
2249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2&#32;&lt;&#32;__j&#32;-&#32;__i)
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">std::partial_sort</link>(__i,&#32;__i&#32;+&#32;__n2,&#32;__j,&#32;__comp);
2251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link>(__i,&#32;__j,&#32;__comp);
2253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n2);
2255 
2256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3.&#32;Move&#32;elements&#32;from&#32;temporary&#32;__buffer&#32;to&#32;output</emphasis>
2257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__r,&#32;__r&#32;+&#32;__n2,
2258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__r,&#32;__d_first,&#32;__is_vector](_T1*&#32;__i,&#32;_T1*&#32;__j)&#32;{
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick_move_destroy()(
2260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i,&#32;__j,&#32;__d_first&#32;+&#32;(__i&#32;-&#32;__r),&#32;__is_vector);
2261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
2263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__r&#32;+&#32;__n2,&#32;__r&#32;+&#32;__n1,
2264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_T1*&#32;__i,&#32;_T1*&#32;__j)&#32;{&#32;<link linkend="_namespace____pstl_1_1____internal_1a30e2ecbaecd03b7e1e3d0b9eeaed24db">__brick_destroy</link>(__i,&#32;__j,&#32;__is_vector);&#32;});
2265 
2266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d_first&#32;+&#32;__n2;
2267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2268 &#32;&#32;&#32;&#32;});
2269 }
2270 
2271 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2272 <emphasis role="comment">//&#32;adjacent_find</emphasis>
2273 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2274 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
2275 _ForwardIterator
2276 <link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__brick_adjacent_find</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_BinaryPredicate&#32;__pred,
2277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;IsVector&#32;=&#32;*/</emphasis>&#32;std::true_type,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__or_semantic)&#32;<emphasis role="keyword">noexcept</emphasis>
2278 {
2279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1adc51efbb93e46158542f104631cfa2e3">__unseq_backend::__simd_adjacent_find</link>(__first,&#32;__last,&#32;__pred,&#32;__or_semantic);
2280 }
2281 
2282 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
2283 _ForwardIterator
2284 <link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__brick_adjacent_find</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_BinaryPredicate&#32;__pred,
2285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;IsVector&#32;=&#32;*/</emphasis>&#32;std::false_type,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
2286 {
2287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">std::adjacent_find</link>(__first,&#32;__last,&#32;__pred);
2288 }
2289 
2290 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2291 _ForwardIterator
2292 <link linkend="_namespace____pstl_1_1____internal_1a6baa124378ed7fdc525b00a43af706ab">__pattern_adjacent_find</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_BinaryPredicate&#32;__pred,
2293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::false_type,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__or_semantic)&#32;<emphasis role="keyword">noexcept</emphasis>
2294 {
2295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__internal::__brick_adjacent_find</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector,&#32;__or_semantic);
2296 }
2297 
2298 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2299 _RandomAccessIterator
2300 <link linkend="_namespace____pstl_1_1____internal_1a6baa124378ed7fdc525b00a43af706ab">__pattern_adjacent_find</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
2301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::true_type,&#32;_IsVector&#32;__is_vector,
2302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__or_semantic)
2303 {
2304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;&lt;&#32;2)
2305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
2306 
2307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__par_backend::__parallel_reduce(
2309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__last,
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__last,&#32;__pred,&#32;__is_vector,&#32;__or_semantic](_RandomAccessIterator&#32;__begin,&#32;_RandomAccessIterator&#32;__end,
2311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__value)&#32;-&gt;&#32;_RandomAccessIterator&#32;{
2312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;investigate&#32;performance&#32;benefits&#32;from&#32;the&#32;use&#32;of&#32;shared&#32;variable&#32;for&#32;the&#32;result,</emphasis>
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;checking&#32;(compare_and_swap&#32;idiom)&#32;its&#32;__value&#32;at&#32;__first.</emphasis>
2314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__or_semantic&#32;&amp;&amp;&#32;__value&#32;&lt;&#32;__last)
2315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//found</emphasis>
2316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__cancel_execution();
2317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__value;
2318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2319 
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__value&#32;&gt;&#32;__begin)
2321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modify&#32;__end&#32;to&#32;check&#32;the&#32;predicate&#32;on&#32;the&#32;boundary&#32;__values;</emphasis>
2323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;to&#32;use&#32;a&#32;custom&#32;range&#32;with&#32;boundaries&#32;overlapping</emphasis>
2324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;investigate&#32;what&#32;if&#32;we&#32;remove&#32;&quot;if&quot;&#32;below&#32;and&#32;run&#32;algorithm&#32;on&#32;range&#32;[__first,&#32;__last-1)</emphasis>
2325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;then&#32;check&#32;the&#32;pair&#32;[__last-1,&#32;__last)</emphasis>
2326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__end&#32;!=&#32;__last)
2327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__end;
2328 
2329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//correct&#32;the&#32;global&#32;result&#32;iterator&#32;if&#32;the&#32;&quot;brick&quot;&#32;returns&#32;a&#32;local&#32;&quot;__last&quot;</emphasis>
2330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessIterator&#32;__res&#32;=
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__internal::__brick_adjacent_find</link>(__begin,&#32;__end,&#32;__pred,&#32;__is_vector,&#32;__or_semantic);
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__res&#32;&lt;&#32;__end)
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__value&#32;=&#32;__res;
2334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__value;
2336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_RandomAccessIterator&#32;__x,&#32;_RandomAccessIterator&#32;__y)&#32;-&gt;&#32;_RandomAccessIterator&#32;{
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&lt;&#32;__y&#32;?&#32;__x&#32;:&#32;__y;
2339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//reduce&#32;a&#32;__value</emphasis>
2340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
2341 &#32;&#32;&#32;&#32;});
2342 }
2343 
2344 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2345 <emphasis role="comment">//&#32;nth_element</emphasis>
2346 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2347 
2348 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2349 <emphasis role="keywordtype">void</emphasis>
2350 <link linkend="_namespace____pstl_1_1____internal_1a1d4194f0c17340011a1f84e4123b368a">__pattern_nth_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__nth,
2351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,&#32;_IsVector,
2352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2353 {
2354 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">std::nth_element</link>(__first,&#32;__nth,&#32;__last,&#32;__comp);
2355 }
2356 
2357 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2358 <emphasis role="keywordtype">void</emphasis>
2359 <link linkend="_namespace____pstl_1_1____internal_1a1d4194f0c17340011a1f84e4123b368a">__pattern_nth_element</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__nth,
2360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,
2361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2362 {
2363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last&#32;||&#32;__nth&#32;==&#32;__last)
2364 &#32;&#32;&#32;&#32;{
2365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2366 &#32;&#32;&#32;&#32;}
2367 
2368 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::iter_swap;
2369 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::value_type&#32;_Tp;
2370 &#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__x;
2371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
2372 &#32;&#32;&#32;&#32;{
2373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523">__internal::__pattern_partition</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first&#32;+&#32;1,&#32;__last,
2374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__comp,&#32;__first](<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(__x,&#32;*__first);&#32;},
2375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector,
2376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type());
2377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__x;
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x&#32;!=&#32;__first)
2379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_swap(__first,&#32;__x);
2381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;x&#32;&gt;&#32;nth&#32;then&#32;our&#32;new&#32;range&#32;for&#32;partition&#32;is&#32;[first,&#32;x)</emphasis>
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x&#32;-&#32;__nth&#32;&gt;&#32;0)
2384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last&#32;=&#32;__x;
2386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;x&#32;&lt;&#32;nth&#32;then&#32;our&#32;new&#32;range&#32;for&#32;partition&#32;is&#32;[x,&#32;last)</emphasis>
2388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x&#32;-&#32;__nth&#32;&lt;&#32;0)
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;*x&#32;==&#32;*nth&#32;then&#32;we&#32;can&#32;start&#32;new&#32;partition&#32;with&#32;x+1</emphasis>
2391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__comp(*__nth,&#32;*__x)&#32;&amp;&amp;&#32;!__comp(*__x,&#32;*__nth))
2392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__x;
2394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_swap(__nth,&#32;__x);
2398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first&#32;=&#32;__x;
2400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2401 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__x&#32;!=&#32;__nth);
2402 }
2403 
2404 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2405 <emphasis role="comment">//&#32;fill,&#32;fill_n</emphasis>
2406 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2407 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
2408 <emphasis role="keywordtype">void</emphasis>
2409 <link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__brick_fill</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
2410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2411 {
2412 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a983f96df75978314ca65ca251d12dcca">__unseq_backend::__simd_fill_n</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__value);
2413 }
2414 
2415 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
2416 <emphasis role="keywordtype">void</emphasis>
2417 <link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__brick_fill</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2419 {
2420 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill</link>(__first,&#32;__last,&#32;__value);
2421 }
2422 
2423 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2424 <emphasis role="keywordtype">void</emphasis>
2425 <link linkend="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9">__pattern_fill</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector&#32;__is_vector)&#32;<emphasis role="keyword">noexcept</emphasis>
2427 {
2428 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__internal::__brick_fill</link>(__first,&#32;__last,&#32;__value,&#32;__is_vector);
2429 }
2430 
2431 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2432 _ForwardIterator
2433 <link linkend="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9">__pattern_fill</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
2434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector&#32;__is_vector)
2435 {
2436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__first,&#32;__last,&#32;&amp;__value,&#32;__is_vector]()&#32;{
2437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
2438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__value,&#32;__is_vector](_ForwardIterator&#32;__begin,&#32;_ForwardIterator&#32;__end)&#32;{
2439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__internal::__brick_fill</link>(__begin,&#32;__end,&#32;__value,&#32;__is_vector);
2440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
2442 &#32;&#32;&#32;&#32;});
2443 }
2444 
2445 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
2446 _OutputIterator
2447 <link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__brick_fill_n</link>(_OutputIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2448 {
2449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a983f96df75978314ca65ca251d12dcca">__unseq_backend::__simd_fill_n</link>(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value);
2450 }
2451 
2452 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
2453 _OutputIterator
2454 <link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__brick_fill_n</link>(_OutputIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2455 {
2456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ad0962bae53d415481fe8bc9f90239d37">std::fill_n</link>(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value);
2457 }
2458 
2459 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2460 _OutputIterator
2461 <link linkend="_namespace____pstl_1_1____internal_1ad46a2d1af24aa54224f2adc68ef625ce">__pattern_fill_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_OutputIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
2462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector&#32;__is_vector)&#32;<emphasis role="keyword">noexcept</emphasis>
2463 {
2464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__internal::__brick_fill_n</link>(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value,&#32;__is_vector);
2465 }
2466 
2467 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2468 _OutputIterator
2469 <link linkend="_namespace____pstl_1_1____internal_1ad46a2d1af24aa54224f2adc68ef625ce">__pattern_fill_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_OutputIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
2470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector&#32;__is_vector)
2471 {
2472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9">__internal::__pattern_fill</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__first&#32;+&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__value,
2473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type(),&#32;__is_vector);
2474 }
2475 
2476 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2477 <emphasis role="comment">//&#32;generate,&#32;generate_n</emphasis>
2478 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2479 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
2480 <emphasis role="keywordtype">void</emphasis>
2481 <link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__brick_generate</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Generator&#32;__g,
2482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2483 {
2484 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a688fc4a4ac7c94084efa0a2ba118fbbd">__unseq_backend::__simd_generate_n</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__g);
2485 }
2486 
2487 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
2488 <emphasis role="keywordtype">void</emphasis>
2489 <link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__brick_generate</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Generator&#32;__g,
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2491 {
2492 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">std::generate</link>(__first,&#32;__last,&#32;__g);
2493 }
2494 
2495 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2496 <emphasis role="keywordtype">void</emphasis>
2497 <link linkend="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d">__pattern_generate</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Generator&#32;__g,
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector&#32;__is_vector)&#32;<emphasis role="keyword">noexcept</emphasis>
2499 {
2500 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__internal::__brick_generate</link>(__first,&#32;__last,&#32;__g,&#32;__is_vector);
2501 }
2502 
2503 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2504 _ForwardIterator
2505 <link linkend="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d">__pattern_generate</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Generator&#32;__g,
2506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector&#32;__is_vector)
2507 {
2508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__g,&#32;__is_vector](_ForwardIterator&#32;__begin,&#32;_ForwardIterator&#32;__end)&#32;{
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__internal::__brick_generate</link>(__begin,&#32;__end,&#32;__g,&#32;__is_vector);
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
2514 &#32;&#32;&#32;&#32;});
2515 }
2516 
2517 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
2518 OutputIterator
2519 <link linkend="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23">__brick_generate_n</link>(OutputIterator&#32;__first,&#32;<link linkend="_struct_size">Size</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_Generator&#32;__g,&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2520 {
2521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a688fc4a4ac7c94084efa0a2ba118fbbd">__unseq_backend::__simd_generate_n</link>(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__g);
2522 }
2523 
2524 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
2525 OutputIterator
2526 <link linkend="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23">__brick_generate_n</link>(OutputIterator&#32;__first,&#32;<link linkend="_struct_size">Size</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_Generator&#32;__g,&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2527 {
2528 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">std::generate_n</link>(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__g);
2529 }
2530 
2531 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2532 _OutputIterator
2533 <link linkend="_namespace____pstl_1_1____internal_1a89ba2dce127a80f7bc0578270c7fcb9c">__pattern_generate_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_OutputIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_Generator&#32;__g,
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector&#32;__is_vector)&#32;<emphasis role="keyword">noexcept</emphasis>
2535 {
2536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23">__internal::__brick_generate_n</link>(__first,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__g,&#32;__is_vector);
2537 }
2538 
2539 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2540 _OutputIterator
2541 <link linkend="_namespace____pstl_1_1____internal_1a89ba2dce127a80f7bc0578270c7fcb9c">__pattern_generate_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_OutputIterator&#32;__first,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_Generator&#32;__g,
2542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector&#32;__is_vector)
2543 {
2544 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_1aea3ab79a62a13675de893e16c2f24cc0">__is_random_access_iterator&lt;_OutputIterator&gt;::value</link>,
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Pattern-brick&#32;error.&#32;Should&#32;be&#32;a&#32;random&#32;access&#32;iterator.&quot;</emphasis>);
2546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d">__internal::__pattern_generate</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__first&#32;+&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;__g,
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type(),&#32;__is_vector);
2548 }
2549 
2550 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2551 <emphasis role="comment">//&#32;remove</emphasis>
2552 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2553 
2554 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
2555 _ForwardIterator
2556 <link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__brick_remove_if</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
2557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2558 {
2559 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908">std::remove_if</link>(__first,&#32;__last,&#32;__pred);
2560 }
2561 
2562 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
2563 _RandomAccessIterator
2564 <link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__brick_remove_if</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
2565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2566 {
2567 <emphasis role="preprocessor">#if&#32;_PSTL_MONOTONIC_PRESENT</emphasis>
2568 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1af3e3465f13790c9379d715942bfd8234">__unseq_backend::__simd_remove_if</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__pred);
2569 <emphasis role="preprocessor">#else</emphasis>
2570 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af35a5645ec4634e402bf77d3edcaa908">std::remove_if</link>(__first,&#32;__last,&#32;__pred);
2571 <emphasis role="preprocessor">#endif</emphasis>
2572 }
2573 
2574 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2575 _ForwardIterator
2576 <link linkend="_namespace____pstl_1_1____internal_1ab7a6c74a4cb2c2ee930c2da12b6cd686">__pattern_remove_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_UnaryPredicate&#32;__pred,
2577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2578 {
2579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__internal::__brick_remove_if</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
2580 }
2581 
2582 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2583 _ForwardIterator
2584 <link linkend="_namespace____pstl_1_1____internal_1ab7a6c74a4cb2c2ee930c2da12b6cd686">__pattern_remove_if</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
2585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate&#32;__pred,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2586 {
2587 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
2588 
2589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last&#32;||&#32;__first&#32;+&#32;1&#32;==&#32;__last)
2590 &#32;&#32;&#32;&#32;{
2591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Trivial&#32;sequence&#32;-&#32;use&#32;serial&#32;algorithm</emphasis>
2592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__internal::__brick_remove_if</link>(__first,&#32;__last,&#32;__pred,&#32;__is_vector);
2593 &#32;&#32;&#32;&#32;}
2594 
2595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ab96ad0e98fb260ea102f3a20ddc0dbf0">__internal::__remove_elements</link>(
2596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
2597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__pred,&#32;__is_vector](<emphasis role="keywordtype">bool</emphasis>*&#32;__b,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__e,&#32;_ForwardIterator&#32;__it)&#32;{
2598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__internal::__brick_walk2</link>(__b,&#32;__e,&#32;__it,&#32;[&amp;__pred](<emphasis role="keywordtype">bool</emphasis>&amp;&#32;__x,&#32;_ReferenceType&#32;__y)&#32;{&#32;__x&#32;=&#32;!__pred(__y);&#32;},
2599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
2600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
2602 }
2603 
2604 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2605 <emphasis role="comment">//&#32;merge</emphasis>
2606 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2607 
2608 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
2609 _OutputIterator
2610 <link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__brick_merge</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
2611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__d_first,&#32;_Compare&#32;__comp,
2612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2613 {
2614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">std::merge</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__d_first,&#32;__comp);
2615 }
2616 
2617 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
2618 _OutputIterator
2619 <link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__brick_merge</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
2620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__d_first,&#32;_Compare&#32;__comp,
2621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2622 {
2623 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
2624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">std::merge</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__d_first,&#32;__comp);
2625 }
2626 
2627 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
2628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
2629 _OutputIterator
2630 <link linkend="_namespace____pstl_1_1____internal_1a76f9badc9cf4092c8e996b0564a8a8d2">__pattern_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
2631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__d_first,&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,
2632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2633 {
2634 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__internal::__brick_merge</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__d_first,&#32;__comp,&#32;__is_vector);
2635 }
2636 
2637 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
2638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
2639 _OutputIterator
2640 <link linkend="_namespace____pstl_1_1____internal_1a76f9badc9cf4092c8e996b0564a8a8d2">__pattern_merge</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
2641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_RandomAccessIterator2&#32;__last2,&#32;_OutputIterator&#32;__d_first,
2642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)
2643 {
2644 &#32;&#32;&#32;&#32;__par_backend::__parallel_merge(
2645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__d_first,&#32;__comp,
2646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_RandomAccessIterator1&#32;__f1,&#32;_RandomAccessIterator1&#32;__l1,&#32;_RandomAccessIterator2&#32;__f2,
2647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__l2,&#32;_OutputIterator&#32;__f3,&#32;_Compare&#32;__comp)&#32;{
2648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__internal::__brick_merge</link>(__f1,&#32;__l1,&#32;__f2,&#32;__l2,&#32;__f3,&#32;__comp,&#32;__is_vector);
2649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d_first&#32;+&#32;(__last1&#32;-&#32;__first1)&#32;+&#32;(__last2&#32;-&#32;__first2);
2651 }
2652 
2653 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2654 <emphasis role="comment">//&#32;inplace_merge</emphasis>
2655 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2656 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
2657 <emphasis role="keywordtype">void</emphasis>
2658 <link linkend="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001">__brick_inplace_merge</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__middle,&#32;_BidirectionalIterator&#32;__last,
2659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2660 {
2661 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1e57e7ac29f9c775cbcefa93feb3d2b1">std::inplace_merge</link>(__first,&#32;__middle,&#32;__last,&#32;__comp);
2662 }
2663 
2664 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
2665 <emphasis role="keywordtype">void</emphasis>
2666 <link linkend="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001">__brick_inplace_merge</link>(_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__middle,&#32;_BidirectionalIterator&#32;__last,
2667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2668 {
2669 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>)
2670 &#32;&#32;&#32;&#32;<link linkend="_namespacestd">std</link>::inplace_merge(__first,&#32;__middle,&#32;__last,&#32;__comp);
2671 }
2672 
2673 template&#32;&lt;class&#32;_ExecutionPolicy,&#32;class&#32;_BidirectionalIterator,&#32;class&#32;_Compare,&#32;class&#32;_IsVector&gt;
2674 <emphasis role="keywordtype">void</emphasis>
2675 <link linkend="_namespace____pstl_1_1____internal_1a28f4f64e2180b392ca4c226ee3c76d7c">__pattern_inplace_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__middle,
2676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,
2677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;<link linkend="_namespacestd">std</link>::false_type)&#32;noexcept
2678 {
2679 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001">__internal::__brick_inplace_merge</link>(__first,&#32;__middle,&#32;__last,&#32;__comp,&#32;__is_vector);
2680 }
2681 
2682 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2683 <emphasis role="keywordtype">void</emphasis>
2684 <link linkend="_namespace____pstl_1_1____internal_1a28f4f64e2180b392ca4c226ee3c76d7c">__pattern_inplace_merge</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_BidirectionalIterator&#32;__first,&#32;_BidirectionalIterator&#32;__middle,
2685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__last,&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,
2686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
2687 {
2688 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last&#32;||&#32;__first&#32;==&#32;__middle&#32;||&#32;__middle&#32;==&#32;__last)
2689 &#32;&#32;&#32;&#32;{
2690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2691 &#32;&#32;&#32;&#32;}
2692 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_BidirectionalIterator&gt;::value_type&#32;_Tp;
2693 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;__last&#32;-&#32;__first;
2694 &#32;&#32;&#32;&#32;__par_backend::__buffer&lt;_Tp&gt;&#32;__buf(__n);
2695 &#32;&#32;&#32;&#32;_Tp*&#32;__r&#32;=&#32;__buf.get();
2696 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__move_values&#32;=&#32;[](_BidirectionalIterator&#32;__x,&#32;_Tp*&#32;__z)&#32;{
2698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__internal::__invoke_if_else</link>(std::is_trivial&lt;_Tp&gt;(),&#32;[&amp;]()&#32;{&#32;*__z&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__x);&#32;},
2699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{&#32;::new&#32;(std::addressof(*__z))&#32;_Tp(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*__x));&#32;});
2700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2701 
2702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__move_sequences&#32;=&#32;[](_BidirectionalIterator&#32;__first1,&#32;_BidirectionalIterator&#32;__last1,&#32;_Tp*&#32;__first2)&#32;{
2703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1af0e19ee5ecb61c1dc825f6cf32f73187">__internal::__brick_uninitialized_move</link>(__first1,&#32;__last1,&#32;__first2,&#32;_IsVector());
2704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2705 
2706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_merge(
2707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__middle,&#32;__middle,&#32;__last,&#32;__r,&#32;__comp,
2708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__n,&#32;__move_values,&#32;__move_sequences](_BidirectionalIterator&#32;__f1,&#32;_BidirectionalIterator&#32;__l1,
2709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BidirectionalIterator&#32;__f2,&#32;_BidirectionalIterator&#32;__l2,&#32;_Tp*&#32;__f3,
2710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp)&#32;{
2711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__utils::__serial_move_merge(__n))(__f1,&#32;__l1,&#32;__f2,&#32;__l2,&#32;__f3,&#32;__comp,&#32;__move_values,&#32;__move_values,
2712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__move_sequences,&#32;__move_sequences);
2713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__f3&#32;+&#32;(__l1&#32;-&#32;__f1)&#32;+&#32;(__l2&#32;-&#32;__f2);
2714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_for(
2716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__r,&#32;__r&#32;+&#32;__n,&#32;[__r,&#32;__first,&#32;__is_vector](_Tp*&#32;__i,&#32;_Tp*&#32;__j)&#32;{
2717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick_move_destroy()(__i,&#32;__j,&#32;__first&#32;+&#32;(__i&#32;-&#32;__r),&#32;__is_vector);
2718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2719 &#32;&#32;&#32;&#32;});
2720 }
2721 
2722 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2723 <emphasis role="comment">//&#32;includes</emphasis>
2724 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2725 
2726 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2727 <emphasis role="keywordtype">bool</emphasis>
2728 <link linkend="_namespace____pstl_1_1____internal_1af4bd54f061b9f4a0d379383965a84e62">__pattern_includes</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
2729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_Compare&#32;__comp,&#32;_IsVector,
2730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
2731 {
2732 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">std::includes</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__comp);
2733 }
2734 
2735 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
2736 <emphasis role="keywordtype">bool</emphasis>
2737 <link linkend="_namespace____pstl_1_1____internal_1af4bd54f061b9f4a0d379383965a84e62">__pattern_includes</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
2738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_Compare&#32;__comp,&#32;_IsVector,
2739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
2740 {
2741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;&gt;=&#32;__last2)
2742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2743 
2744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;&gt;=&#32;__last1&#32;||&#32;__comp(*__first2,&#32;*__first1)&#32;||&#32;__comp(*(__last1&#32;-&#32;1),&#32;*(__last2&#32;-&#32;1)))
2745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2746 
2747 &#32;&#32;&#32;&#32;__first1&#32;=&#32;std::lower_bound(__first1,&#32;__last1,&#32;*__first2,&#32;__comp);
2748 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
2749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2750 
2751 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last2&#32;-&#32;__first2&#32;==&#32;1)
2752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__comp(*__first1,&#32;*__first2)&#32;&amp;&amp;&#32;!__comp(*__first2,&#32;*__first1);
2753 
2754 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
2755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespace____pstl_1_1____internal_1a0b24f24f2dfdffa3149539596892d0b0">__internal::__parallel_or</link>(
2756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first2,&#32;__last2,
2757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;&amp;__comp](_ForwardIterator2&#32;__i,&#32;_ForwardIterator2&#32;__j)&#32;{
2758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(__j&#32;&gt;&#32;__i);
2759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//assert(__j&#32;-&#32;__i&#32;&gt;&#32;1);</emphasis>
2760 
2761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//1.&#32;moving&#32;boundaries&#32;to&#32;&quot;consume&quot;&#32;subsequence&#32;of&#32;equal&#32;elements</emphasis>
2762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_equal&#32;=&#32;[&amp;__comp](_ForwardIterator2&#32;__a,&#32;_ForwardIterator2&#32;__b)&#32;-&gt;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{
2763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__comp(*__a,&#32;*__b)&#32;&amp;&amp;&#32;!__comp(*__b,&#32;*__a);
2764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2765 
2766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//1.1&#32;left&#32;bound,&#32;case&#32;&quot;aaa[aaaxyz...]&quot;&#32;-&#32;searching&#32;&quot;x&quot;</emphasis>
2767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;&gt;&#32;__first2&#32;&amp;&amp;&#32;__is_equal(__i,&#32;__i&#32;-&#32;1))
2768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//whole&#32;subrange&#32;continues&#32;to&#32;content&#32;equal&#32;elements&#32;-&#32;return&#32;&quot;no&#32;op&quot;</emphasis>
2770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__is_equal(__i,&#32;__j&#32;-&#32;1))
2771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2772 
2773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__i&#32;=&#32;std::upper_bound(__i,&#32;__last2,&#32;*__i,&#32;__comp);
2774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2775 
2776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//1.2&#32;right&#32;bound,&#32;case&#32;&quot;[...aaa]aaaxyz&quot;&#32;-&#32;searching&#32;&quot;x&quot;</emphasis>
2777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__j&#32;&lt;&#32;__last2&#32;&amp;&amp;&#32;__is_equal(__j&#32;-&#32;1,&#32;__j))
2778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__j&#32;=&#32;std::upper_bound(__j,&#32;__last2,&#32;*__j,&#32;__comp);
2779 
2780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//2.&#32;testing&#32;is&#32;__a&#32;subsequence&#32;of&#32;the&#32;second&#32;range&#32;included&#32;into&#32;the&#32;first&#32;range</emphasis>
2781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;std::lower_bound(__first1,&#32;__last1,&#32;*__i,&#32;__comp);
2782 
2783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(!__comp(*(__last1&#32;-&#32;1),&#32;*__b));
2784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_PSTL_ASSERT(!__comp(*(__j&#32;-&#32;1),&#32;*__i));
2785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespacestd_1adb975e56185878896dee97fb7fb84156">std::includes</link>(__b,&#32;__last1,&#32;__i,&#32;__j,&#32;__comp);
2786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2787 &#32;&#32;&#32;&#32;});
2788 }
2789 
2790 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>&#32;=&#32;1000;
2791 
2792 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
2793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector,&#32;<emphasis role="keyword">class&#32;</emphasis>_SizeFunction,&#32;<emphasis role="keyword">class&#32;</emphasis>_SetOP&gt;
2794 _OutputIterator
2795 <link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__parallel_set_op</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
2796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
2797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeFunction&#32;__size_func,&#32;_SetOP&#32;__set_op,&#32;_IsVector&#32;__is_vector)
2798 {
2799 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&#32;_DifferenceType;
2800 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_OutputIterator&gt;::value_type&#32;_Tp;
2801 
2802 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SetRange
2803 &#32;&#32;&#32;&#32;{
2804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__pos,&#32;__len,&#32;__buf_pos;
2805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;empty()<emphasis role="keyword">&#32;const</emphasis>
2807 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__len&#32;==&#32;0;
2809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2810 &#32;&#32;&#32;&#32;};
2811 
2812 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__n1&#32;=&#32;__last1&#32;-&#32;__first1;
2813 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__n2&#32;=&#32;__last2&#32;-&#32;__first2;
2814 
2815 &#32;&#32;&#32;&#32;__par_backend::__buffer&lt;_Tp&gt;&#32;__buf(__size_func(__n1,&#32;__n2));
2816 
2817 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;__exec,&#32;__n1,&#32;__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__is_vector,
2818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__size_func,&#32;__set_op,&#32;&amp;__buf]()&#32;{
2819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__buffer&#32;=&#32;__buf.get();
2820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__m{};
2821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__scan&#32;=&#32;[=](_DifferenceType,&#32;_DifferenceType,&#32;<emphasis role="keyword">const</emphasis>&#32;_SetRange&amp;&#32;__s)&#32;{&#32;<emphasis role="comment">//&#32;Scan</emphasis>
2822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__s.empty())
2823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__brick_move_destroy()(__buffer&#32;+&#32;__s.__buf_pos,
2824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__buffer&#32;+&#32;(__s.__buf_pos&#32;+&#32;__s.__len),&#32;__result&#32;+&#32;__s.__pos,
2825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
2826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
2827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_strict_scan(
2828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__n1,&#32;_SetRange{0,&#32;0,&#32;0},&#32;<emphasis role="comment">//-1,&#32;0},</emphasis>
2829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_DifferenceType&#32;__i,&#32;_DifferenceType&#32;__len)&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reduce</emphasis>
2830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//[__b;&#32;__e)&#32;-&#32;a&#32;subrange&#32;of&#32;the&#32;first&#32;sequence,&#32;to&#32;reduce</emphasis>
2831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator1&#32;__b&#32;=&#32;__first1&#32;+&#32;__i,&#32;__e&#32;=&#32;__first1&#32;+&#32;(__i&#32;+&#32;__len);
2832 
2833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//try&#32;searching&#32;for&#32;the&#32;first&#32;element&#32;which&#32;not&#32;equal&#32;to&#32;*__b</emphasis>
2834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b&#32;!=&#32;__first1)
2835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b&#32;=&#32;std::upper_bound(__b,&#32;__last1,&#32;*__b,&#32;__comp);
2836 
2837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//try&#32;searching&#32;for&#32;the&#32;first&#32;element&#32;which&#32;not&#32;equal&#32;to&#32;*__e</emphasis>
2838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__e&#32;!=&#32;__last1)
2839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__e&#32;=&#32;std::upper_bound(__e,&#32;__last1,&#32;*__e,&#32;__comp);
2840 
2841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//check&#32;is&#32;[__b;&#32;__e)&#32;empty</emphasis>
2842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__e&#32;-&#32;__b&#32;&lt;&#32;1)
2843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__bb&#32;=&#32;__last2;
2845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b&#32;!=&#32;__last1)
2846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bb&#32;=&#32;std::lower_bound(__first2,&#32;__last2,&#32;*__b,&#32;__comp);
2847 
2848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__buf_pos&#32;=&#32;__size_func((__b&#32;-&#32;__first1),&#32;(__bb&#32;-&#32;__first2));
2849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SetRange{0,&#32;0,&#32;__buf_pos};
2850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2851 
2852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//try&#32;searching&#32;for&#32;&quot;corresponding&quot;&#32;subrange&#32;[__bb;&#32;__ee)&#32;in&#32;the&#32;second&#32;sequence</emphasis>
2853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__bb&#32;=&#32;__first2;
2854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b&#32;!=&#32;__first1)
2855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bb&#32;=&#32;std::lower_bound(__first2,&#32;__last2,&#32;*__b,&#32;__comp);
2856 
2857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__ee&#32;=&#32;__last2;
2858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__e&#32;!=&#32;__last1)
2859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ee&#32;=&#32;std::lower_bound(__bb,&#32;__last2,&#32;*__e,&#32;__comp);
2860 
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_DifferenceType&#32;__buf_pos&#32;=&#32;__size_func((__b&#32;-&#32;__first1),&#32;(__bb&#32;-&#32;__first2));
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__buffer_b&#32;=&#32;__buffer&#32;+&#32;__buf_pos;
2863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res&#32;=&#32;__set_op(__b,&#32;__e,&#32;__bb,&#32;__ee,&#32;__buffer_b,&#32;__comp);
2864 
2865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SetRange{0,&#32;__res&#32;-&#32;__buffer_b,&#32;__buf_pos};
2866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">const</emphasis>&#32;_SetRange&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_SetRange&amp;&#32;__b)&#32;{&#32;<emphasis role="comment">//&#32;Combine</emphasis>
2868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__b.__buf_pos&#32;&gt;&#32;__a.__buf_pos&#32;||&#32;((__b.__buf_pos&#32;==&#32;__a.__buf_pos)&#32;&amp;&amp;&#32;!__b.empty()))
2869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SetRange{__a.__pos&#32;+&#32;__a.__len&#32;+&#32;__b.__pos,&#32;__b.__len,&#32;__b.__buf_pos};
2870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SetRange{__b.__pos&#32;+&#32;__b.__len&#32;+&#32;__a.__pos,&#32;__a.__len,&#32;__a.__buf_pos};
2871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scan,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan</emphasis>
2873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__m,&#32;&amp;__scan](<emphasis role="keyword">const</emphasis>&#32;_SetRange&amp;&#32;__total)&#32;{&#32;<emphasis role="comment">//&#32;Apex</emphasis>
2874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//final&#32;scan</emphasis>
2875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scan(0,&#32;0,&#32;__total);
2876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m&#32;=&#32;__total.__pos&#32;+&#32;__total.__len;
2877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;__m;
2879 &#32;&#32;&#32;&#32;});
2880 }
2881 
2882 <emphasis role="comment">//a&#32;shared&#32;parallel&#32;pattern&#32;for&#32;&apos;__pattern_set_union&apos;&#32;and&#32;&apos;__pattern_set_symmetric_difference&apos;</emphasis>
2883 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
2884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_SetUnionOp,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
2885 _OutputIterator
2886 <link linkend="_namespace____pstl_1_1____internal_1a32f3932c1bca5cc9da70582e4ddf540b">__parallel_set_union_op</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
2887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,
2888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_SetUnionOp&#32;__set_union_op,&#32;_IsVector&#32;__is_vector)
2889 {
2890 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&#32;_DifferenceType;
2891 
2892 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n1&#32;=&#32;__last1&#32;-&#32;__first1;
2893 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;__last2&#32;-&#32;__first2;
2894 
2895 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy_range1&#32;=&#32;[__is_vector](_ForwardIterator1&#32;__begin,&#32;_ForwardIterator1&#32;__end,&#32;_OutputIterator&#32;__res)&#32;{
2896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__begin,&#32;__end,&#32;__res,&#32;__is_vector);
2897 &#32;&#32;&#32;&#32;};
2898 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__copy_range2&#32;=&#32;[__is_vector](_ForwardIterator2&#32;__begin,&#32;_ForwardIterator2&#32;__end,&#32;_OutputIterator&#32;__res)&#32;{
2899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__begin,&#32;__end,&#32;__res,&#32;__is_vector);
2900 &#32;&#32;&#32;&#32;};
2901 
2902 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{1}&#32;{}:&#32;parallel&#32;copying&#32;just&#32;first&#32;sequence</emphasis>
2903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2&#32;==&#32;0)
2904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__result,
2905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__copy_range1,&#32;std::true_type());
2906 
2907 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{}&#32;{2}:&#32;parallel&#32;copying&#32;justmake&#32;&#32;second&#32;sequence</emphasis>
2908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n1&#32;==&#32;0)
2909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first2,&#32;__last2,&#32;__result,
2910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__copy_range2,&#32;std::true_type());
2911 
2912 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testing&#32;&#32;whether&#32;the&#32;sequences&#32;are&#32;intersected</emphasis>
2913 &#32;&#32;&#32;&#32;_ForwardIterator1&#32;__left_bound_seq_1&#32;=&#32;std::lower_bound(__first1,&#32;__last1,&#32;*__first2,&#32;__comp);
2914 
2915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__left_bound_seq_1&#32;==&#32;__last1)
2916 &#32;&#32;&#32;&#32;{
2917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{1}&#32;&lt;&#32;{2}:&#32;seq2&#32;is&#32;wholly&#32;greater&#32;than&#32;seq1,&#32;so,&#32;do&#32;parallel&#32;copying&#32;seq1&#32;and&#32;seq2</emphasis>
2918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_invoke(
2919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),
2920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{
2921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__result,
2922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__copy_range1,&#32;std::true_type());
2923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{
2925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first2,&#32;__last2,
2926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+&#32;__n1,&#32;__copy_range2,&#32;std::true_type());
2927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;__n1&#32;+&#32;__n2;
2929 &#32;&#32;&#32;&#32;}
2930 
2931 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testing&#32;&#32;whether&#32;the&#32;sequences&#32;are&#32;intersected</emphasis>
2932 &#32;&#32;&#32;&#32;_ForwardIterator2&#32;__left_bound_seq_2&#32;=&#32;std::lower_bound(__first2,&#32;__last2,&#32;*__first1,&#32;__comp);
2933 
2934 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__left_bound_seq_2&#32;==&#32;__last2)
2935 &#32;&#32;&#32;&#32;{
2936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//{2}&#32;&lt;&#32;{1}:&#32;seq2&#32;is&#32;wholly&#32;greater&#32;than&#32;seq1,&#32;so,&#32;do&#32;parallel&#32;copying&#32;seq1&#32;and&#32;seq2</emphasis>
2937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_invoke(
2938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),
2939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{
2940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first2,&#32;__last2,&#32;__result,
2941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__copy_range2,&#32;std::true_type());
2942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{
2944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,
2945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+&#32;__n2,&#32;__copy_range1,&#32;std::true_type());
2946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result&#32;+&#32;__n1&#32;+&#32;__n2;
2948 &#32;&#32;&#32;&#32;}
2949 
2950 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__m1&#32;=&#32;__left_bound_seq_1&#32;-&#32;__first1;
2951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m1&#32;&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>)
2952 &#32;&#32;&#32;&#32;{
2953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res_or&#32;=&#32;__result;
2954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+=&#32;__m1;&#32;<emphasis role="comment">//we&#32;know&#32;proper&#32;offset&#32;due&#32;to&#32;[first1;&#32;left_bound_seq_1)&#32;&lt;&#32;[first2;&#32;last2)</emphasis>
2955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_invoke(
2956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),
2957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//do&#32;parallel&#32;copying&#32;of&#32;[first1;&#32;left_bound_seq_1)</emphasis>
2958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{
2959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__left_bound_seq_1,
2960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res_or,&#32;__copy_range1,&#32;std::true_type());
2961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=,&#32;&amp;__result]&#32;{
2963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__internal::__parallel_set_op</link>(
2964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__left_bound_seq_1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,
2965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;[](_DifferenceType&#32;__n,&#32;_DifferenceType&#32;__m)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n&#32;+&#32;__m;&#32;},&#32;__set_union_op,
2966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
2967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2969 &#32;&#32;&#32;&#32;}
2970 
2971 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>&#32;=&#32;__left_bound_seq_2&#32;-&#32;__first2;
2972 &#32;&#32;&#32;&#32;_PSTL_ASSERT(__m1&#32;==&#32;0&#32;||&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>&#32;==&#32;0);
2973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>&#32;&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>)
2974 &#32;&#32;&#32;&#32;{
2975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__res_or&#32;=&#32;__result;
2976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>;&#32;<emphasis role="comment">//we&#32;know&#32;proper&#32;offset&#32;due&#32;to&#32;[first2;&#32;left_bound_seq_2)&#32;&lt;&#32;[first1;&#32;last1)</emphasis>
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__par_backend::__parallel_invoke(
2978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),
2979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//do&#32;parallel&#32;copying&#32;of&#32;[first2;&#32;left_bound_seq_2)</emphasis>
2980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=]&#32;{
2981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first2,&#32;__left_bound_seq_2,
2982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res_or,&#32;__copy_range2,&#32;std::true_type());
2983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=,&#32;&amp;__result]&#32;{
2985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__internal::__parallel_set_op</link>(
2986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__left_bound_seq_2,&#32;__last2,&#32;__result,
2987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;[](_DifferenceType&#32;__n,&#32;_DifferenceType&#32;__m)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n&#32;+&#32;__m;&#32;},&#32;__set_union_op,
2988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
2989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
2990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2991 &#32;&#32;&#32;&#32;}
2992 
2993 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__internal::__parallel_set_op</link>(
2994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,
2995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_DifferenceType&#32;__n,&#32;_DifferenceType&#32;__m)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n&#32;+&#32;__m;&#32;},&#32;__set_union_op,&#32;__is_vector);
2996 }
2997 
2998 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
2999 <emphasis role="comment">//&#32;set_union</emphasis>
3000 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3001 
3002 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3003 _OutputIterator
3004 <link linkend="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e">__brick_set_union</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3007 {
3008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">std::set_union</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3009 }
3010 
3011 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
3012 <emphasis role="keyword">struct&#32;</emphasis>__BrickCopyConstruct
3013 {
3014 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
3015 &#32;&#32;&#32;&#32;_OutputIterator
3016 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1_____brick_copy_construct_1a4f4e9153dcc09994eb5a0dc4e70cdea4">operator()</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result)
3017 &#32;&#32;&#32;&#32;{
3018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a4fb75417b7d24445de9704f283dc126b">__brick_uninitialized_copy</link>(__first,&#32;__last,&#32;__result,&#32;_IsVector());
3019 &#32;&#32;&#32;&#32;}
3020 };
3021 
3022 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3023 _OutputIterator
3024 <link linkend="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e">__brick_set_union</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3027 {
3028 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
3029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">std::set_union</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3030 }
3031 
3032 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3034 _OutputIterator
3035 <link linkend="_namespace____pstl_1_1____internal_1a0b5347b92e571caa994698482c35535b">__pattern_set_union</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,
3038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3039 {
3040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e">__internal::__brick_set_union</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,&#32;__is_vector);
3041 }
3042 
3043 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3045 _OutputIterator
3046 <link linkend="_namespace____pstl_1_1____internal_1a0b5347b92e571caa994698482c35535b">__pattern_set_union</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*__is_parallel=*/</emphasis>std::true_type)
3049 {
3050 
3051 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n1&#32;=&#32;__last1&#32;-&#32;__first1;
3052 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;__last2&#32;-&#32;__first2;
3053 
3054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;serial&#32;algorithm</emphasis>
3055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n1&#32;+&#32;__n2&#32;&lt;=&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>)
3056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">std::set_union</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3057 
3058 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_OutputIterator&gt;::value_type&#32;_Tp;
3059 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a32f3932c1bca5cc9da70582e4ddf540b">__parallel_set_union_op</link>(
3060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,
3061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
3062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__result,&#32;_Compare&#32;__comp)&#32;{
3063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____utils_1a9fd3e0e11e12246a436359d3d64982da">__pstl::__utils::__set_union_construct</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,
3064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__BrickCopyConstruct&lt;_IsVector&gt;());
3065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
3067 }
3068 
3069 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3070 <emphasis role="comment">//&#32;set_intersection</emphasis>
3071 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3072 
3073 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3074 _OutputIterator
3075 <link linkend="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2">__brick_set_intersection</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3078 {
3079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">std::set_intersection</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3080 }
3081 
3082 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3083 _OutputIterator
3084 <link linkend="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2">__brick_set_intersection</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3087 {
3088 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
3089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">std::set_intersection</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3090 }
3091 
3092 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3094 _OutputIterator
3095 <link linkend="_namespace____pstl_1_1____internal_1aa71f557e499f46f8fdfcb81c1ade34b3">__pattern_set_intersection</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,
3097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3098 {
3099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2">__internal::__brick_set_intersection</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,&#32;__is_vector);
3100 }
3101 
3102 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3104 _OutputIterator
3105 <link linkend="_namespace____pstl_1_1____internal_1aa71f557e499f46f8fdfcb81c1ade34b3">__pattern_set_intersection</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,
3107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
3108 {
3109 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_OutputIterator&gt;::value_type&#32;_Tp;
3110 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&#32;_DifferenceType;
3111 
3112 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n1&#32;=&#32;__last1&#32;-&#32;__first1;
3113 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;__last2&#32;-&#32;__first2;
3114 
3115 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;intersection&#32;is&#32;empty</emphasis>
3116 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n1&#32;==&#32;0&#32;||&#32;__n2&#32;==&#32;0)
3117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3118 
3119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testing&#32;&#32;whether&#32;the&#32;sequences&#32;are&#32;intersected</emphasis>
3120 &#32;&#32;&#32;&#32;_ForwardIterator1&#32;__left_bound_seq_1&#32;=&#32;std::lower_bound(__first1,&#32;__last1,&#32;*__first2,&#32;__comp);
3121 &#32;&#32;&#32;&#32;<emphasis role="comment">//{1}&#32;&lt;&#32;{2}:&#32;seq&#32;2&#32;is&#32;wholly&#32;greater&#32;than&#32;seq&#32;1,&#32;so,&#32;the&#32;intersection&#32;is&#32;empty</emphasis>
3122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__left_bound_seq_1&#32;==&#32;__last1)
3123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3124 
3125 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testing&#32;&#32;whether&#32;the&#32;sequences&#32;are&#32;intersected</emphasis>
3126 &#32;&#32;&#32;&#32;_ForwardIterator2&#32;__left_bound_seq_2&#32;=&#32;std::lower_bound(__first2,&#32;__last2,&#32;*__first1,&#32;__comp);
3127 &#32;&#32;&#32;&#32;<emphasis role="comment">//{2}&#32;&lt;&#32;{1}:&#32;seq&#32;1&#32;is&#32;wholly&#32;greater&#32;than&#32;seq&#32;2,&#32;so,&#32;the&#32;intersection&#32;is&#32;empty</emphasis>
3128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__left_bound_seq_2&#32;==&#32;__last2)
3129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3130 
3131 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__m1&#32;=&#32;__last1&#32;-&#32;__left_bound_seq_1&#32;+&#32;__n2;
3132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m1&#32;&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>)
3133 &#32;&#32;&#32;&#32;{
3134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//we&#32;know&#32;proper&#32;offset&#32;due&#32;to&#32;[first1;&#32;left_bound_seq_1)&#32;&lt;&#32;[first2;&#32;last2)</emphasis>
3135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__internal::__parallel_set_op</link>(
3136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__left_bound_seq_1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,
3137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_DifferenceType&#32;__n,&#32;_DifferenceType&#32;__m)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::min(__n,&#32;__m);&#32;},
3138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_Tp*&#32;__result,&#32;_Compare&#32;__comp)&#32;{
3140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____utils_1aa698b9a52bd8d7d41db7a4758f6c7132">__pstl::__utils::__set_intersection_construct</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,
3141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
3142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
3144 &#32;&#32;&#32;&#32;}
3145 
3146 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>&#32;=&#32;__last2&#32;-&#32;__left_bound_seq_2&#32;+&#32;__n1;
3147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>&#32;&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>)
3148 &#32;&#32;&#32;&#32;{
3149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//we&#32;know&#32;proper&#32;offset&#32;due&#32;to&#32;[first2;&#32;left_bound_seq_2)&#32;&lt;&#32;[first1;&#32;last1)</emphasis>
3150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__internal::__parallel_set_op</link>(
3151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__left_bound_seq_2,&#32;__last2,&#32;__result,&#32;__comp,
3152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_DifferenceType&#32;__n,&#32;_DifferenceType&#32;__m)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::min(__n,&#32;__m);&#32;},
3153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_Tp*&#32;__result,&#32;_Compare&#32;__comp)&#32;{
3155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____utils_1aa698b9a52bd8d7d41db7a4758f6c7132">__pstl::__utils::__set_intersection_construct</link>(__first2,&#32;__last2,&#32;__first1,&#32;__last1,&#32;__result,
3156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);
3157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
3159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3160 &#32;&#32;&#32;&#32;}
3161 
3162 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[left_bound_seq_1;&#32;last1)&#32;and&#32;[left_bound_seq_2;&#32;last2)&#32;-&#32;use&#32;serial&#32;algorithm</emphasis>
3163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">std::set_intersection</link>(__left_bound_seq_1,&#32;__last1,&#32;__left_bound_seq_2,&#32;__last2,&#32;__result,&#32;__comp);
3164 }
3165 
3166 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3167 <emphasis role="comment">//&#32;set_difference</emphasis>
3168 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3169 
3170 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3171 _OutputIterator
3172 <link linkend="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2">__brick_set_difference</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3175 {
3176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">std::set_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3177 }
3178 
3179 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3180 _OutputIterator
3181 <link linkend="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2">__brick_set_difference</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3184 {
3185 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
3186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">std::set_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3187 }
3188 
3189 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3191 _OutputIterator
3192 <link linkend="_namespace____pstl_1_1____internal_1ae2ac09b3a487a7ba6061822478a08420">__pattern_set_difference</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,
3194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3195 {
3196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2">__internal::__brick_set_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,&#32;__is_vector);
3197 }
3198 
3199 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3201 _OutputIterator
3202 <link linkend="_namespace____pstl_1_1____internal_1ae2ac09b3a487a7ba6061822478a08420">__pattern_set_difference</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,
3204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
3205 {
3206 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_OutputIterator&gt;::value_type&#32;_Tp;
3207 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&#32;_DifferenceType;
3208 
3209 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n1&#32;=&#32;__last1&#32;-&#32;__first1;
3210 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;__last2&#32;-&#32;__first2;
3211 
3212 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{}&#32;\&#32;{2}:&#32;the&#32;difference&#32;is&#32;empty</emphasis>
3213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n1&#32;==&#32;0)
3214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
3215 
3216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;{1}&#32;\&#32;{}:&#32;parallel&#32;copying&#32;just&#32;first&#32;sequence</emphasis>
3217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n2&#32;==&#32;0)
3218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(
3219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__result,
3220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_ForwardIterator1&#32;__begin,&#32;_ForwardIterator1&#32;__end,&#32;_OutputIterator&#32;__res)&#32;{
3221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__begin,&#32;__end,&#32;__res,&#32;__is_vector);
3222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type());
3224 
3225 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testing&#32;&#32;whether&#32;the&#32;sequences&#32;are&#32;intersected</emphasis>
3226 &#32;&#32;&#32;&#32;_ForwardIterator1&#32;__left_bound_seq_1&#32;=&#32;std::lower_bound(__first1,&#32;__last1,&#32;*__first2,&#32;__comp);
3227 &#32;&#32;&#32;&#32;<emphasis role="comment">//{1}&#32;&lt;&#32;{2}:&#32;seq&#32;2&#32;is&#32;wholly&#32;greater&#32;than&#32;seq&#32;1,&#32;so,&#32;parallel&#32;copying&#32;just&#32;first&#32;sequence</emphasis>
3228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__left_bound_seq_1&#32;==&#32;__last1)
3229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(
3230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__result,
3231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_ForwardIterator1&#32;__begin,&#32;_ForwardIterator1&#32;__end,&#32;_OutputIterator&#32;__res)&#32;{
3232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__begin,&#32;__end,&#32;__res,&#32;__is_vector);
3233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type());
3235 
3236 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;testing&#32;&#32;whether&#32;the&#32;sequences&#32;are&#32;intersected</emphasis>
3237 &#32;&#32;&#32;&#32;_ForwardIterator2&#32;__left_bound_seq_2&#32;=&#32;std::lower_bound(__first2,&#32;__last2,&#32;*__first1,&#32;__comp);
3238 &#32;&#32;&#32;&#32;<emphasis role="comment">//{2}&#32;&lt;&#32;{1}:&#32;seq&#32;1&#32;is&#32;wholly&#32;greater&#32;than&#32;seq&#32;2,&#32;so,&#32;parallel&#32;copying&#32;just&#32;first&#32;sequence</emphasis>
3239 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__left_bound_seq_2&#32;==&#32;__last2)
3240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__internal::__pattern_walk2_brick</link>(
3241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__result,
3242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_ForwardIterator1&#32;__begin,&#32;_ForwardIterator1&#32;__end,&#32;_OutputIterator&#32;__res)&#32;{
3243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__internal::__brick_copy</link>(__begin,&#32;__end,&#32;__res,&#32;__is_vector);
3244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type());
3246 
3247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n1&#32;+&#32;__n2&#32;&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>)
3248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__parallel_set_op</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,
3249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;[](_DifferenceType&#32;__n,&#32;_DifferenceType)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__n;&#32;},
3250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_Tp*&#32;__result,&#32;_Compare&#32;__comp)&#32;{
3252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____utils_1a92b2a91d27927cd73dc301b2aa4a01e8">__pstl::__utils::__set_difference_construct</link>(
3253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,
3254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__BrickCopyConstruct&lt;_IsVector&gt;());
3255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
3257 
3258 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;serial&#32;algorithm</emphasis>
3259 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">std::set_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3260 }
3261 
3262 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3263 <emphasis role="comment">//&#32;set_symmetric_difference</emphasis>
3264 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3265 
3266 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3267 _OutputIterator
3268 <link linkend="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8">__brick_set_symmetric_difference</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3271 {
3272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">std::set_symmetric_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3273 }
3274 
3275 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3276 _OutputIterator
3277 <link linkend="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8">__brick_set_symmetric_difference</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
3279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3280 {
3281 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2pstl__config_8h_1a381c7829838eadb56180ef37cf48db9a">_PSTL_PRAGMA_MESSAGE</link>(<emphasis role="stringliteral">&quot;Vectorized&#32;algorithm&#32;unimplemented,&#32;redirected&#32;to&#32;serial&quot;</emphasis>);
3282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">std::set_symmetric_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3283 }
3284 
3285 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3287 _OutputIterator
3288 <link linkend="_namespace____pstl_1_1____internal_1a2468e1a5821a3180a4352135b4ac89c9">__pattern_set_symmetric_difference</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,
3290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3291 {
3292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8">__internal::__brick_set_symmetric_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,
3293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
3294 }
3295 
3296 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
3297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3298 _OutputIterator
3299 <link linkend="_namespace____pstl_1_1____internal_1a2468e1a5821a3180a4352135b4ac89c9">__pattern_set_symmetric_difference</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_OutputIterator&#32;__result,
3301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)
3302 {
3303 
3304 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n1&#32;=&#32;__last1&#32;-&#32;__first1;
3305 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__n2&#32;=&#32;__last2&#32;-&#32;__first2;
3306 
3307 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;use&#32;serial&#32;algorithm</emphasis>
3308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n1&#32;+&#32;__n2&#32;&lt;=&#32;<link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link>)
3309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">std::set_symmetric_difference</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp);
3310 
3311 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_OutputIterator&gt;::value_type&#32;_Tp;
3312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a32f3932c1bca5cc9da70582e4ddf540b">__internal::__parallel_set_union_op</link>(
3313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,&#32;__comp,
3314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,
3315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__result,&#32;_Compare&#32;__comp)&#32;{
3316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____utils_1a9542719b32143ab5eba284709d526268">__pstl::__utils::__set_symmetric_difference_construct</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__result,
3317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__BrickCopyConstruct&lt;_IsVector&gt;());
3318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
3320 }
3321 
3322 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3323 <emphasis role="comment">//&#32;is_heap_until</emphasis>
3324 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3325 
3326 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3327 _RandomAccessIterator
3328 <link linkend="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0">__brick_is_heap_until</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,
3329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3330 {
3331 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ad64dc604fbb7c9f5f08518dfdf695dcf">std::is_heap_until</link>(__first,&#32;__last,&#32;__comp);
3332 }
3333 
3334 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3335 _RandomAccessIterator
3336 <link linkend="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0">__brick_is_heap_until</link>(_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,&#32;_Compare&#32;__comp,
3337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3338 {
3339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;&lt;&#32;2)
3340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3341 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&#32;_SizeType;
3342 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(
3343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;_SizeType(0),&#32;__last&#32;-&#32;__first,
3344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__comp](_RandomAccessIterator&#32;__it,&#32;_SizeType&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(__it[(__i&#32;-&#32;1)&#32;/&#32;2],&#32;__it[__i]);&#32;});
3345 }
3346 
3347 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
3348 _RandomAccessIterator
3349 <link linkend="_namespace____pstl_1_1____internal_1a0fe7d90d58490eee0f9aa2f92a0a48e1">__pattern_is_heap_until</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
3350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3351 {
3352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0">__internal::__brick_is_heap_until</link>(__first,&#32;__last,&#32;__comp,&#32;__is_vector);
3353 }
3354 
3355 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3356 _RandomAccessIterator
3357 <link linkend="_namespace____pstl_1_1____internal_1a421e80a845f245294fb04c66915e4557">__is_heap_until_local</link>(_RandomAccessIterator&#32;__first,&#32;_DifferenceType&#32;__begin,&#32;_DifferenceType&#32;__end,&#32;_Compare&#32;__comp,
3358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3359 {
3360 &#32;&#32;&#32;&#32;_DifferenceType&#32;__i&#32;=&#32;__begin;
3361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__i&#32;&lt;&#32;__end;&#32;++__i)
3362 &#32;&#32;&#32;&#32;{
3363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__comp(__first[(__i&#32;-&#32;1)&#32;/&#32;2],&#32;__first[__i]))
3364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
3365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
3366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3367 &#32;&#32;&#32;&#32;}
3368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;+&#32;__i;
3369 }
3370 
3371 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3372 _RandomAccessIterator
3373 <link linkend="_namespace____pstl_1_1____internal_1a421e80a845f245294fb04c66915e4557">__is_heap_until_local</link>(_RandomAccessIterator&#32;__first,&#32;_DifferenceType&#32;__begin,&#32;_DifferenceType&#32;__end,&#32;_Compare&#32;__comp,
3374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3375 {
3376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(
3377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;__begin,&#32;__end,
3378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__comp](_RandomAccessIterator&#32;__it,&#32;_DifferenceType&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(__it[(__i&#32;-&#32;1)&#32;/&#32;2],&#32;__it[__i]);&#32;});
3379 }
3380 
3381 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
3382 _RandomAccessIterator
3383 <link linkend="_namespace____pstl_1_1____internal_1a0fe7d90d58490eee0f9aa2f92a0a48e1">__pattern_is_heap_until</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
3384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3385 {
3386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;-&#32;__first&#32;&lt;&#32;2)
3387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3388 
3389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
3390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__parallel_find</link>(
3391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
3392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first,&#32;__comp,&#32;__is_vector](_RandomAccessIterator&#32;__i,&#32;_RandomAccessIterator&#32;__j)&#32;{
3393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a421e80a845f245294fb04c66915e4557">__internal::__is_heap_until_local</link>(__first,&#32;__i&#32;-&#32;__first,&#32;__j&#32;-&#32;__first,&#32;__comp,&#32;__is_vector);
3394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;typename&#32;std::iterator_traits&lt;_RandomAccessIterator&gt;::difference_type&gt;(),&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">true</emphasis>);
3396 &#32;&#32;&#32;&#32;});
3397 }
3398 
3399 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3400 <emphasis role="comment">//&#32;min_element</emphasis>
3401 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3402 
3403 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3404 _ForwardIterator
3405 <link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__brick_min_element</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Compare&#32;__comp,
3406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3407 {
3408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">std::min_element</link>(__first,&#32;__last,&#32;__comp);
3409 }
3410 
3411 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3412 _ForwardIterator
3413 <link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__brick_min_element</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Compare&#32;__comp,
3414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3415 {
3416 <emphasis role="preprocessor">#if&#32;_PSTL_UDR_PRESENT</emphasis>
3417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1abef9031d6d8ae9b085d54cbfc8fd0b7e">__unseq_backend::__simd_min_element</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__comp);
3418 <emphasis role="preprocessor">#else</emphasis>
3419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">std::min_element</link>(__first,&#32;__last,&#32;__comp);
3420 <emphasis role="preprocessor">#endif</emphasis>
3421 }
3422 
3423 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
3424 _ForwardIterator
3425 <link linkend="_namespace____pstl_1_1____internal_1afac22840ab45394d57a19b1b5c102a9b">__pattern_min_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Compare&#32;__comp,
3426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3427 {
3428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__internal::__brick_min_element</link>(__first,&#32;__last,&#32;__comp,&#32;__is_vector);
3429 }
3430 
3431 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
3432 _RandomAccessIterator
3433 <link linkend="_namespace____pstl_1_1____internal_1afac22840ab45394d57a19b1b5c102a9b">__pattern_min_element</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator&#32;__first,&#32;_RandomAccessIterator&#32;__last,
3434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)
3435 {
3436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
3437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__last;
3438 
3439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
3440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__par_backend::__parallel_reduce(
3441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first&#32;+&#32;1,&#32;__last,&#32;__first,
3442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_RandomAccessIterator&#32;__begin,&#32;_RandomAccessIterator&#32;__end,
3443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator&#32;__init)&#32;-&gt;&#32;_RandomAccessIterator&#32;{
3444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_RandomAccessIterator&#32;subresult&#32;=
3445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__internal::__brick_min_element</link>(__begin,&#32;__end,&#32;__comp,&#32;__is_vector);
3446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__internal::__cmp_iterators_by_values</link>(__init,&#32;subresult,&#32;__comp);
3447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_RandomAccessIterator&#32;__it1,&#32;_RandomAccessIterator&#32;__it2)&#32;-&gt;&#32;_RandomAccessIterator&#32;{
3449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__internal::__cmp_iterators_by_values</link>(__it1,&#32;__it2,&#32;__comp);
3450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
3451 &#32;&#32;&#32;&#32;});
3452 }
3453 
3454 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3455 <emphasis role="comment">//&#32;minmax_element</emphasis>
3456 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3457 
3458 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3459 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
3460 <link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__brick_minmax_element</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Compare&#32;__comp,
3461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3462 {
3463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">std::minmax_element</link>(__first,&#32;__last,&#32;__comp);
3464 }
3465 
3466 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
3467 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
3468 <link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__brick_minmax_element</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Compare&#32;__comp,
3469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3470 {
3471 <emphasis role="preprocessor">#if&#32;_PSTL_UDR_PRESENT</emphasis>
3472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a2ed9a294e155700282c9599e705b4f90">__unseq_backend::__simd_minmax_element</link>(__first,&#32;__last&#32;-&#32;__first,&#32;__comp);
3473 <emphasis role="preprocessor">#else</emphasis>
3474 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a656914c176851f1d49d931e6953b90af">std::minmax_element</link>(__first,&#32;__last,&#32;__comp);
3475 <emphasis role="preprocessor">#endif</emphasis>
3476 }
3477 
3478 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
3479 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
3480 <link linkend="_namespace____pstl_1_1____internal_1ac0ba54f6df57a5a9f3dfb520b1dffd37">__pattern_minmax_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Compare&#32;__comp,
3481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3482 {
3483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__internal::__brick_minmax_element</link>(__first,&#32;__last,&#32;__comp,&#32;__is_vector);
3484 }
3485 
3486 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
3487 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
3488 <link linkend="_namespace____pstl_1_1____internal_1ac0ba54f6df57a5a9f3dfb520b1dffd37">__pattern_minmax_element</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Compare&#32;__comp,
3489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)
3490 {
3491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
3492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__first,&#32;__first);
3493 
3494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
3495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;&#32;_Result;
3496 
3497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__par_backend::__parallel_reduce(
3498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first&#32;+&#32;1,&#32;__last,&#32;std::make_pair(__first,&#32;__first),
3499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_ForwardIterator&#32;__begin,&#32;_ForwardIterator&#32;__end,&#32;_Result&#32;__init)&#32;-&gt;&#32;_Result&#32;{
3500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Result&#32;__subresult&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__internal::__brick_minmax_element</link>(__begin,&#32;__end,&#32;__comp,&#32;__is_vector);
3501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(
3502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__internal::__cmp_iterators_by_values</link>(__subresult.first,&#32;__init.first,&#32;__comp),
3503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__internal::__cmp_iterators_by_values</link>(__init.second,&#32;__subresult.second,&#32;std::not_fn(__comp)));
3504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[=](_Result&#32;__p1,&#32;_Result&#32;__p2)&#32;-&gt;&#32;_Result&#32;{
3506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(
3507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__internal::__cmp_iterators_by_values</link>(__p1.first,&#32;__p2.first,&#32;__comp),
3508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__internal::__cmp_iterators_by_values</link>(__p2.second,&#32;__p1.second,&#32;std::not_fn(__comp)));
3509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
3510 &#32;&#32;&#32;&#32;});
3511 }
3512 
3513 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3514 <emphasis role="comment">//&#32;mismatch</emphasis>
3515 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3516 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
3517 std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;
3518 <link linkend="_namespace____pstl_1_1____internal_1af6e1bf383fe96c36bfa6a803caa71076">__mismatch_serial</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_BinaryPredicate&#32;__pred)
3520 {
3521 <emphasis role="preprocessor">#if&#32;_PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT</emphasis>
3522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a14e973b0980afe3afbceb376817e29f0">std::mismatch</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__pred);
3523 <emphasis role="preprocessor">#else</emphasis>
3524 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__first1&#32;!=&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;!=&#32;__last2&#32;&amp;&amp;&#32;__pred(*__first1,&#32;*__first2);&#32;++__first1,&#32;++__first2)
3525 &#32;&#32;&#32;&#32;{
3526 &#32;&#32;&#32;&#32;}
3527 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__first1,&#32;__first2);
3528 <emphasis role="preprocessor">#endif</emphasis>
3529 }
3530 
3531 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
3532 std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;
3533 <link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__brick_mismatch</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_Predicate&#32;__pred,&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3535 {
3536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1af6e1bf383fe96c36bfa6a803caa71076">__mismatch_serial</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__pred);
3537 }
3538 
3539 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
3540 std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;
3541 <link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__brick_mismatch</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_Predicate&#32;__pred,&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3543 {
3544 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;std::min(__last1&#32;-&#32;__first1,&#32;__last2&#32;-&#32;__first2);
3545 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(__first1,&#32;__n,&#32;__first2,&#32;std::not_fn(__pred));
3546 }
3547 
3548 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
3549 std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;
3550 <link linkend="_namespace____pstl_1_1____internal_1af94c79334ec95c8bccf8ce29d207f8b2">__pattern_mismatch</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_Predicate&#32;__pred,&#32;_IsVector&#32;__is_vector,
3552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3553 {
3554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__internal::__brick_mismatch</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__pred,&#32;__is_vector);
3555 }
3556 
3557 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Predicate,
3558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
3559 std::pair&lt;_RandomAccessIterator1,&#32;_RandomAccessIterator2&gt;
3560 <link linkend="_namespace____pstl_1_1____internal_1af94c79334ec95c8bccf8ce29d207f8b2">__pattern_mismatch</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_RandomAccessIterator1&#32;__first1,&#32;_RandomAccessIterator1&#32;__last1,
3561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2&#32;__first2,&#32;_RandomAccessIterator2&#32;__last2,&#32;_Predicate&#32;__pred,
3562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3563 {
3564 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__internal::__except_handler</link>([&amp;]()&#32;{
3565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;std::min(__last1&#32;-&#32;__first1,&#32;__last2&#32;-&#32;__first2);
3566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__internal::__parallel_find</link>(
3567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__first1&#32;+&#32;__n,
3568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;__pred,&#32;__is_vector](_RandomAccessIterator1&#32;__i,&#32;_RandomAccessIterator1&#32;__j)&#32;{
3569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__internal::__brick_mismatch</link>(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__first2&#32;+&#32;(__j&#32;-&#32;__first1),
3570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred,&#32;__is_vector)
3571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.first;
3572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;typename&#32;std::iterator_traits&lt;_RandomAccessIterator1&gt;::difference_type&gt;(),&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">true</emphasis>);
3574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair(__result,&#32;__first2&#32;+&#32;(__result&#32;-&#32;__first1));
3575 &#32;&#32;&#32;&#32;});
3576 }
3577 
3578 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3579 <emphasis role="comment">//&#32;lexicographical_compare</emphasis>
3580 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
3581 
3582 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3583 <emphasis role="keywordtype">bool</emphasis>
3584 <link linkend="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50">__brick_lexicographical_compare</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_Compare&#32;__comp,
3586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3587 {
3588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__comp);
3589 }
3590 
3591 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
3592 <emphasis role="keywordtype">bool</emphasis>
3593 <link linkend="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50">__brick_lexicographical_compare</link>(_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,&#32;_ForwardIterator2&#32;__first2,
3594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__last2,&#32;_Compare&#32;__comp,&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3595 {
3596 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
3597 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;second&#32;sequence&#32;is&#32;empty</emphasis>
3598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3599 &#32;&#32;&#32;&#32;}
3600 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
3601 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;first&#32;sequence&#32;is&#32;empty</emphasis>
3602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3603 &#32;&#32;&#32;&#32;}
3604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3605 &#32;&#32;&#32;&#32;{
3606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::reference&#32;ref_type1;
3607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator2&gt;::reference&#32;ref_type2;
3608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last1;
3609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last2;
3610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;std::min(__last1&#32;-&#32;__first1,&#32;__last2&#32;-&#32;__first2);
3611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__unseq_backend::__simd_first</link>(
3612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first1,&#32;__n,&#32;__first2,&#32;[__comp](<emphasis role="keyword">const</emphasis>&#32;ref_type1&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;ref_type2&#32;__y)&#32;<emphasis role="keyword">mutable</emphasis>&#32;{
3613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(__x,&#32;__y)&#32;||&#32;__comp(__y,&#32;__x);
3614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
3615 
3616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result.first&#32;==&#32;__last1&#32;&amp;&amp;&#32;__result.second&#32;!=&#32;__last2)
3617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;first&#32;sequence&#32;shorter&#32;than&#32;second</emphasis>
3618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__comp(*__result.second,&#32;*__result.first);
3619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;second&#32;sequence&#32;shorter&#32;than&#32;first&#32;or&#32;both&#32;have&#32;the&#32;same&#32;number&#32;of&#32;elements</emphasis>
3622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(*__result.first,&#32;*__result.second);
3623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3624 &#32;&#32;&#32;&#32;}
3625 }
3626 
3627 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
3628 <emphasis role="keywordtype">bool</emphasis>
3629 <link linkend="_namespace____pstl_1_1____internal_1a87963436503d6c04ddbae7eb6827f60c">__pattern_lexicographical_compare</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_Compare&#32;__comp,
3631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3632 {
3633 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50">__internal::__brick_lexicographical_compare</link>(__first1,&#32;__last1,&#32;__first2,&#32;__last2,&#32;__comp,&#32;__is_vector);
3634 }
3635 
3636 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
3637 <emphasis role="keywordtype">bool</emphasis>
3638 <link linkend="_namespace____pstl_1_1____internal_1a87963436503d6c04ddbae7eb6827f60c">__pattern_lexicographical_compare</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
3639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_ForwardIterator2&#32;__last2,&#32;_Compare&#32;__comp,
3640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;__is_vector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
3641 {
3642 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first2&#32;==&#32;__last2)
3643 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;second&#32;sequence&#32;is&#32;empty</emphasis>
3644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
3645 &#32;&#32;&#32;&#32;}
3646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first1&#32;==&#32;__last1)
3647 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;first&#32;sequence&#32;is&#32;empty</emphasis>
3648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
3649 &#32;&#32;&#32;&#32;}
3650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3651 &#32;&#32;&#32;&#32;{
3652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::reference&#32;_RefType1;
3653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator2&gt;::reference&#32;_RefType2;
3654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last1;
3655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__last2;
3656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;std::min(__last1&#32;-&#32;__first1,&#32;__last2&#32;-&#32;__first2);
3657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__result&#32;=&#32;<link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__internal::__parallel_find</link>(
3658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__first1&#32;+&#32;__n,
3659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__first1,&#32;__first2,&#32;&amp;__comp,&#32;__is_vector](_ForwardIterator1&#32;__i,&#32;_ForwardIterator1&#32;__j)&#32;{
3660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__internal::__brick_mismatch</link>(__i,&#32;__j,&#32;__first2&#32;+&#32;(__i&#32;-&#32;__first1),&#32;__first2&#32;+&#32;(__j&#32;-&#32;__first1),
3661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__comp](<emphasis role="keyword">const</emphasis>&#32;_RefType1&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_RefType2&#32;__y)&#32;{
3662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__comp(__x,&#32;__y)&#32;&amp;&amp;&#32;!__comp(__y,&#32;__x);
3663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector)
3665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
3666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
3667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;typename&#32;std::iterator_traits&lt;_ForwardIterator1&gt;::difference_type&gt;(),&#32;<emphasis role="comment">/*is_first=*/</emphasis><emphasis role="keyword">true</emphasis>);
3668 
3669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__result&#32;==&#32;__last1&#32;&amp;&amp;&#32;__first2&#32;+&#32;(__result&#32;-&#32;__first1)&#32;!=&#32;__last2)
3670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;first&#32;sequence&#32;shorter&#32;than&#32;second</emphasis>
3671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__comp(*(__first2&#32;+&#32;(__result&#32;-&#32;__first1)),&#32;*__result);
3672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;if&#32;second&#32;sequence&#32;shorter&#32;than&#32;first&#32;or&#32;both&#32;have&#32;the&#32;same&#32;number&#32;of&#32;elements</emphasis>
3675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(*__result,&#32;*(__first2&#32;+&#32;(__result&#32;-&#32;__first1)));
3676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
3677 &#32;&#32;&#32;&#32;}
3678 }
3679 
3680 }&#32;<emphasis role="comment">//&#32;namespace&#32;__internal</emphasis>
3681 }&#32;<emphasis role="comment">//&#32;namespace&#32;__pstl</emphasis>
3682 
3683 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_ALGORITHM_IMPL_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
