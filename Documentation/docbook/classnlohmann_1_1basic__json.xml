<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1basic__json" xml:lang="en-US">
<title>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; Class Template Reference</title>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary></indexterm>
<para>

<para>a class to store JSON values </para>
 
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad">value_t</link> = <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">detail::value_t</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> = <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; StringType &gt;</para>

<para>JSON Pointer, see <link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer</link>. </para>
</listitem>
            <listitem><para>template&lt;typename T , typename SFINAE &gt; </para><para>using <link linkend="_classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f">json_serializer</link> = JSONSerializer&lt; T, SFINAE &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a1e7ca76cc3f62626b380be5e18a002d5">error_handler_t</link> = <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">detail::error_handler_t</link></para>

<para>how to treat decoding errors </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a54951d14f0dd10cc3cfdaa24f8bfd15c">cbor_tag_handler_t</link> = <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">detail::cbor_tag_handler_t</link></para>

<para>how to treat CBOR tags </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> = std::initializer_list&lt; <link linkend="_classnlohmann_1_1detail_1_1json__ref">detail::json_ref</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt;</para>

<para>helper type for initializer lists of <link linkend="_classnlohmann_1_1basic__json">basic_json</link> values </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689">input_format_t</link> = detail::input_format_t</para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a164b1094a1a9feb54e400d8510bb0b12">json_sax_t</link> = json_sax&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>SAX interface type, see nlohmann::json_sax. </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a24086b03c5c063849df0307f78c41c54">parse_event_t</link> = detail::parse_event_t</para>

<para>parser event types </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link> = detail::parser_callback_t&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>per-element parser callback type </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> const char * <link linkend="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474">type_name</link> () const noexcept</para>

<para>return the type as string </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link> <link linkend="_classnlohmann_1_1basic__json_1afc55e7dca1a243b0d5011564824c0267">get_allocator</link> ()</para>

<para>returns the allocator associated with the container </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a351b4f65014f6c2b8b2832847d44bbd7">meta</link> ()</para>

<para>returns version information on the library </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> : <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> m_type = value_t::null</para>
</listitem>
            <listitem><para>json_value <link linkend="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0">m_value</link> = {}</para>

<para>the value of the current element </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>template&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">detail::value_t</link> &gt; </para><para>struct <link linkend="_classnlohmann_1_1basic__json_1a6275ed57bae6866cdf5db5370a7ad47c">detail::external_constructor</link></para>
</listitem>
            <listitem><para>template&lt;typename &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a43f901b14cf3f7135269b0c75c9ac233">::nlohmann::json_pointer</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename InputType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf">::nlohmann::detail::parser</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a842e5c7ca096025c18b11e715d3401f4">::nlohmann::detail::iter_impl</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename CharType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a69d491bbda88ade6d3c7a2b11309e8bf">::nlohmann::detail::binary_writer</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename InputType , typename SAX &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1aa226ed5103dfd10e27e562d35a3a106b">::nlohmann::detail::binary_reader</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60">::nlohmann::detail::json_sax_dom_parser</link></para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>class <link linkend="_classnlohmann_1_1basic__json_1a95574da8d12905ea99dc348934c837da">::nlohmann::detail::json_sax_dom_callback_parser</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1basic__json_1abdcb15d025676b4d3db0f32a50f4393f">::nlohmann::detail::exception</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>exceptions    </title>

<para>Classes to implement user-defined exceptions. </para>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22">exception</link> = <link linkend="_classnlohmann_1_1detail_1_1exception">detail::exception</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a">parse_error</link> = <link linkend="_classnlohmann_1_1detail_1_1parse__error">detail::parse_error</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa">invalid_iterator</link> = <link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">detail::invalid_iterator</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c">type_error</link> = <link linkend="_classnlohmann_1_1detail_1_1type__error">detail::type_error</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c">out_of_range</link> = <link linkend="_classnlohmann_1_1detail_1_1out__of__range">detail::out_of_range</link></para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d">other_error</link> = <link linkend="_classnlohmann_1_1detail_1_1other__error">detail::other_error</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>container types    </title>

<para>The canonic container types to use <link linkend="_classnlohmann_1_1basic__json">basic_json</link> like any other STL container. </para>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847">value_type</link> = <link linkend="_classnlohmann_1_1basic__json">basic_json</link></para>

<para>the type of elements in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> = <link linkend="_classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847">value_type</link> &amp;</para>

<para>the type of an element reference </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> = const <link linkend="_classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847">value_type</link> &amp;</para>

<para>the type of an element const reference </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd">difference_type</link> = std::ptrdiff_t</para>

<para>a type to represent differences between iterators </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> = std::size_t</para>

<para>a type to represent container sizes </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link> = AllocatorType&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>the allocator type </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a42e5c23402f4c2e1df487e1d102bc5fa">pointer</link> = typename std::allocator_traits&lt; <link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link> &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link></para>

<para>the type of an element pointer </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a4108c5148f1d7cf13c2681e22f141a10">const_pointer</link> = typename std::allocator_traits&lt; <link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link> &gt;::const_pointer</para>

<para>the type of an element const pointer </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> = <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>an iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> = <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt; const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>a const iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6">reverse_iterator</link> = <link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&lt; typename <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">basic_json::iterator</link> &gt;</para>

<para>a reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> = <link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&lt; typename <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">basic_json::const_iterator</link> &gt;</para>

<para>a const reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON value data types    </title>

<para>The data types to store a JSON value. These types are derived from the template arguments passed to class <link linkend="_classnlohmann_1_1basic__json">basic_json</link>. </para>
        <itemizedlist>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a7e0b728380ef6c1ec1fcf16ddf674c77">default_object_comparator_t</link> = std::less&lt; StringType &gt;</para>

<para>default object key comparator type The actual object key comparator type (<link linkend="_classnlohmann_1_1basic__json_1acd2a6657a649c77be751228313311755">object_comparator_t</link>) may be different. </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link> = ObjectType&lt; StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, <link linkend="_classnlohmann_1_1basic__json_1a7e0b728380ef6c1ec1fcf16ddf674c77">default_object_comparator_t</link>, AllocatorType&lt; std::pair&lt; const StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt; &gt;</para>

<para>a type for an object </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link> = ArrayType&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, AllocatorType&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt;</para>

<para>a type for an array </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> = StringType</para>

<para>a type for a string </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link> = BooleanType</para>

<para>a type for a boolean </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link> = NumberIntegerType</para>

<para>a type for a number (integer) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link> = NumberUnsignedType</para>

<para>a type for a number (unsigned) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link> = NumberFloatType</para>

<para>a type for a number (floating-point) </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link> = <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt; BinaryType &gt;</para>

<para>a type for a packed binary type </para>
</listitem>
            <listitem><para>using <link linkend="_classnlohmann_1_1basic__json_1acd2a6657a649c77be751228313311755">object_comparator_t</link> = <link linkend="_namespacenlohmann_1_1detail_1a0a41b6ed14eb953d0b6eee0e4d4bb5d4">detail::actual_object_comparator_t</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt;</para>

<para>object key comparator type </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>modifiers    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1aee0ae36cbfb0336832ebc0374c3c7679">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> left, <link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> right) noexcept(std::is_nothrow_move_constructible&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_assignable&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;<link linkend="_classvalue">::value</link>)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53">clear</link> () noexcept</para>

<para>clears the contents </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4">push_back</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a40226d9c84fcb9cb948ae0c27b842c57">operator+=</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a3405d38087e13994a5a4556065b0be6d">push_back</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1af643a4baa91f484b11af0e4437183115">operator+=</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1ad704839e6a5195e3b76f22e2b9aa63ee">push_back</link> (const typename object_t::value_type &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1ae300819781bce2193369609457f70f30">operator+=</link> (const typename object_t::value_type &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a4567cf75f19b1efca090f75d7a8a350a">push_back</link> (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1ac48302a8b4f8c2a6e30c2a7bff6abc49">operator+=</link> (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init)</para>

<para>add an object to an object </para>
</listitem>
            <listitem><para>template&lt;class... Args&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a15c0a5db4fb12d49433801bbe6436bfb">emplace_back</link> (Args &amp;&amp;... args)</para>

<para>add an object to an array </para>
</listitem>
            <listitem><para>template&lt;class... Args&gt; </para><para>std::pair&lt; <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1af244c096197a233edba4c83200ae66ac">emplace</link> (Args &amp;&amp;... args)</para>

<para>add an object to an object if key does not exist </para>
</listitem>
            <listitem><para>template&lt;typename... Args&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994">insert_iterator</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, Args &amp;&amp;... args)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>inserts element into array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a9c5b9de8a4a759861cb600b38a6c81b1">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>inserts element into array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a71e197e6cc78c3960011f68a75f8ef22">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>inserts copies of element into array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a8137d5471edcd71606e42155ed9c23e2">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> last)</para>

<para>inserts range of elements into array </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a856b8764efd21dac4205a00fec82e09a">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> ilist)</para>

<para>inserts elements from initializer list into array </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a0181d03c6314bedcbad2e92d3676223c">insert</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> last)</para>

<para>inserts range of elements into object </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a129a235796b3f95ec93d65c5e4e9fa41">update</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> j, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> merge_objects=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a4fd9b1d17f9636dec1a33344a09d2651">update</link> (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> merge_objects=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> other) noexcept(std::is_nothrow_move_constructible&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_assignable&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;<link linkend="_classvalue">::value</link>)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a76126242de262f6d38cadda19e0d13e1">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a57b86bdcfc55557dacc36969adb0417e">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1aac916df9561daf4eaf2372119fe91899">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1aa242e339ebc7583e114f2167a83f8c90">swap</link> (<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a749a1f5091a5e63ccfe919e0aef986af">swap</link> (typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp;other)</para>

<para>exchanges the values </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>lexicographical comparison operators    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e">operator==</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a107a085c92ec4e062d1185b2d09c7978">operator==</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs) noexcept</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a24ae7acd5b06ae49cfe1c94633436b68">operator==</link> (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: equal </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a6e2e21da48f5d9471716cd868a068327">operator!=</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a4d581dc2ab78091885f9af24d13749dc">operator!=</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs) noexcept</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1aa9861979059799375c0fff68174610ba">operator!=</link> (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: not equal </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3">operator&lt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: less than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a52907b78829a55473f2548530cf2c1c7">operator&lt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs) noexcept</para>

<para>comparison: less than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a71f65ff3abee4c140e27ca64fa327973">operator&lt;</link> (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: less than </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a5c8bb5200f5eac10d31e26be46e5b1ac">operator&lt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1ae7bce6989e2bf72aa0784ca6755e22a9">operator&lt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs) noexcept</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a4e96b98c1f8dfccaaa94aa0d5e77427c">operator&lt;=</link> (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: less than or equal </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a87db51b6b936fb2ea293cdbc8702dcb8">operator&gt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a9ea8e0e86820fcb3ab0fc937d41226e7">operator&gt;</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs) noexcept</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a67771044f08fd07105b34667615d9e0e">operator&gt;</link> (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a74a943800c7f103d0990d7eef82c6453">operator&gt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1ab83d11de4db25633f93e067aa218cae9">operator&gt;=</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs) noexcept</para>

<para>comparison: greater than or equal </para>
</listitem>
            <listitem><para>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a94c61e0128f0794e7a34e1aecee5c445">operator&gt;=</link> (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs) noexcept</para>

<para>comparison: greater than or equal </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>serialization    </title>
        <itemizedlist>
            <listitem><para>std::ostream &amp; <link linkend="_classnlohmann_1_1basic__json_1a5bbe57177fdb5833885dc1567ec13394">operator&lt;&lt;</link> (std::ostream &amp;o, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>serialize to stream </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_classnlohmann_1_1basic__json_1abfcb46247e0d5ec0a442c3193c5305be">operator&gt;&gt;</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, std::ostream &amp;o)</para>

<para>serialize to stream </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>deserialization    </title>
        <itemizedlist>
            <listitem><para>std::istream &amp; <link linkend="_classnlohmann_1_1basic__json_1af9907af448f7ff794120033e132025f6">operator&lt;&lt;</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, std::istream &amp;i)</para>

<para>deserialize from stream </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_classnlohmann_1_1basic__json_1aea0de29387d532e0bc5f2475cb83995d">operator&gt;&gt;</link> (std::istream &amp;i, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>deserialize from stream </para>
</listitem>
            <listitem><para>template&lt;typename InputType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6">parse</link> (InputType &amp;&amp;i, const <link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link> cb=nullptr, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>deserialize from a compatible input </para>
</listitem>
            <listitem><para>template&lt;typename IteratorType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ad832c70af0989389a9a104c21d2d1c5c">parse</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, const <link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link> cb=nullptr, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>deserialize from a pair of character iterators </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a73cf15644f04fa569f50291049d1bafd">parse</link> (detail::span_input_adapter &amp;&amp;i, const <link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link> cb=nullptr, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para>template&lt;typename InputType &gt; </para><para>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55">accept</link> (InputType &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>check if the input is valid JSON </para>
</listitem>
            <listitem><para>template&lt;typename IteratorType &gt; </para><para>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a47fb596473649332185aedb0a8a6ccc5">accept</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>check if the input is valid JSON </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a6d9e85910b91d02f6807b69b61690a4b">accept</link> (detail::span_input_adapter &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>
</listitem>
            <listitem><para>template&lt;typename InputType , typename SAX &gt; </para><para>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008">sax_parse</link> (InputType &amp;&amp;i, SAX *sax, <link linkend="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689">input_format_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>=input_format_t::json, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>generate SAX events </para>
</listitem>
            <listitem><para>template&lt;class IteratorType , class SAX &gt; </para><para>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1ab62241c2694a054818edf2f66d72f113">sax_parse</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, SAX *sax, <link linkend="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689">input_format_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>=input_format_t::json, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>generate SAX events </para>
</listitem>
            <listitem><para>template&lt;typename SAX &gt; </para><para>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1aef9ef0a817ecde8bf270653e8706c150">sax_parse</link> (detail::span_input_adapter &amp;&amp;i, SAX *sax, <link linkend="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689">input_format_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>=input_format_t::json, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>generate SAX events </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>value access    </title>

<para>Direct access to the stored value of a JSON value. </para>
        <itemizedlist>
            <listitem><para>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para>auto <link linkend="_classnlohmann_1_1basic__json_1a85222410e03d8f5c8ff9c78cf9f6b1b6">get_ptr</link> () noexcept -&gt; decltype(std::declval&lt; basic_json_t &amp; &gt;().get_impl_ptr(std::declval&lt; PointerType &gt;()))</para>

<para>get a pointer value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para>constexpr auto <link linkend="_classnlohmann_1_1basic__json_1afd99a3902a2bb09a306fb854540ae1dd">get_ptr</link> () const noexcept -&gt; decltype(std::declval&lt; const basic_json_t &amp; &gt;().get_impl_ptr(std::declval&lt; PointerType &gt;()))</para>

<para>get a pointer value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;&gt; </para><para>auto <link linkend="_classnlohmann_1_1basic__json_1af1650e004db368459b3c0db041b32adc">get</link> () const noexcept(noexcept(std::declval&lt; const basic_json_t &amp; &gt;().template get_impl&lt; ValueType &gt;(<link linkend="_structnlohmann_1_1detail_1_1priority__tag">detail::priority_tag</link>&lt; 4 &gt; {}))) -&gt; decltype(std::declval&lt; const basic_json_t &amp; &gt;().template get_impl&lt; ValueType &gt;(<link linkend="_structnlohmann_1_1detail_1_1priority__tag">detail::priority_tag</link>&lt; 4 &gt; {}))</para>

<para>get a (pointer) value (explicit) </para>
</listitem>
            <listitem><para>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para>auto <link linkend="_classnlohmann_1_1basic__json_1a826e180d2457d114ed4c51f4b0737df8">get</link> () noexcept -&gt; decltype(std::declval&lt; basic_json_t &amp; &gt;().template <link linkend="_classnlohmann_1_1basic__json_1a85222410e03d8f5c8ff9c78cf9f6b1b6">get_ptr</link>&lt; PointerType &gt;())</para>

<para>get a pointer value (explicit) </para>
</listitem>
            <listitem><para>template&lt;typename ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; !<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_structnlohmann_1_1detail_1_1has__from__json">detail::has_from_json</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>ValueType &amp; <link linkend="_classnlohmann_1_1basic__json_1a3c3fef72afb412c0739d062d27af1c9a">get_to</link> (ValueType &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)))</para>

<para>get a value (explicit) </para>
</listitem>
            <listitem><para>template&lt;typename ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>ValueType &amp; <link linkend="_classnlohmann_1_1basic__json_1a00a17ee748e5d76b1f4bf7fd1d633ec3">get_to</link> (ValueType &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>) const</para>
</listitem>
            <listitem><para>template&lt;typename T , std::size_t N, typename Array  = T (&amp;)[N], <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1has__from__json">detail::has_from_json</link>&lt; basic_json_t, Array &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>Array <link linkend="_classnlohmann_1_1basic__json_1a85dd41000e4e7751928fffb44ff4aed4">get_to</link> (T(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)[N]) const noexcept(noexcept(JSONSerializer&lt; Array &gt;::from_json(std::declval&lt; const basic_json_t &amp; &gt;(), <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)))</para>
</listitem>
            <listitem><para>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para>ReferenceType <link linkend="_classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5">get_ref</link> ()</para>

<para>get a reference value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para>ReferenceType <link linkend="_classnlohmann_1_1basic__json_1a7f0889072c54f1b899689ed6246238e7">get_ref</link> () const</para>

<para>get a reference value (implicit) </para>
</listitem>
            <listitem><para>template&lt;typename ValueType , typename std::enable_if&lt; <link linkend="_structnlohmann_1_1detail_1_1conjunction">detail::conjunction</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_pointer&lt; ValueType &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, std::nullptr_t &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, <link linkend="_classnlohmann_1_1detail_1_1json__ref">detail::json_ref</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, typename string_t::value_type &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; ValueType &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt; &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1is__detected__lazy">detail::is_detected_lazy</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e">detail::get_template_function</link>, const basic_json_t &amp;, ValueType &gt; &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="_json_8hpp_1aefed8cf27cadeea45f12c6f3db3ce774">JSON_EXPLICIT</link> <link linkend="_classnlohmann_1_1basic__json_1ada1463d8d7ba77865f28f5e83dec7f33">operator ValueType</link> () const</para>

<para>get a value (implicit) </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link> &amp; <link linkend="_classnlohmann_1_1basic__json_1a23c2e02101cc62e1aec1d6ddaef0e340">get_binary</link> ()</para>

<para>get a binary value </para>
</listitem>
            <listitem><para>const <link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link> &amp; <link linkend="_classnlohmann_1_1basic__json_1a314434d513d15eb576707d4afae3dd64">get_binary</link> () const</para>

<para>get a binary value </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>element access    </title>

<para>Access to the JSON value. </para>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e">at</link> (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx)</para>

<para>access specified array element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1aeb18fe2b8a5dbff4ccf2848de854c3ac">at</link> (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx) const</para>

<para>access specified array element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d">at</link> (const typename object_t::key_type &amp;key)</para>

<para>access specified object element with bounds checking </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a34cae92c0d1091a52a246422b9be9a6d">at</link> (KeyType &amp;&amp;key)</para>

<para>access specified object element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a229964ee10c92ba89ae4fba786fe6b50">at</link> (const typename object_t::key_type &amp;key) const</para>

<para>access specified object element with bounds checking </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a7f25d95cf19bd6b251ada98f4ecbe724">at</link> (KeyType &amp;&amp;key) const</para>

<para>access specified object element with bounds checking </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5">operator[]</link> (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx)</para>

<para>access specified array element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1ad21d96f490fa1aa8605fba8dadcce319">operator[]</link> (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx) const</para>

<para>access specified array element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a47e4e6a77cf318f924d09d3777c760b7">operator[]</link> (typename object_t::key_type key)</para>

<para>access specified object element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1acb5b489310f4e0ce2d5fb29b73fb59d3">operator[]</link> (const typename object_t::key_type &amp;key) const</para>

<para>access specified object element </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1abc94831476f7b4d3efe6f2e9036c7188">operator[]</link> (T *key)</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a11bbe874496eb7b29a5549e0637de59e">operator[]</link> (T *key) const</para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a5975d14500cf07bcdbacce892ebdedef">operator[]</link> (KeyType &amp;&amp;key)</para>

<para>access specified object element </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a88d228d3e95d5300bdca64aabc4169b6">operator[]</link> (KeyType &amp;&amp;key) const</para>

<para>access specified object element </para>
</listitem>
            <listitem><para>template&lt;class KeyType , class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; std::is_same&lt; KeyType, typename object_t::key_type &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>std::decay&lt; ValueType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_classnlohmann_1_1basic__json_1ae7e99d4a3aab802d015f033b126ebef3">value</link> (const KeyType &amp;key, ValueType &amp;&amp;default_value) const</para>

<para>access specified object element with default value </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1adcfdefe95d5c2471a5c97e911d46ee88">value</link> (const typename object_t::key_type &amp;key, const char *default_value) const</para>

<para>access specified object element with default value </para>
</listitem>
            <listitem><para>template&lt;class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>std::decay&lt; ValueType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_classnlohmann_1_1basic__json_1a9fc5f71b2f3b22a0cd583f5db145d763">value</link> (const char *key, ValueType &amp;&amp;default_value) const</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1aab74fe06c086c9364971aa6425b257e4">value</link> (const char *key, const char *default_value) const</para>
</listitem>
            <listitem><para>template&lt;class KeyType , class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>std::decay&lt; ValueType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_classnlohmann_1_1basic__json_1a488639de15cb296b94f86fc8e8de752d">value</link> (KeyType &amp;&amp;key, ValueType &amp;&amp;default_value) const</para>

<para>access specified object element with default value </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; !<link linkend="_namespacenlohmann_1_1detail_1a2ed05c5e0077efc26e2e03bcaf27b1b6">detail::is_json_pointer</link>&lt; KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1a9fec3e8d89e16c6eeb37d78bddc2469a">value</link> (KeyType &amp;&amp;key, const char *default_value) const</para>

<para>access specified object element with default value </para>
</listitem>
            <listitem><para>template&lt;class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>ValueType <link linkend="_classnlohmann_1_1basic__json_1a36bd6765ccd8aeeeb4e49a766ba639df">value</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp;ptr, const ValueType &amp;default_value) const</para>

<para>access specified object element via JSON Pointer with default value </para>
</listitem>
            <listitem><para>template&lt;class ValueType , class BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>ValueType <link linkend="_classnlohmann_1_1basic__json_1aa37cb48da6e42361c0a27226cdf7d8ba">value</link> (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp;ptr, const ValueType &amp;default_value) const</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1a4658a584571c4180656f5268969ed0a1">value</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp;ptr, const char *default_value) const</para>

<para>access specified object element via JSON Pointer with default value </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1ae9f2f0a08b6a9d8d81f35b0cc203f5b6">value</link> (const typename <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp;ptr, const char *default_value) const</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed">front</link> ()</para>

<para>access the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a5ac8f974c178cf9326b6765e22f50eb6">front</link> () const</para>

<para>access the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa">back</link> ()</para>

<para>access the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1aac965b84ea43ccd8aef9caefef02794a">back</link> () const</para>

<para>access the last element </para>
</listitem>
            <listitem><para>template&lt;class IteratorType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>IteratorType <link linkend="_classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e">erase</link> (IteratorType pos)</para>

<para>remove element given an iterator </para>
</listitem>
            <listitem><para>template&lt;class IteratorType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>IteratorType <link linkend="_classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42">erase</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last)</para>

<para>remove elements given an iterator range </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea">erase</link> (const typename object_t::key_type &amp;key)</para>

<para>remove element from a JSON object given a key </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1ac7058093dd2ebb55352f996d8aafeda9">erase</link> (KeyType &amp;&amp;key)</para>

<para>remove element from a JSON object given a key </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26">erase</link> (const <link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx)</para>

<para>remove element from a JSON array given an index </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>constructors and destructors    </title>

<para>Constructors of class <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, copy/move constructor, copy assignment, static functions creating objects, and the destructor. </para>
        <itemizedlist>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a3d255dbe024ce2d0fdfb1b4837629091">binary</link> (const typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp;init)</para>

<para>explicitly create a binary array (without subtype) </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a7ad4b5b7c96e77d3e105a71ce2147727">binary</link> (const typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp;init, typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">binary_t::subtype_type</link> subtype)</para>

<para>explicitly create a binary array (with subtype) </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ab085777bbfbfac5a472120b991ef5cf3">binary</link> (typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp;&amp;init)</para>

<para>explicitly create a binary array </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a534d4793bcfa81a307b7f3f7eab2cff9">binary</link> (typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp;&amp;init, typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">binary_t::subtype_type</link> subtype)</para>

<para>explicitly create a binary array (with subtype) </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e">array</link> (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init={})</para>

<para>explicitly create an array from an initializer list </para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903">object</link> (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init={})</para>

<para>explicitly create an object from an initializer list </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a">basic_json</link> (const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>

<para>create an empty value with a given type </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ace6fbaf6c64f60b61922b5c9d3e61aa6">basic_json</link> (std::nullptr_t=nullptr) noexcept</para>

<para>create a null object </para>
</listitem>
            <listitem><para>template&lt;typename CompatibleType , typename U  = detail::uncvref_t&lt;CompatibleType&gt;, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; !<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; U &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__type">detail::is_compatible_type</link>&lt; basic_json_t, U &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1adda5ebaff0503f92c8b3d65cfb610ea5">basic_json</link> (CompatibleType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept(noexcept(//NOLINT(bugprone-forwarding-<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link>-overload, bugprone-<link linkend="_classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22">exception</link>-escape) JSONSerializer&lt; U &gt;::to_json(std::declval&lt; basic_json_t &amp; &gt;(), std::forward&lt; CompatibleType &gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))))</para>

<para>create a JSON value from compatible types </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a40738eb9cb8c5a9ca14ae4b697c29f8e">basic_json</link> (const BasicJsonType &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>create a JSON value from an existing one </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37">basic_json</link> (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> type_deduction=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> manual_type=value_t::array)</para>

<para>create a container (array or object) from an initializer list </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1afbccea367512a87b5d76e2bd92c5cc85">basic_json</link> (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)</para>

<para>construct an array with count copies of given value </para>
</listitem>
            <listitem><para>template&lt;class InputIT , typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a23e540f473d32f1cf5d3243ea3ad495e">basic_json</link> (InputIT <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, InputIT last)</para>

<para>construct a JSON container given an iterator range </para>
</listitem>
            <listitem><para>template&lt;typename JsonRef , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1conjunction">detail::conjunction</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__json__ref">detail::is_json_ref</link>&lt; JsonRef &gt;, std::is_same&lt; typename JsonRef::value_type, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a28524e9c443076ea6dccff8e391354ed">basic_json</link> (const JsonRef &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a603be713183ad63dd8c9e1052c606004">basic_json</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;other)</para>

<para>copy constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a642afd9d8886e0dedfc0d5cee2baf57f">basic_json</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;&amp;other) noexcept</para>

<para>move constructor </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; <link linkend="_classnlohmann_1_1basic__json_1a28f87a769eda285eb4492ac1172d8812">operator=</link> (<link linkend="_classnlohmann_1_1basic__json">basic_json</link> other) noexcept(std::is_nothrow_move_constructible&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_assignable&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;<link linkend="_classvalue">::value</link>)</para>

<para>copy assignment </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a60b643c02a19fa52f99db8215ff58e0f">~basic_json</link> () noexcept</para>

<para>destructor </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>iterators    </title>
        <itemizedlist>
            <listitem><para>static iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1a7cd832311e7c2f2cf5ca07c4bc4011cd">iterator_wrapper</link> (<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>) noexcept</para>

<para>wrapper to access iterator member functions in range-based for </para>
</listitem>
            <listitem><para>static iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1a289c7ce4ae9eea044b8cb0e0f74fa082">iterator_wrapper</link> (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>) noexcept</para>

<para>wrapper to access iterator member functions in range-based for </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7">begin</link> () noexcept</para>

<para>returns an iterator to the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a4f147be16fcde9f510c4aac89ab511c9">begin</link> () const noexcept</para>

<para>returns an iterator to the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039">cbegin</link> () const noexcept</para>

<para>returns a const iterator to the first element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc">end</link> () noexcept</para>

<para>returns an iterator to one past the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a82b5b96f86879a3bac0c713d33178551">end</link> () const noexcept</para>

<para>returns an iterator to one past the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758">cend</link> () const noexcept</para>

<para>returns an iterator to one past the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6">reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c">rbegin</link> () noexcept</para>

<para>returns an iterator to the reverse-beginning </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1aab1329f44c8301b7679962726a043549">rbegin</link> () const noexcept</para>

<para>returns an iterator to the reverse-beginning </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6">reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb">rend</link> () noexcept</para>

<para>returns an iterator to the reverse-end </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a2e4cbf41d593d41847b90aea55e5e84d">rend</link> () const noexcept</para>

<para>returns an iterator to the reverse-end </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6">crbegin</link> () const noexcept</para>

<para>returns a const reverse iterator to the last element </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58">crend</link> () const noexcept</para>

<para>returns a const reverse iterator to one before the first </para>
</listitem>
            <listitem><para>iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1a02ed1d1f38310ccc2fbb02d2b75387a2">items</link> () noexcept</para>

<para>helper to access iterator member functions in range-based for </para>
</listitem>
            <listitem><para>iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json_1a8539f7ff4cfa06ce362484ef99c09604">items</link> () const noexcept</para>

<para>helper to access iterator member functions in range-based for </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>binary serialization/deserialization support    </title>
        <itemizedlist>
            <listitem><para>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1a28c7743637b821189d9eb3c3dc7ab48f">to_cbor</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>create a CBOR serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1ac59dfbee523c5340e41548764a8d26be">to_cbor</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</para>

<para>create a CBOR serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a5689672954fd3bc38f2f17e5607064c6">to_cbor</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; char &gt; o)</para>

<para>create a CBOR serialization of a given JSON value </para>
</listitem>
            <listitem><para>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1a2443e8bb20dc6d136dcf5ea9691d46e0">to_msgpack</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>create a MessagePack serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1af57f7877fbef9881289fe2c8b31e37e1">to_msgpack</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</para>

<para>create a MessagePack serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1aca5dc0fca52131f3a634372120abfbe7">to_msgpack</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; char &gt; o)</para>

<para>create a MessagePack serialization of a given JSON value </para>
</listitem>
            <listitem><para>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1a63697142a7bd04d8d50f6446d0e98ee4">to_ubjson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>create a UBJSON serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1aa9fa5da521622c6c655581840da75090">to_ubjson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>create a UBJSON serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a6d133cf7b2e729e9e215edeba5726116">to_ubjson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; char &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>create a UBJSON serialization of a given JSON value </para>
</listitem>
            <listitem><para>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1a1303c7c05a4023f8882110c5456d290c">to_bjdata</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>create a BJData serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1af04ef0749ed2a2d2a6f05e5b3bde9b5f">to_bjdata</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>create a BJData serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a32a3c51ba007685b9365746e95351718">to_bjdata</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; char &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)</para>

<para>create a BJData serialization of a given JSON value </para>
</listitem>
            <listitem><para>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json_1a21302d2c392af239d66df71098d69f73">to_bson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j)</para>

<para>create a BSON serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a4a9babd6635e3f7d4af3dec0635073c5">to_bson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; std::uint8_t &gt; o)</para>

<para>create a BSON serialization of a given JSON value </para>
</listitem>
            <listitem><para>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a9ebed178fb7dad1a574bcb7c361fb1b8">to_bson</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;j, detail::output_adapter&lt; char &gt; o)</para>

<para>create a BSON serialization of a given JSON value </para>
</listitem>
            <listitem><para>template&lt;typename InputType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f">from_cbor</link> (InputType &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler=cbor_tag_handler_t::error)</para>

<para>create a JSON value from an input in CBOR format </para>
</listitem>
            <listitem><para>template&lt;typename IteratorType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1aba4f6fc79cc405fb212ea3d992334e71">from_cbor</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler=cbor_tag_handler_t::error)</para>

<para>create a JSON value from an input in CBOR format </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a188755c8cda27e2afb03c016c14125d8">from_cbor</link> (const T *ptr, std::size_t <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler=cbor_tag_handler_t::error)</para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a4a67e47f4bcde55214475f47f8314c1f">from_cbor</link> (detail::span_input_adapter &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler=cbor_tag_handler_t::error)</para>
</listitem>
            <listitem><para>template&lt;typename InputType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590">from_msgpack</link> (InputType &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in MessagePack format </para>
</listitem>
            <listitem><para>template&lt;typename IteratorType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a94dbeb08bcd13821512957dcbf3f00bd">from_msgpack</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in MessagePack format </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a0d69d3102639759d5202a6f764760d23">from_msgpack</link> (const T *ptr, std::size_t <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a84b3d89de8e774a2609dc4c0a1273f62">from_msgpack</link> (detail::span_input_adapter &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>template&lt;typename InputType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7">from_ubjson</link> (InputType &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in UBJSON format </para>
</listitem>
            <listitem><para>template&lt;typename IteratorType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a9dbb422350fed520ce8c1ca8762c0251">from_ubjson</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in UBJSON format </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ab6eeda23c34cee79d8d72f1a8691a8de">from_ubjson</link> (const T *ptr, std::size_t <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a47201396899371881a46562bffb922da">from_ubjson</link> (detail::span_input_adapter &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>template&lt;typename InputType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a42501aa335b8370a3ed12580c78ee45b">from_bjdata</link> (InputType &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in BJData format </para>
</listitem>
            <listitem><para>template&lt;typename IteratorType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1acef7ae1c76b5e6869f0a00f6a473d705">from_bjdata</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in BJData format </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a0a12b21c993c57c160936b2581b7a5d7">from_bjdata</link> (const T *ptr, std::size_t <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a20720fee5ec0f0674cefb5d9a24d0d90">from_bjdata</link> (detail::span_input_adapter &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>template&lt;typename InputType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c">from_bson</link> (InputType &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in BSON format </para>
</listitem>
            <listitem><para>template&lt;typename IteratorType &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a4118d0ec23d9eeafc236b9524d220e94">from_bson</link> (IteratorType <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>

<para>create a JSON value from an input in BSON format </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ae2612581e4788ddffc2f45d5e4cc04fc">from_bson</link> (const T *ptr, std::size_t <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a2afe89884edf72412a0624982324755d">from_bson</link> (detail::span_input_adapter &amp;&amp;i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON Patch functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385">diff</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af9d0cbbbeb7414e786c41899e5a856d7">target</link>, const std::string &amp;<link linkend="_classpath">path</link>=&quot;&quot;)</para>

<para>creates a diff as a JSON patch </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e">patch</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;json_patch) const</para>

<para>applies a JSON patch </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>object inspection    </title>

<para>Functions to inspect the type of a JSON value. </para>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4">dump</link> (const int indent=-1, const char indent_char=&apos; &apos;, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ensure_ascii=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>, const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler=error_handler_t::strict) const</para>

<para>serialization </para>
</listitem>
            <listitem><para>constexpr <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> <link linkend="_classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad">type</link> () const noexcept</para>

<para>return the type of the JSON value (explicit) </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4">is_primitive</link> () const noexcept</para>

<para>return whether type is primitive </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249">is_structured</link> () const noexcept</para>

<para>return whether type is structured </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">is_null</link> () const noexcept</para>

<para>return whether value is null </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b">is_boolean</link> () const noexcept</para>

<para>return whether value is a boolean </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851">is_number</link> () const noexcept</para>

<para>return whether value is a number </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362">is_number_integer</link> () const noexcept</para>

<para>return whether value is an integer number </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95">is_number_unsigned</link> () const noexcept</para>

<para>return whether value is an unsigned integer number </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb">is_number_float</link> () const noexcept</para>

<para>return whether value is a floating-point number </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">is_object</link> () const noexcept</para>

<para>return whether value is an object </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">is_array</link> () const noexcept</para>

<para>return whether value is an array </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">is_string</link> () const noexcept</para>

<para>return whether value is a string </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80">is_binary</link> () const noexcept</para>

<para>return whether value is a binary array </para>
</listitem>
            <listitem><para>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d">is_discarded</link> () const noexcept</para>

<para>return whether value is discarded </para>
</listitem>
            <listitem><para>constexpr <link linkend="_classnlohmann_1_1basic__json_1a6d4b8df10ecc533a50823e8805f4a873">operator value_t</link> () const noexcept</para>

<para>return the type of the JSON value (implicit) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>lookup    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65">find</link> (const typename object_t::key_type &amp;key)</para>

<para>find an element in a JSON object </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a4968ed582119ae2cd0e31f6983bc9fe2">find</link> (const typename object_t::key_type &amp;key) const</para>

<para>find an element in a JSON object </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a1cc27f7d3cc7ecb154dad11be623905b">find</link> (KeyType &amp;&amp;key)</para>

<para>find an element in a JSON object </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json_1a6301007cfe3ea117b1279d40eb6257a1">find</link> (KeyType &amp;&amp;key) const</para>

<para>find an element in a JSON object </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1a417ed5b34ef7f76df01c25183b08638c">count</link> (const typename object_t::key_type &amp;key) const</para>

<para>returns the number of occurrences of a key in a JSON object </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1aac18eed2c42abbc8e5c3cf653e49e0df">count</link> (KeyType &amp;&amp;key) const</para>

<para>returns the number of occurrences of a key in a JSON object </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a6bc44e35c4504e4c78793e1eff5e9fd7">contains</link> (const typename object_t::key_type &amp;key) const</para>

<para>check the existence of an element in a JSON object </para>
</listitem>
            <listitem><para>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a59461ff8b348aec0234bcd72381f549e">contains</link> (KeyType &amp;&amp;key) const</para>

<para>check the existence of an element in a JSON object </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1adb82c1f34c73486e013da71ae369e597">contains</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp;ptr) const</para>

<para>check the existence of an element in a JSON object given a JSON pointer </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1ad4d3423aa95fbaa3188b930a510255fe">contains</link> (const typename <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; ptr) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>capacity    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8">empty</link> () const noexcept</para>

<para>checks whether the container is empty. </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0">size</link> () const noexcept</para>

<para>returns the number of elements </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736">max_size</link> () const noexcept</para>

<para>returns the maximum possible number of elements </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON Pointer functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a0d3deaa73b3644b4da3f8ef3172cd8d2">operator[]</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp;ptr)</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a392564e9a8fe51524912512452b9f498">operator[]</link> (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp;ptr)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a0a691c29eb7c4acd91ccb498a79cd3ee">operator[]</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp;ptr) const</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a25fea4a1079548094a2f70e00a693776">operator[]</link> (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp;ptr) const</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1aa014a978f8b6c085db8825faa8dad320">at</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp;ptr)</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json_1a2be0694d6b1e783e5acd885ad922d024">at</link> (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp;ptr)</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a8284b9c1d4d0830151eaa000f907b2e6">at</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp;ptr) const</para>

<para>access specified element via JSON Pointer </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json_1a64ae1eb4b0814429d589f3c49792f21e">at</link> (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp;ptr) const</para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6">flatten</link> () const</para>

<para>return flattened JSON value </para>
</listitem>
            <listitem><para><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479">unflatten</link> () const</para>

<para>unflatten a previously flattened JSON value </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>JSON Merge Patch functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb">merge_patch</link> (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp;apply_patch)</para>

<para>applies a JSON Merge Patch </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType = std::string, class BooleanType = bool, class NumberIntegerType = std::int64_t, class NumberUnsignedType = std::uint64_t, class NumberFloatType = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType = std::vector&lt;std::uint8_t&gt;&gt;<?linebreak?>class nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</title></simplesect>

<para>a class to store JSON values </para>



<para>a class to store JSON values <formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/">https://json.nlohmann.me/api/basic_json/</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457"/><section>
    <title>allocator_type</title>
<indexterm><primary>allocator_type</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>allocator_type</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::allocator_type =  AllocatorType&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>the allocator type </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7"/><section>
    <title>array_t</title>
<indexterm><primary>array_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>array_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array_t =  ArrayType&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>, AllocatorType&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt; &gt;</computeroutput></para><para>

<para>a type for an array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/array_t/">https://json.nlohmann.me/api/basic_json/array_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389"/><section>
    <title>binary_t</title>
<indexterm><primary>binary_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>binary_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary_t =  <link linkend="_classnlohmann_1_1byte__container__with__subtype">nlohmann::byte_container_with_subtype</link>&lt;BinaryType&gt;</computeroutput></para><para>

<para>a type for a packed binary type </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/binary_t/">https://json.nlohmann.me/api/basic_json/binary_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937"/><section>
    <title>boolean_t</title>
<indexterm><primary>boolean_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>boolean_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::boolean_t =  BooleanType</computeroutput></para><para>

<para>a type for a boolean </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/boolean_t/">https://json.nlohmann.me/api/basic_json/boolean_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a54951d14f0dd10cc3cfdaa24f8bfd15c"/><section>
    <title>cbor_tag_handler_t</title>
<indexterm><primary>cbor_tag_handler_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>cbor_tag_handler_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbor_tag_handler_t =  <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">detail::cbor_tag_handler_t</link></computeroutput></para><para>

<para>how to treat CBOR tags </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38"/><section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>const_iterator</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_iterator =  <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt;const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>a const iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4108c5148f1d7cf13c2681e22f141a10"/><section>
    <title>const_pointer</title>
<indexterm><primary>const_pointer</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>const_pointer</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_pointer =  typename std::allocator_traits&lt;<link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link>&gt;::const_pointer</computeroutput></para><para>

<para>the type of an element const pointer </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6"/><section>
    <title>const_reference</title>
<indexterm><primary>const_reference</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>const_reference</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_reference =  const <link linkend="_classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847">value_type</link>&amp;</computeroutput></para><para>

<para>the type of an element const reference </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a"/><section>
    <title>const_reverse_iterator</title>
<indexterm><primary>const_reverse_iterator</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>const_reverse_iterator</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_reverse_iterator =  <link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&lt;typename <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">basic_json::const_iterator</link>&gt;</computeroutput></para><para>

<para>a const reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a7e0b728380ef6c1ec1fcf16ddf674c77"/><section>
    <title>default_object_comparator_t</title>
<indexterm><primary>default_object_comparator_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>default_object_comparator_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::default_object_comparator_t =  std::less&lt;StringType&gt;</computeroutput></para><para>

<para>default object key comparator type The actual object key comparator type (<link linkend="_classnlohmann_1_1basic__json_1acd2a6657a649c77be751228313311755">object_comparator_t</link>) may be different. </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/default_object_comparator_t/">https://json.nlohmann.me/api/basic_json/default_object_comparator_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd"/><section>
    <title>difference_type</title>
<indexterm><primary>difference_type</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::difference_type =  std::ptrdiff_t</computeroutput></para><para>

<para>a type to represent differences between iterators </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a1e7ca76cc3f62626b380be5e18a002d5"/><section>
    <title>error_handler_t</title>
<indexterm><primary>error_handler_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>error_handler_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::error_handler_t =  <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">detail::error_handler_t</link></computeroutput></para><para>

<para>how to treat decoding errors </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22"/><section>
    <title>exception</title>
<indexterm><primary>exception</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>exception</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::exception =  <link linkend="_classnlohmann_1_1detail_1_1exception">detail::exception</link></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a"/><section>
    <title>initializer_list_t</title>
<indexterm><primary>initializer_list_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>initializer_list_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::initializer_list_t =  std::initializer_list&lt;<link linkend="_classnlohmann_1_1detail_1_1json__ref">detail::json_ref</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt; &gt;</computeroutput></para><para>

<para>helper type for initializer lists of <link linkend="_classnlohmann_1_1basic__json">basic_json</link> values </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689"/><section>
    <title>input_format_t</title>
<indexterm><primary>input_format_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>input_format_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::input_format_t =  detail::input_format_t</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa"/><section>
    <title>invalid_iterator</title>
<indexterm><primary>invalid_iterator</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>invalid_iterator</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::invalid_iterator =  <link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">detail::invalid_iterator</link></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd"/><section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>iterator</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator =  <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>an iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703"/><section>
    <title>json_pointer</title>
<indexterm><primary>json_pointer</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>json_pointer</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_pointer =  <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt;StringType&gt;</computeroutput></para><para>

<para>JSON Pointer, see <link linkend="_classnlohmann_1_1json__pointer">nlohmann::json_pointer</link>. </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a164b1094a1a9feb54e400d8510bb0b12"/><section>
    <title>json_sax_t</title>
<indexterm><primary>json_sax_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>json_sax_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_sax_t =  json_sax&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>SAX interface type, see nlohmann::json_sax. </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f"/><section>
    <title>json_serializer</title>
<indexterm><primary>json_serializer</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>json_serializer</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T , typename SFINAE &gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_serializer =  JSONSerializer&lt;T, SFINAE&gt;</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6"/><section>
    <title>number_float_t</title>
<indexterm><primary>number_float_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>number_float_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_float_t =  NumberFloatType</computeroutput></para><para>

<para>a type for a number (floating-point) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/number_float_t/">https://json.nlohmann.me/api/basic_json/number_float_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3"/><section>
    <title>number_integer_t</title>
<indexterm><primary>number_integer_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>number_integer_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_integer_t =  NumberIntegerType</computeroutput></para><para>

<para>a type for a number (integer) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/number_integer_t/">https://json.nlohmann.me/api/basic_json/number_integer_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef"/><section>
    <title>number_unsigned_t</title>
<indexterm><primary>number_unsigned_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>number_unsigned_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_unsigned_t =  NumberUnsignedType</computeroutput></para><para>

<para>a type for a number (unsigned) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/number_unsigned_t/">https://json.nlohmann.me/api/basic_json/number_unsigned_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1acd2a6657a649c77be751228313311755"/><section>
    <title>object_comparator_t</title>
<indexterm><primary>object_comparator_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>object_comparator_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object_comparator_t =  <link linkend="_namespacenlohmann_1_1detail_1a0a41b6ed14eb953d0b6eee0e4d4bb5d4">detail::actual_object_comparator_t</link>&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>object key comparator type </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/object_comparator_t/">https://json.nlohmann.me/api/basic_json/object_comparator_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56"/><section>
    <title>object_t</title>
<indexterm><primary>object_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>object_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object_t =  ObjectType&lt;StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, <link linkend="_classnlohmann_1_1basic__json_1a7e0b728380ef6c1ec1fcf16ddf674c77">default_object_comparator_t</link>, AllocatorType&lt;std::pair&lt;const StringType, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt; &gt;&gt;</computeroutput></para><para>

<para>a type for an object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/object_t/">https://json.nlohmann.me/api/basic_json/object_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d"/><section>
    <title>other_error</title>
<indexterm><primary>other_error</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>other_error</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::other_error =  <link linkend="_classnlohmann_1_1detail_1_1other__error">detail::other_error</link></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c"/><section>
    <title>out_of_range</title>
<indexterm><primary>out_of_range</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>out_of_range</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::out_of_range =  <link linkend="_classnlohmann_1_1detail_1_1out__of__range">detail::out_of_range</link></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a"/><section>
    <title>parse_error</title>
<indexterm><primary>parse_error</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>parse_error</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse_error =  <link linkend="_classnlohmann_1_1detail_1_1parse__error">detail::parse_error</link></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a24086b03c5c063849df0307f78c41c54"/><section>
    <title>parse_event_t</title>
<indexterm><primary>parse_event_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>parse_event_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse_event_t =  detail::parse_event_t</computeroutput></para><para>

<para>parser event types </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/parse_event_t/">https://json.nlohmann.me/api/basic_json/parse_event_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742"/><section>
    <title>parser_callback_t</title>
<indexterm><primary>parser_callback_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>parser_callback_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parser_callback_t =  detail::parser_callback_t&lt;<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&gt;</computeroutput></para><para>

<para>per-element parser callback type </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/parser_callback_t/">https://json.nlohmann.me/api/basic_json/parser_callback_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a42e5c23402f4c2e1df487e1d102bc5fa"/><section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link> =  typename std::allocator_traits&lt;<link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link>&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link></computeroutput></para><para>

<para>the type of an element pointer </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a"/><section>
    <title>reference</title>
<indexterm><primary>reference</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::reference =  <link linkend="_classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847">value_type</link>&amp;</computeroutput></para><para>

<para>the type of an element reference </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6"/><section>
    <title>reverse_iterator</title>
<indexterm><primary>reverse_iterator</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>reverse_iterator</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::reverse_iterator =  <link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link>&lt;typename <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">basic_json::iterator</link>&gt;</computeroutput></para><para>

<para>a reverse iterator for a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7"/><section>
    <title>size_type</title>
<indexterm><primary>size_type</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>size_type</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::size_type =  std::size_t</computeroutput></para><para>

<para>a type to represent container sizes </para>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8"/><section>
    <title>string_t</title>
<indexterm><primary>string_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>string_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::string_t =  StringType</computeroutput></para><para>

<para>a type for a string </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/string_t/">https://json.nlohmann.me/api/basic_json/string_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c"/><section>
    <title>type_error</title>
<indexterm><primary>type_error</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>type_error</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type_error =  <link linkend="_classnlohmann_1_1detail_1_1type__error">detail::type_error</link></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad"/><section>
    <title>value_t</title>
<indexterm><primary>value_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value_t =  <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">detail::value_t</link></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847"/><section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value_type =  <link linkend="_classnlohmann_1_1basic__json">basic_json</link></computeroutput></para><para>

<para>the type of elements in a <link linkend="_classnlohmann_1_1basic__json">basic_json</link> container </para>
</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a"/><section>
    <title>basic_json()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>create an empty value with a given type </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ace6fbaf6c64f60b61922b5c9d3e61aa6"/><section>
    <title>basic_json()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (std::nullptr_t  = <computeroutput>nullptr</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>create a null object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1adda5ebaff0503f92c8b3d65cfb610ea5"/><section>
    <title>basic_json()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename CompatibleType , typename U  = detail::uncvref_t&lt;CompatibleType&gt;, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; !<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; U &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_structnlohmann_1_1detail_1_1is__compatible__type">detail::is_compatible_type</link>&lt; basic_json_t, U &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (CompatibleType &amp;&amp; val)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>create a JSON value from compatible types </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a40738eb9cb8c5a9ca14ae4b697c29f8e"/><section>
    <title>basic_json()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (const BasicJsonType &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an existing one </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37"/><section>
    <title>basic_json()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> type_deduction = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> manual_type = <computeroutput>value_t::array</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>create a container (array or object) from an initializer list </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aeac617faf3448d6d2cb33a020be01d37_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1afbccea367512a87b5d76e2bd92c5cc85"/><section>
    <title>basic_json()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>construct an array with count copies of given value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a23e540f473d32f1cf5d3243ea3ad495e"/><section>
    <title>basic_json()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class InputIT , typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (InputIT first, InputIT last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>construct a JSON container given an iterator range </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a23e540f473d32f1cf5d3243ea3ad495e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a28524e9c443076ea6dccff8e391354ed"/><section>
    <title>basic_json()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename JsonRef , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1conjunction">detail::conjunction</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__json__ref">detail::is_json_ref</link>&lt; JsonRef &gt;, std::is_same&lt; typename JsonRef::value_type, <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (const JsonRef &amp; ref)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a603be713183ad63dd8c9e1052c606004"/><section>
    <title>basic_json()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>copy constructor </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a642afd9d8886e0dedfc0d5cee2baf57f"/><section>
    <title>basic_json()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json (<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp;&amp; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>move constructor </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/basic_json/">https://json.nlohmann.me/api/basic_json/basic_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a60b643c02a19fa52f99db8215ff58e0f"/><section>
    <title>~basic_json()</title>
<indexterm><primary>~basic_json</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>~basic_json</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::~<link linkend="_classnlohmann_1_1basic__json">basic_json</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>destructor </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/~basic_json/">https://json.nlohmann.me/api/basic_json/~basic_json/</link> </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6d9e85910b91d02f6807b69b61690a4b"/><section>
    <title>accept()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>accept</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>accept</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::accept (detail::span_input_adapter &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55"/><section>
    <title>accept()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>accept</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>accept</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType &gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::accept (InputType &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>check if the input is valid JSON </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/accept/">https://json.nlohmann.me/api/basic_json/accept/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a47fb596473649332185aedb0a8a6ccc5"/><section>
    <title>accept()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>accept</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>accept</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename IteratorType &gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::accept (IteratorType first, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>check if the input is valid JSON </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/accept/">https://json.nlohmann.me/api/basic_json/accept/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a47fb596473649332185aedb0a8a6ccc5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e"/><section>
    <title>array()</title>
<indexterm><primary>array</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>array</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classarray">::array</link> (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create an array from an initializer list </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/array/">https://json.nlohmann.me/api/basic_json/array/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a2be0694d6b1e783e5acd885ad922d024"/><section>
    <title>at()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp; ptr)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a64ae1eb4b0814429d589f3c49792f21e"/><section>
    <title>at()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa014a978f8b6c085db8825faa8dad320"/><section>
    <title>at()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp; ptr)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a8284b9c1d4d0830151eaa000f907b2e6"/><section>
    <title>at()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d"/><section>
    <title>at()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (const typename object_t::key_type &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with bounds checking </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a239e942da82f2597d0cf5ec806f5bc0d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a229964ee10c92ba89ae4fba786fe6b50"/><section>
    <title>at()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (const typename object_t::key_type &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with bounds checking </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a229964ee10c92ba89ae4fba786fe6b50_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a34cae92c0d1091a52a246422b9be9a6d"/><section>
    <title>at()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (KeyType &amp;&amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with bounds checking </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a34cae92c0d1091a52a246422b9be9a6d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a7f25d95cf19bd6b251ada98f4ecbe724"/><section>
    <title>at()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (KeyType &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with bounds checking </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a7f25d95cf19bd6b251ada98f4ecbe724_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e"/><section>
    <title>at()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element with bounds checking </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a52b18a5b7e68652c65b070900c438c6e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a52b18a5b7e68652c65b070900c438c6e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aeb18fe2b8a5dbff4ccf2848de854c3ac"/><section>
    <title>at()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>at</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>at</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element with bounds checking </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/at/">https://json.nlohmann.me/api/basic_json/at/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aeb18fe2b8a5dbff4ccf2848de854c3ac_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa"/><section>
    <title>back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::back ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the last element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/back/">https://json.nlohmann.me/api/basic_json/back/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a30914ad0767ccdc3633f88a906ed7dfa_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aac965b84ea43ccd8aef9caefef02794a"/><section>
    <title>back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::back ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the last element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/back/">https://json.nlohmann.me/api/basic_json/back/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aac965b84ea43ccd8aef9caefef02794a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4f147be16fcde9f510c4aac89ab511c9"/><section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the first element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/begin/">https://json.nlohmann.me/api/basic_json/begin/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4f147be16fcde9f510c4aac89ab511c9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7"/><section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the first element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/begin/">https://json.nlohmann.me/api/basic_json/begin/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a23b495b4c282e4afacf382f5b49af7c7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a3d255dbe024ce2d0fdfb1b4837629091"/><section>
    <title>binary()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>binary</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>binary</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">::binary</link> (const typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp; init)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create a binary array (without subtype) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a7ad4b5b7c96e77d3e105a71ce2147727"/><section>
    <title>binary()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>binary</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>binary</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">::binary</link> (const typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp; init, typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">binary_t::subtype_type</link> subtype)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create a binary array (with subtype) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab085777bbfbfac5a472120b991ef5cf3"/><section>
    <title>binary()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>binary</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>binary</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">::binary</link> (typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp;&amp; init)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create a binary array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab085777bbfbfac5a472120b991ef5cf3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a534d4793bcfa81a307b7f3f7eab2cff9"/><section>
    <title>binary()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>binary</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>binary</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49f49751b4640af1400b6a633535539">::binary</link> (typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp;&amp; init, typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1abf1e0e8ecd51472c25b0fe8aae786a70">binary_t::subtype_type</link> subtype)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create a binary array (with subtype) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/binary/">https://json.nlohmann.me/api/basic_json/binary/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a534d4793bcfa81a307b7f3f7eab2cff9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039"/><section>
    <title>cbegin()</title>
<indexterm><primary>cbegin</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>cbegin</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const iterator to the first element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/cbegin/">https://json.nlohmann.me/api/basic_json/cbegin/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ae508c13e3ad6ce445bcaf24a2bc7d039_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758"/><section>
    <title>cend()</title>
<indexterm><primary>cend</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>cend</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to one past the last element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/cend/">https://json.nlohmann.me/api/basic_json/cend/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a3017cf0f1a4673e904e34cfef62e7758_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53"/><section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::clear ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>clears the contents </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/clear/">https://json.nlohmann.me/api/basic_json/clear/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1adb82c1f34c73486e013da71ae369e597"/><section>
    <title>contains()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>contains</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>check the existence of an element in a JSON object given a JSON pointer </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad4d3423aa95fbaa3188b930a510255fe"/><section>
    <title>contains()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>contains</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains (const typename <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6bc44e35c4504e4c78793e1eff5e9fd7"/><section>
    <title>contains()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>contains</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains (const typename object_t::key_type &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>check the existence of an element in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a6bc44e35c4504e4c78793e1eff5e9fd7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a59461ff8b348aec0234bcd72381f549e"/><section>
    <title>contains()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>contains</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>contains</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains (KeyType &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>check the existence of an element in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/contains/">https://json.nlohmann.me/api/basic_json/contains/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a59461ff8b348aec0234bcd72381f549e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a417ed5b34ef7f76df01c25183b08638c"/><section>
    <title>count()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>count</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">::count</link> (const typename object_t::key_type &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns the number of occurrences of a key in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/count/">https://json.nlohmann.me/api/basic_json/count/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a417ed5b34ef7f76df01c25183b08638c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aac18eed2c42abbc8e5c3cf653e49e0df"/><section>
    <title>count()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>count</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">::count</link> (KeyType &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>returns the number of occurrences of a key in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/count/">https://json.nlohmann.me/api/basic_json/count/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aac18eed2c42abbc8e5c3cf653e49e0df_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6"/><section>
    <title>crbegin()</title>
<indexterm><primary>crbegin</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>crbegin</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::crbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const reverse iterator to the last element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/crbegin/">https://json.nlohmann.me/api/basic_json/crbegin/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a044298d189bdf7e4b36492de9811ddd6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a044298d189bdf7e4b36492de9811ddd6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58"/><section>
    <title>crend()</title>
<indexterm><primary>crend</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>crend</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::crend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns a const reverse iterator to one before the first </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/crend/">https://json.nlohmann.me/api/basic_json/crend/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a223480466a0922267d680ec8f0722d58_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a223480466a0922267d680ec8f0722d58_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385"/><section>
    <title>diff()</title>
<indexterm><primary>diff</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>diff</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; source, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; target, const std::string &amp; path = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>creates a diff as a JSON patch </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/diff/">https://json.nlohmann.me/api/basic_json/diff/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a1c1f21327df91a4dd6c5f5a107240385_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a1c1f21327df91a4dd6c5f5a107240385_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4"/><section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>dump</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::dump (const int indent = <computeroutput>-1</computeroutput>
, const char indent_char = <computeroutput>&apos;&#160;&apos;</computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ensure_ascii = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
, const <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> error_handler = <computeroutput>error_handler_t::strict</computeroutput>
) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>serialization </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/dump/">https://json.nlohmann.me/api/basic_json/dump/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1af244c096197a233edba4c83200ae66ac"/><section>
    <title>emplace()</title>
<indexterm><primary>emplace</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>emplace</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class... Args&gt; </computeroutput><para><computeroutput>std::pair&lt; <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link>, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::emplace (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object if key does not exist </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/emplace/">https://json.nlohmann.me/api/basic_json/emplace/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_af244c096197a233edba4c83200ae66ac_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_af244c096197a233edba4c83200ae66ac_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a15c0a5db4fb12d49433801bbe6436bfb"/><section>
    <title>emplace_back()</title>
<indexterm><primary>emplace_back</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>emplace_back</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class... Args&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::emplace_back (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/emplace_back/">https://json.nlohmann.me/api/basic_json/emplace_back/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a15c0a5db4fb12d49433801bbe6436bfb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8"/><section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>empty</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::empty ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>checks whether the container is empty. </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/empty/">https://json.nlohmann.me/api/basic_json/empty/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a82b5b96f86879a3bac0c713d33178551"/><section>
    <title>end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">::end</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to one past the last element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/end/">https://json.nlohmann.me/api/basic_json/end/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a82b5b96f86879a3bac0c713d33178551_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc"/><section>
    <title>end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">::end</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to one past the last element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/end/">https://json.nlohmann.me/api/basic_json/end/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a931267ec3f09eb67e4382f321b2c52bc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26"/><section>
    <title>erase()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase (const <link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove element from a JSON array given an index </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a221b943d3228488c14225e55f726cc26_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea"/><section>
    <title>erase()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase (const typename object_t::key_type &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove element from a JSON object given a key </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42"/><section>
    <title>erase()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class IteratorType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>IteratorType <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase (IteratorType first, IteratorType last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove elements given an iterator range </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a8ac83750e267e37d5d47591eb44cce42_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e"/><section>
    <title>erase()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class IteratorType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;<link linkend="_classvalue">::value</link>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>IteratorType <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase (IteratorType pos)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove element given an iterator </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a494632b69bbe1d0153d3bedad0901b8e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a494632b69bbe1d0153d3bedad0901b8e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ac7058093dd2ebb55352f996d8aafeda9"/><section>
    <title>erase()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase (KeyType &amp;&amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>remove element from a JSON object given a key </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/erase/">https://json.nlohmann.me/api/basic_json/erase/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae26778239430743a6298b450eb427c65"/><section>
    <title>find()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find (const typename object_t::key_type &amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>find an element in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ae26778239430743a6298b450eb427c65_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ae26778239430743a6298b450eb427c65_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4968ed582119ae2cd0e31f6983bc9fe2"/><section>
    <title>find()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find (const typename object_t::key_type &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>find an element in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4968ed582119ae2cd0e31f6983bc9fe2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a1cc27f7d3cc7ecb154dad11be623905b"/><section>
    <title>find()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find (KeyType &amp;&amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>find an element in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a1cc27f7d3cc7ecb154dad11be623905b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6301007cfe3ea117b1279d40eb6257a1"/><section>
    <title>find()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>find</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find (KeyType &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>find an element in a JSON object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/find/">https://json.nlohmann.me/api/basic_json/find/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a6301007cfe3ea117b1279d40eb6257a1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6"/><section>
    <title>flatten()</title>
<indexterm><primary>flatten</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>flatten</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::flatten ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>return flattened JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/flatten/">https://json.nlohmann.me/api/basic_json/flatten/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a0a12b21c993c57c160936b2581b7a5d7"/><section>
    <title>from_bjdata()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>from_bjdata</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bjdata</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bjdata (const T * ptr, std::size_t len, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a0a12b21c993c57c160936b2581b7a5d7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a20720fee5ec0f0674cefb5d9a24d0d90"/><section>
    <title>from_bjdata()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>from_bjdata</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bjdata</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bjdata (detail::span_input_adapter &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a20720fee5ec0f0674cefb5d9a24d0d90_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a42501aa335b8370a3ed12580c78ee45b"/><section>
    <title>from_bjdata()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>from_bjdata</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bjdata</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bjdata (InputType &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in BJData format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_bjdata/">https://json.nlohmann.me/api/basic_json/from_bjdata/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a42501aa335b8370a3ed12580c78ee45b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a42501aa335b8370a3ed12580c78ee45b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1acef7ae1c76b5e6869f0a00f6a473d705"/><section>
    <title>from_bjdata()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>from_bjdata</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bjdata</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename IteratorType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bjdata (IteratorType first, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in BJData format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_bjdata/">https://json.nlohmann.me/api/basic_json/from_bjdata/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_acef7ae1c76b5e6869f0a00f6a473d705_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae2612581e4788ddffc2f45d5e4cc04fc"/><section>
    <title>from_bson()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>from_bson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson (const T * ptr, std::size_t len, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ae2612581e4788ddffc2f45d5e4cc04fc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a2afe89884edf72412a0624982324755d"/><section>
    <title>from_bson()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>from_bson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson (detail::span_input_adapter &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a2afe89884edf72412a0624982324755d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c"/><section>
    <title>from_bson()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>from_bson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson (InputType &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in BSON format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_bson/">https://json.nlohmann.me/api/basic_json/from_bson/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4e02793f2691aa29ab7cb69fddafbf5c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4e02793f2691aa29ab7cb69fddafbf5c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4118d0ec23d9eeafc236b9524d220e94"/><section>
    <title>from_bson()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>from_bson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_bson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename IteratorType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson (IteratorType first, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in BSON format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_bson/">https://json.nlohmann.me/api/basic_json/from_bson/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4118d0ec23d9eeafc236b9524d220e94_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a188755c8cda27e2afb03c016c14125d8"/><section>
    <title>from_cbor()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>from_cbor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_cbor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor (const T * ptr, std::size_t len, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler = <computeroutput>cbor_tag_handler_t::error</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a188755c8cda27e2afb03c016c14125d8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4a67e47f4bcde55214475f47f8314c1f"/><section>
    <title>from_cbor()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>from_cbor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_cbor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor (detail::span_input_adapter &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler = <computeroutput>cbor_tag_handler_t::error</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4a67e47f4bcde55214475f47f8314c1f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f"/><section>
    <title>from_cbor()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>from_cbor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_cbor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor (InputType &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler = <computeroutput>cbor_tag_handler_t::error</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in CBOR format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_cbor/">https://json.nlohmann.me/api/basic_json/from_cbor/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a44dd5635fb2da4710f6cd6e42b72773f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a44dd5635fb2da4710f6cd6e42b72773f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aba4f6fc79cc405fb212ea3d992334e71"/><section>
    <title>from_cbor()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>from_cbor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_cbor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename IteratorType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor (IteratorType first, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> tag_handler = <computeroutput>cbor_tag_handler_t::error</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in CBOR format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_cbor/">https://json.nlohmann.me/api/basic_json/from_cbor/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aba4f6fc79cc405fb212ea3d992334e71_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a0d69d3102639759d5202a6f764760d23"/><section>
    <title>from_msgpack()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>from_msgpack</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_msgpack</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack (const T * ptr, std::size_t len, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a0d69d3102639759d5202a6f764760d23_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a84b3d89de8e774a2609dc4c0a1273f62"/><section>
    <title>from_msgpack()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>from_msgpack</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_msgpack</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack (detail::span_input_adapter &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a84b3d89de8e774a2609dc4c0a1273f62_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590"/><section>
    <title>from_msgpack()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>from_msgpack</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_msgpack</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack (InputType &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in MessagePack format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_msgpack/">https://json.nlohmann.me/api/basic_json/from_msgpack/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_adbcab52fca1e25b3311ef14e71a57590_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_adbcab52fca1e25b3311ef14e71a57590_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a94dbeb08bcd13821512957dcbf3f00bd"/><section>
    <title>from_msgpack()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>from_msgpack</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_msgpack</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename IteratorType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack (IteratorType first, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in MessagePack format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_msgpack/">https://json.nlohmann.me/api/basic_json/from_msgpack/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a94dbeb08bcd13821512957dcbf3f00bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab6eeda23c34cee79d8d72f1a8691a8de"/><section>
    <title>from_ubjson()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>from_ubjson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_ubjson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson (const T * ptr, std::size_t len, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab6eeda23c34cee79d8d72f1a8691a8de_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a47201396899371881a46562bffb922da"/><section>
    <title>from_ubjson()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>from_ubjson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_ubjson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson (detail::span_input_adapter &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a47201396899371881a46562bffb922da_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7"/><section>
    <title>from_ubjson()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>from_ubjson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_ubjson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson (InputType &amp;&amp; i, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in UBJSON format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_ubjson/">https://json.nlohmann.me/api/basic_json/from_ubjson/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aa81f62db69978b90ff701f05c72e03a7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aa81f62db69978b90ff701f05c72e03a7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9dbb422350fed520ce8c1ca8762c0251"/><section>
    <title>from_ubjson()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>from_ubjson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>from_ubjson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename IteratorType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson (IteratorType first, IteratorType last, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a JSON value from an input in UBJSON format </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/from_ubjson/">https://json.nlohmann.me/api/basic_json/from_ubjson/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a9dbb422350fed520ce8c1ca8762c0251_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed"/><section>
    <title>front()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::front ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the first element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/front/">https://json.nlohmann.me/api/basic_json/front/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a5417ca43ae5e7a3a2f82eee2d915c6ed_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5ac8f974c178cf9326b6765e22f50eb6"/><section>
    <title>front()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::front ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access the first element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/front/">https://json.nlohmann.me/api/basic_json/front/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a5ac8f974c178cf9326b6765e22f50eb6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1af1650e004db368459b3c0db041b32adc"/><section>
    <title>get()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ValueTypeCV , typename ValueType  = detail::uncvref_t&lt;ValueTypeCV&gt;&gt; </computeroutput><para><computeroutput>auto <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">::get</link> ( ) const -&gt; decltype(std::declval&lt;const basic_json_t&amp;&gt;().template get_impl&lt;ValueType&gt;(<link linkend="_structnlohmann_1_1detail_1_1priority__tag">detail::priority_tag</link>&lt;4&gt; {}))
    <computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a (pointer) value (explicit) </para>
</para>

<para>Performs explicit type conversion between the JSON value and a compatible value if required.</para>

<para><itemizedlist>
<listitem>
<para>If the requested type is a pointer to the internally stored JSON value that pointer is returned. No copies are made.</para>
</listitem><listitem>
<para>If the requested type is the current <link linkend="_classnlohmann_1_1basic__json">basic_json</link>, or a different <link linkend="_classnlohmann_1_1basic__json">basic_json</link> convertible from the current <link linkend="_classnlohmann_1_1basic__json">basic_json</link>.</para>
</listitem><listitem>
<para>Otherwise the value is converted by calling the <link linkend="_classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f">json_serializer&lt;ValueType&gt;</link> <computeroutput>from_json()</computeroutput> method.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ValueTypeCV</entry><entry>
<para>the provided value type </para>
</entry>
                            </row>
                            <row>
<entry>ValueType</entry><entry>
<para>the returned value type</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the JSON value, converted to </para>
</formalpara>

                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ValueType</entry><entry>
<para>if necessary</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>what</entry><entry>
<para><link linkend="_classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f">json_serializer&lt;ValueType&gt;</link> <computeroutput>from_json()</computeroutput> method throws if conversion is required</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Since</title>

<para>version 2.1.0 </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a826e180d2457d114ed4c51f4b0737df8"/><section>
    <title>get()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput>auto <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">::get</link> ( ) -&gt; decltype(std::declval&lt;basic_json_t&amp;&gt;().template <link linkend="_classnlohmann_1_1basic__json_1a85222410e03d8f5c8ff9c78cf9f6b1b6">get_ptr</link>&lt;PointerType&gt;())
    <computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer value (explicit) </para>
</para>

<para>Explicit pointer access to the internally stored JSON value. No copies are made.</para>

<para><warning><title>Warning</title>

<para>The pointer becomes invalid if the underlying JSON object changes.</para>
</warning>

                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>PointerType</entry><entry>
<para>pointer type; must be a pointer to <link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937">boolean_t</link>, <link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">number_integer_t</link>, <link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">number_unsigned_t</link>, or <link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">number_float_t</link>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para>
</formalpara>
@complexity Constant.</para>

<para>@liveexample{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para>

<para><formalpara><title>See also</title>

<para>see <link linkend="_classnlohmann_1_1basic__json_1a85222410e03d8f5c8ff9c78cf9f6b1b6">get_ptr()</link> for explicit pointer-member access</para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1afc55e7dca1a243b0d5011564824c0267"/><section>
    <title>get_allocator()</title>
<indexterm><primary>get_allocator</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_allocator</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457">allocator_type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_allocator ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>returns the allocator associated with the container </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_allocator/">https://json.nlohmann.me/api/basic_json/get_allocator/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a23c2e02101cc62e1aec1d6ddaef0e340"/><section>
    <title>get_binary()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get_binary</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_binary</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link> &amp; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_binary ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a binary value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_binary/">https://json.nlohmann.me/api/basic_json/get_binary/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a23c2e02101cc62e1aec1d6ddaef0e340_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a314434d513d15eb576707d4afae3dd64"/><section>
    <title>get_binary()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get_binary</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_binary</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>const <link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link> &amp; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_binary ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a binary value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_binary/">https://json.nlohmann.me/api/basic_json/get_binary/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a314434d513d15eb576707d4afae3dd64_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1afd99a3902a2bb09a306fb854540ae1dd"/><section>
    <title>get_ptr()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get_ptr</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_ptr</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ptr ( ) const -&gt; decltype(std::declval&lt;const basic_json_t&amp;&gt;().get_impl_ptr(std::declval&lt;PointerType&gt;()))
    <computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer value (implicit) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_ptr/">https://json.nlohmann.me/api/basic_json/get_ptr/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a85222410e03d8f5c8ff9c78cf9f6b1b6"/><section>
    <title>get_ptr()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get_ptr</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_ptr</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename PointerType , typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput>auto <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ptr ( ) -&gt; decltype(std::declval&lt;basic_json_t&amp;&gt;().get_impl_ptr(std::declval&lt;PointerType&gt;()))
    <computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a pointer value (implicit) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_ptr/">https://json.nlohmann.me/api/basic_json/get_ptr/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5"/><section>
    <title>get_ref()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>get_ref</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_ref</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput>ReferenceType <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a reference value (implicit) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_ref/">https://json.nlohmann.me/api/basic_json/get_ref/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a7f0889072c54f1b899689ed6246238e7"/><section>
    <title>get_ref()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>get_ref</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_ref</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ReferenceType , typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput>ReferenceType <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a reference value (implicit) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_ref/">https://json.nlohmann.me/api/basic_json/get_ref/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a85dd41000e4e7751928fffb44ff4aed4"/><section>
    <title>get_to()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>get_to</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_to</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T , std::size_t N, typename Array  = T (&amp;)[N], <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1has__from__json">detail::has_from_json</link>&lt; basic_json_t, Array &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>Array <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to (T(&amp;) v[N]) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a00a17ee748e5d76b1f4bf7fd1d633ec3"/><section>
    <title>get_to()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>get_to</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_to</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>ValueType &amp; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to (ValueType &amp; v) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a3c3fef72afb412c0739d062d27af1c9a"/><section>
    <title>get_to()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>get_to</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>get_to</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; !<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_structnlohmann_1_1detail_1_1has__from__json">detail::has_from_json</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>ValueType &amp; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to (ValueType &amp; v) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>get a value (explicit) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/get_to/">https://json.nlohmann.me/api/basic_json/get_to/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a0181d03c6314bedcbad2e92d3676223c"/><section>
    <title>insert()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts range of elements into object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a0181d03c6314bedcbad2e92d3676223c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9c5b9de8a4a759861cb600b38a6c81b1"/><section>
    <title>insert()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp;&amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts element into array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a9c5b9de8a4a759861cb600b38a6c81b1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b"/><section>
    <title>insert()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts element into array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aeb86e8478e20d95970a8b61ff01dce3b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aeb86e8478e20d95970a8b61ff01dce3b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a8137d5471edcd71606e42155ed9c23e2"/><section>
    <title>insert()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> last)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts range of elements into array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a8137d5471edcd71606e42155ed9c23e2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a856b8764efd21dac4205a00fec82e09a"/><section>
    <title>insert()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> ilist)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts elements from initializer list into array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a856b8764efd21dac4205a00fec82e09a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a71e197e6cc78c3960011f68a75f8ef22"/><section>
    <title>insert()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>insert</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, <link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> cnt, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>inserts copies of element into array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/insert/">https://json.nlohmann.me/api/basic_json/insert/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a71e197e6cc78c3960011f68a75f8ef22_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994"/><section>
    <title>insert_iterator()</title>
<indexterm><primary>insert_iterator</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>insert_iterator</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename... Args&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert_iterator (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> pos, Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Helper for insertion of an iterator <note><title>Note</title>

<para>: This uses std::distance to support GCC 4.8, see <link xlink:href="https://github.com/nlohmann/json/pull/1257">https://github.com/nlohmann/json/pull/1257</link> </para>
</note>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab5c8034e997c5b852b92bdc6a3f70994_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e"/><section>
    <title>is_array()</title>
<indexterm><primary>is_array</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_array</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_array ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_array/">https://json.nlohmann.me/api/basic_json/is_array/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab5b70d60a636b9c5e10f6c8caac60b9e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80"/><section>
    <title>is_binary()</title>
<indexterm><primary>is_binary</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_binary</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_binary ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a binary array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_binary/">https://json.nlohmann.me/api/basic_json/is_binary/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a9576224f7b3ff812a308e7c1e784ea80_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b"/><section>
    <title>is_boolean()</title>
<indexterm><primary>is_boolean</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_boolean</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_boolean ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a boolean </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_boolean/">https://json.nlohmann.me/api/basic_json/is_boolean/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a911b11e855e685fa59ea1d111490b36b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d"/><section>
    <title>is_discarded()</title>
<indexterm><primary>is_discarded</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_discarded</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_discarded ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is discarded </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_discarded/">https://json.nlohmann.me/api/basic_json/is_discarded/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f"/><section>
    <title>is_null()</title>
<indexterm><primary>is_null</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_null</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_null ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is null </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_null/">https://json.nlohmann.me/api/basic_json/is_null/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aedc7afad96292b5ab61a2e0ad3067f5f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851"/><section>
    <title>is_number()</title>
<indexterm><primary>is_number</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_number</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a number </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_number/">https://json.nlohmann.me/api/basic_json/is_number/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_abd47ac8eba63833152795280f75b5851_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_abd47ac8eba63833152795280f75b5851_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb"/><section>
    <title>is_number_float()</title>
<indexterm><primary>is_number_float</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_number_float</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_float ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a floating-point number </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_number_float/">https://json.nlohmann.me/api/basic_json/is_number_float/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a116cdb9300b56519fc9cf756609296cb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362"/><section>
    <title>is_number_integer()</title>
<indexterm><primary>is_number_integer</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_number_integer</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_integer ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an integer number </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_number_integer/">https://json.nlohmann.me/api/basic_json/is_number_integer/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ac4b4acf2c0ad075c0dc125a65c102362_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95"/><section>
    <title>is_number_unsigned()</title>
<indexterm><primary>is_number_unsigned</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_number_unsigned</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_unsigned ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an unsigned integer number </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_number_unsigned/">https://json.nlohmann.me/api/basic_json/is_number_unsigned/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa"/><section>
    <title>is_object()</title>
<indexterm><primary>is_object</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_object</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_object ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is an object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_object/">https://json.nlohmann.me/api/basic_json/is_object/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a57e8411a770a6263d6d8f2116c37f3aa_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4"/><section>
    <title>is_primitive()</title>
<indexterm><primary>is_primitive</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_primitive</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_primitive ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether type is primitive </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_primitive/">https://json.nlohmann.me/api/basic_json/is_primitive/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a548d2d4013da24e7d7510d90febc80c4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7"/><section>
    <title>is_string()</title>
<indexterm><primary>is_string</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_string</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_string ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether value is a string </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_string/">https://json.nlohmann.me/api/basic_json/is_string/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab303d17366c26fca12242c7f8def1bb7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249"/><section>
    <title>is_structured()</title>
<indexterm><primary>is_structured</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>is_structured</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_structured ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return whether type is structured </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/is_structured/">https://json.nlohmann.me/api/basic_json/is_structured/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4e05a7d5deec758f1d830741b68b4249_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a8539f7ff4cfa06ce362484ef99c09604"/><section>
    <title>items()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>items</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>items</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::items ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>helper to access iterator member functions in range-based for </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a02ed1d1f38310ccc2fbb02d2b75387a2"/><section>
    <title>items()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>items</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>items</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::items ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>helper to access iterator member functions in range-based for </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a289c7ce4ae9eea044b8cb0e0f74fa082"/><section>
    <title>iterator_wrapper()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator_wrapper</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>iterator_wrapper</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator_wrapper (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> ref)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>wrapper to access iterator member functions in range-based for </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</link> </para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000002">Deprecated</link> 
<para>This function is deprecated since 3.1.0 and will be removed in version 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1a02ed1d1f38310ccc2fbb02d2b75387a2">items()</link> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para>
</para></para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a7cd832311e7c2f2cf5ca07c4bc4011cd"/><section>
    <title>iterator_wrapper()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator_wrapper</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>iterator_wrapper</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static iteration_proxy&lt; <link linkend="_classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd">iterator</link> &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator_wrapper (<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> ref)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>wrapper to access iterator member functions in range-based for </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/items/">https://json.nlohmann.me/api/basic_json/items/</link> </para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000001">Deprecated</link> 
<para>This function is deprecated since 3.1.0 and will be removed in version 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1a02ed1d1f38310ccc2fbb02d2b75387a2">items()</link> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para>
</para></para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736"/><section>
    <title>max_size()</title>
<indexterm><primary>max_size</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>max_size</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::max_size ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns the maximum possible number of elements </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/max_size/">https://json.nlohmann.me/api/basic_json/max_size/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a1b46c6631e30b8394e89bd1546d69736_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb"/><section>
    <title>merge_patch()</title>
<indexterm><primary>merge_patch</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>merge_patch</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::merge_patch (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; apply_patch)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>applies a JSON Merge Patch </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/merge_patch/">https://json.nlohmann.me/api/basic_json/merge_patch/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a844a77cb154752d12118f10af26d54cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a844a77cb154752d12118f10af26d54cb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a351b4f65014f6c2b8b2832847d44bbd7"/><section>
    <title>meta()</title>
<indexterm><primary>meta</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>meta</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::meta ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>returns version information on the library </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/meta/">https://json.nlohmann.me/api/basic_json/meta/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a351b4f65014f6c2b8b2832847d44bbd7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903"/><section>
    <title>object()</title>
<indexterm><primary>object</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>object</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab49790263c78300fbf05719e38246198">::object</link> (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init = <computeroutput>{}</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>explicitly create an object from an initializer list </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/object/">https://json.nlohmann.me/api/basic_json/object/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a9a4df356e05415438fadf8a15e583903_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6d4b8df10ecc533a50823e8805f4a873"/><section>
    <title>operator value_t()</title>
<indexterm><primary>operator value_t</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator value_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the type of the JSON value (implicit) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_value_t/">https://json.nlohmann.me/api/basic_json/operator_value_t/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ada1463d8d7ba77865f28f5e83dec7f33"/><section>
    <title>operator ValueType()</title>
<indexterm><primary>operator ValueType</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator ValueType</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ValueType , typename std::enable_if&lt; <link linkend="_structnlohmann_1_1detail_1_1conjunction">detail::conjunction</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_pointer&lt; ValueType &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, std::nullptr_t &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, <link linkend="_classnlohmann_1_1detail_1_1json__ref">detail::json_ref</link>&lt; <link linkend="_classnlohmann_1_1basic__json">basic_json</link> &gt; &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, typename string_t::value_type &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; ValueType &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1negation">detail::negation</link>&lt; std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt; &gt; &gt;, <link linkend="_structnlohmann_1_1detail_1_1is__detected__lazy">detail::is_detected_lazy</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e">detail::get_template_function</link>, const basic_json_t &amp;, ValueType &gt; &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1aefed8cf27cadeea45f12c6f3db3ce774">JSON_EXPLICIT</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator ValueType ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>get a value (implicit) </para>
</para>

<para>Implicit type conversion between the JSON value and a compatible value. The call is realized by calling <link linkend="_classnlohmann_1_1basic__json_1af1650e004db368459b3c0db041b32adc">get() const</link>.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>ValueType</entry><entry>
<para>non-pointer type compatible to the JSON value, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. The character type of <link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to <computeroutput>std::string</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>copy of the JSON value, converted to type <emphasis>ValueType</emphasis> </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type_error.302</entry><entry>
<para>in case passed type <emphasis>ValueType</emphasis> is incompatible to the JSON value type (e.g., the JSON value is of type boolean, but a string is requested); see example below</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                @complexity Linear in the size of the JSON value.</para>

<para>@liveexample{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,operator__ValueType}</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a40226d9c84fcb9cb948ae0c27b842c57"/><section>
    <title>operator+=()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+= (<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp;&amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a40226d9c84fcb9cb948ae0c27b842c57_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1af643a4baa91f484b11af0e4437183115"/><section>
    <title>operator+=()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+= (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_af643a4baa91f484b11af0e4437183115_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae300819781bce2193369609457f70f30"/><section>
    <title>operator+=()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+= (const typename object_t::value_type &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ae300819781bce2193369609457f70f30_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ac48302a8b4f8c2a6e30c2a7bff6abc49"/><section>
    <title>operator+=()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+= (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator+=/">https://json.nlohmann.me/api/basic_json/operator+=/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ac48302a8b4f8c2a6e30c2a7bff6abc49_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a28f87a769eda285eb4492ac1172d8812"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> &amp; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator= (<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>copy assignment </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator=/">https://json.nlohmann.me/api/basic_json/operator=/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a28f87a769eda285eb4492ac1172d8812_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a392564e9a8fe51524912512452b9f498"/><section>
    <title>operator[]()<computeroutput>[1/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp; ptr)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a25fea4a1079548094a2f70e00a693776"/><section>
    <title>operator[]()<computeroutput>[2/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">detail::is_basic_json</link>&lt; BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a0d3deaa73b3644b4da3f8ef3172cd8d2"/><section>
    <title>operator[]()<computeroutput>[3/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp; ptr)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a0a691c29eb7c4acd91ccb498a79cd3ee"/><section>
    <title>operator[]()<computeroutput>[4/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp; ptr) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified element via JSON Pointer </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1acb5b489310f4e0ce2d5fb29b73fb59d3"/><section>
    <title>operator[]()<computeroutput>[5/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (const typename object_t::key_type &amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_acb5b489310f4e0ce2d5fb29b73fb59d3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5975d14500cf07bcdbacce892ebdedef"/><section>
    <title>operator[]()<computeroutput>[6/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (KeyType &amp;&amp; key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a5975d14500cf07bcdbacce892ebdedef_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a88d228d3e95d5300bdca64aabc4169b6"/><section>
    <title>operator[]()<computeroutput>[7/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (KeyType &amp;&amp; key) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a88d228d3e95d5300bdca64aabc4169b6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5"/><section>
    <title>operator[]()<computeroutput>[8/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a9ea67fc1ef0ccc42e1d5388fe0416ae5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a9ea67fc1ef0ccc42e1d5388fe0416ae5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad21d96f490fa1aa8605fba8dadcce319"/><section>
    <title>operator[]()<computeroutput>[9/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (<link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> idx) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified array element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ad21d96f490fa1aa8605fba8dadcce319_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1abc94831476f7b4d3efe6f2e9036c7188"/><section>
    <title>operator[]()<computeroutput>[10/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (T * key)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_abc94831476f7b4d3efe6f2e9036c7188_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a11bbe874496eb7b29a5549e0637de59e"/><section>
    <title>operator[]()<computeroutput>[11/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (T * key) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a11bbe874496eb7b29a5549e0637de59e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a47e4e6a77cf318f924d09d3777c760b7"/><section>
    <title>operator[]()<computeroutput>[12/12]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[] (typename object_t::key_type key)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator%5B%5D/">https://json.nlohmann.me/api/basic_json/operator%5B%5D/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a47e4e6a77cf318f924d09d3777c760b7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a73cf15644f04fa569f50291049d1bafd"/><section>
    <title>parse()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>parse</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse (detail::span_input_adapter &amp;&amp; i, const <link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link> cb = <computeroutput>nullptr</computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a73cf15644f04fa569f50291049d1bafd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6"/><section>
    <title>parse()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>parse</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse (InputType &amp;&amp; i, const <link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link> cb = <computeroutput>nullptr</computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>deserialize from a compatible input </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/parse/">https://json.nlohmann.me/api/basic_json/parse/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a15018ade392a844ea32d5188d1a0b9c6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a15018ade392a844ea32d5188d1a0b9c6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad832c70af0989389a9a104c21d2d1c5c"/><section>
    <title>parse()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>parse</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>parse</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename IteratorType &gt; </computeroutput><para><computeroutput>static <link linkend="_json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03">JSON_HEDLEY_WARN_UNUSED_RESULT</link> <link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse (IteratorType first, IteratorType last, const <link linkend="_classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742">parser_callback_t</link> cb = <computeroutput>nullptr</computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> allow_exceptions = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>deserialize from a pair of character iterators </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/parse/">https://json.nlohmann.me/api/basic_json/parse/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ad832c70af0989389a9a104c21d2d1c5c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e"/><section>
    <title>patch()</title>
<indexterm><primary>patch</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>patch</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; json_patch) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>applies a JSON patch </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/patch/">https://json.nlohmann.me/api/basic_json/patch/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_adcc786998f220a5b3083ee8a37c4553e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4"/><section>
    <title>push_back()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back (<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp;&amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab9e0253c92736db021840105d374c4c4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab9e0253c92736db021840105d374c4c4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a3405d38087e13994a5a4556065b0be6d"/><section>
    <title>push_back()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an array </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a3405d38087e13994a5a4556065b0be6d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ad704839e6a5195e3b76f22e2b9aa63ee"/><section>
    <title>push_back()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back (const typename object_t::value_type &amp; val)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ad704839e6a5195e3b76f22e2b9aa63ee_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4567cf75f19b1efca090f75d7a8a350a"/><section>
    <title>push_back()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>push_back</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back (<link linkend="_classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a">initializer_list_t</link> init)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>add an object to an object </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/push_back/">https://json.nlohmann.me/api/basic_json/push_back/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4567cf75f19b1efca090f75d7a8a350a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aab1329f44c8301b7679962726a043549"/><section>
    <title>rbegin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>rbegin</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>rbegin</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rbegin ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the reverse-beginning </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/rbegin/">https://json.nlohmann.me/api/basic_json/rbegin/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aab1329f44c8301b7679962726a043549_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c"/><section>
    <title>rbegin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>rbegin</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>rbegin</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6">reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rbegin ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the reverse-beginning </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/rbegin/">https://json.nlohmann.me/api/basic_json/rbegin/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aff8e38cd973bc94557fa8d36433c0e4c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a2e4cbf41d593d41847b90aea55e5e84d"/><section>
    <title>rend()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>rend</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>rend</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a">const_reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rend ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the reverse-end </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/rend/">https://json.nlohmann.me/api/basic_json/rend/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a2e4cbf41d593d41847b90aea55e5e84d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb"/><section>
    <title>rend()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>rend</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>rend</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6">reverse_iterator</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rend ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns an iterator to the reverse-end </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/rend/">https://json.nlohmann.me/api/basic_json/rend/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a7a328b29b290cc300345376c54f618cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aef9ef0a817ecde8bf270653e8706c150"/><section>
    <title>sax_parse()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>sax_parse</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>sax_parse</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename SAX &gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse (detail::span_input_adapter &amp;&amp; i, SAX * sax, <link linkend="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689">input_format_t</link> format = <computeroutput>input_format_t::json</computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>generate SAX events </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/sax_parse/">https://json.nlohmann.me/api/basic_json/sax_parse/</link> </para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000004">Deprecated</link> 
<para>This function is deprecated since 3.8.0 and will be removed in version 4.0.0 of the library. Please use sax_parse(ptr, ptr + len) instead. </para>
</para></para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aef9ef0a817ecde8bf270653e8706c150_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008"/><section>
    <title>sax_parse()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>sax_parse</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>sax_parse</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename InputType , typename SAX &gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse (InputType &amp;&amp; i, SAX * sax, <link linkend="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689">input_format_t</link> format = <computeroutput>input_format_t::json</computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>generate SAX events </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/sax_parse/">https://json.nlohmann.me/api/basic_json/sax_parse/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a12b382c6407da5543827ce4b24bb5008_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab62241c2694a054818edf2f66d72f113"/><section>
    <title>sax_parse()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>sax_parse</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>sax_parse</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class IteratorType , class SAX &gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse (IteratorType first, IteratorType last, SAX * sax, <link linkend="_classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689">input_format_t</link> format = <computeroutput>input_format_t::json</computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> strict = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ignore_comments = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>generate SAX events </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/sax_parse/">https://json.nlohmann.me/api/basic_json/sax_parse/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab62241c2694a054818edf2f66d72f113_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7">size_type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">::size</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>returns the number of elements </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/size/">https://json.nlohmann.me/api/basic_json/size/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a33c7c8638bb0b12e6d1b69d8106dd2e0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a76126242de262f6d38cadda19e0d13e1"/><section>
    <title>swap()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap (<link linkend="_classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7">array_t</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a76126242de262f6d38cadda19e0d13e1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa242e339ebc7583e114f2167a83f8c90"/><section>
    <title>swap()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap (<link linkend="_classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389">binary_t</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aa242e339ebc7583e114f2167a83f8c90_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a57b86bdcfc55557dacc36969adb0417e"/><section>
    <title>swap()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap (<link linkend="_classnlohmann_1_1basic__json_1a38f0955a144fe9589bf68e8dc4cd5c56">object_t</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a57b86bdcfc55557dacc36969adb0417e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202"/><section>
    <title>swap()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap (<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> other)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a94295a06e0e7b3867fe83afbee4cb202_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aac916df9561daf4eaf2372119fe91899"/><section>
    <title>swap()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap (<link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_aac916df9561daf4eaf2372119fe91899_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a749a1f5091a5e63ccfe919e0aef986af"/><section>
    <title>swap()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap (typename <link linkend="_classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713">binary_t::container_type</link> &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a749a1f5091a5e63ccfe919e0aef986af_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a1303c7c05a4023f8882110c5456d290c"/><section>
    <title>to_bjdata()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_bjdata</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_bjdata</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bjdata (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a BJData serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a1303c7c05a4023f8882110c5456d290c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a1303c7c05a4023f8882110c5456d290c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a32a3c51ba007685b9365746e95351718"/><section>
    <title>to_bjdata()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_bjdata</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_bjdata</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bjdata (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; char &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a BJData serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1af04ef0749ed2a2d2a6f05e5b3bde9b5f"/><section>
    <title>to_bjdata()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_bjdata</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_bjdata</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bjdata (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; std::uint8_t &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a BJData serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_bjdata/">https://json.nlohmann.me/api/basic_json/to_bjdata/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a21302d2c392af239d66df71098d69f73"/><section>
    <title>to_bson()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_bson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_bson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a BSON serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a21302d2c392af239d66df71098d69f73_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a21302d2c392af239d66df71098d69f73_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9ebed178fb7dad1a574bcb7c361fb1b8"/><section>
    <title>to_bson()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_bson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_bson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; char &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a BSON serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4a9babd6635e3f7d4af3dec0635073c5"/><section>
    <title>to_bson()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_bson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_bson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; std::uint8_t &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a BSON serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_bson/">https://json.nlohmann.me/api/basic_json/to_bson/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a28c7743637b821189d9eb3c3dc7ab48f"/><section>
    <title>to_cbor()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_cbor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_cbor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a CBOR serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a28c7743637b821189d9eb3c3dc7ab48f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a28c7743637b821189d9eb3c3dc7ab48f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5689672954fd3bc38f2f17e5607064c6"/><section>
    <title>to_cbor()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_cbor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_cbor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; char &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a CBOR serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ac59dfbee523c5340e41548764a8d26be"/><section>
    <title>to_cbor()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_cbor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_cbor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; std::uint8_t &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a CBOR serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_cbor/">https://json.nlohmann.me/api/basic_json/to_cbor/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a2443e8bb20dc6d136dcf5ea9691d46e0"/><section>
    <title>to_msgpack()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_msgpack</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_msgpack</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a MessagePack serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a2443e8bb20dc6d136dcf5ea9691d46e0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a2443e8bb20dc6d136dcf5ea9691d46e0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aca5dc0fca52131f3a634372120abfbe7"/><section>
    <title>to_msgpack()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_msgpack</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_msgpack</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; char &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a MessagePack serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1af57f7877fbef9881289fe2c8b31e37e1"/><section>
    <title>to_msgpack()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_msgpack</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_msgpack</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; std::uint8_t &gt; o)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a MessagePack serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_msgpack/">https://json.nlohmann.me/api/basic_json/to_msgpack/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a63697142a7bd04d8d50f6446d0e98ee4"/><section>
    <title>to_ubjson()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>to_ubjson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_ubjson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static std::vector&lt; std::uint8_t &gt; <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a UBJSON serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a63697142a7bd04d8d50f6446d0e98ee4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a63697142a7bd04d8d50f6446d0e98ee4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6d133cf7b2e729e9e215edeba5726116"/><section>
    <title>to_ubjson()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>to_ubjson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_ubjson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; char &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a UBJSON serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa9fa5da521622c6c655581840da75090"/><section>
    <title>to_ubjson()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>to_ubjson</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>to_ubjson</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>static <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, detail::output_adapter&lt; std::uint8_t &gt; o, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_size = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> use_type = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a UBJSON serialization of a given JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/to_ubjson/">https://json.nlohmann.me/api/basic_json/to_ubjson/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad"/><section>
    <title>type()</title>
<indexterm><primary>type</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>type</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>constexpr <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[constexpr]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the type of the JSON value (explicit) </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/type/">https://json.nlohmann.me/api/basic_json/type/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab8811fc4eab6091b32b34b3ac3e90474"/><section>
    <title>type_name()</title>
<indexterm><primary>type_name</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>type_name</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1">JSON_HEDLEY_RETURNS_NON_NULL</link> const char * <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type_name ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>return the type as string </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/type_name/">https://json.nlohmann.me/api/basic_json/type_name/</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ab8811fc4eab6091b32b34b3ac3e90474_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479"/><section>
    <title>unflatten()</title>
<indexterm><primary>unflatten</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>unflatten</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json">basic_json</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::unflatten ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>unflatten a previously flattened JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/unflatten/">https://json.nlohmann.me/api/basic_json/unflatten/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4fd9b1d17f9636dec1a33344a09d2651"/><section>
    <title>update()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>update</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>update</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update (<link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> first, <link linkend="_classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38">const_iterator</link> last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> merge_objects = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/update/">https://json.nlohmann.me/api/basic_json/update/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a4fd9b1d17f9636dec1a33344a09d2651_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a129a235796b3f95ec93d65c5e4e9fa41"/><section>
    <title>update()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>update</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>update</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> j, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> merge_objects = <computeroutput><link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link></computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>updates a JSON object from another object, overwriting existing keys </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/update/">https://json.nlohmann.me/api/basic_json/update/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a129a235796b3f95ec93d65c5e4e9fa41_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a129a235796b3f95ec93d65c5e4e9fa41_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa37cb48da6e42361c0a27226cdf7d8ba"/><section>
    <title>value()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class ValueType , class BasicJsonType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>ValueType <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp; ptr, const ValueType &amp; default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aab74fe06c086c9364971aa6425b257e4"/><section>
    <title>value()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const char * key, const char * default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9fc5f71b2f3b22a0cd583f5db145d763"/><section>
    <title>value()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>std::decay&lt; ValueType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const char * key, ValueType &amp;&amp; default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4658a584571c4180656f5268969ed0a1"/><section>
    <title>value()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp; ptr, const char * default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element via JSON Pointer with default value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</link> overload for <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link> default <link linkend="_classvalue">value</link> of <link linkend="_classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad">type</link> const char* </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a36bd6765ccd8aeeeb4e49a766ba639df"/><section>
    <title>value()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>ValueType <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const <link linkend="_classnlohmann_1_1basic__json_1a14d9215d51300ac68de8fd5129621703">json_pointer</link> &amp; ptr, const ValueType &amp; default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element via JSON Pointer with default value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a36bd6765ccd8aeeeb4e49a766ba639df_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae7e99d4a3aab802d015f033b126ebef3"/><section>
    <title>value()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; std::is_same&lt; KeyType, typename object_t::key_type &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>, ValueType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>std::decay&lt; ValueType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const KeyType &amp; key, ValueType &amp;&amp; default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with default value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_ae7e99d4a3aab802d015f033b126ebef3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae9f2f0a08b6a9d8d81f35b0cc203f5b6"/><section>
    <title>value()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const typename <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>&lt; BasicJsonType &gt; &amp; ptr, const char * default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1adcfdefe95d5c2471a5c97e911d46ee88"/><section>
    <title>value()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (const typename object_t::key_type &amp; key, const char * default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with default value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</link> overload for <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link> default <link linkend="_classvalue">value</link> of <link linkend="_classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad">type</link> const char* </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9fec3e8d89e16c6eeb37d78bddc2469a"/><section>
    <title>value()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; !<link linkend="_namespacenlohmann_1_1detail_1a2ed05c5e0077efc26e2e03bcaf27b1b6">detail::is_json_pointer</link>&lt; KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="_classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8">string_t</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (KeyType &amp;&amp; key, const char * default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with default value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</link> overload for <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link> default <link linkend="_classvalue">value</link> of <link linkend="_classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad">type</link> const char* </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a488639de15cb296b94f86fc8e8de752d"/><section>
    <title>value()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;class KeyType , class ValueType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">detail::enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__getable">detail::is_getable</link>&lt; basic_json_t, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link>, ValueType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">detail::is_usable_as_key_type</link>&lt; basic_json_t, KeyType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>std::decay&lt; ValueType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;<link linkend="_classvalue">::value</link> (KeyType &amp;&amp; key, ValueType &amp;&amp; default_value) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>access specified object element with default value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/value/">https://json.nlohmann.me/api/basic_json/value/</link> using std::is_convertible <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link> std::enable_if will fail when using explicit conversions </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1basic__json_a488639de15cb296b94f86fc8e8de752d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa226ed5103dfd10e27e562d35a3a106b"/><section>
    <title>::nlohmann::detail::binary_reader</title>
<indexterm><primary>::nlohmann::detail::binary_reader</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::detail::binary_reader</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename InputType , typename SAX &gt; </computeroutput><para><computeroutput>friend class <link linkend="_classnlohmann_1_1detail_1_1binary__reader">::nlohmann::detail::binary_reader</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a69d491bbda88ade6d3c7a2b11309e8bf"/><section>
    <title>::nlohmann::detail::binary_writer</title>
<indexterm><primary>::nlohmann::detail::binary_writer</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::detail::binary_writer</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename CharType &gt; </computeroutput><para><computeroutput>friend class ::nlohmann::detail::binary_writer<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1abdcb15d025676b4d3db0f32a50f4393f"/><section>
    <title>::nlohmann::detail::exception</title>
<indexterm><primary>::nlohmann::detail::exception</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::detail::exception</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>friend class <link linkend="_classnlohmann_1_1detail_1_1exception">::nlohmann::detail::exception</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a842e5c7ca096025c18b11e715d3401f4"/><section>
    <title>::nlohmann::detail::iter_impl</title>
<indexterm><primary>::nlohmann::detail::iter_impl</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::detail::iter_impl</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend class <link linkend="_classnlohmann_1_1detail_1_1iter__impl">::nlohmann::detail::iter_impl</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a95574da8d12905ea99dc348934c837da"/><section>
    <title>::nlohmann::detail::json_sax_dom_callback_parser</title>
<indexterm><primary>::nlohmann::detail::json_sax_dom_callback_parser</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::detail::json_sax_dom_callback_parser</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend class <link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">::nlohmann::detail::json_sax_dom_callback_parser</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60"/><section>
    <title>::nlohmann::detail::json_sax_dom_parser</title>
<indexterm><primary>::nlohmann::detail::json_sax_dom_parser</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::detail::json_sax_dom_parser</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>friend class <link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">::nlohmann::detail::json_sax_dom_parser</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf"/><section>
    <title>::nlohmann::detail::parser</title>
<indexterm><primary>::nlohmann::detail::parser</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::detail::parser</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename InputType &gt; </computeroutput><para><computeroutput>friend class ::nlohmann::detail::parser<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a43f901b14cf3f7135269b0c75c9ac233"/><section>
    <title>::nlohmann::json_pointer</title>
<indexterm><primary>::nlohmann::json_pointer</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>::nlohmann::json_pointer</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename &gt; </computeroutput><para><computeroutput>friend class <link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6275ed57bae6866cdf5db5370a7ad47c"/><section>
    <title>detail::external_constructor</title>
<indexterm><primary>detail::external_constructor</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>detail::external_constructor</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">detail::value_t</link> &gt; </computeroutput><para><computeroutput>friend struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor">detail::external_constructor</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a6e2e21da48f5d9471716cd868a068327"/><section>
    <title>operator!=<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ne/">https://json.nlohmann.me/api/basic_json/operator_ne/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4d581dc2ab78091885f9af24d13749dc"/><section>
    <title>operator!=<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ne/">https://json.nlohmann.me/api/basic_json/operator_ne/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa9861979059799375c0fff68174610ba"/><section>
    <title>operator!=<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: not equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ne/">https://json.nlohmann.me/api/basic_json/operator_ne/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3"/><section>
    <title>operator&lt;<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt; (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_lt/">https://json.nlohmann.me/api/basic_json/operator_lt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a52907b78829a55473f2548530cf2c1c7"/><section>
    <title>operator&lt;<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt; (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_lt/">https://json.nlohmann.me/api/basic_json/operator_lt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a71f65ff3abee4c140e27ca64fa327973"/><section>
    <title>operator&lt;<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt; (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_lt/">https://json.nlohmann.me/api/basic_json/operator_lt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1af9907af448f7ff794120033e132025f6"/><section>
    <title>operator&lt;&lt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>std::istream &amp; operator&lt;&lt; (<link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, std::istream &amp; i)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>deserialize from stream </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_gtgt/">https://json.nlohmann.me/api/basic_json/operator_gtgt/</link> </para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000005">Deprecated</link> 
<para>This stream operator is deprecated since 3.0.0 and will be removed in version 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1abfcb46247e0d5ec0a442c3193c5305be">operator&gt;&gt;(std::istream&amp;, basic_json&amp;)</link> instead; that is, replace calls like <computeroutput>j &lt;&lt; i;</computeroutput> with <computeroutput>i &gt;&gt; j;</computeroutput>. </para>
</para></para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5bbe57177fdb5833885dc1567ec13394"/><section>
    <title>operator&lt;&lt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>std::ostream &amp; operator&lt;&lt; (std::ostream &amp; o, const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>serialize to stream </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ltlt/">https://json.nlohmann.me/api/basic_json/operator_ltlt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a5c8bb5200f5eac10d31e26be46e5b1ac"/><section>
    <title>operator&lt;=<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_le/">https://json.nlohmann.me/api/basic_json/operator_le/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ae7bce6989e2bf72aa0784ca6755e22a9"/><section>
    <title>operator&lt;=<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_le/">https://json.nlohmann.me/api/basic_json/operator_le/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a4e96b98c1f8dfccaaa94aa0d5e77427c"/><section>
    <title>operator&lt;=<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: less than or equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_le/">https://json.nlohmann.me/api/basic_json/operator_le/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e"/><section>
    <title>operator==<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_eq/">https://json.nlohmann.me/api/basic_json/operator_eq/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a107a085c92ec4e062d1185b2d09c7978"/><section>
    <title>operator==<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_eq/">https://json.nlohmann.me/api/basic_json/operator_eq/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a24ae7acd5b06ae49cfe1c94633436b68"/><section>
    <title>operator==<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_eq/">https://json.nlohmann.me/api/basic_json/operator_eq/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a87db51b6b936fb2ea293cdbc8702dcb8"/><section>
    <title>operator&gt;<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt; (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_gt/">https://json.nlohmann.me/api/basic_json/operator_gt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a9ea8e0e86820fcb3ab0fc937d41226e7"/><section>
    <title>operator&gt;<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt; (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_gt/">https://json.nlohmann.me/api/basic_json/operator_gt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a67771044f08fd07105b34667615d9e0e"/><section>
    <title>operator&gt;<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt; (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_gt/">https://json.nlohmann.me/api/basic_json/operator_gt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a74a943800c7f103d0990d7eef82c6453"/><section>
    <title>operator&gt;=<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ge/">https://json.nlohmann.me/api/basic_json/operator_ge/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1ab83d11de4db25633f93e067aa218cae9"/><section>
    <title>operator&gt;=<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (<link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> lhs, ScalarType rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ge/">https://json.nlohmann.me/api/basic_json/operator_ge/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a94c61e0128f0794e7a34e1aecee5c445"/><section>
    <title>operator&gt;=<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><computeroutput>template&lt;typename ScalarType , typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;<link linkend="_classvalue">::value</link>, int &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (ScalarType lhs, <link linkend="_classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6">const_reference</link> rhs)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>comparison: greater than or equal </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ge/">https://json.nlohmann.me/api/basic_json/operator_ge/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1abfcb46247e0d5ec0a442c3193c5305be"/><section>
    <title>operator&gt;&gt;<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>std::ostream &amp; operator&gt;&gt; (const <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j, std::ostream &amp; o)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>serialize to stream </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_ltlt/">https://json.nlohmann.me/api/basic_json/operator_ltlt/</link> </para>
</formalpara>
<para><link linkend="_deprecated_1_deprecated000003">Deprecated</link> 
<para>This function is deprecated since 3.0.0 and will be removed in version 4.0.0 of the library. Please use <link linkend="_classnlohmann_1_1basic__json_1a5bbe57177fdb5833885dc1567ec13394">operator&lt;&lt;(std::ostream&amp;, const basic_json&amp;)</link> instead; that is, replace calls like <computeroutput>j &gt;&gt; o;</computeroutput> with <computeroutput>o &lt;&lt; j;</computeroutput>. </para>
</para></para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aea0de29387d532e0bc5f2475cb83995d"/><section>
    <title>operator&gt;&gt;<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>std::istream &amp; operator&gt;&gt; (std::istream &amp; i, <link linkend="_classnlohmann_1_1basic__json">basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt; &amp; j)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>deserialize from stream </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/operator_gtgt/">https://json.nlohmann.me/api/basic_json/operator_gtgt/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1basic__json_1aee0ae36cbfb0336832ebc0374c3c7679"/><section>
    <title>swap</title>
<indexterm><primary>swap</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> swap (<link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> left, <link linkend="_classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a">reference</link> right)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>exchanges the values </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/swap/">https://json.nlohmann.me/api/basic_json/swap/</link> </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classnlohmann_1_1basic__json_1aa52fb28bbfe1d5484808cad53c35d76c"/><section>
    <title>__pad3__</title>
<indexterm><primary>__pad3__</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>__pad3__</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput><link linkend="_json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917">JSON_PRIVATE_UNLESS_TESTED</link> <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad3__</computeroutput></para></section>
<anchor xml:id="_classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0"/><section>
    <title>m_value</title>
<indexterm><primary>m_value</primary><secondary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</primary><secondary>m_value</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename U, typename V, typename... Args &gt; class ObjectType = std::map, template&lt; typename U, typename... Args &gt; class ArrayType = std::vector, class StringType  = std::string, class BooleanType  = bool, class NumberIntegerType  = std::int64_t, class NumberUnsignedType  = std::uint64_t, class NumberFloatType  = double, template&lt; typename U &gt; class AllocatorType = std::allocator, template&lt; typename T, typename SFINAE=<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> &gt; class JSONSerializer = adl_serializer, class BinaryType  = std::vector&lt;std::uint8_t&gt;&gt; </computeroutput><para><computeroutput>json_value <link linkend="_classnlohmann_1_1basic__json">nlohmann::basic_json</link>&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::m_value = {}</computeroutput></para><para>

<para>the value of the current element </para>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
