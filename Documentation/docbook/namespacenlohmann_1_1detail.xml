<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacenlohmann_1_1detail" xml:lang="en-US">
<title>nlohmann::detail Namespace Reference</title>
<indexterm><primary>nlohmann::detail</primary></indexterm>
<para>

<para>detail namespace with internal helper functions </para>
 
</para>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacenlohmann_1_1detail_1_1container__input__adapter__factory__impl">container_input_adapter_factory_impl</link></para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacenlohmann_1_1detail_1_1dtoa__impl">dtoa_impl</link></para>

<para>implements the Grisu2 algorithm for binary to decimal floating-point conversion. </para>
</listitem>
            <listitem><para>namespace <link linkend="_namespacenlohmann_1_1detail_1_1utility__internal">utility_internal</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator">actual_object_comparator</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1binary__reader">binary_reader</link></para>

<para>deserialization of CBOR, MessagePack, and UBJSON values </para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1conjunction">conjunction</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1conjunction_3_01_b_01_4">conjunction&lt; B &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1conjunction_3_01_b_00_01_bn_8_8_8_01_4">conjunction&lt; B, Bn... &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1detector">detector</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1detector_3_01_default_00_01void__t_3_01_op_3_01_args_8_8_8_01_4_01_4_00_01_op_00_01_args_8_8_8_01_4">detector&lt; Default, void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1exception">exception</link></para>

<para>general exception of the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class </para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor">external_constructor</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4">external_constructor&lt; value_t::array &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1binary_01_4">external_constructor&lt; value_t::binary &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1boolean_01_4">external_constructor&lt; value_t::boolean &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__float_01_4">external_constructor&lt; value_t::number_float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__integer_01_4">external_constructor&lt; value_t::number_integer &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__unsigned_01_4">external_constructor&lt; value_t::number_unsigned &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1object_01_4">external_constructor&lt; value_t::object &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1string_01_4">external_constructor&lt; value_t::string &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1has__from__json">has_from_json</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1has__from__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01f77b5e367f2d5612b4276a155bf11896">has_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1has__key__compare">has_key_compare</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json">has_non_default_from_json</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1has__non__default__from__json_3_01_basic_json_type_00_01_t_00_01enab072547deb606b69b2d65cb910e223bb8">has_non_default_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1has__to__json">has_to_json</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1has__to__json_3_01_basic_json_type_00_01_t_00_01enable__if__t_3_01_96b7bbbe462cd4ff87697dab3bc993a77">has_to_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1internal__iterator">internal_iterator</link></para>

<para>an iterator value </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1invalid__iterator">invalid_iterator</link></para>

<para>exception indicating errors with iterators </para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__basic__json_3_01_n_l_o_h_m_a_n_n___b_a_s_i_c___j_s_o_n___t_p_l_01_4">is_basic_json&lt; NLOHMANN_BASIC_JSON_TPL &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__basic__json__context">is_basic_json_context</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__comparable">is_comparable</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__comparable_3_01_compare_00_01_a_00_01_b_00_01void__t_3_01decltyp6bff7c45329e18ae2528d499d1a5477d">is_comparable&lt; Compare, A, B, void_t&lt; decltype(std::declval&lt; Compare &gt;()(std::declval&lt; A &gt;(), std::declval&lt; B &gt;())), decltype(std::declval&lt; Compare &gt;()(std::declval&lt; B &gt;(), std::declval&lt; A &gt;()))&gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type">is_compatible_array_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type__impl">is_compatible_array_type_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type__impl_3_01_basic_json_type_00_01_compati4915acc171fa5fb7ebfebe0b9b6c0be2">is_compatible_array_type_impl&lt; BasicJsonType, CompatibleArrayType, enable_if_t&lt; is_detected&lt; iterator_t, CompatibleArrayType &gt;::value &amp;&amp;is_iterator_traits&lt; iterator_traits&lt; detected_t&lt; iterator_t, CompatibleArrayType &gt; &gt; &gt;::value &amp;&amp;!std::is_same&lt; CompatibleArrayType, detected_t&lt; range_value_t, CompatibleArrayType &gt; &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type">is_compatible_integer_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">is_compatible_integer_type_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604">is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type">is_compatible_object_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl">is_compatible_object_type_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type__impl_3_01_basic_json_type_00_01_compat5b5eeaa8fc54c99a69d765462ac539f5">is_compatible_object_type_impl&lt; BasicJsonType, CompatibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, CompatibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, CompatibleObjectType &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type">is_compatible_string_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__type">is_compatible_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__type__impl">is_compatible_type_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__compatible__type__impl_3_01_basic_json_type_00_01_compatible_typ632bee7ec037fc0233f1bbe9dd7d8874">is_compatible_type_impl&lt; BasicJsonType, CompatibleType, enable_if_t&lt; is_complete_type&lt; CompatibleType &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__complete__type">is_complete_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__complete__type_3_01_t_00_01decltype_07void_07sizeof_07_t_08_08_08_4">is_complete_type&lt; T, decltype(void(sizeof(T)))&gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible">is_constructible</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible_3_01const_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4">is_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible_3_01const_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4">is_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4">is_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4">is_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type">is_constructible_array_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl">is_constructible_array_type_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons27075d101b6ea0a206984ee0c21ea5d0">is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; !std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &amp;&amp;!is_compatible_string_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;is_default_constructible&lt; ConstructibleArrayType &gt;::value &amp;&amp;(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value||std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value)&amp;&amp;is_detected&lt; iterator_t, ConstructibleArrayType &gt;::value &amp;&amp;is_iterator_traits&lt; iterator_traits&lt; detected_t&lt; iterator_t, ConstructibleArrayType &gt; &gt; &gt;::value &amp;&amp;is_detected&lt; range_value_t, ConstructibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; ConstructibleArrayType, detected_t&lt; range_value_t, ConstructibleArrayType &gt; &gt;::value &amp;&amp;is_complete_type&lt; detected_t&lt; range_value_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01_basic_json_type_00_01_cons8cf88e17d5eaa68665a8fb4b97604b0e">is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type">is_constructible_object_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl">is_constructible_object_type_impl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__object__type__impl_3_01_basic_json_type_00_01_con1038de539babd212ea0aef1cc5752545">is_constructible_object_type_impl&lt; BasicJsonType, ConstructibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, ConstructibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, ConstructibleObjectType &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__string__type">is_constructible_string_type</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__tuple">is_constructible_tuple</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__constructible__tuple_3_01_t1_00_01std_1_1tuple_3_01_args_8_8_8_01_4_01_4">is_constructible_tuple&lt; T1, std::tuple&lt; Args... &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__default__constructible">is_default_constructible</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__default__constructible_3_01const_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4">is_default_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__default__constructible_3_01const_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4">is_default_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__default__constructible_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4">is_default_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__default__constructible_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4">is_default_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__detected__lazy">is_detected_lazy</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__getable">is_getable</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits">is_iterator_traits</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__iterator__traits_3_01iterator__traits_3_01_t_01_4_01_4">is_iterator_traits&lt; iterator_traits&lt; T &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of">is_json_iterator_of</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of_3_01_basic_json_type_00_01typename_01_basic_jc41a391b8ae8087564ffc6f880172795">is_json_iterator_of&lt; BasicJsonType, typename BasicJsonType::const_iterator &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of_3_01_basic_json_type_00_01typename_01_basic_json_type_1_1iterator_01_4">is_json_iterator_of&lt; BasicJsonType, typename BasicJsonType::iterator &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__json__ref">is_json_ref</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__json__ref_3_01json__ref_3_01_t_01_4_01_4">is_json_ref&lt; json_ref&lt; T &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__ordered__map">is_ordered_map</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__range">is_range</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_specialization_of</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1is__specialization__of_3_01_primary_00_01_primary_3_01_args_8_8_8_01_4_01_4">is_specialization_of&lt; Primary, Primary&lt; Args... &gt; &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1iter__impl">iter_impl</link></para>

<para>a template for a bidirectional iterator for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class This class implements a both iterators (iterator and const_iterator) for the <link linkend="_classnlohmann_1_1basic__json">basic_json</link> class. </para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_01_5_00_01enable__if__t_3_01std_1_1is__objec8d960665487688165530972cda4f1bea">iterator_traits&lt; T *, enable_if_t&lt; std::is_object&lt; T &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1iterator__traits_3_01_t_00_01enable__if__t_3_01_9std_1_1is__pointer_3_01_t_01_4_1_1value_01_4_01_4">iterator_traits&lt; T, enable_if_t&lt; !std::is_pointer&lt; T &gt;::value &gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1iterator__types">iterator_types</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1iterator__types_3_01_it_00_01void__t_3_01typename_01_it_1_1differenc4a413e9bd546446175f10f15c5631361">iterator_types&lt; It, void_t&lt; typename It::difference_type, typename It::value_type, typename It::pointer, typename It::reference, typename It::iterator_category &gt; &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1json__ref">json_ref</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1json__reverse__iterator">json_reverse_iterator</link></para>

<para>a template for a reverse iterator class </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1json__sax__acceptor">json_sax_acceptor</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__callback__parser">json_sax_dom_callback_parser</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1json__sax__dom__parser">json_sax_dom_parser</link></para>

<para>SAX implementation to create a JSON value from SAX events. </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1lexer">lexer</link></para>

<para>lexical analysis </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1lexer__base">lexer_base</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1make__void">make_void</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1negation">negation</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1other__error">other_error</link></para>

<para>exception indicating other library errors </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1out__of__range">out_of_range</link></para>

<para>exception indicating access out of the defined range </para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link></para>

<para>exception indicating a parse error </para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link></para>

<para>struct to capture the start position of the current token </para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1priority__tag">priority_tag</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1priority__tag_3_010_01_4">priority_tag&lt; 0 &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1serializer">serializer</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1static__const">static_const</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structnlohmann_1_1detail_1_1to__json__fn">to_json_fn</link></para>
</listitem>
            <listitem><para>class <link linkend="_classnlohmann_1_1detail_1_1type__error">type_error</link></para>

<para>exception indicating executing a member function with a wrong type </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename ... Ts&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link> = typename <link linkend="_structnlohmann_1_1detail_1_1make__void">make_void</link>&lt; Ts... &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;template&lt; class... &gt; class Op, class... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link> = typename <link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, Op, Args... &gt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">::value_t</link></para>
</listitem>
            <listitem><para>template&lt;template&lt; class... &gt; class Op, class... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link> = typename <link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, Op, Args... &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;class Default , template&lt; class... &gt; class Op, class... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a240ce21919ab08e8a6cb3a5cfa412bce">detected_or</link> = <link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt; Default, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, Op, Args... &gt;</para>
</listitem>
            <listitem><para>template&lt;class Default , template&lt; class... &gt; class Op, class... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a7ac5b8ef0363101275a2827b3b117dcf">detected_or_t</link> = typename <link linkend="_namespacenlohmann_1_1detail_1a240ce21919ab08e8a6cb3a5cfa412bce">detected_or</link>&lt; Default, Op, Args... &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;class Expected , template&lt; class... &gt; class Op, class... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">is_detected_exact</link> = std::is_same&lt; Expected, <link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&lt; Op, Args... &gt; &gt;</para>
</listitem>
            <listitem><para>template&lt;class To , template&lt; class... &gt; class Op, class... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a5262e531c46e357b33007060f294673b">is_detected_convertible</link> = std::is_convertible&lt; <link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&lt; Op, Args... &gt;, To &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7">uncvref_t</link> = typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> B, typename T  = void&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link> = typename std::enable_if&lt; B, T &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;size_t... Ints&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0">index_sequence</link> = <link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>&lt; <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>, Ints... &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T , T N&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2">make_integer_sequence</link> = typename <link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen">utility_internal::Gen</link>&lt; T, N &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> N&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62">make_index_sequence</link> = <link linkend="_namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2">make_integer_sequence</link>&lt; <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>, N &gt;</para>
</listitem>
            <listitem><para>template&lt;typename... Ts&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e">index_sequence_for</link> = <link linkend="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62">make_index_sequence</link>&lt; sizeof...(Ts)&gt;</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a9c1795c148875722f8482d39e0eb9364">mapped_type_t</link> = typename T::mapped_type</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef">key_type_t</link> = typename T::key_type</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">value_type_t</link> = typename T::value_type</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a3603b59a17d1c5e15050743b847992f2">difference_type_t</link> = typename T::difference_type</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a26dc71e2dd9336587e56062178f9abce">pointer_t</link> = typename T::pointer</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a082bdafd3b4c61d9d1e92b35b8f75ee3">reference_t</link> = typename T::reference</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1ad22d2aa3aab018050ae519f6754366e1">iterator_category_t</link> = typename T::iterator_category</para>
</listitem>
            <listitem><para>template&lt;typename T , typename... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1af846b6cf2f926009ff3a7a61495ca383">to_json_function</link> = decltype(T::to_json(std::declval&lt; Args &gt;()...))</para>
</listitem>
            <listitem><para>template&lt;typename T , typename... Args&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a1711ee5cef66a0523055c8d9f024f322">from_json_function</link> = decltype(T::from_json(std::declval&lt; Args &gt;()...))</para>
</listitem>
            <listitem><para>template&lt;typename T , typename U &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e">get_template_function</link> = decltype(std::declval&lt; T &gt;().template <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>&lt; U &gt;())</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a0c1c269cee3ca095e48735e791d27eb7">detect_key_compare</link> = typename T::key_compare</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a0a41b6ed14eb953d0b6eee0e4d4bb5d4">actual_object_comparator_t</link> = typename <link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator">actual_object_comparator</link>&lt; BasicJsonType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a520ea901ba1560b9bc3e274b61497afe">iterator_t</link> = <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__range">is_range</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt;<link linkend="_classvalue">::value</link>, result_of_begin&lt; decltype(std::declval&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &amp; &gt;())&gt; &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a1eb075b086024e7c18e3a56db93a6688">range_value_t</link> = <link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">value_type_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a520ea901ba1560b9bc3e274b61497afe">iterator_t</link>&lt; T &gt; &gt; &gt;</para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a2ed05c5e0077efc26e2e03bcaf27b1b6">is_json_pointer</link> = <link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_specialization_of</link>&lt;<link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>, <link linkend="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7">uncvref_t</link>&lt; T &gt; &gt;</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename KeyType &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1aca254ee7eaae7285993f354c4e845618">is_key_type_comparable</link> = typename <link linkend="_structnlohmann_1_1detail_1_1is__comparable">is_comparable</link>&lt; typename BasicJsonType::object_comparator_t, const <link linkend="_namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef">key_type_t</link>&lt; typename BasicJsonType::object_t &gt; &amp;, KeyType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1abf19d85a572101c960440a3d92704795">detect_is_transparent</link> = typename T::is_transparent</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename KeyTypeCVRef , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> RequireTransparentComparator = true, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType  = uncvref_t&lt;KeyTypeCVRef&gt;&gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">is_usable_as_key_type</link> = typename std::conditional&lt; <link linkend="_namespacenlohmann_1_1detail_1aca254ee7eaae7285993f354c4e845618">is_key_type_comparable</link>&lt; BasicJsonType, KeyTypeCVRef &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!(ExcludeObjectKeyType &amp;&amp;std::is_same&lt; KeyType, typename BasicJsonType::object_t::key_type &gt;<link linkend="_classvalue">::value</link>) &amp;&amp;(!RequireTransparentComparator||<link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1abf19d85a572101c960440a3d92704795">detect_is_transparent</link>, typename BasicJsonType::object_comparator_t &gt;<link linkend="_classvalue">::value</link>) &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of">is_json_iterator_of</link>&lt; BasicJsonType, KeyType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_namespacenlohmann_1_1detail_1a2ed05c5e0077efc26e2e03bcaf27b1b6">is_json_pointer</link>&lt; KeyType &gt;<link linkend="_classvalue">::value</link>, std::true_type, std::false_type &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename ObjectType , typename KeyType &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1ab87c9bcf91a334b083fd404c4f9b6bab">detect_erase_with_key_type</link> = decltype(std::declval&lt; ObjectType &amp; &gt;().erase(std::declval&lt; KeyType &gt;()))</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename KeyType &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a6512ad13626e93ed63e65817b5fa2abf">has_erase_with_key_type</link> = typename std::conditional&lt; <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1ab87c9bcf91a334b083fd404c4f9b6bab">detect_erase_with_key_type</link>, typename BasicJsonType::object_t, KeyType &gt;<link linkend="_classvalue">::value</link>, std::true_type, std::false_type &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a586e6ff28034ee3ec4401c5084f4528e">string_can_append</link> = decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; Arg &amp;&amp; &gt;()))</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca">detect_string_can_append</link> = <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a586e6ff28034ee3ec4401c5084f4528e">string_can_append</link>, StringType, Arg &gt;</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1ae276c07102bfafe8dadbd2c8d4778666">string_can_append_op</link> = decltype(std::declval&lt; StringType &amp; &gt;()+=std::declval&lt; Arg &amp;&amp; &gt;())</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op</link> = <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1ae276c07102bfafe8dadbd2c8d4778666">string_can_append_op</link>, StringType, Arg &gt;</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1abacf1983baed06ea5405146b0944c39d">string_can_append_iter</link> = decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; const Arg &amp; &gt;().begin(), std::declval&lt; const Arg &amp; &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()))</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374">detect_string_can_append_iter</link> = <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1abacf1983baed06ea5405146b0944c39d">string_can_append_iter</link>, StringType, Arg &gt;</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a083eb22c6777a8c28ea3c4721e4dd5b7">string_can_append_data</link> = decltype(std::declval&lt; StringType &amp; &gt;().append(std::declval&lt; const Arg &amp; &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(), std::declval&lt; const Arg &amp; &gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()))</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename Arg &gt; </para><para>using <link linkend="_namespacenlohmann_1_1detail_1a9220ff36b04e15fcd63befa6d6c9a978">detect_string_can_append_data</link> = <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt; <link linkend="_namespacenlohmann_1_1detail_1a083eb22c6777a8c28ea3c4721e4dd5b7">string_can_append_data</link>, StringType, Arg &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum class <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> : std::uint8_t { <?linebreak?><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">null</link>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">object</link>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">array</link>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</link>
, <?linebreak?><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">boolean</link>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">number_integer</link>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</link>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</link>
, <?linebreak?><link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">binary</link>
, <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">discarded</link>
 }</para>

<para>the JSON type enumeration </para>
</listitem>
            <listitem><para>enum class <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">cbor_tag_handler_t</link> { <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9acacb5e100e5a9a3e7f6d1fd97512215282">error</link>
, <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca567bc1d268f135496de3d5b946b691f3">ignore</link>
, <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca8cd892b7b97ef9489ae4479d3f4ef0fc">store</link>
 }</para>

<para>how to treat CBOR tags </para>
</listitem>
            <listitem><para>enum class <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">error_handler_t</link> { <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">strict</link>
, <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c">replace</link>
, <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa567bc1d268f135496de3d5b946b691f3">ignore</link>
 }</para>

<para>how to treat decoding errors </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link> (const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> lhs, const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> rhs) noexcept</para>

<para>comparison operator for JSON types </para>
</listitem>
            <listitem><para>template&lt;typename StringType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a8d9ddce5bf139f92a61e44827cb6842f">replace_substring</link> (StringType &amp;s, const StringType &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f</link>, const StringType &amp;t)</para>

<para>replace all occurrences of a substring by another string </para>
</listitem>
            <listitem><para>template&lt;typename StringType &gt; </para><para>StringType <link linkend="_namespacenlohmann_1_1detail_1a6d49f8d1bdd1b5d9c574d13a9b3374f6">escape</link> (StringType s)</para>

<para>string escaping as described in RFC 6901 (Sect. 4) </para>
</listitem>
            <listitem><para>template&lt;typename T , typename U , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !std::is_same&lt; T, U &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>T <link linkend="_namespacenlohmann_1_1detail_1af6c76d47b35f0493b1072b9323e98ca8">conditional_static_cast</link> (U <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>std::size_t <link linkend="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207">concat_length</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename... Args&gt; </para><para>std::size_t <link linkend="_namespacenlohmann_1_1detail_1a17570d0bd58a118a715d2992b0a231bb">concat_length</link> (const char *cstr, Args &amp;&amp;... rest)</para>
</listitem>
            <listitem><para>template&lt;typename StringType , typename... Args&gt; </para><para>std::size_t <link linkend="_namespacenlohmann_1_1detail_1a00df56a9b641d0e2f3aeacd3ed1f1f12">concat_length</link> (const StringType &amp;str, Args &amp;&amp;... rest)</para>
</listitem>
            <listitem><para>template&lt;typename... Args&gt; </para><para>std::size_t <link linkend="_namespacenlohmann_1_1detail_1acfb7b73ec9f31ff7233ce33bfa1fa312">concat_length</link> (const char, Args &amp;&amp;... rest)</para>
</listitem>
            <listitem><para>template&lt;typename OutStringType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1">concat_into</link> (OutStringType &amp;)</para>
</listitem>
            <listitem><para>template&lt;typename OutStringType , typename Arg , typename... Args, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !<link linkend="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca">detect_string_can_append</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a1aa79a3d527d961aa8d7a0ead65b7bf7">concat_into</link> (OutStringType &amp;out, Arg &amp;&amp;arg, Args &amp;&amp;... rest)</para>
</listitem>
            <listitem><para>template&lt;typename OutStringType , typename Arg , typename... Args, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !<link linkend="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca">detect_string_can_append</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374">detect_string_can_append_iter</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a3191b3d29305dd22a92988d73bb8b399">concat_into</link> (OutStringType &amp;out, const Arg &amp;arg, Args &amp;&amp;... rest)</para>
</listitem>
            <listitem><para>template&lt;typename OutStringType  = std::string, typename... Args&gt; </para><para>OutStringType <link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link> (Args &amp;&amp;... args)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename T , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_same&lt; T, typename BasicJsonType::boolean_t &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490">to_json</link> (BasicJsonType &amp;j, T <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename CompatibleString , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_constructible&lt; typename BasicJsonType::string_t, CompatibleString &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a7356ed05cdbbb080cee80e1211e1c6c9">to_json</link> (BasicJsonType &amp;j, const CompatibleString &amp;s)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a4aa1ca6b7c61bf19d1f30ea5b669f68e">to_json</link> (BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;&amp;s)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename FloatType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_floating_point&lt; FloatType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a22bffdc8bc7e43af380ba2050696b230">to_json</link> (BasicJsonType &amp;j, FloatType <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename CompatibleNumberUnsignedType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type">is_compatible_integer_type</link>&lt; typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1ae5fd66b5517b3b5a6c6b9fd9f29ba8dc">to_json</link> (BasicJsonType &amp;j, CompatibleNumberUnsignedType <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename CompatibleNumberIntegerType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type">is_compatible_integer_type</link>&lt; typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a91fe576be579c8c2fdd14610605c6dd2">to_json</link> (BasicJsonType &amp;j, CompatibleNumberIntegerType <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename EnumType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_enum&lt; EnumType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a0c8b159dba71981d6c555d284cf6e2bf">to_json</link> (BasicJsonType &amp;j, EnumType e) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1aeca6fb5fede5ed1e12a4420d98a5692b">to_json</link> (BasicJsonType &amp;j, const std::vector&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; &amp;e)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename CompatibleArrayType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type">is_compatible_array_type</link>&lt; BasicJsonType, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type">is_compatible_object_type</link>&lt; BasicJsonType, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type">is_compatible_string_type</link>&lt; BasicJsonType, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; typename BasicJsonType::binary_t, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt; CompatibleArrayType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a3afebc132c5ff83f9cd160e52030fdfd">to_json</link> (BasicJsonType &amp;j, const CompatibleArrayType &amp;arr)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a22191081208b226e3875e1118107c281">to_json</link> (BasicJsonType &amp;j, const typename BasicJsonType::binary_t &amp;bin)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename T , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_convertible&lt; T, BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a7f7c7b9760161b774cdc0b4b838fae64">to_json</link> (BasicJsonType &amp;j, const std::valarray&lt; T &gt; &amp;arr)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1aa0fd1b5788e9ba37e31da43dda738cb5">to_json</link> (BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;&amp;arr)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename CompatibleObjectType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type">is_compatible_object_type</link>&lt; BasicJsonType, CompatibleObjectType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt; CompatibleObjectType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a24c9c12f3839c94e09532f08de85e949">to_json</link> (BasicJsonType &amp;j, const CompatibleObjectType &amp;obj)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1ac9f7a5542851c61d93740148eaec509f">to_json</link> (BasicJsonType &amp;j, typename BasicJsonType::object_t &amp;&amp;obj)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename T , std::size_t N, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !std::is_constructible&lt; typename BasicJsonType::string_t, const T(&amp;)[N]&gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a20ea5175c8999fc8b673e46b892f71f6">to_json</link> (BasicJsonType &amp;j, const T(&amp;arr)[N])</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename T1 , typename T2 , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_constructible&lt; BasicJsonType, T1 &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_constructible&lt; BasicJsonType, T2 &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1ab64eeb55b44db44eb8e9070229eb97df">to_json</link> (BasicJsonType &amp;j, const std::pair&lt; T1, T2 &gt; &amp;p)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename T , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_same&lt; T, iteration_proxy_value&lt; typename BasicJsonType::iterator &gt; &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec">to_json</link> (BasicJsonType &amp;j, const T &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename Tuple , std::size_t... Idx&gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespacenlohmann_1_1detail_1a510dfa15b01e9a8afe31600a27b28199">to_json_tuple_impl</link> (BasicJsonType &amp;j, const Tuple &amp;t, <link linkend="_namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0">index_sequence</link>&lt; Idx... &gt;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>detail namespace with internal helper functions </para>

<para>This namespace collects functions that should not be exposed, implementations of some <link linkend="_classnlohmann_1_1basic__json">basic_json</link> methods, and meta-programming helpers.</para>

<para><formalpara><title>Since</title>

<para>version 2.1.0 </para>
</formalpara>
</para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespacenlohmann_1_1detail_1a0a41b6ed14eb953d0b6eee0e4d4bb5d4"/><section>
    <title>actual_object_comparator_t</title>
<indexterm><primary>actual_object_comparator_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>actual_object_comparator_t</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a0a41b6ed14eb953d0b6eee0e4d4bb5d4">nlohmann::detail::actual_object_comparator_t</link> = typedef typename <link linkend="_structnlohmann_1_1detail_1_1actual__object__comparator">actual_object_comparator</link>&lt;BasicJsonType&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ab87c9bcf91a334b083fd404c4f9b6bab"/><section>
    <title>detect_erase_with_key_type</title>
<indexterm><primary>detect_erase_with_key_type</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detect_erase_with_key_type</secondary></indexterm>
<computeroutput>template&lt;typename ObjectType , typename KeyType &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1ab87c9bcf91a334b083fd404c4f9b6bab">nlohmann::detail::detect_erase_with_key_type</link> = typedef decltype(std::declval&lt;ObjectType&amp;&gt;().erase(std::declval&lt;KeyType&gt;()))</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1abf19d85a572101c960440a3d92704795"/><section>
    <title>detect_is_transparent</title>
<indexterm><primary>detect_is_transparent</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detect_is_transparent</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1abf19d85a572101c960440a3d92704795">nlohmann::detail::detect_is_transparent</link> = typedef typename T::is_transparent</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a0c1c269cee3ca095e48735e791d27eb7"/><section>
    <title>detect_key_compare</title>
<indexterm><primary>detect_key_compare</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detect_key_compare</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a0c1c269cee3ca095e48735e791d27eb7">nlohmann::detail::detect_key_compare</link> = typedef typename T::key_compare</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca"/><section>
    <title>detect_string_can_append</title>
<indexterm><primary>detect_string_can_append</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detect_string_can_append</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca">nlohmann::detail::detect_string_can_append</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a586e6ff28034ee3ec4401c5084f4528e">string_can_append</link>, StringType, Arg&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a9220ff36b04e15fcd63befa6d6c9a978"/><section>
    <title>detect_string_can_append_data</title>
<indexterm><primary>detect_string_can_append_data</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detect_string_can_append_data</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a9220ff36b04e15fcd63befa6d6c9a978">nlohmann::detail::detect_string_can_append_data</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a083eb22c6777a8c28ea3c4721e4dd5b7">string_can_append_data</link>, StringType, Arg&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374"/><section>
    <title>detect_string_can_append_iter</title>
<indexterm><primary>detect_string_can_append_iter</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detect_string_can_append_iter</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374">nlohmann::detail::detect_string_can_append_iter</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1abacf1983baed06ea5405146b0944c39d">string_can_append_iter</link>, StringType, Arg&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b"/><section>
    <title>detect_string_can_append_op</title>
<indexterm><primary>detect_string_can_append_op</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detect_string_can_append_op</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">nlohmann::detail::detect_string_can_append_op</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1ae276c07102bfafe8dadbd2c8d4778666">string_can_append_op</link>, StringType, Arg&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a240ce21919ab08e8a6cb3a5cfa412bce"/><section>
    <title>detected_or</title>
<indexterm><primary>detected_or</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detected_or</secondary></indexterm>
<computeroutput>template&lt;class Default , template&lt; class... &gt; class Op, class... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a240ce21919ab08e8a6cb3a5cfa412bce">nlohmann::detail::detected_or</link> = typedef <link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt;Default, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, Op, Args...&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a7ac5b8ef0363101275a2827b3b117dcf"/><section>
    <title>detected_or_t</title>
<indexterm><primary>detected_or_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detected_or_t</secondary></indexterm>
<computeroutput>template&lt;class Default , template&lt; class... &gt; class Op, class... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a7ac5b8ef0363101275a2827b3b117dcf">nlohmann::detail::detected_or_t</link> = typedef typename <link linkend="_namespacenlohmann_1_1detail_1a240ce21919ab08e8a6cb3a5cfa412bce">detected_or</link>&lt;Default, Op, Args...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d"/><section>
    <title>detected_t</title>
<indexterm><primary>detected_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>detected_t</secondary></indexterm>
<computeroutput>template&lt;template&lt; class... &gt; class Op, class... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">nlohmann::detail::detected_t</link> = typedef typename <link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, Op, Args...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a3603b59a17d1c5e15050743b847992f2"/><section>
    <title>difference_type_t</title>
<indexterm><primary>difference_type_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>difference_type_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a3603b59a17d1c5e15050743b847992f2">nlohmann::detail::difference_type_t</link> = typedef typename T::difference_type</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c"/><section>
    <title>enable_if_t</title>
<indexterm><primary>enable_if_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>enable_if_t</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> B, typename T  = void&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">nlohmann::detail::enable_if_t</link> = typedef typename std::enable_if&lt;B, T&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1711ee5cef66a0523055c8d9f024f322"/><section>
    <title>from_json_function</title>
<indexterm><primary>from_json_function</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>from_json_function</secondary></indexterm>
<computeroutput>template&lt;typename T , typename... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a1711ee5cef66a0523055c8d9f024f322">nlohmann::detail::from_json_function</link> = typedef decltype(T::from_json(std::declval&lt;Args&gt;()...))</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e"/><section>
    <title>get_template_function</title>
<indexterm><primary>get_template_function</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>get_template_function</secondary></indexterm>
<computeroutput>template&lt;typename T , typename U &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e">nlohmann::detail::get_template_function</link> = typedef decltype(std::declval&lt;T&gt;().template <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>&lt;U&gt;())</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a6512ad13626e93ed63e65817b5fa2abf"/><section>
    <title>has_erase_with_key_type</title>
<indexterm><primary>has_erase_with_key_type</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>has_erase_with_key_type</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename KeyType &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a6512ad13626e93ed63e65817b5fa2abf">nlohmann::detail::has_erase_with_key_type</link> = typedef typename std::conditional &lt; <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link> &lt; <link linkend="_namespacenlohmann_1_1detail_1ab87c9bcf91a334b083fd404c4f9b6bab">detect_erase_with_key_type</link>, typename BasicJsonType::object_t, KeyType &gt;<link linkend="_classvalue">::value</link>, std::true_type, std::false_type &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0"/><section>
    <title>index_sequence</title>
<indexterm><primary>index_sequence</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>index_sequence</secondary></indexterm>
<computeroutput>template&lt;size_t... Ints&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0">nlohmann::detail::index_sequence</link> = typedef <link linkend="_structnlohmann_1_1detail_1_1integer__sequence">integer_sequence</link>&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>, Ints...&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e"/><section>
    <title>index_sequence_for</title>
<indexterm><primary>index_sequence_for</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>index_sequence_for</secondary></indexterm>
<computeroutput>template&lt;typename... Ts&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e">nlohmann::detail::index_sequence_for</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62">make_index_sequence</link>&lt;sizeof...(Ts)&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44"/><section>
    <title>is_detected</title>
<indexterm><primary>is_detected</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>is_detected</secondary></indexterm>
<computeroutput>template&lt;template&lt; class... &gt; class Op, class... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">nlohmann::detail::is_detected</link> = typedef typename <link linkend="_structnlohmann_1_1detail_1_1detector">detector</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1nonesuch">nonesuch</link>, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>, Op, Args...&gt;<link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">::value_t</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a5262e531c46e357b33007060f294673b"/><section>
    <title>is_detected_convertible</title>
<indexterm><primary>is_detected_convertible</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>is_detected_convertible</secondary></indexterm>
<computeroutput>template&lt;class To , template&lt; class... &gt; class Op, class... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a5262e531c46e357b33007060f294673b">nlohmann::detail::is_detected_convertible</link> = typedef std::is_convertible&lt;<link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&lt;Op, Args...&gt;, To&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def"/><section>
    <title>is_detected_exact</title>
<indexterm><primary>is_detected_exact</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>is_detected_exact</secondary></indexterm>
<computeroutput>template&lt;class Expected , template&lt; class... &gt; class Op, class... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def">nlohmann::detail::is_detected_exact</link> = typedef std::is_same&lt;Expected, <link linkend="_namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d">detected_t</link>&lt;Op, Args...&gt; &gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a2ed05c5e0077efc26e2e03bcaf27b1b6"/><section>
    <title>is_json_pointer</title>
<indexterm><primary>is_json_pointer</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>is_json_pointer</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a2ed05c5e0077efc26e2e03bcaf27b1b6">nlohmann::detail::is_json_pointer</link> = typedef <link linkend="_structnlohmann_1_1detail_1_1is__specialization__of">is_specialization_of</link>&lt;<link linkend="_classnlohmann_1_1json__pointer">::nlohmann::json_pointer</link>, <link linkend="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7">uncvref_t</link>&lt;T&gt; &gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1aca254ee7eaae7285993f354c4e845618"/><section>
    <title>is_key_type_comparable</title>
<indexterm><primary>is_key_type_comparable</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>is_key_type_comparable</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename KeyType &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1aca254ee7eaae7285993f354c4e845618">nlohmann::detail::is_key_type_comparable</link> = typedef typename <link linkend="_structnlohmann_1_1detail_1_1is__comparable">is_comparable</link> &lt; typename BasicJsonType::object_comparator_t, const <link linkend="_namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef">key_type_t</link>&lt;typename BasicJsonType::object_t&gt;&amp;, KeyType &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb"/><section>
    <title>is_usable_as_key_type</title>
<indexterm><primary>is_usable_as_key_type</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>is_usable_as_key_type</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename KeyTypeCVRef , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> RequireTransparentComparator = true, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType  = uncvref_t&lt;KeyTypeCVRef&gt;&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a4e8fbfae87f964a99124c7e26c3095fb">nlohmann::detail::is_usable_as_key_type</link> = typedef typename std::conditional &lt; <link linkend="_namespacenlohmann_1_1detail_1aca254ee7eaae7285993f354c4e845618">is_key_type_comparable</link>&lt;BasicJsonType, KeyTypeCVRef&gt;<link linkend="_classvalue">::value</link> &amp;&amp; !(ExcludeObjectKeyType &amp;&amp; std::is_same&lt;KeyType, typename BasicJsonType::object_t::key_type&gt;<link linkend="_classvalue">::value</link>) &amp;&amp; (!RequireTransparentComparator || <link linkend="_namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44">is_detected</link> &lt; <link linkend="_namespacenlohmann_1_1detail_1abf19d85a572101c960440a3d92704795">detect_is_transparent</link>, typename BasicJsonType::object_comparator_t &gt;<link linkend="_classvalue">::value</link>) &amp;&amp; !<link linkend="_structnlohmann_1_1detail_1_1is__json__iterator__of">is_json_iterator_of</link>&lt;BasicJsonType, KeyType&gt;<link linkend="_classvalue">::value</link> &amp;&amp; !<link linkend="_namespacenlohmann_1_1detail_1a2ed05c5e0077efc26e2e03bcaf27b1b6">is_json_pointer</link>&lt;KeyType&gt;<link linkend="_classvalue">::value</link>, std::true_type, std::false_type &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ad22d2aa3aab018050ae519f6754366e1"/><section>
    <title>iterator_category_t</title>
<indexterm><primary>iterator_category_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>iterator_category_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1ad22d2aa3aab018050ae519f6754366e1">nlohmann::detail::iterator_category_t</link> = typedef typename T::iterator_category</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a520ea901ba1560b9bc3e274b61497afe"/><section>
    <title>iterator_t</title>
<indexterm><primary>iterator_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>iterator_t</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link> &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a520ea901ba1560b9bc3e274b61497afe">nlohmann::detail::iterator_t</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1is__range">is_range</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&gt;<link linkend="_classvalue">::value</link>, result_of_begin&lt;decltype(std::declval&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1a5c71a5e59a53413cd6c270266d63b031">R</link>&amp;&gt;())&gt; &gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef"/><section>
    <title>key_type_t</title>
<indexterm><primary>key_type_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>key_type_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef">nlohmann::detail::key_type_t</link> = typedef typename T::key_type</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62"/><section>
    <title>make_index_sequence</title>
<indexterm><primary>make_index_sequence</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>make_index_sequence</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> N&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62">nlohmann::detail::make_index_sequence</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2">make_integer_sequence</link>&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>, N&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2"/><section>
    <title>make_integer_sequence</title>
<indexterm><primary>make_integer_sequence</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>make_integer_sequence</secondary></indexterm>
<computeroutput>template&lt;typename T , T N&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2">nlohmann::detail::make_integer_sequence</link> = typedef typename <link linkend="_structnlohmann_1_1detail_1_1utility__internal_1_1_gen">utility_internal::Gen</link>&lt;T, N&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a9c1795c148875722f8482d39e0eb9364"/><section>
    <title>mapped_type_t</title>
<indexterm><primary>mapped_type_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>mapped_type_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a9c1795c148875722f8482d39e0eb9364">nlohmann::detail::mapped_type_t</link> = typedef typename T::mapped_type</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a26dc71e2dd9336587e56062178f9abce"/><section>
    <title>pointer_t</title>
<indexterm><primary>pointer_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>pointer_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a26dc71e2dd9336587e56062178f9abce">nlohmann::detail::pointer_t</link> = typedef typename T::pointer</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1eb075b086024e7c18e3a56db93a6688"/><section>
    <title>range_value_t</title>
<indexterm><primary>range_value_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>range_value_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a1eb075b086024e7c18e3a56db93a6688">nlohmann::detail::range_value_t</link> = typedef <link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">value_type_t</link>&lt;<link linkend="_structnlohmann_1_1detail_1_1iterator__traits">iterator_traits</link>&lt;<link linkend="_namespacenlohmann_1_1detail_1a520ea901ba1560b9bc3e274b61497afe">iterator_t</link>&lt;T&gt; &gt;&gt;</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a082bdafd3b4c61d9d1e92b35b8f75ee3"/><section>
    <title>reference_t</title>
<indexterm><primary>reference_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>reference_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a082bdafd3b4c61d9d1e92b35b8f75ee3">nlohmann::detail::reference_t</link> = typedef typename T::reference</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a586e6ff28034ee3ec4401c5084f4528e"/><section>
    <title>string_can_append</title>
<indexterm><primary>string_can_append</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>string_can_append</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a586e6ff28034ee3ec4401c5084f4528e">nlohmann::detail::string_can_append</link> = typedef decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval &lt; Arg &amp;&amp; &gt; ()))</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a083eb22c6777a8c28ea3c4721e4dd5b7"/><section>
    <title>string_can_append_data</title>
<indexterm><primary>string_can_append_data</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>string_can_append_data</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a083eb22c6777a8c28ea3c4721e4dd5b7">nlohmann::detail::string_can_append_data</link> = typedef decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const Arg&amp;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(), std::declval&lt;const Arg&amp;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()))</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1abacf1983baed06ea5405146b0944c39d"/><section>
    <title>string_can_append_iter</title>
<indexterm><primary>string_can_append_iter</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>string_can_append_iter</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1abacf1983baed06ea5405146b0944c39d">nlohmann::detail::string_can_append_iter</link> = typedef decltype(std::declval&lt;StringType&amp;&gt;().append(std::declval&lt;const Arg&amp;&gt;().begin(), std::declval&lt;const Arg&amp;&gt;().<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()))</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ae276c07102bfafe8dadbd2c8d4778666"/><section>
    <title>string_can_append_op</title>
<indexterm><primary>string_can_append_op</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>string_can_append_op</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename Arg &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1ae276c07102bfafe8dadbd2c8d4778666">nlohmann::detail::string_can_append_op</link> = typedef decltype(std::declval&lt;StringType&amp;&gt;() += std::declval &lt; Arg &amp;&amp; &gt; ())</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1af846b6cf2f926009ff3a7a61495ca383"/><section>
    <title>to_json_function</title>
<indexterm><primary>to_json_function</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json_function</secondary></indexterm>
<computeroutput>template&lt;typename T , typename... Args&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1af846b6cf2f926009ff3a7a61495ca383">nlohmann::detail::to_json_function</link> = typedef decltype(T::to_json(std::declval&lt;Args&gt;()...))</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7"/><section>
    <title>uncvref_t</title>
<indexterm><primary>uncvref_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>uncvref_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7">nlohmann::detail::uncvref_t</link> = typedef typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc"/><section>
    <title>value_type_t</title>
<indexterm><primary>value_type_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>value_type_t</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc">nlohmann::detail::value_type_t</link> = typedef typename T::value_type</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5"/><section>
    <title>void_t</title>
<indexterm><primary>void_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>void_t</secondary></indexterm>
<computeroutput>template&lt;typename ... Ts&gt; </computeroutput><para><computeroutput>using <link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">nlohmann::detail::void_t</link> = typedef typename <link linkend="_structnlohmann_1_1detail_1_1make__void">make_void</link>&lt;Ts...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac"/><section>
    <title>cbor_tag_handler_t</title>
<indexterm><primary>cbor_tag_handler_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>cbor_tag_handler_t</secondary></indexterm>
<para><computeroutput>enum class <link linkend="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac">nlohmann::detail::cbor_tag_handler_t</link><computeroutput>[strong]</computeroutput></computeroutput></para><para>

<para>how to treat CBOR tags </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>error</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>error</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9acacb5e100e5a9a3e7f6d1fd97512215282"/>error</entry><entry>
<para>throw a <link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link> exception in case of a tag </para>
</entry></row><row><entry><indexterm><primary>ignore</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>ignore</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca567bc1d268f135496de3d5b946b691f3"/>ignore</entry><entry>
<para>ignore tags </para>
</entry></row><row><entry><indexterm><primary>store</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>store</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca8cd892b7b97ef9489ae4479d3f4ef0fc"/>store</entry><entry>
<para>store tags as binary type </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df"/><section>
    <title>error_handler_t</title>
<indexterm><primary>error_handler_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>error_handler_t</secondary></indexterm>
<para><computeroutput>enum class <link linkend="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df">nlohmann::detail::error_handler_t</link><computeroutput>[strong]</computeroutput></computeroutput></para><para>

<para>how to treat decoding errors </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>strict</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>strict</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792"/>strict</entry><entry>
<para>throw a <link linkend="_classnlohmann_1_1detail_1_1type__error">type_error</link> exception in case of invalid UTF-8 </para>
</entry></row><row><entry><indexterm><primary>replace</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>replace</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c"/>replace</entry><entry>
<para>replace invalid UTF-8 sequences with U+FFFD </para>
</entry></row><row><entry><indexterm><primary>ignore</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>ignore</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa567bc1d268f135496de3d5b946b691f3"/>ignore</entry><entry>
<para>ignore invalid UTF-8 sequences </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985"/><section>
    <title>value_t</title>
<indexterm><primary>value_t</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>value_t</secondary></indexterm>
<para><computeroutput>enum class <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">nlohmann::detail::value_t</link> : std::uint8_t<computeroutput>[strong]</computeroutput></computeroutput></para><para>

<para>the JSON type enumeration </para>
</para>

<para>This enumeration collects the different JSON types. It is internally used to distinguish the stored values, and the functions <link linkend="_classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f">basic_json::is_null()</link>, <link linkend="_classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa">basic_json::is_object()</link>, <link linkend="_classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e">basic_json::is_array()</link>, <link linkend="_classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7">basic_json::is_string()</link>, <link linkend="_classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b">basic_json::is_boolean()</link>, <link linkend="_classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851">basic_json::is_number()</link> (with <link linkend="_classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362">basic_json::is_number_integer()</link>, <link linkend="_classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95">basic_json::is_number_unsigned()</link>, and <link linkend="_classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb">basic_json::is_number_float()</link>), <link linkend="_classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d">basic_json::is_discarded()</link>, <link linkend="_classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4">basic_json::is_primitive()</link>, and <link linkend="_classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249">basic_json::is_structured()</link> rely on it.</para>

<para><note><title>Note</title>

<para>There are three enumeration entries (number_integer, number_unsigned, and number_float), because the library distinguishes these three types for numbers: <link linkend="_classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef">basic_json::number_unsigned_t</link> is used for unsigned integers, <link linkend="_classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3">basic_json::number_integer_t</link> is used for signed integers, and <link linkend="_classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6">basic_json::number_float_t</link> is used for floating-point numbers or to approximate integers which do not fit in the limits of their respective type.</para>
</note>
<formalpara><title>See also</title>

<para>see <link linkend="_classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a">basic_json::basic_json(const value_t value_type)</link> &#8211; create <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link> JSON <link linkend="_classvalue">value</link> with the default <link linkend="_classvalue">value</link> for <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link> given <link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>null</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>null</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd"/>null</entry><entry>
<para>null value </para>
</entry></row><row><entry><indexterm><primary>object</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>object</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666"/>object</entry><entry>
<para>object (unordered set of name/value pairs) </para>
</entry></row><row><entry><indexterm><primary>array</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>array</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5"/>array</entry><entry>
<para>array (ordered collection of values) </para>
</entry></row><row><entry><indexterm><primary>string</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>string</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21"/>string</entry><entry>
<para>string value </para>
</entry></row><row><entry><indexterm><primary>boolean</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>boolean</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27"/>boolean</entry><entry>
<para>boolean value </para>
</entry></row><row><entry><indexterm><primary>number_integer</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>number_integer</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc"/>number_integer</entry><entry>
<para>number value (signed integer) </para>
</entry></row><row><entry><indexterm><primary>number_unsigned</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>number_unsigned</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e"/>number_unsigned</entry><entry>
<para>number value (unsigned integer) </para>
</entry></row><row><entry><indexterm><primary>number_float</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>number_float</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef"/>number_float</entry><entry>
<para>number value (floating-point) </para>
</entry></row><row><entry><indexterm><primary>binary</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>binary</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20"/>binary</entry><entry>
<para>binary array (ordered collection of bytes) </para>
</entry></row><row><entry><indexterm><primary>discarded</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>discarded</secondary></indexterm>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46"/>discarded</entry><entry>
<para>discarded by the parser callback function </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0"/><section>
    <title>concat()</title>
<indexterm><primary>concat</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat</secondary></indexterm>
<computeroutput>template&lt;typename OutStringType  = std::string, typename... Args&gt; </computeroutput><para><computeroutput>OutStringType nlohmann::detail::concat (Args &amp;&amp;... args)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a988ba5d6c0412dff629c6f6d6d226fb0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a8501011f8c39fdc1451d41a17032a9c1"/><section>
    <title>concat_into()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>concat_into</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat_into</secondary></indexterm>
<computeroutput>template&lt;typename OutStringType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::concat_into (OutStringType &amp; )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a8501011f8c39fdc1451d41a17032a9c1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1aa79a3d527d961aa8d7a0ead65b7bf7"/><section>
    <title>concat_into()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>concat_into</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat_into</secondary></indexterm>
<computeroutput>template&lt;typename OutStringType , typename Arg , typename... Args, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !<link linkend="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca">detect_string_can_append</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::concat_into (OutStringType &amp; out, Arg &amp;&amp; arg, Args &amp;&amp;... rest)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a1aa79a3d527d961aa8d7a0ead65b7bf7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a3191b3d29305dd22a92988d73bb8b399"/><section>
    <title>concat_into()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>concat_into</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat_into</secondary></indexterm>
<computeroutput>template&lt;typename OutStringType , typename Arg , typename... Args, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !<link linkend="_namespacenlohmann_1_1detail_1a29bfb663fbc654255b1ede85e38856ca">detect_string_can_append</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_namespacenlohmann_1_1detail_1ae0aacc9e080718fa30659a3275dd804b">detect_string_can_append_op</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link> &amp;&amp;<link linkend="_namespacenlohmann_1_1detail_1a1861f42509bbf3272b7b451d0fb59374">detect_string_can_append_iter</link>&lt; OutStringType, Arg &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::concat_into (OutStringType &amp; out, const Arg &amp; arg, Args &amp;&amp;... rest)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a3191b3d29305dd22a92988d73bb8b399_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ade7da17ad4a5a2be5bc12a6427a3c207"/><section>
    <title>concat_length()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>concat_length</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat_length</secondary></indexterm>
<para><computeroutput>std::size_t nlohmann::detail::concat_length ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_ade7da17ad4a5a2be5bc12a6427a3c207_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a17570d0bd58a118a715d2992b0a231bb"/><section>
    <title>concat_length()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>concat_length</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat_length</secondary></indexterm>
<computeroutput>template&lt;typename... Args&gt; </computeroutput><para><computeroutput>std::size_t nlohmann::detail::concat_length (const char * cstr, Args &amp;&amp;... rest)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a17570d0bd58a118a715d2992b0a231bb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1acfb7b73ec9f31ff7233ce33bfa1fa312"/><section>
    <title>concat_length()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>concat_length</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat_length</secondary></indexterm>
<computeroutput>template&lt;typename... Args&gt; </computeroutput><para><computeroutput>std::size_t nlohmann::detail::concat_length (const char , Args &amp;&amp;... rest)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_acfb7b73ec9f31ff7233ce33bfa1fa312_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a00df56a9b641d0e2f3aeacd3ed1f1f12"/><section>
    <title>concat_length()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>concat_length</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>concat_length</secondary></indexterm>
<computeroutput>template&lt;typename StringType , typename... Args&gt; </computeroutput><para><computeroutput>std::size_t nlohmann::detail::concat_length (const StringType &amp; str, Args &amp;&amp;... rest)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a00df56a9b641d0e2f3aeacd3ed1f1f12_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1af6c76d47b35f0493b1072b9323e98ca8"/><section>
    <title>conditional_static_cast()</title>
<indexterm><primary>conditional_static_cast</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>conditional_static_cast</secondary></indexterm>
<computeroutput>template&lt;typename T , typename U , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !std::is_same&lt; T, U &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>T nlohmann::detail::conditional_static_cast (U value)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a6d49f8d1bdd1b5d9c574d13a9b3374f6"/><section>
    <title>escape()</title>
<indexterm><primary>escape</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>escape</secondary></indexterm>
<computeroutput>template&lt;typename StringType &gt; </computeroutput><para><computeroutput>StringType nlohmann::detail::escape (StringType s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>string escaping as described in RFC 6901 (Sect. 4) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>s</entry><entry>
<para>string to escape </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>escaped string</para>
</formalpara>
Note the order of escaping &quot;~&quot; to &quot;~0&quot; and &quot;/&quot; to &quot;~1&quot; is important. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a6d49f8d1bdd1b5d9c574d13a9b3374f6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a6d49f8d1bdd1b5d9c574d13a9b3374f6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>operator&lt;</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> nlohmann::detail::operator&lt; (const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> lhs, const <link linkend="_namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985">value_t</link> rhs)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>comparison operator for JSON types </para>
</para>

<para>Returns an ordering that is similar to Python:<itemizedlist>
<listitem>
<para>order: null &lt; boolean &lt; number &lt; object &lt; array &lt; string &lt; binary</para>
</listitem><listitem>
<para>furthermore, each type is not smaller than itself</para>
</listitem><listitem>
<para>discarded values are not comparable</para>
</listitem><listitem>
<para>binary is represented as a b&quot;&quot; string in python and directly comparable to a string; however, making a binary array directly comparable with a string would be surprising behavior in a JSON file.</para>
</listitem></itemizedlist>
</para>

<para><formalpara><title>Since</title>

<para>version 1.0.0 </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a09169efff3bd1771fff29bd92cea19e0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a8d9ddce5bf139f92a61e44827cb6842f"/><section>
    <title>replace_substring()</title>
<indexterm><primary>replace_substring</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>replace_substring</secondary></indexterm>
<computeroutput>template&lt;typename StringType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::replace_substring (StringType &amp; s, const StringType &amp; f, const StringType &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>replace all occurrences of a substring by another string </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in,out</entry><entry>s</entry><entry>
<para>the string to manipulate; changed so that all occurrences of <emphasis>f</emphasis> are replaced with <emphasis>t</emphasis> </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>f</entry><entry>
<para>the substring to replace with <emphasis>t</emphasis> </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>t</entry><entry>
<para>the string to replace <emphasis>f</emphasis> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para>The search string <emphasis>f</emphasis> must not be empty. <emphasis role="bold">This precondition is enforced with an assertion.</emphasis></para>
</formalpara>
<formalpara><title>Since</title>

<para>version 2.0.0 </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a8d9ddce5bf139f92a61e44827cb6842f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a91fe576be579c8c2fdd14610605c6dd2"/><section>
    <title>to_json()<computeroutput>[1/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename CompatibleNumberIntegerType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type">is_compatible_integer_type</link>&lt; typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, CompatibleNumberIntegerType val)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ae5fd66b5517b3b5a6c6b9fd9f29ba8dc"/><section>
    <title>to_json()<computeroutput>[2/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename CompatibleNumberUnsignedType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type">is_compatible_integer_type</link>&lt; typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, CompatibleNumberUnsignedType val)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a3afebc132c5ff83f9cd160e52030fdfd"/><section>
    <title>to_json()<computeroutput>[3/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename CompatibleArrayType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__array__type">is_compatible_array_type</link>&lt; BasicJsonType, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type">is_compatible_object_type</link>&lt; BasicJsonType, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__compatible__string__type">is_compatible_string_type</link>&lt; BasicJsonType, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; typename BasicJsonType::binary_t, CompatibleArrayType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt; CompatibleArrayType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const CompatibleArrayType &amp; arr)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a24c9c12f3839c94e09532f08de85e949"/><section>
    <title>to_json()<computeroutput>[4/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename CompatibleObjectType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__compatible__object__type">is_compatible_object_type</link>&lt; BasicJsonType, CompatibleObjectType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!<link linkend="_structnlohmann_1_1detail_1_1is__basic__json">is_basic_json</link>&lt; CompatibleObjectType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const CompatibleObjectType &amp; obj)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a7356ed05cdbbb080cee80e1211e1c6c9"/><section>
    <title>to_json()<computeroutput>[5/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename CompatibleString , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_constructible&lt; typename BasicJsonType::string_t, CompatibleString &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const CompatibleString &amp; s)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ab64eeb55b44db44eb8e9070229eb97df"/><section>
    <title>to_json()<computeroutput>[6/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename T1 , typename T2 , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_constructible&lt; BasicJsonType, T1 &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_constructible&lt; BasicJsonType, T2 &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const std::pair&lt; T1, T2 &gt; &amp; p)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a7f7c7b9760161b774cdc0b4b838fae64"/><section>
    <title>to_json()<computeroutput>[7/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename T , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_convertible&lt; T, BasicJsonType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const std::valarray&lt; T &gt; &amp; arr)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a7f7c7b9760161b774cdc0b4b838fae64_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1aeca6fb5fede5ed1e12a4420d98a5692b"/><section>
    <title>to_json()<computeroutput>[8/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const std::vector&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> &gt; &amp; e)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec"/><section>
    <title>to_json()<computeroutput>[9/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename T , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_same&lt; T, iteration_proxy_value&lt; typename BasicJsonType::iterator &gt; &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const T &amp; b)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a20ea5175c8999fc8b673e46b892f71f6"/><section>
    <title>to_json()<computeroutput>[10/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename T , std::size_t N, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; !std::is_constructible&lt; typename BasicJsonType::string_t, const T(&amp;)[N]&gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const T(&amp;) arr[N])</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a22191081208b226e3875e1118107c281"/><section>
    <title>to_json()<computeroutput>[11/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, const typename BasicJsonType::binary_t &amp; bin)</computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a0c8b159dba71981d6c555d284cf6e2bf"/><section>
    <title>to_json()<computeroutput>[12/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename EnumType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_enum&lt; EnumType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, EnumType e)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a22bffdc8bc7e43af380ba2050696b230"/><section>
    <title>to_json()<computeroutput>[13/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename FloatType , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_floating_point&lt; FloatType &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, FloatType val)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490"/><section>
    <title>to_json()<computeroutput>[14/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename T , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_same&lt; T, typename BasicJsonType::boolean_t &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, T b)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a1a804b98cbe89b7e44b698f2ca860490_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1aa0fd1b5788e9ba37e31da43dda738cb5"/><section>
    <title>to_json()<computeroutput>[15/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, typename BasicJsonType::array_t &amp;&amp; arr)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_aa0fd1b5788e9ba37e31da43dda738cb5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1ac9f7a5542851c61d93740148eaec509f"/><section>
    <title>to_json()<computeroutput>[16/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, typename BasicJsonType::object_t &amp;&amp; obj)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_ac9f7a5542851c61d93740148eaec509f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a4aa1ca6b7c61bf19d1f30ea5b669f68e"/><section>
    <title>to_json()<computeroutput>[17/17]</computeroutput></title>
<indexterm><primary>to_json</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json (BasicJsonType &amp; j, typename BasicJsonType::string_t &amp;&amp; s)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespacenlohmann_1_1detail_a4aa1ca6b7c61bf19d1f30ea5b669f68e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespacenlohmann_1_1detail_1a510dfa15b01e9a8afe31600a27b28199"/><section>
    <title>to_json_tuple_impl()</title>
<indexterm><primary>to_json_tuple_impl</primary><secondary>nlohmann::detail</secondary></indexterm>
<indexterm><primary>nlohmann::detail</primary><secondary>to_json_tuple_impl</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonType , typename Tuple , std::size_t... Idx&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> nlohmann::detail::to_json_tuple_impl (BasicJsonType &amp; j, const Tuple &amp; t, <link linkend="_namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0">index_sequence</link>&lt; Idx... &gt; )</computeroutput></para></section>
</section>
</section>
