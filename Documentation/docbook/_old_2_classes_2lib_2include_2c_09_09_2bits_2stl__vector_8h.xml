<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_vector.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/stl_vector.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;bits/stl_iterator_base_funcs.h&gt;<?linebreak?>#include &lt;bits/functexcept.h&gt;<?linebreak?>#include &lt;bits/concept_check.h&gt;<?linebreak?>#include &lt;debug/assertions.h&gt;<?linebreak?></programlisting>Include dependency graph for stl_vector.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a41621213129044d03792fb4a02154e78">_GLIBCXX_ASAN_ANNOTATE_REINIT</link></para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1af9af1ca13b28516f3368a403193e082c">_GLIBCXX_ASAN_ANNOTATE_GROW</link>(n)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a666ff63412e58ea7c05bc60aa5028331">_GLIBCXX_ASAN_ANNOTATE_GREW</link>(n)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a3a22afe977388d5925115680ecf92e8b">_GLIBCXX_ASAN_ANNOTATE_SHRINK</link>(n)</para>
</listitem>
            <listitem><para>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a0e67ec4b674538c407d702fbaec0527b">_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>namespace std <link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a544d74b2d5d0dd2197f5fd6f02691de0">_GLIBCXX_VISIBILITY</link> (default)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a0e67ec4b674538c407d702fbaec0527b"/><section>
    <title>_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC</title>
<indexterm><primary>_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC</primary><secondary>stl_vector.h</secondary></indexterm>
<indexterm><primary>stl_vector.h</primary><secondary>_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC</computeroutput></para></section>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a666ff63412e58ea7c05bc60aa5028331"/><section>
    <title>_GLIBCXX_ASAN_ANNOTATE_GREW</title>
<indexterm><primary>_GLIBCXX_ASAN_ANNOTATE_GREW</primary><secondary>stl_vector.h</secondary></indexterm>
<indexterm><primary>stl_vector.h</primary><secondary>_GLIBCXX_ASAN_ANNOTATE_GREW</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_ASAN_ANNOTATE_GREW( n)</computeroutput></para></section>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1af9af1ca13b28516f3368a403193e082c"/><section>
    <title>_GLIBCXX_ASAN_ANNOTATE_GROW</title>
<indexterm><primary>_GLIBCXX_ASAN_ANNOTATE_GROW</primary><secondary>stl_vector.h</secondary></indexterm>
<indexterm><primary>stl_vector.h</primary><secondary>_GLIBCXX_ASAN_ANNOTATE_GROW</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_ASAN_ANNOTATE_GROW( n)</computeroutput></para></section>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a41621213129044d03792fb4a02154e78"/><section>
    <title>_GLIBCXX_ASAN_ANNOTATE_REINIT</title>
<indexterm><primary>_GLIBCXX_ASAN_ANNOTATE_REINIT</primary><secondary>stl_vector.h</secondary></indexterm>
<indexterm><primary>stl_vector.h</primary><secondary>_GLIBCXX_ASAN_ANNOTATE_REINIT</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_ASAN_ANNOTATE_REINIT</computeroutput></para></section>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a3a22afe977388d5925115680ecf92e8b"/><section>
    <title>_GLIBCXX_ASAN_ANNOTATE_SHRINK</title>
<indexterm><primary>_GLIBCXX_ASAN_ANNOTATE_SHRINK</primary><secondary>stl_vector.h</secondary></indexterm>
<indexterm><primary>stl_vector.h</primary><secondary>_GLIBCXX_ASAN_ANNOTATE_SHRINK</secondary></indexterm>
<para><computeroutput>#<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a1b7950c88593de42a92cc8558f5488f6">define</link> _GLIBCXX_ASAN_ANNOTATE_SHRINK( n)</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_1a544d74b2d5d0dd2197f5fd6f02691de0"/><section>
    <title>_GLIBCXX_VISIBILITY()</title>
<indexterm><primary>_GLIBCXX_VISIBILITY</primary><secondary>stl_vector.h</secondary></indexterm>
<indexterm><primary>stl_vector.h</primary><secondary>_GLIBCXX_VISIBILITY</secondary></indexterm>
<para><computeroutput>namespace std _GLIBCXX_VISIBILITY (default )</computeroutput></para>
<para>See bits/stl_deque.h&apos;s _Deque_base for an explanation.</para>

<para>A standard container which offers fixed time access to individual elements in any order.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_Tp</entry><entry>
<para>Type of element. </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type, defaults to allocator&lt;_Tp&gt;.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Meets the requirements of a <link xlink:href="tables.html#65">container</link>, a <link xlink:href="tables.html#66">reversible container</link>, and a <link xlink:href="tables.html#67">sequence</link>, including the <link xlink:href="tables.html#68">optional sequence requirements</link> with the exception of <computeroutput>push_front</computeroutput> and <computeroutput>pop_front</computeroutput>.</para>

<para>In some terminology a vector can be described as a dynamic C-style array, it offers fast and efficient access to individual elements in any order and saves the user from worrying about memory and size allocation. Subscripting ( <computeroutput></computeroutput>[] ) access is also provided as with C-style arrays.</para>

<para>Creates a vector with no elements.</para>

<para>Creates a vector with no elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__a</entry><entry>
<para>An allocator object.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Creates a vector with copies of an exemplar element. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>The number of elements to initially create. </para>
</entry>
                            </row>
                            <row>
<entry>__value</entry><entry>
<para>An element to copy. </para>
</entry>
                            </row>
                            <row>
<entry>__a</entry><entry>
<para>An allocator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This constructor fills the vector with <emphasis>__n</emphasis> copies of <emphasis>__value</emphasis>.</para>

<para>Vector copy constructor. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A vector of identical element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                All the elements of <emphasis>__x</emphasis> are copied, but any unused capacity in <emphasis>__x</emphasis> will not be copied (i.e. capacity() == <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size()</link> in the new vector).</para>

<para>The newly-created vector uses a copy of the allocator object used by <emphasis>__x</emphasis> (unless the allocator traits dictate a different object).</para>

<para>Builds a vector from a range. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__a</entry><entry>
<para>An allocator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Create a vector consisting of copies of the elements from [first,last).</para>

<para>If the iterators are forward, bidirectional, or random-access, then this will call the elements&apos; copy constructor N times (where N is distance(first,last)) and do no memory reallocation. But if only input iterators are used, then this will do at most 2N calls to the copy constructor, and logN memory reallocations.</para>

<para>The dtor only erases the elements, and note that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Vector assignment operator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A vector of identical element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                All the elements of <emphasis>__x</emphasis> are copied, but any unused capacity in <emphasis>__x</emphasis> will not be copied.</para>

<para>Whether the allocator is copied depends on the allocator traits.</para>

<para>Assigns a given value to a vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>Number of elements to be assigned. </para>
</entry>
                            </row>
                            <row>
<entry>__val</entry><entry>
<para>Value to be assigned.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function fills a vector with <emphasis>__n</emphasis> copies of the given value. Note that the assignment completely changes the vector and that the resulting vector&apos;s size is the same as the number of elements assigned.</para>

<para>Assigns a range to a vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function fills a vector with copies of the elements in the range [__first,__last).</para>

<para>Note that the assignment completely changes the vector and that the resulting vector&apos;s size is the same as the number of elements assigned.</para>

<para>Get a copy of the memory allocation object.</para>

<para>Returns a read/write iterator that points to the first element in the vector. Iteration is done in ordinary element order.</para>

<para>Returns a read-only (constant) iterator that points to the first element in the vector. Iteration is done in ordinary element order.</para>

<para>Returns a read/write iterator that points one past the last element in the vector. Iteration is done in ordinary element order.</para>

<para>Returns a read-only (constant) iterator that points one past the last element in the vector. Iteration is done in ordinary element order.</para>

<para>Returns a read/write reverse iterator that points to the last element in the vector. Iteration is done in reverse element order.</para>

<para>Returns a read-only (constant) reverse iterator that points to the last element in the vector. Iteration is done in reverse element order.</para>

<para>Returns a read/write reverse iterator that points to one before the first element in the vector. Iteration is done in reverse element order.</para>

<para>Returns a read-only (constant) reverse iterator that points to one before the first element in the vector. Iteration is done in reverse element order.</para>

<para>Returns the number of elements in the vector. <?linebreak?></para>

<para>Returns the <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size()</link> of the largest possible vector. <?linebreak?></para>

<para>Resizes the vector to the specified number of elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__new_size</entry><entry>
<para>Number of elements the vector should contain. </para>
</entry>
                            </row>
                            <row>
<entry>__x</entry><entry>
<para>Data with which new elements should be populated.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function will resize the vector to the specified number of elements. If the number is smaller than the vector&apos;s current size the vector is truncated, otherwise the vector is extended and new elements are populated with given data.</para>

<para>Returns the total number of elements that the vector can hold before needing to allocate more memory.</para>

<para>Returns true if the vector is empty. (Thus begin() would equal <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link>.)</para>

<para>Attempt to preallocate enough memory for specified number of elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>Number of elements required. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::length_error</entry><entry>
<para>If <emphasis>n</emphasis> exceeds <computeroutput>max_size()</computeroutput>.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function attempts to reserve enough memory for the vector to hold the specified number of elements. If the number requested is more than max_size(), length_error is thrown.</para>

<para>The advantage of this function is that if optimal code is a necessity and the user can determine the number of elements that will be required, the user can reserve the memory in advance, and thus prevent a possible reallocation of memory and copying of vector data.</para>

<para>Subscript access to the data contained in the vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>The index of the element for which data should be accessed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Read/write reference to data.</para>
</formalpara>
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see at().)</para>

<para>Subscript access to the data contained in the vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>The index of the element for which data should be accessed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Read-only (constant) reference to data.</para>
</formalpara>
This operator allows for easy, array-style, data access. Note that data access with this operator is unchecked and out_of_range lookups are not defined. (For checked lookups see at().)</para>

<para>Safety check used only from at().</para>

<para>Provides access to the data contained in the vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>The index of the element for which data should be accessed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Read/write reference to data. </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::out_of_range</entry><entry>
<para>If <emphasis>__n</emphasis> is an invalid index.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function provides for safer data access. The parameter is first checked that it is in the range of the vector. The function throws out_of_range if the check fails.</para>

<para>Provides access to the data contained in the vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>The index of the element for which data should be accessed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Read-only (constant) reference to data. </para>
</formalpara>

                <formalpara>
                    <title>
Exceptions</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::out_of_range</entry><entry>
<para>If <emphasis>__n</emphasis> is an invalid index.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function provides for safer data access. The parameter is first checked that it is in the range of the vector. The function throws out_of_range if the check fails.</para>

<para>Returns a read/write reference to the data at the first element of the vector.</para>

<para>Returns a read-only (constant) reference to the data at the first element of the vector.</para>

<para>Returns a read/write reference to the data at the last element of the vector.</para>

<para>Returns a read-only (constant) reference to the data at the last element of the vector.</para>

<para>Returns a pointer such that [<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data()</link>, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data()</link> + <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size()</link>) is a valid range. For a non-empty vector, <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data()</link> == &amp;front().</para>

<para>Add data to the end of the vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>Data to be added.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This is a typical stack operation. The function creates an element at the end of the vector and assigns the given data to it. Due to the nature of a vector this operation can be done in constant time if the vector has preallocated space available.</para>

<para>Removes last element.</para>

<para>This is a typical stack operation. It shrinks the vector by one.</para>

<para>Note that no data is returned, and if the last element&apos;s data is needed, it should be retrieved before pop_back() is called.</para>

<para>Inserts given value into vector before specified iterator. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__position</entry><entry>
<para>An iterator into the vector. </para>
</entry>
                            </row>
                            <row>
<entry>__x</entry><entry>
<para>Data to be inserted. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator that points to the inserted data.</para>
</formalpara>
This function will insert a copy of the given value before the specified location. Note that this kind of operation could be expensive for a vector and if it is frequently used the user should consider using std::list.</para>

<para>Inserts a number of copies of given data into the vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__position</entry><entry>
<para>An iterator into the vector. </para>
</entry>
                            </row>
                            <row>
<entry>__n</entry><entry>
<para>Number of elements to be inserted. </para>
</entry>
                            </row>
                            <row>
<entry>__x</entry><entry>
<para>Data to be inserted.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function will insert a specified number of copies of the given data before the location specified by <emphasis>position</emphasis>.</para>

<para>Note that this kind of operation could be expensive for a vector and if it is frequently used the user should consider using std::list.</para>

<para>Inserts a range into the vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__position</entry><entry>
<para>An iterator into the vector. </para>
</entry>
                            </row>
                            <row>
<entry>__first</entry><entry>
<para>An input iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>An input iterator.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This function will insert copies of the data in the range [__first,__last) into the vector before the location specified by <emphasis>pos</emphasis>.</para>

<para>Note that this kind of operation could be expensive for a vector and if it is frequently used the user should consider using std::list.</para>

<para>Remove element at given position. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__position</entry><entry>
<para>Iterator pointing to element to be erased. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator pointing to the next element (or <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link>).</para>
</formalpara>
This function will erase the element at the given position and thus shorten the vector by one.</para>

<para>Note This operation could be expensive and if it is frequently used the user should consider using std::list. The user is also cautioned that this function only erases the element, and that if the element is itself a pointer, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Remove a range of elements. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>Iterator pointing to the first element to be erased. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>Iterator pointing to one past the last element to be erased. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>An iterator pointing to the element pointed to by <emphasis>__last</emphasis> prior to erasing (or <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link>).</para>
</formalpara>
This function will erase the elements in the range [__first,__last) and shorten the vector accordingly.</para>

<para>Note This operation could be expensive and if it is frequently used the user should consider using std::list. The user is also cautioned that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Swaps data with another vector. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A vector of the same element and allocator types.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This exchanges the elements between two vectors in constant time. (Three pointers, so it should be quite fast.) Note that the global <link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap()</link> function is specialized such that std::swap(v1,v2) will feed to this function.</para>

<para>Whether the allocators are swapped depends on the allocator traits.</para>

<para>Erases all the elements. Note that this function only erases the elements, and that if the elements themselves are pointers, the pointed-to memory is not touched in any way. Managing the pointer is the user&apos;s responsibility.</para>

<para>Memory expansion handler. Uses the member allocation function to obtain <emphasis>n</emphasis> bytes of memory, and then copies [first,last) into it.</para>

<para>Vector equality comparison. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A vector. </para>
</entry>
                            </row>
                            <row>
<entry>__y</entry><entry>
<para>A vector of the same type as <emphasis>__x</emphasis>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True iff the size and elements of the vectors are equal.</para>
</formalpara>
This is an equivalence relation. It is linear in the size of the vectors. Vectors are considered equivalent if their sizes are equal, and if corresponding elements compare equal.</para>

<para>Vector ordering relation. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>A vector. </para>
</entry>
                            </row>
                            <row>
<entry>__y</entry><entry>
<para>A vector of the same type as <emphasis>__x</emphasis>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True iff <emphasis>__x</emphasis> is lexicographically less than <emphasis>__y</emphasis>.</para>
</formalpara>
This is a total ordering relation. It is linear in the size of the vectors. The elements must be comparable with <computeroutput>&lt;</computeroutput>.</para>

<para>See <link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare()</link> for how the determination is made.</para>

<para>Based on operator==</para>

<para>Based on operator&lt;</para>

<para>Based on operator&lt;</para>

<para>Based on operator&lt;</para>

<para>See std::vector::swap().</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2bits_2stl__vector_8h_a544d74b2d5d0dd2197f5fd6f02691de0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
