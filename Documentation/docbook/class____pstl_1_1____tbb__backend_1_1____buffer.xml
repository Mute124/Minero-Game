<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer" xml:lang="en-US">
<title>__pstl::__tbb_backend::__buffer&lt; _Tp &gt; Class Template Reference</title>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary></indexterm>
<para>

<para>Raw memory buffer with automatic freeing and no exceptions. </para>
 
</para>
<para>
<computeroutput>#include &lt;parallel_backend_tbb.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1add418ab10602c3e0ee104d43fe70508b">__buffer</link> (std::size_t n)</para>

<para>Try to obtain buffer of given size to store objects of _Tp type. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1a92b436377012b4402443f9b733a1aad9">operator bool</link> () const</para>

<para>True if buffer was successfully obtained, zero otherwise. </para>
</listitem>
            <listitem><para>_Tp * <link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1a4c50301000475a7f96f6a8270559c0df">get</link> () const</para>

<para>Return pointer to buffer, or NULL if buffer could not be obtained. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1af1d24ec591115c5879d6ab60d33ca03a">~__buffer</link> ()</para>

<para>Destroy buffer. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1add418ab10602c3e0ee104d43fe70508b">__buffer</link> (std::size_t n)</para>

<para>Try to obtain buffer of given size to store objects of _Tp type. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1a92b436377012b4402443f9b733a1aad9">operator bool</link> () const</para>

<para>True if buffer was successfully obtained, zero otherwise. </para>
</listitem>
            <listitem><para>_Tp * <link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1a4c50301000475a7f96f6a8270559c0df">get</link> () const</para>

<para>Return pointer to buffer, or NULL if buffer could not be obtained. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1af1d24ec591115c5879d6ab60d33ca03a">~__buffer</link> ()</para>

<para>Destroy buffer. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1add418ab10602c3e0ee104d43fe70508b">__buffer</link> (std::size_t n)</para>

<para>Try to obtain buffer of given size to store objects of _Tp type. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1a92b436377012b4402443f9b733a1aad9">operator bool</link> () const</para>

<para>True if buffer was successfully obtained, zero otherwise. </para>
</listitem>
            <listitem><para>_Tp * <link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1a4c50301000475a7f96f6a8270559c0df">get</link> () const</para>

<para>Return pointer to buffer, or NULL if buffer could not be obtained. </para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer_1af1d24ec591115c5879d6ab60d33ca03a">~__buffer</link> ()</para>

<para>Destroy buffer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename _Tp&gt;<?linebreak?>class __pstl::__tbb_backend::__buffer&lt; _Tp &gt;</title></simplesect>

<para>Raw memory buffer with automatic freeing and no exceptions. </para>



<para>Some of our algorithms need to start with raw memory buffer, not an initialize array, because initialization/destruction would make the span be at least O(N). </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1add418ab10602c3e0ee104d43fe70508b"/><section>
    <title>__buffer()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__buffer</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>__buffer</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::__buffer (std::size_t n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Try to obtain buffer of given size to store objects of _Tp type. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1af1d24ec591115c5879d6ab60d33ca03a"/><section>
    <title>~__buffer()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>~__buffer</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>~__buffer</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::~<link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__buffer</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destroy buffer. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1add418ab10602c3e0ee104d43fe70508b"/><section>
    <title>__buffer()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__buffer</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>__buffer</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::__buffer (std::size_t n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Try to obtain buffer of given size to store objects of _Tp type. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1af1d24ec591115c5879d6ab60d33ca03a"/><section>
    <title>~__buffer()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>~__buffer</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>~__buffer</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::~<link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__buffer</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destroy buffer. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1add418ab10602c3e0ee104d43fe70508b"/><section>
    <title>__buffer()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__buffer</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>__buffer</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::__buffer (std::size_t n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Try to obtain buffer of given size to store objects of _Tp type. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1af1d24ec591115c5879d6ab60d33ca03a"/><section>
    <title>~__buffer()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>~__buffer</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>~__buffer</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::~<link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__buffer</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destroy buffer. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1a4c50301000475a7f96f6a8270559c0df"/><section>
    <title>get()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp * <link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">::get</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return pointer to buffer, or NULL if buffer could not be obtained. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____pstl_1_1____tbb__backend_1_1____buffer_a4c50301000475a7f96f6a8270559c0df_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1a4c50301000475a7f96f6a8270559c0df"/><section>
    <title>get()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp * <link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">::get</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return pointer to buffer, or NULL if buffer could not be obtained. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1a4c50301000475a7f96f6a8270559c0df"/><section>
    <title>get()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>get</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp * <link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">::get</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return pointer to buffer, or NULL if buffer could not be obtained. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1a92b436377012b4402443f9b733a1aad9"/><section>
    <title>operator bool()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>operator bool</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>True if buffer was successfully obtained, zero otherwise. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1a92b436377012b4402443f9b733a1aad9"/><section>
    <title>operator bool()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>operator bool</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>True if buffer was successfully obtained, zero otherwise. </para>
</para>
</section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____buffer_1a92b436377012b4402443f9b733a1aad9"/><section>
    <title>operator bool()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator bool</primary><secondary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__buffer&lt; _Tp &gt;</primary><secondary>operator bool</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____buffer">__pstl::__tbb_backend::__buffer</link>&lt; _Tp &gt;::operator <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>True if buffer was successfully obtained, zero otherwise. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/pstl/<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/<link linkend="_lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link></section>
</section>
