<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2pstl_2algorithm__fwd_8h_source" xml:lang="en-US">
<title>algorithm_fwd.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/algorithm_fwd.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;algorithm_fwd.h&#32;--------------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_ALGORITHM_FWD_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_ALGORITHM_FWD_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
15 
16 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>
17 {
18 <emphasis role="keyword">namespace&#32;</emphasis>__internal
19 {
20 
21 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
22 <emphasis role="comment">//&#32;any_of</emphasis>
23 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
24 
25 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred&gt;
26 <emphasis role="keywordtype">bool</emphasis>
27 <link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__brick_any_of</link>(<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator,&#32;_Pred,
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
29 
30 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred&gt;
31 <emphasis role="keywordtype">bool</emphasis>
32 <link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__brick_any_of</link>(<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">const</emphasis>&#32;_ForwardIterator,&#32;_Pred,
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
34 
35 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
36 <emphasis role="keywordtype">bool</emphasis>
37 <link linkend="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd">__pattern_any_of</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Pred,&#32;_IsVector,
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
39 
40 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
41 <emphasis role="keywordtype">bool</emphasis>
42 <link linkend="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd">__pattern_any_of</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Pred,&#32;_IsVector,
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
44 
45 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
46 <emphasis role="comment">//&#32;walk1&#32;(pseudo)</emphasis>
47 <emphasis role="comment">//</emphasis>
48 <emphasis role="comment">//&#32;walk1&#32;evaluates&#32;f(x)&#32;for&#32;each&#32;dereferenced&#32;value&#32;x&#32;drawn&#32;from&#32;[first,last)</emphasis>
49 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
50 
51 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
52 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__brick_walk1</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Function,
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
54 
55 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
56 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__brick_walk1</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Function,
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
58 
59 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
60 <emphasis role="keywordtype">void</emphasis>
61 <link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pattern_walk1</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Function,&#32;_IsVector,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
63 
64 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
65 <emphasis role="keywordtype">void</emphasis>
66 <link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pattern_walk1</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Function,&#32;_IsVector,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
68 
69 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
70 <emphasis role="keywordtype">void</emphasis>
71 <link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pattern_walk_brick</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Brick,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
73 
74 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
75 <emphasis role="keywordtype">void</emphasis>
76 <link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pattern_walk_brick</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Brick,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
78 
79 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
80 <emphasis role="comment">//&#32;walk1_n</emphasis>
81 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
82 
83 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
84 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348">__brick_walk1_n</link>(_ForwardIterator,&#32;_Size,&#32;_Function,
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*_IsVectorTag=*/</emphasis>std::false_type);
86 
87 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
88 _RandomAccessIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348">__brick_walk1_n</link>(_RandomAccessIterator,&#32;_DifferenceType,&#32;_Function,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vectorTag=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
90 
91 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
92 _ForwardIterator
93 <link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pattern_walk1_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_Size,&#32;_Function,&#32;_IsVector,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
95 
96 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
97 _RandomAccessIterator
98 <link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pattern_walk1_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_Size,&#32;_Function,&#32;_IsVector,
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
100 
101 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
102 _ForwardIterator
103 <link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pattern_walk_brick_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_Size,&#32;_Brick,
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
105 
106 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
107 _RandomAccessIterator
108 <link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pattern_walk_brick_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_Size,&#32;_Brick,
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
110 
111 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
112 <emphasis role="comment">//&#32;walk2&#32;(pseudo)</emphasis>
113 <emphasis role="comment">//</emphasis>
114 <emphasis role="comment">//&#32;walk2&#32;evaluates&#32;f(x,y)&#32;for&#32;deferenced&#32;values&#32;(x,y)&#32;drawn&#32;from&#32;[first1,last1)&#32;and&#32;[first2,...)</emphasis>
115 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
116 
117 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
118 _ForwardIterator2&#32;<link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__brick_walk2</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_Function,
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
120 
121 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
122 _ForwardIterator2&#32;<link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__brick_walk2</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_Function,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
124 
125 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
126 _ForwardIterator2&#32;<link linkend="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93">__brick_walk2_n</link>(_ForwardIterator1,&#32;_Size,&#32;_ForwardIterator2,&#32;_Function,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
128 
129 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
130 _ForwardIterator2&#32;<link linkend="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93">__brick_walk2_n</link>(_ForwardIterator1,&#32;_Size,&#32;_ForwardIterator2,&#32;_Function,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
132 
133 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
134 _ForwardIterator2
135 <link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pattern_walk2</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_Function,&#32;_IsVector,
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
137 
138 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
139 _ForwardIterator2
140 <link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pattern_walk2</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_Function,&#32;_IsVector,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
142 
143 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
145 _ForwardIterator2
146 <link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pattern_walk2_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_Size,&#32;_ForwardIterator2,&#32;_Function,&#32;_IsVector,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
148 
149 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
151 _RandomAccessIterator2
152 <link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pattern_walk2_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_Size,&#32;_RandomAccessIterator2,&#32;_Function,&#32;_IsVector,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
154 
155 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
156 _ForwardIterator2
157 <link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pattern_walk2_brick</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_Brick,
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
159 
160 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
161 _RandomAccessIterator2
162 <link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pattern_walk2_brick</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Brick,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
165 
166 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
167 _ForwardIterator2
168 <link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pattern_walk2_brick_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_Size,&#32;_ForwardIterator2,&#32;_Brick,
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
170 
171 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Brick&gt;
172 _RandomAccessIterator2
173 <link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pattern_walk2_brick_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_Size,&#32;_RandomAccessIterator2,&#32;_Brick,
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
175 
176 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
177 <emphasis role="comment">//&#32;walk3&#32;(pseudo)</emphasis>
178 <emphasis role="comment">//</emphasis>
179 <emphasis role="comment">//&#32;walk3&#32;evaluates&#32;f(x,y,z)&#32;for&#32;(x,y,z)&#32;drawn&#32;from&#32;[first1,last1),&#32;[first2,...),&#32;[first3,...)</emphasis>
180 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
181 
182 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator3,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
183 _ForwardIterator3&#32;<link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__brick_walk3</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator3,&#32;_Function,
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
185 
186 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator3,&#32;<emphasis role="keyword">class</emphasis>&#32;_Function&gt;
187 _RandomAccessIterator3&#32;<link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__brick_walk3</link>(_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator3,&#32;_Function,
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
190 
191 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator3,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
193 _ForwardIterator3
194 <link linkend="_namespace____pstl_1_1____internal_1a618223855e120744a00b409ddfb37ea3">__pattern_walk3</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator3,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Function,&#32;_IsVector,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
197 
198 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator3,&#32;<emphasis role="keyword">class&#32;</emphasis>_Function,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
200 _RandomAccessIterator3
201 <link linkend="_namespace____pstl_1_1____internal_1a618223855e120744a00b409ddfb37ea3">__pattern_walk3</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator3,&#32;_Function,&#32;_IsVector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
203 
204 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
205 <emphasis role="comment">//&#32;equal</emphasis>
206 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
207 
208 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
209 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_BinaryPredicate,
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
211 
212 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
213 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,&#32;_BinaryPredicate,
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
215 
216 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
218 <emphasis role="keywordtype">bool</emphasis>
219 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_BinaryPredicate,
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
221 
222 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
224 <emphasis role="keywordtype">bool</emphasis>
225 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type);
227 
228 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
229 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,&#32;_BinaryPredicate,
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
231 
232 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
233 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link>(_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,&#32;_RandomAccessIterator2,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
235 
236 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
238 <emphasis role="keywordtype">bool</emphasis>
239 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
241 
242 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
244 <emphasis role="keywordtype">bool</emphasis>
245 <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2,&#32;_BinaryPredicate,&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type);
247 
248 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
249 <emphasis role="comment">//&#32;find_if</emphasis>
250 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
251 
252 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
253 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__brick_find_if</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Predicate,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
255 
256 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
257 _RandomAccessIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__brick_find_if</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Predicate,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
259 
260 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
261 _ForwardIterator
262 <link linkend="_namespace____pstl_1_1____internal_1a048b6c9be4b418a089e7e1de87722139">__pattern_find_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Predicate,&#32;_IsVector,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
264 
265 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
266 _ForwardIterator
267 <link linkend="_namespace____pstl_1_1____internal_1a048b6c9be4b418a089e7e1de87722139">__pattern_find_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Predicate,&#32;_IsVector,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
269 
270 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
271 <emphasis role="comment">//&#32;find_end</emphasis>
272 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
273 
274 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
275 _ForwardIterator1&#32;<link linkend="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6">__brick_find_end</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
278 
279 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
280 _ForwardIterator1&#32;<link linkend="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6">__brick_find_end</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
283 
284 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
286 _ForwardIterator1
287 <link linkend="_namespace____pstl_1_1____internal_1ab41e2c44c1a0b564c5f9e350dc98cd07">__pattern_find_end</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
290 
291 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
293 _ForwardIterator1
294 <link linkend="_namespace____pstl_1_1____internal_1ab41e2c44c1a0b564c5f9e350dc98cd07">__pattern_find_end</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
297 
298 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
299 <emphasis role="comment">//&#32;find_first_of</emphasis>
300 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
301 
302 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
303 _ForwardIterator1&#32;<link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__brick_find_first_of</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
306 
307 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
308 _ForwardIterator1&#32;<link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__brick_find_first_of</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
311 
312 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
314 _ForwardIterator1
315 <link linkend="_namespace____pstl_1_1____internal_1ab87ed0d016b76e9009330174d6dd604f">__pattern_find_first_of</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
317 
318 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
320 _ForwardIterator1
321 <link linkend="_namespace____pstl_1_1____internal_1ab87ed0d016b76e9009330174d6dd604f">__pattern_find_first_of</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
323 
324 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
325 <emphasis role="comment">//&#32;search</emphasis>
326 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
327 
328 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
329 _ForwardIterator1&#32;<link linkend="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f">__brick_search</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
332 
333 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
334 _ForwardIterator1&#32;<link linkend="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f">__brick_search</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
337 
338 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
340 _ForwardIterator1
341 <link linkend="_namespace____pstl_1_1____internal_1af101203bfce74b08bef3c56eaa652f97">__pattern_search</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
344 
345 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
347 _ForwardIterator1
348 <link linkend="_namespace____pstl_1_1____internal_1af101203bfce74b08bef3c56eaa652f97">__pattern_search</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
351 
352 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
353 <emphasis role="comment">//&#32;search_n</emphasis>
354 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
355 
356 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
357 _ForwardIterator
358 <link linkend="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f">__brick_search_n</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_BinaryPredicate,
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
360 
361 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
362 _ForwardIterator
363 <link linkend="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f">__brick_search_n</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_BinaryPredicate,
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
365 
366 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>IsVector&gt;
368 _ForwardIterator
369 <link linkend="_namespace____pstl_1_1____internal_1aeee6ca536b74ecbe6543c70b07b0bbf4">__pattern_search_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_BinaryPredicate,
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IsVector,
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
372 
373 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Size,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>IsVector&gt;
375 _RandomAccessIterator
376 <link linkend="_namespace____pstl_1_1____internal_1aeee6ca536b74ecbe6543c70b07b0bbf4">__pattern_search_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;IsVector,
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
379 
380 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
381 <emphasis role="comment">//&#32;copy_n</emphasis>
382 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
383 
384 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
385 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__brick_copy_n</link>(_ForwardIterator,&#32;_Size,&#32;_OutputIterator,
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
387 
388 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
389 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__brick_copy_n</link>(_ForwardIterator,&#32;_Size,&#32;_OutputIterator,
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
391 
392 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
393 <emphasis role="comment">//&#32;copy</emphasis>
394 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
395 
396 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
397 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__brick_copy</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
399 
400 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
401 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__brick_copy</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_OutputIterator,
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
403 
404 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
405 <emphasis role="comment">//&#32;move</emphasis>
406 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
407 
408 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
409 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__brick_move</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
411 
412 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
413 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__brick_move</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_OutputIterator,
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
415 
416 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
417 <emphasis role="comment">//&#32;swap_ranges</emphasis>
418 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
419 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
420 _OutputIterator
421 <link linkend="_namespace____pstl_1_1____internal_1a5859660f8d8c3308e80935f3bda79577">__brick_swap_ranges</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
423 
424 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
425 _OutputIterator
426 <link linkend="_namespace____pstl_1_1____internal_1a5859660f8d8c3308e80935f3bda79577">__brick_swap_ranges</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_OutputIterator&#32;__result,
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
428 
429 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
430 <emphasis role="comment">//&#32;copy_if</emphasis>
431 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
432 
433 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
434 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__brick_copy_if</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,&#32;_UnaryPredicate,
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
436 
437 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
438 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__brick_copy_if</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,&#32;_UnaryPredicate,
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
440 
441 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
442 std::pair&lt;_DifferenceType,&#32;_DifferenceType&gt;
443 <link linkend="_namespace____pstl_1_1____internal_1aa9f3335e6c5bc8f3c503f12c2c706399">__brick_calc_mask_1</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict,&#32;_UnaryPredicate,
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
445 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
446 std::pair&lt;_DifferenceType,&#32;_DifferenceType&gt;
447 <link linkend="_namespace____pstl_1_1____internal_1aa9f3335e6c5bc8f3c503f12c2c706399">__brick_calc_mask_1</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict,&#32;_UnaryPredicate,
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
449 
450 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
451 <emphasis role="keywordtype">void</emphasis>
452 <link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__brick_copy_by_mask</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,&#32;<emphasis role="keywordtype">bool</emphasis>*,
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
454 
455 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
456 <emphasis role="keywordtype">void</emphasis>
457 <link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__brick_copy_by_mask</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict,
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
459 
460 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2&gt;
461 <emphasis role="keywordtype">void</emphasis>
462 <link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__brick_partition_by_mask</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator1,&#32;_OutputIterator2,&#32;<emphasis role="keywordtype">bool</emphasis>*,
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
464 
465 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2&gt;
466 <emphasis role="keywordtype">void</emphasis>
467 <link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__brick_partition_by_mask</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_OutputIterator1,&#32;_OutputIterator2,&#32;<emphasis role="keywordtype">bool</emphasis>*,
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
469 
470 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
471 _OutputIterator
472 <link linkend="_namespace____pstl_1_1____internal_1a00b73000f7d2c9884939b67f41de7bb3">__pattern_copy_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,&#32;_UnaryPredicate,&#32;_IsVector,
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
474 
475 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryPredicate,
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
477 _OutputIterator
478 <link linkend="_namespace____pstl_1_1____internal_1a00b73000f7d2c9884939b67f41de7bb3">__pattern_copy_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_OutputIterator,&#32;_UnaryPredicate,
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
480 
481 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
482 <emphasis role="comment">//&#32;count</emphasis>
483 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
484 
485 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
486 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
487 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__brick_count</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Predicate,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
489 
490 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
491 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
492 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__brick_count</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Predicate,
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
494 
495 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
496 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
497 <link linkend="_namespace____pstl_1_1____internal_1ab6c85c9e6daf1ae911a899fb47a2dac9">__pattern_count</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Predicate,
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::false_type,&#32;_IsVector)&#32;<emphasis role="keyword">noexcept</emphasis>;
499 
500 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
501 <emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_ForwardIterator&gt;::difference_type
502 <link linkend="_namespace____pstl_1_1____internal_1ab6c85c9e6daf1ae911a899fb47a2dac9">__pattern_count</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Predicate,
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::true_type,&#32;_IsVector);
504 
505 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
506 <emphasis role="comment">//&#32;unique</emphasis>
507 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
508 
509 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
510 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__brick_unique</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_BinaryPredicate,
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
512 
513 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
514 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__brick_unique</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_BinaryPredicate,
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
516 
517 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
518 _ForwardIterator
519 <link linkend="_namespace____pstl_1_1____internal_1a7d71081d25f6bd099154a9d7ab2acc0b">__pattern_unique</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_BinaryPredicate,&#32;_IsVector,
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
521 
522 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
523 _ForwardIterator
524 <link linkend="_namespace____pstl_1_1____internal_1a7d71081d25f6bd099154a9d7ab2acc0b">__pattern_unique</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_BinaryPredicate,&#32;_IsVector,
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
526 
527 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
528 <emphasis role="comment">//&#32;unique_copy</emphasis>
529 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
530 
531 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
532 OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__brick_unique_copy</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;OutputIterator,&#32;_BinaryPredicate,
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
534 
535 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
536 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__brick_unique_copy</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_OutputIterator,&#32;_BinaryPredicate,
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
538 
539 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
541 _OutputIterator
542 <link linkend="_namespace____pstl_1_1____internal_1ae5b4115f81569b63f8d0feb2bd3b90ec">__pattern_unique_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,&#32;_BinaryPredicate,
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
544 
545 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
546 _DifferenceType
547 <link linkend="_namespace____pstl_1_1____internal_1a0c5ab799fe2096f845371f4cc601a3e8">__brick_calc_mask_2</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict,&#32;_BinaryPredicate,
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
549 
550 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_DifferenceType,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
551 _DifferenceType
552 <link linkend="_namespace____pstl_1_1____internal_1a0c5ab799fe2096f845371f4cc601a3e8">__brick_calc_mask_2</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__restrict,&#32;_BinaryPredicate,
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
554 
555 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryPredicate,
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
557 _OutputIterator
558 <link linkend="_namespace____pstl_1_1____internal_1ae5b4115f81569b63f8d0feb2bd3b90ec">__pattern_unique_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_OutputIterator,
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate,&#32;_IsVector,&#32;<emphasis role="comment">/*parallel=*/</emphasis>std::true_type);
560 
561 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
562 <emphasis role="comment">//&#32;reverse</emphasis>
563 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
564 
565 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
566 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
568 
569 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
570 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
572 
573 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
574 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
576 
577 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator&gt;
578 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
580 
581 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
582 <emphasis role="keywordtype">void</emphasis>
583 <link linkend="_namespace____pstl_1_1____internal_1a5f2267ae5935da96528156e02f6f4303">__pattern_reverse</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_IsVector,
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
585 
586 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
587 <emphasis role="keywordtype">void</emphasis>
588 <link linkend="_namespace____pstl_1_1____internal_1a5f2267ae5935da96528156e02f6f4303">__pattern_reverse</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_IsVector,
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
590 
591 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
592 <emphasis role="comment">//&#32;reverse_copy</emphasis>
593 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
594 
595 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
596 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__brick_reverse_copy</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_OutputIterator,
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
598 
599 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
600 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__brick_reverse_copy</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_OutputIterator,
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
602 
603 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
604 _OutputIterator
605 <link linkend="_namespace____pstl_1_1____internal_1af2c72d8af8666a15b6ddcdbd7756cce0">__pattern_reverse_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_OutputIterator,&#32;_IsVector,
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
607 
608 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
609 _OutputIterator
610 <link linkend="_namespace____pstl_1_1____internal_1af2c72d8af8666a15b6ddcdbd7756cce0">__pattern_reverse_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_OutputIterator,&#32;_IsVector,
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
612 
613 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
614 <emphasis role="comment">//&#32;rotate</emphasis>
615 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
616 
617 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
618 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__brick_rotate</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
620 
621 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
622 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__brick_rotate</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
624 
625 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
626 _ForwardIterator
627 <link linkend="_namespace____pstl_1_1____internal_1aa1344d4c056259b28555671b7a23108d">__pattern_rotate</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_IsVector,
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
629 
630 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
631 _ForwardIterator
632 <link linkend="_namespace____pstl_1_1____internal_1aa1344d4c056259b28555671b7a23108d">__pattern_rotate</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_IsVector,
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
634 
635 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
636 <emphasis role="comment">//&#32;rotate_copy</emphasis>
637 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
638 
639 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
640 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d">__brick_rotate_copy</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
642 
643 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator&gt;
644 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d">__brick_rotate_copy</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
646 
647 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
648 _OutputIterator
649 <link linkend="_namespace____pstl_1_1____internal_1a6a5ba3b17e77b55a76e8ed1b6130f2e2">__pattern_rotate_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
652 
653 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
654 _OutputIterator
655 <link linkend="_namespace____pstl_1_1____internal_1a6a5ba3b17e77b55a76e8ed1b6130f2e2">__pattern_rotate_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator,
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
658 
659 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
660 <emphasis role="comment">//&#32;is_partitioned</emphasis>
661 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
662 
663 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
664 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd">__brick_is_partitioned</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
666 
667 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
668 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd">__brick_is_partitioned</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
670 
671 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
672 <emphasis role="keywordtype">bool</emphasis>
673 <link linkend="_namespace____pstl_1_1____internal_1a3c61e6bb9156e92c5f8e13ad0c5e5e5b">__pattern_is_partitioned</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,&#32;_IsVector,
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
675 
676 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
677 <emphasis role="keywordtype">bool</emphasis>
678 <link linkend="_namespace____pstl_1_1____internal_1a3c61e6bb9156e92c5f8e13ad0c5e5e5b">__pattern_is_partitioned</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,&#32;_IsVector,
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
680 
681 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
682 <emphasis role="comment">//&#32;partition</emphasis>
683 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
684 
685 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
686 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__brick_partition</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
688 
689 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
690 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__brick_partition</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
692 
693 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
694 _ForwardIterator
695 <link linkend="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523">__pattern_partition</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,&#32;_IsVector,
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
697 
698 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
699 _ForwardIterator
700 <link linkend="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523">__pattern_partition</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,&#32;_IsVector,
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
702 
703 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
704 <emphasis role="comment">//&#32;stable_partition</emphasis>
705 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
706 
707 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
708 _BidirectionalIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__brick_stable_partition</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_UnaryPredicate,
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
710 
711 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
712 _BidirectionalIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__brick_stable_partition</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_UnaryPredicate,
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
714 
715 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
716 _BidirectionalIterator
717 <link linkend="_namespace____pstl_1_1____internal_1a8c278dd40fdab60b98fd9a0046876130">__pattern_stable_partition</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_UnaryPredicate,
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
720 
721 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
722 _BidirectionalIterator
723 <link linkend="_namespace____pstl_1_1____internal_1a8c278dd40fdab60b98fd9a0046876130">__pattern_stable_partition</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_UnaryPredicate,
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
726 
727 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
728 <emphasis role="comment">//&#32;partition_copy</emphasis>
729 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
730 
731 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
732 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
733 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__brick_partition_copy</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator1,&#32;_OutputIterator2,&#32;_UnaryPredicate,
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
735 
736 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
737 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
738 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__brick_partition_copy</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator1,&#32;_OutputIterator2,&#32;_UnaryPredicate,
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
740 
741 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator2,
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryPredicate,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
743 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
744 <link linkend="_namespace____pstl_1_1____internal_1a213f0e051dd1ea6261325ac6f2f65cb2">__pattern_partition_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_OutputIterator1,&#32;_OutputIterator2,
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryPredicate,&#32;_IsVector,
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
747 
748 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator2,
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryPredicate,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
750 std::pair&lt;_OutputIterator1,&#32;_OutputIterator2&gt;
751 <link linkend="_namespace____pstl_1_1____internal_1a213f0e051dd1ea6261325ac6f2f65cb2">__pattern_partition_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_OutputIterator1,
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator2,&#32;_UnaryPredicate,&#32;_IsVector,
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallelization=*/</emphasis>std::true_type);
754 
755 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
756 <emphasis role="comment">//&#32;sort</emphasis>
757 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
758 
759 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator,&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector,
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsMoveConstructible&gt;
761 <emphasis role="keywordtype">void</emphasis>
762 <link linkend="_namespace____pstl_1_1____internal_1a5ccc13fdf58da10d6d45be7770ad0a4c">__pattern_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsMoveConstructible)&#32;<emphasis role="keyword">noexcept</emphasis>;
764 
765 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
766 <emphasis role="keywordtype">void</emphasis>
767 <link linkend="_namespace____pstl_1_1____internal_1a5ccc13fdf58da10d6d45be7770ad0a4c">__pattern_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_move_constructible=*/</emphasis>std::true_type);
770 
771 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
772 <emphasis role="comment">//&#32;stable_sort</emphasis>
773 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
774 
775 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
776 <emphasis role="keywordtype">void</emphasis>
777 <link linkend="_namespace____pstl_1_1____internal_1aee8744385f4f206ef9dd2c11f1af9b48">__pattern_stable_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
780 
781 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
782 <emphasis role="keywordtype">void</emphasis>
783 <link linkend="_namespace____pstl_1_1____internal_1aee8744385f4f206ef9dd2c11f1af9b48">__pattern_stable_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector&#32;<emphasis role="comment">/*is_vector*/</emphasis>,
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
786 
787 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
788 <emphasis role="comment">//&#32;partial_sort</emphasis>
789 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
790 
791 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
792 <emphasis role="keywordtype">void</emphasis>
793 <link linkend="_namespace____pstl_1_1____internal_1a913b070daf38b8f0c138c1c5df02f47c">__pattern_partial_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_IsVector,
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
796 
797 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
798 <emphasis role="keywordtype">void</emphasis>
799 <link linkend="_namespace____pstl_1_1____internal_1a913b070daf38b8f0c138c1c5df02f47c">__pattern_partial_sort</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_IsVector,
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
802 
803 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
804 <emphasis role="comment">//&#32;partial_sort_copy</emphasis>
805 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
806 
807 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
808 _RandomAccessIterator
809 <link linkend="_namespace____pstl_1_1____internal_1ac7fa2ccc37779ff9c32374cab3d19453">__pattern_partial_sort_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_RandomAccessIterator,
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator,&#32;_Compare,&#32;_IsVector,
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
812 
813 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
814 _RandomAccessIterator
815 <link linkend="_namespace____pstl_1_1____internal_1ac7fa2ccc37779ff9c32374cab3d19453">__pattern_partial_sort_copy</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_RandomAccessIterator,
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator,&#32;_Compare,&#32;_IsVector,
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
818 
819 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
820 <emphasis role="comment">//&#32;adjacent_find</emphasis>
821 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
822 
823 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
824 _ForwardIterator
825 <link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__brick_adjacent_find</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_BinaryPredicate,
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;IsVector&#32;=&#32;*/</emphasis>&#32;std::true_type,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>;
827 
828 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate&gt;
829 _ForwardIterator
830 <link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__brick_adjacent_find</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_BinaryPredicate,
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;IsVector&#32;=&#32;*/</emphasis>&#32;std::false_type,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>;
832 
833 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
834 _ForwardIterator
835 <link linkend="_namespace____pstl_1_1____internal_1a6baa124378ed7fdc525b00a43af706ab">__pattern_adjacent_find</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_BinaryPredicate,
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::false_type,&#32;_IsVector,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>;
837 
838 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
839 _RandomAccessIterator
840 <link linkend="_namespace____pstl_1_1____internal_1a6baa124378ed7fdc525b00a43af706ab">__pattern_adjacent_find</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_BinaryPredicate,
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;*/</emphasis>&#32;std::true_type,&#32;_IsVector,&#32;<emphasis role="keywordtype">bool</emphasis>);
842 
843 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
844 <emphasis role="comment">//&#32;nth_element</emphasis>
845 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
846 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
847 <emphasis role="keywordtype">void</emphasis>
848 <link linkend="_namespace____pstl_1_1____internal_1a1d4194f0c17340011a1f84e4123b368a">__pattern_nth_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
851 
852 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
853 <emphasis role="keywordtype">void</emphasis>
854 <link linkend="_namespace____pstl_1_1____internal_1a1d4194f0c17340011a1f84e4123b368a">__pattern_nth_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsVector,
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
857 
858 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
859 <emphasis role="comment">//&#32;fill,&#32;fill_n</emphasis>
860 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
861 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
862 <emphasis role="keywordtype">void</emphasis>
863 <link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__brick_fill</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
865 
866 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
867 <emphasis role="keywordtype">void</emphasis>
868 <link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__brick_fill</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
870 
871 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
872 <emphasis role="keywordtype">void</emphasis>
873 <link linkend="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9">__pattern_fill</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector)&#32;<emphasis role="keyword">noexcept</emphasis>;
875 
876 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
877 _ForwardIterator
878 <link linkend="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9">__pattern_fill</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector);
880 
881 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
882 _OutputIterator
883 <link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__brick_fill_n</link>(_OutputIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
885 
886 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
887 _OutputIterator
888 <link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__brick_fill_n</link>(_OutputIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
890 
891 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
892 _OutputIterator
893 <link linkend="_namespace____pstl_1_1____internal_1ad46a2d1af24aa54224f2adc68ef625ce">__pattern_fill_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_OutputIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector)&#32;<emphasis role="keyword">noexcept</emphasis>;
895 
896 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
897 _OutputIterator
898 <link linkend="_namespace____pstl_1_1____internal_1ad46a2d1af24aa54224f2adc68ef625ce">__pattern_fill_n</link>(_ExecutionPolicy&amp;&amp;,&#32;_OutputIterator,&#32;_Size,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector);
900 
901 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
902 <emphasis role="comment">//&#32;generate,&#32;generate_n</emphasis>
903 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
904 
905 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
906 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__brick_generate</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Generator,
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
908 
909 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
910 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__brick_generate</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Generator,
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
912 
913 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
914 <emphasis role="keywordtype">void</emphasis>
915 <link linkend="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d">__pattern_generate</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Generator,
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector)&#32;<emphasis role="keyword">noexcept</emphasis>;
917 
918 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
919 _ForwardIterator
920 <link linkend="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d">__pattern_generate</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Generator,
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector);
922 
923 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
924 OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23">__brick_generate_n</link>(OutputIterator,&#32;<link linkend="_struct_size">Size</link>,&#32;_Generator,
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
926 
927 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator&gt;
928 OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23">__brick_generate_n</link>(OutputIterator,&#32;<link linkend="_struct_size">Size</link>,&#32;_Generator,
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
930 
931 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
932 OutputIterator
933 <link linkend="_namespace____pstl_1_1____internal_1a89ba2dce127a80f7bc0578270c7fcb9c">__pattern_generate_n</link>(_ExecutionPolicy&amp;&amp;,&#32;OutputIterator,&#32;<link linkend="_struct_size">Size</link>,&#32;_Generator,
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type,&#32;_IsVector)&#32;<emphasis role="keyword">noexcept</emphasis>;
935 
936 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
937 OutputIterator
938 <link linkend="_namespace____pstl_1_1____internal_1a89ba2dce127a80f7bc0578270c7fcb9c">__pattern_generate_n</link>(_ExecutionPolicy&amp;&amp;,&#32;OutputIterator,&#32;<link linkend="_struct_size">Size</link>,&#32;_Generator,
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type,&#32;_IsVector);
940 
941 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
942 <emphasis role="comment">//&#32;remove</emphasis>
943 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
944 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
945 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__brick_remove_if</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
947 
948 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate&gt;
949 _RandomAccessIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__brick_remove_if</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_UnaryPredicate,
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
951 
952 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
953 _ForwardIterator
954 <link linkend="_namespace____pstl_1_1____internal_1ab7a6c74a4cb2c2ee930c2da12b6cd686">__pattern_remove_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,&#32;_IsVector,
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
956 
957 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryPredicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
958 _ForwardIterator
959 <link linkend="_namespace____pstl_1_1____internal_1ab7a6c74a4cb2c2ee930c2da12b6cd686">__pattern_remove_if</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_UnaryPredicate,&#32;_IsVector,
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
961 
962 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
963 <emphasis role="comment">//&#32;merge</emphasis>
964 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
965 
966 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
967 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__brick_merge</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
970 
971 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
972 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__brick_merge</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
975 
976 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
978 _OutputIterator
979 <link linkend="_namespace____pstl_1_1____internal_1a76f9badc9cf4092c8e996b0564a8a8d2">__pattern_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
981 
982 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
984 _OutputIterator
985 <link linkend="_namespace____pstl_1_1____internal_1a76f9badc9cf4092c8e996b0564a8a8d2">__pattern_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2,&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type);
988 
989 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
990 <emphasis role="comment">//&#32;inplace_merge</emphasis>
991 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
992 
993 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
994 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001">__brick_inplace_merge</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_Compare,
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
996 
997 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
998 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001">__brick_inplace_merge</link>(_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_Compare,
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1000 
1001 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1002 <emphasis role="keywordtype">void</emphasis>
1003 <link linkend="_namespace____pstl_1_1____internal_1a28f4f64e2180b392ca4c226ee3c76d7c">__pattern_inplace_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_IsVector,
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1006 
1007 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_B<emphasis role="keywordtype">id</emphasis>irectionalIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1008 <emphasis role="keywordtype">void</emphasis>
1009 <link linkend="_namespace____pstl_1_1____internal_1a28f4f64e2180b392ca4c226ee3c76d7c">__pattern_inplace_merge</link>(_ExecutionPolicy&amp;&amp;,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,&#32;_BidirectionalIterator,
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_IsVector,
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
1012 
1013 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1014 <emphasis role="comment">//&#32;includes</emphasis>
1015 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1016 
1017 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1018 <emphasis role="keywordtype">bool</emphasis>
1019 <link linkend="_namespace____pstl_1_1____internal_1af4bd54f061b9f4a0d379383965a84e62">__pattern_includes</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_IsVector,
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1022 
1023 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1024 <emphasis role="keywordtype">bool</emphasis>
1025 <link linkend="_namespace____pstl_1_1____internal_1af4bd54f061b9f4a0d379383965a84e62">__pattern_includes</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,&#32;_IsVector,
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
1028 
1029 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1030 <emphasis role="comment">//&#32;set_union</emphasis>
1031 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1032 
1033 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1034 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e">__brick_set_union</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1037 
1038 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1039 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e">__brick_set_union</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1042 
1043 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1045 _OutputIterator
1046 <link linkend="_namespace____pstl_1_1____internal_1a0b5347b92e571caa994698482c35535b">__pattern_set_union</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1048 
1049 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1051 _OutputIterator
1052 <link linkend="_namespace____pstl_1_1____internal_1a0b5347b92e571caa994698482c35535b">__pattern_set_union</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
1054 
1055 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1056 <emphasis role="comment">//&#32;set_intersection</emphasis>
1057 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1058 
1059 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1060 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2">__brick_set_intersection</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1063 
1064 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1065 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2">__brick_set_intersection</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1068 
1069 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1071 _OutputIterator
1072 <link linkend="_namespace____pstl_1_1____internal_1aa71f557e499f46f8fdfcb81c1ade34b3">__pattern_set_intersection</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1075 
1076 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1078 _OutputIterator
1079 <link linkend="_namespace____pstl_1_1____internal_1aa71f557e499f46f8fdfcb81c1ade34b3">__pattern_set_intersection</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
1081 
1082 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1083 <emphasis role="comment">//&#32;set_difference</emphasis>
1084 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1085 
1086 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1087 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2">__brick_set_difference</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1090 
1091 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1092 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2">__brick_set_difference</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1095 
1096 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1098 _OutputIterator
1099 <link linkend="_namespace____pstl_1_1____internal_1ae2ac09b3a487a7ba6061822478a08420">__pattern_set_difference</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1101 
1102 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1104 _OutputIterator
1105 <link linkend="_namespace____pstl_1_1____internal_1ae2ac09b3a487a7ba6061822478a08420">__pattern_set_difference</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
1107 
1108 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1109 <emphasis role="comment">//&#32;set_symmetric_difference</emphasis>
1110 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1111 
1112 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1113 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8">__brick_set_symmetric_difference</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_OutputIterator,&#32;_Compare,
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1116 
1117 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1118 _OutputIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8">__brick_set_symmetric_difference</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_OutputIterator,&#32;_Compare,
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*__is_vector=*/</emphasis>std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1121 
1122 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1124 _OutputIterator
1125 <link linkend="_namespace____pstl_1_1____internal_1a2468e1a5821a3180a4352135b4ac89c9">__pattern_set_symmetric_difference</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1128 
1129 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_OutputIterator,
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compare,&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1131 _OutputIterator
1132 <link linkend="_namespace____pstl_1_1____internal_1a2468e1a5821a3180a4352135b4ac89c9">__pattern_set_symmetric_difference</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_OutputIterator,&#32;_Compare,&#32;_IsVector,
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*is_parallel=*/</emphasis>std::true_type);
1135 
1136 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1137 <emphasis role="comment">//&#32;is_heap_until</emphasis>
1138 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1139 
1140 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1141 _RandomAccessIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0">__brick_is_heap_until</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1143 
1144 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1145 _RandomAccessIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0">__brick_is_heap_until</link>(_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1147 
1148 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1149 _RandomAccessIterator
1150 <link linkend="_namespace____pstl_1_1____internal_1a0fe7d90d58490eee0f9aa2f92a0a48e1">__pattern_is_heap_until</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,&#32;_IsVector,
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1152 
1153 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1154 _RandomAccessIterator
1155 <link linkend="_namespace____pstl_1_1____internal_1a0fe7d90d58490eee0f9aa2f92a0a48e1">__pattern_is_heap_until</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,&#32;_IsVector,
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1157 
1158 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1159 <emphasis role="comment">//&#32;min_element</emphasis>
1160 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1161 
1162 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1163 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__brick_min_element</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Compare,
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1165 
1166 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1167 _ForwardIterator&#32;<link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__brick_min_element</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Compare,
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1169 
1170 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
1171 _ForwardIterator
1172 <link linkend="_namespace____pstl_1_1____internal_1afac22840ab45394d57a19b1b5c102a9b">__pattern_min_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Compare,&#32;_IsVector,
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1174 
1175 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
1176 _RandomAccessIterator
1177 <link linkend="_namespace____pstl_1_1____internal_1afac22840ab45394d57a19b1b5c102a9b">__pattern_min_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator,&#32;_RandomAccessIterator,&#32;_Compare,&#32;_IsVector,
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type);
1179 
1180 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1181 <emphasis role="comment">//&#32;minmax_element</emphasis>
1182 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1183 
1184 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1185 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__brick_minmax_element</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Compare,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1187 
1188 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1189 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__brick_minmax_element</link>(_ForwardIterator,&#32;_ForwardIterator,&#32;_Compare,
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1191 
1192 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
1193 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
1194 <link linkend="_namespace____pstl_1_1____internal_1ac0ba54f6df57a5a9f3dfb520b1dffd37">__pattern_minmax_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Compare,&#32;_IsVector,
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1196 
1197 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IsVector&gt;
1198 std::pair&lt;_ForwardIterator,&#32;_ForwardIterator&gt;
1199 <link linkend="_namespace____pstl_1_1____internal_1ac0ba54f6df57a5a9f3dfb520b1dffd37">__pattern_minmax_element</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator,&#32;_ForwardIterator,&#32;_Compare,&#32;_IsVector,
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type);
1201 
1202 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1203 <emphasis role="comment">//&#32;mismatch</emphasis>
1204 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1205 
1206 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
1207 std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__brick_mismatch</link>(_ForwardIterator1,&#32;_ForwardIterator1,
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_ForwardIterator2,&#32;_Predicate,
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1210 
1211 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate&gt;
1212 std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;&#32;<link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__brick_mismatch</link>(_ForwardIterator1,&#32;_ForwardIterator1,
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_ForwardIterator2,&#32;_Predicate,
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1215 
1216 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1217 std::pair&lt;_ForwardIterator1,&#32;_ForwardIterator2&gt;
1218 <link linkend="_namespace____pstl_1_1____internal_1af94c79334ec95c8bccf8ce29d207f8b2">__pattern_mismatch</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate,&#32;_IsVector,
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1221 
1222 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_RandomAccessIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Predicate,
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_IsVector&gt;
1224 std::pair&lt;_RandomAccessIterator1,&#32;_RandomAccessIterator2&gt;
1225 <link linkend="_namespace____pstl_1_1____internal_1af94c79334ec95c8bccf8ce29d207f8b2">__pattern_mismatch</link>(_ExecutionPolicy&amp;&amp;,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator1,&#32;_RandomAccessIterator2,
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessIterator2,&#32;_Predicate,&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1227 
1228 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1229 <emphasis role="comment">//&#32;lexicographical_compare</emphasis>
1230 <emphasis role="comment">//------------------------------------------------------------------------</emphasis>
1231 
1232 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1233 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50">__brick_lexicographical_compare</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1236 
1237 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare&gt;
1238 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50">__brick_lexicographical_compare</link>(_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,&#32;_ForwardIterator2,
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare,
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;__is_vector&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1241 
1242 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1243 <emphasis role="keywordtype">bool</emphasis>
1244 <link linkend="_namespace____pstl_1_1____internal_1a87963436503d6c04ddbae7eb6827f60c">__pattern_lexicographical_compare</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::false_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1246 
1247 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">class</emphasis>&#32;_IsVector&gt;
1248 <emphasis role="keywordtype">bool</emphasis>
1249 <link linkend="_namespace____pstl_1_1____internal_1a87963436503d6c04ddbae7eb6827f60c">__pattern_lexicographical_compare</link>(_ExecutionPolicy&amp;&amp;,&#32;_ForwardIterator1,&#32;_ForwardIterator1,&#32;_ForwardIterator2,
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2,&#32;_Compare,&#32;_IsVector,&#32;<emphasis role="comment">/*&#32;is_parallel&#32;=&#32;*/</emphasis>&#32;std::true_type)&#32;<emphasis role="keyword">noexcept</emphasis>;
1251 
1252 }&#32;<emphasis role="comment">//&#32;namespace&#32;__internal</emphasis>
1253 }&#32;<emphasis role="comment">//&#32;namespace&#32;__pstl</emphasis>
1254 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_ALGORITHM_FWD_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
