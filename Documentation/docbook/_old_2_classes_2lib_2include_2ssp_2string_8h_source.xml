<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2ssp_2string_8h_source" xml:lang="en-US">
<title>string.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/ssp/string.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*&#32;Checking&#32;macros&#32;for&#32;string&#32;functions.</emphasis>
2 <emphasis role="comment">&#32;&#32;&#32;Copyright&#32;(C)&#32;2004-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
3 <emphasis role="comment"></emphasis>
4 <emphasis role="comment">This&#32;file&#32;is&#32;part&#32;of&#32;GCC.</emphasis>
5 <emphasis role="comment"></emphasis>
6 <emphasis role="comment">GCC&#32;is&#32;free&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under</emphasis>
7 <emphasis role="comment">the&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free</emphasis>
8 <emphasis role="comment">Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">version.</emphasis>
10 <emphasis role="comment"></emphasis>
11 <emphasis role="comment">In&#32;addition&#32;to&#32;the&#32;permissions&#32;in&#32;the&#32;GNU&#32;General&#32;Public&#32;License,&#32;the</emphasis>
12 <emphasis role="comment">Free&#32;Software&#32;Foundation&#32;gives&#32;you&#32;unlimited&#32;permission&#32;to&#32;link&#32;the</emphasis>
13 <emphasis role="comment">compiled&#32;version&#32;of&#32;this&#32;file&#32;into&#32;combinations&#32;with&#32;other&#32;programs,</emphasis>
14 <emphasis role="comment">and&#32;to&#32;distribute&#32;those&#32;combinations&#32;without&#32;any&#32;restriction&#32;coming</emphasis>
15 <emphasis role="comment">from&#32;the&#32;use&#32;of&#32;this&#32;file.&#32;&#32;(The&#32;General&#32;Public&#32;License&#32;restrictions</emphasis>
16 <emphasis role="comment">do&#32;apply&#32;in&#32;other&#32;respects;&#32;for&#32;example,&#32;they&#32;cover&#32;modification&#32;of</emphasis>
17 <emphasis role="comment">the&#32;file,&#32;and&#32;distribution&#32;when&#32;not&#32;linked&#32;into&#32;a&#32;combine</emphasis>
18 <emphasis role="comment">executable.)</emphasis>
19 <emphasis role="comment"></emphasis>
20 <emphasis role="comment">GCC&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but&#32;WITHOUT&#32;ANY</emphasis>
21 <emphasis role="comment">WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of&#32;MERCHANTABILITY&#32;or</emphasis>
22 <emphasis role="comment">FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU&#32;General&#32;Public&#32;License</emphasis>
23 <emphasis role="comment">for&#32;more&#32;details.</emphasis>
24 <emphasis role="comment"></emphasis>
25 <emphasis role="comment">Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
26 <emphasis role="comment">permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
27 <emphasis role="comment">3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
28 <emphasis role="comment"></emphasis>
29 <emphasis role="comment">You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
30 <emphasis role="comment">a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
31 <emphasis role="comment">see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
32 <emphasis role="comment">&lt;http://www.gnu.org/licenses/&gt;.&#32;&#32;*/</emphasis>
33 
34 
35 <emphasis role="preprocessor">#ifndef&#32;_SSP_STRING_H</emphasis>
36 <emphasis role="preprocessor">#define&#32;_SSP_STRING_H&#32;1</emphasis>
37 
38 <emphasis role="preprocessor">#include&#32;&lt;<link linkend="__old_2_classes_2lib_2include_2ssp_2ssp_8h">ssp.h</link>&gt;</emphasis>
39 <emphasis role="preprocessor">#include_next&#32;&lt;string.h&gt;</emphasis>
40 
41 <emphasis role="preprocessor">#if&#32;__SSP_FORTIFY_LEVEL&#32;&gt;&#32;0</emphasis>
42 
43 <emphasis role="preprocessor">#undef&#32;memcpy</emphasis>
44 <emphasis role="preprocessor">#undef&#32;memmove</emphasis>
45 <emphasis role="preprocessor">#undef&#32;memset</emphasis>
46 <emphasis role="preprocessor">#undef&#32;strcat</emphasis>
47 <emphasis role="preprocessor">#undef&#32;strcpy</emphasis>
48 <emphasis role="preprocessor">#undef&#32;strncat</emphasis>
49 <emphasis role="preprocessor">#undef&#32;strncpy</emphasis>
50 <emphasis role="preprocessor">#undef&#32;mempcpy</emphasis>
51 <emphasis role="preprocessor">#undef&#32;stpcpy</emphasis>
52 <emphasis role="preprocessor">#undef&#32;bcopy</emphasis>
53 <emphasis role="preprocessor">#undef&#32;bzero</emphasis>
54 
55 <emphasis role="preprocessor">#define&#32;memcpy(dest,&#32;src,&#32;len)&#32;\</emphasis>
56 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos0&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
57 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___memcpy_chk&#32;(dest,&#32;src,&#32;len,&#32;__ssp_bos0&#32;(dest))&#32;&#32;&#32;&#32;&#32;\</emphasis>
58 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__memcpy_ichk&#32;(dest,&#32;src,&#32;len))</emphasis>
59 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">void</emphasis>&#32;*
60 __memcpy_ichk&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*__restrict__&#32;__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*__restrict__&#32;__src,
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
62 {
63 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___memcpy_chk&#32;(__dest,&#32;__src,&#32;__len,&#32;__ssp_bos0&#32;(__dest));
64 }
65 
66 
67 <emphasis role="preprocessor">#define&#32;memmove(dest,&#32;src,&#32;len)&#32;\</emphasis>
68 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos0&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
69 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___memmove_chk&#32;(dest,&#32;src,&#32;len,&#32;__ssp_bos0&#32;(dest))&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
70 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__memmove_ichk&#32;(dest,&#32;src,&#32;len))</emphasis>
71 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">void</emphasis>&#32;*
72 __memmove_ichk&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*__src,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
73 {
74 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___memmove_chk&#32;(__dest,&#32;__src,&#32;__len,&#32;__ssp_bos0&#32;(__dest));
75 }
76 
77 
78 <emphasis role="preprocessor">#define&#32;mempcpy(dest,&#32;src,&#32;len)&#32;\</emphasis>
79 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos0&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
80 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___mempcpy_chk&#32;(dest,&#32;src,&#32;len,&#32;__ssp_bos0&#32;(dest))&#32;&#32;&#32;&#32;\</emphasis>
81 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__mempcpy_ichk&#32;(dest,&#32;src,&#32;len))</emphasis>
82 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">void</emphasis>&#32;*
83 __mempcpy_ichk&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*__restrict__&#32;__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*__restrict__&#32;__src,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
85 {
86 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___mempcpy_chk&#32;(__dest,&#32;__src,&#32;__len,&#32;__ssp_bos0&#32;(__dest));
87 }
88 
89 
90 <emphasis role="preprocessor">#define&#32;memset(dest,&#32;ch,&#32;len)&#32;\</emphasis>
91 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos0&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
92 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___memset_chk&#32;(dest,&#32;ch,&#32;len,&#32;__ssp_bos0&#32;(dest))&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
93 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__memset_ichk&#32;(dest,&#32;ch,&#32;len))</emphasis>
94 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">void</emphasis>&#32;*
95 __memset_ichk&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*__dest,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__ch,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
96 {
97 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___memset_chk&#32;(__dest,&#32;__ch,&#32;__len,&#32;__ssp_bos0&#32;(__dest));
98 }
99 
100 <emphasis role="preprocessor">#define&#32;bcopy(src,&#32;dest,&#32;len)&#32;((void)&#32;\</emphasis>
101 <emphasis role="preprocessor">&#32;((__ssp_bos0&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
102 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___memmove_chk&#32;(dest,&#32;src,&#32;len,&#32;__ssp_bos0&#32;(dest))&#32;&#32;&#32;&#32;\</emphasis>
103 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__memmove_ichk&#32;(dest,&#32;src,&#32;len)))</emphasis>
104 <emphasis role="preprocessor">#define&#32;bzero(dest,&#32;len)&#32;((void)&#32;\</emphasis>
105 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos0&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
106 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___memset_chk&#32;(dest,&#32;&apos;\0&apos;,&#32;len,&#32;__ssp_bos0&#32;(dest))&#32;&#32;&#32;&#32;\</emphasis>
107 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__memset_ichk&#32;(dest,&#32;&apos;\0&apos;,&#32;len)))</emphasis>
108 
109 
110 <emphasis role="preprocessor">#define&#32;strcpy(dest,&#32;src)&#32;\</emphasis>
111 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
112 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___strcpy_chk&#32;(dest,&#32;src,&#32;__ssp_bos&#32;(dest))&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
113 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__strcpy_ichk&#32;(dest,&#32;src))</emphasis>
114 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
115 __strcpy_ichk&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__src)
116 {
117 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___strcpy_chk&#32;(__dest,&#32;__src,&#32;__ssp_bos&#32;(__dest));
118 }
119 
120 
121 <emphasis role="preprocessor">#define&#32;stpcpy(dest,&#32;src)&#32;\</emphasis>
122 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
123 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___stpcpy_chk&#32;(dest,&#32;src,&#32;__ssp_bos&#32;(dest))&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
124 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__stpcpy_ichk&#32;(dest,&#32;src))</emphasis>
125 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
126 __stpcpy_ichk&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__src)
127 {
128 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___stpcpy_chk&#32;(__dest,&#32;__src,&#32;__ssp_bos&#32;(__dest));
129 }
130 
131 
132 <emphasis role="preprocessor">#define&#32;strncpy(dest,&#32;src,&#32;len)&#32;\</emphasis>
133 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
134 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___strncpy_chk&#32;(dest,&#32;src,&#32;len,&#32;__ssp_bos&#32;(dest))&#32;&#32;&#32;&#32;&#32;\</emphasis>
135 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__strncpy_ichk&#32;(dest,&#32;src,&#32;len))</emphasis>
136 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
137 __strncpy_ichk&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__src,
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
139 {
140 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___strncpy_chk&#32;(__dest,&#32;__src,&#32;__len,&#32;__ssp_bos&#32;(__dest));
141 }
142 
143 
144 <emphasis role="preprocessor">#define&#32;strcat(dest,&#32;src)&#32;\</emphasis>
145 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
146 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___strcat_chk&#32;(dest,&#32;src,&#32;__ssp_bos&#32;(dest))&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
147 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__strcat_ichk&#32;(dest,&#32;src))</emphasis>
148 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
149 __strcat_ichk&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__src)
150 {
151 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___strcat_chk&#32;(__dest,&#32;__src,&#32;__ssp_bos&#32;(__dest));
152 }
153 
154 
155 <emphasis role="preprocessor">#define&#32;strncat(dest,&#32;src,&#32;len)&#32;\</emphasis>
156 <emphasis role="preprocessor">&#32;&#32;((__ssp_bos&#32;(dest)&#32;!=&#32;(size_t)&#32;-1)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
157 <emphasis role="preprocessor">&#32;&#32;&#32;?&#32;__builtin___strncat_chk&#32;(dest,&#32;src,&#32;len,&#32;__ssp_bos&#32;(dest))&#32;&#32;&#32;&#32;&#32;\</emphasis>
158 <emphasis role="preprocessor">&#32;&#32;&#32;:&#32;__strncat_ichk&#32;(dest,&#32;src,&#32;len))</emphasis>
159 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))&#32;<emphasis role="keywordtype">char</emphasis>&#32;*
160 __strncat_ichk&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__dest,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__restrict__&#32;__src,
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
162 {
163 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin___strncat_chk&#32;(__dest,&#32;__src,&#32;__len,&#32;__ssp_bos&#32;(__dest));
164 }
165 
166 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;__SSP_FORTIFY_LEVEL&#32;&gt;&#32;0&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
167 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_SSP_STRING_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
