<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace____gnu__parallel" xml:lang="en-US">
<title>__gnu_parallel Namespace Reference</title>
<indexterm><primary>__gnu_parallel</primary></indexterm>
<para>

<para>GNU parallel code for public use. </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____accumulate__binop__reduct">__accumulate_binop_reduct</link></para>

<para>General reduction, using a binary operator. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____accumulate__selector">__accumulate_selector</link></para>

<para>std::accumulate() selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____adjacent__difference__selector">__adjacent_difference_selector</link></para>

<para>Selector that returns the difference between two adjacent __elements. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____adjacent__find__selector">__adjacent_find_selector</link></para>

<para>Test predicate on two adjacent elements. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1____binder1st">__binder1st</link></para>

<para>Similar to std::binder1st, but giving the argument types explicitly. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1____binder2nd">__binder2nd</link></para>

<para>Similar to std::binder2nd, but giving the argument types explicitly. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____count__if__selector">__count_if_selector</link></para>

<para><link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">std::count_if</link> () selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____count__selector">__count_selector</link></para>

<para><link linkend="_namespacestd_1a30e2af881094d0e954ce605fdd3e0993">std::count()</link> selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____difference__func">__difference_func</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____fill__selector">__fill_selector</link></para>

<para><link linkend="_namespacestd_1a9042ae744521b1770e868813f939b4b7">std::fill()</link> selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____find__first__of__selector">__find_first_of_selector</link></para>

<para>Test predicate on several elements. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____find__if__selector">__find_if_selector</link></para>

<para>Test predicate on a single element, used for <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find()</link> and <link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">std::find_if</link> (). </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____for__each__selector">__for_each_selector</link></para>

<para><link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each()</link> selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____generate__selector">__generate_selector</link></para>

<para><link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">std::generate()</link> selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____generic__find__selector">__generic_find_selector</link></para>

<para>Base class of all <link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::__find_template</link> selectors. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____generic__for__each__selector">__generic_for_each_selector</link></para>

<para>Generic __selector for embarrassingly parallel functions. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____identity__selector">__identity_selector</link></para>

<para>Selector that just returns the passed iterator. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____inner__product__selector">__inner_product_selector</link></para>

<para>std::inner_product() selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____intersection__func">__intersection_func</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____max__element__reduct">__max_element_reduct</link></para>

<para>Reduction for finding the maximum element, using a comparator. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____min__element__reduct">__min_element_reduct</link></para>

<para>Reduction for finding the maximum element, using a comparator. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____mismatch__selector">__mismatch_selector</link></para>

<para>Test inverted predicate on a single element. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____multiway__merge__3__variant__sentinel__switch">__multiway_merge_3_variant_sentinel_switch</link></para>

<para>Switch for 3-way merging with __sentinels turned off. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____multiway__merge__3__variant__sentinel__switch_3_01true_00_01___r_ac490d6391875988d944af0889050584">__multiway_merge_3_variant_sentinel_switch&lt; true, _RAIterIterator, _RAIter3, _DifferenceTp, _Compare &gt;</link></para>

<para>Switch for 3-way merging with __sentinels turned on. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____multiway__merge__4__variant__sentinel__switch">__multiway_merge_4_variant_sentinel_switch</link></para>

<para>Switch for 4-way merging with __sentinels turned off. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____multiway__merge__4__variant__sentinel__switch_3_01true_00_01___r_29263920f3b19b06bcc0641dbe166144">__multiway_merge_4_variant_sentinel_switch&lt; true, _RAIterIterator, _RAIter3, _DifferenceTp, _Compare &gt;</link></para>

<para>Switch for 4-way merging with __sentinels turned on. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____multiway__merge__k__variant__sentinel__switch">__multiway_merge_k_variant_sentinel_switch</link></para>

<para>Switch for k-way merging with __sentinels turned on. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____multiway__merge__k__variant__sentinel__switch_3_01false_00_01____93150e0a1bf1e3fb3017cac94cf50485">__multiway_merge_k_variant_sentinel_switch&lt; false, __stable, _RAIterIterator, _RAIter3, _DifferenceTp, _Compare &gt;</link></para>

<para>Switch for k-way merging with __sentinels turned off. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____possibly__stable__multiway__merge">__possibly_stable_multiway_merge</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____possibly__stable__multiway__merge_3_01false_00_01___seq___r_a_itebbe515fc6f7648d1418c8d56e63df41f">__possibly_stable_multiway_merge&lt; false, _Seq_RAIter, _RAIter, _Compare, _DiffType &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____possibly__stable__multiway__merge_3_01true_00_01___seq___r_a_iter2ecdcf729effea6ea63a4538fbabf431">__possibly_stable_multiway_merge&lt; true, _Seq_RAIter, _RAIter, _Compare, _DiffType &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____possibly__stable__sort">__possibly_stable_sort</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____possibly__stable__sort_3_01false_00_01___r_a_iter_00_01___compare_01_4">__possibly_stable_sort&lt; false, _RAIter, _Compare &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____possibly__stable__sort_3_01true_00_01___r_a_iter_00_01___compare_01_4">__possibly_stable_sort&lt; true, _RAIter, _Compare &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____replace__if__selector">__replace_if_selector</link></para>

<para><link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">std::replace()</link> selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____replace__selector">__replace_selector</link></para>

<para><link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">std::replace()</link> selector. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____symmetric__difference__func">__symmetric_difference_func</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____transform1__selector">__transform1_selector</link></para>

<para><link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform()</link> __selector, one input sequence variant. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____transform2__selector">__transform2_selector</link></para>

<para><link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">std::transform()</link> __selector, two input sequences variant. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1____unary__negate">__unary_negate</link></para>

<para>Similar to std::unary_negate, but giving the argument types explicitly. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1____union__func">__union_func</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___d_random_shuffling_global_data">_DRandomShufflingGlobalData</link></para>

<para>Data known to every thread participating in <link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__gnu_parallel::__parallel_random_shuffle()</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u">_DRSSorterPU</link></para>

<para>Local data for a thread participating in <link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__gnu_parallel::__parallel_random_shuffle()</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___dummy_reduct">_DummyReduct</link></para>

<para>Reduction function doing nothing. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___equal_from_less">_EqualFromLess</link></para>

<para>Constructs predicate for equality from strict weak ordering predicate. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___equal_to">_EqualTo</link></para>

<para>Similar to std::equal_to, but allows two different types. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___guarded_iterator">_GuardedIterator</link></para>

<para>_Iterator wrapper supporting an implicit supremum at the end of the sequence, dominating all comparisons. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___iterator_pair">_IteratorPair</link></para>

<para>A pair of iterators. The usual iterator operations are applied to both child iterators. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___iterator_triple">_IteratorTriple</link></para>

<para>A triple of iterators. The usual iterator operations are applied to all three child iterators. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___job">_Job</link></para>

<para>One __job for a certain thread. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___less">_Less</link></para>

<para>Similar to std::less, but allows two different types. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___less_3_01___tp_00_01___tp_01_4">_Less&lt; _Tp, _Tp &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___lexicographic">_Lexicographic</link></para>

<para>Compare __a pair of types lexicographically, ascending. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___lexicographic_reverse">_LexicographicReverse</link></para>

<para>Compare __a pair of types lexicographically, descending. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link></para>

<para>Stable <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link> variant. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_3_01false_00_01___tp_00_01___compare_01_4">_LoserTree&lt; false, _Tp, _Compare &gt;</link></para>

<para>Unstable <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link> variant. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_base">_LoserTreeBase</link></para>

<para>Guarded loser/tournament tree. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_pointer">_LoserTreePointer</link></para>

<para>Stable <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link> implementation. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_pointer_3_01false_00_01___tp_00_01___compare_01_4">_LoserTreePointer&lt; false, _Tp, _Compare &gt;</link></para>

<para>Unstable <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link> implementation. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_pointer_base">_LoserTreePointerBase</link></para>

<para>Base class of <link linkend="_struct____gnu__parallel_1_1___loser_tree_pointer_base_1_1___loser">_Loser</link> Tree implementation using pointers. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_pointer_unguarded">_LoserTreePointerUnguarded</link></para>

<para>Stable unguarded <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link> variant storing pointers. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_pointer_unguarded_3_01false_00_01___tp_00_01___compare_01_4">_LoserTreePointerUnguarded&lt; false, _Tp, _Compare &gt;</link></para>

<para>Unstable unguarded <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link> variant storing pointers. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_pointer_unguarded_base">_LoserTreePointerUnguardedBase</link></para>

<para>Unguarded loser tree, keeping only pointers to the elements in the tree structure. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___loser_tree_traits">_LoserTreeTraits</link></para>

<para>Traits for determining whether the loser tree should use pointers or copies. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_unguarded">_LoserTreeUnguarded</link></para>

<para>Stable implementation of unguarded <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_unguarded_3_01false_00_01___tp_00_01___compare_01_4">_LoserTreeUnguarded&lt; false, _Tp, _Compare &gt;</link></para>

<para>Non-Stable implementation of unguarded <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___loser_tree_unguarded_base">_LoserTreeUnguardedBase</link></para>

<para>Base class for unguarded <link linkend="_class____gnu__parallel_1_1___loser_tree">_LoserTree</link> implementation. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___multiplies">_Multiplies</link></para>

<para>Similar to std::multiplies, but allows two different types. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___multiplies_3_01___tp_00_01___tp_00_01___tp_01_4">_Multiplies&lt; _Tp, _Tp, _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___nothing">_Nothing</link></para>

<para>Functor doing nothing. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___piece">_Piece</link></para>

<para>Subsequence description. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___plus">_Plus</link></para>

<para>Similar to std::plus, but allows two different types. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___plus_3_01___tp_00_01___tp_00_01___tp_01_4">_Plus&lt; _Tp, _Tp, _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData</link></para>

<para>Data accessed by all threads. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___pseudo_sequence">_PseudoSequence</link></para>

<para>Sequence that conceptually consists of multiple copies of the same element. The copies are not stored explicitly, of course. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___pseudo_sequence_iterator">_PseudoSequenceIterator</link></para>

<para>_Iterator associated with <link linkend="_class____gnu__parallel_1_1___pseudo_sequence">__gnu_parallel::_PseudoSequence</link>. If features the usual random-access iterator functionality. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local">_QSBThreadLocal</link></para>

<para>Information local to one thread in the parallel quicksort run. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___random_number">_RandomNumber</link></para>

<para>Random number generator, based on the Mersenne twister. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___restricted_bounded_concurrent_queue">_RestrictedBoundedConcurrentQueue</link></para>

<para>Double-ended queue of bounded size, allowing lock-free atomic access. <link linkend="_class____gnu__parallel_1_1___restricted_bounded_concurrent_queue_1a2ac4fcc26b5a8e8d3db9993ca3b6f777">push_front()</link> and <link linkend="_class____gnu__parallel_1_1___restricted_bounded_concurrent_queue_1a4b760899cefaccb86586c447b12c4cc3">pop_front()</link> must not be called concurrently to each other, while <link linkend="_class____gnu__parallel_1_1___restricted_bounded_concurrent_queue_1aff5854a49d63fcd08aae08eb282361e7">pop_back()</link> can be called concurrently at all times. <computeroutput>empty()</computeroutput>, <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size()</link></computeroutput>, and <computeroutput>top()</computeroutput> are intentionally not provided. Calling them would not make sense in a concurrent setting. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___sampling_sorter">_SamplingSorter</link></para>

<para>Stable sorting functor. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___sampling_sorter_3_01false_00_01___r_a_iter_00_01___strict_weak_ordering_01_4">_SamplingSorter&lt; false, _RAIter, _StrictWeakOrdering &gt;</link></para>

<para>Non-__stable sorting functor. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___settings">_Settings</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___split_consistently">_SplitConsistently</link></para>

<para>Split consistently. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___split_consistently_3_01false_00_01___r_a_iter_00_01___compare_00_02e8a2baf2019ec7bfe13dbc6d2774065">_SplitConsistently&lt; false, _RAIter, _Compare, _SortingPlacesIterator &gt;</link></para>

<para>Split by sampling. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1___split_consistently_3_01true_00_01___r_a_iter_00_01___compare_00_01___sorting_places_iterator_01_4">_SplitConsistently&lt; true, _RAIter, _Compare, _SortingPlacesIterator &gt;</link></para>

<para>Split by exact splitting. </para>
</listitem>
            <listitem><para>class <link linkend="_class____gnu__parallel_1_1___unguarded_iterator">_UnguardedIterator</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1balanced__quicksort__tag">balanced_quicksort_tag</link></para>

<para>Forces parallel sorting using balanced quicksort at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1balanced__tag">balanced_tag</link></para>

<para>Recommends parallel execution using dynamic load-balancing at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1constant__size__blocks__tag">constant_size_blocks_tag</link></para>

<para>Selects the constant block size variant for <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find()</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link></para>

<para>Recommends parallel execution using the default parallel algorithm. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1equal__split__tag">equal_split_tag</link></para>

<para>Selects the equal splitting variant for <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find()</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1exact__tag">exact_tag</link></para>

<para>Forces parallel merging with exact splitting, at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1find__tag">find_tag</link></para>

<para>Base class for for <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find()</link> variants. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1growing__blocks__tag">growing_blocks_tag</link></para>

<para>Selects the growing block size variant for <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find()</link>. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__exact__tag">multiway_mergesort_exact_tag</link></para>

<para>Forces parallel sorting using multiway mergesort with exact splitting at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__sampling__tag">multiway_mergesort_sampling_tag</link></para>

<para>Forces parallel sorting using multiway mergesort with splitting by sampling at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__tag">multiway_mergesort_tag</link></para>

<para>Forces parallel sorting using multiway mergesort at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1omp__loop__static__tag">omp_loop_static_tag</link></para>

<para>Recommends parallel execution using OpenMP static load-balancing at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1omp__loop__tag">omp_loop_tag</link></para>

<para>Recommends parallel execution using OpenMP dynamic load-balancing at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link></para>

<para>Recommends parallel execution at compile time, optionally using a user-specified number of threads. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1quicksort__tag">quicksort_tag</link></para>

<para>Forces parallel sorting using unbalanced quicksort at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1sampling__tag">sampling_tag</link></para>

<para>Forces parallel merging with exact splitting, at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1sequential__tag">sequential_tag</link></para>

<para>Forces sequential execution at compile time. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____gnu__parallel_1_1unbalanced__tag">unbalanced_tag</link></para>

<para>Recommends parallel execution using static load-balancing at compile time. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef unsigned short <link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">_BinIndex</link></para>

<para>Type to hold the index of a bin. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">_SequenceIndex</link></para>

<para>Unsigned integer to index __elements. The total number of elements for each algorithm must fit into this type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link> <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link></para>

<para>Unsigned integer to index a thread number. The maximum thread number (for each processor) must fit into this type. </para>
</listitem>
            <listitem><para>typedef <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> <link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link></para>

<para>Longest compare-and-swappable integer type on this platform. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
 }</para>

<para>Run-time equivalents for the compile-time tags. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f">_AlgorithmStrategy</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
 }</para>

<para>Strategies for run-time algorithm selection: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e">_SortAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
 }</para>

<para>Sorting algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d">_MultiwayMergeAlgorithm</link> { <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
, <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
, <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
 }</para>

<para>Merging algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380">_PartialSumAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
 }</para>

<para>Partial sum algorithms: recursive, linear. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb">_SplittingAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
 }</para>

<para>Sorting/merging algorithms: sampling, __exact. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252">_FindAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
 }</para>

<para>Find algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
 }</para>

<para>Run-time equivalents for the compile-time tags. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f">_AlgorithmStrategy</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
 }</para>

<para>Strategies for run-time algorithm selection: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e">_SortAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
 }</para>

<para>Sorting algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d">_MultiwayMergeAlgorithm</link> { <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
, <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
, <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
 }</para>

<para>Merging algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380">_PartialSumAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
 }</para>

<para>Partial sum algorithms: recursive, linear. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb">_SplittingAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
 }</para>

<para>Sorting/merging algorithms: sampling, __exact. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252">_FindAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
 }</para>

<para>Find algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9">sequential</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225">parallel_unbalanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0">parallel_balanced</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b">parallel_omp_loop</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993">parallel_omp_loop_static</link>
, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb">parallel_taskqueue</link>
 }</para>

<para>Run-time equivalents for the compile-time tags. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f">_AlgorithmStrategy</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10">heuristic</link>
, <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752">force_sequential</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f">force_parallel</link>
 }</para>

<para>Strategies for run-time algorithm selection: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e">_SortAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37">MWMS</link>
, <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f">QS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22">QS_BALANCED</link>
 }</para>

<para>Sorting algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d">_MultiwayMergeAlgorithm</link> { <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
, <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
, <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e">LOSER_TREE</link>
 }</para>

<para>Merging algorithms: </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380">_PartialSumAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4">RECURSIVE</link>
, <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d">LINEAR</link>
 }</para>

<para>Partial sum algorithms: recursive, linear. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb">_SplittingAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6">SAMPLING</link>
, <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1">EXACT</link>
 }</para>

<para>Sorting/merging algorithms: sampling, __exact. </para>
</listitem>
            <listitem><para>enum <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252">_FindAlgorithm</link> { <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b">GROWING_BLOCKS</link>
, <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7">CONSTANT_SIZE_BLOCKS</link>
, <?linebreak?><link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f">EQUAL_SPLIT</link>
 }</para>

<para>Find algorithms: </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para>std::iterator_traits&lt; _RAIter &gt;::difference_type <link linkend="_namespace____gnu__parallel_1af5df990f9c6b42ec71b0b3245efd8e56">__qsb_divide</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>Balanced quicksort divide step. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a8d9c5686c4621822c7c3cdd015f7e693">__qsb_conquer</link> (<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local">_QSBThreadLocal</link>&lt; _RAIter &gt; **__tls, _RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __iam, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __parent_wait)</para>

<para>Quicksort conquer step. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a7565d258aacb02328cef6eb2781ab711">__qsb_local_sort_with_helping</link> (<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local">_QSBThreadLocal</link>&lt; _RAIter &gt; **__tls, _Compare &amp;__comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __iam, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __wait)</para>

<para>Quicksort step doing load-balanced local sort. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a4093dd098b32542e3d3f43ebd4c6f940">__parallel_sort_qsb</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>Top-level quicksort routine. </para>
</listitem>
            <listitem><para><link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> <link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__get_max_threads</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link> (const <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> __p)</para>
</listitem>
            <listitem><para>template&lt;typename _Size &gt; </para><para>_Size <link linkend="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c">__rd_log2</link> (_Size __n)</para>

<para>Calculates the rounded-down logarithm of <computeroutput>__n</computeroutput> for base 2. </para>
</listitem>
            <listitem><para><link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link> <link linkend="_namespace____gnu__parallel_1a7fcc29eb3f2d9c83756a9d99b4105b3b">__encode2</link> (int __a, int __b)</para>

<para>Encode two integers into one gnu_parallel::_CASable. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aee3989c0ed2561801b8a6c0282008cca">__decode2</link> (<link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link> __x, int &amp;__a, int &amp;__b)</para>

<para>Decode two integers from one gnu_parallel::_CASable. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>const _Tp &amp; <link linkend="_namespace____gnu__parallel_1a417ee6b935946ea05ce7c45fd067541a">min</link> (const _Tp &amp;__a, const _Tp &amp;__b)</para>

<para>Equivalent to std::min. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>const _Tp &amp; <link linkend="_namespace____gnu__parallel_1a2cade9be3af2e53828fe5a3865d2d9c1">max</link> (const _Tp &amp;__a, const _Tp &amp;__b)</para>

<para>Equivalent to std::max. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para>_RAIter <link linkend="_namespace____gnu__parallel_1a74914ea59d68887b517e12c90189dbcd">__median_of_three_iterators</link> (_RAIter __a, _RAIter __b, _RAIter __c, _Compare __comp)</para>

<para>Compute the median of three referenced elements, according to <computeroutput>__comp</computeroutput>. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____gnu__parallel_1a34e76513fa46ae5c7bc8c45677289112">__is_sorted</link> (_IIter __begin, _IIter __end, _Compare __comp)</para>

<para>Check whether <computeroutput></computeroutput>[__begin, <computeroutput>__end</computeroutput>) is sorted according to <computeroutput>__comp</computeroutput>. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>_Tp <link linkend="_namespace____gnu__parallel_1a4096ee6025f5c32e1524971c2eae0407">__add_omp</link> (volatile _Tp *__ptr, _Tp __addend)</para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>_Tp <link linkend="_namespace____gnu__parallel_1a56a5a84c8a6049cd3cc83968c6eae088">__fetch_and_add</link> (volatile _Tp *__ptr, _Tp __addend)</para>

<para>Add a value to a variable, atomically. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____gnu__parallel_1a9209142c30164030551903748dd4206a">__cas_omp</link> (volatile _Tp *__ptr, _Tp __comparand, _Tp __replacement)</para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____gnu__parallel_1accd4441e0f846fee44966195a91e9e68">__compare_and_swap</link> (volatile _Tp *__ptr, _Tp __comparand, _Tp __replacement)</para>

<para>Compare-and-swap. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aaa76236af73146ae89f726921bc3f2cb">__yield</link> ()</para>

<para>Yield control to another thread, without waiting for the end of the time slice. </para>
</listitem>
            <listitem><para>template&lt;typename _DifferenceType , typename _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1ac799255921e70b0378d145924d673f9c">__equally_split</link> (_DifferenceType __n, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, _OutputIterator __s)</para>

<para>function to split a sequence into parts of almost equal size. </para>
</listitem>
            <listitem><para>template&lt;typename _DifferenceType &gt; </para><para>_DifferenceType <link linkend="_namespace____gnu__parallel_1a8e3a77cb920e419144b72d6d20167dfd">__equally_split_point</link> (_DifferenceType __n, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __thread_no)</para>

<para>function to split a sequence into parts of almost equal size. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector &gt; </para><para>std::pair&lt; _RAIter1, _RAIter2 &gt; <link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__find_template</link> (_RAIter1 __begin1, _RAIter1 __end1, _RAIter2 __begin2, _Pred __pred, _Selector __selector)</para>

<para>Parallel <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find</link>, switch for different algorithms. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _UserOp , typename _Functionality , typename _Red , typename _Result &gt; </para><para>_UserOp <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__for_each_template_random_access</link> (_IIter __begin, _IIter __end, _UserOp __user_op, _Functionality &amp;__functionality, _Red __reduction, _Result __reduction_start, _Result &amp;__output, typename std::iterator_traits&lt; _IIter &gt;::difference_type __bound, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> __parallelism_tag)</para>

<para>Chose the desired algorithm by evaluating <computeroutput>__parallelism_tag</computeroutput>. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ade684b015a28793b63a9e8f14c096066">__shrink_and_double</link> (std::vector&lt; _IIter &gt; &amp;__os_starts, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp;__count_to_two, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp;__range_length, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __make_twice)</para>

<para>Shrinks and doubles the ranges. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1adf42868b36ffd42054d85449f63b12aa">__shrink</link> (std::vector&lt; _IIter &gt; &amp;__os_starts, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp;__count_to_two, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp;__range_length)</para>

<para>Combines two ranges into one and thus halves the number of ranges. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _FunctorType &gt; </para><para><link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> <link linkend="_namespace____gnu__parallel_1ad3be0fcbf87a1f43b3ecd406841e7b0d">list_partition</link> (const _IIter __begin, const _IIter __end, _IIter *__starts, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> *__lengths, const int __num_parts, _FunctorType &amp;__f, int __oversampling=0)</para>

<para>Splits a sequence given by input iterators into parts of almost equal size. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a9a83f26ee291502fd0ccf83a566817c7">__merge_advance_usual</link> (_RAIter1 &amp;__begin1, _RAIter1 __end1, _RAIter2 &amp;__begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)</para>

<para>Merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a8deacd343b40dc77deeb1a8e515e7358">__merge_advance_movc</link> (_RAIter1 &amp;__begin1, _RAIter1 __end1, _RAIter2 &amp;__begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)</para>

<para>Merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a0059cd13cc6ab70692f8309ad92cb548">__merge_advance</link> (_RAIter1 &amp;__begin1, _RAIter1 __end1, _RAIter2 &amp;__begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)</para>

<para>Merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter1 , typename _RAIter2 , typename _RAIter3 , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1af1626ed7bbe2eb745a31f18728d73f4e">__parallel_merge_advance</link> (_RAIter1 &amp;__begin1, _RAIter1 __end1, _RAIter2 &amp;__begin2, _RAIter2 __end2, _RAIter3 __target, typename std::iterator_traits&lt; _RAIter1 &gt;::difference_type __max_length, _Compare __comp)</para>

<para>Merge routine fallback to sequential in case the iterators of the two input sequences are of different type. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter1 , typename _RAIter3 , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1ac4196b48ff7ecf5ca0f8f2cdee8681c5">__parallel_merge_advance</link> (_RAIter1 &amp;__begin1, _RAIter1 __end1, _RAIter1 &amp;__begin2, _RAIter1 __end2, _RAIter3 __target, typename std::iterator_traits&lt; _RAIter1 &gt;::difference_type __max_length, _Compare __comp)</para>

<para>Parallel merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</listitem>
            <listitem><para>template&lt;typename _RanSeqs , typename _RankType , typename _RankIterator , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ade1f4c5da0794c4f1a09465d4aee6c1d">multiseq_partition</link> (_RanSeqs __begin_seqs, _RanSeqs __end_seqs, _RankType __rank, _RankIterator __begin_offsets, _Compare __comp=std::less&lt; typename std::iterator_traits&lt; typename std::iterator_traits&lt; _RanSeqs &gt;::value_type::first_type &gt;::value_type &gt;())</para>

<para>Splits several sorted sequences at a certain global __rank, resulting in a splitting point for each sequence. The sequences are passed via a sequence of random-access iterator pairs, none of the sequences may be empty. If there are several equal elements across the split, the ones on the __left side will be chosen from sequences with smaller number. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp , typename _RanSeqs , typename _RankType , typename _Compare &gt; </para><para>_Tp <link linkend="_namespace____gnu__parallel_1a68f665a2f83172d9e12b8332ce573d5d">multiseq_selection</link> (_RanSeqs __begin_seqs, _RanSeqs __end_seqs, _RankType __rank, _RankType &amp;__offset, _Compare __comp=std::less&lt; _Tp &gt;())</para>

<para>Selects the element at a certain global __rank from several sorted sequences. </para>
</listitem>
            <listitem><para>template&lt;template&lt; typename _RAI, typename _Cp &gt; class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1a7ee9d79b73a6f85ae97e472312ba411e">multiway_merge_3_variant</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)</para>

<para>Highly efficient 3-way merging procedure. </para>
</listitem>
            <listitem><para>template&lt;template&lt; typename _RAI, typename _Cp &gt; class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1ac4af8f9977aa36823357bce35be6c946">multiway_merge_4_variant</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)</para>

<para>Highly efficient 4-way merging procedure. </para>
</listitem>
            <listitem><para>template&lt;typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1a150b06a4da2cf1cff673d1b6242c27fa">multiway_merge_loser_tree</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)</para>

<para>Multi-way merging procedure for a high branching factor, guarded case. </para>
</listitem>
            <listitem><para>template&lt;typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1a3ffd0c9da50da6118291d38f95d44b52">multiway_merge_loser_tree_unguarded</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits&lt; typename std::iterator_traits&lt; _RAIterIterator &gt;::value_type::first_type &gt;::value_type &amp;__sentinel, _DifferenceTp __length, _Compare __comp)</para>

<para>Multi-way merging procedure for a high branching factor, unguarded case. </para>
</listitem>
            <listitem><para>template&lt;typename _UnguardedLoserTree , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1a686704fa4da0a4fdbc6800fe46048366">multiway_merge_loser_tree_sentinel</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits&lt; typename std::iterator_traits&lt; _RAIterIterator &gt;::value_type::first_type &gt;::value_type &amp;__sentinel, _DifferenceTp __length, _Compare __comp)</para>

<para>Multi-way merging procedure for a high branching factor, requiring sentinels to exist. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1a5ccf0d17d06a0cdd449939227e55bd9d">__sequential_multiway_merge</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits&lt; typename std::iterator_traits&lt; _RAIterIterator &gt;::value_type::first_type &gt;::value_type &amp;__sentinel, _DifferenceTp __length, _Compare __comp)</para>

<para>Sequential multi-way merging switch. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a0e39d3891745fd0e244fb125bf34ce8b">multiway_merge_sampling_splitting</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _DifferenceType __length, _DifferenceType __total_length, _Compare __comp, std::vector&lt; std::pair&lt; _DifferenceType, _DifferenceType &gt; &gt; *__pieces)</para>

<para>Sampling based splitting for parallel multiway-merge routine. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a567621588e461a8759651e29cd964ab9">multiway_merge_exact_splitting</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _DifferenceType __length, _DifferenceType __total_length, _Compare __comp, std::vector&lt; std::pair&lt; _DifferenceType, _DifferenceType &gt; &gt; *__pieces)</para>

<para>Exact splitting for parallel multiway-merge routine. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Splitter , typename _Compare &gt; </para><para>_RAIter3 <link linkend="_namespace____gnu__parallel_1a14c854d00d1321cf1ee7f6d12fb955c4">parallel_multiway_merge</link> (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _Splitter __splitter, _DifferenceTp __length, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>Parallel multi-way merge routine. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a25294b0a47406aefa9ebc5e0c151d0ce">multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)</para>

<para>Multiway Merge Frontend. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1ac25efc956562ab237b7b6cb733060c6a">multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a8c908c501ec9005517a88a3004ff6a75">multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">__gnu_parallel::sampling_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a18da5adc61694c1f0c3f7735fa8daf2e">multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag=<link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0))</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a4569fbe5bdf414f0970bdc38875cdc2f">multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a27f5da3fdd4d5f56eecd6a078ec7bae2">stable_multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1aeb955a1aae5a2ad2e59e5f990625c678">stable_multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a18b727aab25037e289fecb8d9861963a">stable_multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">sampling_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a31162912a5b53056b8971c3ec0e718ba">stable_multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag=<link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0))</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a008a4daae19578fd8b00d789387f039f">stable_multiway_merge</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a4d6e76ac42b48f0033139352dcb0418f">multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)</para>

<para>Multiway Merge Frontend. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a5228d191a298cdaa42baacdfc821cc12">multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a5db4fbc41fff695834ee6d0cbc91f8c6">multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">sampling_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1adc0ae12fb2b2ce342e71691226729f1f">multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag=<link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0))</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1acb7509d5d4e88c17013e7f7a0fe539d5">multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a907b298f67ecf4627e9db5d8e1e8d8a5">stable_multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1ab4bef8eb5bc6bb03b812eb3246e02de4">stable_multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1aba7d273f820b57f9e0c709dbf68e6ee8">stable_multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">sampling_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a5f4a6f141791040bebf482b269b3be2b">stable_multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag=<link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0))</para>
</listitem>
            <listitem><para>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </para><para>_RAIterOut <link linkend="_namespace____gnu__parallel_1a9214bff1fbf949614c5f7f7d6fe129c3">stable_multiway_merge_sentinels</link> (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _DifferenceTp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a56184d12b3d8f441fc14150b15a091c7">__determine_samples</link> (<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData</link>&lt; _RAIter &gt; *__sd, _DifferenceTp __num_samples)</para>

<para>Select _M_samples from a sequence. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __exact, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aaf84903cd78722fcd19b20ccb69c47e4">parallel_sort_mwms_pu</link> (<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData</link>&lt; _RAIter &gt; *__sd, _Compare &amp;__comp)</para>

<para>PMWMS code executed by each thread. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __exact, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ae193ac43730550b537828a117dd2797f">parallel_sort_mwms</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>PMWMS main call. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </para><para>_Op <link linkend="_namespace____gnu__parallel_1a6a5228179a033ede58cd143f66cdf354">__for_each_template_random_access_omp_loop</link> (_RAIter __begin, _RAIter __end, _Op __o, _Fu &amp;__f, _Red __r, _Result __base, _Result &amp;__output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</para>

<para>Embarrassingly parallel algorithm for random access iterators, using an OpenMP for loop. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </para><para>_Op <link linkend="_namespace____gnu__parallel_1adfc9f0a346a7f323e8a3ba07b772587d">__for_each_template_random_access_omp_loop_static</link> (_RAIter __begin, _RAIter __end, _Op __o, _Fu &amp;__f, _Red __r, _Result __base, _Result &amp;__output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</para>

<para>Embarrassingly parallel algorithm for random access iterators, using an OpenMP for loop with static scheduling. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </para><para>_Op <link linkend="_namespace____gnu__parallel_1a12c48efb47ea3e00a7ef666d595ae185">__for_each_template_random_access_ed</link> (_RAIter __begin, _RAIter __end, _Op __o, _Fu &amp;__f, _Red __r, _Result __base, _Result &amp;__output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</para>

<para>Embarrassingly parallel algorithm for random access iterators, using hand-crafted parallelization by equal splitting the work. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _BinaryOperation &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1adeded88310546a7c54d73464bee998e2">__parallel_partial_sum_basecase</link> (_IIter __begin, _IIter __end, _OutputIterator __result, _BinaryOperation __bin_op, typename std::iterator_traits&lt; _IIter &gt;::value_type __value)</para>

<para>Base case prefix sum routine. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _BinaryOperation &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a63017e821c2b4ff9f90c3641bc45f001">__parallel_partial_sum_linear</link> (_IIter __begin, _IIter __end, _OutputIterator __result, _BinaryOperation __bin_op, typename std::iterator_traits&lt; _IIter &gt;::difference_type __n)</para>

<para>Parallel partial sum implementation, two-phase approach, no recursion. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _BinaryOperation &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a0cf4a05b6f849cae06f9fb6098eb0628">__parallel_partial_sum</link> (_IIter __begin, _IIter __end, _OutputIterator __result, _BinaryOperation __bin_op)</para>

<para>Parallel partial sum front-__end. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Predicate &gt; </para><para>std::iterator_traits&lt; _RAIter &gt;::difference_type <link linkend="_namespace____gnu__parallel_1ac870af1d69405f2f53cd7a96e1d92348">__parallel_partition</link> (_RAIter __begin, _RAIter __end, _Predicate __pred, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>Parallel implementation of <link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">std::partition</link>. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a1567c37a7562eaee17d13ebda1172586">__parallel_nth_element</link> (_RAIter __begin, _RAIter __nth, _RAIter __end, _Compare __comp)</para>

<para>Parallel implementation of <link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">std::nth_element()</link>. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1abe60c5cc3788e1b1602175af0057d3f8">__parallel_partial_sort</link> (_RAIter __begin, _RAIter __middle, _RAIter __end, _Compare __comp)</para>

<para>Parallel implementation of <link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">std::partial_sort()</link>. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para>std::iterator_traits&lt; _RAIter &gt;::difference_type <link linkend="_namespace____gnu__parallel_1a67cbf5b9027d7c9c4f80f80ba104cf99">__parallel_sort_qs_divide</link> (_RAIter __begin, _RAIter __end, _Compare __comp, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __pivot_rank, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __num_samples, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>Unbalanced quicksort divide step. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a06c506308856b684737d24944a93a42e">__parallel_sort_qs_conquer</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>Unbalanced quicksort conquer step. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ac416a1c7e347b429bbf7a8fb17e847b2">__parallel_sort_qs</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</para>

<para>Unbalanced quicksort main call. </para>
</listitem>
            <listitem><para>template&lt;typename _RandomNumberGenerator &gt; </para><para>int <link linkend="_namespace____gnu__parallel_1a06421834042f49edbb2abb2dd931315d">__random_number_pow2</link> (int __logp, _RandomNumberGenerator &amp;__rng)</para>

<para>Generate a random number in <computeroutput></computeroutput>[0,2^__logp). </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ab52b56076dd965bea099a7187e621d0b">__parallel_random_shuffle_drs_pu</link> (<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u">_DRSSorterPU</link>&lt; _RAIter, _RandomNumberGenerator &gt; *__pus)</para>

<para>Random shuffle code executed by each thread. </para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>_Tp <link linkend="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169">__round_up_to_pow2</link> (_Tp __x)</para>

<para>Round up to the next greater power of 2. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a9152bade9629217427f065780bc3f4c2">__parallel_random_shuffle_drs</link> (_RAIter __begin, _RAIter __end, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __n, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, _RandomNumberGenerator &amp;__rng)</para>

<para><link linkend="_class_main">Main</link> parallel random shuffle step. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868">__sequential_random_shuffle</link> (_RAIter __begin, _RAIter __end, _RandomNumberGenerator &amp;__rng)</para>

<para>Sequential cache-efficient random shuffle. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__parallel_random_shuffle</link> (_RAIter __begin, _RAIter __end, _RandomNumberGenerator __rng=<link linkend="_class____gnu__parallel_1_1___random_number">_RandomNumber</link>())</para>

<para>Parallel random public call. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _DifferenceTp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ab9807ee5cc58530be7b997207e2bf1f3">__calc_borders</link> (_RAIter __elements, _DifferenceTp __length, _DifferenceTp *__off)</para>

<para>Precalculate __advances for Knuth-Morris-Pratt algorithm. </para>
</listitem>
            <listitem><para>template&lt;typename __RAIter1 , typename __RAIter2 , typename _Pred &gt; </para><para>__RAIter1 <link linkend="_namespace____gnu__parallel_1af1e654f03e48e80a0c73db7ad88e8a86">__search_template</link> (__RAIter1 __begin1, __RAIter1 __end1, __RAIter2 __begin2, __RAIter2 __end2, _Pred __pred)</para>

<para>Parallel <link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">std::search</link>. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a8e1bf93702dd25b08e296ef85aa0c7fb">__copy_tail</link> (std::pair&lt; _IIter, _IIter &gt; __b, std::pair&lt; _IIter, _IIter &gt; __e, _OutputIterator __r)</para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _Operation &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1ad6dc994e2f7245b108300cc529ee7410">__parallel_set_operation</link> (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Operation __op)</para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a56bac3b8498aadcd3ce073422f0b9822">__parallel_set_union</link> (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1aa2d25a01058104978680d0b5d934b54f">__parallel_set_intersection</link> (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1abb75bc882413dc8cba7fce93c5eaaaf0">__parallel_set_difference</link> (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a567012d512340614386402b7e3234ec6">__parallel_set_symmetric_difference</link> (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare , typename <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a05674fa7702fc8a86b415dc193dcfd9a">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> __parallelism)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a1edbc983766e29af55322f9c983277ac">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__tag">multiway_mergesort_tag</link> __parallelism)</para>

<para>Choose multiway mergesort, splitting variant at run-time, for parallel sorting. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1ac609a343c5522586ce1561c1390fab46">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__exact__tag">multiway_mergesort_exact_tag</link> __parallelism)</para>

<para>Choose multiway mergesort with exact splitting, for parallel sorting. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a81d9cc449b9b4122d5f4471dfdf02a78">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__sampling__tag">multiway_mergesort_sampling_tag</link> __parallelism)</para>

<para>Choose multiway mergesort with splitting by sampling, for parallel sorting. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aceaaa622c34d2f28ba6bf79241fcee36">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1quicksort__tag">quicksort_tag</link> __parallelism)</para>

<para>Choose quicksort for parallel sorting. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1a000f037b08d237d140dd6144a11fb73f">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1balanced__quicksort__tag">balanced_quicksort_tag</link> __parallelism)</para>

<para>Choose balanced quicksort for parallel sorting. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1af2c2fb5ed2754de7c1acc336b62b57b0">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __parallelism)</para>

<para>Choose multiway mergesort with exact splitting, for parallel sorting. </para>
</listitem>
            <listitem><para>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____gnu__parallel_1aa47b469dd82347dd63c3996eda2e237b">__parallel_sort</link> (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __parallelism)</para>

<para>Choose a parallel sorting algorithm. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , class _OutputIterator , class _BinaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a15f31ee1c15e180d0d838571cd6c8b24">__parallel_unique_copy</link> (_IIter __first, _IIter __last, _OutputIterator __result, _BinaryPredicate __binary_pred)</para>

<para>Parallel <link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">std::unique_copy()</link>, w/__o explicit equality predicate. </para>
</listitem>
            <listitem><para>template&lt;typename _IIter , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____gnu__parallel_1a3b3bd19508b4e34708a1dc647f5bc131">__parallel_unique_copy</link> (_IIter __first, _IIter __last, _OutputIterator __result)</para>

<para>Parallel <link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">std::unique_copy()</link>, without explicit equality predicate. </para>
</listitem>
            <listitem><para>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </para><para>_Op <link linkend="_namespace____gnu__parallel_1a14bdca2e9c62cde7dd8478d972f60272">__for_each_template_random_access_workstealing</link> (_RAIter __begin, _RAIter __end, _Op __op, _Fu &amp;__f, _Red __r, _Result __base, _Result &amp;__output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</para>

<para>Work stealing algorithm for random access iterators. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>GNU parallel code for public use. </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584"/><section>
    <title>_BinIndex</title>
<indexterm><primary>_BinIndex</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_BinIndex</secondary></indexterm>
<para><computeroutput>typedef unsigned short <link linkend="_namespace____gnu__parallel_1ad8a0790a8380d657d3e238ec3f26d584">__gnu_parallel::_BinIndex</link></computeroutput></para><para>

<para>Type to hold the index of a bin. </para>
</para>

<para>Since many variables of this type are allocated, it should be chosen as small as possible. </para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115"/><section>
    <title>_CASable</title>
<indexterm><primary>_CASable</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_CASable</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> <link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">__gnu_parallel::_CASable</link></computeroutput></para><para>

<para>Longest compare-and-swappable integer type on this platform. </para>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1"/><section>
    <title>_SequenceIndex</title>
<indexterm><primary>_SequenceIndex</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_SequenceIndex</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link></computeroutput></para><para>

<para>Unsigned integer to index __elements. The total number of elements for each algorithm must fit into this type. </para>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a"/><section>
    <title>_ThreadIndex</title>
<indexterm><primary>_ThreadIndex</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_ThreadIndex</secondary></indexterm>
<para><computeroutput>typedef <link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a273cf69d639a59973b6019625df33e30">uint16_t</link> <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">__gnu_parallel::_ThreadIndex</link></computeroutput></para><para>

<para>Unsigned integer to index a thread number. The maximum thread number (for each processor) must fit into this type. </para>
</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f"/><section>
    <title>_AlgorithmStrategy<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_AlgorithmStrategy</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_AlgorithmStrategy</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f">__gnu_parallel::_AlgorithmStrategy</link></computeroutput></para><para>

<para>Strategies for run-time algorithm selection: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row><row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row><row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f"/><section>
    <title>_AlgorithmStrategy<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_AlgorithmStrategy</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_AlgorithmStrategy</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f">__gnu_parallel::_AlgorithmStrategy</link></computeroutput></para><para>

<para>Strategies for run-time algorithm selection: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row><row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row><row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f"/><section>
    <title>_AlgorithmStrategy<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_AlgorithmStrategy</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_AlgorithmStrategy</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954f">__gnu_parallel::_AlgorithmStrategy</link></computeroutput></para><para>

<para>Strategies for run-time algorithm selection: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row><row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row><row><entry><indexterm><primary>heuristic</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>heuristic</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa7ebd97084fc43d5c74ee94f143b01a10"/>heuristic</entry><entry></entry></row><row><entry><indexterm><primary>force_sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fac195a2697e4e13810614bf3b6483d752"/>force_sequential</entry><entry></entry></row><row><entry><indexterm><primary>force_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>force_parallel</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abfff682f83a1eacf1b43ad2b33a1954fa0641bfa5b1ca0addcac1655b6a9e322f"/>force_parallel</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252"/><section>
    <title>_FindAlgorithm<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_FindAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_FindAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252">__gnu_parallel::_FindAlgorithm</link></computeroutput></para><para>

<para>Find algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row><row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row><row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252"/><section>
    <title>_FindAlgorithm<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_FindAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_FindAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252">__gnu_parallel::_FindAlgorithm</link></computeroutput></para><para>

<para>Find algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row><row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row><row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252"/><section>
    <title>_FindAlgorithm<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_FindAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_FindAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252">__gnu_parallel::_FindAlgorithm</link></computeroutput></para><para>

<para>Find algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row><row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row><row><entry><indexterm><primary>GROWING_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>GROWING_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3af1a4fe251c64cc86ce6e743038fb4b"/>GROWING_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>CONSTANT_SIZE_BLOCKS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>CONSTANT_SIZE_BLOCKS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252a3d258f4654b997f6bc74d45134fd40e7"/>CONSTANT_SIZE_BLOCKS</entry><entry></entry></row><row><entry><indexterm><primary>EQUAL_SPLIT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EQUAL_SPLIT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a1a75203febda4d2e4fab646bf6a94252ad9c04a6356ca7106b988d7bfb2f44a5f"/>EQUAL_SPLIT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d"/><section>
    <title>_MultiwayMergeAlgorithm<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_MultiwayMergeAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_MultiwayMergeAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d">__gnu_parallel::_MultiwayMergeAlgorithm</link></computeroutput></para><para>

<para>Merging algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row><row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row><row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d"/><section>
    <title>_MultiwayMergeAlgorithm<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_MultiwayMergeAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_MultiwayMergeAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d">__gnu_parallel::_MultiwayMergeAlgorithm</link></computeroutput></para><para>

<para>Merging algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row><row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row><row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d"/><section>
    <title>_MultiwayMergeAlgorithm<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_MultiwayMergeAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_MultiwayMergeAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91d">__gnu_parallel::_MultiwayMergeAlgorithm</link></computeroutput></para><para>

<para>Merging algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row><row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row><row><entry><indexterm><primary>LOSER_TREE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LOSER_TREE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1abf16f5ba3af149689c7ed95309b7e91da33fafc22d7429e364490435a7efb3b3e"/>LOSER_TREE</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8"/><section>
    <title>_Parallelism<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_Parallelism</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_Parallelism</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link></computeroutput></para><para>

<para>Run-time equivalents for the compile-time tags. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row><row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row><row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8"/><section>
    <title>_Parallelism<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_Parallelism</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_Parallelism</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link></computeroutput></para><para>

<para>Run-time equivalents for the compile-time tags. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row><row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row><row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8"/><section>
    <title>_Parallelism<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_Parallelism</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_Parallelism</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link></computeroutput></para><para>

<para>Run-time equivalents for the compile-time tags. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row><row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row><row><entry><indexterm><primary>sequential</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>sequential</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ab0ba01dff81610e2936ab2e3c49445f9"/>sequential</entry><entry>
<para>Not parallel. </para>
</entry></row><row><entry><indexterm><primary>parallel_unbalanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_unbalanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a73886d3696bfa5388e3ed01bc88e2225"/>parallel_unbalanced</entry><entry>
<para>Parallel unbalanced (equal-sized chunks). </para>
</entry></row><row><entry><indexterm><primary>parallel_balanced</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_balanced</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8ae6fe2845ff33c04c3af6c9b9c75a07c0"/>parallel_balanced</entry><entry>
<para>Parallel balanced (work-stealing). </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a8c4c01b9cb1a39317a38f06e0e84eb9b"/>parallel_omp_loop</entry><entry>
<para>Parallel with OpenMP dynamic load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_omp_loop_static</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8a6cc76c5e7ae1ed1369dfa2f00ebcf993"/>parallel_omp_loop_static</entry><entry>
<para>Parallel with OpenMP static load-balancing. </para>
</entry></row><row><entry><indexterm><primary>parallel_taskqueue</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_taskqueue</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8aacb4cfdf204b5af1665d56b9e1b2b0fb"/>parallel_taskqueue</entry><entry>
<para>Parallel with OpenMP taskqueue construct. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380"/><section>
    <title>_PartialSumAlgorithm<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_PartialSumAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_PartialSumAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380">__gnu_parallel::_PartialSumAlgorithm</link></computeroutput></para><para>

<para>Partial sum algorithms: recursive, linear. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row><row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row><row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380"/><section>
    <title>_PartialSumAlgorithm<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_PartialSumAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_PartialSumAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380">__gnu_parallel::_PartialSumAlgorithm</link></computeroutput></para><para>

<para>Partial sum algorithms: recursive, linear. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row><row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row><row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380"/><section>
    <title>_PartialSumAlgorithm<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_PartialSumAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_PartialSumAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380">__gnu_parallel::_PartialSumAlgorithm</link></computeroutput></para><para>

<para>Partial sum algorithms: recursive, linear. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row><row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row><row><entry><indexterm><primary>RECURSIVE</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>RECURSIVE</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380acddb2d2b87248ed4cd88d71b08799dd4"/>RECURSIVE</entry><entry></entry></row><row><entry><indexterm><primary>LINEAR</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>LINEAR</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a6a4a811c81e2fb4a7722ee69762c7380a734c2f0b561ad9d6bc4a85a86c0c7d1d"/>LINEAR</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e"/><section>
    <title>_SortAlgorithm<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_SortAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_SortAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e">__gnu_parallel::_SortAlgorithm</link></computeroutput></para><para>

<para>Sorting algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row><row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row><row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e"/><section>
    <title>_SortAlgorithm<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_SortAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_SortAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e">__gnu_parallel::_SortAlgorithm</link></computeroutput></para><para>

<para>Sorting algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row><row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row><row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e"/><section>
    <title>_SortAlgorithm<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_SortAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_SortAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414e">__gnu_parallel::_SortAlgorithm</link></computeroutput></para><para>

<para>Sorting algorithms: </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row><row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row><row><entry><indexterm><primary>MWMS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>MWMS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eaf192c908c3836dcf2d14f7e76425fb37"/>MWMS</entry><entry></entry></row><row><entry><indexterm><primary>QS</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414eabea807924896f602d8546c738a06c23f"/>QS</entry><entry></entry></row><row><entry><indexterm><primary>QS_BALANCED</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>QS_BALANCED</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1a35bfabad218af713f172257aecd8414ea20ad8909835e0bdc20049ff031782c22"/>QS_BALANCED</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb"/><section>
    <title>_SplittingAlgorithm<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>_SplittingAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_SplittingAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb">__gnu_parallel::_SplittingAlgorithm</link></computeroutput></para><para>

<para>Sorting/merging algorithms: sampling, __exact. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row><row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row><row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb"/><section>
    <title>_SplittingAlgorithm<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>_SplittingAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_SplittingAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb">__gnu_parallel::_SplittingAlgorithm</link></computeroutput></para><para>

<para>Sorting/merging algorithms: sampling, __exact. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row><row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row><row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb"/><section>
    <title>_SplittingAlgorithm<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>_SplittingAlgorithm</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>_SplittingAlgorithm</secondary></indexterm>
<para><computeroutput>enum <link linkend="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bb">__gnu_parallel::_SplittingAlgorithm</link></computeroutput></para><para>

<para>Sorting/merging algorithms: sampling, __exact. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row><row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row><row><entry><indexterm><primary>SAMPLING</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>SAMPLING</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bba51d5f216b721029eb2c474a44f32dcf6"/>SAMPLING</entry><entry></entry></row><row><entry><indexterm><primary>EXACT</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>EXACT</secondary></indexterm>
<anchor xml:id="_namespace____gnu__parallel_1ace24b9f316fde5ea598815403cfd02bbaf5097b2b3d9b19b8a5fd8138eb741ad1"/>EXACT</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespace____gnu__parallel_1a4096ee6025f5c32e1524971c2eae0407"/><section>
    <title>__add_omp()</title>
<indexterm><primary>__add_omp</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__add_omp</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp __gnu_parallel::__add_omp (volatile _Tp * __ptr, _Tp __addend)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a4096ee6025f5c32e1524971c2eae0407_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ab9807ee5cc58530be7b997207e2bf1f3"/><section>
    <title>__calc_borders()</title>
<indexterm><primary>__calc_borders</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__calc_borders</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _DifferenceTp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__calc_borders (_RAIter __elements, _DifferenceTp __length, _DifferenceTp * __off)</computeroutput></para><para>

<para>Precalculate __advances for Knuth-Morris-Pratt algorithm. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__elements</entry><entry>
<para>Begin iterator of sequence to search for. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Length of sequence to search for. </para>
</entry>
                            </row>
                            <row>
<entry>__off</entry><entry>
<para>Returned __offsets. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ab9807ee5cc58530be7b997207e2bf1f3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a9209142c30164030551903748dd4206a"/><section>
    <title>__cas_omp()</title>
<indexterm><primary>__cas_omp</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__cas_omp</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_parallel::__cas_omp (volatile _Tp * __ptr, _Tp __comparand, _Tp __replacement)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a9209142c30164030551903748dd4206a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1accd4441e0f846fee44966195a91e9e68"/><section>
    <title>__compare_and_swap()</title>
<indexterm><primary>__compare_and_swap</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__compare_and_swap</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_parallel::__compare_and_swap (volatile _Tp * __ptr, _Tp __comparand, _Tp __replacement)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compare-and-swap. </para>
</para>

<para>Compare <computeroutput>*__ptr</computeroutput> and <computeroutput>__comparand</computeroutput>. If equal, let <computeroutput>*__ptr=__replacement</computeroutput> and return <computeroutput>true</computeroutput>, return <computeroutput>false</computeroutput> otherwise.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__ptr</entry><entry>
<para>Pointer to signed integer. </para>
</entry>
                            </row>
                            <row>
<entry>__comparand</entry><entry>
<para>Compare value. </para>
</entry>
                            </row>
                            <row>
<entry>__replacement</entry><entry>
<para>Replacement value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_accd4441e0f846fee44966195a91e9e68_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_accd4441e0f846fee44966195a91e9e68_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a8e1bf93702dd25b08e296ef85aa0c7fb"/><section>
    <title>__copy_tail()</title>
<indexterm><primary>__copy_tail</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__copy_tail</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__copy_tail (std::pair&lt; _IIter, _IIter &gt; __b, std::pair&lt; _IIter, _IIter &gt; __e, _OutputIterator __r)</computeroutput></para></section>
<anchor xml:id="_namespace____gnu__parallel_1aee3989c0ed2561801b8a6c0282008cca"/><section>
    <title>__decode2()</title>
<indexterm><primary>__decode2</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__decode2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__decode2 (<link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link> __x, int &amp; __a, int &amp; __b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Decode two integers from one gnu_parallel::_CASable. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para><link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">__gnu_parallel::_CASable</link> to decode integers from. </para>
</entry>
                            </row>
                            <row>
<entry>__a</entry><entry>
<para>First integer, to be decoded from the most-significant <computeroutput>_CASable_bits/2</computeroutput> bits of <computeroutput>__x</computeroutput>. </para>
</entry>
                            </row>
                            <row>
<entry>__b</entry><entry>
<para>Second integer, to be encoded in the least-significant <computeroutput>_CASable_bits/2</computeroutput> bits of <computeroutput>__x</computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para><link linkend="_namespace____gnu__parallel_1a7fcc29eb3f2d9c83756a9d99b4105b3b">__encode2</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aee3989c0ed2561801b8a6c0282008cca_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a56184d12b3d8f441fc14150b15a091c7"/><section>
    <title>__determine_samples()</title>
<indexterm><primary>__determine_samples</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__determine_samples</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _DifferenceTp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__determine_samples (<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData</link>&lt; _RAIter &gt; * __sd, _DifferenceTp __num_samples)</computeroutput></para><para>

<para>Select _M_samples from a sequence. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__sd</entry><entry>
<para>Pointer to algorithm data. _Result will be placed in <computeroutput>__sd-&gt;_M_samples</computeroutput>. </para>
</entry>
                            </row>
                            <row>
<entry>__num_samples</entry><entry>
<para>Number of _M_samples to select. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a56184d12b3d8f441fc14150b15a091c7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a56184d12b3d8f441fc14150b15a091c7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a7fcc29eb3f2d9c83756a9d99b4105b3b"/><section>
    <title>__encode2()</title>
<indexterm><primary>__encode2</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__encode2</secondary></indexterm>
<para><computeroutput><link linkend="_namespace____gnu__parallel_1aa1171c39f9e5afad6392c7aeefb81115">_CASable</link> __gnu_parallel::__encode2 (int __a, int __b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Encode two integers into one gnu_parallel::_CASable. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__a</entry><entry>
<para>First integer, to be encoded in the most-significant <computeroutput>_CASable_bits/2</computeroutput> bits. </para>
</entry>
                            </row>
                            <row>
<entry>__b</entry><entry>
<para>Second integer, to be encoded in the least-significant <computeroutput>_CASable_bits/2</computeroutput> bits. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>value encoding <computeroutput>__a</computeroutput> and <computeroutput>__b</computeroutput>. </para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_namespace____gnu__parallel_1aee3989c0ed2561801b8a6c0282008cca">__decode2</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a7fcc29eb3f2d9c83756a9d99b4105b3b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ac799255921e70b0378d145924d673f9c"/><section>
    <title>__equally_split()</title>
<indexterm><primary>__equally_split</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__equally_split</secondary></indexterm>
<computeroutput>template&lt;typename _DifferenceType , typename _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__equally_split (_DifferenceType __n, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, _OutputIterator __s)</computeroutput></para><para>

<para>function to split a sequence into parts of almost equal size. </para>
</para>

<para>The resulting sequence __s of length __num_threads+1 contains the splitting positions when splitting the range [0,__n) into parts of almost equal size (plus minus 1). The first entry is 0, the last one n. There may result empty parts. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>Number of elements </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of parts </para>
</entry>
                            </row>
                            <row>
<entry>__s</entry><entry>
<para>Splitters </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End of __splitter sequence, i.e. <computeroutput>__s+__num_threads+1</computeroutput> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac799255921e70b0378d145924d673f9c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a8e3a77cb920e419144b72d6d20167dfd"/><section>
    <title>__equally_split_point()</title>
<indexterm><primary>__equally_split_point</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__equally_split_point</secondary></indexterm>
<computeroutput>template&lt;typename _DifferenceType &gt; </computeroutput><para><computeroutput>_DifferenceType __gnu_parallel::__equally_split_point (_DifferenceType __n, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __thread_no)</computeroutput></para><para>

<para>function to split a sequence into parts of almost equal size. </para>
</para>

<para>Returns the position of the splitting point between thread number __thread_no (included) and thread number __thread_no+1 (excluded). 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>Number of elements </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of parts </para>
</entry>
                            </row>
                            <row>
<entry>__thread_no</entry><entry>
<para>Number of threads </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>splitting point </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a8e3a77cb920e419144b72d6d20167dfd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a56a5a84c8a6049cd3cc83968c6eae088"/><section>
    <title>__fetch_and_add()</title>
<indexterm><primary>__fetch_and_add</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__fetch_and_add</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp __gnu_parallel::__fetch_and_add (volatile _Tp * __ptr, _Tp __addend)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add a value to a variable, atomically. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__ptr</entry><entry>
<para>Pointer to a signed integer. </para>
</entry>
                            </row>
                            <row>
<entry>__addend</entry><entry>
<para>Value to add. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a56a5a84c8a6049cd3cc83968c6eae088_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a56a5a84c8a6049cd3cc83968c6eae088_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d"/><section>
    <title>__find_template()</title>
<indexterm><primary>__find_template</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__find_template</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter1 , typename _RAIter2 , typename _Pred , typename _Selector &gt; </computeroutput><para><computeroutput>std::pair&lt; _RAIter1, _RAIter2 &gt; __gnu_parallel::__find_template (_RAIter1 __begin1, _RAIter1 __end1, _RAIter2 __begin2, _Pred __pred, _Selector __selector)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parallel <link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">std::find</link>, switch for different algorithms. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin1</entry><entry>
<para>Begin iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end1</entry><entry>
<para>End iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__begin2</entry><entry>
<para>Begin iterator of second sequence. Must have same length as first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__pred</entry><entry>
<para>Find predicate. </para>
</entry>
                            </row>
                            <row>
<entry>__selector</entry><entry>
<para>_Functionality (e. g. <link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">std::find_if()</link>, <link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal()</link>,...) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Place of finding in both sequences. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af4b3d28761a76e60f6836a50f5cebb7d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af4b3d28761a76e60f6836a50f5cebb7d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50"/><section>
    <title>__for_each_template_random_access()</title>
<indexterm><primary>__for_each_template_random_access</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__for_each_template_random_access</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _UserOp , typename _Functionality , typename _Red , typename _Result &gt; </computeroutput><para><computeroutput>_UserOp __gnu_parallel::__for_each_template_random_access (_IIter __begin, _IIter __end, _UserOp __user_op, _Functionality &amp; __functionality, _Red __reduction, _Result __reduction_start, _Result &amp; __output, typename std::iterator_traits&lt; _IIter &gt;::difference_type __bound, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> __parallelism_tag)</computeroutput></para><para>

<para>Chose the desired algorithm by evaluating <computeroutput>__parallelism_tag</computeroutput>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__user_op</entry><entry>
<para>A user-specified functor (comparator, predicate, associative operator,...) </para>
</entry>
                            </row>
                            <row>
<entry>__functionality</entry><entry>
<para>functor to <emphasis>process</emphasis> an element with __user_op (depends on desired functionality, e. g. accumulate, for_each,... </para>
</entry>
                            </row>
                            <row>
<entry>__reduction</entry><entry>
<para>Reduction functor. </para>
</entry>
                            </row>
                            <row>
<entry>__reduction_start</entry><entry>
<para>Initial value for reduction. </para>
</entry>
                            </row>
                            <row>
<entry>__output</entry><entry>
<para>Output iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__bound</entry><entry>
<para>Maximum number of elements processed. </para>
</entry>
                            </row>
                            <row>
<entry>__parallelism_tag</entry><entry>
<para>Parallelization method </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a0ebbe56e1b059cba72c3d706307a0e50_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a0ebbe56e1b059cba72c3d706307a0e50_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a12c48efb47ea3e00a7ef666d595ae185"/><section>
    <title>__for_each_template_random_access_ed()</title>
<indexterm><primary>__for_each_template_random_access_ed</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__for_each_template_random_access_ed</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </computeroutput><para><computeroutput>_Op __gnu_parallel::__for_each_template_random_access_ed (_RAIter __begin, _RAIter __end, _Op __o, _Fu &amp; __f, _Red __r, _Result __base, _Result &amp; __output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</computeroutput></para><para>

<para>Embarrassingly parallel algorithm for random access iterators, using hand-crafted parallelization by equal splitting the work. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__o</entry><entry>
<para>User-supplied functor (comparator, predicate, adding functor, ...) </para>
</entry>
                            </row>
                            <row>
<entry>__f</entry><entry>
<para>Functor to &quot;process&quot; an element with __op (depends on desired functionality, e. g. for <link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each()</link>, ...). </para>
</entry>
                            </row>
                            <row>
<entry>__r</entry><entry>
<para>Functor to &quot;add&quot; a single __result to the already processed elements (depends on functionality). </para>
</entry>
                            </row>
                            <row>
<entry>__base</entry><entry>
<para>Base value for reduction. </para>
</entry>
                            </row>
                            <row>
<entry>__output</entry><entry>
<para>Pointer to position where final result is written to </para>
</entry>
                            </row>
                            <row>
<entry>__bound</entry><entry>
<para>Maximum number of elements processed (e. g. for std::count_n()). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>User-supplied functor (that may contain a part of the result). </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a12c48efb47ea3e00a7ef666d595ae185_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a12c48efb47ea3e00a7ef666d595ae185_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a6a5228179a033ede58cd143f66cdf354"/><section>
    <title>__for_each_template_random_access_omp_loop()</title>
<indexterm><primary>__for_each_template_random_access_omp_loop</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__for_each_template_random_access_omp_loop</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </computeroutput><para><computeroutput>_Op __gnu_parallel::__for_each_template_random_access_omp_loop (_RAIter __begin, _RAIter __end, _Op __o, _Fu &amp; __f, _Red __r, _Result __base, _Result &amp; __output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</computeroutput></para><para>

<para>Embarrassingly parallel algorithm for random access iterators, using an OpenMP for loop. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__o</entry><entry>
<para>User-supplied functor (comparator, predicate, adding functor, etc.). </para>
</entry>
                            </row>
                            <row>
<entry>__f</entry><entry>
<para>Functor to <emphasis>process</emphasis> an element with __op (depends on desired functionality, e. g. for <link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each()</link>, ...). </para>
</entry>
                            </row>
                            <row>
<entry>__r</entry><entry>
<para>Functor to <emphasis>add</emphasis> a single __result to the already processed elements (depends on functionality). </para>
</entry>
                            </row>
                            <row>
<entry>__base</entry><entry>
<para>Base value for reduction. </para>
</entry>
                            </row>
                            <row>
<entry>__output</entry><entry>
<para>Pointer to position where final result is written to </para>
</entry>
                            </row>
                            <row>
<entry>__bound</entry><entry>
<para>Maximum number of elements processed (e. g. for std::count_n()). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>User-supplied functor (that may contain a part of the result). </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a6a5228179a033ede58cd143f66cdf354_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a6a5228179a033ede58cd143f66cdf354_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1adfc9f0a346a7f323e8a3ba07b772587d"/><section>
    <title>__for_each_template_random_access_omp_loop_static()</title>
<indexterm><primary>__for_each_template_random_access_omp_loop_static</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__for_each_template_random_access_omp_loop_static</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </computeroutput><para><computeroutput>_Op __gnu_parallel::__for_each_template_random_access_omp_loop_static (_RAIter __begin, _RAIter __end, _Op __o, _Fu &amp; __f, _Red __r, _Result __base, _Result &amp; __output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</computeroutput></para><para>

<para>Embarrassingly parallel algorithm for random access iterators, using an OpenMP for loop with static scheduling. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__o</entry><entry>
<para>User-supplied functor (comparator, predicate, adding functor, ...). </para>
</entry>
                            </row>
                            <row>
<entry>__f</entry><entry>
<para>Functor to <emphasis>process</emphasis> an element with __op (depends on desired functionality, e. g. for <link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each()</link>, ...). </para>
</entry>
                            </row>
                            <row>
<entry>__r</entry><entry>
<para>Functor to <emphasis>add</emphasis> a single __result to the already processed __elements (depends on functionality). </para>
</entry>
                            </row>
                            <row>
<entry>__base</entry><entry>
<para>Base value for reduction. </para>
</entry>
                            </row>
                            <row>
<entry>__output</entry><entry>
<para>Pointer to position where final result is written to </para>
</entry>
                            </row>
                            <row>
<entry>__bound</entry><entry>
<para>Maximum number of elements processed (e. g. for std::count_n()). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>User-supplied functor (that may contain a part of the result). </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_adfc9f0a346a7f323e8a3ba07b772587d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a14bdca2e9c62cde7dd8478d972f60272"/><section>
    <title>__for_each_template_random_access_workstealing()</title>
<indexterm><primary>__for_each_template_random_access_workstealing</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__for_each_template_random_access_workstealing</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Op , typename _Fu , typename _Red , typename _Result &gt; </computeroutput><para><computeroutput>_Op __gnu_parallel::__for_each_template_random_access_workstealing (_RAIter __begin, _RAIter __end, _Op __op, _Fu &amp; __f, _Red __r, _Result __base, _Result &amp; __output, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __bound)</computeroutput></para><para>

<para>Work stealing algorithm for random access iterators. </para>
</para>

<para>Uses O(1) additional memory. Synchronization at job lists is done with atomic operations. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of element sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__op</entry><entry>
<para>User-supplied functor (comparator, predicate, adding functor, ...). </para>
</entry>
                            </row>
                            <row>
<entry>__f</entry><entry>
<para>Functor to <emphasis>process</emphasis> an element with __op (depends on desired functionality, e. g. for <link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">std::for_each()</link>, ...). </para>
</entry>
                            </row>
                            <row>
<entry>__r</entry><entry>
<para>Functor to <emphasis>add</emphasis> a single __result to the already processed elements (depends on functionality). </para>
</entry>
                            </row>
                            <row>
<entry>__base</entry><entry>
<para>Base value for reduction. </para>
</entry>
                            </row>
                            <row>
<entry>__output</entry><entry>
<para>Pointer to position where final result is written to </para>
</entry>
                            </row>
                            <row>
<entry>__bound</entry><entry>
<para>Maximum number of elements processed (e. g. for std::count_n()). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>User-supplied functor (that may contain a part of the result). </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a14bdca2e9c62cde7dd8478d972f60272_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a14bdca2e9c62cde7dd8478d972f60272_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281"/><section>
    <title>__get_max_threads()</title>
<indexterm><primary>__get_max_threads</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__get_max_threads</secondary></indexterm>
<para><computeroutput><link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __gnu_parallel::__get_max_threads ( )<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aa72851b809c2b314bc09580c3512f281_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aa72851b809c2b314bc09580c3512f281_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea"/><section>
    <title>__is_parallel()</title>
<indexterm><primary>__is_parallel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__is_parallel</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_parallel::__is_parallel (const <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> __p)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a8c63a760ea14f4f5c43aa39f36c0e8ea_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a34e76513fa46ae5c7bc8c45677289112"/><section>
    <title>__is_sorted()</title>
<indexterm><primary>__is_sorted</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__is_sorted</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __gnu_parallel::__is_sorted (_IIter __begin, _IIter __end, _Compare __comp)</computeroutput></para><para>

<para>Check whether <computeroutput></computeroutput>[__begin, <computeroutput>__end</computeroutput>) is sorted according to <computeroutput>__comp</computeroutput>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><computeroutput>true</computeroutput> if sorted, <computeroutput>false</computeroutput> otherwise. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a34e76513fa46ae5c7bc8c45677289112_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a74914ea59d68887b517e12c90189dbcd"/><section>
    <title>__median_of_three_iterators()</title>
<indexterm><primary>__median_of_three_iterators</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__median_of_three_iterators</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter __gnu_parallel::__median_of_three_iterators (_RAIter __a, _RAIter __b, _RAIter __c, _Compare __comp)</computeroutput></para><para>

<para>Compute the median of three referenced elements, according to <computeroutput>__comp</computeroutput>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__a</entry><entry>
<para>First iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__b</entry><entry>
<para>Second iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__c</entry><entry>
<para>Third iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a74914ea59d68887b517e12c90189dbcd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a0059cd13cc6ab70692f8309ad92cb548"/><section>
    <title>__merge_advance()</title>
<indexterm><primary>__merge_advance</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__merge_advance</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__merge_advance (_RAIter1 &amp; __begin1, _RAIter1 __end1, _RAIter2 &amp; __begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</para>

<para>The <computeroutput>__begin</computeroutput> iterators are advanced accordingly, they might not reach <computeroutput>__end</computeroutput>, in contrast to the usual variant. Static switch on whether to use the conditional-move variant. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin1</entry><entry>
<para>Begin iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end1</entry><entry>
<para>End iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__begin2</entry><entry>
<para>Begin iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end2</entry><entry>
<para>End iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Target begin iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__max_length</entry><entry>
<para>Maximum number of elements to merge. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Output end iterator. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a0059cd13cc6ab70692f8309ad92cb548_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a0059cd13cc6ab70692f8309ad92cb548_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a8deacd343b40dc77deeb1a8e515e7358"/><section>
    <title>__merge_advance_movc()</title>
<indexterm><primary>__merge_advance_movc</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__merge_advance_movc</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__merge_advance_movc (_RAIter1 &amp; __begin1, _RAIter1 __end1, _RAIter2 &amp; __begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)</computeroutput></para><para>

<para>Merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</para>

<para>The <computeroutput>__begin</computeroutput> iterators are advanced accordingly, they might not reach <computeroutput>__end</computeroutput>, in contrast to the usual variant. Specially designed code should allow the compiler to generate conditional moves instead of branches. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin1</entry><entry>
<para>Begin iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end1</entry><entry>
<para>End iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__begin2</entry><entry>
<para>Begin iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end2</entry><entry>
<para>End iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Target begin iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__max_length</entry><entry>
<para>Maximum number of elements to merge. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Output end iterator. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a8deacd343b40dc77deeb1a8e515e7358_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a8deacd343b40dc77deeb1a8e515e7358_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a9a83f26ee291502fd0ccf83a566817c7"/><section>
    <title>__merge_advance_usual()</title>
<indexterm><primary>__merge_advance_usual</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__merge_advance_usual</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter1 , typename _RAIter2 , typename _OutputIterator , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__merge_advance_usual (_RAIter1 &amp; __begin1, _RAIter1 __end1, _RAIter2 &amp; __begin2, _RAIter2 __end2, _OutputIterator __target, _DifferenceTp __max_length, _Compare __comp)</computeroutput></para><para>

<para>Merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</para>

<para>The <computeroutput>__begin</computeroutput> iterators are advanced accordingly, they might not reach <computeroutput>__end</computeroutput>, in contrast to the usual variant. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin1</entry><entry>
<para>Begin iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end1</entry><entry>
<para>End iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__begin2</entry><entry>
<para>Begin iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end2</entry><entry>
<para>End iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Target begin iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__max_length</entry><entry>
<para>Maximum number of elements to merge. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Output end iterator. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a9a83f26ee291502fd0ccf83a566817c7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ac4196b48ff7ecf5ca0f8f2cdee8681c5"/><section>
    <title>__parallel_merge_advance()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__parallel_merge_advance</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_merge_advance</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter1 , typename _RAIter3 , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::__parallel_merge_advance (_RAIter1 &amp; __begin1, _RAIter1 __end1, _RAIter1 &amp; __begin2, _RAIter1 __end2, _RAIter3 __target, typename std::iterator_traits&lt; _RAIter1 &gt;::difference_type __max_length, _Compare __comp)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parallel merge routine being able to merge only the <computeroutput>__max_length</computeroutput> smallest elements. </para>
</para>

<para>The <computeroutput>__begin</computeroutput> iterators are advanced accordingly, they might not reach <computeroutput>__end</computeroutput>, in contrast to the usual variant. The functionality is projected onto parallel_multiway_merge. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin1</entry><entry>
<para>Begin iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end1</entry><entry>
<para>End iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__begin2</entry><entry>
<para>Begin iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end2</entry><entry>
<para>End iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Target begin iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__max_length</entry><entry>
<para>Maximum number of elements to merge. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Output end iterator. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac4196b48ff7ecf5ca0f8f2cdee8681c5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1af1626ed7bbe2eb745a31f18728d73f4e"/><section>
    <title>__parallel_merge_advance()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__parallel_merge_advance</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_merge_advance</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter1 , typename _RAIter2 , typename _RAIter3 , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::__parallel_merge_advance (_RAIter1 &amp; __begin1, _RAIter1 __end1, _RAIter2 &amp; __begin2, _RAIter2 __end2, _RAIter3 __target, typename std::iterator_traits&lt; _RAIter1 &gt;::difference_type __max_length, _Compare __comp)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Merge routine fallback to sequential in case the iterators of the two input sequences are of different type. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin1</entry><entry>
<para>Begin iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end1</entry><entry>
<para>End iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__begin2</entry><entry>
<para>Begin iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end2</entry><entry>
<para>End iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Target begin iterator. </para>
</entry>
                            </row>
                            <row>
<entry>__max_length</entry><entry>
<para>Maximum number of elements to merge. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Output end iterator. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af1626ed7bbe2eb745a31f18728d73f4e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af1626ed7bbe2eb745a31f18728d73f4e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a1567c37a7562eaee17d13ebda1172586"/><section>
    <title>__parallel_nth_element()</title>
<indexterm><primary>__parallel_nth_element</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_nth_element</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_nth_element (_RAIter __begin, _RAIter __nth, _RAIter __end, _Compare __comp)</computeroutput></para><para>

<para>Parallel implementation of <link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">std::nth_element()</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__nth</entry><entry>
<para>_Iterator of element that must be in position afterwards. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a1567c37a7562eaee17d13ebda1172586_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a1567c37a7562eaee17d13ebda1172586_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1abe60c5cc3788e1b1602175af0057d3f8"/><section>
    <title>__parallel_partial_sort()</title>
<indexterm><primary>__parallel_partial_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_partial_sort</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_partial_sort (_RAIter __begin, _RAIter __middle, _RAIter __end, _Compare __comp)</computeroutput></para><para>

<para>Parallel implementation of <link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">std::partial_sort()</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__middle</entry><entry>
<para>Sort until this position. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_abe60c5cc3788e1b1602175af0057d3f8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_abe60c5cc3788e1b1602175af0057d3f8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a0cf4a05b6f849cae06f9fb6098eb0628"/><section>
    <title>__parallel_partial_sum()</title>
<indexterm><primary>__parallel_partial_sum</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_partial_sum</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _BinaryOperation &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_partial_sum (_IIter __begin, _IIter __end, _OutputIterator __result, _BinaryOperation __bin_op)</computeroutput></para><para>

<para>Parallel partial sum front-__end. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__result</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__bin_op</entry><entry>
<para>Associative binary function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a0cf4a05b6f849cae06f9fb6098eb0628_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1adeded88310546a7c54d73464bee998e2"/><section>
    <title>__parallel_partial_sum_basecase()</title>
<indexterm><primary>__parallel_partial_sum_basecase</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_partial_sum_basecase</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _BinaryOperation &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_partial_sum_basecase (_IIter __begin, _IIter __end, _OutputIterator __result, _BinaryOperation __bin_op, typename std::iterator_traits&lt; _IIter &gt;::value_type __value)</computeroutput></para><para>

<para>Base case prefix sum routine. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__result</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__bin_op</entry><entry>
<para>Associative binary function. </para>
</entry>
                            </row>
                            <row>
<entry>__value</entry><entry>
<para>Start value. Must be passed since the neutral element is unknown in general. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_adeded88310546a7c54d73464bee998e2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a63017e821c2b4ff9f90c3641bc45f001"/><section>
    <title>__parallel_partial_sum_linear()</title>
<indexterm><primary>__parallel_partial_sum_linear</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_partial_sum_linear</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _BinaryOperation &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_partial_sum_linear (_IIter __begin, _IIter __end, _OutputIterator __result, _BinaryOperation __bin_op, typename std::iterator_traits&lt; _IIter &gt;::difference_type __n)</computeroutput></para><para>

<para>Parallel partial sum implementation, two-phase approach, no recursion. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__result</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__bin_op</entry><entry>
<para>Associative binary function. </para>
</entry>
                            </row>
                            <row>
<entry>__n</entry><entry>
<para>Length of sequence. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a63017e821c2b4ff9f90c3641bc45f001_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a63017e821c2b4ff9f90c3641bc45f001_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ac870af1d69405f2f53cd7a96e1d92348"/><section>
    <title>__parallel_partition()</title>
<indexterm><primary>__parallel_partition</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_partition</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Predicate &gt; </computeroutput><para><computeroutput>std::iterator_traits&lt; _RAIter &gt;::difference_type __gnu_parallel::__parallel_partition (_RAIter __begin, _RAIter __end, _Predicate __pred, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>Parallel implementation of <link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">std::partition</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence to split. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence to split. </para>
</entry>
                            </row>
                            <row>
<entry>__pred</entry><entry>
<para>Partition predicate, possibly including some kind of pivot. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Maximum number of threads to use for this task. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of elements not fulfilling the predicate. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac870af1d69405f2f53cd7a96e1d92348_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac870af1d69405f2f53cd7a96e1d92348_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342"/><section>
    <title>__parallel_random_shuffle()</title>
<indexterm><primary>__parallel_random_shuffle</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_random_shuffle</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_random_shuffle (_RAIter __begin, _RAIter __end, _RandomNumberGenerator __rng = <computeroutput><link linkend="_class____gnu__parallel_1_1___random_number">_RandomNumber</link>()</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parallel random public call. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__rng</entry><entry>
<para>Random number generator to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a6e78b59cb50c8e14ebf6990016af7342_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a6e78b59cb50c8e14ebf6990016af7342_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a9152bade9629217427f065780bc3f4c2"/><section>
    <title>__parallel_random_shuffle_drs()</title>
<indexterm><primary>__parallel_random_shuffle_drs</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_random_shuffle_drs</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_random_shuffle_drs (_RAIter __begin, _RAIter __end, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __n, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, _RandomNumberGenerator &amp; __rng)</computeroutput></para><para>

<para><link linkend="_class_main">Main</link> parallel random shuffle step. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__n</entry><entry>
<para>Length of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads to use. </para>
</entry>
                            </row>
                            <row>
<entry>__rng</entry><entry>
<para>Random number generator to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a9152bade9629217427f065780bc3f4c2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a9152bade9629217427f065780bc3f4c2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ab52b56076dd965bea099a7187e621d0b"/><section>
    <title>__parallel_random_shuffle_drs_pu()</title>
<indexterm><primary>__parallel_random_shuffle_drs_pu</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_random_shuffle_drs_pu</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_random_shuffle_drs_pu (<link linkend="_struct____gnu__parallel_1_1___d_r_s_sorter_p_u">_DRSSorterPU</link>&lt; _RAIter, _RandomNumberGenerator &gt; * __pus)</computeroutput></para><para>

<para>Random shuffle code executed by each thread. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__pus</entry><entry>
<para>Array of thread-local data records. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ab52b56076dd965bea099a7187e621d0b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ab52b56076dd965bea099a7187e621d0b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1abb75bc882413dc8cba7fce93c5eaaaf0"/><section>
    <title>__parallel_set_difference()</title>
<indexterm><primary>__parallel_set_difference</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_set_difference</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_set_difference (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_abb75bc882413dc8cba7fce93c5eaaaf0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_abb75bc882413dc8cba7fce93c5eaaaf0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aa2d25a01058104978680d0b5d934b54f"/><section>
    <title>__parallel_set_intersection()</title>
<indexterm><primary>__parallel_set_intersection</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_set_intersection</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_set_intersection (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aa2d25a01058104978680d0b5d934b54f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aa2d25a01058104978680d0b5d934b54f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ad6dc994e2f7245b108300cc529ee7410"/><section>
    <title>__parallel_set_operation()</title>
<indexterm><primary>__parallel_set_operation</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_set_operation</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _Operation &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_set_operation (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Operation __op)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ad6dc994e2f7245b108300cc529ee7410_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ad6dc994e2f7245b108300cc529ee7410_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a567012d512340614386402b7e3234ec6"/><section>
    <title>__parallel_set_symmetric_difference()</title>
<indexterm><primary>__parallel_set_symmetric_difference</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_set_symmetric_difference</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_set_symmetric_difference (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a567012d512340614386402b7e3234ec6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a567012d512340614386402b7e3234ec6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a56bac3b8498aadcd3ce073422f0b9822"/><section>
    <title>__parallel_set_union()</title>
<indexterm><primary>__parallel_set_union</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_set_union</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _OutputIterator , typename _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_set_union (_IIter __begin1, _IIter __end1, _IIter __begin2, _IIter __end2, _OutputIterator __result, _Compare __comp)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a56bac3b8498aadcd3ce073422f0b9822_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a56bac3b8498aadcd3ce073422f0b9822_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a05674fa7702fc8a86b415dc193dcfd9a"/><section>
    <title>__parallel_sort()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare , typename <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">_Parallelism</link> __parallelism)</computeroutput></para></section>
<anchor xml:id="_namespace____gnu__parallel_1a000f037b08d237d140dd6144a11fb73f"/><section>
    <title>__parallel_sort()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1balanced__quicksort__tag">balanced_quicksort_tag</link> __parallelism)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose balanced quicksort for parallel sorting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__stable</entry><entry>
<para>Sort stable. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a000f037b08d237d140dd6144a11fb73f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1af2c2fb5ed2754de7c1acc336b62b57b0"/><section>
    <title>__parallel_sort()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __parallelism)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose multiway mergesort with exact splitting, for parallel sorting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__stable</entry><entry>
<para>Sort stable. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af2c2fb5ed2754de7c1acc336b62b57b0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ac609a343c5522586ce1561c1390fab46"/><section>
    <title>__parallel_sort()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__exact__tag">multiway_mergesort_exact_tag</link> __parallelism)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose multiway mergesort with exact splitting, for parallel sorting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__stable</entry><entry>
<para>Sort stable. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac609a343c5522586ce1561c1390fab46_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a81d9cc449b9b4122d5f4471dfdf02a78"/><section>
    <title>__parallel_sort()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__sampling__tag">multiway_mergesort_sampling_tag</link> __parallelism)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose multiway mergesort with splitting by sampling, for parallel sorting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__stable</entry><entry>
<para>Sort stable. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a81d9cc449b9b4122d5f4471dfdf02a78_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a1edbc983766e29af55322f9c983277ac"/><section>
    <title>__parallel_sort()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1multiway__mergesort__tag">multiway_mergesort_tag</link> __parallelism)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose multiway mergesort, splitting variant at run-time, for parallel sorting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__stable</entry><entry>
<para>Sort stable. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a1edbc983766e29af55322f9c983277ac_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aa47b469dd82347dd63c3996eda2e237b"/><section>
    <title>__parallel_sort()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __parallelism)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose a parallel sorting algorithm. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__stable</entry><entry>
<para>Sort stable. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aa47b469dd82347dd63c3996eda2e237b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aceaaa622c34d2f28ba6bf79241fcee36"/><section>
    <title>__parallel_sort()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>__parallel_sort</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1quicksort__tag">quicksort_tag</link> __parallelism)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose quicksort for parallel sorting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__stable</entry><entry>
<para>Sort stable. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aceaaa622c34d2f28ba6bf79241fcee36_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ac416a1c7e347b429bbf7a8fb17e847b2"/><section>
    <title>__parallel_sort_qs()</title>
<indexterm><primary>__parallel_sort_qs</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort_qs</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort_qs (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>Unbalanced quicksort main call. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator input sequence, ignored. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads that are allowed to work on this part. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac416a1c7e347b429bbf7a8fb17e847b2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac416a1c7e347b429bbf7a8fb17e847b2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a06c506308856b684737d24944a93a42e"/><section>
    <title>__parallel_sort_qs_conquer()</title>
<indexterm><primary>__parallel_sort_qs_conquer</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort_qs_conquer</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort_qs_conquer (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>Unbalanced quicksort conquer step. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads that are allowed to work on this part. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a06c506308856b684737d24944a93a42e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a06c506308856b684737d24944a93a42e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a67cbf5b9027d7c9c4f80f80ba104cf99"/><section>
    <title>__parallel_sort_qs_divide()</title>
<indexterm><primary>__parallel_sort_qs_divide</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort_qs_divide</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput>std::iterator_traits&lt; _RAIter &gt;::difference_type __gnu_parallel::__parallel_sort_qs_divide (_RAIter __begin, _RAIter __end, _Compare __comp, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __pivot_rank, typename std::iterator_traits&lt; _RAIter &gt;::difference_type __num_samples, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>Unbalanced quicksort divide step. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__pivot_rank</entry><entry>
<para>Desired __rank of the pivot. </para>
</entry>
                            </row>
                            <row>
<entry>__num_samples</entry><entry>
<para>Choose pivot from that many samples. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads that are allowed to work on this part. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a67cbf5b9027d7c9c4f80f80ba104cf99_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a67cbf5b9027d7c9c4f80f80ba104cf99_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a4093dd098b32542e3d3f43ebd4c6f940"/><section>
    <title>__parallel_sort_qsb()</title>
<indexterm><primary>__parallel_sort_qsb</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_sort_qsb</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__parallel_sort_qsb (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>Top-level quicksort routine. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads that are allowed to work on this part. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a4093dd098b32542e3d3f43ebd4c6f940_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a4093dd098b32542e3d3f43ebd4c6f940_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a3b3bd19508b4e34708a1dc647f5bc131"/><section>
    <title>__parallel_unique_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__parallel_unique_copy</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_unique_copy</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_unique_copy (_IIter __first, _IIter __last, _OutputIterator __result)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parallel <link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">std::unique_copy()</link>, without explicit equality predicate. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__result</entry><entry>
<para>Begin iterator of result __sequence. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of result __sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a3b3bd19508b4e34708a1dc647f5bc131_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a15f31ee1c15e180d0d838571cd6c8b24"/><section>
    <title>__parallel_unique_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__parallel_unique_copy</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__parallel_unique_copy</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , class _OutputIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_OutputIterator __gnu_parallel::__parallel_unique_copy (_IIter __first, _IIter __last, _OutputIterator __result, _BinaryPredicate __binary_pred)</computeroutput></para><para>

<para>Parallel <link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">std::unique_copy()</link>, w/__o explicit equality predicate. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__first</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__last</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__result</entry><entry>
<para>Begin iterator of result __sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__binary_pred</entry><entry>
<para>Equality predicate. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of result __sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a15f31ee1c15e180d0d838571cd6c8b24_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a15f31ee1c15e180d0d838571cd6c8b24_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a8d9c5686c4621822c7c3cdd015f7e693"/><section>
    <title>__qsb_conquer()</title>
<indexterm><primary>__qsb_conquer</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__qsb_conquer</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__qsb_conquer (<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local">_QSBThreadLocal</link>&lt; _RAIter &gt; ** __tls, _RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __iam, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __parent_wait)</computeroutput></para><para>

<para>Quicksort conquer step. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__tls</entry><entry>
<para>Array of thread-local storages. </para>
</entry>
                            </row>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__iam</entry><entry>
<para>Number of the thread processing this function. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads that are allowed to work on this part. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a8d9c5686c4621822c7c3cdd015f7e693_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a8d9c5686c4621822c7c3cdd015f7e693_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1af5df990f9c6b42ec71b0b3245efd8e56"/><section>
    <title>__qsb_divide()</title>
<indexterm><primary>__qsb_divide</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__qsb_divide</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput>std::iterator_traits&lt; _RAIter &gt;::difference_type __gnu_parallel::__qsb_divide (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>Balanced quicksort divide step. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of subsequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads that are allowed to work on this part. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Precondition</title>

<para><computeroutput></computeroutput>(__end-__begin)&gt;=1 </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af5df990f9c6b42ec71b0b3245efd8e56_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af5df990f9c6b42ec71b0b3245efd8e56_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a7565d258aacb02328cef6eb2781ab711"/><section>
    <title>__qsb_local_sort_with_helping()</title>
<indexterm><primary>__qsb_local_sort_with_helping</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__qsb_local_sort_with_helping</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__qsb_local_sort_with_helping (<link linkend="_struct____gnu__parallel_1_1___q_s_b_thread_local">_QSBThreadLocal</link>&lt; _RAIter &gt; ** __tls, _Compare &amp; __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __iam, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __wait)</computeroutput></para><para>

<para>Quicksort step doing load-balanced local sort. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__tls</entry><entry>
<para>Array of thread-local storages. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__iam</entry><entry>
<para>Number of the thread processing this function. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a7565d258aacb02328cef6eb2781ab711_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a7565d258aacb02328cef6eb2781ab711_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a06421834042f49edbb2abb2dd931315d"/><section>
    <title>__random_number_pow2()</title>
<indexterm><primary>__random_number_pow2</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__random_number_pow2</secondary></indexterm>
<computeroutput>template&lt;typename _RandomNumberGenerator &gt; </computeroutput><para><computeroutput>int __gnu_parallel::__random_number_pow2 (int __logp, _RandomNumberGenerator &amp; __rng)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Generate a random number in <computeroutput></computeroutput>[0,2^__logp). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__logp</entry><entry>
<para>Logarithm (basis 2) of the upper range __bound. </para>
</entry>
                            </row>
                            <row>
<entry>__rng</entry><entry>
<para>Random number generator to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a06421834042f49edbb2abb2dd931315d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ae8e1f6dc07de01f28bf591339cf8aa9c"/><section>
    <title>__rd_log2()</title>
<indexterm><primary>__rd_log2</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__rd_log2</secondary></indexterm>
<computeroutput>template&lt;typename _Size &gt; </computeroutput><para><computeroutput>_Size __gnu_parallel::__rd_log2 (_Size __n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Calculates the rounded-down logarithm of <computeroutput>__n</computeroutput> for base 2. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__n</entry><entry>
<para>Argument. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Returns 0 for any argument &lt;1. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ae8e1f6dc07de01f28bf591339cf8aa9c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a9105a85041ac81dba62d60dc669ec169"/><section>
    <title>__round_up_to_pow2()</title>
<indexterm><primary>__round_up_to_pow2</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__round_up_to_pow2</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp __gnu_parallel::__round_up_to_pow2 (_Tp __x)</computeroutput></para><para>

<para>Round up to the next greater power of 2. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__x</entry><entry>
<para>_Integer to round up </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a9105a85041ac81dba62d60dc669ec169_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a9105a85041ac81dba62d60dc669ec169_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1af1e654f03e48e80a0c73db7ad88e8a86"/><section>
    <title>__search_template()</title>
<indexterm><primary>__search_template</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__search_template</secondary></indexterm>
<computeroutput>template&lt;typename __RAIter1 , typename __RAIter2 , typename _Pred &gt; </computeroutput><para><computeroutput>__RAIter1 __gnu_parallel::__search_template (__RAIter1 __begin1, __RAIter1 __end1, __RAIter2 __begin2, __RAIter2 __end2, _Pred __pred)</computeroutput></para><para>

<para>Parallel <link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">std::search</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin1</entry><entry>
<para>Begin iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end1</entry><entry>
<para>End iterator of first sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__begin2</entry><entry>
<para>Begin iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end2</entry><entry>
<para>End iterator of second sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__pred</entry><entry>
<para>Find predicate. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Place of finding in first sequences. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af1e654f03e48e80a0c73db7ad88e8a86_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_af1e654f03e48e80a0c73db7ad88e8a86_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a5ccf0d17d06a0cdd449939227e55bd9d"/><section>
    <title>__sequential_multiway_merge()</title>
<indexterm><primary>__sequential_multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__sequential_multiway_merge</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::__sequential_multiway_merge (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits&lt; typename std::iterator_traits&lt; _RAIterIterator &gt;::value_type::first_type &gt;::value_type &amp; __sentinel, _DifferenceTp __length, _Compare __comp)</computeroutput></para><para>

<para>Sequential multi-way merging switch. </para>
</para>

<para>The _GLIBCXX_PARALLEL_DECISION is based on the branching factor and runtime settings. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>Begin iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>End iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, possibly larger than the number of elements available. </para>
</entry>
                            </row>
                            <row>
<entry>__sentinel</entry><entry>
<para>The sequences have __a __sentinel element. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a5ccf0d17d06a0cdd449939227e55bd9d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a5ccf0d17d06a0cdd449939227e55bd9d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868"/><section>
    <title>__sequential_random_shuffle()</title>
<indexterm><primary>__sequential_random_shuffle</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__sequential_random_shuffle</secondary></indexterm>
<computeroutput>template&lt;typename _RAIter , typename _RandomNumberGenerator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__sequential_random_shuffle (_RAIter __begin, _RAIter __end, _RandomNumberGenerator &amp; __rng)</computeroutput></para><para>

<para>Sequential cache-efficient random shuffle. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__rng</entry><entry>
<para>Random number generator to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aa9ee237cbbdd03ed217714a05e5a8868_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aa9ee237cbbdd03ed217714a05e5a8868_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1adf42868b36ffd42054d85449f63b12aa"/><section>
    <title>__shrink()</title>
<indexterm><primary>__shrink</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__shrink</secondary></indexterm>
<computeroutput>template&lt;typename _IIter &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__shrink (std::vector&lt; _IIter &gt; &amp; __os_starts, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp; __count_to_two, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp; __range_length)</computeroutput></para><para>

<para>Combines two ranges into one and thus halves the number of ranges. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__os_starts</entry><entry>
<para>Start positions worked on (oversampled). </para>
</entry>
                            </row>
                            <row>
<entry>__count_to_two</entry><entry>
<para>Counts up to 2. </para>
</entry>
                            </row>
                            <row>
<entry>__range_length</entry><entry>
<para>Current length of a chunk. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_adf42868b36ffd42054d85449f63b12aa_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ade684b015a28793b63a9e8f14c096066"/><section>
    <title>__shrink_and_double()</title>
<indexterm><primary>__shrink_and_double</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__shrink_and_double</secondary></indexterm>
<computeroutput>template&lt;typename _IIter &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__shrink_and_double (std::vector&lt; _IIter &gt; &amp; __os_starts, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp; __count_to_two, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> &amp; __range_length, const <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __make_twice)</computeroutput></para><para>

<para>Shrinks and doubles the ranges. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__os_starts</entry><entry>
<para>Start positions worked on (oversampled). </para>
</entry>
                            </row>
                            <row>
<entry>__count_to_two</entry><entry>
<para>Counts up to 2. </para>
</entry>
                            </row>
                            <row>
<entry>__range_length</entry><entry>
<para>Current length of a chunk. </para>
</entry>
                            </row>
                            <row>
<entry>__make_twice</entry><entry>
<para>Whether the <computeroutput>__os_starts</computeroutput> is allowed to be grown or not </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ade684b015a28793b63a9e8f14c096066_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ade684b015a28793b63a9e8f14c096066_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aaa76236af73146ae89f726921bc3f2cb"/><section>
    <title>__yield()</title>
<indexterm><primary>__yield</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>__yield</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::__yield ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Yield control to another thread, without waiting for the end of the time slice. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aaa76236af73146ae89f726921bc3f2cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aaa76236af73146ae89f726921bc3f2cb_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ad3be0fcbf87a1f43b3ecd406841e7b0d"/><section>
    <title>list_partition()</title>
<indexterm><primary>list_partition</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>list_partition</secondary></indexterm>
<computeroutput>template&lt;typename _IIter , typename _FunctorType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> __gnu_parallel::list_partition (const _IIter __begin, const _IIter __end, _IIter * __starts, <link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link> * __lengths, const int __num_parts, _FunctorType &amp; __f, int __oversampling = <computeroutput>0</computeroutput>
)</computeroutput></para><para>

<para>Splits a sequence given by input iterators into parts of almost equal size. </para>
</para>

<para>The function needs only one pass over the sequence. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__starts</entry><entry>
<para>Start iterators for the resulting parts, dimension <computeroutput>__num_parts+1</computeroutput>. For convenience, <computeroutput>__starts</computeroutput> <computeroutput></computeroutput>[__num_parts] contains the end iterator of the sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__lengths</entry><entry>
<para>Length of the resulting parts. </para>
</entry>
                            </row>
                            <row>
<entry>__num_parts</entry><entry>
<para>Number of parts to split the sequence into. </para>
</entry>
                            </row>
                            <row>
<entry>__f</entry><entry>
<para>Functor to be applied to each element by traversing __it </para>
</entry>
                            </row>
                            <row>
<entry>__oversampling</entry><entry>
<para>Oversampling factor. If 0, then the partitions will differ in at most <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_118.png"/>
            </imageobject>
</inlinemediaobject>
 elements. Otherwise, the ratio between the longest and the shortest part is bounded by <inlinemediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="form_119.png"/>
            </imageobject>
</inlinemediaobject>
 </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Length of the whole sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ad3be0fcbf87a1f43b3ecd406841e7b0d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a2cade9be3af2e53828fe5a3865d2d9c1"/><section>
    <title>max()</title>
<indexterm><primary>max</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>max</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>const _Tp &amp; __gnu_parallel::max (const _Tp &amp; __a, const _Tp &amp; __b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Equivalent to std::max. </para>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a417ee6b935946ea05ce7c45fd067541a"/><section>
    <title>min()</title>
<indexterm><primary>min</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>min</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>const _Tp &amp; __gnu_parallel::min (const _Tp &amp; __a, const _Tp &amp; __b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Equivalent to std::min. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a417ee6b935946ea05ce7c45fd067541a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ade1f4c5da0794c4f1a09465d4aee6c1d"/><section>
    <title>multiseq_partition()</title>
<indexterm><primary>multiseq_partition</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiseq_partition</secondary></indexterm>
<computeroutput>template&lt;typename _RanSeqs , typename _RankType , typename _RankIterator , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::multiseq_partition (_RanSeqs __begin_seqs, _RanSeqs __end_seqs, _RankType __rank, _RankIterator __begin_offsets, _Compare __comp = <computeroutput>std::less&lt;&#160;typename&#160;std::iterator_traits&lt;typename&#160;std::iterator_traits&lt;_RanSeqs&gt;::value_type::&#160;first_type&gt;::value_type&gt;()</computeroutput>
)</computeroutput></para><para>

<para>Splits several sorted sequences at a certain global __rank, resulting in a splitting point for each sequence. The sequences are passed via a sequence of random-access iterator pairs, none of the sequences may be empty. If there are several equal elements across the split, the ones on the __left side will be chosen from sequences with smaller number. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin_seqs</entry><entry>
<para>Begin of the sequence of iterator pairs. </para>
</entry>
                            </row>
                            <row>
<entry>__end_seqs</entry><entry>
<para>End of the sequence of iterator pairs. </para>
</entry>
                            </row>
                            <row>
<entry>__rank</entry><entry>
<para>The global rank to partition at. </para>
</entry>
                            </row>
                            <row>
<entry>__begin_offsets</entry><entry>
<para>A random-access __sequence __begin where the __result will be stored in. Each element of the sequence is an iterator that points to the first element on the greater part of the respective __sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>The ordering functor, defaults to std::less&lt;_Tp&gt;. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ade1f4c5da0794c4f1a09465d4aee6c1d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ade1f4c5da0794c4f1a09465d4aee6c1d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a68f665a2f83172d9e12b8332ce573d5d"/><section>
    <title>multiseq_selection()</title>
<indexterm><primary>multiseq_selection</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiseq_selection</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _RanSeqs , typename _RankType , typename _Compare &gt; </computeroutput><para><computeroutput>_Tp __gnu_parallel::multiseq_selection (_RanSeqs __begin_seqs, _RanSeqs __end_seqs, _RankType __rank, _RankType &amp; __offset, _Compare __comp = <computeroutput>std::less&lt;_Tp&gt;()</computeroutput>
)</computeroutput></para><para>

<para>Selects the element at a certain global __rank from several sorted sequences. </para>
</para>

<para>The sequences are passed via a sequence of random-access iterator pairs, none of the sequences may be empty. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin_seqs</entry><entry>
<para>Begin of the sequence of iterator pairs. </para>
</entry>
                            </row>
                            <row>
<entry>__end_seqs</entry><entry>
<para>End of the sequence of iterator pairs. </para>
</entry>
                            </row>
                            <row>
<entry>__rank</entry><entry>
<para>The global rank to partition at. </para>
</entry>
                            </row>
                            <row>
<entry>__offset</entry><entry>
<para>The rank of the selected element in the global subsequence of elements equal to the selected element. If the selected element is unique, this number is 0. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>The ordering functor, defaults to std::less. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a68f665a2f83172d9e12b8332ce573d5d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ac25efc956562ab237b7b6cb733060c6a"/><section>
    <title>multiway_merge()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ac25efc956562ab237b7b6cb733060c6a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a8c908c501ec9005517a88a3004ff6a75"/><section>
    <title>multiway_merge()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">__gnu_parallel::sampling_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a8c908c501ec9005517a88a3004ff6a75_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a25294b0a47406aefa9ebc5e0c151d0ce"/><section>
    <title>multiway_merge()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link> )</computeroutput></para><para>

<para>Multiway Merge Frontend. </para>
</para>

<para>Merge the sequences specified by seqs_begin and __seqs_end into __target. __seqs_begin and __seqs_end must point to a sequence of pairs. These pairs must contain an iterator to the beginning of a sequence in their first entry and an iterator the _M_end of the same sequence in their second entry.</para>

<para>Ties are broken arbitrarily. See stable_multiway_merge for a variant that breaks ties by sequence number but is slower.</para>

<para>The first entries of the pairs (i.e. the begin iterators) will be moved forward.</para>

<para>The output sequence has to provide enough space for all elements that are written to it.</para>

<para>This function will merge the input sequences:</para>

<para><itemizedlist>
<listitem>
<para>not stable</para>
</listitem><listitem>
<para>parallel, depending on the input size and Settings</para>
</listitem><listitem>
<para>using sampling for splitting</para>
</listitem><listitem>
<para>not using sentinels</para>
</listitem></itemizedlist>
</para>

<para>Example:</para>

<para><literallayout>
  int sequences[10][10];
  for (int __i = 0; __i &lt; 10; ++__i)
    for (int __j = 0; __i &lt; 10; ++__j)
      sequences[__i][__j] = __j;

  int __out[33];
  std::vector&lt;std::pair&lt;int*&gt; &gt; seqs;
  for (int __i = 0; __i &lt; 10; ++__i)
    { seqs.push(std::make_pair&lt;int*&gt;(sequences[__i],
                                     sequences[__i] + 10)) }

  multiway_merge(seqs.begin(), seqs.end(), __target, std::less&lt;int&gt;(), 33);
</literallayout></para>

<para><formalpara><title>See also</title>

<para><link linkend="_namespace____gnu__parallel_1a27f5da3fdd4d5f56eecd6a078ec7bae2">stable_multiway_merge</link></para>
</formalpara>
<formalpara><title>Precondition</title>

<para>All input sequences must be sorted. </para>

<para>Target must provide enough space to merge out length elements or the number of elements in all sequences, whichever is smaller.</para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>[__target, return __value) contains merged __elements from the input sequences. </para>

<para>return __value - __target = min(__length, number of elements in all
   sequences).</para>
</formalpara>

                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_RAIterPairIterator</entry><entry>
<para>iterator over sequence of pairs of iterators </para>
</entry>
                            </row>
                            <row>
<entry>_RAIterOut</entry><entry>
<para>iterator over target sequence </para>
</entry>
                            </row>
                            <row>
<entry>_DifferenceTp</entry><entry>
<para>difference type for the sequence </para>
</entry>
                            </row>
                            <row>
<entry>_Compare</entry><entry>
<para>strict weak ordering type to compare elements in sequences</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>__begin of sequence __sequence </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>_M_end of sequence __sequence </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>target sequence to merge to. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>strict weak ordering to use for element comparison. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, possibly larger than the number of elements available.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>_M_end iterator of output sequence </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a25294b0a47406aefa9ebc5e0c151d0ce_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a25294b0a47406aefa9ebc5e0c151d0ce_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a4569fbe5bdf414f0970bdc38875cdc2f"/><section>
    <title>multiway_merge()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a4569fbe5bdf414f0970bdc38875cdc2f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a18da5adc61694c1f0c3f7735fa8daf2e"/><section>
    <title>multiway_merge()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag = <computeroutput><link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0)</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a18da5adc61694c1f0c3f7735fa8daf2e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a7ee9d79b73a6f85ae97e472312ba411e"/><section>
    <title>multiway_merge_3_variant()</title>
<indexterm><primary>multiway_merge_3_variant</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_3_variant</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename _RAI, typename _Cp &gt; class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::multiway_merge_3_variant (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)</computeroutput></para><para>

<para>Highly efficient 3-way merging procedure. </para>
</para>

<para>Merging is done with the algorithm implementation described by Peter Sanders. Basically, the idea is to minimize the number of necessary comparison after merging an element. The implementation trick that makes this fast is that the order of the sequences is stored in the instruction pointer (translated into labels in C++).</para>

<para>This works well for merging up to 4 sequences.</para>

<para>Note that making the merging stable does <emphasis>not</emphasis> come at a performance hit.</para>

<para>Whether the merging is done guarded or unguarded is selected by the used iterator class.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>Begin iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>End iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, less equal than the total number of elements available.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ac4af8f9977aa36823357bce35be6c946"/><section>
    <title>multiway_merge_4_variant()</title>
<indexterm><primary>multiway_merge_4_variant</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_4_variant</secondary></indexterm>
<computeroutput>template&lt;template&lt; typename _RAI, typename _Cp &gt; class iterator, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::multiway_merge_4_variant (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)</computeroutput></para><para>

<para>Highly efficient 4-way merging procedure. </para>
</para>

<para>Merging is done with the algorithm implementation described by Peter Sanders. Basically, the idea is to minimize the number of necessary comparison after merging an element. The implementation trick that makes this fast is that the order of the sequences is stored in the instruction pointer (translated into goto labels in C++).</para>

<para>This works well for merging up to 4 sequences.</para>

<para>Note that making the merging stable does <emphasis>not</emphasis> come at a performance hit.</para>

<para>Whether the merging is done guarded or unguarded is selected by the used iterator class.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>Begin iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>End iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, less equal than the total number of elements available.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a567621588e461a8759651e29cd964ab9"/><section>
    <title>multiway_merge_exact_splitting()</title>
<indexterm><primary>multiway_merge_exact_splitting</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_exact_splitting</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::multiway_merge_exact_splitting (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _DifferenceType __length, _DifferenceType __total_length, _Compare __comp, std::vector&lt; std::pair&lt; _DifferenceType, _DifferenceType &gt; &gt; * __pieces)</computeroutput></para><para>

<para>Exact splitting for parallel multiway-merge routine. </para>
</para>

<para>None of the passed sequences may be empty. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a567621588e461a8759651e29cd964ab9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a567621588e461a8759651e29cd964ab9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a150b06a4da2cf1cff673d1b6242c27fa"/><section>
    <title>multiway_merge_loser_tree()</title>
<indexterm><primary>multiway_merge_loser_tree</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_loser_tree</secondary></indexterm>
<computeroutput>template&lt;typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::multiway_merge_loser_tree (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _DifferenceTp __length, _Compare __comp)</computeroutput></para><para>

<para>Multi-way merging procedure for a high branching factor, guarded case. </para>
</para>

<para>This merging variant uses a LoserTree class as selected by <computeroutput>_LT</computeroutput>.</para>

<para>Stability is selected through the used LoserTree class <computeroutput>_LT</computeroutput>.</para>

<para>At least one non-empty sequence is required.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>Begin iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>End iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, less equal than the total number of elements available.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a150b06a4da2cf1cff673d1b6242c27fa_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a686704fa4da0a4fdbc6800fe46048366"/><section>
    <title>multiway_merge_loser_tree_sentinel()</title>
<indexterm><primary>multiway_merge_loser_tree_sentinel</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_loser_tree_sentinel</secondary></indexterm>
<computeroutput>template&lt;typename _UnguardedLoserTree , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::multiway_merge_loser_tree_sentinel (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits&lt; typename std::iterator_traits&lt; _RAIterIterator &gt;::value_type::first_type &gt;::value_type &amp; __sentinel, _DifferenceTp __length, _Compare __comp)</computeroutput></para><para>

<para>Multi-way merging procedure for a high branching factor, requiring sentinels to exist. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_UnguardedLoserTree</entry><entry>
<para>Loser Tree variant to use for the unguarded merging.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>Begin iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>End iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, less equal than the total number of elements available.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a686704fa4da0a4fdbc6800fe46048366_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a686704fa4da0a4fdbc6800fe46048366_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a3ffd0c9da50da6118291d38f95d44b52"/><section>
    <title>multiway_merge_loser_tree_unguarded()</title>
<indexterm><primary>multiway_merge_loser_tree_unguarded</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_loser_tree_unguarded</secondary></indexterm>
<computeroutput>template&lt;typename _LT , typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::multiway_merge_loser_tree_unguarded (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, const typename std::iterator_traits&lt; typename std::iterator_traits&lt; _RAIterIterator &gt;::value_type::first_type &gt;::value_type &amp; __sentinel, _DifferenceTp __length, _Compare __comp)</computeroutput></para><para>

<para>Multi-way merging procedure for a high branching factor, unguarded case. </para>
</para>

<para>Merging is done using the LoserTree class <computeroutput>_LT</computeroutput>.</para>

<para>Stability is selected by the used LoserTrees.</para>

<para><formalpara><title>Precondition</title>

<para>No input will run out of elements during the merge.</para>
</formalpara>

                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>Begin iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>End iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, less equal than the total number of elements available.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a0e39d3891745fd0e244fb125bf34ce8b"/><section>
    <title>multiway_merge_sampling_splitting()</title>
<indexterm><primary>multiway_merge_sampling_splitting</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_sampling_splitting</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, typename _RAIterIterator , typename _Compare , typename _DifferenceType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::multiway_merge_sampling_splitting (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _DifferenceType __length, _DifferenceType __total_length, _Compare __comp, std::vector&lt; std::pair&lt; _DifferenceType, _DifferenceType &gt; &gt; * __pieces)</computeroutput></para><para>

<para>Sampling based splitting for parallel multiway-merge routine. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a0e39d3891745fd0e244fb125bf34ce8b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a0e39d3891745fd0e244fb125bf34ce8b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a5228d191a298cdaa42baacdfc821cc12"/><section>
    <title>multiway_merge_sentinels()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a5228d191a298cdaa42baacdfc821cc12_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a4d6e76ac42b48f0033139352dcb0418f"/><section>
    <title>multiway_merge_sentinels()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link> )</computeroutput></para><para>

<para>Multiway Merge Frontend. </para>
</para>

<para>Merge the sequences specified by seqs_begin and __seqs_end into __target. __seqs_begin and __seqs_end must point to a sequence of pairs. These pairs must contain an iterator to the beginning of a sequence in their first entry and an iterator the _M_end of the same sequence in their second entry.</para>

<para>Ties are broken arbitrarily. See stable_multiway_merge for a variant that breaks ties by sequence number but is slower.</para>

<para>The first entries of the pairs (i.e. the begin iterators) will be moved forward accordingly.</para>

<para>The output sequence has to provide enough space for all elements that are written to it.</para>

<para>This function will merge the input sequences:</para>

<para><itemizedlist>
<listitem>
<para>not stable</para>
</listitem><listitem>
<para>parallel, depending on the input size and Settings</para>
</listitem><listitem>
<para>using sampling for splitting</para>
</listitem><listitem>
<para>using sentinels</para>
</listitem></itemizedlist>
</para>

<para>You have to take care that the element the _M_end iterator points to is readable and contains a value that is greater than any other non-sentinel value in all sequences.</para>

<para>Example:</para>

<para><literallayout>
  int sequences[10][11];
  for (int __i = 0; __i &lt; 10; ++__i)
    for (int __j = 0; __i &lt; 11; ++__j)
      sequences[__i][__j] = __j; // __last one is sentinel!

  int __out[33];
  std::vector&lt;std::pair&lt;int*&gt; &gt; seqs;
  for (int __i = 0; __i &lt; 10; ++__i)
    { seqs.push(std::make_pair&lt;int*&gt;(sequences[__i],
                                     sequences[__i] + 10)) }

  multiway_merge(seqs.begin(), seqs.end(), __target, std::less&lt;int&gt;(), 33);
</literallayout></para>

<para><formalpara><title>Precondition</title>

<para>All input sequences must be sorted. </para>

<para>Target must provide enough space to merge out length elements or the number of elements in all sequences, whichever is smaller. </para>

<para>For each <computeroutput>__i</computeroutput>, <computeroutput>__seqs_begin</computeroutput>[__i].second must be the end marker of the sequence, but also reference the one more __sentinel element.</para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>[__target, return __value) contains merged __elements from the input sequences. </para>

<para>return __value - __target = min(__length, number of elements in all
   sequences).</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_namespace____gnu__parallel_1a907b298f67ecf4627e9db5d8e1e8d8a5">stable_multiway_merge_sentinels</link></para>
</formalpara>

                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_RAIterPairIterator</entry><entry>
<para>iterator over sequence of pairs of iterators </para>
</entry>
                            </row>
                            <row>
<entry>_RAIterOut</entry><entry>
<para>iterator over target sequence </para>
</entry>
                            </row>
                            <row>
<entry>_DifferenceTp</entry><entry>
<para>difference type for the sequence </para>
</entry>
                            </row>
                            <row>
<entry>_Compare</entry><entry>
<para>strict weak ordering type to compare elements in sequences</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>__begin of sequence __sequence </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>_M_end of sequence __sequence </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>target sequence to merge to. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>strict weak ordering to use for element comparison. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, possibly larger than the number of elements available.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>_M_end iterator of output sequence </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a4d6e76ac42b48f0033139352dcb0418f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a4d6e76ac42b48f0033139352dcb0418f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1acb7509d5d4e88c17013e7f7a0fe539d5"/><section>
    <title>multiway_merge_sentinels()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_acb7509d5d4e88c17013e7f7a0fe539d5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1adc0ae12fb2b2ce342e71691226729f1f"/><section>
    <title>multiway_merge_sentinels()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag = <computeroutput><link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0)</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_adc0ae12fb2b2ce342e71691226729f1f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a5db4fbc41fff695834ee6d0cbc91f8c6"/><section>
    <title>multiway_merge_sentinels()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">sampling_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a5db4fbc41fff695834ee6d0cbc91f8c6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a14c854d00d1321cf1ee7f6d12fb955c4"/><section>
    <title>parallel_multiway_merge()</title>
<indexterm><primary>parallel_multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_multiway_merge</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __sentinels, typename _RAIterIterator , typename _RAIter3 , typename _DifferenceTp , typename _Splitter , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIter3 __gnu_parallel::parallel_multiway_merge (_RAIterIterator __seqs_begin, _RAIterIterator __seqs_end, _RAIter3 __target, _Splitter __splitter, _DifferenceTp __length, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>Parallel multi-way merge routine. </para>
</para>

<para>The _GLIBCXX_PARALLEL_DECISION is based on the branching factor and runtime settings.</para>

<para>Must not be called if the number of sequences is 1.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_Splitter</entry><entry>
<para>functor to split input (either __exact or sampling based) </para>
</entry>
                            </row>
                            <row>
<entry>__stable</entry><entry>
<para>Stable merging incurs a performance penalty. </para>
</entry>
                            </row>
                            <row>
<entry>__sentinel</entry><entry>
<para>Ignored.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__seqs_begin</entry><entry>
<para>Begin iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__seqs_end</entry><entry>
<para>End iterator of iterator pair input sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__target</entry><entry>
<para>Begin iterator of output sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__length</entry><entry>
<para>Maximum length to merge, possibly larger than the number of elements available. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>End iterator of output sequence. </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a14c854d00d1321cf1ee7f6d12fb955c4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a14c854d00d1321cf1ee7f6d12fb955c4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ae193ac43730550b537828a117dd2797f"/><section>
    <title>parallel_sort_mwms()</title>
<indexterm><primary>parallel_sort_mwms</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_sort_mwms</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __exact, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::parallel_sort_mwms (_RAIter __begin, _RAIter __end, _Compare __comp, <link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link> __num_threads)</computeroutput></para><para>

<para>PMWMS main call. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__begin</entry><entry>
<para>Begin iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__end</entry><entry>
<para>End iterator of sequence. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                            <row>
<entry>__num_threads</entry><entry>
<para>Number of threads to use. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ae193ac43730550b537828a117dd2797f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aaf84903cd78722fcd19b20ccb69c47e4"/><section>
    <title>parallel_sort_mwms_pu()</title>
<indexterm><primary>parallel_sort_mwms_pu</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>parallel_sort_mwms_pu</secondary></indexterm>
<computeroutput>template&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __stable, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __exact, typename _RAIter , typename _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_parallel::parallel_sort_mwms_pu (<link linkend="_struct____gnu__parallel_1_1___p_m_w_m_s_sorting_data">_PMWMSSortingData</link>&lt; _RAIter &gt; * __sd, _Compare &amp; __comp)</computeroutput></para><para>

<para>PMWMS code executed by each thread. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>__sd</entry><entry>
<para>Pointer to algorithm data. </para>
</entry>
                            </row>
                            <row>
<entry>__comp</entry><entry>
<para>Comparator. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aaf84903cd78722fcd19b20ccb69c47e4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aeb955a1aae5a2ad2e59e5f990625c678"/><section>
    <title>stable_multiway_merge()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aeb955a1aae5a2ad2e59e5f990625c678_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a27f5da3fdd4d5f56eecd6a078ec7bae2"/><section>
    <title>stable_multiway_merge()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link> )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a27f5da3fdd4d5f56eecd6a078ec7bae2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a27f5da3fdd4d5f56eecd6a078ec7bae2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a008a4daae19578fd8b00d789387f039f"/><section>
    <title>stable_multiway_merge()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a008a4daae19578fd8b00d789387f039f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a31162912a5b53056b8971c3ec0e718ba"/><section>
    <title>stable_multiway_merge()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag = <computeroutput><link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0)</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a31162912a5b53056b8971c3ec0e718ba_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a18b727aab25037e289fecb8d9861963a"/><section>
    <title>stable_multiway_merge()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">sampling_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a18b727aab25037e289fecb8d9861963a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1ab4bef8eb5bc6bb03b812eb3246e02de4"/><section>
    <title>stable_multiway_merge_sentinels()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1exact__tag">__gnu_parallel::exact_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_ab4bef8eb5bc6bb03b812eb3246e02de4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a907b298f67ecf4627e9db5d8e1e8d8a5"/><section>
    <title>stable_multiway_merge_sentinels()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link> )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a907b298f67ecf4627e9db5d8e1e8d8a5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a907b298f67ecf4627e9db5d8e1e8d8a5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a9214bff1fbf949614c5f7f7d6fe129c3"/><section>
    <title>stable_multiway_merge_sentinels()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1default__parallel__tag">default_parallel_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a9214bff1fbf949614c5f7f7d6fe129c3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1a5f4a6f141791040bebf482b269b3be2b"/><section>
    <title>stable_multiway_merge_sentinels()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link> __tag = <computeroutput><link linkend="_struct____gnu__parallel_1_1parallel__tag">parallel_tag</link>(0)</computeroutput>
)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_a5f4a6f141791040bebf482b269b3be2b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____gnu__parallel_1aba7d273f820b57f9e0c709dbf68e6ee8"/><section>
    <title>stable_multiway_merge_sentinels()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>stable_multiway_merge_sentinels</primary><secondary>__gnu_parallel</secondary></indexterm>
<indexterm><primary>__gnu_parallel</primary><secondary>stable_multiway_merge_sentinels</secondary></indexterm>
<computeroutput>template&lt;typename _RAIterPairIterator , typename _RAIterOut , typename _DifferenceTp , typename _Compare &gt; </computeroutput><para><computeroutput>_RAIterOut __gnu_parallel::stable_multiway_merge_sentinels (_RAIterPairIterator __seqs_begin, _RAIterPairIterator __seqs_end, _RAIterOut __target, _DifferenceTp __length, _Compare __comp, <link linkend="_struct____gnu__parallel_1_1sampling__tag">sampling_tag</link> __tag)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____gnu__parallel_aba7d273f820b57f9e0c709dbf68e6ee8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
