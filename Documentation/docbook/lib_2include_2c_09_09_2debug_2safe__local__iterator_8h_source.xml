<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2debug_2safe__local__iterator_8h_source" xml:lang="en-US">
<title>safe_local_iterator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/safe_local_iterator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Safe&#32;iterator&#32;implementation&#32;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2011-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_SAFE_LOCAL_ITERATOR_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_SAFE_LOCAL_ITERATOR_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_unordered_base.h&gt;</emphasis>
33 
34 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs,&#32;_Rhs)&#32;\</emphasis>
35 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular()&#32;&amp;&amp;&#32;!_Rhs._M_singular()&#32;&#32;\</emphasis>
36 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(_Lhs.base()&#32;==&#32;_Iterator{}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
37 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Rhs.base()&#32;==&#32;_Iterator{}),&#32;&#32;&#32;&#32;&#32;\</emphasis>
38 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(__msg_iter_compare_bad)&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
39 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(_Lhs,&#32;&quot;lhs&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
40 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(_Rhs,&#32;&quot;rhs&quot;));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
41 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_DEBUG_VERIFY(_Lhs._M_can_compare(_Rhs),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
42 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(__msg_compare_different)&#32;&#32;&#32;&#32;&#32;\</emphasis>
43 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(_Lhs,&#32;&quot;lhs&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
44 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(_Rhs,&#32;&quot;rhs&quot;));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
45 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_DEBUG_VERIFY(_Lhs._M_in_same_bucket(_Rhs),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
46 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(__msg_local_iter_compare_bad)&#32;&#32;&#32;&#32;\</emphasis>
47 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(_Lhs,&#32;&quot;lhs&quot;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
48 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(_Rhs,&#32;&quot;rhs&quot;))</emphasis>
49 
50 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
51 {
63 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_local_iterator
65 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">private</emphasis>&#32;_Iterator
66 &#32;&#32;&#32;&#32;,&#32;<emphasis role="keyword">public</emphasis>&#32;_Safe_local_iterator_base
67 &#32;&#32;&#32;&#32;{
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iterator&#32;_Iter_base;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad7d51ed8396149f6d4d44e9bbf48ddf3">_Safe_local_iterator_base</link>&#32;_Safe_base;
70 
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::size_type&#32;size_type;
72 
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_Iterator&gt;&#32;_Traits;
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::__are_same&lt;
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::_Base::const_local_iterator,
77 &#32;&#32;&#32;&#32;_Iterator&gt;&#32;_IsConstant;
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__conditional_type&lt;_IsConstant::__value,
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::_Base::local_iterator,
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::_Base::const_local_iterator&gt;::__type
82 &#32;&#32;&#32;&#32;&#32;&#32;_OtherIterator;
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b">_Safe_local_iterator</link>&#32;_Self;
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Safe_local_iterator&lt;_OtherIterator,&#32;_Sequence&gt;&#32;_OtherSelf;
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Attach_single
88 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
89 
90 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b">_Safe_local_iterator</link>(_Iterator&#32;__i,&#32;_Safe_sequence_base*&#32;__cont,
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Attach_single)&#32;noexcept
92 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Iter_base(__i)
93 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a8da8a15a449165ca5f17393e82445fd3">_M_attach_single</link>(__cont);&#32;}
94 
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a344cb2a20da7eabdec4971b61c73ad21">iterator_type</link>;
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::iterator_category&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab1f6353bd62e733b828ce45632b990a3">iterator_category</link>;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a7237e8fed6259acf4b24ad7ba40ee48b">value_type</link>;
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::difference_type&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link>;
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link>;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526">pointer</link>;
102 
104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b">_Safe_local_iterator</link>()&#32;noexcept&#32;:&#32;_Iter_base()&#32;{&#32;}
105 
113 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a380abe1aa1ff4af91374084189f86ed0">_Safe_local_iterator</link>(_Iterator&#32;__i,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>*&#32;__cont)
114 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Iter_base(__i),&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base">_Safe_base</link>(__cont,&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8">_S_constant</link>())
115 &#32;&#32;&#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(!this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link>(),
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3a1830abbf7091b2cea1fd12b704dae8e4">__msg_init_singular</link>)
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>));
119 &#32;&#32;&#32;&#32;&#32;&#32;}
120 
124 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a0a7e70d70fe6ebf02a59eb4ed6704642">_Safe_local_iterator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;&#32;__x)&#32;noexcept
125 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Iter_base(__x.base())
126 &#32;&#32;&#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
128 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;408.&#32;Is&#32;vector&lt;reverse_iterator&lt;char*&gt;&#32;&gt;&#32;forbidden?</emphasis>
129 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(!__x._M_singular()
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__x.base()&#32;==&#32;_Iterator(),
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3ab36653416c99ac987a9a1b65a44e086a">__msg_init_copy_singular</link>)
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>)
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__x,&#32;<emphasis role="stringliteral">&quot;other&quot;</emphasis>));
134 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link>(__x._M_sequence);
135 &#32;&#32;&#32;&#32;&#32;&#32;}
136 
141 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a281a8ffa72a96b7599ad892efc6f4367">_Safe_local_iterator</link>(<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;&amp;&#32;__x)&#32;noexcept
142 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Iter_base()
143 &#32;&#32;&#32;&#32;&#32;&#32;{
144 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(!__x._M_singular()
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__x.base()&#32;==&#32;_Iterator(),
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3ab36653416c99ac987a9a1b65a44e086a">__msg_init_copy_singular</link>)
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>)
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__x,&#32;<emphasis role="stringliteral">&quot;other&quot;</emphasis>));
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__cont&#32;=&#32;__x._M_sequence;
150 &#32;&#32;&#32;&#32;__x._M_detach();
151 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>(),&#32;__x.base());
152 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link>(__cont);
153 &#32;&#32;&#32;&#32;&#32;&#32;}
154 
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_MutableIterator&gt;
160 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab45913e372960af8e21c2e246563e815">_Safe_local_iterator</link>(
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt;_MutableIterator,
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;_IsConstant::__value&#32;&amp;&amp;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__are_same&lt;_MutableIterator,&#32;_OtherIterator&gt;::__value,
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sequence&gt;::__type&gt;&amp;&#32;__x)&#32;noexcept
165 &#32;&#32;&#32;&#32;:&#32;_Iter_base(__x.base())
166 &#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;408.&#32;Is&#32;vector&lt;reverse_iterator&lt;char*&gt;&#32;&gt;&#32;forbidden?</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(!__x._M_singular()
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__x.base()&#32;==&#32;_MutableIterator(),
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aced19637a4b5997b67de04678475bf4f">__msg_init_const_singular</link>)
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>)
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__x,&#32;<emphasis role="stringliteral">&quot;other&quot;</emphasis>));
174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link>(__x._M_sequence);
175 &#32;&#32;&#32;&#32;}
176 
180 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;
181 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4370f29684bf7feab310caad4d1ba01f">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;&#32;__x)
182 &#32;&#32;&#32;&#32;&#32;&#32;{
183 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
184 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;408.&#32;Is&#32;vector&lt;reverse_iterator&lt;char*&gt;&#32;&gt;&#32;forbidden?</emphasis>
185 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(!__x._M_singular()
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__x.base()&#32;==&#32;_Iterator(),
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3ab497e4ecc78f9352d54013317523ef0b">__msg_copy_singular</link>)
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>)
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__x,&#32;<emphasis role="stringliteral">&quot;other&quot;</emphasis>));
190 
191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link>&#32;&amp;&amp;&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link>&#32;==&#32;__x._M_sequence)
192 &#32;&#32;&#32;&#32;&#32;&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__scoped_lock&#32;__l(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link>());
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()&#32;=&#32;__x.base();
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad07568d7660eb8b85493b548d10c637a">_M_version</link>&#32;=&#32;__x._M_sequence-&gt;_M_version;
196 &#32;&#32;&#32;&#32;&#32;&#32;}
197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad88baf5072fed556979aaf901b3dfafd">_M_detach</link>();
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()&#32;=&#32;__x.base();
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link>(__x._M_sequence);
202 &#32;&#32;&#32;&#32;&#32;&#32;}
203 
204 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
205 &#32;&#32;&#32;&#32;&#32;&#32;}
206 
211 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;
212 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a1e0306579e4d4782b254f5d5732e078f">operator=</link>(<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(!__x._M_singular()
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__x.base()&#32;==&#32;_Iterator(),
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3ab497e4ecc78f9352d54013317523ef0b">__msg_copy_singular</link>)
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>)
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__x,&#32;<emphasis role="stringliteral">&quot;other&quot;</emphasis>));
219 
220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::__addressof(__x)&#32;==&#32;<emphasis role="keyword">this</emphasis>)
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
222 
223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link>&#32;&amp;&amp;&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link>&#32;==&#32;__x._M_sequence)
224 &#32;&#32;&#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__scoped_lock&#32;__l(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link>());
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()&#32;=&#32;__x.base();
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad07568d7660eb8b85493b548d10c637a">_M_version</link>&#32;=&#32;__x._M_sequence-&gt;_M_version;
228 &#32;&#32;&#32;&#32;&#32;&#32;}
229 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;{
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad88baf5072fed556979aaf901b3dfafd">_M_detach</link>();
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()&#32;=&#32;__x.base();
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link>(__x._M_sequence);
234 &#32;&#32;&#32;&#32;&#32;&#32;}
235 
236 &#32;&#32;&#32;&#32;__x._M_detach();
237 &#32;&#32;&#32;&#32;__x.base()&#32;=&#32;_Iterator();
238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
239 &#32;&#32;&#32;&#32;&#32;&#32;}
240 
245 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link>
246 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a8e237d9370458e65ea6141b677e8e8f8">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
247 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
248 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6aa79a341cb886c9747c9889a3794ed8">_M_dereferenceable</link>(),
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3a96da60345178d10f27431c4c2fed1ad8">__msg_bad_deref</link>)
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>));
251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>();
252 &#32;&#32;&#32;&#32;&#32;&#32;}
253 
258 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
259 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4789f11d5d5c248e478a79f590186f1a">operator-&gt;</link>()<emphasis role="keyword">&#32;const</emphasis>
260 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
261 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6aa79a341cb886c9747c9889a3794ed8">_M_dereferenceable</link>(),
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3a96da60345178d10f27431c4c2fed1ad8">__msg_bad_deref</link>)
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>));
264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>().operator-&gt;();
265 &#32;&#32;&#32;&#32;&#32;&#32;}
266 
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;------&#32;Input&#32;iterator&#32;requirements&#32;------</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;
273 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4341710e5e529c0bb185bc7e9a5926a8">operator++</link>()
274 &#32;&#32;&#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a230223745882ecdae6c0d0c68beb7027">_M_incrementable</link>(),
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3a23cb8dacb530f6e6d3535a0d7c370d10">__msg_bad_inc</link>)
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>));
278 &#32;&#32;&#32;&#32;__gnu_cxx::__scoped_lock&#32;__l(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link>());
279 &#32;&#32;&#32;&#32;++<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>();
280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
281 &#32;&#32;&#32;&#32;&#32;&#32;}
282 
287 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>
288 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a970d20722ad94a43afaa2e4db289f85e">operator++</link>(<emphasis role="keywordtype">int</emphasis>)
289 &#32;&#32;&#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2macros_8h_1abc21d6cf6063d6d47494b08a8f1ba3be">_GLIBCXX_DEBUG_VERIFY</link>(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a230223745882ecdae6c0d0c68beb7027">_M_incrementable</link>(),
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3a23cb8dacb530f6e6d3535a0d7c370d10">__msg_bad_inc</link>)
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="stringliteral">&quot;this&quot;</emphasis>));
293 &#32;&#32;&#32;&#32;__gnu_cxx::__scoped_lock&#32;__l(this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link>());
294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b">_Safe_local_iterator</link>(<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()++,&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link>,
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Attach_single());
296 &#32;&#32;&#32;&#32;&#32;&#32;}
297 
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;------&#32;Utilities&#32;------</emphasis>
299 
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8">_S_constant</link>()
303 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_IsConstant::__value;&#32;}
304 
308 &#32;&#32;&#32;&#32;&#32;&#32;_Iterator&amp;
309 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
310 
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Iterator&amp;
312 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a0217a6f536468ef2d3a5b8853bfb2cdb">base</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
313 
317 &#32;&#32;&#32;&#32;&#32;&#32;size_type
318 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2">bucket</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()._M_get_bucket();&#32;}
319 
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Iterator()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
325 
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link>(<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>*&#32;__seq)
329 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78f52529ca9957c3f87afb0920456374">_Safe_base::_M_attach</link>(__seq,&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8">_S_constant</link>());&#32;}
330 
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
333 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a8da8a15a449165ca5f17393e82445fd3">_M_attach_single</link>(<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>*&#32;__seq)
334 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a1d77bdc38465edcace6943056f867725">_Safe_base::_M_attach_single</link>(__seq,&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8">_S_constant</link>());&#32;}
335 
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
338 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6aa79a341cb886c9747c9889a3794ed8">_M_dereferenceable</link>()<emphasis role="keyword">&#32;const</emphasis>
339 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link>()&#32;&amp;&amp;&#32;!<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a10fc12a7ddc4e7d5a554ad0194b0cd90">_M_is_end</link>();&#32;}
340 
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a230223745882ecdae6c0d0c68beb7027">_M_incrementable</link>()<emphasis role="keyword">&#32;const</emphasis>
344 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!this-&gt;<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link>()&#32;&amp;&amp;&#32;!<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a10fc12a7ddc4e7d5a554ad0194b0cd90">_M_is_end</link>();&#32;}
345 
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Is&#32;the&#32;iterator&#32;range&#32;[*this,&#32;__rhs)&#32;valid?</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6105cf6a2df54bc899beadca987738d0">_M_valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;&#32;__rhs,
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link>,
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link>&gt;&amp;&#32;__dist_info)&#32;<emphasis role="keyword">const</emphasis>;
351 
352 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;distance&#32;to&#32;__rhs.</emphasis>
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>
354 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ac479c9cdb7d3aa286578868f78b5de2c">_M_get_distance_to</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>;
355 
356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;sequence&#32;this&#32;iterator&#32;references.</emphasis>
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__conditional_type&lt;
358 &#32;&#32;&#32;&#32;_IsConstant::__value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence*,&#32;_Sequence*&gt;::__type
359 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab50969fa0dcf622a1dd07ee969bbeb67">_M_get_sequence</link>()<emphasis role="keyword">&#32;const</emphasis>
360 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Sequence*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link>);&#32;}
361 
363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aec66d198e8316a67bd61262fb635d63a">_M_is_begin</link>()<emphasis role="keyword">&#32;const</emphasis>
364 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()&#32;==&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab50969fa0dcf622a1dd07ee969bbeb67">_M_get_sequence</link>()-&gt;_M_base().begin(<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2">bucket</link>());&#32;}
365 
367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a10fc12a7ddc4e7d5a554ad0194b0cd90">_M_is_end</link>()<emphasis role="keyword">&#32;const</emphasis>
368 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link>()&#32;==&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab50969fa0dcf622a1dd07ee969bbeb67">_M_get_sequence</link>()-&gt;_M_base().end(<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2">bucket</link>());&#32;}
369 
371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Other&gt;
372 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
373 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a39baef008b322b79b4946d682018d4f2">_M_in_same_bucket</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt;_Other,
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sequence&gt;&amp;&#32;__other)<emphasis role="keyword">&#32;const</emphasis>
375 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2">bucket</link>()&#32;==&#32;__other.bucket();&#32;}
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a92075217670aa87377847edfec282c43">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
379 &#32;&#32;&#32;&#32;&#32;&#32;{
380 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2safe__iterator_8h_1aca1079b6a616ec71239c6c1c0910b629">_GLIBCXX_DEBUG_VERIFY_OPERANDS</link>(__lhs,&#32;__rhs);
381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;==&#32;__rhs.base();
382 &#32;&#32;&#32;&#32;&#32;&#32;}
383 
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
385 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ada9340182ca30aaf786f085da86c0dcc">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
386 &#32;&#32;&#32;&#32;&#32;&#32;{
387 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2safe__iterator_8h_1aca1079b6a616ec71239c6c1c0910b629">_GLIBCXX_DEBUG_VERIFY_OPERANDS</link>(__lhs,&#32;__rhs);
388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;==&#32;__rhs.base();
389 &#32;&#32;&#32;&#32;&#32;&#32;}
390 
391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
392 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a9ad6f0f2ef27349dd328892fb482f83e">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2safe__iterator_8h_1aca1079b6a616ec71239c6c1c0910b629">_GLIBCXX_DEBUG_VERIFY_OPERANDS</link>(__lhs,&#32;__rhs);
395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;!=&#32;__rhs.base();
396 &#32;&#32;&#32;&#32;&#32;&#32;}
397 
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
399 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a755ab58d6ca8fffdd98370b67bd53154">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link>&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
400 &#32;&#32;&#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2safe__iterator_8h_1aca1079b6a616ec71239c6c1c0910b629">_GLIBCXX_DEBUG_VERIFY_OPERANDS</link>(__lhs,&#32;__rhs);
402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.base()&#32;!=&#32;__rhs.base();
403 &#32;&#32;&#32;&#32;&#32;&#32;}
404 &#32;&#32;&#32;&#32;};
405 
407 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
408 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
409 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator&lt;_Iterator, _Sequence&gt;</link>&amp;&#32;__first,
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator&lt;_Iterator, _Sequence&gt;</link>&amp;&#32;__last,
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>&amp;&#32;__dist_info)
412 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first._M_valid_range(__last,&#32;__dist_info);&#32;}
413 
414 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
416 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a9572a31ecdf84000cb4a07f30b49fc7a">__valid_range</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator&lt;_Iterator, _Sequence&gt;</link>&amp;&#32;__first,
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator&lt;_Iterator, _Sequence&gt;</link>&amp;&#32;__last)
418 &#32;&#32;&#32;&#32;{
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_struct____gnu__debug_1_1___distance__traits_1a233783a24e495312304a160308fb74f9">_Distance_traits&lt;_Iterator&gt;::__type</link>&#32;__dist_info;
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first._M_valid_range(__last,&#32;__dist_info);
421 &#32;&#32;&#32;&#32;}
422 
423 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
424 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
425 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct____gnu__debug_1_1___unsafe__type">_Unsafe_type</link>&lt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt;_Iterator,&#32;_Sequence&gt;&#32;&gt;
426 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Iterator&#32;<link linkend="_struct____gnu__debug_1_1___unsafe__type_3_01___safe__local__iterator_3_01___iterator_00_01___sequence_01_4_01_4_1a19c0cd695c92af88b7830791026d0c76">_Type</link>;&#32;};
427 <emphasis role="preprocessor">#endif</emphasis>
428 
429 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&gt;
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Iterator
431 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a93a80d764483413811a41139bb6ee4ac">__unsafe</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator&lt;_Iterator, _Sequence&gt;</link>&amp;&#32;__it)
432 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it.base();&#32;}
433 
434 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_debug</emphasis>
435 
436 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_DEBUG_VERIFY_OPERANDS</emphasis>
437 
438 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_local_iterator.tcc&gt;</emphasis>
439 
440 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
