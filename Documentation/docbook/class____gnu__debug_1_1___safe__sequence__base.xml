<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__sequence__base" xml:lang="en-US">
<title>__gnu_debug::_Safe_sequence_base Class Reference</title>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary></indexterm>
<para>

<para>Base class that supports tracking of iterators that reference a sequence. </para>
 
</para>
<para>
<computeroutput>#include &lt;safe_base.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_sequence_base:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__sequence__base__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_sequence_base:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__sequence__base__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a715ed592a623b3bc625d773347216c32">_M_iterators</link></para>

<para>The list of mutable iterators that reference this container. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ad9e21ce9e18f4d060195458d3c197112">_M_const_iterators</link></para>

<para>The list of constant iterators that reference this container. </para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1af796b1fd115ea27cd078eeb7e4909bd5">_M_version</link></para>

<para>The container version number. This number may never be 0. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341">_Safe_sequence_base</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479">~_Safe_sequence_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d">_M_detach_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920">_M_revalidate_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp;__x) _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f">_M_invalidate_all</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341">_Safe_sequence_base</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479">~_Safe_sequence_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1">_M_detach_all</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d">_M_detach_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920">_M_revalidate_singular</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23">_M_swap</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp;__x) _GLIBCXX_USE_NOEXCEPT</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f">_M_invalidate_all</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class____gnu__debug_1_1___safe__sequence__base_1a0dafa51aa5601b9e301df27d28222e26">_Safe_iterator_base</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Base class that supports tracking of iterators that reference a sequence. </para>



<para>The _Safe_sequence_base class provides basic support for tracking iterators into a sequence. Sequences that track iterators must derived from _Safe_sequence_base publicly, so that safe iterators (which inherit <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>) can attach to them. This class contains two linked lists of iterators, one for constant iterators and one for mutable iterators, and a version number that allows very fast invalidation of all iterators that reference the container.</para>

<para>This class must ensure that no operation on it may throw an exception, otherwise <emphasis>safe</emphasis> sequences may fail to provide the exception-safety guarantees required by the C++ standard. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341"/><section>
    <title>_Safe_sequence_base()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_Safe_sequence_base</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_Safe_sequence_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_sequence_base::_Safe_sequence_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479"/><section>
    <title>~_Safe_sequence_base()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>~_Safe_sequence_base</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>~_Safe_sequence_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_sequence_base::~_Safe_sequence_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Notify all iterators that reference this sequence that the sequence is being destroyed. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__sequence__base_a9061ce48f8c5627d61a2e4a72a43f479_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1ab37172446e16eca63620c13465558341"/><section>
    <title>_Safe_sequence_base()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_Safe_sequence_base</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_Safe_sequence_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_sequence_base::_Safe_sequence_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a9061ce48f8c5627d61a2e4a72a43f479"/><section>
    <title>~_Safe_sequence_base()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>~_Safe_sequence_base</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>~_Safe_sequence_base</secondary></indexterm>
<para><computeroutput>__gnu_debug::_Safe_sequence_base::~_Safe_sequence_base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Notify all iterators that reference this sequence that the sequence is being destroyed. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__sequence__base_a9061ce48f8c5627d61a2e4a72a43f479_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1"/><section>
    <title>_M_detach_all()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_detach_all</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_detach_all</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_detach_all ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach all iterators, leaving them singular. </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__sequence__base_acebac46f833f903deb7c094fc26cbea1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1acebac46f833f903deb7c094fc26cbea1"/><section>
    <title>_M_detach_all()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_detach_all</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_detach_all</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_detach_all ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach all iterators, leaving them singular. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d"/><section>
    <title>_M_detach_singular()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_detach_singular</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_detach_singular</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_detach_singular ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach all singular iterators. <formalpara><title>Postcondition</title>

<para>for all iterators i attached to this sequence, i-&gt;_M_version == _M_version. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1aadde2fc883be085fc4588c1ef442cd3d"/><section>
    <title>_M_detach_singular()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_detach_singular</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_detach_singular</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_detach_singular ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Detach all singular iterators. <formalpara><title>Postcondition</title>

<para>for all iterators i attached to this sequence, i-&gt;_M_version == _M_version. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d"/><section>
    <title>_M_get_mutex()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_get_mutex</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_get_mutex</secondary></indexterm>
<para><computeroutput>__gnu_cxx::__mutex &amp; __gnu_debug::_Safe_sequence_base::_M_get_mutex ( ) throw ( ) <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>For use in <link linkend="_class____gnu__debug_1_1___safe__sequence">_Safe_sequence</link>. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a688ceccbb7f5cfb2b4e95f569df4191d"/><section>
    <title>_M_get_mutex()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_get_mutex</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_get_mutex</secondary></indexterm>
<para><computeroutput>__gnu_cxx::__mutex &amp; __gnu_debug::_Safe_sequence_base::_M_get_mutex ( ) throw ( ) <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>For use in <link linkend="_class____gnu__debug_1_1___safe__sequence">_Safe_sequence</link>. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f"/><section>
    <title>_M_invalidate_all()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_all</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_invalidate_all</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_invalidate_all ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Invalidates all iterators. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a58a4c8925457fcf371457ec9f071a31f"/><section>
    <title>_M_invalidate_all()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_invalidate_all</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_invalidate_all</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_invalidate_all ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Invalidates all iterators. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920"/><section>
    <title>_M_revalidate_singular()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_revalidate_singular</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_revalidate_singular</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_revalidate_singular ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Revalidates all attached singular iterators. This method may be used to validate iterators that were invalidated before (but for some reason, such as an exception, need to become valid again). </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a75f6eb02cd1721b550bd5eb205ed6920"/><section>
    <title>_M_revalidate_singular()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_revalidate_singular</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_revalidate_singular</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_revalidate_singular ( )<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Revalidates all attached singular iterators. This method may be used to validate iterators that were invalidated before (but for some reason, such as an exception, need to become valid again). </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23"/><section>
    <title>_M_swap()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_swap</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_swap</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_swap (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp; __x)<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Swap this sequence with the given sequence. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now reference the other container. </para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a8782fb392e549945fd9e910caf3b1c23"/><section>
    <title>_M_swap()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_swap</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_swap</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __gnu_debug::_Safe_sequence_base::_M_swap (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> &amp; __x)<computeroutput>[protected]</computeroutput></computeroutput></para>
<para>Swap this sequence with the given sequence. This operation also swaps ownership of the iterators, so that when the operation is complete all iterators that originally referenced one container now reference the other container. </para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a0dafa51aa5601b9e301df27d28222e26"/><section>
    <title>_Safe_iterator_base</title>
<indexterm><primary>_Safe_iterator_base</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_Safe_iterator_base</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1ad9e21ce9e18f4d060195458d3c197112"/><section>
    <title>_M_const_iterators</title>
<indexterm><primary>_M_const_iterators</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_const_iterators</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * __gnu_debug::_Safe_sequence_base::_M_const_iterators</computeroutput></para><para>

<para>The list of constant iterators that reference this container. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1a715ed592a623b3bc625d773347216c32"/><section>
    <title>_M_iterators</title>
<indexterm><primary>_M_iterators</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_iterators</secondary></indexterm>
<para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * __gnu_debug::_Safe_sequence_base::_M_iterators</computeroutput></para><para>

<para>The list of mutable iterators that reference this container. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__sequence__base_1af796b1fd115ea27cd078eeb7e4909bd5"/><section>
    <title>_M_version</title>
<indexterm><primary>_M_version</primary><secondary>__gnu_debug::_Safe_sequence_base</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_sequence_base</primary><secondary>_M_version</secondary></indexterm>
<para><computeroutput>unsigned int __gnu_debug::_Safe_sequence_base::_M_version<computeroutput>[mutable]</computeroutput></computeroutput></para><para>

<para>The container version number. This number may never be 0. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__base_8h">safe_base.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__base_8h">safe_base.h</link></section>
</section>
