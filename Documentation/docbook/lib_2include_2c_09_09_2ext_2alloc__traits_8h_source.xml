<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2alloc__traits_8h_source" xml:lang="en-US">
<title>alloc_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/alloc_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Allocator&#32;traits&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2011-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_EXT_ALLOC_TRAITS_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_EXT_ALLOC_TRAITS_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
33 
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/alloc_traits.h&gt;</emphasis>
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/allocator.h&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;for&#32;__alloc_swap</emphasis>
37 <emphasis role="preprocessor">#endif</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 
47 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&gt;
48 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__alloc_traits
49 #<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;__cplusplus&#32;&gt;=&#32;201103L
50 &#32;&#32;:&#32;std::allocator_traits&lt;_Alloc&gt;
51 <emphasis role="preprocessor">#endif</emphasis>
52 &#32;&#32;{
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;allocator_type;
54 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::allocator_traits&lt;_Alloc&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base_type;
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base_type::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base_type::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base_type::const_pointer&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base_type::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base_type::difference_type&#32;&#32;&#32;&#32;difference_type;
61 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++11&#32;allocators&#32;do&#32;not&#32;define&#32;reference&#32;or&#32;const_reference</emphasis>
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base_type::allocate;
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base_type::deallocate;
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base_type::construct;
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base_type::destroy;
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base_type::max_size;
69 
70 &#32;&#32;<emphasis role="keyword">private</emphasis>:
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_custom_pointer
73 &#32;&#32;&#32;&#32;=&#32;std::__and_&lt;std::is_same&lt;pointer,&#32;_Ptr&gt;,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__not_&lt;std::is_pointer&lt;_Ptr&gt;&gt;&gt;;
75 
76 &#32;&#32;<emphasis role="keyword">public</emphasis>:
77 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;overload&#32;construct&#32;for&#32;non-standard&#32;pointer&#32;types</emphasis>
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR
80 &#32;&#32;&#32;&#32;&#32;&#32;std::__enable_if_t&lt;__is_custom_pointer&lt;_Ptr&gt;::value&gt;
81 &#32;&#32;&#32;&#32;&#32;&#32;construct(_Alloc&amp;&#32;__a,&#32;_Ptr&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(_Base_type::construct(__a,&#32;std::__to_address(__p),
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...)))
84 &#32;&#32;&#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;_Base_type::construct(__a,&#32;std::__to_address(__p),
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
87 &#32;&#32;&#32;&#32;&#32;&#32;}
88 
89 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;overload&#32;destroy&#32;for&#32;non-standard&#32;pointer&#32;types</emphasis>
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR
92 &#32;&#32;&#32;&#32;&#32;&#32;std::__enable_if_t&lt;__is_custom_pointer&lt;_Ptr&gt;::value&gt;
93 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_Alloc&amp;&#32;__a,&#32;_Ptr&#32;__p)
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(_Base_type::destroy(__a,&#32;std::__to_address(__p))))
95 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Base_type::destroy(__a,&#32;std::__to_address(__p));&#32;}
96 
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Alloc&#32;_S_select_on_copy(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
98 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::select_on_container_copy_construction(__a);&#32;}
99 
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX14_CONSTEXPR&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_on_swap(_Alloc&amp;&#32;__a,&#32;_Alloc&amp;&#32;__b)
101 &#32;&#32;&#32;&#32;{&#32;std::__alloc_on_swap(__a,&#32;__b);&#32;}
102 
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_propagate_on_copy_assign()
104 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::propagate_on_container_copy_assignment::value;&#32;}
105 
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_propagate_on_move_assign()
107 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::propagate_on_container_move_assignment::value;&#32;}
108 
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_propagate_on_swap()
110 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::propagate_on_container_swap::value;&#32;}
111 
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_always_equal()
113 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::is_always_equal::value;&#32;}
114 
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_nothrow_move()
116 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_propagate_on_move_assign()&#32;||&#32;_S_always_equal();&#32;}
117 
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
120 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base_type::template&#32;rebind_alloc&lt;_Tp&gt;&#32;other;&#32;};
121 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;!&#32;C++11</emphasis>
122 
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::const_pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_pointer;
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
126 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::const_reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::difference_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
130 
131 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
132 &#32;&#32;&#32;&#32;allocate(_Alloc&amp;&#32;__a,&#32;size_type&#32;__n)
133 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n);&#32;}
134 
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H<emphasis role="keywordtype">int</emphasis>&gt;
136 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
137 &#32;&#32;&#32;&#32;&#32;&#32;allocate(_Alloc&amp;&#32;__a,&#32;size_type&#32;__n,&#32;_Hint&#32;__hint)
138 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.allocate(__n,&#32;__hint);&#32;}
139 
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;deallocate(_Alloc&amp;&#32;__a,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
141 &#32;&#32;&#32;&#32;{&#32;__a.deallocate(__p,&#32;__n);&#32;}
142 
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;construct(_Alloc&amp;&#32;__a,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__arg)
145 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__a.construct(__p,&#32;__arg);&#32;}
146 
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_Alloc&amp;&#32;__a,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)
148 &#32;&#32;&#32;&#32;{&#32;__a.destroy(__p);&#32;}
149 
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;size_type&#32;max_size(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
151 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.max_size();&#32;}
152 
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;_S_select_on_copy(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a;&#32;}
154 
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_on_swap(_Alloc&amp;&#32;__a,&#32;_Alloc&amp;&#32;__b)
156 &#32;&#32;&#32;&#32;{
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;431.&#32;Swapping&#32;containers&#32;with&#32;unequal&#32;allocators.</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_swap&lt;_Alloc&gt;::_S_do_it(__a,&#32;__b);
160 &#32;&#32;&#32;&#32;}
161 
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind
164 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc::template&#32;rebind&lt;_Tp&gt;::other&#32;other;&#32;};
165 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
166 &#32;&#32;};
167 
168 _GLIBCXX_END_NAMESPACE_VERSION
169 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_cxx</emphasis>
170 
171 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
