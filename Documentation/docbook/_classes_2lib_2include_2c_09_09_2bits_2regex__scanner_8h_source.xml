<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2regex__scanner_8h_source" xml:lang="en-US">
<title>regex_scanner.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/regex_scanner.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;class&#32;template&#32;regex&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2013-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
32 {
33 _GLIBCXX_BEGIN_NAMESPACE_VERSION
34 
35 <emphasis role="keyword">namespace&#32;</emphasis>__detail
36 {
42 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ScannerBase
43 &#32;&#32;{
44 &#32;&#32;<emphasis role="keyword">public</emphasis>:
46 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_TokenT&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>
47 &#32;&#32;&#32;&#32;{
48 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_anychar,
49 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_ord_char,
50 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_oct_num,
51 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_hex_num,
52 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_backref,
53 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_subexpr_begin,
54 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_subexpr_no_group_begin,
55 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_subexpr_lookahead_begin,&#32;<emphasis role="comment">//&#32;neg&#32;if&#32;_M_value[0]&#32;==&#32;&apos;n&apos;</emphasis>
56 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_subexpr_end,
57 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_bracket_begin,
58 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_bracket_neg_begin,
59 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_bracket_end,
60 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_interval_begin,
61 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_interval_end,
62 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_quoted_class,
63 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_char_class_name,
64 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_collsymbol,
65 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_equiv_class_name,
66 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_opt,
67 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_or,
68 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_closure0,
69 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_closure1,
70 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_line_begin,
71 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_line_end,
72 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_word_bound,&#32;<emphasis role="comment">//&#32;neg&#32;if&#32;_M_value[0]&#32;==&#32;&apos;n&apos;</emphasis>
73 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_comma,
74 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_dup_count,
75 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_eof,
76 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_bracket_dash,
77 &#32;&#32;&#32;&#32;&#32;&#32;_S_token_unknown&#32;=&#32;-1u
78 &#32;&#32;&#32;&#32;};
79 
80 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_constants::syntax_option_type&#32;_FlagT;
82 
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;_StateT
84 &#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;&#32;&#32;_S_state_normal,
86 &#32;&#32;&#32;&#32;&#32;&#32;_S_state_in_brace,
87 &#32;&#32;&#32;&#32;&#32;&#32;_S_state_in_bracket,
88 &#32;&#32;&#32;&#32;};
89 
90 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
91 &#32;&#32;&#32;&#32;_ScannerBase(_FlagT&#32;__flags)
92 &#32;&#32;&#32;&#32;:&#32;_M_state(_S_state_normal),
93 &#32;&#32;&#32;&#32;_M_flags(__flags),
94 &#32;&#32;&#32;&#32;_M_escape_tbl(_M_is_ecma()
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_ecma_escape_tbl
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_awk_escape_tbl),
97 &#32;&#32;&#32;&#32;_M_spec_char(_M_is_ecma()
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_ecma_spec_char
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_flags&#32;&amp;&#32;regex_constants::basic
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_basic_spec_char
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_flags&#32;&amp;&#32;regex_constants::extended
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_extended_spec_char
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_flags&#32;&amp;&#32;regex_constants::grep
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;&#32;<emphasis role="stringliteral">&quot;.[\\*^$\n&quot;</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_flags&#32;&amp;&#32;regex_constants::egrep
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<emphasis role="stringliteral">&quot;.[\\()*+?{|^$\n&quot;</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_flags&#32;&amp;&#32;regex_constants::awk
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_extended_spec_char
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;nullptr),
110 &#32;&#32;&#32;&#32;_M_at_bracket_start(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
111 &#32;&#32;&#32;&#32;{&#32;__glibcxx_assert(_M_spec_char);&#32;}
112 
113 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
115 &#32;&#32;&#32;&#32;_M_find_escape(<emphasis role="keywordtype">char</emphasis>&#32;__c)
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__it&#32;=&#32;_M_escape_tbl;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__it-&gt;first&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;&#32;++__it)
119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__it-&gt;first&#32;==&#32;__c)
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;__it-&gt;second;
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
122 &#32;&#32;&#32;&#32;}
123 
124 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
125 &#32;&#32;&#32;&#32;_M_is_ecma()<emphasis role="keyword">&#32;const</emphasis>
126 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags&#32;&amp;&#32;regex_constants::ECMAScript;&#32;}
127 
128 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
129 &#32;&#32;&#32;&#32;_M_is_basic()<emphasis role="keyword">&#32;const</emphasis>
130 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags&#32;&amp;&#32;(regex_constants::basic&#32;|&#32;regex_constants::grep);&#32;}
131 
132 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
133 &#32;&#32;&#32;&#32;_M_is_extended()<emphasis role="keyword">&#32;const</emphasis>
134 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags&#32;&amp;&#32;(regex_constants::extended
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;regex_constants::egrep
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;regex_constants::awk);
138 &#32;&#32;&#32;&#32;}
139 
140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
141 &#32;&#32;&#32;&#32;_M_is_grep()<emphasis role="keyword">&#32;const</emphasis>
142 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags&#32;&amp;&#32;(regex_constants::grep&#32;|&#32;regex_constants::egrep);&#32;}
143 
144 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
145 &#32;&#32;&#32;&#32;_M_is_awk()<emphasis role="keyword">&#32;const</emphasis>
146 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags&#32;&amp;&#32;regex_constants::awk;&#32;}
147 
148 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
149 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Make&#32;them&#32;static&#32;in&#32;the&#32;next&#32;abi&#32;change.</emphasis>
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;char,&#32;_TokenT&gt;&#32;_M_token_tbl[9]&#32;=
151 &#32;&#32;&#32;&#32;&#32;&#32;{
152 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;^&apos;</emphasis>,&#32;_S_token_line_begin},
153 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;$&apos;</emphasis>,&#32;_S_token_line_end},
154 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;.&apos;</emphasis>,&#32;_S_token_anychar},
155 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;*&apos;</emphasis>,&#32;_S_token_closure0},
156 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;+&apos;</emphasis>,&#32;_S_token_closure1},
157 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;?&apos;</emphasis>,&#32;_S_token_opt},
158 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;|&apos;</emphasis>,&#32;_S_token_or},
159 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;\n&apos;</emphasis>,&#32;_S_token_or},&#32;<emphasis role="comment">//&#32;grep&#32;and&#32;egrep</emphasis>
160 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;\0&apos;</emphasis>,&#32;_S_token_or},
161 &#32;&#32;&#32;&#32;&#32;&#32;};
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;char,&#32;char&gt;&#32;_M_ecma_escape_tbl[8]&#32;=
163 &#32;&#32;&#32;&#32;&#32;&#32;{
164 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>},
165 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;b&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\b&apos;</emphasis>},
166 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;f&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\f&apos;</emphasis>},
167 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;n&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>},
168 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;r&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>},
169 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;t&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>},
170 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;v&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\v&apos;</emphasis>},
171 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;\0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>},
172 &#32;&#32;&#32;&#32;&#32;&#32;};
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;char,&#32;char&gt;&#32;_M_awk_escape_tbl[11]&#32;=
174 &#32;&#32;&#32;&#32;&#32;&#32;{
175 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>},
176 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;/&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>},
177 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>},
178 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;a&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\a&apos;</emphasis>},
179 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;b&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\b&apos;</emphasis>},
180 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;f&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\f&apos;</emphasis>},
181 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;n&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>},
182 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;r&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>},
183 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;t&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>},
184 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;v&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\v&apos;</emphasis>},
185 &#32;&#32;&#32;&#32;{<emphasis role="charliteral">&apos;\0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>},
186 &#32;&#32;&#32;&#32;&#32;&#32;};
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_ecma_spec_char&#32;=&#32;<emphasis role="stringliteral">&quot;^$\\.*+?()[]{}|&quot;</emphasis>;
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_basic_spec_char&#32;=&#32;<emphasis role="stringliteral">&quot;.[\\*^$&quot;</emphasis>;
189 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_extended_spec_char&#32;=&#32;<emphasis role="stringliteral">&quot;.[\\()*+?{|^$&quot;</emphasis>;
190 
191 &#32;&#32;&#32;&#32;_StateT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_state;
192 &#32;&#32;&#32;&#32;_FlagT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_flags;
193 &#32;&#32;&#32;&#32;_TokenT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_token;
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;char,&#32;char&gt;*&#32;&#32;_M_escape_tbl;
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_spec_char;
196 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_at_bracket_start;
197 &#32;&#32;};
198 
209 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Scanner
211 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_ScannerBase
212 &#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_string&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StringT;
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_constants::syntax_option_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FlagT;
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;std::ctype&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CtypeT;
217 
218 &#32;&#32;&#32;&#32;&#32;&#32;_Scanner(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__begin,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__end,
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FlagT&#32;__flags,&#32;std::locale&#32;__loc);
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
222 &#32;&#32;&#32;&#32;&#32;&#32;_M_advance();
223 
224 &#32;&#32;&#32;&#32;&#32;&#32;_TokenT
225 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_token()&#32;const&#32;noexcept
226 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_token;&#32;}
227 
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_StringT&amp;
229 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_value()&#32;const&#32;noexcept
230 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_value;&#32;}
231 
232 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
233 &#32;&#32;&#32;&#32;&#32;&#32;std::ostream&amp;
234 &#32;&#32;&#32;&#32;&#32;&#32;_M_print(std::ostream&amp;);
235 <emphasis role="preprocessor">#endif</emphasis>
236 
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
239 &#32;&#32;&#32;&#32;&#32;&#32;_M_scan_normal();
240 
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;_M_scan_in_bracket();
243 
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;_M_scan_in_brace();
246 
247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;_M_eat_escape_ecma();
249 
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
251 &#32;&#32;&#32;&#32;&#32;&#32;_M_eat_escape_posix();
252 
253 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
254 &#32;&#32;&#32;&#32;&#32;&#32;_M_eat_escape_awk();
255 
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
257 &#32;&#32;&#32;&#32;&#32;&#32;_M_eat_class(<emphasis role="keywordtype">char</emphasis>);
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_current;
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_end;
261 &#32;&#32;&#32;&#32;&#32;&#32;_CtypeT&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ctype;
262 &#32;&#32;&#32;&#32;&#32;&#32;_StringT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_value;
263 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(_Scanner::*&#32;_M_eat_escape)();
264 &#32;&#32;&#32;&#32;};
265 
267 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
268 _GLIBCXX_END_NAMESPACE_VERSION
269 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
270 
271 <emphasis role="preprocessor">#include&#32;&lt;bits/regex_scanner.tcc&gt;</emphasis>
</programlisting></section>
