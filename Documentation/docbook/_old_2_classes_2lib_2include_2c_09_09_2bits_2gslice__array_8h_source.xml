<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_source" xml:lang="en-US">
<title>gslice_array.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/gslice_array.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;The&#32;template&#32;and&#32;inlines&#32;for&#32;the&#32;-*-&#32;C++&#32;-*-&#32;gslice_array&#32;class.</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Gabriel&#32;Dos&#32;Reis&#32;&lt;Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr&gt;</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_GSLICE_ARRAY_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_GSLICE_ARRAY_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
59 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>gslice_array
61 &#32;&#32;&#32;&#32;{
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;value_type;
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;253.&#32;valarray&#32;helper&#32;functions&#32;are&#32;almost&#32;entirely&#32;useless</emphasis>
67 
69 &#32;&#32;&#32;&#32;&#32;&#32;gslice_array(<emphasis role="keyword">const</emphasis>&#32;gslice_array&amp;);
70 
73 &#32;&#32;&#32;&#32;&#32;&#32;gslice_array&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;gslice_array&amp;);
74 
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;)&#32;<emphasis role="keyword">const</emphasis>;
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&lt;&lt;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator&gt;&gt;=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;)&#32;<emphasis role="keyword">const</emphasis>;
122 
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
124 &#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;&#32;&#32;&#32;&#32;_M_array;
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;valarray&lt;size_t&gt;&amp;&#32;_M_index;
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>valarray&lt;_Tp&gt;;
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;gslice_array(_Array&lt;_Tp&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;valarray&lt;size_t&gt;&amp;);
130 
131 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not&#32;implemented</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;gslice_array();
134 <emphasis role="preprocessor">#else</emphasis>
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
136 &#32;&#32;&#32;&#32;&#32;&#32;gslice_array()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
137 <emphasis role="preprocessor">#endif</emphasis>
138 &#32;&#32;&#32;&#32;};
139 
140 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
142 &#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::gslice_array(_Array&lt;_Tp&gt;&#32;__a,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;valarray&lt;size_t&gt;&amp;&#32;__i)
144 &#32;&#32;&#32;&#32;:&#32;_M_array(__a),&#32;_M_index(__i)&#32;{}
145 
146 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
148 &#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::gslice_array(<emphasis role="keyword">const</emphasis>&#32;gslice_array&lt;_Tp&gt;&amp;&#32;__a)
149 &#32;&#32;&#32;&#32;:&#32;_M_array(__a._M_array),&#32;_M_index(__a._M_index)&#32;{}
150 
151 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;gslice_array&lt;_Tp&gt;&amp;
153 &#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;gslice_array&lt;_Tp&gt;&amp;&#32;__a)
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;std::__valarray_copy(_Array&lt;_Tp&gt;(__a._M_array),
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;size_t&gt;(__a._M_index),&#32;_M_index.size(),
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_array,&#32;_Array&lt;size_t&gt;(_M_index));
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
159 &#32;&#32;&#32;&#32;}
160 
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
163 &#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)<emphasis role="keyword">&#32;const</emphasis>
164 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
165 &#32;&#32;&#32;&#32;&#32;&#32;std::__valarray_fill(_M_array,&#32;_Array&lt;size_t&gt;(_M_index),
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_index.size(),&#32;__t);
167 &#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
170 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
171 &#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)<emphasis role="keyword">&#32;const</emphasis>
172 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
173 &#32;&#32;&#32;&#32;&#32;&#32;std::__valarray_copy(_Array&lt;_Tp&gt;(__v),&#32;__v.size(),
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_array,&#32;_Array&lt;size_t&gt;(_M_index));
175 &#32;&#32;&#32;&#32;}
176 
177 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Dom&gt;
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::operator=(<emphasis role="keyword">const</emphasis>&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;&#32;__e)<emphasis role="keyword">&#32;const</emphasis>
181 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
182 &#32;&#32;&#32;&#32;std::__valarray_copy&#32;(__e,&#32;_M_index.size(),&#32;_M_array,
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;size_t&gt;(_M_index));
184 &#32;&#32;&#32;&#32;&#32;&#32;}
185 
186 <emphasis role="preprocessor">#undef&#32;_DEFINE_VALARRAY_OPERATOR</emphasis>
187 <emphasis role="preprocessor">#define&#32;_DEFINE_VALARRAY_OPERATOR(_Op,&#32;_Name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
188 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::operator&#32;_Op##=(const&#32;valarray&lt;_Tp&gt;&amp;&#32;__v)&#32;const&#32;&#32;\</emphasis>
191 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
192 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_M_array,&#32;_Array&lt;size_t&gt;(_M_index),&#32;&#32;\</emphasis>
193 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Array&lt;_Tp&gt;(__v),&#32;__v.size());&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
194 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
195 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
196 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
197 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&lt;class&#32;_Dom&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
198 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;inline&#32;void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
199 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;gslice_array&lt;_Tp&gt;::operator&#32;_Op##=&#32;(const&#32;_Expr&lt;_Dom,&#32;_Tp&gt;&amp;&#32;__e)&#32;const\</emphasis>
200 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
201 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_Array_augmented_##_Name(_M_array,&#32;_Array&lt;size_t&gt;(_M_index),&#32;__e,\</emphasis>
202 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_index.size());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
203 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
204 
205 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(*,&#32;__multiplies)
206 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(/,&#32;__divides)
207 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(%,&#32;__modulus)
208 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(+,&#32;__plus)
209 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(-,&#32;__minus)
210 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(^,&#32;__bitwise_xor)
211 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&amp;,&#32;__bitwise_and)
212 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(|,&#32;__bitwise_or)
213 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&lt;&lt;,&#32;__shift_left)
214 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2gslice__array_8h_1a1bbc3ad528ecadf228a0f40f301787ac">_DEFINE_VALARRAY_OPERATOR</link>(&gt;&gt;,&#32;__shift_right)
215 
216 <emphasis role="preprocessor">#undef&#32;_DEFINE_VALARRAY_OPERATOR</emphasis>
217 
219 
220 _GLIBCXX_END_NAMESPACE_VERSION
221 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
222 
223 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GSLICE_ARRAY_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
