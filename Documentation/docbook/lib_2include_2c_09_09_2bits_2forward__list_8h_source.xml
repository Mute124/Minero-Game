<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2forward__list_8h_source" xml:lang="en-US">
<title>forward_list.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/forward_list.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;&lt;forward_list.h&gt;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_FORWARD_LIST_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_FORWARD_LIST_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator_base_types.h&gt;</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_iterator.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/allocator.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;ext/aligned_buffer.h&gt;</emphasis>
43 
44 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
45 {
46 _GLIBCXX_BEGIN_NAMESPACE_VERSION
47 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
48 
54 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fwd_list_node_base
55 &#32;&#32;{
56 &#32;&#32;&#32;&#32;_Fwd_list_node_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
57 &#32;&#32;&#32;&#32;_Fwd_list_node_base(_Fwd_list_node_base&amp;&amp;&#32;__x)&#32;noexcept
58 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_next(__x._M_next)
59 &#32;&#32;&#32;&#32;{&#32;__x._M_next&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
60 
61 &#32;&#32;&#32;&#32;_Fwd_list_node_base(<emphasis role="keyword">const</emphasis>&#32;_Fwd_list_node_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
62 &#32;&#32;&#32;&#32;_Fwd_list_node_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Fwd_list_node_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
63 
64 &#32;&#32;&#32;&#32;_Fwd_list_node_base&amp;
65 &#32;&#32;&#32;&#32;operator=(_Fwd_list_node_base&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
66 &#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;_M_next&#32;=&#32;__x._M_next;
68 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_next&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
70 &#32;&#32;&#32;&#32;}
71 
72 &#32;&#32;&#32;&#32;_Fwd_list_node_base*&#32;_M_next&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
73 
74 &#32;&#32;&#32;&#32;_Fwd_list_node_base*
75 &#32;&#32;&#32;&#32;_M_transfer_after(_Fwd_list_node_base*&#32;__begin,
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*&#32;__end)&#32;<emphasis role="keyword">noexcept</emphasis>
77 &#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*&#32;__keep&#32;=&#32;__begin-&gt;_M_next;
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__end)
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;&#32;&#32;__begin-&gt;_M_next&#32;=&#32;__end-&gt;_M_next;
82 &#32;&#32;&#32;&#32;&#32;&#32;__end-&gt;_M_next&#32;=&#32;_M_next;
83 &#32;&#32;&#32;&#32;}
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
85 &#32;&#32;&#32;&#32;__begin-&gt;_M_next&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
86 &#32;&#32;&#32;&#32;&#32;&#32;_M_next&#32;=&#32;__keep;
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__end;
88 &#32;&#32;&#32;&#32;}
89 
90 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
91 &#32;&#32;&#32;&#32;_M_reverse_after()&#32;<emphasis role="keyword">noexcept</emphasis>
92 &#32;&#32;&#32;&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*&#32;__tail&#32;=&#32;_M_next;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__tail)
95 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(_Fwd_list_node_base*&#32;__temp&#32;=&#32;__tail-&gt;_M_next)
97 &#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*&#32;__keep&#32;=&#32;_M_next;
99 &#32;&#32;&#32;&#32;&#32;&#32;_M_next&#32;=&#32;__temp;
100 &#32;&#32;&#32;&#32;&#32;&#32;__tail-&gt;_M_next&#32;=&#32;__temp-&gt;_M_next;
101 &#32;&#32;&#32;&#32;&#32;&#32;_M_next-&gt;_M_next&#32;=&#32;__keep;
102 &#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;}
104 &#32;&#32;};
105 
112 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fwd_list_node
114 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Fwd_list_node_base
115 &#32;&#32;&#32;&#32;{
116 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____aligned__buffer">__gnu_cxx::__aligned_buffer&lt;_Tp&gt;</link>&#32;_M_storage;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*
121 &#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()&#32;<emphasis role="keyword">noexcept</emphasis>
122 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_storage.<link linkend="_struct____gnu__cxx_1_1____aligned__buffer_1a4f7396ec827253c1af249edad1c67b06">_M_ptr</link>();&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*
125 &#32;&#32;&#32;&#32;&#32;&#32;_M_valptr()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_storage.<link linkend="_struct____gnu__cxx_1_1____aligned__buffer_1a4f7396ec827253c1af249edad1c67b06">_M_ptr</link>();&#32;}
127 &#32;&#32;&#32;&#32;};
128 
134 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fwd_list_iterator
136 &#32;&#32;&#32;&#32;{
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Self;
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_node&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node;
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;iterator_category;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_iterator()&#32;noexcept
147 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node()&#32;{&#32;}
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_iterator(_Fwd_list_node_base*&#32;__n)&#32;noexcept
151 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__n)&#32;{&#32;}
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
154 &#32;&#32;&#32;&#32;&#32;&#32;reference
155 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_node)-&gt;_M_valptr();&#32;}
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
159 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
160 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_node)-&gt;_M_valptr();&#32;}
162 
163 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
164 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">noexcept</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;{
166 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
168 &#32;&#32;&#32;&#32;&#32;&#32;}
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;_Self
171 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
174 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
176 &#32;&#32;&#32;&#32;&#32;&#32;}
177 
181 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;==&#32;__y._M_node;&#32;}
185 
186 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;!=&#32;__y._M_node;&#32;}
194 <emphasis role="preprocessor">#endif</emphasis>
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;_Self
197 &#32;&#32;&#32;&#32;&#32;&#32;_M_next()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;{
199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_node)
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Fwd_list_iterator(_M_node-&gt;_M_next);
201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Fwd_list_iterator(<emphasis role="keyword">nullptr</emphasis>);
203 &#32;&#32;&#32;&#32;&#32;&#32;}
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*&#32;_M_node;
206 &#32;&#32;&#32;&#32;};
207 
213 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fwd_list_const_iterator
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_const_iterator&lt;_Tp&gt;&#32;_Self;
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Fwd_list_node&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;_Node;
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
219 
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
221 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;iterator_category;
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_const_iterator()&#32;noexcept
227 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node()&#32;{&#32;}
228 
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_const_iterator(<emphasis role="keyword">const</emphasis>&#32;_Fwd_list_node_base*&#32;__n)&#32;&#32;noexcept
231 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__n)&#32;{&#32;}
232 
233 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_const_iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__iter)&#32;noexcept
234 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_node(__iter._M_node)&#32;{&#32;}
235 
236 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
237 &#32;&#32;&#32;&#32;&#32;&#32;reference
238 &#32;&#32;&#32;&#32;&#32;&#32;operator*()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
239 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_node)-&gt;_M_valptr();&#32;}
240 
241 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
242 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
243 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_node)-&gt;_M_valptr();&#32;}
245 
246 &#32;&#32;&#32;&#32;&#32;&#32;_Self&amp;
247 &#32;&#32;&#32;&#32;&#32;&#32;operator++()&#32;<emphasis role="keyword">noexcept</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
251 &#32;&#32;&#32;&#32;&#32;&#32;}
252 
253 &#32;&#32;&#32;&#32;&#32;&#32;_Self
254 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;<emphasis role="keyword">noexcept</emphasis>
255 &#32;&#32;&#32;&#32;&#32;&#32;{
256 &#32;&#32;&#32;&#32;_Self&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(*<emphasis role="keyword">this</emphasis>);
257 &#32;&#32;&#32;&#32;_M_node&#32;=&#32;_M_node-&gt;_M_next;
258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
259 &#32;&#32;&#32;&#32;&#32;&#32;}
260 
264 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
266 &#32;&#32;&#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;==&#32;__y._M_node;&#32;}
268 
269 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
273 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
275 &#32;&#32;&#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Self&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_node&#32;!=&#32;__y._M_node;&#32;}
277 <emphasis role="preprocessor">#endif</emphasis>
278 
279 &#32;&#32;&#32;&#32;&#32;&#32;_Self
280 &#32;&#32;&#32;&#32;&#32;&#32;_M_next()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
281 &#32;&#32;&#32;&#32;&#32;&#32;{
282 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_node)
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Fwd_list_const_iterator(_M_node-&gt;_M_next);
284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Fwd_list_const_iterator(<emphasis role="keyword">nullptr</emphasis>);
286 &#32;&#32;&#32;&#32;&#32;&#32;}
287 
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Fwd_list_node_base*&#32;_M_node;
289 &#32;&#32;&#32;&#32;};
290 
294 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fwd_list_base
296 &#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__alloc_rebind&lt;_Alloc,&#32;_Fwd_list_node&lt;_Tp&gt;&gt;&#32;_Node_alloc_type;
299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Node_alloc_type&gt;&#32;_Node_alloc_traits;
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fwd_list_impl
302 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Node_alloc_type
303 &#32;&#32;&#32;&#32;&#32;&#32;{
304 &#32;&#32;&#32;&#32;_Fwd_list_node_base&#32;_M_head;
305 
306 &#32;&#32;&#32;&#32;_Fwd_list_impl()
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_default_constructible&lt;_Node_alloc_type&gt;::value)
308 &#32;&#32;&#32;&#32;:&#32;_Node_alloc_type(),&#32;_M_head()
309 &#32;&#32;&#32;&#32;{&#32;}
310 
311 &#32;&#32;&#32;&#32;_Fwd_list_impl(_Fwd_list_impl&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
312 
313 &#32;&#32;&#32;&#32;_Fwd_list_impl(_Fwd_list_impl&amp;&amp;&#32;__fl,&#32;_Node_alloc_type&amp;&amp;&#32;__a)
314 &#32;&#32;&#32;&#32;:&#32;_Node_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),&#32;_M_head(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__fl._M_head))
315 &#32;&#32;&#32;&#32;{&#32;}
316 
317 &#32;&#32;&#32;&#32;_Fwd_list_impl(_Node_alloc_type&amp;&amp;&#32;__a)
318 &#32;&#32;&#32;&#32;:&#32;_Node_alloc_type(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)),&#32;_M_head()
319 &#32;&#32;&#32;&#32;{&#32;}
320 &#32;&#32;&#32;&#32;&#32;&#32;};
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_impl&#32;_M_impl;
323 
324 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_iterator&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_const_iterator&lt;_Tp&gt;&#32;const_iterator;
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_node&lt;_Tp&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node;
328 
329 &#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_type&amp;
330 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Node_allocator()&#32;<emphasis role="keyword">noexcept</emphasis>
331 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
332 
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Node_alloc_type&amp;
334 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_Node_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl;&#32;}
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
338 
339 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_base(_Node_alloc_type&amp;&amp;&#32;__a)
340 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))&#32;{&#32;}
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;allocators&#32;are&#32;always&#32;equal.</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_base(_Fwd_list_base&amp;&amp;&#32;__lst,&#32;_Node_alloc_type&amp;&amp;&#32;__a,
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::true_type)
345 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lst._M_impl),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a))
346 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
347 
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;allocators&#32;are&#32;not&#32;always&#32;equal.</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_base(_Fwd_list_base&amp;&amp;&#32;__lst,&#32;_Node_alloc_type&amp;&amp;&#32;__a);
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_base(_Fwd_list_base&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
352 
353 &#32;&#32;&#32;&#32;&#32;&#32;~_Fwd_list_base()
354 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_erase_after(&amp;_M_impl._M_head,&#32;<emphasis role="keyword">nullptr</emphasis>);&#32;}
355 
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
357 &#32;&#32;&#32;&#32;&#32;&#32;_Node*
358 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_node()
359 &#32;&#32;&#32;&#32;&#32;&#32;{
360 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;_Node_alloc_traits::allocate(_M_get_Node_allocator(),&#32;1);
361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(__ptr);
362 &#32;&#32;&#32;&#32;&#32;&#32;}
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
365 &#32;&#32;&#32;&#32;_Node*
366 &#32;&#32;&#32;&#32;_M_create_node(_Args&amp;&amp;...&#32;__args)
367 &#32;&#32;&#32;&#32;{
368 &#32;&#32;&#32;&#32;&#32;&#32;_Node*&#32;__node&#32;=&#32;this-&gt;_M_get_node();
369 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;((<emphasis role="keywordtype">void</emphasis>*)__node)&#32;_Node;
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_traits::construct(_M_get_Node_allocator(),
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__node-&gt;_M_valptr(),
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
376 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_put_node(__node);
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__node;
382 &#32;&#32;&#32;&#32;}
383 
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
385 &#32;&#32;&#32;&#32;_Fwd_list_node_base*
386 &#32;&#32;&#32;&#32;_M_insert_after(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args);
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
389 &#32;&#32;&#32;&#32;&#32;&#32;_M_put_node(_Node*&#32;__p)
390 &#32;&#32;&#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Node_alloc_traits::pointer&#32;_Ptr;
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;std::pointer_traits&lt;_Ptr&gt;::pointer_to(*__p);
393 &#32;&#32;&#32;&#32;_Node_alloc_traits::deallocate(_M_get_Node_allocator(),&#32;__ptr,&#32;1);
394 &#32;&#32;&#32;&#32;&#32;&#32;}
395 
396 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*
397 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_after(_Fwd_list_node_base*&#32;__pos);
398 
399 &#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*
400 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase_after(_Fwd_list_node_base*&#32;__pos,
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fwd_list_node_base*&#32;__last);
402 &#32;&#32;&#32;&#32;};
403 
430 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;allocator&lt;_Tp&gt;&gt;
431 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>forward_list&#32;:&#32;<emphasis role="keyword">private</emphasis>&#32;_Fwd_list_base&lt;_Tp,&#32;_Alloc&gt;
432 &#32;&#32;&#32;&#32;{
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;remove_cv&lt;_Tp&gt;::type,&#32;_Tp&gt;<link linkend="_classvalue">::value</link>,
434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::forward_list&#32;must&#32;have&#32;a&#32;non-const,&#32;non-volatile&#32;value_type&quot;</emphasis>);
435 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;||&#32;defined&#32;__STRICT_ANSI__</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;typename&#32;_Alloc::value_type,&#32;_Tp&gt;::value,
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::forward_list&#32;must&#32;have&#32;the&#32;same&#32;value_type&#32;as&#32;its&#32;allocator&quot;</emphasis>);
438 <emphasis role="preprocessor">#endif</emphasis>
439 
440 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_base&lt;_Tp,&#32;_Alloc&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Base;
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Fwd_list_node_base&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node_base;
443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Node&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Node;
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Node_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_type;
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_Node_alloc_traits&#32;&#32;&#32;&#32;_Node_alloc_traits;
446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator_traits&lt;__alloc_rebind&lt;_Alloc,&#32;_Tp&gt;&gt;&#32;_Alloc_traits;
447 
448 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;types:</emphasis>
450 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;const_pointer;
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
454 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
455 
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.4.2&#32;construct/copy/destroy:</emphasis>
463 
467 &#32;&#32;&#32;&#32;&#32;&#32;forward_list()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
468 
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
474 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__al)&#32;noexcept
475 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__al))
476 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
477 
483 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(<emphasis role="keyword">const</emphasis>&#32;forward_list&amp;&#32;__list,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;_Alloc&gt;&amp;&#32;__al)
485 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__al))
486 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_range_initialize(__list.begin(),&#32;__list.end());&#32;}
487 
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
489 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(forward_list&amp;&amp;&#32;__list,&#32;_Node_alloc_type&amp;&amp;&#32;__al,
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;false_type)
491 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__al))
492 &#32;&#32;&#32;&#32;&#32;&#32;{
493 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;__list&#32;is&#32;not&#32;empty&#32;it&#32;means&#32;its&#32;allocator&#32;is&#32;not&#32;equal&#32;to&#32;__a,</emphasis>
494 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;need&#32;to&#32;move&#32;from&#32;each&#32;element&#32;individually.</emphasis>
495 &#32;&#32;&#32;&#32;insert_after(cbefore_begin(),
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__make_move_if_noexcept_iterator(__list.begin()),
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__make_move_if_noexcept_iterator(__list.end()));
498 &#32;&#32;&#32;&#32;&#32;&#32;}
499 
500 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(forward_list&amp;&amp;&#32;__list,&#32;_Node_alloc_type&amp;&amp;&#32;__al,
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;true_type)
502 &#32;&#32;&#32;&#32;&#32;&#32;noexcept
503 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;_Node_alloc_type(__al),&#32;true_type{})
504 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
505 
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
512 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(forward_list&amp;&amp;&#32;__list,
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;_Alloc&gt;&amp;&#32;__al)
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Node_alloc_traits::_S_always_equal())
515 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;forward_list(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;_Node_alloc_type(__al),
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Node_alloc_traits::is_always_equal{})
517 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
518 
527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
528 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__al&#32;=&#32;_Alloc())
529 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__al))
530 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_default_initialize(__n);&#32;}
531 
541 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__al&#32;=&#32;_Alloc())
543 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__al))
544 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_fill_initialize(__n,&#32;__value);&#32;}
545 
556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
558 &#32;&#32;&#32;&#32;forward_list(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__al&#32;=&#32;_Alloc())
560 &#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__al))
561 &#32;&#32;&#32;&#32;{&#32;_M_range_initialize(__first,&#32;__last);&#32;}
562 
568 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(<emphasis role="keyword">const</emphasis>&#32;forward_list&amp;&#32;__list)
569 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_traits::_S_select_on_copy(
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__list._M_get_Node_allocator()))
571 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_range_initialize(__list.begin(),&#32;__list.end());&#32;}
572 
582 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(forward_list&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
583 
592 &#32;&#32;&#32;&#32;&#32;&#32;forward_list(std::initializer_list&lt;_Tp&gt;&#32;__il,
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__al&#32;=&#32;_Alloc())
594 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(_Node_alloc_type(__al))
595 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_range_initialize(__il.begin(),&#32;__il.end());&#32;}
596 
600 &#32;&#32;&#32;&#32;&#32;&#32;~forward_list()&#32;<emphasis role="keyword">noexcept</emphasis>
601 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
602 
612 &#32;&#32;&#32;&#32;&#32;&#32;forward_list&amp;
613 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;forward_list&amp;&#32;__list);
614 
627 &#32;&#32;&#32;&#32;&#32;&#32;forward_list&amp;
628 &#32;&#32;&#32;&#32;&#32;&#32;operator=(forward_list&amp;&amp;&#32;__list)
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Node_alloc_traits::_S_nothrow_move())
630 &#32;&#32;&#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__move_storage&#32;=
632 &#32;&#32;&#32;&#32;&#32;&#32;_Node_alloc_traits::_S_propagate_on_move_assign()
633 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;_Node_alloc_traits::_S_always_equal();
634 &#32;&#32;&#32;&#32;_M_move_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;__bool_constant&lt;__move_storage&gt;());
635 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
636 &#32;&#32;&#32;&#32;&#32;&#32;}
637 
646 &#32;&#32;&#32;&#32;&#32;&#32;forward_list&amp;
647 &#32;&#32;&#32;&#32;&#32;&#32;operator=(std::initializer_list&lt;_Tp&gt;&#32;__il)
648 &#32;&#32;&#32;&#32;&#32;&#32;{
649 &#32;&#32;&#32;&#32;assign(__il);
650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
651 &#32;&#32;&#32;&#32;&#32;&#32;}
652 
665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
667 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
668 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
669 &#32;&#32;&#32;&#32;{
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;is_assignable&lt;_Tp,&#32;<emphasis role="keyword">decltype</emphasis>(*__first)&gt;&#32;__assignable;
671 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(__first,&#32;__last,&#32;__assignable());
672 &#32;&#32;&#32;&#32;}
673 
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
685 &#32;&#32;&#32;&#32;&#32;&#32;assign(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
686 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_assign_n(__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;is_copy_assignable&lt;_Tp&gt;());&#32;}
687 
696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
697 &#32;&#32;&#32;&#32;&#32;&#32;assign(std::initializer_list&lt;_Tp&gt;&#32;__il)
698 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;assign(__il.begin(),&#32;__il.end());&#32;}
699 
701 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
702 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
703 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(this-&gt;_M_get_Node_allocator());&#32;}
704 
705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.4.3&#32;iterators:</emphasis>
706 
711 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
712 &#32;&#32;&#32;&#32;&#32;&#32;iterator
713 &#32;&#32;&#32;&#32;&#32;&#32;before_begin()&#32;<emphasis role="keyword">noexcept</emphasis>
714 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(&amp;this-&gt;_M_impl._M_head);&#32;}
715 
721 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
722 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
723 &#32;&#32;&#32;&#32;&#32;&#32;before_begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
724 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(&amp;this-&gt;_M_impl._M_head);&#32;}
725 
730 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
731 &#32;&#32;&#32;&#32;&#32;&#32;iterator
732 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">noexcept</emphasis>
733 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_impl._M_head._M_next);&#32;}
734 
740 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
741 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
742 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
743 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_head._M_next);&#32;}
744 
750 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
751 &#32;&#32;&#32;&#32;&#32;&#32;iterator
752 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
753 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(<emphasis role="keyword">nullptr</emphasis>);&#32;}
754 
760 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
761 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
762 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
763 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(<emphasis role="keyword">nullptr</emphasis>);&#32;}
764 
770 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
771 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
772 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
773 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_impl._M_head._M_next);&#32;}
774 
780 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
781 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
782 &#32;&#32;&#32;&#32;&#32;&#32;cbefore_begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
783 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(&amp;this-&gt;_M_impl._M_head);&#32;}
784 
790 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
791 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
792 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
793 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(<emphasis role="keyword">nullptr</emphasis>);&#32;}
794 
799 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
801 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
802 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_impl._M_head._M_next&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
803 
807 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
808 &#32;&#32;&#32;&#32;&#32;&#32;size_type
809 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
810 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Node_alloc_traits::max_size(this-&gt;_M_get_Node_allocator());&#32;}
811 
812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.4.4&#32;element&#32;access:</emphasis>
813 
818 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
819 &#32;&#32;&#32;&#32;&#32;&#32;reference
820 &#32;&#32;&#32;&#32;&#32;&#32;front()
821 &#32;&#32;&#32;&#32;&#32;&#32;{
822 &#32;&#32;&#32;&#32;_Node*&#32;__front&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_impl._M_head._M_next);
823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__front-&gt;_M_valptr();
824 &#32;&#32;&#32;&#32;&#32;&#32;}
825 
830 &#32;&#32;&#32;&#32;&#32;&#32;[[__nodiscard__]]
831 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
832 &#32;&#32;&#32;&#32;&#32;&#32;front()<emphasis role="keyword">&#32;const</emphasis>
833 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
834 &#32;&#32;&#32;&#32;_Node*&#32;__front&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Node*<emphasis role="keyword">&gt;</emphasis>(this-&gt;_M_impl._M_head._M_next);
835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__front-&gt;_M_valptr();
836 &#32;&#32;&#32;&#32;&#32;&#32;}
837 
838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.4.5&#32;modifiers:</emphasis>
839 
851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
852 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
853 &#32;&#32;&#32;&#32;reference
854 <emphasis role="preprocessor">#else</emphasis>
855 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
856 <emphasis role="preprocessor">#endif</emphasis>
857 &#32;&#32;&#32;&#32;emplace_front(_Args&amp;&amp;...&#32;__args)
858 &#32;&#32;&#32;&#32;{
859 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_insert_after(cbefore_begin(),
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
861 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;front();
863 <emphasis role="preprocessor">#endif</emphasis>
864 &#32;&#32;&#32;&#32;}
865 
876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
877 &#32;&#32;&#32;&#32;&#32;&#32;push_front(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
878 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_insert_after(cbefore_begin(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
879 
883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
884 &#32;&#32;&#32;&#32;&#32;&#32;push_front(_Tp&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
885 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_insert_after(cbefore_begin(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));&#32;}
886 
899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
900 &#32;&#32;&#32;&#32;&#32;&#32;pop_front()
901 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_erase_after(&amp;this-&gt;_M_impl._M_head);&#32;}
902 
916 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
917 &#32;&#32;&#32;&#32;iterator
918 &#32;&#32;&#32;&#32;emplace_after(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
919 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_insert_after(__pos,
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...));&#32;}
921 
934 &#32;&#32;&#32;&#32;&#32;&#32;iterator
935 &#32;&#32;&#32;&#32;&#32;&#32;insert_after(const_iterator&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
936 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_insert_after(__pos,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));&#32;}
937 
941 &#32;&#32;&#32;&#32;&#32;&#32;iterator
942 &#32;&#32;&#32;&#32;&#32;&#32;insert_after(const_iterator&#32;__pos,&#32;_Tp&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
943 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_insert_after(__pos,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)));&#32;}
944 
960 &#32;&#32;&#32;&#32;&#32;&#32;iterator
961 &#32;&#32;&#32;&#32;&#32;&#32;insert_after(const_iterator&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
962 
978 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
980 &#32;&#32;&#32;&#32;iterator
981 &#32;&#32;&#32;&#32;insert_after(const_iterator&#32;__pos,
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__first,&#32;_InputIterator&#32;__last);
983 
999 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1000 &#32;&#32;&#32;&#32;&#32;&#32;insert_after(const_iterator&#32;__pos,&#32;std::initializer_list&lt;_Tp&gt;&#32;__il)
1001 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;insert_after(__pos,&#32;__il.begin(),&#32;__il.end());&#32;}
1002 
1020 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1021 &#32;&#32;&#32;&#32;&#32;&#32;erase_after(const_iterator&#32;__pos)
1022 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_erase_after(<emphasis role="keyword">const_cast&lt;</emphasis>_Node_base*<emphasis role="keyword">&gt;</emphasis>
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__pos._M_node)));&#32;}
1024 
1043 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1044 &#32;&#32;&#32;&#32;&#32;&#32;erase_after(const_iterator&#32;__pos,&#32;const_iterator&#32;__last)
1045 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_erase_after(<emphasis role="keyword">const_cast&lt;</emphasis>_Node_base*<emphasis role="keyword">&gt;</emphasis>
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__pos._M_node),
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis>_Node_base*<emphasis role="keyword">&gt;</emphasis>
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__last._M_node)));&#32;}
1049 
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1063 &#32;&#32;&#32;&#32;&#32;&#32;swap(forward_list&amp;&#32;__list)&#32;<emphasis role="keyword">noexcept</emphasis>
1064 &#32;&#32;&#32;&#32;&#32;&#32;{
1065 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(this-&gt;_M_impl._M_head._M_next,
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__list._M_impl._M_head._M_next);
1067 &#32;&#32;&#32;&#32;_Node_alloc_traits::_S_on_swap(this-&gt;_M_get_Node_allocator(),
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__list._M_get_Node_allocator());
1069 &#32;&#32;&#32;&#32;&#32;&#32;}
1070 
1082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1083 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__sz);
1084 
1097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1098 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__sz,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1099 
1108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1109 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;<emphasis role="keyword">noexcept</emphasis>
1110 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_erase_after(&amp;this-&gt;_M_impl._M_head,&#32;<emphasis role="keyword">nullptr</emphasis>);&#32;}
1111 
1112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;23.3.4.6&#32;forward_list&#32;operations:</emphasis>
1113 
1125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1126 &#32;&#32;&#32;&#32;&#32;&#32;splice_after(const_iterator&#32;__pos,&#32;forward_list&amp;&amp;&#32;__list)&#32;<emphasis role="keyword">noexcept</emphasis>
1127 &#32;&#32;&#32;&#32;&#32;&#32;{
1128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__list.empty())
1129 &#32;&#32;&#32;&#32;&#32;&#32;_M_splice_after(__pos,&#32;__list.before_begin(),&#32;__list.end());
1130 &#32;&#32;&#32;&#32;&#32;&#32;}
1131 
1132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1133 &#32;&#32;&#32;&#32;&#32;&#32;splice_after(const_iterator&#32;__pos,&#32;forward_list&amp;&#32;__list)&#32;<emphasis role="keyword">noexcept</emphasis>
1134 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;splice_after(__pos,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list));&#32;}
1135 
1146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1147 &#32;&#32;&#32;&#32;&#32;&#32;splice_after(const_iterator&#32;__pos,&#32;forward_list&amp;&amp;&#32;__list,
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>;
1149 
1150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1151 &#32;&#32;&#32;&#32;&#32;&#32;splice_after(const_iterator&#32;__pos,&#32;forward_list&amp;&#32;__list,
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__i)&#32;<emphasis role="keyword">noexcept</emphasis>
1153 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;splice_after(__pos,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;__i);&#32;}
1154 
1169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1170 &#32;&#32;&#32;&#32;&#32;&#32;splice_after(const_iterator&#32;__pos,&#32;forward_list&amp;&amp;,
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__before,&#32;const_iterator&#32;__last)&#32;<emphasis role="keyword">noexcept</emphasis>
1172 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_splice_after(__pos,&#32;__before,&#32;__last);&#32;}
1173 
1174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1175 &#32;&#32;&#32;&#32;&#32;&#32;splice_after(const_iterator&#32;__pos,&#32;forward_list&amp;,
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__before,&#32;const_iterator&#32;__last)&#32;<emphasis role="keyword">noexcept</emphasis>
1177 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_splice_after(__pos,&#32;__before,&#32;__last);&#32;}
1179 
1180 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1181 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1182 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_list_remove_return_type&#32;201806L</emphasis>
1183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__remove_return_type&#32;=&#32;size_type;
1184 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG&#32;\</emphasis>
1185 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__attribute__((__abi_tag__(&quot;__cxx20&quot;)))</emphasis>
1186 <emphasis role="preprocessor">#else</emphasis>
1187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__remove_return_type&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
1188 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</emphasis>
1189 <emphasis role="preprocessor">#endif</emphasis>
1190 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1191 
1203 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2forward__list_8h_1a365d53961b347e79c1e05ccf32d69d53">_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</link>
1204 &#32;&#32;&#32;&#32;&#32;&#32;__remove_return_type
1205 &#32;&#32;&#32;&#32;&#32;&#32;remove(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1206 
1218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
1219 &#32;&#32;&#32;&#32;__remove_return_type
1220 &#32;&#32;&#32;&#32;remove_if(_Pred&#32;__pred);
1221 
1232 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2forward__list_8h_1a365d53961b347e79c1e05ccf32d69d53">_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</link>
1233 &#32;&#32;&#32;&#32;&#32;&#32;__remove_return_type
1234 &#32;&#32;&#32;&#32;&#32;&#32;unique()
1235 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;unique(std::equal_to&lt;_Tp&gt;());&#32;}
1236 
1237 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_FWDLIST_REMOVE_RETURN_TYPE_TAG</emphasis>
1238 
1251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BinPred&gt;
1252 &#32;&#32;&#32;&#32;__remove_return_type
1253 &#32;&#32;&#32;&#32;unique(_BinPred&#32;__binary_pred);
1254 
1264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1265 &#32;&#32;&#32;&#32;&#32;&#32;merge(forward_list&amp;&amp;&#32;__list)
1266 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;merge(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;std::less&lt;_Tp&gt;());&#32;}
1267 
1268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1269 &#32;&#32;&#32;&#32;&#32;&#32;merge(forward_list&amp;&#32;__list)
1270 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;merge(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list));&#32;}
1271 
1283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Comp&gt;
1284 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1285 &#32;&#32;&#32;&#32;merge(forward_list&amp;&amp;&#32;__list,&#32;_Comp&#32;__comp);
1286 
1287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Comp&gt;
1288 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1289 &#32;&#32;&#32;&#32;merge(forward_list&amp;&#32;__list,&#32;_Comp&#32;__comp)
1290 &#32;&#32;&#32;&#32;{&#32;merge(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;__comp);&#32;}
1291 
1298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1299 &#32;&#32;&#32;&#32;&#32;&#32;sort()
1300 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;sort(std::less&lt;_Tp&gt;());&#32;}
1301 
1308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Comp&gt;
1309 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1310 &#32;&#32;&#32;&#32;sort(_Comp&#32;__comp);
1311 
1317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1318 &#32;&#32;&#32;&#32;&#32;&#32;reverse()&#32;<emphasis role="keyword">noexcept</emphasis>
1319 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_impl._M_head._M_reverse_after();&#32;}
1320 
1321 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;the&#32;range&#32;constructor&#32;to&#32;implement&#32;[23.3.4.2]/9</emphasis>
1323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1324 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1325 &#32;&#32;&#32;&#32;_M_range_initialize(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last);
1326 
1327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;forward_list(n,v,a),&#32;and&#32;the&#32;range&#32;constructor&#32;when&#32;it</emphasis>
1328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;turns&#32;out&#32;to&#32;be&#32;the&#32;same&#32;thing.</emphasis>
1329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1330 &#32;&#32;&#32;&#32;&#32;&#32;_M_fill_initialize(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__value);
1331 
1332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;splice_after&#32;and&#32;insert_after.</emphasis>
1333 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1334 &#32;&#32;&#32;&#32;&#32;&#32;_M_splice_after(const_iterator&#32;__pos,&#32;const_iterator&#32;__before,
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__last);
1336 
1337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;forward_list(n).</emphasis>
1338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1339 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_initialize(size_type&#32;__n);
1340 
1341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;resize(sz).</emphasis>
1342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1343 &#32;&#32;&#32;&#32;&#32;&#32;_M_default_insert_after(const_iterator&#32;__pos,&#32;size_type&#32;__n);
1344 
1345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;operator=(forward_list&amp;&amp;)</emphasis>
1346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1347 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(forward_list&amp;&amp;&#32;__list,&#32;true_type)&#32;<emphasis role="keyword">noexcept</emphasis>
1348 &#32;&#32;&#32;&#32;&#32;&#32;{
1349 &#32;&#32;&#32;&#32;clear();
1350 &#32;&#32;&#32;&#32;this-&gt;_M_impl._M_head._M_next&#32;=&#32;__list._M_impl._M_head._M_next;
1351 &#32;&#32;&#32;&#32;__list._M_impl._M_head._M_next&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1352 &#32;&#32;&#32;&#32;std::__alloc_on_move(this-&gt;_M_get_Node_allocator(),
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__list._M_get_Node_allocator());
1354 &#32;&#32;&#32;&#32;&#32;&#32;}
1355 
1356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;operator=(forward_list&amp;&amp;)</emphasis>
1357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1358 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(forward_list&amp;&amp;&#32;__list,&#32;false_type)
1359 &#32;&#32;&#32;&#32;&#32;&#32;{
1360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__list._M_get_Node_allocator()&#32;==&#32;this-&gt;_M_get_Node_allocator())
1361 &#32;&#32;&#32;&#32;&#32;&#32;_M_move_assign(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__list),&#32;true_type());
1362 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rvalue&apos;s&#32;allocator&#32;cannot&#32;be&#32;moved,&#32;or&#32;is&#32;not&#32;equal,</emphasis>
1364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;we&#32;need&#32;to&#32;individually&#32;move&#32;each&#32;element.</emphasis>
1365 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;assign(std::make_move_iterator(__list.begin()),
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::make_move_iterator(__list.end()));
1367 &#32;&#32;&#32;&#32;&#32;&#32;}
1368 
1369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;assign(_InputIterator,&#32;_InputIterator)&#32;if&#32;_Tp&#32;is</emphasis>
1370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CopyAssignable.</emphasis>
1371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1372 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1373 &#32;&#32;&#32;&#32;_M_assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;true_type)
1374 &#32;&#32;&#32;&#32;{
1375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__prev&#32;=&#32;before_begin();
1376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__curr&#32;=&#32;begin();
1377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__end&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1378 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__curr&#32;!=&#32;__end&#32;&amp;&amp;&#32;__first&#32;!=&#32;__last)
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__curr&#32;=&#32;*__first;
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__prev;
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__curr;
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__first;
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;!=&#32;__last)
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert_after(__prev,&#32;__first,&#32;__last);
1387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__curr&#32;!=&#32;__end)
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;erase_after(__prev,&#32;__end);
1389 &#32;&#32;&#32;&#32;}
1390 
1391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;assign(_InputIterator,&#32;_InputIterator)&#32;if&#32;_Tp&#32;is&#32;not</emphasis>
1392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;CopyAssignable.</emphasis>
1393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1394 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1395 &#32;&#32;&#32;&#32;_M_assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;false_type)
1396 &#32;&#32;&#32;&#32;{
1397 &#32;&#32;&#32;&#32;&#32;&#32;clear();
1398 &#32;&#32;&#32;&#32;&#32;&#32;insert_after(cbefore_begin(),&#32;__first,&#32;__last);
1399 &#32;&#32;&#32;&#32;}
1400 
1401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;assign(size_type,&#32;const&#32;_Tp&amp;)&#32;if&#32;Tp&#32;is&#32;CopyAssignable</emphasis>
1402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1403 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_n(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;true_type)
1404 &#32;&#32;&#32;&#32;&#32;&#32;{
1405 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__prev&#32;=&#32;before_begin();
1406 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__curr&#32;=&#32;begin();
1407 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__end&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
1408 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__curr&#32;!=&#32;__end&#32;&amp;&amp;&#32;__n&#32;&gt;&#32;0)
1409 &#32;&#32;&#32;&#32;&#32;&#32;{
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__curr&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__prev;
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++__curr;
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--__n;
1414 &#32;&#32;&#32;&#32;&#32;&#32;}
1415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;0)
1416 &#32;&#32;&#32;&#32;&#32;&#32;insert_after(__prev,&#32;__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__curr&#32;!=&#32;__end)
1418 &#32;&#32;&#32;&#32;&#32;&#32;erase_after(__prev,&#32;__end);
1419 &#32;&#32;&#32;&#32;&#32;&#32;}
1420 
1421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;assign(size_type,&#32;const&#32;_Tp&amp;)&#32;if&#32;Tp&#32;is&#32;non-CopyAssignable</emphasis>
1422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1423 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_n(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;false_type)
1424 &#32;&#32;&#32;&#32;&#32;&#32;{
1425 &#32;&#32;&#32;&#32;clear();
1426 &#32;&#32;&#32;&#32;insert_after(cbefore_begin(),&#32;__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
1427 &#32;&#32;&#32;&#32;&#32;&#32;}
1428 &#32;&#32;&#32;&#32;};
1429 
1430 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
1431 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_ValT&gt;,
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1436 &#32;&#32;&#32;&#32;forward_list(_InputIterator,&#32;_InputIterator,&#32;_Allocator&#32;=&#32;_Allocator())
1437 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;forward_list&lt;_ValT,&#32;_Allocator&gt;;
1438 <emphasis role="preprocessor">#endif</emphasis>
1439 
1450 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1451 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1452 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1453 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__lx,
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__ly);
1455 
1456 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1468 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1469 &#32;&#32;&#32;&#32;[[nodiscard]]
1470 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__detail::__synth3way_t&lt;_Tp&gt;
1471 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__x,
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__y)
1473 &#32;&#32;&#32;&#32;{
1474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::lexicographical_compare_three_way(__x.begin(),&#32;__x.end(),
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y.begin(),&#32;__y.end(),
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::__synth3way);
1477 &#32;&#32;&#32;&#32;}
1478 <emphasis role="preprocessor">#else</emphasis>
1491 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1492 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1493 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1494 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__lx,
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__ly)
1496 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a076cfce541233dc2534e44d067d41ad4">std::lexicographical_compare</link>(__lx.cbegin(),&#32;__lx.cend(),
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ly.cbegin(),&#32;__ly.cend());&#32;}
1498 
1500 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1501 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1502 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1503 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__lx,
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__ly)
1505 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lx&#32;==&#32;__ly);&#32;}
1506 
1508 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1509 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1510 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1511 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__lx,
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__ly)
1513 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__ly&#32;&lt;&#32;__lx);&#32;}
1514 
1516 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1517 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1518 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1519 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__lx,
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__ly)
1521 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lx&#32;&lt;&#32;__ly);&#32;}
1522 
1524 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1525 &#32;&#32;&#32;&#32;[[__nodiscard__]]
1526 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1527 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__lx,
1528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__ly)
1529 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__ly&#32;&lt;&#32;__lx);&#32;}
1530 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1531 
1533 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1534 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1535 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__lx,
1536 &#32;&#32;&#32;&#32;&#32;forward_list&lt;_Tp,&#32;_Alloc&gt;&amp;&#32;__ly)
1537 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__lx.swap(__ly)))
1538 &#32;&#32;&#32;&#32;{&#32;__lx.swap(__ly);&#32;}
1539 
1540 _GLIBCXX_END_NAMESPACE_CONTAINER
1541 _GLIBCXX_END_NAMESPACE_VERSION
1542 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1543 
1544 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_FORWARD_LIST_H</emphasis>
</programlisting></section>
