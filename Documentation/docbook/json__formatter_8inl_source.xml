<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_json__formatter_8inl_source" xml:lang="en-US">
<title>json_formatter.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/json_formatter.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
8 <emphasis role="comment">//#&#32;{{</emphasis>
9 <emphasis role="preprocessor">#if&#32;!TOML_IMPLEMENTATION</emphasis>
10 <emphasis role="preprocessor">#error&#32;This&#32;is&#32;an&#32;implementation-only&#32;header.</emphasis>
11 <emphasis role="preprocessor">#endif</emphasis>
12 <emphasis role="comment">//#&#32;}}</emphasis>
13 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
14 
15 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_json__formatter_8h">json_formatter.h</link>&quot;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_print__to__stream_8h">print_to_stream.h</link>&quot;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_table_8h">table.h</link>&quot;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_array_8h">array.h</link>&quot;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
20 
21 <link linkend="_json__formatter_8inl_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
22 {
23 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
24 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;json_formatter::print(<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;&#32;tbl)
25 &#32;&#32;&#32;&#32;{
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tbl.empty())
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="stringliteral">&quot;{}&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
31 
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="charliteral">&apos;{&apos;</emphasis>);
33 
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link>())
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;increase_indent();
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;[k,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>]&#32;:&#32;tbl)
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_newline(<emphasis role="keyword">true</emphasis>);
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_indent();
44 
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_string(k.str(),&#32;<emphasis role="keyword">false</emphasis>);
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(terse_kvps())
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="stringliteral">&quot;:&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="stringliteral">&quot;&#32;:&#32;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2glm_2test_2gtc_2gtc__packing_8cpp_1a57a79a4ef71048df91475bed8ba43e2b">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_forward__declarations_8h_1ae225507e97029b1deaa6b3c2fb8634ea">indent_sub_tables</link>())
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decrease_indent();
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_newline(<emphasis role="keyword">true</emphasis>);
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_indent();
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="charliteral">&apos;}&apos;</emphasis>);
66 &#32;&#32;&#32;&#32;}
67 
68 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
69 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;json_formatter::print(<emphasis role="keyword">const</emphasis>&#32;toml::array&amp;&#32;arr)
70 &#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(arr.empty())
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="stringliteral">&quot;[]&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
76 
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="charliteral">&apos;[&apos;</emphasis>);
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link>())
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;increase_indent();
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;arr.size();&#32;i++)
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&gt;&#32;0<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>)
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="charliteral">&apos;,&apos;</emphasis>);
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_newline(<emphasis role="keyword">true</emphasis>);
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_indent();
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;arr[i];
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.type();
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;!=&#32;node_type::none);
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));&#32;<emphasis role="keywordflow">break</emphasis>;
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2glm_2test_2gtc_2gtc__packing_8cpp_1a57a79a4ef71048df91475bed8ba43e2b">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>,&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_forward__declarations_8h_1af3a33663e90d253686912eba69982c35">indent_array_elements</link>())
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decrease_indent();
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_newline(<emphasis role="keyword">true</emphasis>);
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_indent();
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_unformatted(<emphasis role="charliteral">&apos;]&apos;</emphasis>);
102 &#32;&#32;&#32;&#32;}
103 
104 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;json_formatter::print()
106 &#32;&#32;&#32;&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dump_failed_parse_result())
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
109 
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;source_type&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>().<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>())
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::table:&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classtable">table</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>()));&#32;<emphasis role="keywordflow">break</emphasis>;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::array:&#32;<link linkend="__classes_2lib_2glm_2test_2gtx_2gtx__type__aligned_8cpp_1a5df63d15d7c51355174224d9d0c6518a">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classarray">array</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>()));&#32;<emphasis role="keywordflow">break</emphasis>;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="__classes_2lib_2glm_2test_2gtc_2gtc__packing_8cpp_1a57a79a4ef71048df91475bed8ba43e2b">print_value</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a633906574fe6e39b7f2840bed0e49832">source</link>(),&#32;source_type);
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
116 &#32;&#32;&#32;&#32;}
117 }
118 <link linkend="_preprocessor_8h_1aab40a6832fe11707ab2cc1b83d8a1270">TOML_NAMESPACE_END</link>;
119 
120 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
121 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
</programlisting></section>
