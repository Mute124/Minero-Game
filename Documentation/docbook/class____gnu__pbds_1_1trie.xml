<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__pbds_1_1trie" xml:lang="en-US">
<title>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; Class Template Reference</title>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;assoc_container.hpp&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1trie__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1trie__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef _ATraits <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link></para>

<para>Element access traits type. </para>
</listitem>
            <listitem><para>typedef _ATraits <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link></para>

<para>Element access traits type. </para>
</listitem>
            <listitem><para>typedef _ATraits <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link></para>

<para>Element access traits type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1a15fb8473c62b9bdb03a65215951edea4">trie</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1a5feddcc5a253f6fc4ff4567ad0359b6d">trie</link> (const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1trie_1a0aaac7de1516a27993552064782cdec2">trie</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1trie_1a0f9b513af82c2a51ba44849a2155096d">trie</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp;t)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1acf756c3bacd6f2624fd1b9617afc174a">trie</link> (const <link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1trie_1af844756006f490d4e85e0289c00a8799">~trie</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp; <link linkend="_class____gnu__pbds_1_1trie_1aa426ba26a6c58d6978bf19764b5a5fd4">operator=</link> (const <link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1trie_1a29d45c6f89db1d8c623e831dd8f1043f">swap</link> (<link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1a15fb8473c62b9bdb03a65215951edea4">trie</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1a5feddcc5a253f6fc4ff4567ad0359b6d">trie</link> (const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1trie_1a0aaac7de1516a27993552064782cdec2">trie</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1trie_1a0f9b513af82c2a51ba44849a2155096d">trie</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp;t)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1acf756c3bacd6f2624fd1b9617afc174a">trie</link> (const <link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1trie_1af844756006f490d4e85e0289c00a8799">~trie</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp; <link linkend="_class____gnu__pbds_1_1trie_1aa426ba26a6c58d6978bf19764b5a5fd4">operator=</link> (const <link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1trie_1a29d45c6f89db1d8c623e831dd8f1043f">swap</link> (<link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1a15fb8473c62b9bdb03a65215951edea4">trie</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1a5feddcc5a253f6fc4ff4567ad0359b6d">trie</link> (const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp;t)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1trie_1a0aaac7de1516a27993552064782cdec2">trie</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1trie_1a0f9b513af82c2a51ba44849a2155096d">trie</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp;t)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie_1acf756c3bacd6f2624fd1b9617afc174a">trie</link> (const <link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1trie_1af844756006f490d4e85e0289c00a8799">~trie</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp; <link linkend="_class____gnu__pbds_1_1trie_1aa426ba26a6c58d6978bf19764b5a5fd4">operator=</link> (const <link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1trie_1a29d45c6f89db1d8c623e831dd8f1043f">swap</link> (<link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp;other)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Key, typename Mapped, typename _ATraits = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc = std::allocator&lt;char&gt;&gt;<?linebreak?>class __gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</title></simplesect>

<para>A trie-based container.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Key</entry><entry>
<para>Key type. </para>
</entry>
                            </row>
                            <row>
<entry>Mapped</entry><entry>
<para>Map type. </para>
</entry>
                            </row>
                            <row>
<entry>_ATraits</entry><entry>
<para>Element access traits. </para>
</entry>
                            </row>
                            <row>
<entry>Tag</entry><entry>
<para>Instantiating data structure type, see <link linkend="_struct____gnu__pbds_1_1container__tag">container_tag</link>. </para>
</entry>
                            </row>
                            <row>
<entry>Node_Update</entry><entry>
<para>Updates trie internal-nodes, restores invariants when invalidated. XXX See design::tree-based-containers::node invariants. </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Base tag choice is <link linkend="_struct____gnu__pbds_1_1pat__trie__tag">pat_trie_tag</link>.</para>

<para>Base is <link linkend="_class____gnu__pbds_1_1basic__branch">basic_branch</link>. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1"/><section>
    <title>access_traits<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>access_traits</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>access_traits</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef _ATraits <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::access_traits</computeroutput></para><para>

<para>Element access traits type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1"/><section>
    <title>access_traits<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>access_traits</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>access_traits</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef _ATraits <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::access_traits</computeroutput></para><para>

<para>Element access traits type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1"/><section>
    <title>access_traits<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>access_traits</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>access_traits</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef _ATraits <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::access_traits</computeroutput></para><para>

<para>Element access traits type. </para>
</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a15fb8473c62b9bdb03a65215951edea4"/><section>
    <title>trie()<computeroutput>[1/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a5feddcc5a253f6fc4ff4567ad0359b6d"/><section>
    <title>trie()<computeroutput>[2/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_access_traits will be copied by the _ATraits object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a0aaac7de1516a27993552064782cdec2"/><section>
    <title>trie()<computeroutput>[3/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a0f9b513af82c2a51ba44849a2155096d"/><section>
    <title>trie()<computeroutput>[4/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (It first, It last, const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1acf756c3bacd6f2624fd1b9617afc174a"/><section>
    <title>trie()<computeroutput>[5/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (const <link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1af844756006f490d4e85e0289c00a8799"/><section>
    <title>~trie()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>~trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>~trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1trie">trie</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a15fb8473c62b9bdb03a65215951edea4"/><section>
    <title>trie()<computeroutput>[6/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a5feddcc5a253f6fc4ff4567ad0359b6d"/><section>
    <title>trie()<computeroutput>[7/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_access_traits will be copied by the _ATraits object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a0aaac7de1516a27993552064782cdec2"/><section>
    <title>trie()<computeroutput>[8/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a0f9b513af82c2a51ba44849a2155096d"/><section>
    <title>trie()<computeroutput>[9/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (It first, It last, const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1acf756c3bacd6f2624fd1b9617afc174a"/><section>
    <title>trie()<computeroutput>[10/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (const <link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1af844756006f490d4e85e0289c00a8799"/><section>
    <title>~trie()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>~trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>~trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1trie">trie</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a15fb8473c62b9bdb03a65215951edea4"/><section>
    <title>trie()<computeroutput>[11/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a5feddcc5a253f6fc4ff4567ad0359b6d"/><section>
    <title>trie()<computeroutput>[12/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_access_traits will be copied by the _ATraits object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a0aaac7de1516a27993552064782cdec2"/><section>
    <title>trie()<computeroutput>[13/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a0f9b513af82c2a51ba44849a2155096d"/><section>
    <title>trie()<computeroutput>[14/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (It first, It last, const <link linkend="_class____gnu__pbds_1_1trie_1a77193204101c7dda4a7286f56b9731c1">access_traits</link> &amp; t)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1acf756c3bacd6f2624fd1b9617afc174a"/><section>
    <title>trie()<computeroutput>[15/15]</computeroutput></title>
<indexterm><primary>trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::trie (const <link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1af844756006f490d4e85e0289c00a8799"/><section>
    <title>~trie()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>~trie</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>~trie</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1trie">trie</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1trie_1aa426ba26a6c58d6978bf19764b5a5fd4"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp; <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1trie_aa426ba26a6c58d6978bf19764b5a5fd4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1aa426ba26a6c58d6978bf19764b5a5fd4"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp; <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1trie_aa426ba26a6c58d6978bf19764b5a5fd4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1aa426ba26a6c58d6978bf19764b5a5fd4"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1trie">trie</link> &amp; <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1trie_aa426ba26a6c58d6978bf19764b5a5fd4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a29d45c6f89db1d8c623e831dd8f1043f"/><section>
    <title>swap()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1trie_a29d45c6f89db1d8c623e831dd8f1043f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a29d45c6f89db1d8c623e831dd8f1043f"/><section>
    <title>swap()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1trie_1a29d45c6f89db1d8c623e831dd8f1043f"/><section>
    <title>swap()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::trie&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename _ATraits  = typename detail::default_trie_access_traits&lt;Key&gt;::type, typename Tag  = pat_trie_tag, template&lt; typename Node_CItr, typename Node_Itr, typename _ATraits_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1trie">__gnu_pbds::trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1trie">trie</link>&lt; Key, Mapped, _ATraits, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/<link linkend="_lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link></section>
</section>
