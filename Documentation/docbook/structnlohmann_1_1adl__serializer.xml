<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structnlohmann_1_1adl__serializer" xml:lang="en-US">
<title>nlohmann::adl_serializer&lt; ValueType, typename &gt; Struct Template Reference</title>
<indexterm><primary>nlohmann::adl_serializer&lt; ValueType, typename &gt;</primary></indexterm>
<para>

<para>default JSONSerializer template argument </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename BasicJsonType , typename TargetType  = ValueType&gt; </para><para>static auto <link linkend="_structnlohmann_1_1adl__serializer_1a8180f52bf21fc610705bc521f22116ae">from_json</link> (BasicJsonType &amp;&amp;j, TargetType &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept(noexcept(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))) -&gt; decltype(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>), <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())</para>

<para>convert a JSON value to any value type </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename TargetType  = ValueType&gt; </para><para>static auto <link linkend="_structnlohmann_1_1adl__serializer_1abdae6028cdef1bf1838b47eeb7022ebc">from_json</link> (BasicJsonType &amp;&amp;j) noexcept(noexcept(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), detail::identity_tag&lt; TargetType &gt; {}))) -&gt; decltype(::nlohmann::from_json(std::forward&lt; BasicJsonType &gt;(j), detail::identity_tag&lt; TargetType &gt; {}))</para>

<para>convert a JSON value to any value type </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType , typename TargetType  = ValueType&gt; </para><para>static auto <link linkend="_structnlohmann_1_1adl__serializer_1afdcc8f0204ce8ac7d28a5403f6e1f0e7">to_json</link> (BasicJsonType &amp;j, TargetType &amp;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>) noexcept(noexcept(::nlohmann::to_json(j, std::forward&lt; TargetType &gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)))) -&gt; decltype(::nlohmann::to_json(j, std::forward&lt; TargetType &gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)), <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())</para>

<para>convert any value type to a JSON value </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename ValueType, typename&gt;<?linebreak?>struct nlohmann::adl_serializer&lt; ValueType, typename &gt;</title></simplesect>

<para>default JSONSerializer template argument </para>



<para>This serializer ignores the template arguments and uses ADL (<link xlink:href="https://en.cppreference.com/w/cpp/language/adl">argument-dependent lookup</link>) for serialization.</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/adl_serializer/">https://json.nlohmann.me/api/adl_serializer/</link> </para>
</formalpara>
</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_structnlohmann_1_1adl__serializer_1abdae6028cdef1bf1838b47eeb7022ebc"/><section>
    <title>from_json()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>from_json</primary><secondary>nlohmann::adl_serializer&lt; ValueType, typename &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::adl_serializer&lt; ValueType, typename &gt;</primary><secondary>from_json</secondary></indexterm>
<computeroutput>template&lt;typename ValueType , typename &gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename TargetType  = ValueType&gt; </computeroutput><para><computeroutput>static auto <link linkend="_structnlohmann_1_1adl__serializer">nlohmann::adl_serializer</link>&lt; ValueType, typename &gt;::from_json (BasicJsonType &amp;&amp; j) -&gt; decltype(::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j), detail::identity_tag&lt;TargetType&gt; {}))
    <computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>convert a JSON value to any value type </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/adl_serializer/from_json/">https://json.nlohmann.me/api/adl_serializer/from_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1adl__serializer_1a8180f52bf21fc610705bc521f22116ae"/><section>
    <title>from_json()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>from_json</primary><secondary>nlohmann::adl_serializer&lt; ValueType, typename &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::adl_serializer&lt; ValueType, typename &gt;</primary><secondary>from_json</secondary></indexterm>
<computeroutput>template&lt;typename ValueType , typename &gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename TargetType  = ValueType&gt; </computeroutput><para><computeroutput>static auto <link linkend="_structnlohmann_1_1adl__serializer">nlohmann::adl_serializer</link>&lt; ValueType, typename &gt;::from_json (BasicJsonType &amp;&amp; j, TargetType &amp; val) -&gt; decltype(::nlohmann::from_json(std::forward&lt;BasicJsonType&gt;(j), <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>), <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
    <computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>convert a JSON value to any value type </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/adl_serializer/from_json/">https://json.nlohmann.me/api/adl_serializer/from_json/</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_structnlohmann_1_1adl__serializer_1afdcc8f0204ce8ac7d28a5403f6e1f0e7"/><section>
    <title>to_json()</title>
<indexterm><primary>to_json</primary><secondary>nlohmann::adl_serializer&lt; ValueType, typename &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::adl_serializer&lt; ValueType, typename &gt;</primary><secondary>to_json</secondary></indexterm>
<computeroutput>template&lt;typename ValueType , typename &gt; </computeroutput><computeroutput>template&lt;typename BasicJsonType , typename TargetType  = ValueType&gt; </computeroutput><para><computeroutput>static auto <link linkend="_structnlohmann_1_1adl__serializer">nlohmann::adl_serializer</link>&lt; ValueType, typename &gt;::to_json (BasicJsonType &amp; j, TargetType &amp;&amp; val) -&gt; decltype(::nlohmann::to_json(j, std::forward&lt;TargetType&gt;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)), <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>())
    <computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>convert any value type to a JSON value </para>
</para>

<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/adl_serializer/to_json/">https://json.nlohmann.me/api/adl_serializer/to_json/</link> </para>
</formalpara>
</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
