<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_parse__result_8h_source" xml:lang="en-US">
<title>parse_result.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/parse_result.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
8 <emphasis role="preprocessor">#if&#32;TOML_DOXYGEN&#32;||&#32;(TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS)</emphasis>
9 
10 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_table_8h">table.h</link>&quot;</emphasis>
11 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_parse__error_8h">parse_error.h</link>&quot;</emphasis>
12 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
13 
14 <link linkend="_parse__result_8h_1a24e5c42f7e94b0b0f3212744874731e6">TOML_NAMESPACE_START</link>
15 {
16 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a9592495c391e21aa0ebe67066fa73214">TOML_ABI_NAMESPACE_START</link>(noex);
17 
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classparse__result">parse_result</link>
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>storage_t
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>(toml::table)&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(parse_error)&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(parse_error)&#32;:&#32;<emphasis role="keyword">sizeof</emphasis>(toml::table));
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;align&#32;=
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">alignof</emphasis>(toml::table)&#32;&lt;&#32;<emphasis role="keyword">alignof</emphasis>(parse_error)&#32;?&#32;<emphasis role="keyword">alignof</emphasis>(parse_error)&#32;:&#32;<emphasis role="keyword">alignof</emphasis>(toml::table));
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(align)&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;bytes[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>];
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(storage_t::align)&#32;<emphasis role="keyword">mutable</emphasis>&#32;storage_t&#32;storage_;
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;err_;
67 
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Type&gt;
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1abcede63e94136f5cb19404c0a811a51d">TOML_ALWAYS_INLINE</link>
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;Type*&#32;get_as(storage_t&amp;&#32;s)&#32;<emphasis role="keyword">noexcept</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1a50ef717d8403c782d1405902faca4b80">TOML_LAUNDER</link>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>Type*<emphasis role="keyword">&gt;</emphasis>(s.bytes));
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;destroy()&#32;<emphasis role="keyword">noexcept</emphasis>
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_as&lt;parse_error&gt;(storage_)-&gt;~parse_error();
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;get_as&lt;toml::table&gt;(storage_)-&gt;~table();
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1a7ce78793e1d7badb69d1fa9a1b9dc023">parse_result</link>()&#32;noexcept&#32;<emphasis role="comment">//</emphasis>
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<emphasis role="keyword">true</emphasis>&#32;}
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;std::string{},&#32;<link linkend="_structsource__region">source_region</link>{}&#32;};
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classparse__result_1a5bfa57ac29dbff7c917931f74d90c653">parse_result</link>(toml::table&amp;&amp;&#32;tbl)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<emphasis role="keyword">false</emphasis>&#32;}
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_classtable">table</link>{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(tbl)&#32;};
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classparse__result_1a9cff481307b801bd9972917bada1b39e">parse_result</link>(parse_error&amp;&amp;&#32;err)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<emphasis role="keyword">true</emphasis>&#32;}
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(err)&#32;};
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
106 
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a05c221a7e51165b50670f63540ab218a">TOML_NODISCARD_CTOR</link>
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1a35a596e77eaea21f1b4cb725b8444cf2">parse_result</link>(<link linkend="_classparse__result">parse_result</link>&amp;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;err_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>.err_&#32;}
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>).error()&#32;};
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;<link linkend="_namespacetoml">toml</link>::<link linkend="_classtable">table</link>{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>).<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link>()&#32;};
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
117 
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result">parse_result</link>&amp;&#32;<link linkend="_classparse__result_1a749c0c01921e831bb836c5713f0c22b6">operator=</link>(<link linkend="_classparse__result">parse_result</link>&amp;&amp;&#32;rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_&#32;!=&#32;rhs.err_)
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err_&#32;=&#32;rhs.err_;
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;parse_error{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).error()&#32;};
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(storage_.bytes))&#32;toml::table{&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).table()&#32;};
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err_)
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).error();
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable">table</link>()&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(rhs).<link linkend="_classtable_1a1de2fb31555f46715dcf27ddcf6da44d">table</link>();
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
139 
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classparse__result_1a4ee2de268492e79c15475e0729e5fb91">~parse_result</link>()&#32;noexcept
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;destroy();
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
145 
148 
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classparse__result_1aebdf7ac3321c38cd4f66c5c9ca62e6cb">succeeded</link>()&#32;const&#32;noexcept
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!err_;
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
155 
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classparse__result_1a1ef708ec2ca7aa725b7d6a22a4f88a6c">failed</link>()&#32;const&#32;noexcept
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
162 
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!err_;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
169 
171 
176 
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::table&amp;&#32;<link linkend="_classparse__result_1a08838803e7d4834359276ac1d0ec79a4">table</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!err_);
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;toml::table&gt;(storage_);
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
184 
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toml::table&amp;&amp;&#32;<link linkend="_classparse__result_1a007d45efccfa57e83299b448913ca1c5">table</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!err_);
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>toml::table&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*get_as&lt;toml::table&gt;(storage_));
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
192 
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;&#32;<link linkend="_classparse__result_1a19b0dad766f7fe8c16b6304ab62e1ac4">table</link>()&#32;const&amp;&#32;noexcept
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(!err_);
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;toml::table&gt;(storage_);
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
200 
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;toml::table&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable">table</link>();
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
207 
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;toml::table&amp;&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classtable">table</link>());
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
214 
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;toml::table&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classtable">table</link>();
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
221 
223 
228 
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error&amp;&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>()&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(err_);
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;parse_error&gt;(storage_);
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
236 
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parse_error&amp;&amp;&#32;<link linkend="_classparse__result_1ab657ef6a6e4b07b66dd445023f08e3b2">error</link>()&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(err_);
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>parse_error&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*get_as&lt;parse_error&gt;(storage_));
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
244 
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;parse_error&amp;&#32;<link linkend="_classparse__result_1ac15b1a7c842a4a8e917a3f51d392556a">error</link>()&#32;const&amp;&#32;noexcept
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(err_);
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*get_as&lt;const&#32;parse_error&gt;(storage_);
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
252 
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;parse_error&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>();
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
259 
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;parse_error&amp;&amp;()&#32;<emphasis role="keyword">noexcept</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>());
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
266 
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;parse_error&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>();
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
273 
275 
278 
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classtable__iterator">iterator</link>&#32;=&#32;<link linkend="_classtable__iterator">table_iterator</link>;
281 
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_classparse__result_1a6fd7369d951acc0a8d1ab8a197f3c7bb">const_iterator</link>&#32;=&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>;
284 
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classparse__result_1a670ad11bdbaf1773aa00ae5ab19e66a0">begin</link>()&#32;noexcept
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classtable__iterator">table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>();
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
292 
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1a1b747121196915109bf6ee42999de721">begin</link>()&#32;const&#32;noexcept
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1a798d2a3a47e33f5c7ea6e4a9557b3e7b">begin</link>();
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
300 
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1af99c0ce6e4bbe37d4fc63ce33cb6a9ba">cbegin</link>()&#32;const&#32;noexcept
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1a99538d11dcdbaa6693aa17002aa40967">cbegin</link>();
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
308 
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classtable__iterator">table_iterator</link>&#32;<link linkend="_classparse__result_1a4a5a65c875a38a8248ac3b7fd3fc7669">end</link>()&#32;noexcept
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classtable__iterator">table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>();
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
315 
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1a8896ba9f0c0c1339b7be850ea8d60aa1">end</link>()&#32;const&#32;noexcept
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1aa3e78417a257af444322025c99059e2f">end</link>();
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
322 
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>&#32;<link linkend="_classparse__result_1aab6d787d388a6e63f1f899e153468fcc">cend</link>()&#32;const&#32;noexcept
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_toml_8hpp_1aa14587a3e092e9b8e95dea38557e7517">const_table_iterator</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().<link linkend="_classtable_1ae222f3b89576ab6cfb0204fc99ff1519">cend</link>();
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
329 
331 
334 
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a0eda76e47ce514a80e2a998621d2e641">at_path</link>(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
343 
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1acfc8e405c9d3ff150bb1322d27e0294f">at_path</link>(std::string_view&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
352 
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a1963f05321264471873f57fe990ec967">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
361 
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a38991e36f62e6fe38f7710295c9e80e3">at_path</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
370 
371 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
372 
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a8e8504cc8b344e0f43736339382f3719">at_path</link>(std::wstring_view&#32;<link linkend="_classpath">path</link>)
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
383 
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1ae2349475144f9f76cee88ba1743963c7">at_path</link>(std::wstring_view&#32;<link linkend="_classpath">path</link>)<emphasis role="keyword">&#32;const</emphasis>
391 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>().at_path(<link linkend="_classpath">path</link>);
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
394 
395 <emphasis role="preprocessor">#endif</emphasis>
396 
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1aac87841985f2d7b65c6cb66919c4400d">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[<link linkend="_classpath">path</link>];
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
405 
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a0a1d0ca0fb0970279d78884704d44ac7">operator[]</link>(<emphasis role="keyword">const</emphasis>&#32;toml::path&amp;&#32;<link linkend="_classpath">path</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[<link linkend="_classpath">path</link>];
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
414 
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a86709bcdd3001344b0fccd11f04ca56a">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">noexcept</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
428 
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a8f4b8fe8c7b52d0e42fd371226570467">operator[]</link>(std::string_view&#32;key)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
442 
443 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
444 
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>&#32;<link linkend="_classparse__result_1a92ebcffdc2105bc3e231f3688beba9e4">operator[]</link>(std::wstring_view&#32;key)
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
460 
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a471c97e396823de3fcca2272e3ef1bba">TOML_NODISCARD</link>
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>&#32;<link linkend="_classparse__result_1a1894e856d7cdb26ad9ae34ad837a8b2f">operator[]</link>(std::wstring_view&#32;key)<emphasis role="keyword">&#32;const</emphasis>
473 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err_&#32;?&#32;<link linkend="_classnode__view">node_view&lt;const node&gt;</link>{}&#32;:&#32;<link linkend="_classtable">table</link>()[key];
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
476 
477 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_WINDOWS_COMPAT</emphasis>
478 
480 
481 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
482 
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;std::ostream&amp;&#32;<link linkend="_classparse__result_1a24e2d0cb20f183774c91ca48e9033aa5">operator&lt;&lt;</link>(std::ostream&amp;&#32;os,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>&amp;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>)
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.err_&#32;?&#32;(os&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.error())&#32;:&#32;(os&#32;&lt;&lt;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>.table());
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 
491 <emphasis role="preprocessor">#endif</emphasis>
492 &#32;&#32;&#32;&#32;};
493 
494 &#32;&#32;&#32;&#32;<link linkend="_parse__result_8h_1aa188664cce4904ae8832f7fa59f10211">TOML_ABI_NAMESPACE_END</link>;
495 }
496 <link linkend="_parse__result_8h_1afa65688cac47ce86021fef8d739f9fd8">TOML_NAMESPACE_END</link>;
497 
498 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
499 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
</programlisting></section>
