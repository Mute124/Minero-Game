<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__pbds_1_1tree" xml:lang="en-US">
<title>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; Class Template Reference</title>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;assoc_container.hpp&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1tree__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1tree__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef Cmp_Fn <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link></para>

<para>Comparison functor type. </para>
</listitem>
            <listitem><para>typedef Cmp_Fn <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link></para>

<para>Comparison functor type. </para>
</listitem>
            <listitem><para>typedef Cmp_Fn <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link></para>

<para>Comparison functor type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1ae44497285558f1eafaef77dffe58efde">tree</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1a5c900b3230feb9f5c59bf80995eaa2b1">tree</link> (const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp;c)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1tree_1a9d2c8a45cf06ac2da54bef2ff3514468">tree</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1tree_1a75e6c7ff0c466d02e91bfe5243684109">tree</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1a916b5375c976fef2f0936f181a473cbd">tree</link> (const <link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1tree_1a122cf433ab2e25775cd3b6415c3ed14a">~tree</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp; <link linkend="_class____gnu__pbds_1_1tree_1ac5cb88f610d0886a444f97264e248a46">operator=</link> (const <link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1tree_1ac65840f16b00948c4428da2a45936c21">swap</link> (<link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1ae44497285558f1eafaef77dffe58efde">tree</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1a5c900b3230feb9f5c59bf80995eaa2b1">tree</link> (const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp;c)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1tree_1a9d2c8a45cf06ac2da54bef2ff3514468">tree</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1tree_1a75e6c7ff0c466d02e91bfe5243684109">tree</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1a916b5375c976fef2f0936f181a473cbd">tree</link> (const <link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1tree_1a122cf433ab2e25775cd3b6415c3ed14a">~tree</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp; <link linkend="_class____gnu__pbds_1_1tree_1ac5cb88f610d0886a444f97264e248a46">operator=</link> (const <link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1tree_1ac65840f16b00948c4428da2a45936c21">swap</link> (<link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1ae44497285558f1eafaef77dffe58efde">tree</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1a5c900b3230feb9f5c59bf80995eaa2b1">tree</link> (const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp;c)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1tree_1a9d2c8a45cf06ac2da54bef2ff3514468">tree</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last)</para>
</listitem>
            <listitem><para>template&lt;typename It &gt; </para><para><link linkend="_class____gnu__pbds_1_1tree_1a75e6c7ff0c466d02e91bfe5243684109">tree</link> (It <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>, It last, const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp;c)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree_1a916b5375c976fef2f0936f181a473cbd">tree</link> (const <link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class____gnu__pbds_1_1tree_1a122cf433ab2e25775cd3b6415c3ed14a">~tree</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp; <link linkend="_class____gnu__pbds_1_1tree_1ac5cb88f610d0886a444f97264e248a46">operator=</link> (const <link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1tree_1ac65840f16b00948c4428da2a45936c21">swap</link> (<link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp;other)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Key, typename Mapped, typename Cmp_Fn = std::less&lt;Key&gt;, typename Tag = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc = std::allocator&lt;char&gt;&gt;<?linebreak?>class __gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</title></simplesect>

<para>A tree-based container.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Key</entry><entry>
<para>Key type. </para>
</entry>
                            </row>
                            <row>
<entry>Mapped</entry><entry>
<para>Map type. </para>
</entry>
                            </row>
                            <row>
<entry>Cmp_Fn</entry><entry>
<para>Comparison functor. </para>
</entry>
                            </row>
                            <row>
<entry>Tag</entry><entry>
<para>Instantiating data structure type, see <link linkend="_struct____gnu__pbds_1_1container__tag">container_tag</link>. </para>
</entry>
                            </row>
                            <row>
<entry>Node_Update</entry><entry>
<para>Updates tree internal-nodes, restores invariants when invalidated. XXX See design::tree-based-containers::node invariants. </para>
</entry>
                            </row>
                            <row>
<entry>_Alloc</entry><entry>
<para>Allocator type.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Base tag choices are: <link linkend="_struct____gnu__pbds_1_1ov__tree__tag">ov_tree_tag</link>, <link linkend="_struct____gnu__pbds_1_1rb__tree__tag">rb_tree_tag</link>, <link linkend="_struct____gnu__pbds_1_1splay__tree__tag">splay_tree_tag</link>.</para>

<para>Base is <link linkend="_class____gnu__pbds_1_1basic__branch">basic_branch</link>. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255"/><section>
    <title>cmp_fn<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>cmp_fn</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>cmp_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Cmp_Fn <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::cmp_fn</computeroutput></para><para>

<para>Comparison functor type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255"/><section>
    <title>cmp_fn<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>cmp_fn</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>cmp_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Cmp_Fn <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::cmp_fn</computeroutput></para><para>

<para>Comparison functor type. </para>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255"/><section>
    <title>cmp_fn<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>cmp_fn</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>cmp_fn</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>typedef Cmp_Fn <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::cmp_fn</computeroutput></para><para>

<para>Comparison functor type. </para>
</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ae44497285558f1eafaef77dffe58efde"/><section>
    <title>tree()<computeroutput>[1/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a5c900b3230feb9f5c59bf80995eaa2b1"/><section>
    <title>tree()<computeroutput>[2/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_cmp_fn will be copied by the Cmp_Fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a9d2c8a45cf06ac2da54bef2ff3514468"/><section>
    <title>tree()<computeroutput>[3/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a75e6c7ff0c466d02e91bfe5243684109"/><section>
    <title>tree()<computeroutput>[4/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (It first, It last, const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_cmp_fn will be copied by the cmp_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a916b5375c976fef2f0936f181a473cbd"/><section>
    <title>tree()<computeroutput>[5/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (const <link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a122cf433ab2e25775cd3b6415c3ed14a"/><section>
    <title>~tree()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>~tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>~tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1tree">tree</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ae44497285558f1eafaef77dffe58efde"/><section>
    <title>tree()<computeroutput>[6/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a5c900b3230feb9f5c59bf80995eaa2b1"/><section>
    <title>tree()<computeroutput>[7/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_cmp_fn will be copied by the Cmp_Fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a9d2c8a45cf06ac2da54bef2ff3514468"/><section>
    <title>tree()<computeroutput>[8/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a75e6c7ff0c466d02e91bfe5243684109"/><section>
    <title>tree()<computeroutput>[9/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (It first, It last, const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_cmp_fn will be copied by the cmp_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a916b5375c976fef2f0936f181a473cbd"/><section>
    <title>tree()<computeroutput>[10/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (const <link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a122cf433ab2e25775cd3b6415c3ed14a"/><section>
    <title>~tree()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>~tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>~tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1tree">tree</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ae44497285558f1eafaef77dffe58efde"/><section>
    <title>tree()<computeroutput>[11/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a5c900b3230feb9f5c59bf80995eaa2b1"/><section>
    <title>tree()<computeroutput>[12/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking some policy objects. r_cmp_fn will be copied by the Cmp_Fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a9d2c8a45cf06ac2da54bef2ff3514468"/><section>
    <title>tree()<computeroutput>[13/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (It first, It last)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types. The value_types between first_it and last_it will be inserted into the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a75e6c7ff0c466d02e91bfe5243684109"/><section>
    <title>tree()<computeroutput>[14/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><computeroutput>template&lt;typename It &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (It first, It last, const <link linkend="_class____gnu__pbds_1_1tree_1acb3bfca7ffae5a572e1a8698bf0c1255">cmp_fn</link> &amp; c)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Constructor taking __iterators to a range of value_types and some policy objects The value_types between first_it and last_it will be inserted into the container object. r_cmp_fn will be copied by the cmp_fn object of the container object. </para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a916b5375c976fef2f0936f181a473cbd"/><section>
    <title>tree()<computeroutput>[15/15]</computeroutput></title>
<indexterm><primary>tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::tree (const <link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1a122cf433ab2e25775cd3b6415c3ed14a"/><section>
    <title>~tree()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>~tree</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>~tree</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput>virtual <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::~<link linkend="_class____gnu__pbds_1_1tree">tree</link> ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ac5cb88f610d0886a444f97264e248a46"/><section>
    <title>operator=()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp; <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1tree_ac5cb88f610d0886a444f97264e248a46_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ac5cb88f610d0886a444f97264e248a46"/><section>
    <title>operator=()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp; <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1tree_ac5cb88f610d0886a444f97264e248a46_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ac5cb88f610d0886a444f97264e248a46"/><section>
    <title>operator=()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__pbds_1_1tree">tree</link> &amp; <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::operator= (const <link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1tree_ac5cb88f610d0886a444f97264e248a46_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ac65840f16b00948c4428da2a45936c21"/><section>
    <title>swap()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__pbds_1_1tree_ac65840f16b00948c4428da2a45936c21_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ac65840f16b00948c4428da2a45936c21"/><section>
    <title>swap()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__pbds_1_1tree_1ac65840f16b00948c4428da2a45936c21"/><section>
    <title>swap()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>swap</primary><secondary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</secondary></indexterm>
<indexterm><primary>__gnu_pbds::tree&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename Key , typename Mapped , typename Cmp_Fn  = std::less&lt;Key&gt;, typename Tag  = rb_tree_tag, template&lt; typename Node_CItr, typename Node_Itr, typename Cmp_Fn_, typename _Alloc_ &gt; class Node_Update = null_node_update, typename _Alloc  = std::allocator&lt;char&gt;&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__pbds_1_1tree">__gnu_pbds::tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt;::swap (<link linkend="_class____gnu__pbds_1_1tree">tree</link>&lt; Key, Mapped, Cmp_Fn, Tag, Node_Update, _Alloc &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/<link linkend="_lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/pb_ds/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2ext_2pb__ds_2assoc__container_8hpp">assoc_container.hpp</link></section>
</section>
