<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2tr1_2unordered__set_8h_source" xml:lang="en-US">
<title>unordered_set.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/tr1/unordered_set.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;TR1&#32;unordered_set&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2010-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
31 {
32 _GLIBCXX_BEGIN_NAMESPACE_VERSION
33 
34 <emphasis role="keyword">namespace&#32;</emphasis>tr1
35 {
36 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;When&#32;we&#32;get&#32;typedef&#32;templates&#32;these&#32;class&#32;definitions</emphasis>
37 &#32;&#32;<emphasis role="comment">//&#32;will&#32;be&#32;unnecessary.</emphasis>
38 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Value,
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Hash&#32;=&#32;hash&lt;_Value&gt;,
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Pred&#32;=&#32;std::equal_to&lt;_Value&gt;,
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&#32;=&#32;std::allocator&lt;_Value&gt;,
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache_hash_code&#32;=&#32;<emphasis role="keyword">false</emphasis>&gt;
43 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__unordered_set
44 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Hashtable&lt;_Value,&#32;_Value,&#32;_Alloc,
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;,&#32;_Pred,
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;__detail::_Mod_range_hashing,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cache_hash_code,&#32;true,&#32;true&gt;
50 &#32;&#32;&#32;&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable&lt;_Value,&#32;_Value,&#32;_Alloc,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;,&#32;_Pred,
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;__detail::_Mod_range_hashing,
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cache_hash_code,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">true</emphasis>&gt;
57 &#32;&#32;&#32;&#32;_Base;
58 
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::hasher&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasher;
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::key_equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_equal;
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::allocator_type&#32;&#32;allocator_type;
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;__unordered_set(size_type&#32;__n&#32;=&#32;10,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
70 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__n,&#32;__hf,&#32;__detail::_Mod_range_hashing(),
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash(),&#32;__eql,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;(),&#32;__a)
73 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
76 &#32;&#32;&#32;&#32;__unordered_set(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l,
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;10,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
81 &#32;&#32;&#32;&#32;:&#32;_Base(__f,&#32;__l,&#32;__n,&#32;__hf,&#32;__detail::_Mod_range_hashing(),
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash(),&#32;__eql,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;(),&#32;__a)
84 &#32;&#32;&#32;&#32;{&#32;}
85 &#32;&#32;&#32;&#32;};
86 
87 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Value,
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Hash&#32;=&#32;hash&lt;_Value&gt;,
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Pred&#32;=&#32;std::equal_to&lt;_Value&gt;,
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&#32;=&#32;std::allocator&lt;_Value&gt;,
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache_hash_code&#32;=&#32;<emphasis role="keyword">false</emphasis>&gt;
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__unordered_multiset
93 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Hashtable&lt;_Value,&#32;_Value,&#32;_Alloc,
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;,&#32;_Pred,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;__detail::_Mod_range_hashing,
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cache_hash_code,&#32;true,&#32;false&gt;
99 &#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Hashtable&lt;_Value,&#32;_Value,&#32;_Alloc,
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;,&#32;_Pred,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;__detail::_Mod_range_hashing,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cache_hash_code,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">false</emphasis>&gt;
106 &#32;&#32;&#32;&#32;_Base;
107 
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::hasher&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasher;
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::key_equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_equal;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::allocator_type&#32;&#32;allocator_type;
113 
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
115 &#32;&#32;&#32;&#32;&#32;&#32;__unordered_multiset(size_type&#32;__n&#32;=&#32;10,
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
119 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__n,&#32;__hf,&#32;__detail::_Mod_range_hashing(),
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash(),&#32;__eql,
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;(),&#32;__a)
122 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
123 
124 
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
126 &#32;&#32;&#32;&#32;__unordered_multiset(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l,
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;__n&#32;=&#32;0,
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
131 &#32;&#32;&#32;&#32;:&#32;_Base(__f,&#32;__l,&#32;__n,&#32;__hf,&#32;__detail::_Mod_range_hashing(),
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash(),&#32;__eql,
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::_Identity&lt;_Value&gt;(),&#32;__a)
134 &#32;&#32;&#32;&#32;{&#32;}
135 &#32;&#32;&#32;&#32;};
136 
137 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Value,&#32;<emphasis role="keyword">class&#32;</emphasis>_Hash,&#32;<emphasis role="keyword">class&#32;</emphasis>_Pred,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc,
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache_hash_code&gt;
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
140 &#32;&#32;&#32;&#32;swap(__unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc,&#32;__cache_hash_code&gt;&amp;&#32;__x,
141 &#32;&#32;&#32;&#32;&#32;__unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc,&#32;__cache_hash_code&gt;&amp;&#32;__y)
142 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
143 
144 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Value,&#32;<emphasis role="keyword">class&#32;</emphasis>_Hash,&#32;<emphasis role="keyword">class&#32;</emphasis>_Pred,&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc,
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__cache_hash_code&gt;
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
147 &#32;&#32;&#32;&#32;swap(__unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,
148 &#32;&#32;&#32;&#32;&#32;_Alloc,&#32;__cache_hash_code&gt;&amp;&#32;__x,
149 &#32;&#32;&#32;&#32;&#32;__unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,
150 &#32;&#32;&#32;&#32;&#32;_Alloc,&#32;__cache_hash_code&gt;&amp;&#32;__y)
151 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
152 
153 
169 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Value,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Hash&#32;=&#32;hash&lt;_Value&gt;,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Pred&#32;=&#32;std::equal_to&lt;_Value&gt;,
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&#32;=&#32;std::allocator&lt;_Value&gt;&#32;&gt;
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_set
174 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;
175 &#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&#32;&#32;_Base;
177 
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;&#32;&#32;&#32;&#32;&#32;value_type;
180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::hasher&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasher;
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::key_equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_equal;
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::allocator_type&#32;&#32;allocator_type;
184 
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
186 &#32;&#32;&#32;&#32;&#32;&#32;unordered_set(size_type&#32;__n&#32;=&#32;10,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
190 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__n,&#32;__hf,&#32;__eql,&#32;__a)
191 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
192 
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
194 &#32;&#32;&#32;&#32;unordered_set(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l,
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;10,
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
199 &#32;&#32;&#32;&#32;:&#32;_Base(__f,&#32;__l,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
200 &#32;&#32;&#32;&#32;{&#32;}
201 &#32;&#32;&#32;&#32;};
202 
218 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_Value,
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Hash&#32;=&#32;hash&lt;_Value&gt;,
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Pred&#32;=&#32;std::equal_to&lt;_Value&gt;,
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Alloc&#32;=&#32;std::allocator&lt;_Value&gt;&#32;&gt;
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_multiset
223 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;
224 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&#32;&#32;_Base;
226 
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type&#32;&#32;&#32;&#32;&#32;&#32;value_type;
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::hasher&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasher;
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::key_equal&#32;&#32;&#32;&#32;&#32;&#32;&#32;key_equal;
232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::allocator_type&#32;&#32;allocator_type;
233 
234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
235 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multiset(size_type&#32;__n&#32;=&#32;10,
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
239 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__n,&#32;__hf,&#32;__eql,&#32;__a)
240 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
241 
242 
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
244 &#32;&#32;&#32;&#32;unordered_multiset(_InputIterator&#32;__f,&#32;_InputIterator&#32;__l,
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;__n&#32;=&#32;0,
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
249 &#32;&#32;&#32;&#32;:&#32;_Base(__f,&#32;__l,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
250 &#32;&#32;&#32;&#32;{&#32;}
251 &#32;&#32;&#32;&#32;};
252 
253 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
255 &#32;&#32;&#32;&#32;swap(unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
256 &#32;&#32;&#32;&#32;&#32;unordered_set&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
257 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
258 
259 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Value,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
260 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
261 &#32;&#32;&#32;&#32;swap(unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
262 &#32;&#32;&#32;&#32;&#32;unordered_multiset&lt;_Value,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
263 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
264 }
265 
266 _GLIBCXX_END_NAMESPACE_VERSION
267 }
</programlisting></section>
