<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2tr1_2special__function__util_8h_source" xml:lang="en-US">
<title>special_function_util.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/tr1/special_function_util.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Special&#32;functions&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2006-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//</emphasis>
31 <emphasis role="comment">//&#32;ISO&#32;C++&#32;14882&#32;TR1:&#32;5.2&#32;&#32;Special&#32;functions</emphasis>
32 <emphasis role="comment">//</emphasis>
33 
34 <emphasis role="comment">//&#32;Written&#32;by&#32;Edward&#32;Smith-Rowland&#32;based&#32;on&#32;numerous&#32;mathematics&#32;books.</emphasis>
35 
36 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H</emphasis>
37 <emphasis role="preprocessor">#define&#32;_GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H&#32;1</emphasis>
38 
39 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
40 {
41 _GLIBCXX_BEGIN_NAMESPACE_VERSION
42 
43 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_STD_SPEC_FUNCS</emphasis>
44 <emphasis role="preprocessor">#elif&#32;defined(_GLIBCXX_TR1_CMATH)</emphasis>
45 <emphasis role="keyword">namespace&#32;</emphasis>tr1
46 {
47 <emphasis role="preprocessor">#else</emphasis>
48 <emphasis role="preprocessor">#&#32;error&#32;do&#32;not&#32;include&#32;this&#32;header&#32;directly,&#32;use&#32;&lt;cmath&gt;&#32;or&#32;&lt;tr1/cmath&gt;</emphasis>
49 <emphasis role="preprocessor">#endif</emphasis>
50 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
51 &#32;&#32;{
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__floating_point_constant
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__value;
59 &#32;&#32;&#32;&#32;};
60 
61 
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__numeric_constants
65 &#32;&#32;&#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__pi()&#32;<emphasis role="keywordflow">throw</emphasis>()
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(3.1415926535897932384626433832795029L);&#32;}
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__pi_2()&#32;<emphasis role="keywordflow">throw</emphasis>()
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(1.5707963267948966192313216916397514L);&#32;}
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__pi_3()&#32;<emphasis role="keywordflow">throw</emphasis>()
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(1.0471975511965977461542144610931676L);&#32;}
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__pi_4()&#32;<emphasis role="keywordflow">throw</emphasis>()
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(0.7853981633974483096156608458198757L);&#32;}
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__1_pi()&#32;<emphasis role="keywordflow">throw</emphasis>()
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(0.3183098861837906715377675267450287L);&#32;}
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__2_sqrtpi()&#32;<emphasis role="keywordflow">throw</emphasis>()
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(1.1283791670955125738961589031215452L);&#32;}
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__sqrt2()&#32;<emphasis role="keywordflow">throw</emphasis>()
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(1.4142135623730950488016887242096981L);&#32;}
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__sqrt3()&#32;<emphasis role="keywordflow">throw</emphasis>()
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(1.7320508075688772935274463415058723L);&#32;}
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__sqrtpio2()&#32;<emphasis role="keywordflow">throw</emphasis>()
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(1.2533141373155002512078826424055226L);&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__sqrt1_2()&#32;<emphasis role="keywordflow">throw</emphasis>()
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(0.7071067811865475244008443621048490L);&#32;}
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__lnpi()&#32;<emphasis role="keywordflow">throw</emphasis>()
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(1.1447298858494001741434273513530587L);&#32;}
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__gamma_e()&#32;<emphasis role="keywordflow">throw</emphasis>()
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(0.5772156649015328606065120900824024L);&#32;}
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&#32;__euler()&#32;<emphasis role="keywordflow">throw</emphasis>()
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(2.7182818284590452353602874713526625L);&#32;}
105 &#32;&#32;&#32;&#32;&#32;&#32;};
106 
107 
108 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_C99_MATH&#32;&amp;&amp;&#32;!_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC</emphasis>
109 
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__isnan(_Tp&#32;__x)
116 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::isnan(__x);&#32;}
117 
118 <emphasis role="preprocessor">#else</emphasis>
119 
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__isnan(<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__x)
122 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_isnan(__x);&#32;}
123 
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__isnan&lt;float&gt;(<emphasis role="keywordtype">float</emphasis>&#32;__x)
126 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_isnanf(__x);&#32;}
127 
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__isnan&lt;long&#32;double&gt;(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__x)
130 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_isnanl(__x);&#32;}
131 
132 <emphasis role="preprocessor">#endif</emphasis>
133 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
134 <emphasis role="preprocessor">#if&#32;!&#32;_GLIBCXX_USE_STD_SPEC_FUNCS&#32;&amp;&amp;&#32;defined(_GLIBCXX_TR1_CMATH)</emphasis>
135 }&#32;<emphasis role="comment">//&#32;namespace&#32;tr1</emphasis>
136 <emphasis role="preprocessor">#endif</emphasis>
137 
138 _GLIBCXX_END_NAMESPACE_VERSION
139 }
140 
141 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H</emphasis>
142 
</programlisting></section>
