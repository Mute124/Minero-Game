<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classstd_1_1exception" xml:lang="en-US">
<title>std::exception Class Reference</title>
<indexterm><primary>std::exception</primary></indexterm>
<para>

<para>Base class for all library exceptions. </para>
 
</para>
<para>
<computeroutput>#include &lt;exception.h&gt;</computeroutput>
</para>
Inheritance diagram for std::exception:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classstd_1_1exception__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56">exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual <link linkend="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff">~exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual const char * <link linkend="_classstd_1_1exception_1aaeb5dde11d9e9efd8813c9521294a245">what</link> () const <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para><link linkend="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56">exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual <link linkend="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff">~exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual const char * <link linkend="_classstd_1_1exception_1aaeb5dde11d9e9efd8813c9521294a245">what</link> () const <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para><link linkend="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56">exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual <link linkend="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff">~exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual const char * <link linkend="_classstd_1_1exception_1aaeb5dde11d9e9efd8813c9521294a245">what</link> () const <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Base class for all library exceptions. </para>



<para>This is the base class for all exceptions thrown by the standard library, and by certain language expressions. You are free to derive your own exception classes, or use a different hierarchy, or to throw non-class data (e.g., fundamental types). </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56"/><section>
    <title>exception()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>exception</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>exception</secondary></indexterm>
<para><computeroutput>std::exception::exception ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff"/><section>
    <title>~exception()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>~exception</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>~exception</secondary></indexterm>
<para><computeroutput>virtual std::exception::~exception ( )<computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56"/><section>
    <title>exception()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>exception</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>exception</secondary></indexterm>
<para><computeroutput>std::exception::exception ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff"/><section>
    <title>~exception()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>~exception</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>~exception</secondary></indexterm>
<para><computeroutput>virtual std::exception::~exception ( )<computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56"/><section>
    <title>exception()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>exception</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>exception</secondary></indexterm>
<para><computeroutput>std::exception::exception ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff"/><section>
    <title>~exception()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>~exception</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>~exception</secondary></indexterm>
<para><computeroutput>virtual std::exception::~exception ( )<computeroutput>[virtual]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classstd_1_1exception_1aaeb5dde11d9e9efd8813c9521294a245"/><section>
    <title>what()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>what</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>what</secondary></indexterm>
<para><computeroutput>virtual const char * std::exception::what ( ) const<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Returns a C-style character string describing the general cause of the current error. <?linebreak?> </para>
<para>
Reimplemented in <link linkend="_classnlohmann_1_1detail_1_1exception_1ad863f4455f8bb2ea006a78e6fcf0b090">nlohmann::detail::exception</link>, and <link linkend="_class_catch_1_1_generator_exception_1ac40705ff5da208ce3a7d3023d0d3f4c6">Catch::GeneratorException</link>.</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classstd_1_1exception_aaeb5dde11d9e9efd8813c9521294a245_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classstd_1_1exception_1aaeb5dde11d9e9efd8813c9521294a245"/><section>
    <title>what()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>what</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>what</secondary></indexterm>
<para><computeroutput>virtual const char * std::exception::what ( ) const<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Returns a C-style character string describing the general cause of the current error. <?linebreak?> </para>
<para>
Reimplemented in <link linkend="_classnlohmann_1_1detail_1_1exception_1ad863f4455f8bb2ea006a78e6fcf0b090">nlohmann::detail::exception</link>, and <link linkend="_class_catch_1_1_generator_exception_1ac40705ff5da208ce3a7d3023d0d3f4c6">Catch::GeneratorException</link>.</para>
</section>
<anchor xml:id="_classstd_1_1exception_1aaeb5dde11d9e9efd8813c9521294a245"/><section>
    <title>what()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>what</primary><secondary>std::exception</secondary></indexterm>
<indexterm><primary>std::exception</primary><secondary>what</secondary></indexterm>
<para><computeroutput>virtual const char * std::exception::what ( ) const<computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Returns a C-style character string describing the general cause of the current error. <?linebreak?> </para>
<para>
Reimplemented in <link linkend="_classnlohmann_1_1detail_1_1exception_1ad863f4455f8bb2ea006a78e6fcf0b090">nlohmann::detail::exception</link>, and <link linkend="_class_catch_1_1_generator_exception_1ac40705ff5da208ce3a7d3023d0d3f4c6">Catch::GeneratorException</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception_8h">exception.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/<link linkend="_lib_2include_2c_09_09_2bits_2exception_8h">exception.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2exception_8h">exception.h</link></section>
</section>
