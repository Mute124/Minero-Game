<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2streambuf__iterator_8h_source" xml:lang="en-US">
<title>streambuf_iterator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/streambuf_iterator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Streambuf&#32;iterators</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_STREAMBUF_ITERATOR_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_STREAMBUF_ITERATOR_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;streambuf&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
37 
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
39 {
40 _GLIBCXX_BEGIN_NAMESPACE_VERSION
41 
47 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;std::iterator.</emphasis>
48 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
49 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
50 &#32;&#32;<emphasis role="comment">//&#32;24.5.3&#32;Template&#32;class&#32;istreambuf_iterator</emphasis>
52 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>istreambuf_iterator
54 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;input_iterator_tag,&#32;_CharT,&#32;typename&#32;_Traits::off_type,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*,&#32;_CharT&gt;
56 &#32;&#32;&#32;&#32;{
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
61 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&amp;&#32;reference;&#32;<emphasis role="comment">//&#32;Changed&#32;to&#32;_CharT&#32;by&#32;LWG&#32;445</emphasis>
63 <emphasis role="preprocessor">#elif&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3188.&#32;istreambuf_iterator::pointer&#32;should&#32;not&#32;be&#32;unspecified</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
67 <emphasis role="preprocessor">#endif</emphasis>
68 
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::int_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_streambuf&lt;_CharT,&#32;_Traits&gt;&#32;&#32;&#32;&#32;&#32;&#32;streambuf_type;
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;istream_type;
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT2&gt;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT2&gt;&#32;&gt;::__type
79 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(istreambuf_iterator&lt;_CharT2&gt;,&#32;istreambuf_iterator&lt;_CharT2&gt;,
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT2&gt;);
81 
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT2&gt;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT2*&gt;::__type
85 &#32;&#32;&#32;&#32;__copy_move_a2(istreambuf_iterator&lt;_CharT2&gt;,
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT2&gt;,&#32;_CharT2*);
87 
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT2*&gt;::__type
91 &#32;&#32;&#32;&#32;__copy_n_a(istreambuf_iterator&lt;_CharT2&gt;,&#32;_Size,&#32;_CharT2*,&#32;<emphasis role="keywordtype">bool</emphasis>);
92 
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT2&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT2&gt;&#32;&gt;::__type
96 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(istreambuf_iterator&lt;_CharT2&gt;,&#32;istreambuf_iterator&lt;_CharT2&gt;,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT2&amp;);
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&gt;::__type
102 &#32;&#32;&#32;&#32;advance(istreambuf_iterator&lt;_CharT2&gt;&amp;,&#32;_Distance);
103 
104 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;24.5.3&#32;istreambuf_iterator</emphasis>
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;p&#32;1</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;end&#32;of&#32;stream&#32;is&#32;reached&#32;(streambuf_type::sgetc()</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;returns&#32;traits_type::eof()),&#32;the&#32;iterator&#32;becomes&#32;equal&#32;to</emphasis>
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;&quot;end&#32;of&#32;stream&quot;&#32;iterator&#32;value.</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;This&#32;implementation&#32;assumes&#32;the&#32;&quot;end&#32;of&#32;stream&quot;&#32;value</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;EOF,&#32;or&#32;-1.</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;streambuf_type*&#32;&#32;&#32;_M_sbuf;
113 &#32;&#32;&#32;&#32;&#32;&#32;int_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_c;
114 
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
117 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_CONSTEXPR&#32;istreambuf_iterator()&#32;_GLIBCXX_USE_NOEXCEPT
118 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_sbuf(0),&#32;_M_c(traits_type::eof())&#32;{&#32;}
119 
120 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;istreambuf_iterator(default_sentinel_t)&#32;noexcept
122 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;istreambuf_iterator()&#32;{&#32;}
123 <emphasis role="preprocessor">#endif</emphasis>
124 
125 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator(<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
127 
128 &#32;&#32;&#32;&#32;&#32;&#32;~istreambuf_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
129 <emphasis role="preprocessor">#endif</emphasis>
130 
132 &#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator(istream_type&amp;&#32;__s)&#32;_GLIBCXX_USE_NOEXCEPT
133 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_sbuf(__s.rdbuf()),&#32;_M_c(traits_type::eof())&#32;{&#32;}
134 
136 &#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator(streambuf_type*&#32;__s)&#32;_GLIBCXX_USE_NOEXCEPT
137 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_sbuf(__s),&#32;_M_c(traits_type::eof())&#32;{&#32;}
138 
139 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator&amp;
141 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
142 <emphasis role="preprocessor">#endif</emphasis>
143 
147 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
148 &#32;&#32;&#32;&#32;&#32;&#32;char_type
149 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
150 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
151 &#32;&#32;&#32;&#32;int_type&#32;__c&#32;=&#32;_M_get();
152 
153 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG_PEDANTIC</emphasis>
154 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dereferencing&#32;a&#32;past-the-end&#32;istreambuf_iterator&#32;is&#32;a</emphasis>
155 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;libstdc++&#32;extension</emphasis>
156 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(!_S_is_eof(__c),
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3ad42a6da58d519d18e15c627e8342890e">__gnu_debug::__msg_deref_istreambuf</link>)
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>));
159 <emphasis role="preprocessor">#endif</emphasis>
160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;traits_type::to_char_type(__c);
161 &#32;&#32;&#32;&#32;&#32;&#32;}
162 
164 &#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator&amp;
165 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
166 &#32;&#32;&#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(_M_sbuf&#32;&amp;&amp;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!_S_is_eof(_M_c)&#32;||&#32;!_S_is_eof(_M_sbuf-&gt;sgetc())),
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa9a3105290003b2d92e6b340c8fa489a">__gnu_debug::__msg_inc_istreambuf</link>)
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>));
171 
172 &#32;&#32;&#32;&#32;_M_sbuf-&gt;sbumpc();
173 &#32;&#32;&#32;&#32;_M_c&#32;=&#32;traits_type::eof();
174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
175 &#32;&#32;&#32;&#32;&#32;&#32;}
176 
178 &#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator
179 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
180 &#32;&#32;&#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(_M_sbuf&#32;&amp;&amp;
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(!_S_is_eof(_M_c)&#32;||&#32;!_S_is_eof(_M_sbuf-&gt;sgetc())),
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa9a3105290003b2d92e6b340c8fa489a">__gnu_debug::__msg_inc_istreambuf</link>)
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(*<emphasis role="keyword">this</emphasis>));
185 
186 &#32;&#32;&#32;&#32;istreambuf_iterator&#32;__old&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
187 &#32;&#32;&#32;&#32;__old._M_c&#32;=&#32;_M_sbuf-&gt;sbumpc();
188 &#32;&#32;&#32;&#32;_M_c&#32;=&#32;traits_type::eof();
189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old;
190 &#32;&#32;&#32;&#32;&#32;&#32;}
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;110&#32;istreambuf_iterator::equal&#32;not&#32;const</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;there&#32;is&#32;also&#32;number&#32;111&#32;(NAD)&#32;relevant&#32;to&#32;this&#32;function.</emphasis>
196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__vector__relational_1gaf539cf490630ba648dfd6e36aef910a1">equal</link>(<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&amp;&#32;__b)<emphasis role="keyword">&#32;const</emphasis>
199 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_at_eof()&#32;==&#32;__b._M_at_eof();&#32;}
200 
201 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
202 &#32;&#32;&#32;&#32;&#32;&#32;int_type
203 &#32;&#32;&#32;&#32;&#32;&#32;_M_get()<emphasis role="keyword">&#32;const</emphasis>
204 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
205 &#32;&#32;&#32;&#32;int_type&#32;__ret&#32;=&#32;_M_c;
206 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_sbuf&#32;&amp;&amp;&#32;_S_is_eof(__ret)&#32;&amp;&amp;&#32;_S_is_eof(__ret&#32;=&#32;_M_sbuf-&gt;sgetc()))
207 &#32;&#32;&#32;&#32;&#32;&#32;_M_sbuf&#32;=&#32;0;
208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
209 &#32;&#32;&#32;&#32;&#32;&#32;}
210 
211 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
212 &#32;&#32;&#32;&#32;&#32;&#32;_M_at_eof()<emphasis role="keyword">&#32;const</emphasis>
213 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_is_eof(_M_get());&#32;}
214 
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
216 &#32;&#32;&#32;&#32;&#32;&#32;_S_is_eof(int_type&#32;__c)
217 &#32;&#32;&#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&#32;__eof&#32;=&#32;traits_type::eof();
219 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;traits_type::eq_int_type(__c,&#32;__eof);
220 &#32;&#32;&#32;&#32;&#32;&#32;}
221 
222 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L&#32;&amp;&amp;&#32;__cpp_lib_concepts</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&amp;&#32;__i,&#32;default_sentinel_t&#32;__s)
226 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i._M_at_eof();&#32;}
227 <emphasis role="preprocessor">#endif</emphasis>
228 &#32;&#32;&#32;&#32;};
229 
230 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
231 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
233 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__a,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__b)
235 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.equal(__b);&#32;}
236 
237 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
238 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
239 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
241 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__a,
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;istreambuf_iterator&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__b)
243 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__a.equal(__b);&#32;}
244 <emphasis role="preprocessor">#endif</emphasis>
245 
247 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
248 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>ostreambuf_iterator
249 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;iterator&lt;output_iterator_tag,&#32;void,&#32;void,&#32;void,&#32;void&gt;
250 &#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
255 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
257 <emphasis role="preprocessor">#endif</emphasis>
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
260 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_streambuf&lt;_CharT,&#32;_Traits&gt;&#32;streambuf_type;
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;&#32;&#32;&#32;ostream_type;
263 
264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT2&gt;
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT2&gt;&#32;&gt;::__type
267 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(istreambuf_iterator&lt;_CharT2&gt;,&#32;istreambuf_iterator&lt;_CharT2&gt;,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT2&gt;);
269 
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
271 &#32;&#32;&#32;&#32;&#32;&#32;streambuf_type*&#32;&#32;&#32;_M_sbuf;
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_failed;
273 
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
275 
276 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator()&#32;noexcept
279 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_sbuf(<emphasis role="keywordtype">nullptr</emphasis>),&#32;_M_failed(<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)&#32;{&#32;}
280 <emphasis role="preprocessor">#endif</emphasis>
281 
283 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator(ostream_type&amp;&#32;__s)&#32;_GLIBCXX_USE_NOEXCEPT
284 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_sbuf(__s.rdbuf()),&#32;_M_failed(!_M_sbuf)&#32;{&#32;}
285 
287 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator(streambuf_type*&#32;__s)&#32;_GLIBCXX_USE_NOEXCEPT
288 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_sbuf(__s),&#32;_M_failed(!_M_sbuf)&#32;{&#32;}
289 
291 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&amp;
292 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_CharT&#32;__c)
293 &#32;&#32;&#32;&#32;&#32;&#32;{
294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_failed&#32;&amp;&amp;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Traits::eq_int_type(_M_sbuf-&gt;sputc(__c),&#32;_Traits::eof()))
296 &#32;&#32;&#32;&#32;&#32;&#32;_M_failed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
298 &#32;&#32;&#32;&#32;&#32;&#32;}
299 
301 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
302 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&amp;
303 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()
304 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
305 
307 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&amp;
308 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
309 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
310 
312 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&amp;
313 &#32;&#32;&#32;&#32;&#32;&#32;operator++()
314 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
315 
317 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;failed()&#32;const&#32;_GLIBCXX_USE_NOEXCEPT
320 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_failed;&#32;}
321 
322 &#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&amp;
323 &#32;&#32;&#32;&#32;&#32;&#32;_M_put(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__ws,&#32;streamsize&#32;__len)
324 &#32;&#32;&#32;&#32;&#32;&#32;{
325 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(!_M_failed,&#32;<emphasis role="keyword">true</emphasis>)
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__builtin_expect(this-&gt;_M_sbuf-&gt;sputn(__ws,&#32;__len)&#32;!=&#32;__len,
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>))
328 &#32;&#32;&#32;&#32;&#32;&#32;_M_failed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
330 &#32;&#32;&#32;&#32;&#32;&#32;}
331 &#32;&#32;&#32;&#32;};
332 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
333 
334 &#32;&#32;<emphasis role="comment">//&#32;Overloads&#32;for&#32;streambuf&#32;iterators.</emphasis>
335 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
336 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT&gt;&#32;&gt;::__type
338 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(istreambuf_iterator&lt;_CharT&gt;&#32;__first,
339 &#32;&#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT&gt;&#32;__last,
340 &#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT&gt;&#32;__result)
341 &#32;&#32;&#32;&#32;{
342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_sbuf&#32;&amp;&amp;&#32;!__last._M_sbuf&#32;&amp;&amp;&#32;!__result._M_failed)
343 &#32;&#32;&#32;&#32;{
344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__ineof;
345 &#32;&#32;&#32;&#32;&#32;&#32;__copy_streambufs_eof(__first._M_sbuf,&#32;__result._M_sbuf,&#32;__ineof);
346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ineof)
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result._M_failed&#32;=&#32;<emphasis role="keyword">true</emphasis>;
348 &#32;&#32;&#32;&#32;}
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
350 &#32;&#32;&#32;&#32;}
351 
352 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
353 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT&gt;&#32;&gt;::__type
355 &#32;&#32;&#32;&#32;__copy_move_a2(_CharT*&#32;__first,&#32;_CharT*&#32;__last,
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT&gt;&#32;__result)
357 &#32;&#32;&#32;&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;__num&#32;=&#32;__last&#32;-&#32;__first;
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num&#32;&gt;&#32;0)
360 &#32;&#32;&#32;&#32;__result._M_put(__first,&#32;__num);
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
362 &#32;&#32;&#32;&#32;}
363 
364 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
365 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT&gt;&#32;&gt;::__type
367 &#32;&#32;&#32;&#32;__copy_move_a2(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__last,
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ostreambuf_iterator&lt;_CharT&gt;&#32;__result)
369 &#32;&#32;&#32;&#32;{
370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;__num&#32;=&#32;__last&#32;-&#32;__first;
371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num&#32;&gt;&#32;0)
372 &#32;&#32;&#32;&#32;__result._M_put(__first,&#32;__num);
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
374 &#32;&#32;&#32;&#32;}
375 
376 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_IsMove,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
377 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&gt;::__type
379 &#32;&#32;&#32;&#32;__copy_move_a2(istreambuf_iterator&lt;_CharT&gt;&#32;__first,
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT&gt;&#32;__last,&#32;_CharT*&#32;__result)
381 &#32;&#32;&#32;&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;istreambuf_iterator&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_iterator_type;
383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__is_iterator_type::traits_type&#32;&#32;&#32;&#32;&#32;traits_type;
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__is_iterator_type::streambuf_type&#32;&#32;streambuf_type;
385 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::int_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_sbuf&#32;&amp;&amp;&#32;!__last._M_sbuf)
388 &#32;&#32;&#32;&#32;{
389 &#32;&#32;&#32;&#32;&#32;&#32;streambuf_type*&#32;__sb&#32;=&#32;__first._M_sbuf;
390 &#32;&#32;&#32;&#32;&#32;&#32;int_type&#32;__c&#32;=&#32;__sb-&gt;sgetc();
391 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!traits_type::eq_int_type(__c,&#32;traits_type::eof()))
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;streamsize&#32;__n&#32;=&#32;__sb-&gt;egptr()&#32;-&#32;__sb-&gt;gptr();
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;1)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(__result,&#32;__sb-&gt;gptr(),&#32;__n);
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sb-&gt;__safe_gbump(__n);
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+=&#32;__n;
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c&#32;=&#32;__sb-&gt;underflow();
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result++&#32;=&#32;traits_type::to_char_type(__c);
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c&#32;=&#32;__sb-&gt;snextc();
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
407 &#32;&#32;&#32;&#32;}
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
409 &#32;&#32;&#32;&#32;}
410 
411 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size&gt;
412 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&gt;::__type
414 &#32;&#32;&#32;&#32;__copy_n_a(istreambuf_iterator&lt;_CharT&gt;&#32;__it,&#32;_Size&#32;__n,&#32;_CharT*&#32;__result,
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__strict&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__)))
416 &#32;&#32;&#32;&#32;{
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
418 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
419 
420 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(__it._M_sbuf,
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa9a3105290003b2d92e6b340c8fa489a">__gnu_debug::__msg_inc_istreambuf</link>)
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__it));
423 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;__beg&#32;=&#32;__result;
424 &#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+=&#32;__it._M_sbuf-&gt;sgetn(__beg,&#32;__n);
425 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(!__strict&#32;||&#32;__result&#32;-&#32;__beg&#32;==&#32;__n,
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa9a3105290003b2d92e6b340c8fa489a">__gnu_debug::__msg_inc_istreambuf</link>)
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__it));
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
429 &#32;&#32;&#32;&#32;}
430 
431 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
432 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT&gt;&#32;&gt;::__type
434 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">find</link>(istreambuf_iterator&lt;_CharT&gt;&#32;__first,
435 &#32;&#32;&#32;&#32;&#32;istreambuf_iterator&lt;_CharT&gt;&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
436 &#32;&#32;&#32;&#32;{
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;istreambuf_iterator&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_iterator_type;
438 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__is_iterator_type::traits_type&#32;&#32;&#32;&#32;&#32;traits_type;
439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__is_iterator_type::streambuf_type&#32;&#32;streambuf_type;
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::int_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&#32;__eof&#32;=&#32;traits_type::eof();
442 
443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first._M_sbuf&#32;&amp;&amp;&#32;!__last._M_sbuf)
444 &#32;&#32;&#32;&#32;{
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&#32;__ival&#32;=&#32;traits_type::to_int_type(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
446 &#32;&#32;&#32;&#32;&#32;&#32;streambuf_type*&#32;__sb&#32;=&#32;__first._M_sbuf;
447 &#32;&#32;&#32;&#32;&#32;&#32;int_type&#32;__c&#32;=&#32;__sb-&gt;sgetc();
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!traits_type::eq_int_type(__c,&#32;__eof)
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!traits_type::eq_int_type(__c,&#32;__ival))
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;streamsize&#32;__n&#32;=&#32;__sb-&gt;egptr()&#32;-&#32;__sb-&gt;gptr();
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;&#32;1)
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__p&#32;=&#32;traits_type::find(__sb-&gt;gptr(),
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p)
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__p&#32;-&#32;__sb-&gt;gptr();
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sb-&gt;__safe_gbump(__n);
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c&#32;=&#32;__sb-&gt;sgetc();
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c&#32;=&#32;__sb-&gt;snextc();
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
464 
465 &#32;&#32;&#32;&#32;&#32;&#32;__first._M_c&#32;=&#32;__eof;
466 &#32;&#32;&#32;&#32;}
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
469 &#32;&#32;&#32;&#32;}
470 
471 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Distance&gt;
472 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&gt;::__type
474 &#32;&#32;&#32;&#32;advance(istreambuf_iterator&lt;_CharT&gt;&amp;&#32;__i,&#32;_Distance&#32;__n)
475 &#32;&#32;&#32;&#32;{
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;0)
477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
478 
479 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__n&#32;&gt;&#32;0);
480 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(!__i._M_at_eof(),
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa9a3105290003b2d92e6b340c8fa489a">__gnu_debug::__msg_inc_istreambuf</link>)
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__i));
483 
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;istreambuf_iterator&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_iterator_type;
485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__is_iterator_type::traits_type&#32;&#32;&#32;&#32;&#32;traits_type;
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__is_iterator_type::streambuf_type&#32;&#32;streambuf_type;
487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::int_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_type;
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;int_type&#32;__eof&#32;=&#32;traits_type::eof();
489 
490 &#32;&#32;&#32;&#32;&#32;&#32;streambuf_type*&#32;__sb&#32;=&#32;__i._M_sbuf;
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;&gt;&#32;0)
492 &#32;&#32;&#32;&#32;{
493 &#32;&#32;&#32;&#32;&#32;&#32;streamsize&#32;__size&#32;=&#32;__sb-&gt;egptr()&#32;-&#32;__sb-&gt;gptr();
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size&#32;&gt;&#32;__n)
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sb-&gt;__safe_gbump(__n);
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
499 
500 &#32;&#32;&#32;&#32;&#32;&#32;__sb-&gt;__safe_gbump(__size);
501 &#32;&#32;&#32;&#32;&#32;&#32;__n&#32;-=&#32;__size;
502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(traits_type::eq_int_type(__sb-&gt;underflow(),&#32;__eof))
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a16f965ce796ac9c5e5b4cb795808ee35">__glibcxx_requires_cond</link>(__n&#32;==&#32;0,
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_message(<link linkend="_namespace____gnu__debug_1aeb7af2ed24147dfab032febcea3f4fb3aa9a3105290003b2d92e6b340c8fa489a">__gnu_debug::__msg_inc_istreambuf</link>)
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_iterator(__i));
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
509 &#32;&#32;&#32;&#32;}
510 
511 &#32;&#32;&#32;&#32;&#32;&#32;__i._M_c&#32;=&#32;__eof;
512 &#32;&#32;&#32;&#32;}
513 
515 
516 _GLIBCXX_END_NAMESPACE_VERSION
517 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
518 
519 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
