<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2simd_8h_source" xml:lang="en-US">
<title>simd.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/simd.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Definition&#32;of&#32;the&#32;public&#32;simd&#32;interfaces&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_H</emphasis>
26 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_H</emphasis>
27 
28 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
29 
30 <emphasis role="preprocessor">#include&#32;&quot;simd_detail.h&quot;</emphasis>
31 <emphasis role="preprocessor">#include&#32;&quot;numeric_traits.h&quot;</emphasis>
32 <emphasis role="preprocessor">#include&#32;&lt;bit&gt;</emphasis>
33 <emphasis role="preprocessor">#include&#32;&lt;bitset&gt;</emphasis>
34 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG_UB</emphasis>
35 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;stderr</emphasis>
36 <emphasis role="preprocessor">#endif</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;utility&gt;</emphasis>
42 
43 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;x86intrin.h&gt;</emphasis>
45 <emphasis role="preprocessor">#elif&#32;_GLIBCXX_SIMD_HAVE_NEON</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;arm_neon.h&gt;</emphasis>
47 <emphasis role="preprocessor">#endif</emphasis>
48 
52 <emphasis role="comment">/*&#32;There&#32;are&#32;several&#32;closely&#32;related&#32;types,&#32;with&#32;the&#32;following&#32;naming</emphasis>
53 <emphasis role="comment">&#32;*&#32;convention:</emphasis>
54 <emphasis role="comment">&#32;*&#32;_Tp:&#32;vectorizable&#32;(arithmetic)&#32;type&#32;(or&#32;any&#32;type)</emphasis>
55 <emphasis role="comment">&#32;*&#32;_TV:&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;</emphasis>
56 <emphasis role="comment">&#32;*&#32;_TW:&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;</emphasis>
57 <emphasis role="comment">&#32;*&#32;_TI:&#32;__intrinsic_type_t&lt;_Tp,&#32;_Np&gt;</emphasis>
58 <emphasis role="comment">&#32;*&#32;_TVT:&#32;_VectorTraits&lt;_TV&gt;&#32;or&#32;_VectorTraits&lt;_TW&gt;</emphasis>
59 <emphasis role="comment">&#32;*&#32;If&#32;one&#32;additional&#32;type&#32;is&#32;needed&#32;use&#32;_U&#32;instead&#32;of&#32;_T.</emphasis>
60 <emphasis role="comment">&#32;*&#32;Otherwise&#32;use&#32;_T\d,&#32;_TV\d,&#32;_TW\d,&#32;TI\d,&#32;_TVT\d.</emphasis>
61 <emphasis role="comment">&#32;*</emphasis>
62 <emphasis role="comment">&#32;*&#32;More&#32;naming&#32;conventions:</emphasis>
63 <emphasis role="comment">&#32;*&#32;_Ap&#32;or&#32;_Abi:&#32;An&#32;ABI&#32;tag&#32;from&#32;the&#32;simd_abi&#32;namespace</emphasis>
64 <emphasis role="comment">&#32;*&#32;_Ip:&#32;often&#32;used&#32;for&#32;integer&#32;types&#32;with&#32;sizeof(_Ip)&#32;==&#32;sizeof(_Tp),</emphasis>
65 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;_IV,&#32;_IW&#32;as&#32;for&#32;_TV,&#32;_TW</emphasis>
66 <emphasis role="comment">&#32;*&#32;_Np:&#32;number&#32;of&#32;elements&#32;(not&#32;bytes)</emphasis>
67 <emphasis role="comment">&#32;*&#32;_Bytes:&#32;number&#32;of&#32;bytes</emphasis>
68 <emphasis role="comment">&#32;*</emphasis>
69 <emphasis role="comment">&#32;*&#32;Variable&#32;names:</emphasis>
70 <emphasis role="comment">&#32;*&#32;__k:&#32;mask&#32;object&#32;(vector-&#32;or&#32;bitmask)</emphasis>
71 <emphasis role="comment">&#32;*/</emphasis>
72 _GLIBCXX_SIMD_BEGIN_NAMESPACE
73 
74 <emphasis role="preprocessor">#if&#32;!_GLIBCXX_SIMD_X86INTRIN</emphasis>
75 <emphasis role="keyword">using&#32;</emphasis>__m128&#32;&#32;[[__gnu__::__vector_size__(16)]]&#32;=&#32;float;
76 <emphasis role="keyword">using&#32;</emphasis>__m128d&#32;[[__gnu__::__vector_size__(16)]]&#32;=&#32;double;
77 <emphasis role="keyword">using&#32;</emphasis>__m128i&#32;[[__gnu__::__vector_size__(16)]]&#32;=&#32;<emphasis role="keywordtype">long</emphasis>&#32;long;
78 <emphasis role="keyword">using&#32;</emphasis>__m256&#32;&#32;[[__gnu__::__vector_size__(32)]]&#32;=&#32;float;
79 <emphasis role="keyword">using&#32;</emphasis>__m256d&#32;[[__gnu__::__vector_size__(32)]]&#32;=&#32;double;
80 <emphasis role="keyword">using&#32;</emphasis>__m256i&#32;[[__gnu__::__vector_size__(32)]]&#32;=&#32;<emphasis role="keywordtype">long</emphasis>&#32;long;
81 <emphasis role="keyword">using&#32;</emphasis>__m512&#32;&#32;[[__gnu__::__vector_size__(64)]]&#32;=&#32;float;
82 <emphasis role="keyword">using&#32;</emphasis>__m512d&#32;[[__gnu__::__vector_size__(64)]]&#32;=&#32;double;
83 <emphasis role="keyword">using&#32;</emphasis>__m512i&#32;[[__gnu__::__vector_size__(64)]]&#32;=&#32;<emphasis role="keywordtype">long</emphasis>&#32;long;
84 <emphasis role="preprocessor">#endif</emphasis>
85 
86 <emphasis role="keyword">namespace&#32;</emphasis>simd_abi&#32;{
87 <emphasis role="comment">//&#32;simd_abi&#32;forward&#32;declarations&#32;{{{</emphasis>
88 <emphasis role="comment">//&#32;implementation&#32;details:</emphasis>
89 <emphasis role="keyword">struct&#32;</emphasis>_Scalar;
90 
91 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
92 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fixed;
93 
94 <emphasis role="comment">//&#32;There&#32;are&#32;two&#32;major&#32;ABIs&#32;that&#32;appear&#32;on&#32;different&#32;architectures.</emphasis>
95 <emphasis role="comment">//&#32;Both&#32;have&#32;non-boolean&#32;values&#32;packed&#32;into&#32;an&#32;N&#32;Byte&#32;register</emphasis>
96 <emphasis role="comment">//&#32;-&gt;&#32;#elements&#32;=&#32;N&#32;/&#32;sizeof(T)</emphasis>
97 <emphasis role="comment">//&#32;Masks&#32;differ:</emphasis>
98 <emphasis role="comment">//&#32;1.&#32;Use&#32;value&#32;vector&#32;registers&#32;for&#32;masks&#32;(all&#32;0&#32;or&#32;all&#32;1)</emphasis>
99 <emphasis role="comment">//&#32;2.&#32;Use&#32;bitmasks&#32;(mask&#32;registers)&#32;with&#32;one&#32;bit&#32;per&#32;value&#32;in&#32;the&#32;corresponding</emphasis>
100 <emphasis role="comment">//&#32;&#32;&#32;&#32;value&#32;vector</emphasis>
101 <emphasis role="comment">//</emphasis>
102 <emphasis role="comment">//&#32;Both&#32;can&#32;be&#32;partially&#32;used,&#32;masking&#32;off&#32;the&#32;rest&#32;when&#32;doing&#32;horizontal</emphasis>
103 <emphasis role="comment">//&#32;operations&#32;or&#32;operations&#32;that&#32;can&#32;trap&#32;(e.g.&#32;FP_INVALID&#32;or&#32;integer&#32;division</emphasis>
104 <emphasis role="comment">//&#32;by&#32;0).&#32;This&#32;is&#32;encoded&#32;as&#32;the&#32;number&#32;of&#32;used&#32;bytes.</emphasis>
105 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_UsedBytes&gt;
106 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_VecBuiltin;
107 
108 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_UsedBytes&gt;
109 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_VecBltnBtmsk;
110 
111 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
112 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_VecN&#32;=&#32;_VecBuiltin&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&gt;;
113 
114 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_UsedBytes&#32;=&#32;16&gt;
115 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sse&#32;=&#32;_VecBuiltin&lt;_UsedBytes&gt;;
116 
117 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_UsedBytes&#32;=&#32;32&gt;
118 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Avx&#32;=&#32;_VecBuiltin&lt;_UsedBytes&gt;;
119 
120 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_UsedBytes&#32;=&#32;64&gt;
121 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Avx512&#32;=&#32;_VecBltnBtmsk&lt;_UsedBytes&gt;;
122 
123 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_UsedBytes&#32;=&#32;16&gt;
124 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Neon&#32;=&#32;_VecBuiltin&lt;_UsedBytes&gt;;
125 
126 <emphasis role="comment">//&#32;implementation-defined:</emphasis>
127 <emphasis role="keyword">using&#32;</emphasis>__sse&#32;=&#32;_Sse&lt;&gt;;
128 <emphasis role="keyword">using&#32;</emphasis>__avx&#32;=&#32;_Avx&lt;&gt;;
129 <emphasis role="keyword">using&#32;</emphasis>__avx512&#32;=&#32;_Avx512&lt;&gt;;
130 <emphasis role="keyword">using&#32;</emphasis>__neon&#32;=&#32;_Neon&lt;&gt;;
131 <emphasis role="keyword">using&#32;</emphasis>__neon128&#32;=&#32;_Neon&lt;16&gt;;
132 <emphasis role="keyword">using&#32;</emphasis>__neon64&#32;=&#32;_Neon&lt;8&gt;;
133 
134 <emphasis role="comment">//&#32;standard:</emphasis>
135 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>...&gt;
136 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>deduce;
137 
138 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
139 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>fixed_size&#32;=&#32;_Fixed&lt;_Np&gt;;
140 
141 <emphasis role="keyword">using&#32;</emphasis>scalar&#32;=&#32;_Scalar;
142 
143 <emphasis role="comment">//&#32;}}}</emphasis>
144 }&#32;<emphasis role="comment">//&#32;namespace&#32;simd_abi</emphasis>
145 <emphasis role="comment">//&#32;forward&#32;declarations&#32;is_simd(_mask),&#32;simd(_mask),&#32;simd_size&#32;{{{</emphasis>
146 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
147 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_simd;
148 
149 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
150 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_simd_mask;
151 
152 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
153 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>simd;
154 
155 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
156 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>simd_mask;
157 
158 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
159 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>simd_size;
160 
161 <emphasis role="comment">//&#32;}}}</emphasis>
162 <emphasis role="comment">//&#32;load/store&#32;flags&#32;{{{</emphasis>
163 <emphasis role="keyword">struct&#32;</emphasis>element_aligned_tag
164 {
165 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type&gt;
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_alignment&#32;=&#32;<emphasis role="keyword">alignof</emphasis>(_Up);
167 
168 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
169 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Up*
170 &#32;&#32;&#32;&#32;_S_apply(_Up*&#32;__ptr)
171 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr;&#32;}
172 };
173 
174 <emphasis role="keyword">struct&#32;</emphasis>vector_aligned_tag
175 {
176 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type&gt;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_alignment
178 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__bit_ceil(<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;_Tp::size());
179 
180 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
181 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Up*
182 &#32;&#32;&#32;&#32;_S_apply(_Up*&#32;__ptr)
183 &#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up*<emphasis role="keyword">&gt;</emphasis>(
185 &#32;&#32;&#32;&#32;__builtin_assume_aligned(__ptr,&#32;_S_alignment&lt;_Tp,&#32;_Up&gt;));
186 &#32;&#32;&#32;&#32;}
187 };
188 
189 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>overaligned_tag
190 {
191 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_alignment&#32;=&#32;_Np;
193 
194 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
195 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Up*
196 &#32;&#32;&#32;&#32;_S_apply(_Up*&#32;__ptr)
197 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up*<emphasis role="keyword">&gt;</emphasis>(__builtin_assume_aligned(__ptr,&#32;_Np));&#32;}
198 };
199 
200 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;element_aligned_tag&#32;element_aligned&#32;=&#32;{};
201 
202 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;vector_aligned_tag&#32;vector_aligned&#32;=&#32;{};
203 
204 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
205 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;overaligned_tag&lt;_Np&gt;&#32;overaligned&#32;=&#32;{};
206 
207 <emphasis role="comment">//&#32;}}}</emphasis>
208 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Xp&gt;
209 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SizeConstant&#32;=&#32;integral_constant&lt;size_t,&#32;_Xp&gt;;
210 <emphasis role="comment">//&#32;constexpr&#32;feature&#32;detection{{{</emphasis>
211 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_mmx&#32;=&#32;_GLIBCXX_SIMD_HAVE_MMX;
212 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_sse&#32;=&#32;_GLIBCXX_SIMD_HAVE_SSE;
213 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_sse2&#32;=&#32;_GLIBCXX_SIMD_HAVE_SSE2;
214 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_sse3&#32;=&#32;_GLIBCXX_SIMD_HAVE_SSE3;
215 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_ssse3&#32;=&#32;_GLIBCXX_SIMD_HAVE_SSSE3;
216 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_sse4_1&#32;=&#32;_GLIBCXX_SIMD_HAVE_SSE4_1;
217 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_sse4_2&#32;=&#32;_GLIBCXX_SIMD_HAVE_SSE4_2;
218 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_xop&#32;=&#32;_GLIBCXX_SIMD_HAVE_XOP;
219 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX;
220 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx2&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX2;
221 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_bmi&#32;=&#32;_GLIBCXX_SIMD_HAVE_BMI1;
222 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_bmi2&#32;=&#32;_GLIBCXX_SIMD_HAVE_BMI2;
223 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_lzcnt&#32;=&#32;_GLIBCXX_SIMD_HAVE_LZCNT;
224 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_sse4a&#32;=&#32;_GLIBCXX_SIMD_HAVE_SSE4A;
225 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_fma&#32;=&#32;_GLIBCXX_SIMD_HAVE_FMA;
226 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_fma4&#32;=&#32;_GLIBCXX_SIMD_HAVE_FMA4;
227 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_f16c&#32;=&#32;_GLIBCXX_SIMD_HAVE_F16C;
228 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_popcnt&#32;=&#32;_GLIBCXX_SIMD_HAVE_POPCNT;
229 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512f&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512F;
230 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512dq&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512DQ;
231 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512vl&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512VL;
232 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512bw&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512BW;
233 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512dq_vl&#32;=&#32;__have_avx512dq&#32;&amp;&amp;&#32;__have_avx512vl;
234 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512bw_vl&#32;=&#32;__have_avx512bw&#32;&amp;&amp;&#32;__have_avx512vl;
235 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512bitalg&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512BITALG;
236 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512vbmi2&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512VBMI2;
237 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512vbmi&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512VBMI;
238 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512ifma&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512IFMA;
239 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512cd&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512CD;
240 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512vnni&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512VNNI;
241 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512vpopcntdq&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512VPOPCNTDQ;
242 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_avx512vp2intersect&#32;=&#32;_GLIBCXX_SIMD_HAVE_AVX512VP2INTERSECT;
243 
244 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_neon&#32;=&#32;_GLIBCXX_SIMD_HAVE_NEON;
245 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_neon_a32&#32;=&#32;_GLIBCXX_SIMD_HAVE_NEON_A32;
246 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_neon_a64&#32;=&#32;_GLIBCXX_SIMD_HAVE_NEON_A64;
247 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__support_neon_float&#32;=
248 <emphasis role="preprocessor">#if&#32;defined&#32;__GCC_IEC_559</emphasis>
249 &#32;&#32;__GCC_IEC_559&#32;==&#32;0;
250 <emphasis role="preprocessor">#elif&#32;defined&#32;__FAST_MATH__</emphasis>
251 &#32;&#32;<emphasis role="keyword">true</emphasis>;
252 <emphasis role="preprocessor">#else</emphasis>
253 &#32;&#32;<emphasis role="keyword">false</emphasis>;
254 <emphasis role="preprocessor">#endif</emphasis>
255 
256 <emphasis role="preprocessor">#ifdef&#32;_ARCH_PWR10</emphasis>
257 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power10vec&#32;=&#32;<emphasis role="keyword">true</emphasis>;
258 <emphasis role="preprocessor">#else</emphasis>
259 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power10vec&#32;=&#32;<emphasis role="keyword">false</emphasis>;
260 <emphasis role="preprocessor">#endif</emphasis>
261 <emphasis role="preprocessor">#ifdef&#32;__POWER9_VECTOR__</emphasis>
262 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power9vec&#32;=&#32;<emphasis role="keyword">true</emphasis>;
263 <emphasis role="preprocessor">#else</emphasis>
264 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power9vec&#32;=&#32;<emphasis role="keyword">false</emphasis>;
265 <emphasis role="preprocessor">#endif</emphasis>
266 <emphasis role="preprocessor">#if&#32;defined&#32;__POWER8_VECTOR__</emphasis>
267 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power8vec&#32;=&#32;<emphasis role="keyword">true</emphasis>;
268 <emphasis role="preprocessor">#else</emphasis>
269 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power8vec&#32;=&#32;__have_power9vec;
270 <emphasis role="preprocessor">#endif</emphasis>
271 <emphasis role="preprocessor">#if&#32;defined&#32;__VSX__</emphasis>
272 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power_vsx&#32;=&#32;<emphasis role="keyword">true</emphasis>;
273 <emphasis role="preprocessor">#else</emphasis>
274 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power_vsx&#32;=&#32;__have_power8vec;
275 <emphasis role="preprocessor">#endif</emphasis>
276 <emphasis role="preprocessor">#if&#32;defined&#32;__ALTIVEC__</emphasis>
277 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power_vmx&#32;=&#32;<emphasis role="keyword">true</emphasis>;
278 <emphasis role="preprocessor">#else</emphasis>
279 <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__have_power_vmx&#32;=&#32;__have_power_vsx;
280 <emphasis role="preprocessor">#endif</emphasis>
281 
282 <emphasis role="comment">//&#32;}}}</emphasis>
283 
284 <emphasis role="keyword">namespace&#32;</emphasis>__detail
285 {
286 <emphasis role="preprocessor">#ifdef&#32;math_errhandling</emphasis>
287 &#32;&#32;<emphasis role="comment">//&#32;Determines&#32;_S_handle_fpexcept&#32;from&#32;math_errhandling&#32;if&#32;it&#32;is&#32;defined&#32;and&#32;expands&#32;to&#32;a&#32;constant</emphasis>
288 &#32;&#32;<emphasis role="comment">//&#32;expression.&#32;math_errhandling&#32;may&#32;expand&#32;to&#32;an&#32;extern&#32;symbol,&#32;in&#32;which&#32;case&#32;a&#32;constexpr&#32;value</emphasis>
289 &#32;&#32;<emphasis role="comment">//&#32;must&#32;be&#32;guessed.</emphasis>
290 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;=&#32;math_errhandling&gt;
291 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__handle_fpexcept_impl(<emphasis role="keywordtype">int</emphasis>)
292 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;math_errhandling&#32;&amp;&#32;MATH_ERREXCEPT;&#32;}
293 <emphasis role="preprocessor">#endif</emphasis>
294 
295 &#32;&#32;<emphasis role="comment">//&#32;Fallback&#32;if&#32;math_errhandling&#32;doesn&apos;t&#32;work:&#32;with&#32;fast-math&#32;assume&#32;floating-point&#32;exceptions&#32;are</emphasis>
296 &#32;&#32;<emphasis role="comment">//&#32;ignored,&#32;otherwise&#32;implement&#32;correct&#32;exception&#32;behavior.</emphasis>
297 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__handle_fpexcept_impl(<emphasis role="keywordtype">float</emphasis>)
298 &#32;&#32;{
299 <emphasis role="preprocessor">#if&#32;defined&#32;__FAST_MATH__</emphasis>
300 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
301 <emphasis role="preprocessor">#else</emphasis>
302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
303 <emphasis role="preprocessor">#endif</emphasis>
304 &#32;&#32;}
305 
307 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_handle_fpexcept&#32;=&#32;__handle_fpexcept_impl(0);
308 
309 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::uint_least64_t
310 &#32;&#32;__floating_point_flags()
311 &#32;&#32;{
312 &#32;&#32;&#32;&#32;std::uint_least64_t&#32;__flags&#32;=&#32;0;
313 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_handle_fpexcept)
314 &#32;&#32;&#32;&#32;&#32;&#32;__flags&#32;|=&#32;1;
315 <emphasis role="preprocessor">#ifdef&#32;__FAST_MATH__</emphasis>
316 &#32;&#32;&#32;&#32;__flags&#32;|=&#32;1&#32;&lt;&lt;&#32;1;
317 <emphasis role="preprocessor">#elif&#32;__FINITE_MATH_ONLY__</emphasis>
318 &#32;&#32;&#32;&#32;__flags&#32;|=&#32;2&#32;&lt;&lt;&#32;1;
319 <emphasis role="preprocessor">#elif&#32;__GCC_IEC_559&#32;&lt;&#32;2</emphasis>
320 &#32;&#32;&#32;&#32;__flags&#32;|=&#32;3&#32;&lt;&lt;&#32;1;
321 <emphasis role="preprocessor">#endif</emphasis>
322 &#32;&#32;&#32;&#32;__flags&#32;|=&#32;(__FLT_EVAL_METHOD__&#32;+&#32;1)&#32;&lt;&lt;&#32;3;
323 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__flags;
324 &#32;&#32;}
325 
326 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;std::uint_least64_t
327 &#32;&#32;__machine_flags()
328 &#32;&#32;{
329 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_mmx&#32;||&#32;__have_sse)
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_mmx
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_sse&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;1)
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_sse2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;2)
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_sse3&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;3)
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_ssse3&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;4)
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_sse4_1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;5)
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_sse4_2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;6)
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_xop&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;7)
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;8)
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;9)
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_bmi&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;10)
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_bmi2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;11)
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_lzcnt&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;12)
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_sse4a&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;13)
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_fma&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;14)
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_fma4&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;15)
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_f16c&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;16)
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_popcnt&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;17)
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512f&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;18)
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512dq&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;19)
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512vl&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;20)
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512bw&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;21)
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512bitalg&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;22)
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512vbmi2&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;23)
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512vbmi&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;24)
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512ifma&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;25)
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512cd&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;26)
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512vnni&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&lt;&#32;27)
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512vpopcntdq&#32;&#32;&#32;&#32;&lt;&lt;&#32;28)
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_avx512vp2intersect&#32;&lt;&lt;&#32;29);
360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon)
361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_neon
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_neon_a32&#32;&lt;&lt;&#32;1)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_neon_a64&#32;&lt;&lt;&#32;2)
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_neon_a64&#32;&lt;&lt;&#32;2)
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__support_neon_float&#32;&lt;&lt;&#32;3);
366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_power_vmx)
367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__have_power_vmx
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_power_vsx&#32;&#32;&lt;&lt;&#32;1)
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_power8vec&#32;&#32;&lt;&lt;&#32;2)
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_power9vec&#32;&#32;&lt;&lt;&#32;3)
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;(__have_power10vec&#32;&lt;&lt;&#32;4);
372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
374 &#32;&#32;}
375 
376 &#32;&#32;<emphasis role="keyword">namespace</emphasis>
377 &#32;&#32;{
378 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_OdrEnforcer&#32;{};
379 &#32;&#32;}
380 
381 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;std::uint_least64_t...&gt;
382 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MachineFlagsTemplate&#32;{};
383 
393 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__odr_helper
394 &#32;&#32;&#32;&#32;=&#32;conditional_t&lt;__machine_flags()&#32;==&#32;0,&#32;_OdrEnforcer,
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MachineFlagsTemplate&lt;__machine_flags(),&#32;__floating_point_flags()&gt;&gt;;
396 
397 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Minimum
398 &#32;&#32;{
399 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
400 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
401 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
402 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&#32;__a,&#32;_Tp&#32;__b)<emphasis role="keyword">&#32;const</emphasis>
403 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::min;
405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(__a,&#32;__b);
406 &#32;&#32;&#32;&#32;&#32;&#32;}
407 &#32;&#32;};
408 
409 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Maximum
410 &#32;&#32;{
411 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
412 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
413 &#32;&#32;&#32;&#32;&#32;&#32;_Tp
414 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&#32;__a,&#32;_Tp&#32;__b)<emphasis role="keyword">&#32;const</emphasis>
415 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
416 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::max;
417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(__a,&#32;__b);
418 &#32;&#32;&#32;&#32;&#32;&#32;}
419 &#32;&#32;};
420 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
421 
422 <emphasis role="comment">//&#32;unrolled/pack&#32;execution&#32;helpers</emphasis>
423 <emphasis role="comment">//&#32;__execute_n_times{{{</emphasis>
424 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
425 &#32;&#32;[[__gnu__::__flatten__]]&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
426 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
427 &#32;&#32;__execute_on_index_sequence(_Fp&amp;&amp;&#32;__f,&#32;index_sequence&lt;_I...&gt;)
428 &#32;&#32;{&#32;((<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)__f(_SizeConstant&lt;_I&gt;()),&#32;...);&#32;}
429 
430 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
431 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
432 &#32;&#32;__execute_on_index_sequence(_Fp&amp;&amp;,&#32;index_sequence&lt;&gt;)
433 &#32;&#32;{&#32;}
434 
435 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
436 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
437 &#32;&#32;__execute_n_times(_Fp&amp;&amp;&#32;__f)
438 &#32;&#32;{
439 &#32;&#32;&#32;&#32;__execute_on_index_sequence(<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__f),
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_Np&gt;{});
441 &#32;&#32;}
442 
443 <emphasis role="comment">//&#32;}}}</emphasis>
444 <emphasis role="comment">//&#32;__generate_from_n_evaluations{{{</emphasis>
445 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_R,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
446 &#32;&#32;[[__gnu__::__flatten__]]&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
447 &#32;&#32;_R
448 &#32;&#32;__execute_on_index_sequence_with_return(_Fp&amp;&amp;&#32;__f,&#32;index_sequence&lt;_I...&gt;)
449 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__f(_SizeConstant&lt;_I&gt;())...};&#32;}
450 
451 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_R,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
452 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_R
453 &#32;&#32;__generate_from_n_evaluations(_Fp&amp;&amp;&#32;__f)
454 &#32;&#32;{
455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__execute_on_index_sequence_with_return&lt;_R&gt;(
456 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__f),&#32;make_index_sequence&lt;_Np&gt;{});
457 &#32;&#32;}
458 
459 <emphasis role="comment">//&#32;}}}</emphasis>
460 <emphasis role="comment">//&#32;__call_with_n_evaluations{{{</emphasis>
461 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FArgs&gt;
462 &#32;&#32;[[__gnu__::__flatten__]]&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
463 &#32;&#32;<emphasis role="keyword">auto</emphasis>
464 &#32;&#32;__call_with_n_evaluations(index_sequence&lt;_I...&gt;,&#32;_F0&amp;&amp;&#32;__f0,&#32;_FArgs&amp;&amp;&#32;__fargs)
465 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__f0(__fargs(_SizeConstant&lt;_I&gt;())...);&#32;}
466 
467 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FArgs&gt;
468 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
469 &#32;&#32;__call_with_n_evaluations(_F0&amp;&amp;&#32;__f0,&#32;_FArgs&amp;&amp;&#32;__fargs)
470 &#32;&#32;{
471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_n_evaluations(make_index_sequence&lt;_Np&gt;{},
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_F0&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__f0),
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_FArgs&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fargs));
474 &#32;&#32;}
475 
476 <emphasis role="comment">//&#32;}}}</emphasis>
477 <emphasis role="comment">//&#32;__call_with_subscripts{{{</emphasis>
478 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_First&#32;=&#32;0,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_It,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
479 &#32;&#32;[[__gnu__::__flatten__]]&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
480 &#32;&#32;<emphasis role="keyword">auto</emphasis>
481 &#32;&#32;__call_with_subscripts(_Tp&amp;&amp;&#32;__x,&#32;index_sequence&lt;_It...&gt;,&#32;_Fp&amp;&amp;&#32;__fun)
482 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fun(__x[_First&#32;+&#32;_It]...);&#32;}
483 
484 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_First&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
485 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
486 &#32;&#32;__call_with_subscripts(_Tp&amp;&amp;&#32;__x,&#32;_Fp&amp;&amp;&#32;__fun)
487 &#32;&#32;{
488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts&lt;_First&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x),
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_Np&gt;(),
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun));
491 &#32;&#32;}
492 
493 <emphasis role="comment">//&#32;}}}</emphasis>
494 
495 <emphasis role="comment">//&#32;vvv&#32;----&#32;type&#32;traits&#32;----&#32;vvv</emphasis>
496 <emphasis role="comment">//&#32;integer&#32;type&#32;aliases{{{</emphasis>
497 <emphasis role="keyword">using&#32;</emphasis>_UChar&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;char;
498 <emphasis role="keyword">using&#32;</emphasis>_SChar&#32;=&#32;<emphasis role="keywordtype">signed</emphasis>&#32;char;
499 <emphasis role="keyword">using&#32;</emphasis>_UShort&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;short;
500 <emphasis role="keyword">using&#32;</emphasis>_UInt&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;int;
501 <emphasis role="keyword">using&#32;</emphasis>_ULong&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;long;
502 <emphasis role="keyword">using&#32;</emphasis>_ULLong&#32;=&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;long;
503 <emphasis role="keyword">using&#32;</emphasis>_LLong&#32;=&#32;<emphasis role="keywordtype">long</emphasis>&#32;long;
504 
505 <emphasis role="comment">//}}}</emphasis>
506 <emphasis role="comment">//&#32;__first_of_pack{{{</emphasis>
507 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_T0,&#32;<emphasis role="keyword">typename</emphasis>...&gt;
508 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__first_of_pack
509 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_T0;&#32;};
510 
511 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Ts&gt;
512 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__first_of_pack_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__first_of_pack&lt;_Ts...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
513 
514 <emphasis role="comment">//}}}</emphasis>
515 <emphasis role="comment">//&#32;__value_type_or_identity_t&#32;{{{</emphasis>
516 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
517 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type
518 &#32;&#32;__value_type_or_identity_impl(<emphasis role="keywordtype">int</emphasis>);
519 
520 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
521 &#32;&#32;_Tp
522 &#32;&#32;__value_type_or_identity_impl(<emphasis role="keywordtype">float</emphasis>);
523 
524 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
525 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__value_type_or_identity_t
526 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__value_type_or_identity_impl&lt;_Tp&gt;(<emphasis role="keywordtype">int</emphasis>()));
527 
528 <emphasis role="comment">//&#32;}}}</emphasis>
529 <emphasis role="comment">//&#32;__is_vectorizable&#32;{{{</emphasis>
530 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
531 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_vectorizable&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;is_arithmetic&lt;_Tp&gt;&#32;{};
532 
533 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
534 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_vectorizable&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
535 
536 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
537 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_vectorizable_v&#32;=&#32;__is_vectorizable&lt;_Tp&gt;::value;
538 
539 <emphasis role="comment">//&#32;Deduces&#32;to&#32;a&#32;vectorizable&#32;type</emphasis>
540 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;enable_if_t&lt;__is_vectorizable_v&lt;_Tp&gt;&gt;&gt;
541 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vectorizable&#32;=&#32;_Tp;
542 
543 <emphasis role="comment">//&#32;}}}</emphasis>
544 <emphasis role="comment">//&#32;_LoadStorePtr&#32;/&#32;__is_possible_loadstore_conversion&#32;{{{</emphasis>
545 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueType&gt;
546 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_possible_loadstore_conversion
547 &#32;&#32;:&#32;conjunction&lt;__is_vectorizable&lt;_Ptr&gt;,&#32;__is_vectorizable&lt;_ValueType&gt;&gt;&#32;{};
548 
549 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
550 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_possible_loadstore_conversion&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
551 
552 <emphasis role="comment">//&#32;Deduces&#32;to&#32;a&#32;type&#32;allowed&#32;for&#32;load/store&#32;with&#32;the&#32;given&#32;value&#32;type.</emphasis>
553 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueType,
554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_possible_loadstore_conversion&lt;_Ptr,&#32;_ValueType&gt;::value&gt;&gt;
556 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_LoadStorePtr&#32;=&#32;_Ptr;
557 
558 <emphasis role="comment">//&#32;}}}</emphasis>
559 <emphasis role="comment">//&#32;__is_bitmask{{{</emphasis>
560 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
561 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_bitmask&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
562 
563 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
564 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_bitmask_v&#32;=&#32;__is_bitmask&lt;_Tp&gt;::value;
565 
566 <emphasis role="comment">//&#32;the&#32;__mmaskXX&#32;case:</emphasis>
567 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
568 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_bitmask&lt;_Tp,
569 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;decltype(declval&lt;unsigned&amp;&gt;()&#32;=&#32;declval&lt;_Tp&gt;()&#32;&amp;&#32;1u)&gt;&gt;
570 &#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
571 
572 <emphasis role="comment">//&#32;}}}</emphasis>
573 <emphasis role="comment">//&#32;__int_for_sizeof{{{</emphasis>
574 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
575 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wpedantic&quot;</emphasis>
576 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&gt;
577 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
578 &#32;&#32;__int_for_sizeof()
579 &#32;&#32;{
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(int))
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int();
582 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;__clang__</emphasis>
583 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(char))
584 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;char();
585 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
586 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_SChar))
587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SChar();
588 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
589 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(short))
590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;short();
591 <emphasis role="preprocessor">&#32;&#32;#ifndef&#32;__clang__</emphasis>
592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(long))
593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;long();
594 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_LLong))
596 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_LLong();
597 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;__SIZEOF_INT128__</emphasis>
598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(__int128))
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__int128();
600 <emphasis role="preprocessor">&#32;&#32;#endif&#32;</emphasis><emphasis role="comment">//&#32;__SIZEOF_INT128__</emphasis>
601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bytes&#32;%&#32;<emphasis role="keyword">sizeof</emphasis>(int)&#32;==&#32;0)
602 &#32;&#32;&#32;&#32;&#32;&#32;{
603 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Bytes&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(int);
604 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Ip
605 &#32;&#32;&#32;&#32;{
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_data[_Np];
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ip
609 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(_Ip&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
610 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_Ip&gt;(
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs._M_data[__i]&#32;&amp;&#32;_M_data[__i];&#32;});
613 &#32;&#32;&#32;&#32;&#32;&#32;}
614 
615 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ip
616 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(_Ip&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
617 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_Ip&gt;(
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs._M_data[__i]&#32;|&#32;_M_data[__i];&#32;});
620 &#32;&#32;&#32;&#32;&#32;&#32;}
621 
622 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ip
623 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(_Ip&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
624 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_Ip&gt;(
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs._M_data[__i]&#32;^&#32;_M_data[__i];&#32;});
627 &#32;&#32;&#32;&#32;&#32;&#32;}
628 
629 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ip
630 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>()<emphasis role="keyword">&#32;const</emphasis>
631 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Np,&#32;_Ip&gt;(
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;~_M_data[__i];&#32;});
634 &#32;&#32;&#32;&#32;&#32;&#32;}
635 &#32;&#32;&#32;&#32;};
636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Ip{};
637 &#32;&#32;&#32;&#32;&#32;&#32;}
638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
639 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Bytes&#32;!=&#32;_Bytes,&#32;<emphasis role="stringliteral">&quot;this&#32;should&#32;be&#32;unreachable&quot;</emphasis>);
640 &#32;&#32;}
641 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
642 
643 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
644 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__int_for_sizeof_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__int_for_sizeof&lt;sizeof(_Tp)&gt;());
645 
646 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
647 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__int_with_sizeof_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__int_for_sizeof&lt;_Np&gt;());
648 
649 <emphasis role="comment">//&#32;}}}</emphasis>
650 <emphasis role="comment">//&#32;__is_fixed_size_abi{{{</emphasis>
651 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
652 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fixed_size_abi&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
653 
654 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
655 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fixed_size_abi&lt;simd_abi::fixed_size&lt;_Np&gt;&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
656 
657 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
658 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_fixed_size_abi_v&#32;=&#32;__is_fixed_size_abi&lt;_Tp&gt;::value;
659 
660 <emphasis role="comment">//&#32;}}}</emphasis>
661 <emphasis role="comment">//&#32;__is_scalar_abi&#32;{{{</emphasis>
662 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
663 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
664 &#32;&#32;__is_scalar_abi()
665 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_same_v&lt;simd_abi::scalar,&#32;_Abi&gt;;&#32;}
666 
667 <emphasis role="comment">//&#32;}}}</emphasis>
668 <emphasis role="comment">//&#32;__abi_bytes_v&#32;{{{</emphasis>
669 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Abi,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Bytes&gt;
670 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
671 &#32;&#32;__abi_bytes_impl(_Abi&lt;_Bytes&gt;*)
672 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bytes;&#32;}
673 
674 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
675 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
676 &#32;&#32;__abi_bytes_impl(_Tp*)
677 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;&#32;}
678 
679 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
680 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__abi_bytes_v
681 &#32;&#32;&#32;&#32;=&#32;__abi_bytes_impl(<emphasis role="keyword">static_cast&lt;</emphasis>_Abi*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>));
682 
683 <emphasis role="comment">//&#32;}}}</emphasis>
684 <emphasis role="comment">//&#32;__is_builtin_bitmask_abi&#32;{{{</emphasis>
685 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
686 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
687 &#32;&#32;__is_builtin_bitmask_abi()
688 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_same_v&lt;simd_abi::_VecBltnBtmsk&lt;__abi_bytes_v&lt;_Abi&gt;&gt;,&#32;_Abi&gt;;&#32;}
689 
690 <emphasis role="comment">//&#32;}}}</emphasis>
691 <emphasis role="comment">//&#32;__is_sse_abi&#32;{{{</emphasis>
692 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
693 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
694 &#32;&#32;__is_sse_abi()
695 &#32;&#32;{
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_Bytes&#32;=&#32;__abi_bytes_v&lt;_Abi&gt;;
697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bytes&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;is_same_v&lt;simd_abi::_VecBuiltin&lt;_Bytes&gt;,&#32;_Abi&gt;;
698 &#32;&#32;}
699 
700 <emphasis role="comment">//&#32;}}}</emphasis>
701 <emphasis role="comment">//&#32;__is_avx_abi&#32;{{{</emphasis>
702 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
703 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
704 &#32;&#32;__is_avx_abi()
705 &#32;&#32;{
706 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_Bytes&#32;=&#32;__abi_bytes_v&lt;_Abi&gt;;
707 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bytes&#32;&gt;&#32;16&#32;&amp;&amp;&#32;_Bytes&#32;&lt;=&#32;32
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;simd_abi::_VecBuiltin&lt;_Bytes&gt;,&#32;_Abi&gt;;
709 &#32;&#32;}
710 
711 <emphasis role="comment">//&#32;}}}</emphasis>
712 <emphasis role="comment">//&#32;__is_avx512_abi&#32;{{{</emphasis>
713 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
714 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
715 &#32;&#32;__is_avx512_abi()
716 &#32;&#32;{
717 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_Bytes&#32;=&#32;__abi_bytes_v&lt;_Abi&gt;;
718 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bytes&#32;&lt;=&#32;64&#32;&amp;&amp;&#32;is_same_v&lt;simd_abi::_Avx512&lt;_Bytes&gt;,&#32;_Abi&gt;;
719 &#32;&#32;}
720 
721 <emphasis role="comment">//&#32;}}}</emphasis>
722 <emphasis role="comment">//&#32;__is_neon_abi&#32;{{{</emphasis>
723 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
724 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
725 &#32;&#32;__is_neon_abi()
726 &#32;&#32;{
727 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_Bytes&#32;=&#32;__abi_bytes_v&lt;_Abi&gt;;
728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bytes&#32;&lt;=&#32;16&#32;&amp;&amp;&#32;is_same_v&lt;simd_abi::_VecBuiltin&lt;_Bytes&gt;,&#32;_Abi&gt;;
729 &#32;&#32;}
730 
731 <emphasis role="comment">//&#32;}}}</emphasis>
732 <emphasis role="comment">//&#32;__make_dependent_t&#32;{{{</emphasis>
733 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
734 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__make_dependent
735 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Up;&#32;};
736 
737 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
738 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__make_dependent_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__make_dependent&lt;_Tp,&#32;_Up&gt;::type;
739 
740 <emphasis role="comment">//&#32;}}}</emphasis>
741 <emphasis role="comment">//&#32;^^^&#32;----&#32;type&#32;traits&#32;----&#32;^^^</emphasis>
742 
743 <emphasis role="comment">//&#32;__invoke_ub{{{</emphasis>
744 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
745 &#32;&#32;[[<link linkend="__classes_2lib_2include_2stdnoreturn_8h_1a4a453f3a748e55cbdac6fcc79357cfef">noreturn</link>]]&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">void</emphasis>
746 &#32;&#32;__invoke_ub([[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__msg,
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">const</emphasis>&#32;_Args&amp;...&#32;__args)
748 &#32;&#32;{
749 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG_UB</emphasis>
750 &#32;&#32;&#32;&#32;__builtin_fprintf(stderr,&#32;__msg,&#32;__args...);
751 &#32;&#32;&#32;&#32;__builtin_trap();
752 <emphasis role="preprocessor">#else</emphasis>
753 &#32;&#32;&#32;&#32;__builtin_unreachable();
754 <emphasis role="preprocessor">#endif</emphasis>
755 &#32;&#32;}
756 
757 <emphasis role="comment">//&#32;}}}</emphasis>
758 <emphasis role="comment">//&#32;__assert_unreachable{{{</emphasis>
759 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
760 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__assert_unreachable
761 &#32;&#32;{&#32;<emphasis role="keyword">static_assert</emphasis>(!is_same_v&lt;_Tp,&#32;_Tp&gt;,&#32;<emphasis role="stringliteral">&quot;this&#32;should&#32;be&#32;unreachable&quot;</emphasis>);&#32;};
762 
763 <emphasis role="comment">//&#32;}}}</emphasis>
764 <emphasis role="comment">//&#32;__size_or_zero_v&#32;{{{</emphasis>
765 template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;_Ap,&#32;size_t&#32;_Np&#32;=&#32;simd_size&lt;_Tp,&#32;_Ap&gt;::value&gt;
766 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
767 &#32;&#32;__size_or_zero_dispatch(<emphasis role="keywordtype">int</emphasis>)
768 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Np;&#32;}
769 
770 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
771 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
772 &#32;&#32;__size_or_zero_dispatch(<emphasis role="keywordtype">float</emphasis>)
773 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
774 
775 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
776 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__size_or_zero_v
777 &#32;&#32;&#32;&#32;&#32;=&#32;__size_or_zero_dispatch&lt;_Tp,&#32;_Ap&gt;(0);
778 
779 <emphasis role="comment">//&#32;}}}</emphasis>
780 <emphasis role="comment">//&#32;__div_roundup&#32;{{{</emphasis>
781 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
782 __div_roundup(<emphasis role="keywordtype">size_t</emphasis>&#32;__a,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__b)
783 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__a&#32;+&#32;__b&#32;-&#32;1)&#32;/&#32;__b;&#32;}
784 
785 <emphasis role="comment">//&#32;}}}</emphasis>
786 <emphasis role="comment">//&#32;_ExactBool{{{</emphasis>
787 <emphasis role="keyword">class&#32;</emphasis>_ExactBool
788 {
789 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_data;
790 
791 <emphasis role="keyword">public</emphasis>:
792 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ExactBool(<emphasis role="keywordtype">bool</emphasis>&#32;__b)&#32;:&#32;_M_data(__b)&#32;{}
793 
794 &#32;&#32;_ExactBool(<emphasis role="keywordtype">int</emphasis>)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
795 
796 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
797 };
798 
799 <emphasis role="comment">//&#32;}}}</emphasis>
800 <emphasis role="comment">//&#32;__may_alias{{{</emphasis>
806 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
807 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__may_alias&#32;[[__gnu__::__may_alias__]]&#32;=&#32;_Tp;
808 
809 <emphasis role="comment">//&#32;}}}</emphasis>
810 <emphasis role="comment">//&#32;_UnsupportedBase&#32;{{{</emphasis>
811 <emphasis role="comment">//&#32;simd&#32;and&#32;simd_mask&#32;base&#32;for&#32;unsupported&#32;&lt;_Tp,&#32;_Abi&gt;</emphasis>
812 <emphasis role="keyword">struct&#32;</emphasis>_UnsupportedBase
813 {
814 &#32;&#32;_UnsupportedBase()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
815 &#32;&#32;_UnsupportedBase(<emphasis role="keyword">const</emphasis>&#32;_UnsupportedBase&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
816 &#32;&#32;_UnsupportedBase&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_UnsupportedBase&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
817 &#32;&#32;~_UnsupportedBase()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
818 };
819 
820 <emphasis role="comment">//&#32;}}}</emphasis>
821 <emphasis role="comment">//&#32;_InvalidTraits&#32;{{{</emphasis>
830 <emphasis role="keyword">struct&#32;</emphasis>_InvalidTraits
831 {
832 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_IsValid&#32;=&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>;
833 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdBase&#32;=&#32;_UnsupportedBase;
834 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskBase&#32;=&#32;_UnsupportedBase;
835 
836 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;0;
837 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_partial&#32;=&#32;<emphasis role="keyword">false</emphasis>;
838 
839 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_simd_align&#32;=&#32;1;
840 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImpl;
841 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdMember&#32;{};
842 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdCastType;
843 
844 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_mask_align&#32;=&#32;1;
845 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImpl;
846 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskMember&#32;{};
847 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskCastType;
848 };
849 
850 <emphasis role="comment">//&#32;}}}</emphasis>
851 <emphasis role="comment">//&#32;_SimdTraits&#32;{{{</emphasis>
852 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
853 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdTraits&#32;:&#32;_InvalidTraits&#32;{};
854 
855 <emphasis role="comment">//&#32;}}}</emphasis>
856 <emphasis role="comment">//&#32;__private_init,&#32;__bitset_init{{{</emphasis>
861 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_PrivateInit&#32;{}&#32;__private_init&#32;=&#32;{};
862 
863 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>_BitsetInit&#32;{}&#32;__bitset_init&#32;=&#32;{};
864 
865 <emphasis role="comment">//&#32;}}}</emphasis>
866 <emphasis role="comment">//&#32;__is_narrowing_conversion&lt;_From,&#32;_To&gt;{{{</emphasis>
867 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_arithmetic_v&lt;_From&gt;,
868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_arithmetic_v&lt;_To&gt;&gt;
869 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_narrowing_conversion;
870 
871 <emphasis role="comment">//&#32;ignore&#32;&quot;signed/unsigned&#32;mismatch&quot;&#32;in&#32;the&#32;following&#32;trait.</emphasis>
872 <emphasis role="comment">//&#32;The&#32;implicit&#32;conversions&#32;will&#32;do&#32;the&#32;right&#32;thing&#32;here.</emphasis>
873 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
874 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_narrowing_conversion&lt;_From,&#32;_To,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
875 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__bool_constant&lt;(
876 &#32;&#32;&#32;&#32;&#32;&#32;__digits_v&lt;_From&gt;&#32;&gt;&#32;__digits_v&lt;_To&gt;
877 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;__finite_max_v&lt;_From&gt;&#32;&gt;&#32;<link linkend="_namespacestd_1a0d8da259a6a4c3a911b5a4f46a91bd65">__finite_max_v</link>&lt;_To&gt;
878 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;<link linkend="_namespacestd_1af108d927d1d48c236ee58f02e1f66206">__finite_min_v</link>&lt;_From&gt;&#32;&lt;&#32;__finite_min_v&lt;_To&gt;
879 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(is_signed_v&lt;_From&gt;&#32;&amp;&amp;&#32;is_unsigned_v&lt;_To&gt;))&gt;&#32;{};
880 
881 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
882 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_narrowing_conversion&lt;_Tp,&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
883 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
884 
885 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
886 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_narrowing_conversion&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
887 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
888 
889 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
890 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_narrowing_conversion&lt;_Tp,&#32;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
891 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
892 
893 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
894 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_narrowing_conversion&lt;_From,&#32;_To,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
895 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;negation&lt;is_convertible&lt;_From,&#32;_To&gt;&gt;&#32;{};
896 
897 <emphasis role="comment">//&#32;}}}</emphasis>
898 <emphasis role="comment">//&#32;__converts_to_higher_integer_rank{{{</emphasis>
899 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;(sizeof(_From)&#32;&lt;&#32;sizeof(_To))&gt;
900 &#32;&#32;struct&#32;__converts_to_higher_<emphasis role="keywordtype">int</emphasis>eger_rank&#32;:&#32;public&#32;true_type&#32;{};
901 
902 <emphasis role="comment">//&#32;this&#32;may&#32;fail&#32;for&#32;char&#32;-&gt;&#32;short&#32;if&#32;sizeof(char)&#32;==&#32;sizeof(short)</emphasis>
903 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&gt;
904 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__converts_to_higher_integer_rank&lt;_From,&#32;_To,&#32;false&gt;
905 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;is_same&lt;decltype(declval&lt;_From&gt;()&#32;+&#32;declval&lt;_To&gt;()),&#32;_To&gt;&#32;{};
906 
907 <emphasis role="comment">//&#32;}}}</emphasis>
908 <emphasis role="comment">//&#32;__data(simd/simd_mask)&#32;{{{</emphasis>
909 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
910 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
911 &#32;&#32;__data(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x);
912 
913 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
914 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
915 &#32;&#32;__data(simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x);
916 
917 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
918 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
919 &#32;&#32;__data(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x);
920 
921 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
922 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
923 &#32;&#32;__data(simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x);
924 
925 <emphasis role="comment">//&#32;}}}</emphasis>
926 <emphasis role="comment">//&#32;_SimdConverter&#32;{{{</emphasis>
927 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_FromT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FromA,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToA,
928 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
929 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter;
930 
931 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
932 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdConverter&lt;_Tp,&#32;_Ap,&#32;_Tp,&#32;_Ap,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
933 &#32;&#32;{
934 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
935 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">const</emphasis>&#32;_Up&amp;
936 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Up&amp;&#32;__x)
937 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
938 &#32;&#32;};
939 
940 <emphasis role="comment">//&#32;}}}</emphasis>
941 <emphasis role="comment">//&#32;__to_value_type_or_member_type&#32;{{{</emphasis>
942 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
943 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
944 &#32;&#32;__to_value_type_or_member_type(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__data(__x))
945 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__x);&#32;}
946 
947 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
948 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type&amp;
949 &#32;&#32;__to_value_type_or_member_type(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type&amp;&#32;__x)
950 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
951 
952 <emphasis role="comment">//&#32;}}}</emphasis>
953 <emphasis role="comment">//&#32;__bool_storage_member_type{{{</emphasis>
954 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Size&gt;
955 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type;
956 
957 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Size&gt;
958 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__bool_storage_member_type_t&#32;=
959 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__bool_storage_member_type&lt;_Size&gt;::type;
960 
961 <emphasis role="comment">//&#32;}}}</emphasis>
962 <emphasis role="comment">//&#32;_SimdTuple&#32;{{{</emphasis>
963 <emphasis role="comment">//&#32;why&#32;not&#32;tuple?</emphasis>
964 <emphasis role="comment">//&#32;1.&#32;tuple&#32;gives&#32;no&#32;guarantee&#32;about&#32;the&#32;storage&#32;order,&#32;but&#32;I&#32;require</emphasis>
965 <emphasis role="comment">//&#32;storage</emphasis>
966 <emphasis role="comment">//&#32;&#32;&#32;&#32;equivalent&#32;to&#32;array&lt;_Tp,&#32;_Np&gt;</emphasis>
967 <emphasis role="comment">//&#32;2.&#32;direct&#32;access&#32;to&#32;the&#32;element&#32;type&#32;(first&#32;template&#32;argument)</emphasis>
968 <emphasis role="comment">//&#32;3.&#32;enforces&#32;equal&#32;element&#32;type,&#32;only&#32;different&#32;_Abi&#32;types&#32;are&#32;allowed</emphasis>
969 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
970 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdTuple;
971 
972 <emphasis role="comment">//}}}</emphasis>
973 <emphasis role="comment">//&#32;__fixed_size_storage_t&#32;{{{</emphasis>
974 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
975 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fixed_size_storage;
976 
977 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
978 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__fixed_size_storage_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__fixed_size_storage&lt;_Tp,&#32;_Np&gt;::type;
979 
980 <emphasis role="comment">//&#32;}}}</emphasis>
981 <emphasis role="comment">//&#32;_SimdWrapper&#32;fwd&#32;decl{{{</emphasis>
982 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
983 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdWrapper;
984 
985 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
986 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdWrapper8&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;8&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;;
987 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
988 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdWrapper16&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;16&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;;
989 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
990 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdWrapper32&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;32&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;;
991 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
992 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdWrapper64&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;64&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;;
993 
994 <emphasis role="comment">//&#32;}}}</emphasis>
995 <emphasis role="comment">//&#32;__is_simd_wrapper&#32;{{{</emphasis>
996 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
997 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_simd_wrapper&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
998 
999 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1000 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_simd_wrapper&lt;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
1001 
1002 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1003 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_simd_wrapper_v&#32;=&#32;__is_simd_wrapper&lt;_Tp&gt;::value;
1004 
1005 <emphasis role="comment">//&#32;}}}</emphasis>
1006 <emphasis role="comment">//&#32;_BitOps&#32;{{{</emphasis>
1007 <emphasis role="keyword">struct&#32;</emphasis>_BitOps
1008 {
1009 &#32;&#32;<emphasis role="comment">//&#32;_S_bit_iteration&#32;{{{</emphasis>
1010 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
1011 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1012 &#32;&#32;&#32;&#32;_S_bit_iteration(_Tp&#32;__mask,&#32;_Fp&amp;&amp;&#32;__f)
1013 &#32;&#32;&#32;&#32;{
1014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_ULLong)&#32;&gt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
1015 &#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_UInt),&#32;_UInt,&#32;_ULLong&gt;&#32;__k;
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_convertible_v&lt;_Tp,&#32;<emphasis role="keyword">decltype</emphasis>(__k)&gt;)
1017 &#32;&#32;&#32;&#32;__k&#32;=&#32;__mask;
1018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1019 &#32;&#32;&#32;&#32;__k&#32;=&#32;__mask.to_ullong();
1020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(__k)
1021 &#32;&#32;&#32;&#32;{
1022 &#32;&#32;&#32;&#32;&#32;&#32;__f(std::__countr_zero(__k));
1023 &#32;&#32;&#32;&#32;&#32;&#32;__k&#32;&amp;=&#32;(__k&#32;-&#32;1);
1024 &#32;&#32;&#32;&#32;}
1025 &#32;&#32;&#32;&#32;}
1026 
1027 &#32;&#32;<emphasis role="comment">//}}}</emphasis>
1028 };
1029 
1030 <emphasis role="comment">//}}}</emphasis>
1031 <emphasis role="comment">//&#32;__increment,&#32;__decrement&#32;{{{</emphasis>
1032 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1033 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__increment
1034 &#32;&#32;{&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;operator()(_Tp&#32;__a)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;++__a;&#32;}&#32;};
1035 
1036 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1037 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__increment&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
1038 &#32;&#32;{
1039 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
1041 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&#32;__a)<emphasis role="keyword">&#32;const</emphasis>
1042 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;++__a;&#32;}
1043 &#32;&#32;};
1044 
1045 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1046 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__decrement
1047 &#32;&#32;{&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;operator()(_Tp&#32;__a)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;--__a;&#32;}&#32;};
1048 
1049 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1050 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__decrement&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
1051 &#32;&#32;{
1052 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
1054 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&#32;__a)<emphasis role="keyword">&#32;const</emphasis>
1055 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;--__a;&#32;}
1056 &#32;&#32;};
1057 
1058 <emphasis role="comment">//&#32;}}}</emphasis>
1059 <emphasis role="comment">//&#32;_ValuePreserving(OrInt)&#32;{{{</emphasis>
1060 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;negation&lt;
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_narrowing_conversion&lt;__remove_cvref_t&lt;_From&gt;,&#32;_To&gt;&gt;<link linkend="_classvalue">::value</link>&gt;&gt;
1063 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValuePreserving&#32;=&#32;_From;
1064 
1065 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_From,&#32;<emphasis role="keyword">typename</emphasis>&#32;_To,
1066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_DecayedFrom&#32;=&#32;__remove_cvref_t&lt;_From&gt;,
1067 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;conjunction&lt;
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_From,&#32;_To&gt;,
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;disjunction&lt;
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_DecayedFrom,&#32;_To&gt;,&#32;is_same&lt;_DecayedFrom,&#32;int&gt;,
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conjunction&lt;is_same&lt;_DecayedFrom,&#32;_UInt&gt;,&#32;is_unsigned&lt;_To&gt;&gt;,
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;negation&lt;__is_narrowing_conversion&lt;_DecayedFrom,&#32;_To&gt;&gt;&gt;&gt;<link linkend="_classvalue">::value</link>&gt;&gt;
1073 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValuePreservingOrInt&#32;=&#32;_From;
1074 
1075 <emphasis role="comment">//&#32;}}}</emphasis>
1076 <emphasis role="comment">//&#32;__intrinsic_type&#32;{{{</emphasis>
1077 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
1078 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type;
1079 
1080 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Size&gt;
1081 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__intrinsic_type_t&#32;=
1082 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Tp,&#32;_Size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1083 
1084 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1085 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__intrinsic_type2_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Tp,&#32;2&gt;::type;
1086 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1087 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__intrinsic_type4_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Tp,&#32;4&gt;::type;
1088 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1089 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__intrinsic_type8_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Tp,&#32;8&gt;::type;
1090 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1091 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__intrinsic_type16_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Tp,&#32;16&gt;::type;
1092 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1093 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__intrinsic_type32_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Tp,&#32;32&gt;::type;
1094 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1095 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__intrinsic_type64_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Tp,&#32;64&gt;::type;
1096 
1097 <emphasis role="comment">//&#32;}}}</emphasis>
1098 <emphasis role="comment">//&#32;_BitMask&#32;{{{</emphasis>
1099 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&#32;=&#32;false&gt;
1100 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BitMask;
1101 
1102 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
1103 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_bitmask&lt;_BitMask&lt;_Np,&#32;_Sanitized&gt;,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
1104 
1105 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1106 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SanitizedBitMask&#32;=&#32;_BitMask&lt;_Np,&#32;true&gt;;
1107 
1108 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
1109 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BitMask
1110 &#32;&#32;{
1111 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;&#32;0);
1112 
1113 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NBytes&#32;=&#32;__div_roundup(_Np,&#32;__CHAR_BIT__);
1114 
1115 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;conditional_t&lt;_Np&#32;==&#32;1,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>,
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_unsigned_t&lt;__int_with_sizeof_t&lt;std::min(
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_ULLong),&#32;std::__bit_ceil(_NBytes))&gt;&gt;&gt;;
1118 
1119 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_array_size&#32;=&#32;__div_roundup(_NBytes,&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
1120 
1121 &#32;&#32;&#32;&#32;_Tp&#32;_M_bits[_S_array_size];
1122 
1123 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_unused_bits
1124 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Np&#32;==&#32;1&#32;?&#32;0&#32;:&#32;_S_array_size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__&#32;-&#32;_Np;
1125 
1126 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;_S_bitmask&#32;=&#32;+_Tp(~_Tp())&#32;&gt;&gt;&#32;_S_unused_bits;
1127 
1128 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask()&#32;noexcept&#32;=&#32;default;
1129 
1130 &#32;&#32;&#32;&#32;constexpr&#32;_BitMask(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__x)&#32;noexcept
1131 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_bits{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__x)}&#32;{}
1132 
1133 &#32;&#32;&#32;&#32;_BitMask(bitset&lt;_Np&gt;&#32;__x)&#32;noexcept&#32;:&#32;_BitMask(__x.to_ullong())&#32;{}
1134 
1135 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask(<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1136 
1137 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_RhsSanitized,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;_RhsSanitized&#32;==&#32;<emphasis role="keyword">false</emphasis>
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Sanitized&#32;==&#32;<emphasis role="keyword">true</emphasis>&gt;&gt;
1139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask(<emphasis role="keyword">const</emphasis>&#32;_BitMask&lt;_Np,&#32;_RhsSanitized&gt;&amp;&#32;__rhs)&#32;noexcept
1140 &#32;&#32;&#32;&#32;:&#32;_BitMask(__rhs._M_sanitized())&#32;{}
1141 
1142 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;_SimdWrapper&lt;bool,&#32;_Np&gt;()&#32;const&#32;noexcept
1143 &#32;&#32;&#32;&#32;{
1144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_S_array_size&#32;==&#32;1);
1145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1146 &#32;&#32;&#32;&#32;}
1147 
1148 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;precondition:&#32;is&#32;sanitized</emphasis>
1149 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
1150 &#32;&#32;&#32;&#32;_M_to_bits()&#32;const&#32;noexcept
1151 &#32;&#32;&#32;&#32;{
1152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_S_array_size&#32;==&#32;1);
1153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1154 &#32;&#32;&#32;&#32;}
1155 
1156 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;precondition:&#32;is&#32;sanitized</emphasis>
1157 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1158 &#32;&#32;&#32;&#32;to_ullong()&#32;const&#32;noexcept
1159 &#32;&#32;&#32;&#32;{
1160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_S_array_size&#32;==&#32;1);
1161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1162 &#32;&#32;&#32;&#32;}
1163 
1164 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;precondition:&#32;is&#32;sanitized</emphasis>
1165 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
1166 &#32;&#32;&#32;&#32;to_ulong()&#32;const&#32;noexcept
1167 &#32;&#32;&#32;&#32;{
1168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_S_array_size&#32;==&#32;1);
1169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1170 &#32;&#32;&#32;&#32;}
1171 
1172 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;bitset&lt;_Np&gt;
1173 &#32;&#32;&#32;&#32;_M_to_bitset()&#32;const&#32;noexcept
1174 &#32;&#32;&#32;&#32;{
1175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_S_array_size&#32;==&#32;1);
1176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1177 &#32;&#32;&#32;&#32;}
1178 
1179 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
1180 &#32;&#32;&#32;&#32;_M_sanitized()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1181 &#32;&#32;&#32;&#32;{
1182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Sanitized)
1183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SanitizedBitMask&lt;_Np&gt;(_M_bits[0]);
1186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1187 &#32;&#32;&#32;&#32;{
1188 &#32;&#32;&#32;&#32;&#32;&#32;_SanitizedBitMask&lt;_Np&gt;&#32;__r&#32;=&#32;{};
1189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_S_array_size;&#32;++__i)
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r._M_bits[__i]&#32;=&#32;_M_bits[__i];
1191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_unused_bits&#32;&gt;&#32;0)
1192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r._M_bits[_S_array_size&#32;-&#32;1]&#32;&amp;=&#32;_S_bitmask;
1193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1194 &#32;&#32;&#32;&#32;}
1195 &#32;&#32;&#32;&#32;}
1196 
1197 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Mp,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_LSanitized&gt;
1198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask&lt;_Np&#32;+&#32;_Mp,&#32;_Sanitized&gt;
1199 &#32;&#32;&#32;&#32;&#32;&#32;_M_prepend(_BitMask&lt;_Mp,&#32;_LSanitized&gt;&#32;__lsb)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1200 &#32;&#32;&#32;&#32;&#32;&#32;{
1201 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_RN&#32;=&#32;_Np&#32;+&#32;_Mp;
1202 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Rp&#32;=&#32;_BitMask&lt;_RN,&#32;_Sanitized&gt;;
1203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Rp::_S_array_size&#32;==&#32;1)
1204 &#32;&#32;&#32;&#32;&#32;&#32;{
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Rp&#32;__r{{_M_bits[0]}};
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r._M_bits[0]&#32;&lt;&lt;=&#32;_Mp;
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r._M_bits[0]&#32;|=&#32;__lsb._M_sanitized()._M_bits[0];
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1209 &#32;&#32;&#32;&#32;&#32;&#32;}
1210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1211 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Rp&gt;();
1212 &#32;&#32;&#32;&#32;&#32;&#32;}
1213 
1214 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;a&#32;new&#32;_BitMask&#32;with&#32;size&#32;_NewSize&#32;while&#32;dropping&#32;_DropLsb&#32;least</emphasis>
1215 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;significant&#32;bits.&#32;If&#32;the&#32;operation&#32;implicitly&#32;produces&#32;a&#32;sanitized&#32;bitmask,</emphasis>
1216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;result&#32;type&#32;will&#32;have&#32;_Sanitized&#32;set.</emphasis>
1217 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_DropLsb,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NewSize&#32;=&#32;_Np&#32;-&#32;_DropLsb&gt;
1218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1219 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract()&#32;const&#32;noexcept
1220 &#32;&#32;&#32;&#32;&#32;&#32;{
1221 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;&#32;_DropLsb);
1222 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_DropLsb&#32;+&#32;_NewSize&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_ULLong)&#32;*&#32;__CHAR_BIT__,
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;not&#32;implemented&#32;for&#32;bitmasks&#32;larger&#32;than&#32;one&#32;ullong&quot;</emphasis>);
1224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_NewSize&#32;==&#32;1)
1225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;must&#32;sanitize&#32;because&#32;the&#32;return&#32;_Tp&#32;is&#32;bool</emphasis>
1226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SanitizedBitMask&lt;1&gt;(_M_bits[0]&#32;&amp;&#32;(_Tp(1)&#32;&lt;&lt;&#32;_DropLsb));
1227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_BitMask&lt;_NewSize,
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((_NewSize&#32;+&#32;_DropLsb&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_NewSize&#32;+&#32;_DropLsb&#32;&lt;=&#32;_Np)
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;((_Sanitized&#32;||&#32;_Np&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__)
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_NewSize&#32;+&#32;_DropLsb&#32;&gt;=&#32;_Np))&gt;(_M_bits[0]
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&gt;&#32;_DropLsb);
1234 &#32;&#32;&#32;&#32;&#32;&#32;}
1235 
1236 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;all&#32;bits&#32;are&#32;set.&#32;Implicitly&#32;sanitizes&#32;if&#32;_Sanitized&#32;==&#32;false.</emphasis>
1237 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1238 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>()&#32;const&#32;noexcept
1239 &#32;&#32;&#32;&#32;{
1240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_Sanitized)
1243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_sanitized().all();
1244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1245 &#32;&#32;&#32;&#32;{
1246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__allbits&#32;=&#32;~_Tp();
1247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_S_array_size&#32;-&#32;1;&#32;++__i)
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_bits[__i]&#32;!=&#32;__allbits)
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[_S_array_size&#32;-&#32;1]&#32;==&#32;_S_bitmask;
1251 &#32;&#32;&#32;&#32;}
1252 &#32;&#32;&#32;&#32;}
1253 
1254 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;at&#32;least&#32;one&#32;bit&#32;is&#32;set.&#32;Implicitly&#32;sanitizes&#32;if&#32;_Sanitized&#32;==</emphasis>
1255 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;false.</emphasis>
1256 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1257 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__vector__relational_1ga911b3f8e41459dd551ccb6d385d91061">any</link>()&#32;const&#32;noexcept
1258 &#32;&#32;&#32;&#32;{
1259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_Sanitized)
1262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_sanitized().any();
1263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1264 &#32;&#32;&#32;&#32;{
1265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_S_array_size&#32;-&#32;1;&#32;++__i)
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_bits[__i]&#32;!=&#32;0)
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[_S_array_size&#32;-&#32;1]&#32;!=&#32;0;
1269 &#32;&#32;&#32;&#32;}
1270 &#32;&#32;&#32;&#32;}
1271 
1272 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;no&#32;bit&#32;is&#32;set.&#32;Implicitly&#32;sanitizes&#32;if&#32;_Sanitized&#32;==&#32;false.</emphasis>
1273 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1274 &#32;&#32;&#32;&#32;none()&#32;const&#32;noexcept
1275 &#32;&#32;&#32;&#32;{
1276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1277 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_bits[0];
1278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_Sanitized)
1279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_sanitized().none();
1280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1281 &#32;&#32;&#32;&#32;{
1282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_S_array_size&#32;-&#32;1;&#32;++__i)
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_bits[__i]&#32;!=&#32;0)
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[_S_array_size&#32;-&#32;1]&#32;==&#32;0;
1286 &#32;&#32;&#32;&#32;}
1287 &#32;&#32;&#32;&#32;}
1288 
1289 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;number&#32;of&#32;set&#32;bits.&#32;Implicitly&#32;sanitizes&#32;if&#32;_Sanitized&#32;==</emphasis>
1290 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;false.</emphasis>
1291 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
1292 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;const&#32;noexcept
1293 &#32;&#32;&#32;&#32;{
1294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_Sanitized)
1297 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_sanitized().none();
1298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1299 &#32;&#32;&#32;&#32;{
1300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__result&#32;=&#32;__builtin_popcountll(_M_bits[0]);
1301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;1;&#32;__i&#32;&lt;&#32;_S_array_size;&#32;++__i)
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+=&#32;__builtin_popcountll(_M_bits[__i]);
1303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1304 &#32;&#32;&#32;&#32;}
1305 &#32;&#32;&#32;&#32;}
1306 
1307 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;bit&#32;at&#32;offset&#32;__i&#32;as&#32;bool.</emphasis>
1308 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1309 &#32;&#32;&#32;&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1310 &#32;&#32;&#32;&#32;{
1311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_bits[0];
1313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_array_size&#32;==&#32;1)
1314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_bits[0]&#32;&gt;&gt;&#32;__i)&#32;&amp;&#32;1;
1315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1316 &#32;&#32;&#32;&#32;{
1317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__j&#32;=&#32;__i&#32;/&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__shift&#32;=&#32;__i&#32;%&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_bits[__j]&#32;&gt;&gt;&#32;__shift)&#32;&amp;&#32;1;
1320 &#32;&#32;&#32;&#32;}
1321 &#32;&#32;&#32;&#32;}
1322 
1323 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;__i&gt;
1324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1325 &#32;&#32;&#32;&#32;&#32;&#32;operator[](_SizeConstant&lt;__i&gt;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1326 &#32;&#32;&#32;&#32;&#32;&#32;{
1327 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__i&#32;&lt;&#32;_Np);
1328 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__j&#32;=&#32;__i&#32;/&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1329 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__shift&#32;=&#32;__i&#32;%&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(_M_bits[__j]&#32;&amp;&#32;(_Tp(1)&#32;&lt;&lt;&#32;__shift));
1331 &#32;&#32;&#32;&#32;&#32;&#32;}
1332 
1333 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;bit&#32;at&#32;offset&#32;__i&#32;to&#32;__x.</emphasis>
1334 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1335 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;__i,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1336 &#32;&#32;&#32;&#32;{
1337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1338 &#32;&#32;&#32;&#32;_M_bits[0]&#32;=&#32;__x;
1339 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_array_size&#32;==&#32;1)
1340 &#32;&#32;&#32;&#32;{
1341 &#32;&#32;&#32;&#32;&#32;&#32;_M_bits[0]&#32;&amp;=&#32;~_Tp(_Tp(1)&#32;&lt;&lt;&#32;__i);
1342 &#32;&#32;&#32;&#32;&#32;&#32;_M_bits[0]&#32;|=&#32;_Tp(_Tp(__x)&#32;&lt;&lt;&#32;__i);
1343 &#32;&#32;&#32;&#32;}
1344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1345 &#32;&#32;&#32;&#32;{
1346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__j&#32;=&#32;__i&#32;/&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__shift&#32;=&#32;__i&#32;%&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1348 &#32;&#32;&#32;&#32;&#32;&#32;_M_bits[__j]&#32;&amp;=&#32;~_Tp(_Tp(1)&#32;&lt;&lt;&#32;__shift);
1349 &#32;&#32;&#32;&#32;&#32;&#32;_M_bits[__j]&#32;|=&#32;_Tp(_Tp(__x)&#32;&lt;&lt;&#32;__shift);
1350 &#32;&#32;&#32;&#32;}
1351 &#32;&#32;&#32;&#32;}
1352 
1353 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;__i&gt;
1354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1355 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_SizeConstant&lt;__i&gt;,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1356 &#32;&#32;&#32;&#32;&#32;&#32;{
1357 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__i&#32;&lt;&#32;_Np);
1358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1359 &#32;&#32;&#32;&#32;&#32;&#32;_M_bits[0]&#32;=&#32;__x;
1360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1361 &#32;&#32;&#32;&#32;&#32;&#32;{
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__j&#32;=&#32;__i&#32;/&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__shift&#32;=&#32;__i&#32;%&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;__CHAR_BIT__);
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__mask&#32;=&#32;~_Tp(_Tp(1)&#32;&lt;&lt;&#32;__shift);
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_bits[__j]&#32;&amp;=&#32;__mask;
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_bits[__j]&#32;|=&#32;_Tp(_Tp(__x)&#32;&lt;&lt;&#32;__shift);
1367 &#32;&#32;&#32;&#32;&#32;&#32;}
1368 &#32;&#32;&#32;&#32;&#32;&#32;}
1369 
1370 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Inverts&#32;all&#32;bits.&#32;Sanitized&#32;input&#32;leads&#32;to&#32;sanitized&#32;output.</emphasis>
1371 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask
1372 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>()&#32;const&#32;noexcept
1373 &#32;&#32;&#32;&#32;{
1374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1375 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_bits[0];
1376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1377 &#32;&#32;&#32;&#32;{
1378 &#32;&#32;&#32;&#32;&#32;&#32;_BitMask&#32;__result{};
1379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_S_array_size&#32;-&#32;1;&#32;++__i)
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result._M_bits[__i]&#32;=&#32;~_M_bits[__i];
1381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Sanitized)
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result._M_bits[_S_array_size&#32;-&#32;1]
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_M_bits[_S_array_size&#32;-&#32;1]&#32;^&#32;_S_bitmask;
1384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result._M_bits[_S_array_size&#32;-&#32;1]&#32;=&#32;~_M_bits[_S_array_size&#32;-&#32;1];
1386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
1387 &#32;&#32;&#32;&#32;}
1388 &#32;&#32;&#32;&#32;}
1389 
1390 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask&amp;
1391 &#32;&#32;&#32;&#32;operator^=(<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__b)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
1392 &#32;&#32;&#32;&#32;{
1393 &#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_S_array_size&gt;(
1394 &#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;_M_bits[__i]&#32;^=&#32;__b._M_bits[__i];&#32;});
1395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1396 &#32;&#32;&#32;&#32;}
1397 
1398 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask&amp;
1399 &#32;&#32;&#32;&#32;operator|=(<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__b)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
1400 &#32;&#32;&#32;&#32;{
1401 &#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_S_array_size&gt;(
1402 &#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;_M_bits[__i]&#32;|=&#32;__b._M_bits[__i];&#32;});
1403 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1404 &#32;&#32;&#32;&#32;}
1405 
1406 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask&amp;
1407 &#32;&#32;&#32;&#32;operator&amp;=(<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__b)&#32;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>
1408 &#32;&#32;&#32;&#32;{
1409 &#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_S_array_size&gt;(
1410 &#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;_M_bits[__i]&#32;&amp;=&#32;__b._M_bits[__i];&#32;});
1411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1412 &#32;&#32;&#32;&#32;}
1413 
1414 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask
1415 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1416 &#32;&#32;&#32;&#32;{
1417 &#32;&#32;&#32;&#32;&#32;&#32;_BitMask&#32;__r&#32;=&#32;__a;
1418 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;^=&#32;__b;
1419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1420 &#32;&#32;&#32;&#32;}
1421 
1422 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask
1423 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1424 &#32;&#32;&#32;&#32;{
1425 &#32;&#32;&#32;&#32;&#32;&#32;_BitMask&#32;__r&#32;=&#32;__a;
1426 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;|=&#32;__b;
1427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1428 &#32;&#32;&#32;&#32;}
1429 
1430 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BitMask
1431 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_BitMask&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1432 &#32;&#32;&#32;&#32;{
1433 &#32;&#32;&#32;&#32;&#32;&#32;_BitMask&#32;__r&#32;=&#32;__a;
1434 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;&amp;=&#32;__b;
1435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1436 &#32;&#32;&#32;&#32;}
1437 
1438 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1439 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1440 &#32;&#32;&#32;&#32;_M_is_constprop()<emphasis role="keyword">&#32;const</emphasis>
1441 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_array_size&#32;==&#32;0)
1443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_constant_p(_M_bits[0]);
1444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1445 &#32;&#32;&#32;&#32;{
1446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_S_array_size;&#32;++__i)
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__builtin_constant_p(_M_bits[__i]))
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1449 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1450 &#32;&#32;&#32;&#32;}
1451 &#32;&#32;&#32;&#32;}
1452 &#32;&#32;};
1453 
1454 <emphasis role="comment">//&#32;}}}</emphasis>
1455 
1456 <emphasis role="comment">//&#32;vvv&#32;----&#32;builtin&#32;vector&#32;types&#32;[[gnu::vector_size(N)]]&#32;and&#32;operations&#32;----&#32;vvv</emphasis>
1457 <emphasis role="comment">//&#32;__min_vector_size&#32;{{{</emphasis>
1458 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1459 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__min_vector_size&#32;=&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
1460 
1461 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_HAVE_NEON</emphasis>
1462 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1463 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__min_vector_size&lt;void&gt;&#32;=&#32;8;
1464 <emphasis role="preprocessor">#else</emphasis>
1465 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
1466 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__min_vector_size&lt;void&gt;&#32;=&#32;16;
1467 <emphasis role="preprocessor">#endif</emphasis>
1468 
1469 <emphasis role="comment">//&#32;}}}</emphasis>
1470 <emphasis role="comment">//&#32;__vector_type&#32;{{{</emphasis>
1471 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1472 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__vector_type_n&#32;{};
1473 
1474 <emphasis role="comment">//&#32;substition&#32;failure&#32;for&#32;0-element&#32;case</emphasis>
1475 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1476 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__vector_type_n&lt;_Tp,&#32;0,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;&#32;{};
1477 
1478 <emphasis role="comment">//&#32;special&#32;case&#32;1-element&#32;to&#32;be&#32;_Tp&#32;itself</emphasis>
1479 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1480 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__vector_type_n&lt;_Tp,&#32;1,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vectorizable_v&lt;_Tp&gt;&gt;&gt;
1481 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Tp;&#32;};
1482 
1483 <emphasis role="comment">//&#32;else,&#32;use&#32;GNU-style&#32;builtin&#32;vector&#32;types</emphasis>
1484 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1485 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__vector_type_n&lt;_Tp,&#32;_Np,
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vectorizable_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;_Np&#32;&gt;=&#32;2&gt;&gt;
1487 &#32;&#32;{
1488 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_Np2&#32;=&#32;std::__bit_ceil(_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
1489 
1490 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_Bytes&#32;=
1491 <emphasis role="preprocessor">#ifdef&#32;__i386__</emphasis>
1492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Using&#32;[[gnu::vector_size(8)]]&#32;would&#32;wreak&#32;havoc&#32;on&#32;the&#32;FPU&#32;because</emphasis>
1493 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;those&#32;objects&#32;are&#32;passed&#32;via&#32;MMX&#32;registers&#32;and&#32;nothing&#32;ever&#32;calls&#32;EMMS.</emphasis>
1494 &#32;&#32;&#32;&#32;&#32;&#32;_S_Np2&#32;==&#32;8&#32;?&#32;16&#32;:
1495 <emphasis role="preprocessor">#endif</emphasis>
1496 &#32;&#32;&#32;&#32;&#32;&#32;_S_Np2&#32;&lt;&#32;__min_vector_size&lt;_Tp&gt;&#32;?&#32;__min_vector_size&lt;_Tp&gt;
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_S_Np2;
1498 
1499 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;[[__gnu__::__vector_size__(_S_Bytes)]]&#32;=&#32;_Tp;
1500 &#32;&#32;};
1501 
1502 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;=&#32;_Bytes&#32;%&#32;sizeof(_Tp)&gt;
1503 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__vector_type;
1504 
1505 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&gt;
1506 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__vector_type&lt;_Tp,&#32;_Bytes,&#32;0&gt;
1507 &#32;&#32;:&#32;__vector_type_n&lt;_Tp,&#32;_Bytes&#32;/&#32;sizeof(_Tp)&gt;&#32;{};
1508 
1509 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Size&gt;
1510 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__vector_type_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__vector_type_n&lt;_Tp,&#32;_Size&gt;::type;
1511 
1512 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1513 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__vector_type2_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__vector_type&lt;_Tp,&#32;2&gt;::type;
1514 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1515 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__vector_type4_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__vector_type&lt;_Tp,&#32;4&gt;::type;
1516 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1517 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__vector_type8_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__vector_type&lt;_Tp,&#32;8&gt;::type;
1518 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1519 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__vector_type16_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__vector_type&lt;_Tp,&#32;16&gt;::type;
1520 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1521 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__vector_type32_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__vector_type&lt;_Tp,&#32;32&gt;::type;
1522 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1523 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__vector_type64_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__vector_type&lt;_Tp,&#32;64&gt;::type;
1524 
1525 <emphasis role="comment">//&#32;}}}</emphasis>
1526 <emphasis role="comment">//&#32;__is_vector_type&#32;{{{</emphasis>
1527 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
1528 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_vector_type&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
1529 
1530 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1531 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_vector_type&lt;
1532 &#32;&#32;&#32;&#32;_Tp,&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;__vector_type&lt;
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;remove_reference_t&lt;decltype(declval&lt;_Tp&gt;()[0])&gt;,&#32;sizeof(_Tp)&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&gt;&gt;
1534 &#32;&#32;&#32;&#32;:&#32;is_same&lt;_Tp,&#32;typename&#32;__vector_type&lt;
1535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove_reference_t&lt;decltype(declval&lt;_Tp&gt;()[0])&gt;,
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeof(_Tp)&gt;::type&gt;&#32;{};
1537 
1538 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1539 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_vector_type_v&#32;=&#32;__is_vector_type&lt;_Tp&gt;::value;
1540 
1541 <emphasis role="comment">//&#32;}}}</emphasis>
1542 <emphasis role="comment">//&#32;__is_intrinsic_type&#32;{{{</emphasis>
1543 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_HAVE_SSE_ABI</emphasis>
1544 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1545 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_intrinsic_type&#32;=&#32;__is_vector_type&lt;_Tp&gt;;
1546 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;not&#32;SSE&#32;(x86)</emphasis>
1547 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
1548 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_intrinsic_type&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
1549 
1550 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1551 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_intrinsic_type&lt;
1552 &#32;&#32;&#32;&#32;_Tp,&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;__intrinsic_type&lt;
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;remove_reference_t&lt;decltype(declval&lt;_Tp&gt;()[0])&gt;,&#32;sizeof(_Tp)&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&gt;&gt;
1554 &#32;&#32;&#32;&#32;:&#32;is_same&lt;_Tp,&#32;typename&#32;__intrinsic_type&lt;
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove_reference_t&lt;decltype(declval&lt;_Tp&gt;()[0])&gt;,
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeof(_Tp)&gt;::type&gt;&#32;{};
1557 <emphasis role="preprocessor">#endif</emphasis>
1558 
1559 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1560 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_intrinsic_type_v&#32;=&#32;__is_intrinsic_type&lt;_Tp&gt;::value;
1561 
1562 <emphasis role="comment">//&#32;}}}</emphasis>
1563 <emphasis role="comment">//&#32;_VectorTraits{{{</emphasis>
1564 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
1565 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_VectorTraitsImpl;
1566 
1567 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1568 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_VectorTraitsImpl&lt;_Tp,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vector_type_v&lt;_Tp&gt;
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__is_intrinsic_type_v&lt;_Tp&gt;&gt;&gt;
1570 &#32;&#32;{
1571 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Tp;
1572 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;remove_reference_t&lt;decltype(declval&lt;_Tp&gt;()[0])&gt;;
1573 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_full_size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
1574 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Wrapper&#32;=&#32;_SimdWrapper&lt;value_type,&#32;_S_full_size&gt;;
1575 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_W&#32;=&#32;_S_full_size&gt;
1576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is
1577 &#32;&#32;&#32;&#32;=&#32;is_same_v&lt;value_type,&#32;_Up&gt;&#32;&amp;&amp;&#32;_W&#32;==&#32;_S_full_size;
1578 &#32;&#32;};
1579 
1580 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
1581 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_VectorTraitsImpl&lt;_SimdWrapper&lt;_Tp,&#32;_Np&gt;,
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;__vector_type_t&lt;_Tp,&#32;_Np&gt;&gt;&gt;
1583 &#32;&#32;{
1584 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;;
1585 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
1586 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_full_size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
1587 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Wrapper&#32;=&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;;
1588 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_partial&#32;=&#32;(_Np&#32;==&#32;_S_full_size);
1589 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_partial_width&#32;=&#32;_Np;
1590 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_W&#32;=&#32;_S_full_size&gt;
1591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is
1592 &#32;&#32;&#32;&#32;=&#32;is_same_v&lt;value_type,&#32;_Up&gt;&amp;&amp;&#32;_W&#32;==&#32;_S_full_size;
1593 &#32;&#32;};
1594 
1595 template&#32;&lt;typename&#32;_Tp,&#32;typename&#32;=&#32;typename&#32;_VectorTraitsImpl&lt;_Tp&gt;::type&gt;
1596 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_VectorTraits&#32;=&#32;_VectorTraitsImpl&lt;_Tp&gt;;
1597 
1598 <emphasis role="comment">//&#32;}}}</emphasis>
1599 <emphasis role="comment">//&#32;__as_vector{{{</emphasis>
1600 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
1601 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1602 &#32;&#32;__as_vector(_V&#32;__x)
1603 &#32;&#32;{
1604 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_V&gt;)
1605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
1606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_simd&lt;_V&gt;::value&#32;||&#32;is_simd_mask&lt;_V&gt;::value)
1607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__x)._M_data;
1608 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vectorizable_v&lt;_V&gt;)
1609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_V,&#32;2&gt;{__x};
1610 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data;
1612 &#32;&#32;}
1613 
1614 <emphasis role="comment">//&#32;}}}</emphasis>
1615 <emphasis role="comment">//&#32;__as_wrapper{{{</emphasis>
1616 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
1617 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1618 &#32;&#32;__as_wrapper(_V&#32;__x)
1619 &#32;&#32;{
1620 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_V&gt;)
1621 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdWrapper&lt;<emphasis role="keyword">typename</emphasis>&#32;_VectorTraits&lt;_V&gt;::value_type,
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_Np&#32;&gt;&#32;0&#32;?&#32;_Np&#32;:&#32;_VectorTraits&lt;_V&gt;::_S_full_size)&gt;(__x);
1623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_simd&lt;_V&gt;::value&#32;||&#32;is_simd_mask&lt;_V&gt;::value)
1624 &#32;&#32;&#32;&#32;&#32;&#32;{
1625 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_V::size()&#32;==&#32;_Np);
1626 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__x);
1627 &#32;&#32;&#32;&#32;&#32;&#32;}
1628 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1629 &#32;&#32;&#32;&#32;&#32;&#32;{
1630 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_V::_S_size&#32;==&#32;_Np);
1631 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
1632 &#32;&#32;&#32;&#32;&#32;&#32;}
1633 &#32;&#32;}
1634 
1635 <emphasis role="comment">//&#32;}}}</emphasis>
1636 <emphasis role="comment">//&#32;__intrin_bitcast{{{</emphasis>
1637 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From&gt;
1638 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
1639 &#32;&#32;__intrin_bitcast(_From&#32;__v)
1640 &#32;&#32;{
1641 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((__is_vector_type_v&lt;_From&gt;&#32;||&#32;__is_intrinsic_type_v&lt;_From&gt;)
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(__is_vector_type_v&lt;_To&gt;&#32;||&#32;__is_intrinsic_type_v&lt;_To&gt;));
1643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_From))
1644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__v);
1645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_From)&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(_To))
1646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;=&#32;16)
1647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__may_alias&lt;_To&gt;&amp;<emphasis role="keyword">&gt;</emphasis>(__v);
1648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1649 &#32;&#32;&#32;&#32;{
1650 &#32;&#32;&#32;&#32;&#32;&#32;_To&#32;__r;
1651 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;&amp;__v,&#32;<emphasis role="keyword">sizeof</emphasis>(_To));
1652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1653 &#32;&#32;&#32;&#32;}
1654 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;&amp;&amp;&#32;!defined&#32;__clang__</emphasis>
1655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;16&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;32)
1656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__builtin_ia32_ps256_ps(
1657 &#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;float,&#32;4&gt;<emphasis role="keyword">&gt;</emphasis>(__v)));
1658 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;16
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64)
1660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__builtin_ia32_ps512_ps(
1661 &#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;float,&#32;4&gt;<emphasis role="keyword">&gt;</emphasis>(__v)));
1662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;==&#32;32
1663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;64)
1664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__builtin_ia32_ps512_256ps(
1665 &#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__vector_type_t&lt;float,&#32;8&gt;<emphasis role="keyword">&gt;</emphasis>(__v)));
1666 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
1667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__v)&#32;&lt;=&#32;8)
1668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(
1669 &#32;&#32;&#32;&#32;__vector_type_t&lt;__int_for_sizeof_t&lt;_From&gt;,&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&gt;{
1670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__int_for_sizeof_t&lt;_From&gt;<emphasis role="keyword">&gt;</emphasis>(__v)});
1671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1672 &#32;&#32;&#32;&#32;&#32;&#32;{
1673 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(_From));
1674 &#32;&#32;&#32;&#32;_To&#32;__r&#32;=&#32;{};
1675 &#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;&amp;__v,&#32;<emphasis role="keyword">sizeof</emphasis>(_From));
1676 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1677 &#32;&#32;&#32;&#32;&#32;&#32;}
1678 &#32;&#32;}
1679 
1680 <emphasis role="comment">//&#32;}}}</emphasis>
1681 <emphasis role="comment">//&#32;__vector_bitcast{{{</emphasis>
1682 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NN&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From,
1683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_FromVT&#32;=&#32;_VectorTraits&lt;_From&gt;,
1684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_NN&#32;==&#32;0&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(_From)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;:&#32;_NN&gt;
1685 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__vector_type_t&lt;_To,&#32;_Np&gt;
1686 &#32;&#32;__vector_bitcast(_From&#32;__x)
1687 &#32;&#32;{
1688 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_R&#32;=&#32;__vector_type_t&lt;_To,&#32;_Np&gt;;
1689 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;_R&gt;(__x);
1690 &#32;&#32;}
1691 
1692 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NN&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nx,
1693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np
1694 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_NN&#32;==&#32;0&#32;?&#32;<emphasis role="keyword">sizeof</emphasis>(_SimdWrapper&lt;_Tp,&#32;_Nx&gt;)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_To)&#32;:&#32;_NN&gt;
1695 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__vector_type_t&lt;_To,&#32;_Np&gt;
1696 &#32;&#32;__vector_bitcast(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Nx&gt;&amp;&#32;__x)
1697 &#32;&#32;{
1698 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;&#32;1);
1699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;__vector_type_t&lt;_To,&#32;_Np&gt;&gt;(__x._M_data);
1700 &#32;&#32;}
1701 
1702 <emphasis role="comment">//&#32;}}}</emphasis>
1703 <emphasis role="comment">//&#32;__convert_x86&#32;declarations&#32;{{{</emphasis>
1704 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_PR85048</emphasis>
1705 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1706 &#32;&#32;_To&#32;__convert_x86(_Tp);
1707 
1708 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1709 &#32;&#32;_To&#32;__convert_x86(_Tp,&#32;_Tp);
1710 
1711 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1712 &#32;&#32;_To&#32;__convert_x86(_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp);
1713 
1714 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1715 &#32;&#32;_To&#32;__convert_x86(_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp);
1716 
1717 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
1718 &#32;&#32;_To&#32;__convert_x86(_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp,
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;_Tp,&#32;_Tp,&#32;_Tp);
1720 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_WORKAROUND_PR85048</emphasis>
1721 
1722 <emphasis role="comment">//}}}</emphasis>
1723 <emphasis role="comment">//&#32;__bit_cast&#32;{{{</emphasis>
1724 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_From&gt;
1725 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_To
1726 &#32;&#32;__bit_cast(<emphasis role="keyword">const</emphasis>&#32;_From&#32;__x)
1727 &#32;&#32;{
1728 <emphasis role="preprocessor">#if&#32;__has_builtin(__builtin_bit_cast)</emphasis>
1729 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_bit_cast(_To,&#32;__x);
1730 <emphasis role="preprocessor">#else</emphasis>
1731 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_From));
1732 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__to_is_vectorizable
1733 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_arithmetic_v&lt;_To&gt;&#32;||&#32;is_enum_v&lt;_To&gt;;
1734 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__from_is_vectorizable
1735 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;is_arithmetic_v&lt;_From&gt;&#32;||&#32;is_enum_v&lt;_From&gt;;
1736 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_To&gt;&#32;&amp;&amp;&#32;__is_vector_type_v&lt;_From&gt;)
1737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(__x);
1738 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_To&gt;&#32;&amp;&amp;&#32;__from_is_vectorizable)
1739 &#32;&#32;&#32;&#32;&#32;&#32;{
1740 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FV&#32;[[gnu::vector_size(<emphasis role="keyword">sizeof</emphasis>(_From))]]&#32;=&#32;_From;
1741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_To<emphasis role="keyword">&gt;</emphasis>(_FV{__x});
1742 &#32;&#32;&#32;&#32;&#32;&#32;}
1743 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__to_is_vectorizable&#32;&amp;&amp;&#32;__from_is_vectorizable)
1744 &#32;&#32;&#32;&#32;&#32;&#32;{
1745 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TV&#32;[[gnu::vector_size(<emphasis role="keyword">sizeof</emphasis>(_To))]]&#32;=&#32;_To;
1746 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FV&#32;[[gnu::vector_size(<emphasis role="keyword">sizeof</emphasis>(_From))]]&#32;=&#32;_From;
1747 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(_FV{__x})[0];
1748 &#32;&#32;&#32;&#32;&#32;&#32;}
1749 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__to_is_vectorizable&#32;&amp;&amp;&#32;__is_vector_type_v&lt;_From&gt;)
1750 &#32;&#32;&#32;&#32;&#32;&#32;{
1751 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TV&#32;[[gnu::vector_size(<emphasis role="keyword">sizeof</emphasis>(_To))]]&#32;=&#32;_To;
1752 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_TV<emphasis role="keyword">&gt;</emphasis>(__x)[0];
1753 &#32;&#32;&#32;&#32;&#32;&#32;}
1754 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1755 &#32;&#32;&#32;&#32;&#32;&#32;{
1756 &#32;&#32;&#32;&#32;_To&#32;__r;
1757 &#32;&#32;&#32;&#32;__builtin_memcpy(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__r),
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__x),&#32;<emphasis role="keyword">sizeof</emphasis>(_To));
1759 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1760 &#32;&#32;&#32;&#32;&#32;&#32;}
1761 <emphasis role="preprocessor">#endif</emphasis>
1762 &#32;&#32;}
1763 
1764 <emphasis role="comment">//&#32;}}}</emphasis>
1765 <emphasis role="comment">//&#32;__to_intrin&#32;{{{</emphasis>
1766 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;,
1767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R
1768 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__<emphasis role="keywordtype">int</emphasis>rinsic_type_t&lt;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type,&#32;_TVT::_S_full_size&gt;&gt;
1769 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_R
1770 &#32;&#32;__to_intrin(_Tp&#32;__x)
1771 &#32;&#32;{
1772 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_R),
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;__to_intrin&#32;may&#32;never&#32;drop&#32;values&#32;off&#32;the&#32;end&quot;</emphasis>);
1774 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_R))
1775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(__as_vector(__x));
1776 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1777 &#32;&#32;&#32;&#32;&#32;&#32;{
1778 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
1779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(
1780 &#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Up,&#32;<emphasis role="keyword">sizeof</emphasis>(_R)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&gt;{__bit_cast&lt;_Up&gt;(__x)});
1781 &#32;&#32;&#32;&#32;&#32;&#32;}
1782 &#32;&#32;}
1783 
1784 <emphasis role="comment">//&#32;}}}</emphasis>
1785 <emphasis role="comment">//&#32;__make_vector{{{</emphasis>
1786 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1787 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;<emphasis role="keyword">sizeof</emphasis>...(_Args)&gt;
1788 &#32;&#32;__make_vector(<emphasis role="keyword">const</emphasis>&#32;_Args&amp;...&#32;__args)
1789 &#32;&#32;{
1790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;<emphasis role="keyword">sizeof</emphasis>...(_Args)&gt;{<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__args)...};
1791 &#32;&#32;}
1792 
1793 <emphasis role="comment">//&#32;}}}</emphasis>
1794 <emphasis role="comment">//&#32;__vector_broadcast{{{</emphasis>
1795 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1796 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;
1797 &#32;&#32;__vector_broadcast(_Tp&#32;__x)
1798 &#32;&#32;{
1799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_n_evaluations&lt;_Np&gt;(
1800 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__xx)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;{__xx...};&#32;},
1801 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;__x](int)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;});
1802 &#32;&#32;}
1803 
1804 <emphasis role="comment">//&#32;}}}</emphasis>
1805 <emphasis role="comment">//&#32;__generate_vector{{{</emphasis>
1806 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Gp,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_I&gt;
1807 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;
1808 &#32;&#32;__generate_vector_impl(_Gp&amp;&amp;&#32;__gen,&#32;index_sequence&lt;_I...&gt;)
1809 &#32;&#32;{
1810 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;{
1811 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp<emphasis role="keyword">&gt;</emphasis>(__gen(_SizeConstant&lt;_I&gt;()))...};
1812 &#32;&#32;}
1813 
1814 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_VVT&#32;=&#32;_VectorTraits&lt;_V&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Gp&gt;
1815 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_V
1816 &#32;&#32;__generate_vector(_Gp&amp;&amp;&#32;__gen)
1817 &#32;&#32;{
1818 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_V&gt;)
1819 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector_impl&lt;<emphasis role="keyword">typename</emphasis>&#32;_VVT::value_type,
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VVT::_S_full_size&gt;(
1821 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Gp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__gen),&#32;make_index_sequence&lt;_VVT::_S_full_size&gt;());
1822 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1823 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector_impl&lt;<emphasis role="keyword">typename</emphasis>&#32;_VVT::value_type,
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VVT::_S_partial_width&gt;(
1825 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Gp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__gen),
1826 &#32;&#32;&#32;&#32;make_index_sequence&lt;_VVT::_S_partial_width&gt;());
1827 &#32;&#32;}
1828 
1829 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Gp&gt;
1830 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__vector_type_t&lt;_Tp,&#32;_Np&gt;
1831 &#32;&#32;__generate_vector(_Gp&amp;&amp;&#32;__gen)
1832 &#32;&#32;{
1833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_vector_impl&lt;_Tp,&#32;_Np&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>_Gp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__gen),
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_Np&gt;());
1835 &#32;&#32;}
1836 
1837 <emphasis role="comment">//&#32;}}}</emphasis>
1838 <emphasis role="comment">//&#32;__xor{{{</emphasis>
1839 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TW&gt;
1840 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_TW
1841 &#32;&#32;__xor(_TW&#32;__a,&#32;_TW&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1842 &#32;&#32;{
1843 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TW&gt;&#32;||&#32;__is_simd_wrapper_v&lt;_TW&gt;)
1844 &#32;&#32;&#32;&#32;&#32;&#32;{
1845 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;conditional_t&lt;__is_simd_wrapper_v&lt;_TW&gt;,&#32;_TW,
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VectorTraitsImpl&lt;_TW&gt;&gt;::value_type;
1847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
1848 &#32;&#32;&#32;&#32;&#32;&#32;{
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;make_unsigned_t&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;;
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(__vector_bitcast&lt;_Ip&gt;(__a)
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;^&#32;__vector_bitcast&lt;_Ip&gt;(__b));
1852 &#32;&#32;&#32;&#32;&#32;&#32;}
1853 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TW&gt;)
1854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;^&#32;__b;
1855 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_data&#32;^&#32;__b._M_data;
1857 &#32;&#32;&#32;&#32;&#32;&#32;}
1858 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;^&#32;__b;
1860 &#32;&#32;}
1861 
1862 <emphasis role="comment">//&#32;}}}</emphasis>
1863 <emphasis role="comment">//&#32;__or{{{</emphasis>
1864 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TW&gt;
1865 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_TW
1866 &#32;&#32;__or(_TW&#32;__a,&#32;_TW&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1867 &#32;&#32;{
1868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TW&gt;&#32;||&#32;__is_simd_wrapper_v&lt;_TW&gt;)
1869 &#32;&#32;&#32;&#32;&#32;&#32;{
1870 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;conditional_t&lt;__is_simd_wrapper_v&lt;_TW&gt;,&#32;_TW,
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VectorTraitsImpl&lt;_TW&gt;&gt;::value_type;
1872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
1873 &#32;&#32;&#32;&#32;&#32;&#32;{
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;make_unsigned_t&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;;
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(__vector_bitcast&lt;_Ip&gt;(__a)
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;__vector_bitcast&lt;_Ip&gt;(__b));
1877 &#32;&#32;&#32;&#32;&#32;&#32;}
1878 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TW&gt;)
1879 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;|&#32;__b;
1880 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1881 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_data&#32;|&#32;__b._M_data;
1882 &#32;&#32;&#32;&#32;&#32;&#32;}
1883 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;|&#32;__b;
1885 &#32;&#32;}
1886 
1887 <emphasis role="comment">//&#32;}}}</emphasis>
1888 <emphasis role="comment">//&#32;__and{{{</emphasis>
1889 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TW&gt;
1890 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_TW
1891 &#32;&#32;__and(_TW&#32;__a,&#32;_TW&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1892 &#32;&#32;{
1893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TW&gt;&#32;||&#32;__is_simd_wrapper_v&lt;_TW&gt;)
1894 &#32;&#32;&#32;&#32;&#32;&#32;{
1895 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;conditional_t&lt;__is_simd_wrapper_v&lt;_TW&gt;,&#32;_TW,
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VectorTraitsImpl&lt;_TW&gt;&gt;::value_type;
1897 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
1898 &#32;&#32;&#32;&#32;&#32;&#32;{
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;make_unsigned_t&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;;
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(__vector_bitcast&lt;_Ip&gt;(__a)
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__vector_bitcast&lt;_Ip&gt;(__b));
1902 &#32;&#32;&#32;&#32;&#32;&#32;}
1903 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TW&gt;)
1904 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;&amp;&#32;__b;
1905 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1906 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_data&#32;&amp;&#32;__b._M_data;
1907 &#32;&#32;&#32;&#32;&#32;&#32;}
1908 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1909 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;&amp;&#32;__b;
1910 &#32;&#32;}
1911 
1912 <emphasis role="comment">//&#32;}}}</emphasis>
1913 <emphasis role="comment">//&#32;__andnot{{{</emphasis>
1914 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;&amp;&amp;&#32;!defined&#32;__clang__</emphasis>
1915 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">struct</emphasis>
1916 {
1917 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v4sf
1918 &#32;&#32;operator()(__v4sf&#32;__a,&#32;__v4sf&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1919 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_andnps(__a,&#32;__b);&#32;}
1920 
1921 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v2df
1922 &#32;&#32;operator()(__v2df&#32;__a,&#32;__v2df&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1923 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_andnpd(__a,&#32;__b);&#32;}
1924 
1925 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v2di
1926 &#32;&#32;operator()(__v2di&#32;__a,&#32;__v2di&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1927 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_pandn128(__a,&#32;__b);&#32;}
1928 
1929 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v8sf
1930 &#32;&#32;operator()(__v8sf&#32;__a,&#32;__v8sf&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1931 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_andnps256(__a,&#32;__b);&#32;}
1932 
1933 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v4df
1934 &#32;&#32;operator()(__v4df&#32;__a,&#32;__v4df&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1935 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_andnpd256(__a,&#32;__b);&#32;}
1936 
1937 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v4di
1938 &#32;&#32;operator()(__v4di&#32;__a,&#32;__v4di&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1939 &#32;&#32;{
1940 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
1941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_ia32_andnotsi256(__a,&#32;__b);
1942 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1943 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v4di<emphasis role="keyword">&gt;</emphasis>(
1944 &#32;&#32;&#32;&#32;__builtin_ia32_andnpd256(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v4df<emphasis role="keyword">&gt;</emphasis>(__a),
1945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v4df<emphasis role="keyword">&gt;</emphasis>(__b)));
1946 &#32;&#32;}
1947 
1948 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v16sf
1949 &#32;&#32;operator()(__v16sf&#32;__a,&#32;__v16sf&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1950 &#32;&#32;{
1951 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
1952 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_andnot_ps(__a,&#32;__b);
1953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1954 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v16sf<emphasis role="keyword">&gt;</emphasis>(
1955 &#32;&#32;&#32;&#32;_mm512_andnot_si512(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8di<emphasis role="keyword">&gt;</emphasis>(__a),
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8di<emphasis role="keyword">&gt;</emphasis>(__b)));
1957 &#32;&#32;}
1958 
1959 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v8df
1960 &#32;&#32;operator()(__v8df&#32;__a,&#32;__v8df&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1961 &#32;&#32;{
1962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
1963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_andnot_pd(__a,&#32;__b);
1964 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8df<emphasis role="keyword">&gt;</emphasis>(
1966 &#32;&#32;&#32;&#32;_mm512_andnot_si512(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8di<emphasis role="keyword">&gt;</emphasis>(__a),
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__v8di<emphasis role="keyword">&gt;</emphasis>(__b)));
1968 &#32;&#32;}
1969 
1970 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__v8di
1971 &#32;&#32;operator()(__v8di&#32;__a,&#32;__v8di&#32;__b)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1972 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_mm512_andnot_si512(__a,&#32;__b);&#32;}
1973 }&#32;_S_x86_andnot;
1974 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN&#32;&amp;&amp;&#32;!__clang__</emphasis>
1975 
1976 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_TW&gt;
1977 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_TW
1978 &#32;&#32;__andnot(_TW&#32;__a,&#32;_TW&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1979 &#32;&#32;{
1980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vector_type_v&lt;_TW&gt;&#32;||&#32;__is_simd_wrapper_v&lt;_TW&gt;)
1981 &#32;&#32;&#32;&#32;&#32;&#32;{
1982 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TVT&#32;=&#32;conditional_t&lt;__is_simd_wrapper_v&lt;_TW&gt;,&#32;_TW,
1983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VectorTraitsImpl&lt;_TW&gt;&gt;;
1984 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
1985 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;&amp;&amp;&#32;!defined&#32;__clang__</emphasis>
1986 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_TW)&#32;&gt;=&#32;16)
1987 &#32;&#32;&#32;&#32;&#32;&#32;{
1988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__ai&#32;=&#32;__to_intrin(__a);
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__bi&#32;=&#32;__to_intrin(__b);
1990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__builtin_is_constant_evaluated()
1991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!(__builtin_constant_p(__ai)&#32;&amp;&amp;&#32;__builtin_constant_p(__bi)))
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;_S_x86_andnot(__ai,&#32;__bi);
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_convertible_v&lt;<emphasis role="keyword">decltype</emphasis>(__r),&#32;_TW&gt;)
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(__r);
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1999 &#32;&#32;&#32;&#32;&#32;&#32;}
2000 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
2001 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;make_unsigned_t&lt;__int_for_sizeof_t&lt;_Tp&gt;&gt;;
2002 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(~__vector_bitcast&lt;_Ip&gt;(__a)
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;__vector_bitcast&lt;_Ip&gt;(__b));
2004 &#32;&#32;&#32;&#32;&#32;&#32;}
2005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~__a&#32;&amp;&#32;__b;
2007 &#32;&#32;}
2008 
2009 <emphasis role="comment">//&#32;}}}</emphasis>
2010 <emphasis role="comment">//&#32;__not{{{</emphasis>
2011 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2012 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
2013 &#32;&#32;__not(_Tp&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
2014 &#32;&#32;{
2015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;typename&#32;_TVT::value_type&gt;)
2016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_TVT::type<emphasis role="keyword">&gt;</emphasis>(
2017 &#32;&#32;&#32;&#32;~__vector_bitcast&lt;unsigned&gt;(__a));
2018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2019 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;~__a;
2020 &#32;&#32;}
2021 
2022 <emphasis role="comment">//&#32;}}}</emphasis>
2023 <emphasis role="comment">//&#32;__concat{{{</emphasis>
2024 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;,
2025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;__vector_type_t&lt;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type,
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TVT::_S_full_size&#32;*&#32;2&gt;&gt;
2027 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_R
2028 &#32;&#32;__concat(_Tp&#32;a_,&#32;_Tp&#32;b_)
2029 &#32;&#32;{
2030 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_XXX_1</emphasis>
2031 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_W
2032 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;conditional_t&lt;is_floating_point_v&lt;typename&#32;_TVT::value_type&gt;,&#32;double,
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)),
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type&gt;&gt;;
2035 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_width&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_W);
2036 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__a&#32;=&#32;__vector_bitcast&lt;_W&gt;(a_);
2037 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__b&#32;=&#32;__vector_bitcast&lt;_W&gt;(b_);
2038 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;__vector_type_t&lt;_W,&#32;<emphasis role="keyword">sizeof</emphasis>(_R)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_W)&gt;;
2039 <emphasis role="preprocessor">#else</emphasis>
2040 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;input_width&#32;=&#32;_TVT::_S_full_size;
2041 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a&#32;=&#32;a_;
2042 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b&#32;=&#32;b_;
2043 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;_R;
2044 <emphasis role="preprocessor">#endif</emphasis>
2045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(input_width&#32;==&#32;2)
2046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(_Up{__a[0],&#32;__a[1],&#32;__b[0],&#32;__b[1]});
2047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(input_width&#32;==&#32;4)
2048 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(
2049 &#32;&#32;&#32;&#32;_Up{__a[0],&#32;__a[1],&#32;__a[2],&#32;__a[3],&#32;__b[0],&#32;__b[1],&#32;__b[2],&#32;__b[3]});
2050 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(input_width&#32;==&#32;8)
2051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(
2052 &#32;&#32;&#32;&#32;_Up{__a[0],&#32;__a[1],&#32;__a[2],&#32;__a[3],&#32;__a[4],&#32;__a[5],&#32;__a[6],&#32;__a[7],
2053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[0],&#32;__b[1],&#32;__b[2],&#32;__b[3],&#32;__b[4],&#32;__b[5],&#32;__b[6],&#32;__b[7]});
2054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(input_width&#32;==&#32;16)
2055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(
2056 &#32;&#32;&#32;&#32;_Up{__a[0],&#32;&#32;__a[1],&#32;&#32;__a[2],&#32;&#32;__a[3],&#32;&#32;__a[4],&#32;&#32;__a[5],&#32;&#32;__a[6],
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[7],&#32;&#32;__a[8],&#32;&#32;__a[9],&#32;&#32;__a[10],&#32;__a[11],&#32;__a[12],&#32;__a[13],
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[14],&#32;__a[15],&#32;__b[0],&#32;&#32;__b[1],&#32;&#32;__b[2],&#32;&#32;__b[3],&#32;&#32;__b[4],
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[5],&#32;&#32;__b[6],&#32;&#32;__b[7],&#32;&#32;__b[8],&#32;&#32;__b[9],&#32;&#32;__b[10],&#32;__b[11],
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[12],&#32;__b[13],&#32;__b[14],&#32;__b[15]});
2061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(input_width&#32;==&#32;32)
2062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(
2063 &#32;&#32;&#32;&#32;_Up{__a[0],&#32;&#32;__a[1],&#32;&#32;__a[2],&#32;&#32;__a[3],&#32;&#32;__a[4],&#32;&#32;__a[5],&#32;&#32;__a[6],
2064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[7],&#32;&#32;__a[8],&#32;&#32;__a[9],&#32;&#32;__a[10],&#32;__a[11],&#32;__a[12],&#32;__a[13],
2065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[14],&#32;__a[15],&#32;__a[16],&#32;__a[17],&#32;__a[18],&#32;__a[19],&#32;__a[20],
2066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[21],&#32;__a[22],&#32;__a[23],&#32;__a[24],&#32;__a[25],&#32;__a[26],&#32;__a[27],
2067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__a[28],&#32;__a[29],&#32;__a[30],&#32;__a[31],&#32;__b[0],&#32;&#32;__b[1],&#32;&#32;__b[2],
2068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[3],&#32;&#32;__b[4],&#32;&#32;__b[5],&#32;&#32;__b[6],&#32;&#32;__b[7],&#32;&#32;__b[8],&#32;&#32;__b[9],
2069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[10],&#32;__b[11],&#32;__b[12],&#32;__b[13],&#32;__b[14],&#32;__b[15],&#32;__b[16],
2070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[17],&#32;__b[18],&#32;__b[19],&#32;__b[20],&#32;__b[21],&#32;__b[22],&#32;__b[23],
2071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[24],&#32;__b[25],&#32;__b[26],&#32;__b[27],&#32;__b[28],&#32;__b[29],&#32;__b[30],
2072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__b[31]});
2073 &#32;&#32;}
2074 
2075 <emphasis role="comment">//&#32;}}}</emphasis>
2076 <emphasis role="comment">//&#32;__zero_extend&#32;{{{</emphasis>
2077 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2078 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_ZeroExtendProxy
2079 &#32;&#32;{
2080 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
2081 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_TVT::_S_full_size;
2082 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__x;
2083 
2084 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToVT&#32;=&#32;_VectorTraits&lt;_To&gt;,
2085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;enable_if_t&lt;is_same_v&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToVT::value_type,&#32;value_type&gt;&gt;&gt;
2087 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">operator</emphasis>&#32;_To()<emphasis role="keyword">&#32;const</emphasis>
2088 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2089 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ToN&#32;=&#32;_ToVT::_S_full_size;
2090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_ToN&#32;==&#32;_Np)
2091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
2092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_ToN&#32;==&#32;2&#32;*&#32;_Np)
2093 &#32;&#32;&#32;&#32;&#32;&#32;{
2094 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_XXX_3</emphasis>
2095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;float,&#32;4&gt;)
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1af55969e692876d3b09a41da9d47ee110">_mm256_insertf128_ps</link>(__m256(),&#32;__x,&#32;0));
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a6acb80e0c2f81ec974f89ee9dcc478f1">_mm256_insertf128_pd</link>(__m256d(),&#32;__x,&#32;0));
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2&#32;&amp;&amp;&#32;_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(value_type)&#32;==&#32;16)
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avxintrin_8h_1a40b9fcd13876ab529aa2584ada35aa1c">_mm256_insertf128_si256</link>(__m256i(),&#32;__to_intrin(__x),&#32;0));
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;float,&#32;8&gt;)
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq)
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a2e09ab0a0d5cf74f63e6993e2b95c4f3">_mm512_insertf32x8</link>(__m512(),&#32;__x,&#32;0));
2109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m512<emphasis role="keyword">&gt;</emphasis>(
2111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a8986a60adace50a6be67d7a55c721084">_mm512_insertf64x4</link>(__m512d(),
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m256d<emphasis role="keyword">&gt;</emphasis>(__x),&#32;0));
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;double,&#32;4&gt;)
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a8986a60adace50a6be67d7a55c721084">_mm512_insertf64x4</link>(__m512d(),&#32;__x,&#32;0));
2118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(value_type)&#32;==&#32;32)
2119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a0b6a92aae7fc9172223334e5f6565e55">_mm512_inserti64x4</link>(__m512i(),&#32;__to_intrin(__x),&#32;0));
2121 <emphasis role="preprocessor">#endif</emphasis>
2122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(__x,&#32;_Tp());
2123 &#32;&#32;&#32;&#32;&#32;&#32;}
2124 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_ToN&#32;==&#32;4&#32;*&#32;_Np)
2125 &#32;&#32;&#32;&#32;&#32;&#32;{
2126 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_XXX_3</emphasis>
2127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;_TVT::template&#32;_S_is&lt;double,&#32;2&gt;)
2128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a55c2750779dd0164041bbb133ad31d03">_mm512_insertf64x2</link>(__m512d(),&#32;__x,&#32;0));
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f
2133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_floating_point_v&lt;value_type&gt;)
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a76a526062d108f00150fd3a95fe21f42">_mm512_insertf32x4</link>(__m512(),&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128<emphasis role="keyword">&gt;</emphasis>(__x),
2137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0));
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(value_type)&#32;==&#32;16)
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a6052feb1e4d7af8f92dfc1ada7804317">_mm512_inserti32x4</link>(__m512i(),&#32;__to_intrin(__x),&#32;0));
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2144 <emphasis role="preprocessor">#endif</emphasis>
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(__concat(__x,&#32;_Tp()),
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;value_type,&#32;_Np&#32;*&#32;2&gt;());
2147 &#32;&#32;&#32;&#32;&#32;&#32;}
2148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_ToN&#32;==&#32;8&#32;*&#32;_Np)
2149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(<emphasis role="keyword">operator</emphasis>&#32;__vector_type_t&lt;value_type,&#32;_Np&#32;*&#32;4&gt;(),
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;value_type,&#32;_Np&#32;*&#32;4&gt;());
2151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_ToN&#32;==&#32;16&#32;*&#32;_Np)
2152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__concat(<emphasis role="keyword">operator</emphasis>&#32;__vector_type_t&lt;value_type,&#32;_Np&#32;*&#32;8&gt;(),
2153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;value_type,&#32;_Np&#32;*&#32;8&gt;());
2154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2155 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
2156 &#32;&#32;&#32;&#32;&#32;&#32;}
2157 &#32;&#32;};
2158 
2159 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;&gt;
2160 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_ZeroExtendProxy&lt;_Tp,&#32;_TVT&gt;
2161 &#32;&#32;__zero_extend(_Tp&#32;__x)
2162 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__x};&#32;}
2163 
2164 <emphasis role="comment">//&#32;}}}</emphasis>
2165 <emphasis role="comment">//&#32;__extract&lt;_Np,&#32;By&gt;{{{</emphasis>
2166 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Offset,
2167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_SplitBy,
2168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
2169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT&#32;=&#32;_VectorTraits&lt;_Tp&gt;,
2170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;__vector_type_t&lt;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type,
2171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TVT::_S_full_size&#32;/&#32;_SplitBy&gt;&gt;
2172 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_R
2173 &#32;&#32;__extract(_Tp&#32;__in)
2174 &#32;&#32;{
2175 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_TVT::value_type;
2176 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;</emphasis><emphasis role="comment">//&#32;{{{</emphasis>
2177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;64&#32;&amp;&amp;&#32;_SplitBy&#32;==&#32;4&#32;&amp;&amp;&#32;_Offset&#32;&gt;&#32;0)
2178 &#32;&#32;&#32;&#32;&#32;&#32;{
2179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512dq&#32;&amp;&amp;&#32;is_same_v&lt;double,&#32;value_type&gt;)
2180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2avx512dqintrin_8h_1a47946a8fbd4031ad8a7dea8358a009f9">_mm512_extractf64x2_pd</link>(__to_intrin(__in),&#32;_Offset);
2181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;value_type&gt;)
2182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;value_type&gt;(
2183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a5e5e2646894749212b0a69c053c4eca4">_mm512_extractf32x4_ps</link>(__intrin_bitcast&lt;__m512&gt;(__in),&#32;_Offset));
2184 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(
2186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1aefd1699ad586afb3ae7887d721921bfa">_mm512_extracti32x4_epi32</link>(__intrin_bitcast&lt;__m512i&gt;(__in),
2187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Offset));
2188 &#32;&#32;&#32;&#32;&#32;&#32;}
2189 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2190 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN&#32;}}}</emphasis>
2191 &#32;&#32;&#32;&#32;&#32;&#32;{
2192 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_WORKAROUND_XXX_1</emphasis>
2193 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_W&#32;=&#32;conditional_t&lt;
2194 &#32;&#32;&#32;&#32;&#32;&#32;is_floating_point_v&lt;value_type&gt;,&#32;double,
2195 &#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;(<emphasis role="keyword">sizeof</emphasis>(_R)&#32;&gt;=&#32;16),&#32;<emphasis role="keywordtype">long</emphasis>&#32;long,&#32;value_type&gt;&gt;;
2196 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_R)&#32;%&#32;<emphasis role="keyword">sizeof</emphasis>(_W)&#32;==&#32;0);
2197 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__return_width&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_R)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_W);
2198 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;__vector_type_t&lt;_W,&#32;__return_width&gt;;
2199 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__x&#32;=&#32;__vector_bitcast&lt;_W&gt;(__in);
2200 <emphasis role="preprocessor">#else</emphasis>
2201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__return_width&#32;=&#32;_TVT::_S_full_size&#32;/&#32;_SplitBy;
2202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;_R;
2203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__vector_type_t&lt;value_type,&#32;_TVT::_S_full_size&gt;&amp;&#32;__x
2204 &#32;&#32;&#32;&#32;=&#32;__in;&#32;<emphasis role="comment">//&#32;only&#32;needed&#32;for&#32;_Tp&#32;=&#32;_SimdWrapper&lt;value_type,&#32;_Np&gt;</emphasis>
2205 <emphasis role="preprocessor">#endif</emphasis>
2206 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_O&#32;=&#32;_Offset&#32;*&#32;__return_width;
2207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts&lt;__return_width,&#32;_O&gt;(
2208 &#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__entries)&#32;{
2209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_R<emphasis role="keyword">&gt;</emphasis>(_Up{__entries...});
2210 &#32;&#32;&#32;&#32;&#32;&#32;});
2211 &#32;&#32;&#32;&#32;&#32;&#32;}
2212 &#32;&#32;}
2213 
2214 <emphasis role="comment">//&#32;}}}</emphasis>
2215 <emphasis role="comment">//&#32;__lo/__hi64[z]{{{</emphasis>
2216 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
2217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R
2218 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_type8_t&lt;typename&#32;_VectorTraits&lt;_Tp&gt;::value_type&gt;&gt;
2219 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_R
2220 &#32;&#32;__lo64(_Tp&#32;__x)
2221 &#32;&#32;{
2222 &#32;&#32;&#32;&#32;_R&#32;__r{};
2223 &#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;&amp;__x,&#32;8);
2224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2225 &#32;&#32;}
2226 
2227 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
2228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R
2229 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_type8_t&lt;typename&#32;_VectorTraits&lt;_Tp&gt;::value_type&gt;&gt;
2230 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_R
2231 &#32;&#32;__hi64(_Tp&#32;__x)
2232 &#32;&#32;{
2233 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16,&#32;<emphasis role="stringliteral">&quot;use&#32;__hi64z&#32;if&#32;you&#32;meant&#32;it&quot;</emphasis>);
2234 &#32;&#32;&#32;&#32;_R&#32;__r{};
2235 &#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__x)&#32;+&#32;8,&#32;8);
2236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2237 &#32;&#32;}
2238 
2239 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
2240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R
2241 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__vector_type8_t&lt;typename&#32;_VectorTraits&lt;_Tp&gt;::value_type&gt;&gt;
2242 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_R
2243 &#32;&#32;__hi64z([[maybe_unused]]&#32;_Tp&#32;__x)
2244 &#32;&#32;{
2245 &#32;&#32;&#32;&#32;_R&#32;__r{};
2246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;16)
2247 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__x)&#32;+&#32;8,&#32;8);
2248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2249 &#32;&#32;}
2250 
2251 <emphasis role="comment">//&#32;}}}</emphasis>
2252 <emphasis role="comment">//&#32;__lo/__hi128{{{</emphasis>
2253 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2254 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2255 &#32;&#32;__lo128(_Tp&#32;__x)
2256 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract&lt;0,&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;/&#32;16&gt;(__x);&#32;}
2257 
2258 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2259 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2260 &#32;&#32;__hi128(_Tp&#32;__x)
2261 &#32;&#32;{
2262 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32);
2263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract&lt;1,&#32;2&gt;(__x);
2264 &#32;&#32;}
2265 
2266 <emphasis role="comment">//&#32;}}}</emphasis>
2267 <emphasis role="comment">//&#32;__lo/__hi256{{{</emphasis>
2268 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2269 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2270 &#32;&#32;__lo256(_Tp&#32;__x)
2271 &#32;&#32;{
2272 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64);
2273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract&lt;0,&#32;2&gt;(__x);
2274 &#32;&#32;}
2275 
2276 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2277 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2278 &#32;&#32;__hi256(_Tp&#32;__x)
2279 &#32;&#32;{
2280 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;64);
2281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract&lt;1,&#32;2&gt;(__x);
2282 &#32;&#32;}
2283 
2284 <emphasis role="comment">//&#32;}}}</emphasis>
2285 <emphasis role="comment">//&#32;__auto_bitcast{{{</emphasis>
2286 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2287 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_AutoCast
2288 &#32;&#32;{
2289 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vector_type_v&lt;_Tp&gt;);
2290 
2291 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&#32;__x;
2292 
2293 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UVT&#32;=&#32;_VectorTraits&lt;_Up&gt;&gt;
2294 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;_Up()<emphasis role="keyword">&#32;const</emphasis>
2295 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;typename&#32;_UVT::type&gt;(__x);&#32;}
2296 &#32;&#32;};
2297 
2298 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2299 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_AutoCast&lt;_Tp&gt;
2300 &#32;&#32;__auto_bitcast(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__x)
2301 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__x};&#32;}
2302 
2303 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2304 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
2305 &#32;&#32;_AutoCast&lt;typename&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;::_BuiltinType&gt;
2306 &#32;&#32;__auto_bitcast(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
2307 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__x._M_data};&#32;}
2308 
2309 <emphasis role="comment">//&#32;}}}</emphasis>
2310 <emphasis role="comment">//&#32;^^^&#32;----&#32;builtin&#32;vector&#32;types&#32;[[gnu::vector_size(N)]]&#32;and&#32;operations&#32;----&#32;^^^</emphasis>
2311 
2312 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_HAVE_SSE_ABI</emphasis>
2313 <emphasis role="comment">//&#32;__bool_storage_member_type{{{</emphasis>
2314 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_HAVE_AVX512F&#32;&amp;&amp;&#32;_GLIBCXX_SIMD_X86INTRIN</emphasis>
2315 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Size&gt;
2316 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type
2317 &#32;&#32;{
2318 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>((_Size&#32;&amp;&#32;(_Size&#32;-&#32;1))&#32;!=&#32;0,
2319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;This&#32;trait&#32;may&#32;only&#32;be&#32;used&#32;for&#32;non-power-of-2&#32;sizes.&#32;&quot;</emphasis>
2320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Power-of-2&#32;sizes&#32;must&#32;be&#32;specialized.&quot;</emphasis>);
2321 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=
2322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__bool_storage_member_type&lt;std::__bit_ceil(_Size)&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
2323 &#32;&#32;};
2324 
2325 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2326 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type&lt;1&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>;&#32;};
2327 
2328 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2329 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type&lt;2&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>;&#32;};
2330 
2331 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2332 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type&lt;4&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>;&#32;};
2333 
2334 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2335 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type&lt;8&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1a9351fcffd2210999639f467660e32673">__mmask8</link>;&#32;};
2336 
2337 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2338 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type&lt;16&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512cdintrin_8h_1adc52f2d501b71ebd5df08fa2e0573636">__mmask16</link>;&#32;};
2339 
2340 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2341 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type&lt;32&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512vlintrin_8h_1adfd5d7ee308260ea96d3caf338c2ed75">__mmask32</link>;&#32;};
2342 
2343 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2344 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__bool_storage_member_type&lt;64&gt;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a910ccf7d2141c4a3b8675e2480cc33ff">__mmask64</link>;&#32;};
2345 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_HAVE_AVX512F</emphasis>
2346 
2347 <emphasis role="comment">//&#32;}}}</emphasis>
2348 <emphasis role="comment">//&#32;__intrinsic_type&#32;(x86){{{</emphasis>
2349 <emphasis role="comment">//&#32;the&#32;following&#32;excludes&#32;bool&#32;via&#32;__is_vectorizable</emphasis>
2350 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_HAVE_SSE</emphasis>
2351 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&gt;
2352 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type&lt;_Tp,&#32;_Bytes,
2353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vectorizable_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;_Bytes&#32;&lt;=&#32;64&gt;&gt;
2354 &#32;&#32;{
2355 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_same_v&lt;_Tp,&#32;long&#32;double&gt;,
2356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;no&#32;__intrinsic_type&#32;support&#32;for&#32;long&#32;double&#32;on&#32;x86&quot;</emphasis>);
2357 
2358 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_VBytes&#32;=&#32;_Bytes&#32;&lt;=&#32;16&#32;&#32;&#32;?&#32;16
2359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Bytes&#32;&lt;=&#32;32&#32;?&#32;32
2360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;64;
2361 
2362 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;[[__gnu__::__vector_size__(_S_VBytes)]]
2363 &#32;&#32;&#32;&#32;=&#32;conditional_t&lt;is_integral_v&lt;_Tp&gt;,&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;int,&#32;_Tp&gt;;
2364 &#32;&#32;};
2365 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_HAVE_SSE</emphasis>
2366 
2367 <emphasis role="comment">//&#32;}}}</emphasis>
2368 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_HAVE_SSE_ABI</emphasis>
2369 <emphasis role="comment">//&#32;__intrinsic_type&#32;(ARM){{{</emphasis>
2370 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_HAVE_NEON</emphasis>
2371 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2372 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type&lt;float,&#32;8,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
2373 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;float32x2_t;&#32;};
2374 
2375 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2376 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type&lt;float,&#32;16,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
2377 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;float32x4_t;&#32;};
2378 
2379 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_HAVE_NEON_A64</emphasis>
2380 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2381 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type&lt;double,&#32;8,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
2382 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;float64x1_t;&#32;};
2383 
2384 <emphasis role="keyword">template</emphasis>&#32;&lt;&gt;
2385 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type&lt;double,&#32;16,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
2386 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;float64x2_t;&#32;};
2387 <emphasis role="preprocessor">#endif</emphasis>
2388 
2389 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_ARM_INTRIN(_Bits,&#32;_Np)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2390 <emphasis role="preprocessor">template&#32;&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2391 <emphasis role="preprocessor">&#32;&#32;struct&#32;__intrinsic_type&lt;__int_with_sizeof_t&lt;_Bits&#32;/&#32;8&gt;,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2392 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Np&#32;*&#32;_Bits&#32;/&#32;8,&#32;void&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2393 <emphasis role="preprocessor">&#32;&#32;{&#32;using&#32;type&#32;=&#32;int##_Bits##x##_Np##_t;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2394 <emphasis role="preprocessor">template&#32;&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2395 <emphasis role="preprocessor">&#32;&#32;struct&#32;__intrinsic_type&lt;make_unsigned_t&lt;__int_with_sizeof_t&lt;_Bits&#32;/&#32;8&gt;&gt;,&#32;&#32;&#32;&#32;&#32;\</emphasis>
2396 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Np&#32;*&#32;_Bits&#32;/&#32;8,&#32;void&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2397 <emphasis role="preprocessor">&#32;&#32;{&#32;using&#32;type&#32;=&#32;uint##_Bits##x##_Np##_t;&#32;}</emphasis>
2398 _GLIBCXX_SIMD_ARM_INTRIN(8,&#32;8);
2399 _GLIBCXX_SIMD_ARM_INTRIN(8,&#32;16);
2400 _GLIBCXX_SIMD_ARM_INTRIN(16,&#32;4);
2401 _GLIBCXX_SIMD_ARM_INTRIN(16,&#32;8);
2402 _GLIBCXX_SIMD_ARM_INTRIN(32,&#32;2);
2403 _GLIBCXX_SIMD_ARM_INTRIN(32,&#32;4);
2404 _GLIBCXX_SIMD_ARM_INTRIN(64,&#32;1);
2405 _GLIBCXX_SIMD_ARM_INTRIN(64,&#32;2);
2406 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_ARM_INTRIN</emphasis>
2407 
2408 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&gt;
2409 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type&lt;_Tp,&#32;_Bytes,
2410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vectorizable_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;_Bytes&#32;&lt;=&#32;16&gt;&gt;
2411 &#32;&#32;{
2412 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_SVecBytes&#32;=&#32;_Bytes&#32;&lt;=&#32;8&#32;?&#32;8&#32;:&#32;16;
2413 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2414 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;conditional_t&lt;
2415 &#32;&#32;&#32;&#32;&#32;&#32;is_floating_point_v&lt;_Tp&gt;,&#32;_Tp,
2416 &#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;is_unsigned_v&lt;_Tp&gt;,&#32;make_unsigned_t&lt;_Ip&gt;,&#32;_Ip&gt;&gt;;
2417 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_same_v&lt;_Tp,&#32;_Up&gt;&#32;||&#32;_SVecBytes&#32;!=&#32;_Bytes,
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;should&#32;use&#32;explicit&#32;specialization&#32;above&quot;</emphasis>);
2419 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type&lt;_Up,&#32;_SVecBytes&gt;::type;
2420 &#32;&#32;};
2421 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_HAVE_NEON</emphasis>
2422 
2423 <emphasis role="comment">//&#32;}}}</emphasis>
2424 <emphasis role="comment">//&#32;__intrinsic_type&#32;(PPC){{{</emphasis>
2425 <emphasis role="preprocessor">#ifdef&#32;__ALTIVEC__</emphasis>
2426 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2427 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type_impl;
2428 
2429 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_PPC_INTRIN(_Tp)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2430 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
2431 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;__intrinsic_type_impl&lt;_Tp&gt;&#32;{&#32;using&#32;type&#32;=&#32;__vector&#32;_Tp;&#32;}</emphasis>
2432 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">float</emphasis>);
2433 <emphasis role="preprocessor">#ifdef&#32;__VSX__</emphasis>
2434 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">double</emphasis>);
2435 <emphasis role="preprocessor">#endif</emphasis>
2436 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>);
2437 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>);
2438 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>);
2439 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>);
2440 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>);
2441 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>);
2442 <emphasis role="preprocessor">#if&#32;defined&#32;__VSX__&#32;||&#32;__SIZEOF_LONG__&#32;==&#32;4</emphasis>
2443 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
2444 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
2445 <emphasis role="preprocessor">#endif</emphasis>
2446 <emphasis role="preprocessor">#ifdef&#32;__VSX__</emphasis>
2447 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
2448 _GLIBCXX_SIMD_PPC_INTRIN(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>);
2449 <emphasis role="preprocessor">#endif</emphasis>
2450 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_PPC_INTRIN</emphasis>
2451 
2452 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Bytes&gt;
2453 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__intrinsic_type&lt;_Tp,&#32;_Bytes,
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vectorizable_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;_Bytes&#32;&lt;=&#32;16&gt;&gt;
2455 &#32;&#32;{
2456 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_ldouble&#32;=&#32;is_same_v&lt;_Tp,&#32;long&#32;double&gt;;
2457 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allow&#32;_Tp&#32;==&#32;long&#32;double&#32;with&#32;-mlong-double-64</emphasis>
2458 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!(_S_is_ldouble&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;double)&#32;&gt;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>)),
2459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;no&#32;__intrinsic_type&#32;support&#32;for&#32;128-bit&#32;floating&#32;point&#32;on&#32;PowerPC&quot;</emphasis>);
2460 <emphasis role="preprocessor">#ifndef&#32;__VSX__</emphasis>
2461 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!(is_same_v&lt;_Tp,&#32;double&gt;
2462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(_S_is_ldouble&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;double)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">double</emphasis>))),
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;no&#32;__intrinsic_type&#32;support&#32;for&#32;64-bit&#32;floating&#32;point&#32;on&#32;PowerPC&#32;w/o&#32;VSX&quot;</emphasis>);
2464 <emphasis role="preprocessor">#endif</emphasis>
2465 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=
2466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__intrinsic_type_impl&lt;
2467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;is_floating_point_v&lt;_Tp&gt;,
2468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conditional_t&lt;_S_is_ldouble,&#32;double,&#32;_Tp&gt;,
2469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__int_for_sizeof_t&lt;_Tp&gt;&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
2470 &#32;&#32;};
2471 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__ALTIVEC__</emphasis>
2472 
2473 <emphasis role="comment">//&#32;}}}</emphasis>
2474 <emphasis role="comment">//&#32;_SimdWrapper&lt;bool&gt;{{{1</emphasis>
2475 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_W<emphasis role="keywordtype">id</emphasis>th&gt;
2476 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdWrapper&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;_Width,
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;__bool_storage_member_type&lt;_Width&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&gt;&gt;
2478 &#32;&#32;{
2479 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_BuiltinType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__bool_storage_member_type&lt;_Width&gt;::type;
2480 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>;
2481 
2482 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_BuiltinType)&#32;*&#32;__CHAR_BIT__;
2483 
2484 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;bool,&#32;_S_full_size&gt;
2485 &#32;&#32;&#32;&#32;__as_full_vector()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
2486 
2487 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2488 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper(_BuiltinType&#32;__k)
2489 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(__k)&#32;{};
2490 
2491 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_BuiltinType&amp;()&#32;<emphasis role="keyword">const</emphasis>
2492 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
2493 
2494 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">operator</emphasis>&#32;_BuiltinType&amp;()
2495 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
2496 
2497 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_BuiltinType&#32;__intrin()<emphasis role="keyword">&#32;const</emphasis>
2498 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
2499 
2500 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
2501 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data&#32;&amp;&#32;(_BuiltinType(1)&#32;&lt;&lt;&#32;__i);&#32;}
2502 
2503 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;__i&gt;
2504 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type
2505 &#32;&#32;&#32;&#32;&#32;&#32;operator[](_SizeConstant&lt;__i&gt;)<emphasis role="keyword">&#32;const</emphasis>
2506 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data&#32;&amp;&#32;(_BuiltinType(1)&#32;&lt;&lt;&#32;__i);&#32;}
2507 
2508 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_set(<emphasis role="keywordtype">size_t</emphasis>&#32;__i,&#32;value_type&#32;__x)
2509 &#32;&#32;&#32;&#32;{
2510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x)
2511 &#32;&#32;&#32;&#32;_M_data&#32;|=&#32;(_BuiltinType(1)&#32;&lt;&lt;&#32;__i);
2512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2513 &#32;&#32;&#32;&#32;_M_data&#32;&amp;=&#32;~(_BuiltinType(1)&#32;&lt;&lt;&#32;__i);
2514 &#32;&#32;&#32;&#32;}
2515 
2516 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
2517 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop()<emphasis role="keyword">&#32;const</emphasis>
2518 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_constant_p(_M_data);&#32;}
2519 
2520 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop_none_of()<emphasis role="keyword">&#32;const</emphasis>
2521 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(_M_data))
2523 &#32;&#32;&#32;&#32;{
2524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__nbits&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_BuiltinType)&#32;*&#32;__CHAR_BIT__;
2525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BuiltinType&#32;__active_mask
2526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;~_BuiltinType()&#32;&gt;&gt;&#32;(__nbits&#32;-&#32;_Width);
2527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_data&#32;&amp;&#32;__active_mask)&#32;==&#32;0;
2528 &#32;&#32;&#32;&#32;}
2529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2530 &#32;&#32;&#32;&#32;}
2531 
2532 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop_all_of()<emphasis role="keyword">&#32;const</emphasis>
2533 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(_M_data))
2535 &#32;&#32;&#32;&#32;{
2536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__nbits&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_BuiltinType)&#32;*&#32;__CHAR_BIT__;
2537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_BuiltinType&#32;__active_mask
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;~_BuiltinType()&#32;&gt;&gt;&#32;(__nbits&#32;-&#32;_Width);
2539 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_data&#32;&amp;&#32;__active_mask)&#32;==&#32;__active_mask;
2540 &#32;&#32;&#32;&#32;}
2541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2542 &#32;&#32;&#32;&#32;}
2543 
2544 &#32;&#32;&#32;&#32;_BuiltinType&#32;_M_data;
2545 &#32;&#32;};
2546 
2547 <emphasis role="comment">//&#32;_SimdWrapperBase{{{1</emphasis>
2548 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_MustZeroInitPadding,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BuiltinType&gt;
2549 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdWrapperBase;
2550 
2551 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_BuiltinType&gt;
2552 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdWrapperBase&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;_BuiltinType&gt;&#32;<emphasis role="comment">//&#32;no&#32;padding&#32;or&#32;no&#32;SNaNs</emphasis>
2553 &#32;&#32;{
2554 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapperBase()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2555 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapperBase(_BuiltinType&#32;__init)
2556 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(__init)
2557 &#32;&#32;&#32;&#32;{}
2558 
2559 &#32;&#32;&#32;&#32;_BuiltinType&#32;_M_data;
2560 &#32;&#32;};
2561 
2562 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_BuiltinType&gt;
2563 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdWrapperBase&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;_BuiltinType&gt;&#32;<emphasis role="comment">//&#32;with&#32;padding&#32;that&#32;needs&#32;to</emphasis>
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;never&#32;become&#32;SNaN</emphasis>
2565 &#32;&#32;{
2566 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapperBase()&#32;:&#32;_M_data()&#32;{}
2567 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapperBase(_BuiltinType&#32;__init)
2568 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(__init)
2569 &#32;&#32;&#32;&#32;{}
2570 
2571 &#32;&#32;&#32;&#32;_BuiltinType&#32;_M_data;
2572 &#32;&#32;};
2573 
2574 <emphasis role="comment">//&#32;}}}</emphasis>
2575 <emphasis role="comment">//&#32;_SimdWrapper{{{</emphasis>
2576 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_W<emphasis role="keywordtype">id</emphasis>th&gt;
2577 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdWrapper&lt;
2578 &#32;&#32;&#32;&#32;_Tp,&#32;_Width,
2579 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;__vector_type_t&lt;_Tp,&#32;_Width&gt;,&#32;__intrinsic_type_t&lt;_Tp,&#32;_Width&gt;&gt;&gt;
2580 &#32;&#32;&#32;&#32;:&#32;_SimdWrapperBase&lt;__has_iec559_behavior&lt;__signaling_NaN,&#32;_Tp&gt;::value
2581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;sizeof(_Tp)&#32;*&#32;_Width
2582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;sizeof(__vector_type_t&lt;_Tp,&#32;_Width&gt;),
2583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Tp,&#32;_Width&gt;&gt;
2584 &#32;&#32;{
2585 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base
2586 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_SimdWrapperBase&lt;__has_iec559_behavior&lt;__signaling_NaN,&#32;_Tp&gt;::value
2587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Width
2588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(__vector_type_t&lt;_Tp,&#32;_Width&gt;),
2589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_type_t&lt;_Tp,&#32;_Width&gt;&gt;;
2590 
2591 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_vectorizable_v&lt;_Tp&gt;);
2592 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Width&#32;&gt;=&#32;2);&#32;<emphasis role="comment">//&#32;1&#32;doesn&apos;t&#32;make&#32;sense,&#32;use&#32;_Tp&#32;directly&#32;then</emphasis>
2593 
2594 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_BuiltinType&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_Width&gt;;
2595 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
2596 
2597 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size
2598 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_BuiltinType)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
2599 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_size&#32;=&#32;_Width;
2600 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_partial&#32;=&#32;_S_full_size&#32;!=&#32;_S_size;
2601 
2602 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_M_data;
2603 
2604 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_S_full_size&gt;
2605 &#32;&#32;&#32;&#32;__as_full_vector()<emphasis role="keyword">&#32;const</emphasis>
2606 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
2607 
2608 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper(initializer_list&lt;_Tp&gt;&#32;__init)
2609 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__generate_from_n_evaluations&lt;_Width,&#32;_BuiltinType&gt;(
2610 &#32;&#32;&#32;&#32;[&amp;](auto&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__init.begin()[__i.value];&#32;}))&#32;{}
2611 
2612 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2613 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&amp;)
2614 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2615 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper(_SimdWrapper&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2616 
2617 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&amp;
2618 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2619 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper&amp;
2620 &#32;&#32;&#32;&#32;operator=(_SimdWrapper&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2621 
2622 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;disjunction_v&lt;
2623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_V,&#32;__vector_type_t&lt;_Tp,&#32;_Width&gt;&gt;,
2624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_V,&#32;__intrinsic_type_t&lt;_Tp,&#32;_Width&gt;&gt;&gt;&gt;&gt;
2625 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdWrapper(_V&#32;__x)
2626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__vector_bitcast&#32;can&#32;convert&#32;e.g.&#32;__m128&#32;to&#32;__vector(2)&#32;float</emphasis>
2627 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base(__vector_bitcast&lt;_Tp,&#32;_Width&gt;(__x))&#32;{}
2628 
2629 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_As,
2630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;((is_same_v&lt;simd_abi::scalar,&#32;_As&gt;&#32;&amp;&amp;&#32;...)
2631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>...(_As)&#32;&lt;=&#32;_Width)&gt;&gt;
2632 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
2633 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;()&#32;<emphasis role="keyword">const</emphasis>
2634 &#32;&#32;&#32;&#32;&#32;&#32;{
2635 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;dd&#32;=&#32;_M_data;&#32;<emphasis role="comment">//&#32;workaround&#32;for&#32;GCC7&#32;ICE</emphasis>
2636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;<emphasis role="keyword">sizeof</emphasis>...(_As),
2637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&gt;([&amp;](
2638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;dd[int(__i)];&#32;});
2639 &#32;&#32;&#32;&#32;&#32;&#32;}
2640 
2641 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_BuiltinType&amp;()&#32;<emphasis role="keyword">const</emphasis>
2642 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
2643 
2644 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;_BuiltinType&amp;()
2645 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
2646 
2647 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
2648 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data[__i];&#32;}
2649 
2650 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;__i&gt;
2651 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;operator[](_SizeConstant&lt;__i&gt;)<emphasis role="keyword">&#32;const</emphasis>
2652 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data[__i];&#32;}
2653 
2654 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_set(<emphasis role="keywordtype">size_t</emphasis>&#32;__i,&#32;_Tp&#32;__x)
2655 &#32;&#32;&#32;&#32;{&#32;_M_data[__i]&#32;=&#32;__x;&#32;}
2656 
2657 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
2658 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop()<emphasis role="keyword">&#32;const</emphasis>
2659 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_constant_p(_M_data);&#32;}
2660 
2661 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop_none_of()<emphasis role="keyword">&#32;const</emphasis>
2662 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(_M_data))
2664 &#32;&#32;&#32;&#32;{
2665 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__r&#32;=&#32;<emphasis role="keyword">true</emphasis>;
2666 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
2667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intdata&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(_M_data);
2670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_Width&gt;(
2671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;__r&#32;&amp;=&#32;__intdata[__i.value]&#32;==&#32;_Ip();&#32;});
2672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_Width&gt;(
2675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;__r&#32;&amp;=&#32;_M_data[__i.value]&#32;==&#32;_Tp();&#32;});
2676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2677 &#32;&#32;&#32;&#32;}
2678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2679 &#32;&#32;&#32;&#32;}
2680 
2681 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop_all_of()<emphasis role="keyword">&#32;const</emphasis>
2682 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(_M_data))
2684 &#32;&#32;&#32;&#32;{
2685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__r&#32;=&#32;<emphasis role="keyword">true</emphasis>;
2686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_floating_point_v&lt;_Tp&gt;)
2687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
2689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intdata&#32;=&#32;__vector_bitcast&lt;_Ip&gt;(_M_data);
2690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_Width&gt;(
2691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;__r&#32;&amp;=&#32;__intdata[__i.value]&#32;==&#32;~_Ip();&#32;});
2692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2693 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__execute_n_times&lt;_Width&gt;(
2695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;__r&#32;&amp;=&#32;_M_data[__i.value]&#32;==&#32;~_Tp();&#32;});
2696 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
2697 &#32;&#32;&#32;&#32;}
2698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2699 &#32;&#32;&#32;&#32;}
2700 &#32;&#32;};
2701 
2702 <emphasis role="comment">//&#32;}}}</emphasis>
2703 
2704 <emphasis role="comment">//&#32;__vectorized_sizeof&#32;{{{</emphasis>
2705 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2706 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
2707 &#32;&#32;__vectorized_sizeof()
2708 &#32;&#32;{
2709 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!__is_vectorizable_v&lt;_Tp&gt;)
2710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2711 
2712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;8)
2713 &#32;&#32;&#32;&#32;&#32;&#32;{
2714 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;X86:</emphasis>
2715 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512bw)
2716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;64;
2717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&gt;=&#32;4)
2718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;64;
2719 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx2)
2720 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;32;
2721 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
2722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;32;
2723 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse2)
2724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;16;
2725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_sse&#32;&amp;&amp;&#32;is_same_v&lt;_Tp,&#32;float&gt;)
2726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;16;
2727 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;The&#32;following&#32;is&#32;too&#32;much&#32;trouble&#32;because&#32;of&#32;mixed&#32;MMX&#32;and&#32;x87&#32;code.</emphasis>
2728 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;While&#32;nothing&#32;here&#32;explicitly&#32;calls&#32;MMX&#32;instructions&#32;of&#32;registers,</emphasis>
2729 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;they&#32;are&#32;still&#32;emitted&#32;but&#32;no&#32;EMMS&#32;cleanup&#32;is&#32;done.</emphasis>
2730 <emphasis role="comment">&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(__have_mmx&#32;&amp;&amp;&#32;sizeof(_Tp)&#32;&lt;=&#32;4&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;)</emphasis>
2731 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;8;</emphasis>
2732 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
2733 
2734 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PowerPC:</emphasis>
2735 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_power8vec
2736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__have_power_vmx&#32;&amp;&amp;&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;&#32;8))
2737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__have_power_vsx&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)&#32;)
2738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;16;
2739 
2740 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ARM:</emphasis>
2741 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon_a64
2742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__have_neon_a32&#32;&amp;&amp;&#32;!is_same_v&lt;_Tp,&#32;double&gt;)&#32;)
2743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;16;
2744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_neon
2745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;&#32;8
2746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;allow&#32;fp&#32;if&#32;the&#32;user&#32;allows&#32;non-ICE559&#32;fp&#32;(e.g.</emphasis>
2747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;via&#32;-ffast-math).&#32;ARMv7&#32;NEON&#32;fp&#32;is&#32;not&#32;conforming&#32;to</emphasis>
2748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;IEC559.</emphasis>
2749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(__support_neon_float&#32;||&#32;!is_floating_point_v&lt;_Tp&gt;))
2750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;16;
2751 &#32;&#32;&#32;&#32;&#32;&#32;}
2752 
2753 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
2754 &#32;&#32;}
2755 
2756 <emphasis role="comment">//&#32;}}}</emphasis>
2757 <emphasis role="keyword">namespace&#32;</emphasis>simd_abi&#32;{
2758 <emphasis role="comment">//&#32;most&#32;of&#32;simd_abi&#32;is&#32;defined&#32;in&#32;simd_detail.h</emphasis>
2759 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2760 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;max_fixed_size
2761 &#32;&#32;&#32;&#32;=&#32;(__have_avx512bw&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;1)&#32;?&#32;64&#32;:&#32;32;
2762 
2763 <emphasis role="comment">//&#32;compatible&#32;{{{</emphasis>
2764 <emphasis role="preprocessor">#if&#32;defined&#32;__x86_64__&#32;||&#32;defined&#32;__aarch64__</emphasis>
2765 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2766 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>compatible&#32;=&#32;conditional_t&lt;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;8),&#32;_VecBuiltin&lt;16&gt;,&#32;scalar&gt;;
2767 <emphasis role="preprocessor">#elif&#32;defined&#32;__ARM_NEON</emphasis>
2768 <emphasis role="comment">//&#32;FIXME:&#32;not&#32;sure,&#32;probably&#32;needs&#32;to&#32;be&#32;scalar&#32;(or&#32;dependent&#32;on&#32;the&#32;hard-float</emphasis>
2769 <emphasis role="comment">//&#32;ABI?)</emphasis>
2770 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2771 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>compatible
2772 &#32;&#32;&#32;&#32;=&#32;conditional_t&lt;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;&#32;8
2773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(__support_neon_float&#32;||&#32;!is_floating_point_v&lt;_Tp&gt;)),
2774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_VecBuiltin&lt;16&gt;,&#32;scalar&gt;;
2775 <emphasis role="preprocessor">#else</emphasis>
2776 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;
2777 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>compatible&#32;=&#32;scalar;
2778 <emphasis role="preprocessor">#endif</emphasis>
2779 
2780 <emphasis role="comment">//&#32;}}}</emphasis>
2781 <emphasis role="comment">//&#32;native&#32;{{{</emphasis>
2782 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2783 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
2784 &#32;&#32;__determine_native_abi()
2785 &#32;&#32;{
2786 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes&#32;=&#32;__vectorized_sizeof&lt;_Tp&gt;();
2787 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__bytes&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp))
2788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>scalar*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>);
2789 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512vl&#32;||&#32;(__have_avx512f&#32;&amp;&amp;&#32;__bytes&#32;==&#32;64))
2790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_VecBltnBtmsk&lt;__bytes&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>);
2791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_VecBuiltin&lt;__bytes&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>);
2793 &#32;&#32;}
2794 
2795 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;enable_if_t&lt;__is_vectorizable_v&lt;_Tp&gt;&gt;&gt;
2796 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native&#32;=&#32;remove_pointer_t&lt;decltype(__determine_native_abi&lt;_Tp&gt;())&gt;;
2797 
2798 <emphasis role="comment">//&#32;}}}</emphasis>
2799 <emphasis role="comment">//&#32;__default_abi&#32;{{{</emphasis>
2800 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_SIMD_DEFAULT_ABI</emphasis>
2801 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2802 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__default_abi&#32;=&#32;_GLIBCXX_SIMD_DEFAULT_ABI&lt;_Tp&gt;;
2803 <emphasis role="preprocessor">#else</emphasis>
2804 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2805 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__default_abi&#32;=&#32;compatible&lt;_Tp&gt;;
2806 <emphasis role="preprocessor">#endif</emphasis>
2807 
2808 <emphasis role="comment">//&#32;}}}</emphasis>
2809 }&#32;<emphasis role="comment">//&#32;namespace&#32;simd_abi</emphasis>
2810 
2811 <emphasis role="comment">//&#32;traits&#32;{{{1</emphasis>
2812 <emphasis role="comment">//&#32;is_abi_tag&#32;{{{2</emphasis>
2813 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
2814 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_abi_tag&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
2815 
2816 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2817 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_abi_tag&lt;_Tp,&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;_Tp::_IsValidAbiTag&gt;&gt;
2818 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Tp::_IsValidAbiTag&#32;{};
2819 
2820 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2821 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_abi_tag_v&#32;=&#32;is_abi_tag&lt;_Tp&gt;::value;
2822 
2823 <emphasis role="comment">//&#32;is_simd(_mask)&#32;{{{2</emphasis>
2824 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2825 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_simd&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
2826 
2827 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2828 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_simd_v&#32;=&#32;is_simd&lt;_Tp&gt;::value;
2829 
2830 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2831 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_simd_mask&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{};
2832 
2833 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2834 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_simd_mask_v&#32;=&#32;is_simd_mask&lt;_Tp&gt;::value;
2835 
2836 <emphasis role="comment">//&#32;simd_size&#32;{{{2</emphasis>
2837 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
2838 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__simd_size_impl&#32;{};
2839 
2840 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
2841 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__simd_size_impl&lt;
2842 &#32;&#32;&#32;&#32;_Tp,&#32;_Abi,
2843 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;conjunction_v&lt;__is_vectorizable&lt;_Tp&gt;,&#32;is_abi_tag&lt;_Abi&gt;&gt;&gt;&gt;
2844 &#32;&#32;&#32;&#32;:&#32;_SizeConstant&lt;_Abi::template&#32;_S_size&lt;_Tp&gt;&gt;&#32;{};
2845 
2846 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&#32;=&#32;simd_abi::__default_abi&lt;_Tp&gt;&gt;
2847 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>simd_size&#32;:&#32;__simd_size_impl&lt;_Tp,&#32;_Abi&gt;&#32;{};
2848 
2849 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&#32;=&#32;simd_abi::__default_abi&lt;_Tp&gt;&gt;
2850 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;simd_size_v&#32;=&#32;simd_size&lt;_Tp,&#32;_Abi&gt;::value;
2851 
2852 <emphasis role="comment">//&#32;simd_abi::deduce&#32;{{{2</emphasis>
2853 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
2854 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__deduce_impl;
2855 
2856 <emphasis role="keyword">namespace&#32;</emphasis>simd_abi&#32;{
2865 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>...&gt;
2866 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>deduce&#32;:&#32;__deduce_impl&lt;_Tp,&#32;_Np&gt;&#32;{};
2867 
2868 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
2869 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>deduce_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;deduce&lt;_Tp,&#32;_Np,&#32;_Abis...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
2870 }&#32;<emphasis role="comment">//&#32;namespace&#32;simd_abi</emphasis>
2871 
2872 <emphasis role="comment">//&#32;}}}2</emphasis>
2873 <emphasis role="comment">//&#32;rebind_simd&#32;{{{2</emphasis>
2874 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
2875 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind_simd;
2876 
2877 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
2878 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind_simd&lt;
2879 &#32;&#32;&#32;&#32;_Tp,&#32;simd&lt;_Up,&#32;_Abi&gt;,
2880 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;simd_abi::deduce_t&lt;_Tp,&#32;simd_size_v&lt;_Up,&#32;_Abi&gt;,&#32;_Abi&gt;&gt;&gt;
2881 &#32;&#32;{
2882 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>
2883 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;simd&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;simd_size_v&lt;_Up,&#32;_Abi&gt;,&#32;_Abi&gt;&gt;;
2884 &#32;&#32;};
2885 
2886 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
2887 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind_simd&lt;
2888 &#32;&#32;&#32;&#32;_Tp,&#32;simd_mask&lt;_Up,&#32;_Abi&gt;,
2889 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;simd_abi::deduce_t&lt;_Tp,&#32;simd_size_v&lt;_Up,&#32;_Abi&gt;,&#32;_Abi&gt;&gt;&gt;
2890 &#32;&#32;{
2891 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>
2892 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;simd_mask&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;simd_size_v&lt;_Up,&#32;_Abi&gt;,&#32;_Abi&gt;&gt;;
2893 &#32;&#32;};
2894 
2895 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
2896 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind_simd_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;rebind_simd&lt;_Tp,&#32;_V&gt;::type;
2897 
2898 <emphasis role="comment">//&#32;resize_simd&#32;{{{2</emphasis>
2899 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
2900 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>resize_simd;
2901 
2902 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
2903 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>resize_simd&lt;_Np,&#32;simd&lt;_Tp,&#32;_Abi&gt;,
2904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;simd_abi::deduce_t&lt;_Tp,&#32;_Np,&#32;_Abi&gt;&gt;&gt;
2905 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Np,&#32;_Abi&gt;&gt;;&#32;};
2906 
2907 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
2908 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>resize_simd&lt;_Np,&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;,
2909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;simd_abi::deduce_t&lt;_Tp,&#32;_Np,&#32;_Abi&gt;&gt;&gt;
2910 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd_mask&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Np,&#32;_Abi&gt;&gt;;&#32;};
2911 
2912 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
2913 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>resize_simd_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;resize_simd&lt;_Np,&#32;_V&gt;::type;
2914 
2915 <emphasis role="comment">//&#32;}}}2</emphasis>
2916 <emphasis role="comment">//&#32;memory_alignment&#32;{{{2</emphasis>
2917 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type&gt;
2918 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>memory_alignment
2919 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_SizeConstant&lt;vector_aligned_tag::_S_alignment&lt;_Tp,&#32;_Up&gt;&gt;&#32;{};
2920 
2921 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type&gt;
2922 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;memory_alignment_v&#32;=&#32;memory_alignment&lt;_Tp,&#32;_Up&gt;::value;
2923 
2924 <emphasis role="comment">//&#32;class&#32;template&#32;simd&#32;[simd]&#32;{{{1</emphasis>
2925 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&#32;=&#32;simd_abi::__default_abi&lt;_Tp&gt;&gt;
2926 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>simd;
2927 
2928 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
2929 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_simd&lt;simd&lt;_Tp,&#32;_Abi&gt;&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
2930 
2931 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2932 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_simd&#32;=&#32;simd&lt;_Tp,&#32;simd_abi::native&lt;_Tp&gt;&gt;;
2933 
2934 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
2935 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>fixed_size_simd&#32;=&#32;simd&lt;_Tp,&#32;simd_abi::fixed_size&lt;_Np&gt;&gt;;
2936 
2937 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2938 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__deduced_simd&#32;=&#32;simd&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Np&gt;&gt;;
2939 
2940 <emphasis role="comment">//&#32;class&#32;template&#32;simd_mask&#32;[simd_mask]&#32;{{{1</emphasis>
2941 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&#32;=&#32;simd_abi::__default_abi&lt;_Tp&gt;&gt;
2942 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>simd_mask;
2943 
2944 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
2945 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_simd_mask&lt;simd_mask&lt;_Tp,&#32;_Abi&gt;&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{};
2946 
2947 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2948 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_simd_mask&#32;=&#32;simd_mask&lt;_Tp,&#32;simd_abi::native&lt;_Tp&gt;&gt;;
2949 
2950 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
2951 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>fixed_size_simd_mask&#32;=&#32;simd_mask&lt;_Tp,&#32;simd_abi::fixed_size&lt;_Np&gt;&gt;;
2952 
2953 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
2954 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__deduced_simd_mask&#32;=&#32;simd_mask&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Np&gt;&gt;;
2955 
2956 <emphasis role="comment">//&#32;casts&#32;[simd.casts]&#32;{{{1</emphasis>
2957 <emphasis role="comment">//&#32;static_simd_cast&#32;{{{2</emphasis>
2958 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_simd_v&lt;_Tp&gt;,
2959 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
2960 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_simd_cast_return_type;
2961 
2962 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
2963 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_simd_cast_return_type&lt;simd_mask&lt;_Tp,&#32;_A0&gt;,&#32;_Up,&#32;_Ap,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,
2964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
2965 &#32;&#32;:&#32;__static_simd_cast_return_type&lt;simd&lt;_Tp,&#32;_A0&gt;,&#32;_Up,&#32;_Ap&gt;&#32;{};
2966 
2967 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
2968 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_simd_cast_return_type&lt;
2969 &#32;&#32;&#32;&#32;_Tp,&#32;_Up,&#32;_Ap,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;_Tp::<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;==&#32;simd_size_v&lt;_Up,&#32;_Ap&gt;&gt;&gt;
2970 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Tp;&#32;};
2971 
2972 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
2973 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_simd_cast_return_type&lt;_Tp,&#32;_Tp,&#32;_Ap,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,
2974 #ifdef&#32;_GLIBCXX_SIMD_FIX_P2TS_ISSUE66
2975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vectorizable_v&lt;_Tp&gt;&gt;
2976 #else
2977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>
2978 #endif
2979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
2980 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd&lt;_Tp,&#32;_Ap&gt;;&#32;};
2981 
2982 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
2983 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__safe_make_signed&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Tp;};
2984 
2985 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2986 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__safe_make_signed&lt;_Tp,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;is_integral_v&lt;_Tp&gt;&gt;&gt;
2987 &#32;&#32;{
2988 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;extra&#32;make_unsigned_t&#32;is&#32;because&#32;of&#32;PR85951</emphasis>
2989 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;make_signed_t&lt;make_unsigned_t&lt;_Tp&gt;&gt;;
2990 &#32;&#32;};
2991 
2992 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2993 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>safe_make_signed_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__safe_make_signed&lt;_Tp&gt;::type;
2994 
2995 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
2996 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__static_simd_cast_return_type&lt;_Tp,&#32;_Up,&#32;_Ap,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,
2997 #ifdef&#32;_GLIBCXX_SIMD_FIX_P2TS_ISSUE66
2998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;__is_vectorizable_v&lt;_Tp&gt;&gt;
2999 #else
3000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>
3001 #endif
3002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;
3003 &#32;&#32;{
3004 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;conditional_t&lt;
3005 &#32;&#32;&#32;&#32;&#32;&#32;(is_integral_v&lt;_Up&gt;&#32;&amp;&amp;&#32;is_integral_v&lt;_Tp&gt;&#32;&amp;&amp;
3006 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_SIMD_FIX_P2TS_ISSUE65</emphasis>
3007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;is_signed_v&lt;_Up&gt;&#32;!=&#32;is_signed_v&lt;_Tp&gt;&#32;&amp;&amp;
3008 <emphasis role="preprocessor">#endif</emphasis>
3009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same_v&lt;safe_make_signed_t&lt;_Up&gt;,&#32;safe_make_signed_t&lt;_Tp&gt;&gt;),
3010 &#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Ap&gt;,&#32;fixed_size_simd&lt;_Tp,&#32;simd_size_v&lt;_Up,&#32;_Ap&gt;&gt;&gt;;
3011 &#32;&#32;};
3012 
3013 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,
3014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R
3015 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__static_simd_cast_return_type&lt;_Tp,&#32;_Up,&#32;_Ap&gt;::type&gt;
3016 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;_R
3017 &#32;&#32;static_simd_cast(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Up,&#32;_Ap&gt;&amp;&#32;__x)
3018 &#32;&#32;{
3019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same&lt;_R,&#32;simd&lt;_Up,&#32;_Ap&gt;&gt;<link linkend="_classvalue">::value</link>)
3020 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
3021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3022 &#32;&#32;&#32;&#32;&#32;&#32;{
3023 &#32;&#32;&#32;&#32;_SimdConverter&lt;_Up,&#32;_Ap,&#32;typename&#32;_R::value_type,&#32;typename&#32;_R::abi_type&gt;
3024 &#32;&#32;&#32;&#32;&#32;&#32;__c;
3025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R(__private_init,&#32;__c(__data(__x)));
3026 &#32;&#32;&#32;&#32;&#32;&#32;}
3027 &#32;&#32;}
3028 
3029 <emphasis role="keyword">namespace&#32;</emphasis>__proposed&#32;{
3030 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,
3031 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R
3032 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__static_simd_cast_return_type&lt;_Tp,&#32;_Up,&#32;_Ap&gt;::type&gt;
3033 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">typename</emphasis>&#32;_R::mask_type
3034 &#32;&#32;static_simd_cast(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;_Ap&gt;&amp;&#32;__x)
3035 &#32;&#32;{
3036 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RM&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_R::mask_type;
3037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_RM::abi_type::_MaskImpl::template&#32;_S_convert&lt;
3038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RM::simd_type::value_type&gt;(__x)};
3039 &#32;&#32;}
3040 
3041 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
3042 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
3043 &#32;&#32;_To
3044 &#32;&#32;simd_bit_cast(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Up,&#32;_Abi&gt;&amp;&#32;__x)
3045 &#32;&#32;{
3046 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_To::value_type;
3047 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ToMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;typename&#32;_To::abi_type&gt;::_SimdMember;
3048 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_From&#32;=&#32;simd&lt;_Up,&#32;_Abi&gt;;
3049 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FromMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Up,&#32;_Abi&gt;::_SimdMember;
3050 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;concepts,&#32;the&#32;following&#32;should&#32;be&#32;constraints</emphasis>
3051 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_From));
3052 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_trivially_copyable_v&lt;_Tp&gt;&#32;&amp;&amp;&#32;is_trivially_copyable_v&lt;_Up&gt;);
3053 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_trivially_copyable_v&lt;_ToMember&gt;&#32;&amp;&amp;&#32;is_trivially_copyable_v&lt;_FromMember&gt;);
3054 <emphasis role="preprocessor">#if&#32;__has_builtin(__builtin_bit_cast)</emphasis>
3055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__builtin_bit_cast(_ToMember,&#32;__data(__x))};
3056 <emphasis role="preprocessor">#else</emphasis>
3057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__bit_cast&lt;_ToMember&gt;(__data(__x))};
3058 <emphasis role="preprocessor">#endif</emphasis>
3059 &#32;&#32;}
3060 
3061 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_To,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
3062 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
3063 &#32;&#32;_To
3064 &#32;&#32;simd_bit_cast(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;_Abi&gt;&amp;&#32;__x)
3065 &#32;&#32;{
3066 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_From&#32;=&#32;simd_mask&lt;_Up,&#32;_Abi&gt;;
3067 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_To)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_From));
3068 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_trivially_copyable_v&lt;_From&gt;);
3069 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_To&#32;can&#32;be&#32;simd&lt;T,&#32;A&gt;,&#32;specifically&#32;simd&lt;T,&#32;fixed_size&lt;N&gt;&gt;&#32;in&#32;which&#32;case&#32;_To&#32;is&#32;not&#32;trivially</emphasis>
3070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;copyable.</emphasis>
3071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_simd_v&lt;_To&gt;)
3072 &#32;&#32;&#32;&#32;&#32;&#32;{
3073 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_To::value_type;
3074 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ToMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;typename&#32;_To::abi_type&gt;::_SimdMember;
3075 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_trivially_copyable_v&lt;_ToMember&gt;);
3076 <emphasis role="preprocessor">#if&#32;__has_builtin(__builtin_bit_cast)</emphasis>
3077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__builtin_bit_cast(_ToMember,&#32;__x)};
3078 <emphasis role="preprocessor">#else</emphasis>
3079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__bit_cast&lt;_ToMember&gt;(__x)};
3080 <emphasis role="preprocessor">#endif</emphasis>
3081 &#32;&#32;&#32;&#32;&#32;&#32;}
3082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3083 &#32;&#32;&#32;&#32;&#32;&#32;{
3084 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_trivially_copyable_v&lt;_To&gt;);
3085 <emphasis role="preprocessor">#if&#32;__has_builtin(__builtin_bit_cast)</emphasis>
3086 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_bit_cast(_To,&#32;__x);
3087 <emphasis role="preprocessor">#else</emphasis>
3088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit_cast&lt;_To&gt;(__x);
3089 <emphasis role="preprocessor">#endif</emphasis>
3090 &#32;&#32;&#32;&#32;&#32;&#32;}
3091 &#32;&#32;}
3092 }&#32;<emphasis role="comment">//&#32;namespace&#32;__proposed</emphasis>
3093 
3094 <emphasis role="comment">//&#32;simd_cast&#32;{{{2</emphasis>
3095 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,
3096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&#32;=&#32;__value_type_or_identity_t&lt;_Tp&gt;&gt;
3097 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>
3098 &#32;&#32;simd_cast(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_ValuePreserving&lt;_Up,&#32;_To&gt;,&#32;_Ap&gt;&amp;&#32;__x)
3099 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(static_simd_cast&lt;_Tp&gt;(__x))
3100 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;static_simd_cast&lt;_Tp&gt;(__x);&#32;}
3101 
3102 <emphasis role="keyword">namespace&#32;</emphasis>__proposed&#32;{
3103 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,
3104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_To&#32;=&#32;__value_type_or_identity_t&lt;_Tp&gt;&gt;
3105 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">auto</emphasis>
3106 &#32;&#32;simd_cast(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_ValuePreserving&lt;_Up,&#32;_To&gt;,&#32;_Ap&gt;&amp;&#32;__x)
3107 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(static_simd_cast&lt;_Tp&gt;(__x))
3108 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;static_simd_cast&lt;_Tp&gt;(__x);&#32;}
3109 }&#32;<emphasis role="comment">//&#32;namespace&#32;__proposed</emphasis>
3110 
3111 <emphasis role="comment">//&#32;}}}2</emphasis>
3112 <emphasis role="comment">//&#32;resizing_simd_cast&#32;{{{</emphasis>
3113 <emphasis role="keyword">namespace&#32;</emphasis>__proposed&#32;{
3114 <emphasis role="comment">/*&#32;Proposed&#32;spec:</emphasis>
3115 <emphasis role="comment"></emphasis>
3116 <emphasis role="comment">template&#32;&lt;class&#32;T,&#32;class&#32;U,&#32;class&#32;Abi&gt;</emphasis>
3117 <emphasis role="comment">T&#32;resizing_simd_cast(const&#32;simd&lt;U,&#32;Abi&gt;&amp;&#32;x)</emphasis>
3118 <emphasis role="comment"></emphasis>
3119 <emphasis role="comment">p1&#32;&#32;Constraints:</emphasis>
3120 <emphasis role="comment">&#32;&#32;&#32;&#32;-&#32;is_simd_v&lt;T&gt;&#32;is&#32;true&#32;and</emphasis>
3121 <emphasis role="comment">&#32;&#32;&#32;&#32;-&#32;T::value_type&#32;is&#32;the&#32;same&#32;type&#32;as&#32;U</emphasis>
3122 <emphasis role="comment"></emphasis>
3123 <emphasis role="comment">p2&#32;&#32;Returns:</emphasis>
3124 <emphasis role="comment">&#32;&#32;&#32;&#32;A&#32;simd&#32;object&#32;with&#32;the&#32;i^th&#32;element&#32;initialized&#32;to&#32;x[i]&#32;for&#32;all&#32;i&#32;in&#32;the</emphasis>
3125 <emphasis role="comment">&#32;&#32;&#32;&#32;range&#32;of&#32;[0,&#32;min(T::size(),&#32;simd_size_v&lt;U,&#32;Abi&gt;)).&#32;If&#32;T::size()&#32;is&#32;larger</emphasis>
3126 <emphasis role="comment">&#32;&#32;&#32;&#32;than&#32;simd_size_v&lt;U,&#32;Abi&gt;,&#32;the&#32;remaining&#32;elements&#32;are&#32;value-initialized.</emphasis>
3127 <emphasis role="comment"></emphasis>
3128 <emphasis role="comment">template&#32;&lt;class&#32;T,&#32;class&#32;U,&#32;class&#32;Abi&gt;</emphasis>
3129 <emphasis role="comment">T&#32;resizing_simd_cast(const&#32;simd_mask&lt;U,&#32;Abi&gt;&amp;&#32;x)</emphasis>
3130 <emphasis role="comment"></emphasis>
3131 <emphasis role="comment">p1&#32;&#32;Constraints:&#32;is_simd_mask_v&lt;T&gt;&#32;is&#32;true</emphasis>
3132 <emphasis role="comment"></emphasis>
3133 <emphasis role="comment">p2&#32;&#32;Returns:</emphasis>
3134 <emphasis role="comment">&#32;&#32;&#32;&#32;A&#32;simd_mask&#32;object&#32;with&#32;the&#32;i^th&#32;element&#32;initialized&#32;to&#32;x[i]&#32;for&#32;all&#32;i&#32;in</emphasis>
3135 <emphasis role="comment">the&#32;range&#32;of&#32;[0,&#32;min(T::size(),&#32;simd_size_v&lt;U,&#32;Abi&gt;)).&#32;If&#32;T::size()&#32;is&#32;larger</emphasis>
3136 <emphasis role="comment">&#32;&#32;&#32;&#32;than&#32;simd_size_v&lt;U,&#32;Abi&gt;,&#32;the&#32;remaining&#32;elements&#32;are&#32;initialized&#32;to&#32;false.</emphasis>
3137 <emphasis role="comment"></emphasis>
3138 <emphasis role="comment">&#32;*/</emphasis>
3139 
3140 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3141 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
3142 &#32;&#32;conjunction_v&lt;is_simd&lt;_Tp&gt;,&#32;is_same&lt;typename&#32;_Tp::value_type,&#32;_Up&gt;&gt;,&#32;_Tp&gt;
3143 &#32;&#32;resizing_simd_cast(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Up,&#32;_Ap&gt;&amp;&#32;__x)
3144 &#32;&#32;{
3145 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;typename&#32;_Tp::abi_type,&#32;_Ap&gt;)
3146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
3147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(simd_size_v&lt;_Up,&#32;_Ap&gt;&#32;==&#32;1)
3148 &#32;&#32;&#32;&#32;&#32;&#32;{
3149 &#32;&#32;&#32;&#32;_Tp&#32;__r{};
3150 &#32;&#32;&#32;&#32;__r[0]&#32;=&#32;__x[0];
3151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3152 &#32;&#32;&#32;&#32;&#32;&#32;}
3153 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Tp::size()&#32;==&#32;1)
3154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[0];
3155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(__x)
3156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__is_fixed_size_abi_v&lt;_Ap&gt;)
3157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
3158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__vector_bitcast&lt;typename&#32;_Tp::value_type,&#32;_Tp::size()&gt;(
3159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ap::_S_masked(__data(__x))._M_data)};
3160 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3161 &#32;&#32;&#32;&#32;&#32;&#32;{
3162 &#32;&#32;&#32;&#32;_Tp&#32;__r{};
3163 &#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__data(__r),&#32;&amp;__data(__x),
3164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)
3165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;std::min(_Tp::size(),&#32;simd_size_v&lt;_Up,&#32;_Ap&gt;));
3166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3167 &#32;&#32;&#32;&#32;&#32;&#32;}
3168 &#32;&#32;}
3169 
3170 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3171 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
3172 &#32;&#32;enable_if_t&lt;is_simd_mask_v&lt;_Tp&gt;,&#32;_Tp&gt;
3173 &#32;&#32;resizing_simd_cast(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;_Ap&gt;&amp;&#32;__x)
3174 &#32;&#32;{
3175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Tp::abi_type::_MaskImpl::template&#32;_S_convert&lt;
3176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::simd_type::value_type&gt;(__x)};
3177 &#32;&#32;}
3178 }&#32;<emphasis role="comment">//&#32;namespace&#32;__proposed</emphasis>
3179 
3180 <emphasis role="comment">//&#32;}}}</emphasis>
3181 <emphasis role="comment">//&#32;to_fixed_size&#32;{{{2</emphasis>
3182 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
3183 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;fixed_size_simd&lt;_Tp,&#32;_Np&gt;
3184 &#32;&#32;to_fixed_size(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
3185 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
3186 
3187 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
3188 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;fixed_size_simd_mask&lt;_Tp,&#32;_Np&gt;
3189 &#32;&#32;to_fixed_size(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd_mask&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
3190 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
3191 
3192 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3193 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
3194 &#32;&#32;to_fixed_size(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
3195 &#32;&#32;{
3196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;simd_abi::fixed_size&lt;simd_size_v&lt;_Tp,&#32;_Ap&gt;&gt;&gt;([&amp;__x](
3197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i];&#32;});
3198 &#32;&#32;}
3199 
3200 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3201 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
3202 &#32;&#32;to_fixed_size(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
3203 &#32;&#32;{
3204 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&#32;=&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;::size();
3205 &#32;&#32;&#32;&#32;fixed_size_simd_mask&lt;_Tp,&#32;_Np&gt;&#32;__r;
3206 &#32;&#32;&#32;&#32;__execute_n_times&lt;_Np&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;__r[__i]&#32;=&#32;__x[__i];&#32;});
3207 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3208 &#32;&#32;}
3209 
3210 <emphasis role="comment">//&#32;to_native&#32;{{{2</emphasis>
3211 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
3212 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
3213 &#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;(_Np&#32;==&#32;native_simd&lt;_Tp&gt;::size()),&#32;native_simd&lt;_Tp&gt;&gt;
3214 &#32;&#32;to_native(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
3215 &#32;&#32;{
3216 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(memory_alignment_v&lt;native_simd&lt;_Tp&gt;&gt;)&#32;_Tp&#32;__mem[_Np];
3217 &#32;&#32;&#32;&#32;__x.copy_to(__mem,&#32;vector_aligned);
3218 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__mem,&#32;vector_aligned};
3219 &#32;&#32;}
3220 
3221 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3222 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
3223 &#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;(_Np&#32;==&#32;native_simd_mask&lt;_Tp&gt;::size()),&#32;native_simd_mask&lt;_Tp&gt;&gt;
3224 &#32;&#32;to_native(<emphasis role="keyword">const</emphasis>&#32;fixed_size_simd_mask&lt;_Tp,&#32;_Np&gt;&amp;&#32;__x)
3225 &#32;&#32;{
3226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;native_simd_mask&lt;_Tp&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i];&#32;});
3227 &#32;&#32;}
3228 
3229 <emphasis role="comment">//&#32;to_compatible&#32;{{{2</emphasis>
3230 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3231 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;(_Np&#32;==&#32;simd&lt;_Tp&gt;::size()),&#32;simd&lt;_Tp&gt;&gt;
3232 &#32;&#32;to_compatible(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;simd_abi::fixed_size&lt;_Np&gt;&gt;&amp;&#32;__x)
3233 &#32;&#32;{
3234 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(memory_alignment_v&lt;simd&lt;_Tp&gt;&gt;)&#32;_Tp&#32;__mem[_Np];
3235 &#32;&#32;&#32;&#32;__x.copy_to(__mem,&#32;vector_aligned);
3236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__mem,&#32;vector_aligned};
3237 &#32;&#32;}
3238 
3239 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3240 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
3241 &#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;(_Np&#32;==&#32;simd_mask&lt;_Tp&gt;::size()),&#32;simd_mask&lt;_Tp&gt;&gt;
3242 &#32;&#32;to_compatible(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;simd_abi::fixed_size&lt;_Np&gt;&gt;&amp;&#32;__x)
3243 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd_mask&lt;_Tp&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i];&#32;});&#32;}
3244 
3245 <emphasis role="comment">//&#32;masked&#32;assignment&#32;[simd_mask.where]&#32;{{{1</emphasis>
3246 
3247 <emphasis role="comment">//&#32;where_expression&#32;{{{1</emphasis>
3248 <emphasis role="comment">//&#32;const_where_expression&lt;M,&#32;T&gt;&#32;{{{2</emphasis>
3249 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3250 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>const_where_expression
3251 &#32;&#32;{
3252 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;_Tp;
3253 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_V,&#32;__remove_cvref_t&lt;_Tp&gt;&gt;);
3254 
3255 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Wrapper&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_V;&#32;};
3256 
3257 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
3258 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Impl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::_Impl;
3259 
3260 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=
3261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;conditional_t&lt;is_arithmetic_v&lt;_V&gt;,&#32;_Wrapper,&#32;_V&gt;::value_type;
3262 
3263 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_M&amp;
3264 &#32;&#32;&#32;&#32;__get_mask(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;&#32;__x)
3265 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_k;&#32;}
3266 
3267 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
3268 &#32;&#32;&#32;&#32;__get_lvalue(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;&#32;__x)
3269 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_value;&#32;}
3270 
3271 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_M&amp;&#32;_M_k;
3272 &#32;&#32;&#32;&#32;_Tp&amp;&#32;_M_value;
3273 
3274 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3275 &#32;&#32;&#32;&#32;const_where_expression(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3276 &#32;&#32;&#32;&#32;const_where_expression&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3277 
3278 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;const_where_expression(<emphasis role="keyword">const</emphasis>&#32;_M&amp;&#32;__kk,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;dd)
3279 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_k(__kk),&#32;_M_value(const_cast&lt;_Tp&amp;&gt;(dd))&#32;{}
3280 
3281 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_V
3282 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>()&#32;const&amp;&amp;
3283 &#32;&#32;&#32;&#32;{
3284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
3285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Impl::template&#32;_S_masked_unary&lt;negate&gt;(__data(_M_k),
3286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value))};
3287 &#32;&#32;&#32;&#32;}
3288 
3289 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
3290 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_V
3291 &#32;&#32;&#32;&#32;&#32;&#32;copy_from(<emphasis role="keyword">const</emphasis>&#32;_LoadStorePtr&lt;_Up,&#32;value_type&gt;*&#32;__mem,&#32;_Flags)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;
3292 &#32;&#32;&#32;&#32;&#32;&#32;{
3293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
3294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_masked_load(__data(_M_value),&#32;__data(_M_k),
3295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Flags::template&#32;_S_apply&lt;_V&gt;(__mem))};
3296 &#32;&#32;&#32;&#32;&#32;&#32;}
3297 
3298 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
3299 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>
3300 &#32;&#32;&#32;&#32;&#32;&#32;copy_to(_LoadStorePtr&lt;_Up,&#32;value_type&gt;*&#32;__mem,&#32;_Flags)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;
3301 &#32;&#32;&#32;&#32;&#32;&#32;{
3302 &#32;&#32;&#32;&#32;_Impl::_S_masked_store(__data(_M_value),
3303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Flags::template&#32;_S_apply&lt;_V&gt;(__mem),
3304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(_M_k));
3305 &#32;&#32;&#32;&#32;&#32;&#32;}
3306 &#32;&#32;};
3307 
3308 <emphasis role="comment">//&#32;const_where_expression&lt;bool,&#32;T&gt;&#32;{{{2</emphasis>
3309 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3310 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>const_where_expression&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;_Tp&gt;
3311 &#32;&#32;{
3312 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_M&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>;
3313 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;_Tp;
3314 
3315 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_V,&#32;__remove_cvref_t&lt;_Tp&gt;&gt;);
3316 
3317 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Wrapper&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_V;&#32;};
3318 
3319 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
3320 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=
3321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;conditional_t&lt;is_arithmetic_v&lt;_V&gt;,&#32;_Wrapper,&#32;_V&gt;::value_type;
3322 
3323 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_M&amp;
3324 &#32;&#32;&#32;&#32;__get_mask(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;&#32;__x)
3325 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_k;&#32;}
3326 
3327 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;
3328 &#32;&#32;&#32;&#32;__get_lvalue(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;&#32;__x)
3329 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_value;&#32;}
3330 
3331 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_k;
3332 &#32;&#32;&#32;&#32;_Tp&amp;&#32;_M_value;
3333 
3334 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3335 &#32;&#32;&#32;&#32;const_where_expression(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3336 &#32;&#32;&#32;&#32;const_where_expression&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3337 
3338 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;const_where_expression(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__kk,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;dd)
3339 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_k(__kk),&#32;_M_value(const_cast&lt;_Tp&amp;&gt;(dd))&#32;{}
3340 
3341 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_V&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>()&#32;const&amp;&amp;
3342 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_k&#32;?&#32;-_M_value&#32;:&#32;_M_value;&#32;}
3343 
3344 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
3345 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_V
3346 &#32;&#32;&#32;&#32;&#32;&#32;copy_from(<emphasis role="keyword">const</emphasis>&#32;_LoadStorePtr&lt;_Up,&#32;value_type&gt;*&#32;__mem,&#32;_Flags)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;
3347 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_k&#32;?&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_V<emphasis role="keyword">&gt;</emphasis>(__mem[0])&#32;:&#32;_M_value;&#32;}
3348 
3349 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
3350 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>
3351 &#32;&#32;&#32;&#32;&#32;&#32;copy_to(_LoadStorePtr&lt;_Up,&#32;value_type&gt;*&#32;__mem,&#32;_Flags)&#32;<emphasis role="keyword">const</emphasis>&amp;&amp;
3352 &#32;&#32;&#32;&#32;&#32;&#32;{
3353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_k)
3354 &#32;&#32;&#32;&#32;&#32;&#32;__mem[0]&#32;=&#32;_M_value;
3355 &#32;&#32;&#32;&#32;&#32;&#32;}
3356 &#32;&#32;};
3357 
3358 <emphasis role="comment">//&#32;where_expression&lt;M,&#32;T&gt;&#32;{{{2</emphasis>
3359 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3360 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>where_expression&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;const_where_expression&lt;_M,&#32;_Tp&gt;
3361 &#32;&#32;{
3362 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Impl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;const_where_expression&lt;_M,&#32;_Tp&gt;::_Impl;
3363 
3364 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_const&lt;_Tp&gt;::value,
3365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;where_expression&#32;may&#32;only&#32;be&#32;instantiated&#32;with&#32;__a&#32;non-const&#32;&quot;</emphasis>
3366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;_Tp&#32;parameter&quot;</emphasis>);
3367 
3368 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>typename&#32;const_where_expression&lt;_M,&#32;_Tp&gt;::value_type;
3369 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_where_expression&lt;_M,&#32;_Tp&gt;::_M_k;
3370 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_where_expression&lt;_M,&#32;_Tp&gt;::_M_value;
3371 
3372 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
3373 &#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;typename&#32;_M::abi_type,&#32;typename&#32;_Tp::abi_type&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
3374 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_M::size()&#32;==&#32;_Tp::size(),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
3375 
3376 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;_Tp&amp;&#32;__get_lvalue(where_expression&amp;&#32;__x)
3377 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_value;&#32;}
3378 
3379 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3380 &#32;&#32;&#32;&#32;where_expression(<emphasis role="keyword">const</emphasis>&#32;where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3381 &#32;&#32;&#32;&#32;where_expression&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3382 
3383 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;where_expression(<emphasis role="keyword">const</emphasis>&#32;_M&amp;&#32;__kk,&#32;_Tp&amp;&#32;dd)
3384 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;const_where_expression&lt;_M,&#32;_Tp&gt;(__kk,&#32;dd)&#32;{}
3385 
3386 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
3387 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator=(_Up&amp;&amp;&#32;__x)&#32;&amp;&amp;
3388 &#32;&#32;&#32;&#32;&#32;&#32;{
3389 &#32;&#32;&#32;&#32;_Impl::_S_masked_assign(__data(_M_k),&#32;__data(_M_value),
3390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_value_type_or_member_type&lt;_Tp&gt;(
3391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x)));
3392 &#32;&#32;&#32;&#32;&#32;&#32;}
3393 
3394 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_OP_(__op,&#32;__name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3395 <emphasis role="preprocessor">&#32;&#32;template&#32;&lt;typename&#32;_Up&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3396 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;void&#32;operator&#32;__op##=(_Up&amp;&amp;&#32;__x)&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3397 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3398 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_Impl::template&#32;_S_masked_cassign(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3399 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__data(_M_k),&#32;__data(_M_value),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3400 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__to_value_type_or_member_type&lt;_Tp&gt;(static_cast&lt;_Up&amp;&amp;&gt;(__x)),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3401 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;[](auto&#32;__impl,&#32;auto&#32;__lhs,&#32;auto&#32;__rhs)&#32;constexpr&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3402 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;__impl.__name(__lhs,&#32;__rhs);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3403 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3404 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3405 <emphasis role="preprocessor">&#32;&#32;static_assert(true)</emphasis>
3406 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(+,&#32;_S_plus);
3407 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(-,&#32;_S_minus);
3408 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(*,&#32;_S_multiplies);
3409 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(/,&#32;_S_divides);
3410 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(%,&#32;_S_modulus);
3411 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(&amp;,&#32;_S_bit_and);
3412 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(|,&#32;_S_bit_or);
3413 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(^,&#32;_S_bit_xor);
3414 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(&lt;&lt;,&#32;_S_shift_left);
3415 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(&gt;&gt;,&#32;_S_shift_right);
3416 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_OP_</emphasis>
3417 
3418 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator++()&#32;&amp;&amp;
3419 &#32;&#32;&#32;&#32;{
3420 &#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value)
3421 &#32;&#32;&#32;&#32;=&#32;_Impl::template&#32;_S_masked_unary&lt;__increment&gt;(__data(_M_k),
3422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value));
3423 &#32;&#32;&#32;&#32;}
3424 
3425 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;&amp;&amp;
3426 &#32;&#32;&#32;&#32;{
3427 &#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value)
3428 &#32;&#32;&#32;&#32;=&#32;_Impl::template&#32;_S_masked_unary&lt;__increment&gt;(__data(_M_k),
3429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value));
3430 &#32;&#32;&#32;&#32;}
3431 
3432 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator--()&#32;&amp;&amp;
3433 &#32;&#32;&#32;&#32;{
3434 &#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value)
3435 &#32;&#32;&#32;&#32;=&#32;_Impl::template&#32;_S_masked_unary&lt;__decrement&gt;(__data(_M_k),
3436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value));
3437 &#32;&#32;&#32;&#32;}
3438 
3439 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;&amp;&amp;
3440 &#32;&#32;&#32;&#32;{
3441 &#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value)
3442 &#32;&#32;&#32;&#32;=&#32;_Impl::template&#32;_S_masked_unary&lt;__decrement&gt;(__data(_M_k),
3443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(_M_value));
3444 &#32;&#32;&#32;&#32;}
3445 
3446 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;intentionally&#32;hides&#32;const_where_expression::copy_from</emphasis>
3447 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
3448 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>
3449 &#32;&#32;&#32;&#32;&#32;&#32;copy_from(<emphasis role="keyword">const</emphasis>&#32;_LoadStorePtr&lt;_Up,&#32;value_type&gt;*&#32;__mem,&#32;_Flags)&#32;&amp;&amp;
3450 &#32;&#32;&#32;&#32;&#32;&#32;{
3451 &#32;&#32;&#32;&#32;__data(_M_value)
3452 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Impl::_S_masked_load(__data(_M_value),&#32;__data(_M_k),
3453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Flags::template&#32;_S_apply&lt;_Tp&gt;(__mem));
3454 &#32;&#32;&#32;&#32;&#32;&#32;}
3455 &#32;&#32;};
3456 
3457 <emphasis role="comment">//&#32;where_expression&lt;bool,&#32;T&gt;&#32;{{{2</emphasis>
3458 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3459 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>where_expression&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>,&#32;_Tp&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;const_where_expression&lt;bool,&#32;_Tp&gt;
3460 &#32;&#32;{
3461 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_M&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>;
3462 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>typename&#32;const_where_expression&lt;_M,&#32;_Tp&gt;::value_type;
3463 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_where_expression&lt;_M,&#32;_Tp&gt;::_M_k;
3464 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>const_where_expression&lt;_M,&#32;_Tp&gt;::_M_value;
3465 
3466 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3467 &#32;&#32;&#32;&#32;where_expression(<emphasis role="keyword">const</emphasis>&#32;where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3468 &#32;&#32;&#32;&#32;where_expression&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;where_expression&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3469 
3470 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;where_expression(<emphasis role="keyword">const</emphasis>&#32;_M&amp;&#32;__kk,&#32;_Tp&amp;&#32;dd)
3471 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;const_where_expression&lt;_M,&#32;_Tp&gt;(__kk,&#32;dd)&#32;{}
3472 
3473 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_OP_(__op)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3474 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Up&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3475 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;void&#32;operator&#32;__op(_Up&amp;&amp;&#32;__x)&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
3476 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;if&#32;(_M_k)&#32;_M_value&#32;__op&#32;static_cast&lt;_Up&amp;&amp;&gt;(__x);&#32;}</emphasis>
3477 
3478 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(=)
3479 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(+=)
3480 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(-=)
3481 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(*=)
3482 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(/=)
3483 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(%=)
3484 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(&amp;=)
3485 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(|=)
3486 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(^=)
3487 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(&lt;&lt;=)
3488 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_OP_(&gt;&gt;=)
3489 &#32;&#32;<emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_OP_</emphasis>
3490 
3491 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator++()&#32;&amp;&amp;
3492 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_k)&#32;++_M_value;&#32;}
3493 
3494 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;&amp;&amp;
3495 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_k)&#32;++_M_value;&#32;}
3496 
3497 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator--()&#32;&amp;&amp;
3498 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_k)&#32;--_M_value;&#32;}
3499 
3500 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;&amp;&amp;
3501 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_k)&#32;--_M_value;&#32;}
3502 
3503 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;intentionally&#32;hides&#32;const_where_expression::copy_from</emphasis>
3504 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
3505 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>
3506 &#32;&#32;&#32;&#32;&#32;&#32;copy_from(<emphasis role="keyword">const</emphasis>&#32;_LoadStorePtr&lt;_Up,&#32;value_type&gt;*&#32;__mem,&#32;_Flags)&#32;&amp;&amp;
3507 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_k)&#32;_M_value&#32;=&#32;__mem[0];&#32;}
3508 &#32;&#32;};
3509 
3510 <emphasis role="comment">//&#32;where&#32;{{{1</emphasis>
3511 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3512 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;where_expression&lt;simd_mask&lt;_Tp,&#32;_Ap&gt;,&#32;simd&lt;_Tp,&#32;_Ap&gt;&gt;
3513 &#32;&#32;where(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;::mask_type&amp;&#32;__k,&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__value)
3514 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__k,&#32;__value};&#32;}
3515 
3516 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3517 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
3518 &#32;&#32;&#32;&#32;const_where_expression&lt;simd_mask&lt;_Tp,&#32;_Ap&gt;,&#32;simd&lt;_Tp,&#32;_Ap&gt;&gt;
3519 &#32;&#32;&#32;&#32;where(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;::mask_type&amp;&#32;__k,
3520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__value)
3521 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__k,&#32;__value};&#32;}
3522 
3523 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3524 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
3525 &#32;&#32;&#32;&#32;where_expression&lt;simd_mask&lt;_Tp,&#32;_Ap&gt;,&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&gt;
3526 &#32;&#32;&#32;&#32;where(<emphasis role="keyword">const</emphasis>&#32;remove_const_t&lt;simd_mask&lt;_Tp,&#32;_Ap&gt;&gt;&amp;&#32;__k,
3527 &#32;&#32;&#32;&#32;&#32;&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__value)
3528 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__k,&#32;__value};&#32;}
3529 
3530 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3531 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
3532 &#32;&#32;&#32;&#32;const_where_expression&lt;simd_mask&lt;_Tp,&#32;_Ap&gt;,&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&gt;
3533 &#32;&#32;&#32;&#32;where(<emphasis role="keyword">const</emphasis>&#32;remove_const_t&lt;simd_mask&lt;_Tp,&#32;_Ap&gt;&gt;&amp;&#32;__k,
3534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__value)
3535 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__k,&#32;__value};&#32;}
3536 
3537 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3538 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;where_expression&lt;bool,&#32;_Tp&gt;
3539 &#32;&#32;where(_ExactBool&#32;__k,&#32;_Tp&amp;&#32;__value)
3540 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__k,&#32;__value};&#32;}
3541 
3542 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3543 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;const_where_expression&lt;bool,&#32;_Tp&gt;
3544 &#32;&#32;where(_ExactBool&#32;__k,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
3545 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__k,&#32;__value};&#32;}
3546 
3547 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3548 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;where(<emphasis role="keywordtype">bool</emphasis>&#32;__k,&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__value)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3549 
3550 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3551 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;where(<emphasis role="keywordtype">bool</emphasis>&#32;__k,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__value)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
3552 
3553 <emphasis role="comment">//&#32;proposed&#32;mask&#32;iterations&#32;{{{1</emphasis>
3554 <emphasis role="keyword">namespace&#32;</emphasis>__proposed&#32;{
3555 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3556 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>where_range
3557 &#32;&#32;{
3558 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;bitset&lt;_Np&gt;&#32;__bits;
3559 
3560 &#32;&#32;<emphasis role="keyword">public</emphasis>:
3561 &#32;&#32;&#32;&#32;where_range(bitset&lt;_Np&gt;&#32;__b)&#32;:&#32;__bits(__b)&#32;{}
3562 
3563 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>iterator
3564 &#32;&#32;&#32;&#32;{
3565 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__mask;
3566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bit;
3567 
3568 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;__next_bit()
3569 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__bit&#32;=&#32;__builtin_ctzl(__mask);&#32;}
3570 
3571 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>&#32;__reset_lsb()
3572 &#32;&#32;&#32;&#32;&#32;&#32;{
3573 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;01100100&#32;-&#32;1&#32;=&#32;01100011</emphasis>
3574 &#32;&#32;&#32;&#32;__mask&#32;&amp;=&#32;(__mask&#32;-&#32;1);
3575 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__asm__(&quot;btr&#32;%1,%0&quot;&#32;:&#32;&quot;+r&quot;(__mask)&#32;:&#32;&quot;r&quot;(__bit));</emphasis>
3576 &#32;&#32;&#32;&#32;&#32;&#32;}
3577 
3578 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
3579 &#32;&#32;&#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">decltype</emphasis>(__mask)&#32;__m)&#32;:&#32;__mask(__m)&#32;{&#32;__next_bit();&#32;}
3580 &#32;&#32;&#32;&#32;&#32;&#32;iterator(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3581 &#32;&#32;&#32;&#32;&#32;&#32;iterator(iterator&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
3582 
3583 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
3584 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit;&#32;}
3585 
3586 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
3587 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bit;&#32;}
3588 
3589 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;iterator&amp;&#32;operator++()
3590 &#32;&#32;&#32;&#32;&#32;&#32;{
3591 &#32;&#32;&#32;&#32;__reset_lsb();
3592 &#32;&#32;&#32;&#32;__next_bit();
3593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
3594 &#32;&#32;&#32;&#32;&#32;&#32;}
3595 
3596 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;iterator&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
3597 &#32;&#32;&#32;&#32;&#32;&#32;{
3598 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
3599 &#32;&#32;&#32;&#32;__reset_lsb();
3600 &#32;&#32;&#32;&#32;__next_bit();
3601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
3602 &#32;&#32;&#32;&#32;&#32;&#32;}
3603 
3604 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
3605 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mask&#32;==&#32;__rhs.__mask;&#32;}
3606 
3607 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;iterator&amp;&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
3608 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__mask&#32;!=&#32;__rhs.__mask;&#32;}
3609 &#32;&#32;&#32;&#32;};
3610 
3611 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()<emphasis role="keyword">&#32;const</emphasis>
3612 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bits.to_ullong();&#32;}
3613 
3614 &#32;&#32;&#32;&#32;iterator&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()<emphasis role="keyword">&#32;const</emphasis>
3615 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
3616 &#32;&#32;};
3617 
3618 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3619 &#32;&#32;where_range&lt;simd_size_v&lt;_Tp,&#32;_Ap&gt;&gt;
3620 &#32;&#32;where(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__k)
3621 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k.__to_bitset();&#32;}
3622 
3623 }&#32;<emphasis role="comment">//&#32;namespace&#32;__proposed</emphasis>
3624 
3625 <emphasis role="comment">//&#32;}}}1</emphasis>
3626 <emphasis role="comment">//&#32;reductions&#32;[simd.reductions]&#32;{{{1</emphasis>
3627 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&#32;=&#32;plus&lt;&gt;&gt;
3628 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;_Tp
3629 &#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__v,
3630 &#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op&#32;=&#32;_BinaryOperation())
3631 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_SimdImpl::_S_reduce(__v,&#32;__binary_op);&#32;}
3632 
3633 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&#32;=&#32;plus&lt;&gt;&gt;
3634 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3635 &#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x,
3636 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type&#32;__identity_element,
3637 &#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op)
3638 &#32;&#32;{
3639 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>(__get_mask(__x)),&#32;<emphasis role="keyword">false</emphasis>))
3640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__identity_element;
3641 
3642 &#32;&#32;&#32;&#32;_V&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__identity_element;
3643 &#32;&#32;&#32;&#32;_V::_Impl::_S_masked_assign(__data(__get_mask(__x)),&#32;__data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),
3644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(__get_lvalue(__x)));
3645 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__binary_op);
3646 &#32;&#32;}
3647 
3648 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
3649 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3650 &#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x,&#32;plus&lt;&gt;&#32;__binary_op&#32;=&#32;{})
3651 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__x,&#32;0,&#32;__binary_op);&#32;}
3652 
3653 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
3654 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3655 &#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x,&#32;multiplies&lt;&gt;&#32;__binary_op)
3656 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__x,&#32;1,&#32;__binary_op);&#32;}
3657 
3658 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
3659 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3660 &#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x,&#32;bit_and&lt;&gt;&#32;__binary_op)
3661 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__x,&#32;~<emphasis role="keyword">typename</emphasis>&#32;_V::value_type(),&#32;__binary_op);&#32;}
3662 
3663 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
3664 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3665 &#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x,&#32;bit_or&lt;&gt;&#32;__binary_op)
3666 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__x,&#32;0,&#32;__binary_op);&#32;}
3667 
3668 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
3669 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3670 &#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x,&#32;bit_xor&lt;&gt;&#32;__binary_op)
3671 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__x,&#32;0,&#32;__binary_op);&#32;}
3672 
3673 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
3674 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;_Tp
3675 &#32;&#32;hmin(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__v)&#32;<emphasis role="keyword">noexcept</emphasis>
3676 &#32;&#32;{
3677 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_SimdImpl::_S_reduce(__v,&#32;__detail::_Minimum());
3678 &#32;&#32;}
3679 
3680 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
3681 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;_Tp
3682 &#32;&#32;hmax(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__v)&#32;<emphasis role="keyword">noexcept</emphasis>
3683 &#32;&#32;{
3684 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_SimdImpl::_S_reduce(__v,&#32;__detail::_Maximum());
3685 &#32;&#32;}
3686 
3687 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
3688 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
3689 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3690 &#32;&#32;hmin(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
3691 &#32;&#32;{
3692 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type;
3693 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__id_elem&#32;=
3694 <emphasis role="preprocessor">#ifdef&#32;__FINITE_MATH_ONLY__</emphasis>
3695 &#32;&#32;&#32;&#32;&#32;&#32;__finite_max_v&lt;_Tp&gt;;
3696 <emphasis role="preprocessor">#else</emphasis>
3697 &#32;&#32;&#32;&#32;&#32;&#32;__value_or&lt;__infinity,&#32;_Tp&gt;(__finite_max_v&lt;_Tp&gt;);
3698 <emphasis role="preprocessor">#endif</emphasis>
3699 &#32;&#32;&#32;&#32;_V&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__id_elem;
3700 &#32;&#32;&#32;&#32;_V::_Impl::_S_masked_assign(__data(__get_mask(__x)),&#32;__data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),
3701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(__get_lvalue(__x)));
3702 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V::abi_type::_SimdImpl::_S_reduce(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__detail::_Minimum());
3703 &#32;&#32;}
3704 
3705 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_M,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V&gt;
3706 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
3707 &#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type
3708 &#32;&#32;hmax(<emphasis role="keyword">const</emphasis>&#32;const_where_expression&lt;_M,&#32;_V&gt;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
3709 &#32;&#32;{
3710 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type;
3711 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&#32;__id_elem&#32;=
3712 <emphasis role="preprocessor">#ifdef&#32;__FINITE_MATH_ONLY__</emphasis>
3713 &#32;&#32;&#32;&#32;&#32;&#32;__finite_min_v&lt;_Tp&gt;;
3714 <emphasis role="preprocessor">#else</emphasis>
3715 &#32;&#32;&#32;&#32;&#32;&#32;[]&#32;{
3716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__value_exists_v&lt;__infinity,&#32;_Tp&gt;)
3717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-__infinity_v&lt;_Tp&gt;;
3718 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__finite_min_v&lt;_Tp&gt;;
3720 &#32;&#32;&#32;&#32;&#32;&#32;}();
3721 <emphasis role="preprocessor">#endif</emphasis>
3722 &#32;&#32;&#32;&#32;_V&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__id_elem;
3723 &#32;&#32;&#32;&#32;_V::_Impl::_S_masked_assign(__data(__get_mask(__x)),&#32;__data(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>),
3724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(__get_lvalue(__x)));
3725 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V::abi_type::_SimdImpl::_S_reduce(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>,&#32;__detail::_Maximum());
3726 &#32;&#32;}
3727 
3728 <emphasis role="comment">//&#32;}}}1</emphasis>
3729 <emphasis role="comment">//&#32;algorithms&#32;[simd.alg]&#32;{{{</emphasis>
3730 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3731 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&lt;_Tp,&#32;_Ap&gt;
3732 &#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__b)
3733 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Ap::_SimdImpl::_S_min(__data(__a),&#32;__data(__b))};&#32;}
3734 
3735 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3736 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&lt;_Tp,&#32;_Ap&gt;
3737 &#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__b)
3738 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Ap::_SimdImpl::_S_max(__data(__a),&#32;__data(__b))};&#32;}
3739 
3740 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3741 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
3742 &#32;&#32;pair&lt;simd&lt;_Tp,&#32;_Ap&gt;,&#32;simd&lt;_Tp,&#32;_Ap&gt;&gt;
3743 &#32;&#32;minmax(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__b)
3744 &#32;&#32;{
3745 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;pair_of_members
3746 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Ap::_SimdImpl::_S_minmax(__data(__a),&#32;__data(__b));
3747 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{simd&lt;_Tp,&#32;_Ap&gt;(__private_init,&#32;pair_of_members.first),
3748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Ap&gt;(__private_init,&#32;pair_of_members.second)};
3749 &#32;&#32;}
3750 
3751 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
3752 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&lt;_Tp,&#32;_Ap&gt;
3753 &#32;&#32;<link linkend="_namespaceclamp">clamp</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__v,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__lo,
3754 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__hi)
3755 &#32;&#32;{
3756 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Impl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap::_SimdImpl;
3757 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
3758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_min(__data(__hi),
3759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_max(__data(__lo),&#32;__data(__v)))};
3760 &#32;&#32;}
3761 
3762 <emphasis role="comment">//&#32;}}}</emphasis>
3763 
3764 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Sizes,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,
3765 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;((_Sizes&#32;+&#32;...)&#32;==&#32;simd&lt;_Tp,&#32;_Ap&gt;::size())&gt;&gt;
3766 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;tuple&lt;simd&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Sizes&gt;&gt;...&gt;
3767 &#32;&#32;split(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;);
3768 
3769 <emphasis role="comment">//&#32;__extract_part&#32;{{{</emphasis>
3770 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Index,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Total,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Combine&#32;=&#32;1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3771 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a6ab244f7fbacae0281519328af87a699">_GLIBCXX_CONST</link>
3772 &#32;&#32;_SimdWrapper&lt;_Tp,&#32;_Np&#32;/&#32;_Total&#32;*&#32;_Combine&gt;
3773 &#32;&#32;__extract_part(<emphasis role="keyword">const</emphasis>&#32;_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x);
3774 
3775 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;Index,&#32;<emphasis role="keywordtype">int</emphasis>&#32;Parts,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Combine&#32;=&#32;1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,
3776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
3777 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>
3778 &#32;&#32;__extract_part(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;&amp;&#32;__x);
3779 
3780 <emphasis role="comment">//&#32;}}}</emphasis>
3781 <emphasis role="comment">//&#32;_SizeList&#32;{{{</emphasis>
3782 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_V0,&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Values&gt;
3783 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SizeList
3784 &#32;&#32;{
3785 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_I&gt;
3786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_at(_SizeConstant&lt;_I&gt;&#32;=&#32;{})
3787 &#32;&#32;&#32;&#32;&#32;&#32;{
3788 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_I&#32;==&#32;0)
3789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V0;
3790 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SizeList&lt;_Values...&gt;::template&#32;_S_at&lt;_I&#32;-&#32;1&gt;();
3792 &#32;&#32;&#32;&#32;&#32;&#32;}
3793 
3794 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_I&gt;
3795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_S_before(_SizeConstant&lt;_I&gt;&#32;=&#32;{})
3796 &#32;&#32;&#32;&#32;&#32;&#32;{
3797 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_I&#32;==&#32;0)
3798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SizeConstant&lt;0&gt;();
3799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SizeConstant&lt;
3801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V0&#32;+&#32;_SizeList&lt;_Values...&gt;::template&#32;_S_before&lt;_I&#32;-&#32;1&gt;()&gt;();
3802 &#32;&#32;&#32;&#32;&#32;&#32;}
3803 
3804 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_S_pop_front(_SizeConstant&lt;_Np&gt;&#32;=&#32;{})
3806 &#32;&#32;&#32;&#32;&#32;&#32;{
3807 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;0)
3808 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SizeList();
3809 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SizeList&lt;_Values...&gt;::template&#32;_S_pop_front&lt;_Np&#32;-&#32;1&gt;();
3811 &#32;&#32;&#32;&#32;&#32;&#32;}
3812 &#32;&#32;};
3813 
3814 <emphasis role="comment">//&#32;}}}</emphasis>
3815 <emphasis role="comment">//&#32;__extract_center&#32;{{{</emphasis>
3816 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
3817 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SimdWrapper&lt;_Tp,&#32;_Np&#32;/&#32;2&gt;
3818 &#32;&#32;__extract_center(_SimdWrapper&lt;_Tp,&#32;_Np&gt;&#32;__x)
3819 &#32;&#32;{
3820 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;=&#32;4);
3821 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;%&#32;4&#32;==&#32;0);&#32;<emphasis role="comment">//&#32;x0&#32;-&#32;x1&#32;-&#32;x2&#32;-&#32;x3&#32;-&gt;&#32;return&#32;{x1,&#32;x2}</emphasis>
3822 <emphasis role="preprocessor">#if&#32;_GLIBCXX_SIMD_X86INTRIN&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;{{{</emphasis>
3823 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__have_avx512f&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&#32;==&#32;64)
3824 &#32;&#32;&#32;&#32;&#32;&#32;{
3825 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__intrin&#32;=&#32;__to_intrin(__x);
3826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_integral_v&lt;_Tp&gt;)
3827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(_mm512_castsi512_si256(
3828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac37c62d861e2c798dc9a452d5146b891">_mm512_shuffle_i32x4</link>(__intrin,&#32;__intrin,
3829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;+&#32;2&#32;*&#32;0x4&#32;+&#32;2&#32;*&#32;0x10&#32;+&#32;3&#32;*&#32;0x40)));
3830 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;4)
3831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(_mm512_castps512_ps256(
3832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1ac5d2e649beff1a83ab8a388dd3120396">_mm512_shuffle_f32x4</link>(__intrin,&#32;__intrin,
3833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;+&#32;2&#32;*&#32;0x4&#32;+&#32;2&#32;*&#32;0x10&#32;+&#32;3&#32;*&#32;0x40)));
3834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;8)
3835 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(_mm512_castpd512_pd256(
3836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512fintrin_8h_1a3abfb7702d4693ff7ac9e05f944232f8">_mm512_shuffle_f64x2</link>(__intrin,&#32;__intrin,
3837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;+&#32;2&#32;*&#32;0x4&#32;+&#32;2&#32;*&#32;0x10&#32;+&#32;3&#32;*&#32;0x40)));
3838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3839 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
3840 &#32;&#32;&#32;&#32;&#32;&#32;}
3841 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&#32;==&#32;32&#32;&amp;&amp;&#32;is_floating_point_v&lt;_Tp&gt;)
3842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(
3843 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2emmintrin_8h_1a6ff915412034ceceecffff3e177e7f05">_mm_shuffle_pd</link>(__lo128(__vector_bitcast&lt;double&gt;(__x)),
3844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__hi128(__vector_bitcast&lt;double&gt;(__x)),&#32;1));
3845 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(__x)&#32;==&#32;32&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&#32;&lt;=&#32;32)
3846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__vector_bitcast&lt;_Tp&gt;(
3847 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tmmintrin_8h_1a54f1bc2fc74897cb8a1376855c296dbc">_mm_alignr_epi8</link>(__hi128(__vector_bitcast&lt;_LLong&gt;(__x)),
3848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lo128(__vector_bitcast&lt;_LLong&gt;(__x)),
3849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&#32;/&#32;4));
3850 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3851 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_X86INTRIN&#32;}}}</emphasis>
3852 &#32;&#32;&#32;&#32;&#32;&#32;{
3853 &#32;&#32;&#32;&#32;__vector_type_t&lt;_Tp,&#32;_Np&#32;/&#32;2&gt;&#32;__r;
3854 &#32;&#32;&#32;&#32;__builtin_memcpy(&amp;__r,
3855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__x)
3856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&#32;/&#32;4,
3857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&#32;/&#32;2);
3858 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3859 &#32;&#32;&#32;&#32;&#32;&#32;}
3860 &#32;&#32;}
3861 
3862 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
3863 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
3864 &#32;&#32;_SimdWrapper&lt;_Tp,&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;::_S_size()&#32;/&#32;2&gt;
3865 &#32;&#32;__extract_center(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;&amp;&#32;__x)
3866 &#32;&#32;{
3867 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(_As)&#32;==&#32;0)
3868 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract_center(__x.first);
3869 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3870 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract_part&lt;1,&#32;4,&#32;2&gt;(__x);
3871 &#32;&#32;}
3872 
3873 <emphasis role="comment">//&#32;}}}</emphasis>
3874 <emphasis role="comment">//&#32;__split_wrapper&#32;{{{</emphasis>
3875 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Sizes,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
3876 &#32;&#32;<emphasis role="keyword">auto</emphasis>
3877 &#32;&#32;__split_wrapper(_SizeList&lt;_Sizes...&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x)
3878 &#32;&#32;{
3879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;split&lt;_Sizes...&gt;(
3880 &#32;&#32;&#32;&#32;&#32;&#32;fixed_size_simd&lt;_Tp,&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;::_S_size()&gt;(__private_init,
3881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x));
3882 &#32;&#32;}
3883 
3884 <emphasis role="comment">//&#32;}}}</emphasis>
3885 
3886 <emphasis role="comment">//&#32;split&lt;simd&gt;(simd)&#32;{{{</emphasis>
3887 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,
3888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Parts&#32;=&#32;simd_size_v&lt;typename&#32;_V::value_type,&#32;_Ap&gt;&#32;/&#32;_V::size()&gt;
3889 &#32;&#32;enable_if_t&lt;simd_size_v&lt;typename&#32;_V::value_type,&#32;_Ap&gt;&#32;==&#32;Parts&#32;*&#32;_V::size()
3890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_simd_v&lt;_V&gt;,&#32;<link linkend="_classarray">array&lt;_V, Parts&gt;</link>&gt;
3891 &#32;&#32;split(<emphasis role="keyword">const</emphasis>&#32;simd&lt;typename&#32;_V::value_type,&#32;_Ap&gt;&amp;&#32;__x)
3892 &#32;&#32;{
3893 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_V::value_type;
3894 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(Parts&#32;==&#32;1)
3895 &#32;&#32;&#32;&#32;&#32;&#32;{
3896 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{simd_cast&lt;_V&gt;(__x)};
3897 &#32;&#32;&#32;&#32;&#32;&#32;}
3898 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_is_constprop())
3899 &#32;&#32;&#32;&#32;&#32;&#32;{
3900 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;Parts,&#32;array&lt;_V,&#32;Parts&gt;&gt;([&amp;](
3901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i&#32;*&#32;_V::size()&#32;+&#32;__j];
3904 &#32;&#32;&#32;&#32;&#32;&#32;});
3905 &#32;&#32;&#32;&#32;});
3906 &#32;&#32;&#32;&#32;&#32;&#32;}
3907 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(
3908 &#32;&#32;&#32;&#32;&#32;&#32;__is_fixed_size_abi_v&lt;_Ap&gt;
3909 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(is_same_v&lt;typename&#32;_V::abi_type,&#32;simd_abi::scalar&gt;
3910 &#32;&#32;&#32;&#32;||&#32;(__is_fixed_size_abi_v&lt;typename&#32;_V::abi_type&gt;
3911 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_V)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_V::size()&#32;<emphasis role="comment">//&#32;_V&#32;doesn&apos;t&#32;have&#32;padding</emphasis>
3912 &#32;&#32;&#32;&#32;&#32;&#32;)))
3913 &#32;&#32;&#32;&#32;&#32;&#32;{
3914 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixed_size&#32;-&gt;&#32;fixed_size&#32;(w/o&#32;padding)&#32;or&#32;scalar</emphasis>
3915 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_USE_ALIASING_LOADS</emphasis>
3916 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__may_alias&lt;_Tp&gt;*&#32;<emphasis role="keyword">const</emphasis>&#32;__element_ptr
3917 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__may_alias&lt;_Tp&gt;*<emphasis role="keyword">&gt;</emphasis>(&amp;__data(__x));
3918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;Parts,&#32;array&lt;_V,&#32;Parts&gt;&gt;([&amp;](
3919 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3920 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V(__element_ptr&#32;+&#32;__i&#32;*&#32;_V::size(),&#32;vector_aligned);
3921 &#32;&#32;&#32;&#32;&#32;&#32;});
3922 <emphasis role="preprocessor">#else</emphasis>
3923 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__xx&#32;=&#32;__data(__x);
3924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;Parts,&#32;array&lt;_V,&#32;Parts&gt;&gt;([&amp;](
3925 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3926 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset
3927 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__i)<link linkend="_classvalue">::value</link>&#32;*&#32;_V::size();
3928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3929 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SizeConstant&lt;__j&#32;+&#32;__offset&gt;&#32;__k;
3930 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__xx[__k];
3931 &#32;&#32;&#32;&#32;});
3932 &#32;&#32;&#32;&#32;&#32;&#32;});
3933 <emphasis role="preprocessor">#endif</emphasis>
3934 &#32;&#32;&#32;&#32;}
3935 &#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;typename&#32;_V::abi_type,&#32;simd_abi::scalar&gt;)
3936 &#32;&#32;&#32;&#32;{
3937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;normally&#32;memcpy&#32;should&#32;work&#32;here&#32;as&#32;well</emphasis>
3938 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;Parts,&#32;array&lt;_V,&#32;Parts&gt;&gt;([&amp;](
3939 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i];&#32;});
3940 &#32;&#32;&#32;&#32;}
3941 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
3942 &#32;&#32;&#32;&#32;{
3943 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;Parts,&#32;array&lt;_V,&#32;Parts&gt;&gt;([&amp;](
3944 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3945 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_fixed_size_abi_v&lt;typename&#32;_V::abi_type&gt;)
3946 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i&#32;*&#32;_V::size()&#32;+&#32;__j];
3948 &#32;&#32;&#32;&#32;&#32;&#32;});
3949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3950 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V(__private_init,
3951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extract_part&lt;<emphasis role="keyword">decltype</emphasis>(__i)<link linkend="_classvalue">::value</link>,&#32;Parts&gt;(__data(__x)));
3952 &#32;&#32;&#32;&#32;&#32;&#32;});
3953 &#32;&#32;&#32;&#32;}
3954 &#32;&#32;}
3955 
3956 <emphasis role="comment">//&#32;}}}</emphasis>
3957 <emphasis role="comment">//&#32;split&lt;simd_mask&gt;(simd_mask)&#32;{{{</emphasis>
3958 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,
3959 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Parts
3960 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;simd_size_v&lt;typename&#32;_V::simd_type::value_type,&#32;_Ap&gt;&#32;/&#32;_V::size()&gt;
3961 &#32;&#32;enable_if_t&lt;is_simd_mask_v&lt;_V&gt;&#32;&amp;&amp;&#32;simd_size_v&lt;<emphasis role="keyword">typename</emphasis>
3962 &#32;&#32;&#32;&#32;_V::simd_type::value_type,&#32;_Ap&gt;&#32;==&#32;_Parts&#32;*&#32;_V::size(),&#32;<link linkend="_classarray">array&lt;_V, _Parts&gt;</link>&gt;
3963 &#32;&#32;split(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;typename&#32;_V::simd_type::value_type,&#32;_Ap&gt;&amp;&#32;__x)
3964 &#32;&#32;{
3965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Ap,&#32;typename&#32;_V::abi_type&gt;)
3966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__x};
3967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Parts&#32;==&#32;1)
3968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__proposed::static_simd_cast&lt;_V&gt;(__x)};
3969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Parts&#32;==&#32;2&#32;&amp;&amp;&#32;__is_sse_abi&lt;typename&#32;_V::abi_type&gt;()
3970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_avx_abi&lt;_Ap&gt;())
3971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_V(__private_init,&#32;__lo128(__data(__x))),
3972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V(__private_init,&#32;__hi128(__data(__x)))};
3973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_V::size()&#32;&lt;=&#32;__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_ULLong))
3974 &#32;&#32;&#32;&#32;&#32;&#32;{
3975 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;bitset&#32;__bits&#32;=&#32;__x.__to_bitset();
3976 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Parts,&#32;array&lt;_V,&#32;_Parts&gt;&gt;([&amp;](
3977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3978 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&#32;=&#32;__i&#32;*&#32;_V::size();
3979 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V(__bitset_init,&#32;(__bits&#32;&gt;&gt;&#32;__offset).to_ullong());
3980 &#32;&#32;&#32;&#32;});
3981 &#32;&#32;&#32;&#32;&#32;&#32;}
3982 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
3983 &#32;&#32;&#32;&#32;&#32;&#32;{
3984 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;_Parts,&#32;array&lt;_V,&#32;_Parts&gt;&gt;([&amp;](
3985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&#32;=&#32;__i&#32;*&#32;_V::size();
3987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_V(
3988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__private_init,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
3989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__j&#32;+&#32;__offset];
3990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
3991 &#32;&#32;&#32;&#32;});
3992 &#32;&#32;&#32;&#32;&#32;&#32;}
3993 &#32;&#32;}
3994 
3995 <emphasis role="comment">//&#32;}}}</emphasis>
3996 <emphasis role="comment">//&#32;split&lt;_Sizes...&gt;(simd)&#32;{{{</emphasis>
3997 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Sizes,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,&#32;<emphasis role="keyword">typename</emphasis>&gt;
3998 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
3999 &#32;&#32;tuple&lt;simd&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Sizes&gt;&gt;...&gt;
4000 &#32;&#32;split(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
4001 &#32;&#32;{
4002 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SL&#32;=&#32;_SizeList&lt;_Sizes...&gt;;
4003 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tuple&#32;=&#32;tuple&lt;__deduced_simd&lt;_Tp,&#32;_Sizes&gt;...&gt;;
4004 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Ap&gt;;
4005 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_N0&#32;=&#32;_SL::template&#32;_S_at&lt;0&gt;();
4006 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_V&#32;=&#32;__deduced_simd&lt;_Tp,&#32;_N0&gt;;
4007 
4008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__x._M_is_constprop())
4009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;<emphasis role="keyword">sizeof</emphasis>...(_Sizes),&#32;_Tuple&gt;([&amp;](
4010 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
4011 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vi&#32;=&#32;__deduced_simd&lt;_Tp,&#32;_SL::_S_at(__i)&gt;;
4012 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&#32;=&#32;_SL::_S_before(__i);
4013 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Vi([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__offset&#32;+&#32;__j];&#32;});
4014 &#32;&#32;&#32;&#32;&#32;&#32;});
4015 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;_N0)
4016 &#32;&#32;&#32;&#32;&#32;&#32;{
4017 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>...(_Sizes)&#32;==&#32;1);
4018 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{simd_cast&lt;_V&gt;(__x)};
4019 &#32;&#32;&#32;&#32;&#32;&#32;}
4020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="comment">//&#32;split&#32;from&#32;fixed_size,&#32;such&#32;that&#32;__x::first.size&#32;==&#32;_N0</emphasis>
4021 &#32;&#32;&#32;&#32;&#32;&#32;(__is_fixed_size_abi_v&lt;
4022 &#32;&#32;&#32;&#32;&#32;_Ap&gt;&#32;&amp;&amp;&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;::_S_first_size&#32;==&#32;_N0)
4023 &#32;&#32;&#32;&#32;&#32;&#32;{
4024 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
4025 &#32;&#32;&#32;&#32;&#32;&#32;!__is_fixed_size_abi_v&lt;typename&#32;_V::abi_type&gt;,
4026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;How&#32;can&#32;&lt;_Tp,&#32;_Np&gt;&#32;be&#32;__a&#32;single&#32;_SimdTuple&#32;entry&#32;but&#32;__a&#32;&quot;</emphasis>
4027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;fixed_size_simd&#32;&quot;</emphasis>
4028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;when&#32;deduced?&quot;</emphasis>);
4029 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;extract&#32;first&#32;and&#32;recurse&#32;(__split_wrapper&#32;is&#32;needed&#32;to&#32;deduce&#32;a&#32;new</emphasis>
4030 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Sizes&#32;pack)</emphasis>
4031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tuple_cat(make_tuple(_V(__private_init,&#32;__data(__x).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)),
4032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__split_wrapper(_SL::template&#32;_S_pop_front&lt;1&gt;(),
4033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data(__x).second));
4034 &#32;&#32;&#32;&#32;&#32;&#32;}
4035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((!is_same_v&lt;simd_abi::scalar,
4036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Sizes&gt;&gt;&#32;&amp;&amp;&#32;...)
4037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!__is_fixed_size_abi_v&lt;
4038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::deduce_t&lt;_Tp,&#32;_Sizes&gt;&gt;&#32;&amp;&amp;&#32;...))
4039 &#32;&#32;&#32;&#32;&#32;&#32;{
4040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(((_Sizes&#32;*&#32;2&#32;==&#32;_Np)&#32;&amp;&amp;&#32;...))
4041 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;2&gt;(__data(__x))},
4042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;1,&#32;2&gt;(__data(__x))}};
4043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_SizeList&lt;_Sizes...&gt;,
4044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeList&lt;_Np&#32;/&#32;3,&#32;_Np&#32;/&#32;3,&#32;_Np&#32;/&#32;3&gt;&gt;)
4045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;3&gt;(__data(__x))},
4046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;1,&#32;3&gt;(__data(__x))},
4047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;2,&#32;3&gt;(__data(__x))}};
4048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_SizeList&lt;_Sizes...&gt;,
4049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeList&lt;2&#32;*&#32;_Np&#32;/&#32;3,&#32;_Np&#32;/&#32;3&gt;&gt;)
4050 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;3,&#32;2&gt;(__data(__x))},
4051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;2,&#32;3&gt;(__data(__x))}};
4052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_SizeList&lt;_Sizes...&gt;,
4053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeList&lt;_Np&#32;/&#32;3,&#32;2&#32;*&#32;_Np&#32;/&#32;3&gt;&gt;)
4054 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;3&gt;(__data(__x))},
4055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;1,&#32;3,&#32;2&gt;(__data(__x))}};
4056 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_SizeList&lt;_Sizes...&gt;,
4057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeList&lt;_Np&#32;/&#32;2,&#32;_Np&#32;/&#32;4,&#32;_Np&#32;/&#32;4&gt;&gt;)
4058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;2&gt;(__data(__x))},
4059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;2,&#32;4&gt;(__data(__x))},
4060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;3,&#32;4&gt;(__data(__x))}};
4061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_SizeList&lt;_Sizes...&gt;,
4062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeList&lt;_Np&#32;/&#32;4,&#32;_Np&#32;/&#32;4,&#32;_Np&#32;/&#32;2&gt;&gt;)
4063 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;4&gt;(__data(__x))},
4064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;1,&#32;4&gt;(__data(__x))},
4065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;1,&#32;2&gt;(__data(__x))}};
4066 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_SizeList&lt;_Sizes...&gt;,
4067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeList&lt;_Np&#32;/&#32;4,&#32;_Np&#32;/&#32;2,&#32;_Np&#32;/&#32;4&gt;&gt;)
4068 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;4&gt;(__data(__x))},
4069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_center(__data(__x))},
4070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;3,&#32;4&gt;(__data(__x))}};
4071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(((_Sizes&#32;*&#32;4&#32;==&#32;_Np)&#32;&amp;&amp;&#32;...))
4072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{{__private_init,&#32;__extract_part&lt;0,&#32;4&gt;(__data(__x))},
4073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;1,&#32;4&gt;(__data(__x))},
4074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;2,&#32;4&gt;(__data(__x))},
4075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{__private_init,&#32;__extract_part&lt;3,&#32;4&gt;(__data(__x))}};
4076 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;fall&#32;through</emphasis>
4077 &#32;&#32;&#32;&#32;&#32;&#32;}
4078 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_USE_ALIASING_LOADS</emphasis>
4079 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__may_alias&lt;_Tp&gt;*&#32;<emphasis role="keyword">const</emphasis>&#32;__element_ptr
4080 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__may_alias&lt;_Tp&gt;*<emphasis role="keyword">&gt;</emphasis>(&amp;__x);
4081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;<emphasis role="keyword">sizeof</emphasis>...(_Sizes),&#32;_Tuple&gt;([&amp;](
4082 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
4083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vi&#32;=&#32;__deduced_simd&lt;_Tp,&#32;_SL::_S_at(__i)&gt;;
4084 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&#32;=&#32;_SL::_S_before(__i);
4085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__base_align&#32;=&#32;<emphasis role="keyword">alignof</emphasis>(simd&lt;_Tp,&#32;_Ap&gt;);
4086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__a
4087 &#32;&#32;&#32;&#32;=&#32;__base_align&#32;-&#32;((__offset&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp))&#32;%&#32;__base_align);
4088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__b&#32;=&#32;((__a&#32;-&#32;1)&#32;&amp;&#32;__a)&#32;^&#32;__a;
4089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__alignment&#32;=&#32;__b&#32;==&#32;0&#32;?&#32;__a&#32;:&#32;__b;
4090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Vi(__element_ptr&#32;+&#32;__offset,&#32;overaligned&lt;__alignment&gt;);
4091 &#32;&#32;&#32;&#32;});
4092 <emphasis role="preprocessor">#else</emphasis>
4093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_from_n_evaluations&lt;<emphasis role="keyword">sizeof</emphasis>...(_Sizes),&#32;_Tuple&gt;([&amp;](
4094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
4095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vi&#32;=&#32;__deduced_simd&lt;_Tp,&#32;_SL::_S_at(__i)&gt;;
4096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__xx&#32;=&#32;__data(__x);
4097 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Offset&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(_SL::_S_before(__i));
4098 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Vi([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
4099 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SizeConstant&lt;_Offset::value&#32;+&#32;__j&gt;&#32;__k;
4100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__xx[__k];
4101 &#32;&#32;&#32;&#32;&#32;&#32;});
4102 &#32;&#32;&#32;&#32;});
4103 <emphasis role="preprocessor">#endif</emphasis>
4104 &#32;&#32;}
4105 
4106 <emphasis role="comment">//&#32;}}}</emphasis>
4107 
4108 <emphasis role="comment">//&#32;__subscript_in_pack&#32;{{{</emphasis>
4109 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_I,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
4110 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
4111 &#32;&#32;__subscript_in_pack(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_As&gt;&amp;...&#32;__xs)
4112 &#32;&#32;{
4113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_I&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Ap&gt;)
4114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[_I];
4115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__subscript_in_pack&lt;_I&#32;-&#32;simd_size_v&lt;_Tp,&#32;_Ap&gt;&gt;(__xs...);
4117 &#32;&#32;}
4118 
4119 <emphasis role="comment">//&#32;}}}</emphasis>
4120 <emphasis role="comment">//&#32;__store_pack_of_simd&#32;{{{</emphasis>
4121 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
4122 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">void</emphasis>
4123 &#32;&#32;__store_pack_of_simd(<emphasis role="keywordtype">char</emphasis>*&#32;__mem,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_A0&gt;&amp;&#32;__x0,
4124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_As&gt;&amp;...&#32;__xs)
4125 &#32;&#32;{
4126 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n_bytes&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;simd_size_v&lt;_Tp,&#32;_A0&gt;;
4127 &#32;&#32;&#32;&#32;__builtin_memcpy(__mem,&#32;&amp;__data(__x0),&#32;__n_bytes);
4128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(__xs)&#32;&gt;&#32;0)
4129 &#32;&#32;&#32;&#32;&#32;&#32;__store_pack_of_simd(__mem&#32;+&#32;__n_bytes,&#32;__xs...);
4130 &#32;&#32;}
4131 
4132 <emphasis role="comment">//&#32;}}}</emphasis>
4133 <emphasis role="comment">//&#32;concat(simd...)&#32;{{{</emphasis>
4134 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;
4135 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_SIMD_CONSTEXPR
4136 &#32;&#32;simd&lt;_Tp,&#32;simd_abi::deduce_t&lt;_Tp,&#32;(simd_size_v&lt;_Tp,&#32;_As&gt;&#32;+&#32;...)&gt;&gt;
4137 &#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_As&gt;&amp;...&#32;__xs)
4138 &#32;&#32;{
4139 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Rp&#32;=&#32;__deduced_simd&lt;_Tp,&#32;(simd_size_v&lt;_Tp,&#32;_As&gt;&#32;+&#32;...)&gt;;
4140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(__xs)&#32;==&#32;1)
4141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd_cast&lt;_Rp&gt;(__xs...);
4142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((...&#32;&amp;&amp;&#32;__xs._M_is_constprop()))
4143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,
4144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd_abi::deduce_t&lt;_Tp,&#32;(simd_size_v&lt;_Tp,&#32;_As&gt;&#32;+&#32;...)&gt;&gt;([&amp;](
4145 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__subscript_in_pack&lt;__i&gt;(__xs...);&#32;});
4146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4147 &#32;&#32;&#32;&#32;&#32;&#32;{
4148 &#32;&#32;&#32;&#32;_Rp&#32;__r{};
4149 &#32;&#32;&#32;&#32;__store_pack_of_simd(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;__data(__r)),&#32;__xs...);
4150 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
4151 &#32;&#32;&#32;&#32;&#32;&#32;}
4152 &#32;&#32;}
4153 
4154 <emphasis role="comment">//&#32;}}}</emphasis>
4155 <emphasis role="comment">//&#32;concat(array&lt;simd&gt;)&#32;{{{</emphasis>
4156 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4157 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
4158 &#32;&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;__deduced_simd&lt;_Tp,&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&#32;*&#32;_Np&gt;
4159 &#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&lt;simd&lt;_Tp,&#32;_Abi&gt;,&#32;_Np&gt;&amp;&#32;__x)
4160 &#32;&#32;{
4161 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts&lt;_Np&gt;(__x,&#32;[](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;...&#32;__xs)&#32;{
4162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a988ba5d6c0412dff629c6f6d6d226fb0">concat</link>(__xs...);
4163 &#32;&#32;&#32;&#32;});
4164 &#32;&#32;}
4165 
4166 <emphasis role="comment">//&#32;}}}</emphasis>
4167 
4169 <emphasis role="comment">//&#32;_SmartReference&#32;{{{</emphasis>
4170 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Accessor&#32;=&#32;_Up,
4171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up::value_type&gt;
4172 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_SmartReference
4173 &#32;&#32;{
4174 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Accessor;
4175 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_M_index;
4176 &#32;&#32;&#32;&#32;_Up&amp;&#32;_M_obj;
4177 
4178 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ValueType&#32;_M_read()&#32;const&#32;noexcept
4179 &#32;&#32;&#32;&#32;{
4180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_arithmetic_v&lt;_Up&gt;)
4181 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_obj;
4182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4183 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_obj[_M_index];
4184 &#32;&#32;&#32;&#32;}
4185 
4186 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4187 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_write(_Tp&amp;&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
4188 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;_Accessor::_S_set(_M_obj,&#32;_M_index,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x));&#32;}
4189 
4190 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4191 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
4192 &#32;&#32;&#32;&#32;_SmartReference(_Up&amp;&#32;__o,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__i)&#32;noexcept
4193 &#32;&#32;&#32;&#32;:&#32;_M_index(__i),&#32;_M_obj(__o)&#32;{}
4194 
4195 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_ValueType;
4196 
4197 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SmartReference(<emphasis role="keyword">const</emphasis>&#32;_SmartReference&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
4198 
4199 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;value_type()&#32;const&#32;noexcept
4200 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_read();&#32;}
4201 
4202 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
4203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_ValuePreservingOrInt&lt;__remove_cvref_t&lt;_Tp&gt;,&#32;value_type&gt;&gt;
4205 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SmartReference&#32;operator=(_Tp&amp;&amp;&#32;__x)&#32;&amp;&amp;
4206 &#32;&#32;&#32;&#32;&#32;&#32;{
4207 &#32;&#32;&#32;&#32;_M_write(<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x));
4208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_M_obj,&#32;_M_index};
4209 &#32;&#32;&#32;&#32;&#32;&#32;}
4210 
4211 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_OP_(__op)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4213 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_TT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4214 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;decltype(declval&lt;value_type&gt;()&#32;__op&#32;declval&lt;_Tp&gt;()),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4215 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;=&#32;_ValuePreservingOrInt&lt;__remove_cvref_t&lt;_Tp&gt;,&#32;_TT&gt;,&#32;&#32;&#32;&#32;\</emphasis>
4216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;=&#32;_ValuePreservingOrInt&lt;_TT,&#32;value_type&gt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4217 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;constexpr&#32;_SmartReference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4218 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;operator&#32;__op##=(_Tp&amp;&amp;&#32;__x)&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4219 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4220 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;value_type&amp;&#32;__lhs&#32;=&#32;_M_read();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4221 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_M_write(__lhs&#32;__op&#32;__x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4222 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;{_M_obj,&#32;_M_index};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
4223 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
4224 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALL_ARITHMETICS(_GLIBCXX_SIMD_OP_);
4225 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALL_SHIFTS(_GLIBCXX_SIMD_OP_);
4226 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALL_BINARY(_GLIBCXX_SIMD_OP_);
4227 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_OP_</emphasis>
4228 
4229 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
4230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(++declval&lt;conditional_t&lt;true,&#32;value_type,&#32;_Tp&gt;&amp;&gt;())&gt;
4232 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SmartReference&#32;operator++()&#32;&amp;&amp;
4233 &#32;&#32;&#32;&#32;&#32;&#32;{
4234 &#32;&#32;&#32;&#32;value_type&#32;__x&#32;=&#32;_M_read();
4235 &#32;&#32;&#32;&#32;_M_write(++__x);
4236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_M_obj,&#32;_M_index};
4237 &#32;&#32;&#32;&#32;&#32;&#32;}
4238 
4239 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
4240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(declval&lt;conditional_t&lt;true,&#32;value_type,&#32;_Tp&gt;&amp;&gt;()++)&gt;
4242 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;&amp;&amp;
4243 &#32;&#32;&#32;&#32;&#32;&#32;{
4244 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&#32;__r&#32;=&#32;_M_read();
4245 &#32;&#32;&#32;&#32;value_type&#32;__x&#32;=&#32;__r;
4246 &#32;&#32;&#32;&#32;_M_write(++__x);
4247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
4248 &#32;&#32;&#32;&#32;&#32;&#32;}
4249 
4250 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
4251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(--declval&lt;conditional_t&lt;true,&#32;value_type,&#32;_Tp&gt;&amp;&gt;())&gt;
4253 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SmartReference&#32;operator--()&#32;&amp;&amp;
4254 &#32;&#32;&#32;&#32;&#32;&#32;{
4255 &#32;&#32;&#32;&#32;value_type&#32;__x&#32;=&#32;_M_read();
4256 &#32;&#32;&#32;&#32;_M_write(--__x);
4257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_M_obj,&#32;_M_index};
4258 &#32;&#32;&#32;&#32;&#32;&#32;}
4259 
4260 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
4261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(declval&lt;conditional_t&lt;true,&#32;value_type,&#32;_Tp&gt;&amp;&gt;()--)&gt;
4263 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;value_type&#32;operator--(<emphasis role="keywordtype">int</emphasis>)&#32;&amp;&amp;
4264 &#32;&#32;&#32;&#32;&#32;&#32;{
4265 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&#32;__r&#32;=&#32;_M_read();
4266 &#32;&#32;&#32;&#32;value_type&#32;__x&#32;=&#32;__r;
4267 &#32;&#32;&#32;&#32;_M_write(--__x);
4268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
4269 &#32;&#32;&#32;&#32;&#32;&#32;}
4270 
4271 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
4272 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_SmartReference&amp;&amp;&#32;__a,&#32;_SmartReference&amp;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>(
4273 &#32;&#32;&#32;&#32;&#32;&#32;conjunction&lt;
4274 &#32;&#32;&#32;&#32;is_nothrow_constructible&lt;value_type,&#32;_SmartReference&amp;&amp;&gt;,
4275 &#32;&#32;&#32;&#32;is_nothrow_assignable&lt;_SmartReference&amp;&amp;,&#32;value_type&amp;&amp;&gt;&gt;<link linkend="_classvalue">::value</link>)
4276 &#32;&#32;&#32;&#32;{
4277 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_SmartReference&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__a);
4278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_SmartReference&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__a)&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type<emphasis role="keyword">&gt;</emphasis>(__b);
4279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_SmartReference&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__b)&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
4280 &#32;&#32;&#32;&#32;}
4281 
4282 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
4283 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(value_type&amp;&#32;__a,&#32;_SmartReference&amp;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>(
4284 &#32;&#32;&#32;&#32;&#32;&#32;conjunction&lt;
4285 &#32;&#32;&#32;&#32;is_nothrow_constructible&lt;value_type,&#32;value_type&amp;&amp;&gt;,
4286 &#32;&#32;&#32;&#32;is_nothrow_assignable&lt;value_type&amp;,&#32;value_type&amp;&amp;&gt;,
4287 &#32;&#32;&#32;&#32;is_nothrow_assignable&lt;_SmartReference&amp;&amp;,&#32;value_type&amp;&amp;&gt;&gt;<link linkend="_classvalue">::value</link>)
4288 &#32;&#32;&#32;&#32;{
4289 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a));
4290 &#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>value_type<emphasis role="keyword">&gt;</emphasis>(__b);
4291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_SmartReference&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__b)&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
4292 &#32;&#32;&#32;&#32;}
4293 
4294 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
4295 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_SmartReference&amp;&amp;&#32;__a,&#32;value_type&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>(
4296 &#32;&#32;&#32;&#32;&#32;&#32;conjunction&lt;
4297 &#32;&#32;&#32;&#32;is_nothrow_constructible&lt;value_type,&#32;_SmartReference&amp;&amp;&gt;,
4298 &#32;&#32;&#32;&#32;is_nothrow_assignable&lt;value_type&amp;,&#32;value_type&amp;&amp;&gt;,
4299 &#32;&#32;&#32;&#32;is_nothrow_assignable&lt;_SmartReference&amp;&amp;,&#32;value_type&amp;&amp;&gt;&gt;<link linkend="_classvalue">::value</link>)
4300 &#32;&#32;&#32;&#32;{
4301 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>(__a);
4302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_SmartReference&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__a)&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__b);
4303 &#32;&#32;&#32;&#32;&#32;&#32;__b&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
4304 &#32;&#32;&#32;&#32;}
4305 &#32;&#32;};
4306 
4307 <emphasis role="comment">//&#32;}}}</emphasis>
4308 <emphasis role="comment">//&#32;__scalar_abi_wrapper&#32;{{{</emphasis>
4309 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Bytes&gt;
4310 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__scalar_abi_wrapper
4311 &#32;&#32;{
4312 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;1;
4313 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size&#32;=&#32;1;
4314 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_is_partial&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4315 
4316 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&#32;=&#32;simd_abi::scalar&gt;
4317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_valid_v
4318 &#32;&#32;&#32;&#32;=&#32;_Abi::template&#32;_IsValid&lt;_Tp&gt;::value&#32;&amp;&amp;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;==&#32;_Bytes;
4319 &#32;&#32;};
4320 
4321 <emphasis role="comment">//&#32;}}}</emphasis>
4322 <emphasis role="comment">//&#32;__decay_abi&#32;metafunction&#32;{{{</emphasis>
4323 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4324 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__decay_abi&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Tp;&#32;};
4325 
4326 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Bytes&gt;
4327 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__decay_abi&lt;__scalar_abi_wrapper&lt;_Bytes&gt;&gt;
4328 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd_abi::scalar;&#32;};
4329 
4330 <emphasis role="comment">//&#32;}}}</emphasis>
4331 <emphasis role="comment">//&#32;__find_next_valid_abi&#32;metafunction&#32;{{{1</emphasis>
4332 <emphasis role="comment">//&#32;Given&#32;an&#32;ABI&#32;tag&#32;A&lt;N&gt;,&#32;find&#32;an&#32;N2&#32;&lt;&#32;N&#32;such&#32;that&#32;A&lt;N2&gt;::_S_is_valid_v&lt;_Tp&gt;&#32;==</emphasis>
4333 <emphasis role="comment">//&#32;true,&#32;N2&#32;is&#32;a&#32;power-of-2,&#32;and&#32;A&lt;N2&gt;::_S_is_partial&lt;_Tp&gt;&#32;is&#32;false.&#32;Break</emphasis>
4334 <emphasis role="comment">//&#32;recursion&#32;at&#32;2&#32;elements&#32;in&#32;the&#32;resulting&#32;ABI&#32;tag.&#32;In&#32;this&#32;case</emphasis>
4335 <emphasis role="comment">//&#32;type::_S_is_valid_v&lt;_Tp&gt;&#32;may&#32;be&#32;false.</emphasis>
4336 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Abi,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Bytes,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4337 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_next_valid_abi
4338 &#32;&#32;{
4339 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_S_choose()
4340 &#32;&#32;&#32;&#32;{
4341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_NextBytes&#32;=&#32;std::__bit_ceil(_Bytes)&#32;/&#32;2;
4342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_NextAbi&#32;=&#32;_Abi&lt;_NextBytes&gt;;
4343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_NextBytes&#32;&lt;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;2)&#32;<emphasis role="comment">//&#32;break&#32;recursion</emphasis>
4344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi&lt;_Bytes&gt;();
4345 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_NextAbi::template&#32;_S_is_partial&lt;_Tp&gt;&#32;==&#32;<emphasis role="keyword">false</emphasis>
4346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_NextAbi::template&#32;_S_is_valid_v&lt;_Tp&gt;)
4347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_NextAbi();
4348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__find_next_valid_abi&lt;_Abi,&#32;_NextBytes,&#32;_Tp&gt;::_S_choose();
4350 &#32;&#32;&#32;&#32;}
4351 
4352 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(_S_choose());
4353 &#32;&#32;};
4354 
4355 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Bytes,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
4356 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__find_next_valid_abi&lt;__scalar_abi_wrapper,&#32;_Bytes,&#32;_Tp&gt;
4357 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd_abi::scalar;&#32;};
4358 
4359 <emphasis role="comment">//&#32;_AbiList&#32;{{{1</emphasis>
4360 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class</emphasis>...&gt;
4361 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_AbiList
4362 &#32;&#32;{
4363 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_has_valid_abi&#32;=&#32;<emphasis role="keyword">false</emphasis>;
4364 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">using&#32;</emphasis>_FirstValidAbi&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
4365 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">using&#32;</emphasis>_BestAbi&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
4366 &#32;&#32;};
4367 
4368 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_A0,&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&gt;&#32;<emphasis role="keyword">class</emphasis>...&#32;_Rest&gt;
4369 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_AbiList&lt;_A0,&#32;_Rest...&gt;
4370 &#32;&#32;{
4371 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
4372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_has_valid_abi
4373 &#32;&#32;&#32;&#32;=&#32;_A0&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&gt;::template&#32;_S_is_valid_v&lt;
4374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;||&#32;_AbiList&lt;_Rest...&gt;::template&#32;_S_has_valid_abi&lt;_Tp,&#32;_Np&gt;;
4375 
4376 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
4377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FirstValidAbi&#32;=&#32;conditional_t&lt;
4378 &#32;&#32;&#32;&#32;_A0&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&gt;::template&#32;_S_is_valid_v&lt;_Tp&gt;,
4379 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__decay_abi&lt;_A0&lt;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>,
4380 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_AbiList&lt;_Rest...&gt;::template&#32;_FirstValidAbi&lt;_Tp,&#32;_Np&gt;&gt;;
4381 
4382 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
4383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_S_determine_best_abi()
4384 &#32;&#32;&#32;&#32;&#32;&#32;{
4385 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;=&#32;1);
4386 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Bytes&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_Np;
4387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
4388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_dependent_t&lt;_Tp,&#32;simd_abi::scalar&gt;{};
4389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4390 &#32;&#32;&#32;&#32;&#32;&#32;{
4391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__fullsize&#32;=&#32;_A0&lt;_Bytes&gt;::template&#32;_S_full_size&lt;_Tp&gt;;
4392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_A0&lt;_Bytes&gt;&#32;is&#32;good&#32;if:</emphasis>
4393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;1.&#32;The&#32;ABI&#32;tag&#32;is&#32;valid&#32;for&#32;_Tp</emphasis>
4394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2.&#32;The&#32;storage&#32;overhead&#32;is&#32;no&#32;more&#32;than&#32;padding&#32;to&#32;fill&#32;the&#32;next</emphasis>
4395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;power-of-2&#32;number&#32;of&#32;bytes</emphasis>
4396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_A0&lt;_Bytes&gt;::template&#32;_S_is_valid_v&lt;
4397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;&amp;&amp;&#32;__fullsize&#32;/&#32;2&#32;&lt;&#32;_Np)
4398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__decay_abi&lt;_A0&lt;_Bytes&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>{};
4399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
4401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Bp&#32;=
4402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__find_next_valid_abi&lt;_A0,&#32;_Bytes,&#32;_Tp&gt;::type;
4403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Bp::template&#32;_S_is_valid_v&lt;
4404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&gt;&#32;&amp;&amp;&#32;_Bp::template&#32;_S_size&lt;_Tp&gt;&#32;&lt;=&#32;_Np)
4405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Bp{};
4406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>
4408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_AbiList&lt;_Rest...&gt;::template&#32;_BestAbi&lt;_Tp,&#32;_Np&gt;{};
4409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
4410 &#32;&#32;&#32;&#32;&#32;&#32;}
4411 &#32;&#32;&#32;&#32;&#32;&#32;}
4412 
4413 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
4414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_BestAbi&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(_S_determine_best_abi&lt;_Tp,&#32;_Np&gt;());
4415 &#32;&#32;};
4416 
4417 <emphasis role="comment">//&#32;}}}1</emphasis>
4418 
4419 <emphasis role="comment">//&#32;the&#32;following&#32;lists&#32;all&#32;native&#32;ABIs,&#32;which&#32;makes&#32;them&#32;accessible&#32;to</emphasis>
4420 <emphasis role="comment">//&#32;simd_abi::deduce&#32;and&#32;select_best_vector_type_t&#32;(for&#32;fixed_size).&#32;Order</emphasis>
4421 <emphasis role="comment">//&#32;matters:&#32;Whatever&#32;comes&#32;first&#32;has&#32;higher&#32;priority.</emphasis>
4422 <emphasis role="keyword">using&#32;</emphasis>_AllNativeAbis&#32;=&#32;_AbiList&lt;simd_abi::_VecBltnBtmsk,&#32;simd_abi::_VecBuiltin,
4423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__scalar_abi_wrapper&gt;;
4424 
4425 <emphasis role="comment">//&#32;valid&#32;_SimdTraits&#32;specialization&#32;{{{1</emphasis>
4426 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4427 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdTraits&lt;_Tp,&#32;_Abi,&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;_Abi::template&#32;_IsValid&lt;_Tp&gt;&gt;&gt;
4428 &#32;&#32;:&#32;_Abi::template&#32;__traits&lt;_Tp&gt;&#32;{};
4429 
4430 <emphasis role="comment">//&#32;__deduce_impl&#32;specializations&#32;{{{1</emphasis>
4431 <emphasis role="comment">//&#32;try&#32;all&#32;native&#32;ABIs&#32;(including&#32;scalar)&#32;first</emphasis>
4432 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4433 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__deduce_impl&lt;
4434 &#32;&#32;&#32;&#32;_Tp,&#32;_Np,&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;_AllNativeAbis::template&#32;_S_has_valid_abi&lt;_Tp,&#32;_Np&gt;&gt;&gt;
4435 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_AllNativeAbis::_FirstValidAbi&lt;_Tp,&#32;_Np&gt;;&#32;};
4436 
4437 <emphasis role="comment">//&#32;fall&#32;back&#32;to&#32;fixed_size&#32;only&#32;if&#32;scalar&#32;and&#32;native&#32;ABIs&#32;don&apos;t&#32;match</emphasis>
4438 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
4439 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__deduce_fixed_size_fallback&#32;{};
4440 
4441 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
4442 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__deduce_fixed_size_fallback&lt;_Tp,&#32;_Np,
4443 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;simd_abi::fixed_size&lt;_Np&gt;::template&#32;_S_is_valid_v&lt;_Tp&gt;&gt;&gt;
4444 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd_abi::fixed_size&lt;_Np&gt;;&#32;};
4445 
4446 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&gt;
4447 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__deduce_impl&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__deduce_fixed_size_fallback&lt;_Tp,&#32;_Np&gt;&#32;{};
4448 
4449 <emphasis role="comment">//}}}1</emphasis>
4451 
4452 <emphasis role="comment">//&#32;simd_mask&#32;{{{</emphasis>
4453 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4454 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>simd_mask&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_Abi&gt;::_MaskBase
4455 &#32;&#32;{
4456 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;types,&#32;tags,&#32;and&#32;friends&#32;{{{</emphasis>
4457 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Traits&#32;=&#32;_SimdTraits&lt;_Tp,&#32;_Abi&gt;;
4458 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MemberType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_MaskMember;
4459 
4460 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;map&#32;all&#32;masks&#32;with&#32;equal&#32;element&#32;sizeof&#32;to&#32;a&#32;single&#32;integer&#32;type,&#32;the</emphasis>
4461 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;one&#32;given&#32;by&#32;__int_for_sizeof_t&lt;_Tp&gt;.&#32;This&#32;is&#32;the&#32;approach</emphasis>
4462 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[[gnu::vector_size(N)]]&#32;types&#32;take&#32;as&#32;well&#32;and&#32;it&#32;reduces&#32;the&#32;number&#32;of</emphasis>
4463 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;template&#32;specializations&#32;in&#32;the&#32;implementation&#32;classes.</emphasis>
4464 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;_Tp&gt;;
4465 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Ip*&#32;_S_type_tag&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
4466 
4467 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_MaskBase;
4468 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>simd&lt;_Tp,&#32;_Abi&gt;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;construct&#32;masks&#32;on&#32;return</emphasis>
4469 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_SimdImpl;&#32;<emphasis role="comment">//&#32;to&#32;construct&#32;masks&#32;on&#32;return&#32;and</emphasis>
4470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;inspect&#32;data&#32;on&#32;masked&#32;operations</emphasis>
4471 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4472 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Impl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_MaskImpl;
4473 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Impl;
4474 
4475 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4476 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;member&#32;types&#32;{{{</emphasis>
4477 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>;
4478 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;_SmartReference&lt;_MemberType,&#32;_Impl,&#32;value_type&gt;;
4479 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>simd_type&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
4480 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>abi_type&#32;=&#32;_Abi;
4481 
4482 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4483 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="comment">//&#32;{{{</emphasis>
4484 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__size_or_zero_v&lt;_Tp,&#32;_Abi&gt;;&#32;}
4485 
4486 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4487 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;constructors&#32;&amp;&#32;assignment&#32;{{{</emphasis>
4488 &#32;&#32;&#32;&#32;simd_mask()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4489 &#32;&#32;&#32;&#32;simd_mask(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4490 &#32;&#32;&#32;&#32;simd_mask(simd_mask&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4491 &#32;&#32;&#32;&#32;simd_mask&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4492 &#32;&#32;&#32;&#32;simd_mask&amp;&#32;operator=(simd_mask&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
4493 
4494 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;access&#32;to&#32;internal&#32;representation&#32;(optional&#32;feature)&#32;{{{</emphasis>
4496 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">explicit</emphasis>
4497 &#32;&#32;&#32;&#32;simd_mask(<emphasis role="keyword">typename</emphasis>&#32;_Traits::_MaskCastType&#32;__init)
4498 &#32;&#32;&#32;&#32;:&#32;_M_data{__init}&#32;{}
4499 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conversions&#32;to&#32;internal&#32;type&#32;is&#32;done&#32;in&#32;_MaskBase</emphasis>
4500 
4501 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4502 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bitset&#32;interface&#32;(extension&#32;to&#32;be&#32;proposed)&#32;{{{</emphasis>
4503 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TS_FEEDBACK:</emphasis>
4504 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Conversion&#32;of&#32;simd_mask&#32;to&#32;and&#32;from&#32;bitset&#32;makes&#32;it&#32;much&#32;easier&#32;to</emphasis>
4505 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;interface&#32;with&#32;other&#32;facilities.&#32;I&#32;suggest&#32;adding&#32;`static</emphasis>
4506 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd_mask::from_bitset`&#32;and&#32;`simd_mask::to_bitset`.</emphasis>
4507 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">static</emphasis>&#32;simd_mask
4508 &#32;&#32;&#32;&#32;__from_bitset(bitset&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&#32;bs)
4509 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__bitset_init,&#32;bs};&#32;}
4510 
4511 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;bitset&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;
4512 &#32;&#32;&#32;&#32;__to_bitset()<emphasis role="keyword">&#32;const</emphasis>
4513 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Impl::_S_to_bits(_M_data)._M_to_bitset();&#32;}
4514 
4515 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4516 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;explicit&#32;broadcast&#32;constructor&#32;{{{</emphasis>
4517 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX_SIMD_CONSTEXPR
4518 &#32;&#32;&#32;&#32;simd_mask(value_type&#32;__x)
4519 &#32;&#32;&#32;&#32;:&#32;_M_data(_Impl::template&#32;_S_broadcast&lt;_Ip&gt;(__x))&#32;{}
4520 
4521 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4522 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicit&#32;type&#32;conversion&#32;constructor&#32;{{{</emphasis>
4523 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;_GLIBCXX_SIMD_ENABLE_IMPLICIT_MASK_CAST</emphasis>
4524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;proposed&#32;improvement</emphasis>
4525 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A2,
4526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;enable_if_t&lt;simd_size_v&lt;_Up,&#32;_A2&gt;&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&gt;
4527 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">explicit</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_MemberType)
4528 &#32;&#32;&#32;&#32;&#32;&#32;!=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Up,&#32;_A2&gt;::_MaskMember))
4529 &#32;&#32;&#32;&#32;&#32;&#32;simd_mask(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;_A2&gt;&amp;&#32;__x)
4530 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;simd_mask(__proposed::static_simd_cast&lt;simd_mask&gt;(__x))&#32;{}
4531 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
4532 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conforming&#32;to&#32;ISO/IEC&#32;19570:2018</emphasis>
4533 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;conjunction&lt;
4534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;abi_type,&#32;simd_abi::fixed_size&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&gt;,
4535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;_Up,&#32;_Up&gt;&gt;<link linkend="_classvalue">::value</link>&gt;&gt;
4536 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
4537 &#32;&#32;&#32;&#32;&#32;&#32;simd_mask(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;simd_abi::fixed_size&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&gt;&amp;&#32;__x)
4538 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(_Impl::_S_from_bitmask(__data(__x),&#32;_S_type_tag))&#32;{}
4539 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
4540 
4541 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4542 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;load&#32;constructor&#32;{{{</emphasis>
4543 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
4544 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
4545 &#32;&#32;&#32;&#32;&#32;&#32;simd_mask(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__mem,&#32;_Flags)
4546 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(_Impl::template&#32;_S_load&lt;_Ip&gt;(
4547 &#32;&#32;&#32;&#32;_Flags::template&#32;_S_apply&lt;simd_mask&gt;(__mem)))&#32;{}
4548 
4549 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
4550 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
4551 &#32;&#32;&#32;&#32;&#32;&#32;simd_mask(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__mem,&#32;simd_mask&#32;__k,&#32;_Flags)
4552 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data{}
4553 &#32;&#32;&#32;&#32;&#32;&#32;{
4554 &#32;&#32;&#32;&#32;_M_data
4555 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Impl::_S_masked_load(_M_data,&#32;__k._M_data,
4556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Flags::template&#32;_S_apply&lt;simd_mask&gt;(__mem));
4557 &#32;&#32;&#32;&#32;&#32;&#32;}
4558 
4559 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4560 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;loads&#32;[simd_mask.load]&#32;{{{</emphasis>
4561 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
4562 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">void</emphasis>
4563 &#32;&#32;&#32;&#32;&#32;&#32;copy_from(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__mem,&#32;_Flags)
4564 &#32;&#32;&#32;&#32;&#32;&#32;{
4565 &#32;&#32;&#32;&#32;_M_data&#32;=&#32;_Impl::template&#32;_S_load&lt;_Ip&gt;(
4566 &#32;&#32;&#32;&#32;&#32;&#32;_Flags::template&#32;_S_apply&lt;simd_mask&gt;(__mem));
4567 &#32;&#32;&#32;&#32;&#32;&#32;}
4568 
4569 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4570 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stores&#32;[simd_mask.store]&#32;{{{</emphasis>
4571 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
4572 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">void</emphasis>
4573 &#32;&#32;&#32;&#32;&#32;&#32;copy_to(value_type*&#32;__mem,&#32;_Flags)<emphasis role="keyword">&#32;const</emphasis>
4574 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;_Impl::_S_store(_M_data,&#32;_Flags::template&#32;_S_apply&lt;simd_mask&gt;(__mem));&#32;}
4575 
4576 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4577 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;scalar&#32;access&#32;{{{</emphasis>
4578 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;reference
4579 &#32;&#32;&#32;&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)
4580 &#32;&#32;&#32;&#32;{
4581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
4582 &#32;&#32;&#32;&#32;__invoke_ub(<emphasis role="stringliteral">&quot;Subscript&#32;%d&#32;is&#32;out&#32;of&#32;range&#32;[0,&#32;%d]&quot;</emphasis>,&#32;__i,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1);
4583 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_M_data,&#32;int(__i)};
4584 &#32;&#32;&#32;&#32;}
4585 
4586 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;value_type
4587 &#32;&#32;&#32;&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
4588 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
4589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
4590 &#32;&#32;&#32;&#32;__invoke_ub(<emphasis role="stringliteral">&quot;Subscript&#32;%d&#32;is&#32;out&#32;of&#32;range&#32;[0,&#32;%d]&quot;</emphasis>,&#32;__i,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1);
4591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_Abi&gt;())
4592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;
4593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4594 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis><emphasis role="keyword">&gt;</emphasis>(_M_data[__i]);
4595 &#32;&#32;&#32;&#32;}
4596 
4597 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4598 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negation&#32;{{{</emphasis>
4599 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;simd_mask
4600 &#32;&#32;&#32;&#32;operator!()<emphasis role="keyword">&#32;const</emphasis>
4601 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_bit_not(_M_data)};&#32;}
4602 
4603 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4604 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd_mask&#32;binary&#32;operators&#32;[simd_mask.binary]&#32;{{{</emphasis>
4605 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;_GLIBCXX_SIMD_ENABLE_IMPLICIT_MASK_CAST</emphasis>
4606 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd_mask&lt;int&gt;&#32;&amp;&amp;&#32;simd_mask&lt;uint&gt;&#32;needs&#32;disambiguation</emphasis>
4607 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A2,
4608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;enable_if_t&lt;is_convertible_v&lt;simd_mask&lt;_Up,&#32;_A2&gt;,&#32;simd_mask&gt;&gt;&gt;
4610 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4611 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af994b530007e136104cca54e96984114">operator&amp;&amp;</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;_A2&gt;&amp;&#32;__y)
4612 &#32;&#32;&#32;&#32;&#32;&#32;{
4613 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
4614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_logical_and(__x._M_data,&#32;simd_mask(__y)._M_data)};
4615 &#32;&#32;&#32;&#32;&#32;&#32;}
4616 
4617 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A2,
4618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;enable_if_t&lt;is_convertible_v&lt;simd_mask&lt;_Up,&#32;_A2&gt;,&#32;simd_mask&gt;&gt;&gt;
4620 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4621 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aa1f2d6c2374ccc45b1a937bd752ce42e">operator||</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;_A2&gt;&amp;&#32;__y)
4622 &#32;&#32;&#32;&#32;&#32;&#32;{
4623 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
4624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_logical_or(__x._M_data,&#32;simd_mask(__y)._M_data)};
4625 &#32;&#32;&#32;&#32;&#32;&#32;}
4626 <emphasis role="preprocessor">&#32;&#32;#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_ENABLE_IMPLICIT_MASK_CAST</emphasis>
4627 
4628 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4629 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af994b530007e136104cca54e96984114">operator&amp;&amp;</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4630 &#32;&#32;&#32;&#32;{
4631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_logical_and(__x._M_data,&#32;__y._M_data)};
4632 &#32;&#32;&#32;&#32;}
4633 
4634 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4635 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aa1f2d6c2374ccc45b1a937bd752ce42e">operator||</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4636 &#32;&#32;&#32;&#32;{
4637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_logical_or(__x._M_data,&#32;__y._M_data)};
4638 &#32;&#32;&#32;&#32;}
4639 
4640 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4641 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4642 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_bit_and(__x._M_data,&#32;__y._M_data)};&#32;}
4643 
4644 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4645 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4646 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_bit_or(__x._M_data,&#32;__y._M_data)};&#32;}
4647 
4648 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4649 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4650 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_bit_xor(__x._M_data,&#32;__y._M_data)};&#32;}
4651 
4652 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask&amp;
4653 &#32;&#32;&#32;&#32;operator&amp;=(simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4654 &#32;&#32;&#32;&#32;{
4655 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_data&#32;=&#32;_Impl::_S_bit_and(__x._M_data,&#32;__y._M_data);
4656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
4657 &#32;&#32;&#32;&#32;}
4658 
4659 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask&amp;
4660 &#32;&#32;&#32;&#32;operator|=(simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4661 &#32;&#32;&#32;&#32;{
4662 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_data&#32;=&#32;_Impl::_S_bit_or(__x._M_data,&#32;__y._M_data);
4663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
4664 &#32;&#32;&#32;&#32;}
4665 
4666 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask&amp;
4667 &#32;&#32;&#32;&#32;operator^=(simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4668 &#32;&#32;&#32;&#32;{
4669 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_data&#32;=&#32;_Impl::_S_bit_xor(__x._M_data,&#32;__y._M_data);
4670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
4671 &#32;&#32;&#32;&#32;}
4672 
4673 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4674 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd_mask&#32;compares&#32;[simd_mask.comparison]&#32;{{{</emphasis>
4675 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4676 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4677 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(__x,&#32;__y);&#32;}
4678 
4679 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4680 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__y)
4681 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_bit_xor(__x._M_data,&#32;__y._M_data)};&#32;}
4682 
4683 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4684 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;private_init&#32;ctor&#32;{{{</emphasis>
4685 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
4686 &#32;&#32;&#32;&#32;simd_mask(_PrivateInit,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_MaskMember&#32;__init)
4687 &#32;&#32;&#32;&#32;:&#32;_M_data(__init)&#32;{}
4688 
4689 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4690 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;private_init&#32;generator&#32;ctor&#32;{{{</emphasis>
4691 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Fp,&#32;typename&#32;=&#32;decltype(bool(declval&lt;_Fp&gt;()(<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>())))&gt;
4692 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>
4693 &#32;&#32;&#32;&#32;&#32;&#32;simd_mask(_PrivateInit,&#32;_Fp&amp;&amp;&#32;__gen)
4694 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data()
4695 &#32;&#32;&#32;&#32;&#32;&#32;{
4696 &#32;&#32;&#32;&#32;__execute_n_times&lt;size()&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
4697 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_set(_M_data,&#32;__i,&#32;__gen(__i));
4698 &#32;&#32;&#32;&#32;});
4699 &#32;&#32;&#32;&#32;&#32;&#32;}
4700 
4701 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4702 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bitset_init&#32;ctor&#32;{{{</emphasis>
4703 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;simd_mask(_BitsetInit,&#32;bitset&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&#32;__init)
4704 &#32;&#32;&#32;&#32;:&#32;_M_data(
4705 &#32;&#32;&#32;&#32;_Impl::_S_from_bitmask(_SanitizedBitMask&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;(__init),&#32;_S_type_tag))
4706 &#32;&#32;&#32;&#32;{}
4707 
4708 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4709 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__cvt&#32;{{{</emphasis>
4710 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TS_FEEDBACK:</emphasis>
4711 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;conversion&#32;operator&#32;this&#32;implements&#32;should&#32;be&#32;a&#32;ctor&#32;on&#32;simd_mask.</emphasis>
4712 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Once&#32;you&#32;call&#32;.__cvt()&#32;on&#32;a&#32;simd_mask&#32;it&#32;converts&#32;conveniently.</emphasis>
4713 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;useful&#32;variation:&#32;add&#32;`explicit(sizeof(_Tp)&#32;!=&#32;sizeof(_Up))`</emphasis>
4714 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_CvtProxy
4715 &#32;&#32;&#32;&#32;{
4716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A2,
4717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>
4718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;enable_if_t&lt;simd_size_v&lt;_Up,&#32;_A2&gt;&#32;==&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;&gt;
4719 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
4720 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;simd_mask&lt;_Up,&#32;_A2&gt;()&#32;&amp;&amp;
4721 &#32;&#32;&#32;&#32;{
4722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>std::experimental::__proposed;
4723 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;static_simd_cast&lt;simd_mask&lt;_Up,&#32;_A2&gt;&gt;(_M_data);
4724 &#32;&#32;&#32;&#32;}
4725 
4726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;_M_data;
4727 &#32;&#32;&#32;&#32;};
4728 
4729 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_CvtProxy
4730 &#32;&#32;&#32;&#32;__cvt()<emphasis role="keyword">&#32;const</emphasis>
4731 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{*<emphasis role="keyword">this</emphasis>};&#32;}
4732 
4733 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4734 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operator?:&#32;overloads&#32;(suggested&#32;extension)&#32;{{{</emphasis>
4735 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;__GXX_CONDITIONAL_IS_OVERLOADABLE__</emphasis>
4736 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4737 &#32;&#32;&#32;&#32;operator?:(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__k,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__where_true,
4738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__where_false)
4739 &#32;&#32;&#32;&#32;{
4740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;__where_false;
4741 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_masked_assign(__k._M_data,&#32;__ret._M_data,&#32;__where_true._M_data);
4742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
4743 &#32;&#32;&#32;&#32;}
4744 
4745 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_U1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_U2,
4746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rp&#32;=&#32;simd&lt;common_type_t&lt;_U1,&#32;_U2&gt;,&#32;_Abi&gt;,
4747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;conjunction_v&lt;
4748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_U1,&#32;_Rp&gt;,&#32;is_convertible&lt;_U2,&#32;_Rp&gt;,
4749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;simd_mask,&#32;typename&#32;_Rp::mask_type&gt;&gt;&gt;&gt;
4750 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;_Rp
4751 &#32;&#32;&#32;&#32;&#32;&#32;operator?:(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__k,&#32;<emphasis role="keyword">const</emphasis>&#32;_U1&amp;&#32;__where_true,
4752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_U2&amp;&#32;__where_false)
4753 &#32;&#32;&#32;&#32;&#32;&#32;{
4754 &#32;&#32;&#32;&#32;_Rp&#32;__ret&#32;=&#32;__where_false;
4755 &#32;&#32;&#32;&#32;_Rp::_Impl::_S_masked_assign(
4756 &#32;&#32;&#32;&#32;&#32;&#32;__data(<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;_Rp::mask_type<emphasis role="keyword">&gt;</emphasis>(__k)),&#32;__data(__ret),
4757 &#32;&#32;&#32;&#32;&#32;&#32;__data(<emphasis role="keyword">static_cast&lt;</emphasis>_Rp<emphasis role="keyword">&gt;</emphasis>(__where_true)));
4758 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
4759 &#32;&#32;&#32;&#32;&#32;&#32;}
4760 
4761 <emphasis role="preprocessor">&#32;&#32;#ifdef&#32;_GLIBCXX_SIMD_ENABLE_IMPLICIT_MASK_CAST</emphasis>
4762 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ak,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Au,
4763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
4764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conjunction_v&lt;is_convertible&lt;simd_mask&lt;_Kp,&#32;_Ak&gt;,&#32;simd_mask&gt;,
4765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;simd_mask&lt;_Up,&#32;_Au&gt;,&#32;simd_mask&gt;&gt;&gt;&gt;
4766 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd_mask
4767 &#32;&#32;&#32;&#32;&#32;&#32;operator?:(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Kp,&#32;_Ak&gt;&amp;&#32;__k,&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;&#32;__where_true,
4768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Up,&#32;_Au&gt;&amp;&#32;__where_false)
4769 &#32;&#32;&#32;&#32;&#32;&#32;{
4770 &#32;&#32;&#32;&#32;simd_mask&#32;__ret&#32;=&#32;__where_false;
4771 &#32;&#32;&#32;&#32;_Impl::_S_masked_assign(simd_mask(__k)._M_data,&#32;__ret._M_data,
4772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__where_true._M_data);
4773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
4774 &#32;&#32;&#32;&#32;&#32;&#32;}
4775 <emphasis role="preprocessor">&#32;&#32;#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_ENABLE_IMPLICIT_MASK_CAST</emphasis>
4776 <emphasis role="preprocessor">&#32;&#32;#endif&#32;</emphasis><emphasis role="comment">//&#32;__GXX_CONDITIONAL_IS_OVERLOADABLE__</emphasis>
4777 
4778 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4779 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_is_constprop&#32;{{{</emphasis>
4780 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
4781 &#32;&#32;&#32;&#32;_M_is_constprop()<emphasis role="keyword">&#32;const</emphasis>
4782 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
4783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_Abi&gt;())
4784 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_constant_p(_M_data);
4785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4786 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data._M_is_constprop();
4787 &#32;&#32;&#32;&#32;}
4788 
4789 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
4790 
4791 &#32;&#32;<emphasis role="keyword">private</emphasis>:
4792 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__data&lt;_Tp,&#32;abi_type&gt;(<emphasis role="keyword">const</emphasis>&#32;simd_mask&amp;);
4793 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__data&lt;_Tp,&#32;abi_type&gt;(simd_mask&amp;);
4794 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_Traits::_S_mask_align)&#32;_MemberType&#32;_M_data;
4795 &#32;&#32;};
4796 
4797 <emphasis role="comment">//&#32;}}}</emphasis>
4798 
4800 <emphasis role="comment">//&#32;__data(simd_mask)&#32;{{{</emphasis>
4801 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
4802 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
4803 &#32;&#32;__data(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
4804 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data;&#32;}
4805 
4806 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
4807 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
4808 &#32;&#32;__data(simd_mask&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
4809 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data;&#32;}
4810 
4811 <emphasis role="comment">//&#32;}}}</emphasis>
4813 
4814 <emphasis role="comment">//&#32;simd_mask&#32;reductions&#32;[simd_mask.reductions]&#32;{{{</emphasis>
4815 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4816 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4817 &#32;&#32;<link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
4818 &#32;&#32;{
4819 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__k._M_is_constprop())
4820 &#32;&#32;&#32;&#32;&#32;&#32;{
4821 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;&#32;++__i)
4822 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__k[__i])
4823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4824 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4825 &#32;&#32;&#32;&#32;&#32;&#32;}
4826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_MaskImpl::_S_all_of(__k);
4828 &#32;&#32;}
4829 
4830 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4831 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4832 &#32;&#32;<link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
4833 &#32;&#32;{
4834 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__k._M_is_constprop())
4835 &#32;&#32;&#32;&#32;&#32;&#32;{
4836 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;&#32;++__i)
4837 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k[__i])
4838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4840 &#32;&#32;&#32;&#32;&#32;&#32;}
4841 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_MaskImpl::_S_any_of(__k);
4843 &#32;&#32;}
4844 
4845 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4846 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4847 &#32;&#32;<link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
4848 &#32;&#32;{
4849 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__k._M_is_constprop())
4850 &#32;&#32;&#32;&#32;&#32;&#32;{
4851 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;&#32;++__i)
4852 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k[__i])
4853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4855 &#32;&#32;&#32;&#32;&#32;&#32;}
4856 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4857 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_MaskImpl::_S_none_of(__k);
4858 &#32;&#32;}
4859 
4860 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4861 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4862 &#32;&#32;some_of(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
4863 &#32;&#32;{
4864 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__k._M_is_constprop())
4865 &#32;&#32;&#32;&#32;&#32;&#32;{
4866 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__i&#32;=&#32;1;&#32;__i&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;&#32;++__i)
4867 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__k[__i]&#32;!=&#32;__k[__i&#32;-&#32;1])
4868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
4869 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
4870 &#32;&#32;&#32;&#32;&#32;&#32;}
4871 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
4872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_MaskImpl::_S_some_of(__k);
4873 &#32;&#32;}
4874 
4875 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4876 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
4877 &#32;&#32;popcount(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
4878 &#32;&#32;{
4879 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__k._M_is_constprop())
4880 &#32;&#32;&#32;&#32;&#32;&#32;{
4881 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__r&#32;=&#32;__call_with_subscripts&lt;simd_size_v&lt;_Tp,&#32;_Abi&gt;&gt;(
4882 &#32;&#32;&#32;&#32;&#32;&#32;__k,&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__elements)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;((__elements&#32;!=&#32;0)&#32;+&#32;...);&#32;});
4883 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__builtin_constant_p(__r))
4884 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
4885 &#32;&#32;&#32;&#32;&#32;&#32;}
4886 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_MaskImpl::_S_popcount(__k);
4887 &#32;&#32;}
4888 
4889 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4890 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
4891 &#32;&#32;find_first_set(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__k)
4892 &#32;&#32;{
4893 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__k._M_is_constprop())
4894 &#32;&#32;&#32;&#32;&#32;&#32;{
4895 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
4896 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Idx&#32;=&#32;__call_with_n_evaluations&lt;_Np&gt;(
4897 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__indexes)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::min({__indexes...});&#32;},
4898 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k[__i]&#32;?&#32;+__i&#32;:&#32;_Np;&#32;});
4899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Idx&#32;&gt;=&#32;_Np)
4900 &#32;&#32;&#32;&#32;&#32;&#32;__invoke_ub(<emphasis role="stringliteral">&quot;find_first_set(empty&#32;mask)&#32;is&#32;UB&quot;</emphasis>);
4901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(_Idx))
4902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Idx;
4903 &#32;&#32;&#32;&#32;&#32;&#32;}
4904 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_MaskImpl::_S_find_first_set(__k);
4905 &#32;&#32;}
4906 
4907 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4908 &#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
4909 &#32;&#32;find_last_set(<emphasis role="keyword">const</emphasis>&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&amp;&#32;__k)
4910 &#32;&#32;{
4911 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated()&#32;||&#32;__k._M_is_constprop())
4912 &#32;&#32;&#32;&#32;&#32;&#32;{
4913 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi&gt;;
4914 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Idx&#32;=&#32;__call_with_n_evaluations&lt;_Np&gt;(
4915 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>...&#32;__indexes)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::max({__indexes...});&#32;},
4916 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__k[__i]&#32;?&#32;int(__i)&#32;:&#32;-1;&#32;});
4917 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Idx&#32;&lt;&#32;0)
4918 &#32;&#32;&#32;&#32;&#32;&#32;__invoke_ub(<emphasis role="stringliteral">&quot;find_first_set(empty&#32;mask)&#32;is&#32;UB&quot;</emphasis>);
4919 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_constant_p(_Idx))
4920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Idx;
4921 &#32;&#32;&#32;&#32;&#32;&#32;}
4922 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Abi::_MaskImpl::_S_find_last_set(__k);
4923 &#32;&#32;}
4924 
4925 _GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4926 <link linkend="_namespacestd_1af69ea32ebd7865fb57714d6b5f12f26d">all_of</link>(_ExactBool&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
4927 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
4928 
4929 _GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4930 <link linkend="_namespacestd_1a9dc98b4fd1f056dcea526d7b9b90ba7f">any_of</link>(_ExactBool&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
4931 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
4932 
4933 _GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4934 <link linkend="_namespacestd_1a9ed705e7dfee41b5d879e6e0450cbc6c">none_of</link>(_ExactBool&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
4935 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__x;&#32;}
4936 
4937 _GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">bool</emphasis>
4938 some_of(_ExactBool)&#32;<emphasis role="keyword">noexcept</emphasis>
4939 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
4940 
4941 _GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
4942 popcount(_ExactBool&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
4943 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
4944 
4945 _GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
4946 find_first_set(_ExactBool)
4947 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
4948 
4949 _GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keywordtype">int</emphasis>
4950 find_last_set(_ExactBool)
4951 {&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
4952 
4953 <emphasis role="comment">//&#32;}}}</emphasis>
4954 
4956 <emphasis role="comment">//&#32;_SimdIntOperators{{{1</emphasis>
4957 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
4958 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_SimdIntOperators&#32;{};
4959 
4960 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
4961 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_SimdIntOperators&lt;_V,&#32;_Tp,&#32;_Abi,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
4962 &#32;&#32;{
4963 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Impl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_Abi&gt;::_SimdImpl;
4964 
4965 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__derived()<emphasis role="keyword">&#32;const</emphasis>
4966 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_V*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);&#32;}
4967 
4968 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
4969 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;_V
4970 &#32;&#32;&#32;&#32;&#32;&#32;_S_make_derived(_Up&amp;&amp;&#32;__d)
4971 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__d)};&#32;}
4972 
4973 &#32;&#32;<emphasis role="keyword">public</emphasis>:
4974 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
4975 &#32;&#32;&#32;&#32;_V&amp;
4976 &#32;&#32;&#32;&#32;operator%=(_V&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x)
4977 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;%&#32;__x;&#32;}
4978 
4979 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
4980 &#32;&#32;&#32;&#32;_V&amp;
4981 &#32;&#32;&#32;&#32;operator&amp;=(_V&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x)
4982 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;&amp;&#32;__x;&#32;}
4983 
4984 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
4985 &#32;&#32;&#32;&#32;_V&amp;
4986 &#32;&#32;&#32;&#32;operator|=(_V&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x)
4987 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;|&#32;__x;&#32;}
4988 
4989 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
4990 &#32;&#32;&#32;&#32;_V&amp;
4991 &#32;&#32;&#32;&#32;operator^=(_V&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x)
4992 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;^&#32;__x;&#32;}
4993 
4994 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
4995 &#32;&#32;&#32;&#32;_V&amp;
4996 &#32;&#32;&#32;&#32;operator&lt;&lt;=(_V&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x)
4997 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;&lt;&lt;&#32;__x;&#32;}
4998 
4999 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5000 &#32;&#32;&#32;&#32;_V&amp;
5001 &#32;&#32;&#32;&#32;operator&gt;&gt;=(_V&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x)
5002 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;&gt;&gt;&#32;__x;&#32;}
5003 
5004 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5005 &#32;&#32;&#32;&#32;_V&amp;
5006 &#32;&#32;&#32;&#32;operator&lt;&lt;=(_V&amp;&#32;__lhs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__x)
5007 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;&lt;&lt;&#32;__x;&#32;}
5008 
5009 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5010 &#32;&#32;&#32;&#32;_V&amp;
5011 &#32;&#32;&#32;&#32;operator&gt;&gt;=(_V&amp;&#32;__lhs,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__x)
5012 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;&gt;&gt;&#32;__x;&#32;}
5013 
5014 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5015 &#32;&#32;&#32;&#32;_V
5016 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1ad13992bdf0dd6f817de965e28f4ae2bf">operator%</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__y)
5017 &#32;&#32;&#32;&#32;{
5018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5019 &#32;&#32;&#32;&#32;_Impl::_S_modulus(__data(__x),&#32;__data(__y)));
5020 &#32;&#32;&#32;&#32;}
5021 
5022 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5023 &#32;&#32;&#32;&#32;_V
5024 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__y)
5025 &#32;&#32;&#32;&#32;{
5026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5027 &#32;&#32;&#32;&#32;_Impl::_S_bit_and(__data(__x),&#32;__data(__y)));
5028 &#32;&#32;&#32;&#32;}
5029 
5030 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5031 &#32;&#32;&#32;&#32;_V
5032 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__y)
5033 &#32;&#32;&#32;&#32;{
5034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5035 &#32;&#32;&#32;&#32;_Impl::_S_bit_or(__data(__x),&#32;__data(__y)));
5036 &#32;&#32;&#32;&#32;}
5037 
5038 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5039 &#32;&#32;&#32;&#32;_V
5040 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__y)
5041 &#32;&#32;&#32;&#32;{
5042 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5043 &#32;&#32;&#32;&#32;_Impl::_S_bit_xor(__data(__x),&#32;__data(__y)));
5044 &#32;&#32;&#32;&#32;}
5045 
5046 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5047 &#32;&#32;&#32;&#32;_V
5048 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__y)
5049 &#32;&#32;&#32;&#32;{
5050 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5051 &#32;&#32;&#32;&#32;_Impl::_S_bit_shift_left(__data(__x),&#32;__data(__y)));
5052 &#32;&#32;&#32;&#32;}
5053 
5054 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5055 &#32;&#32;&#32;&#32;_V
5056 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__y)
5057 &#32;&#32;&#32;&#32;{
5058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5059 &#32;&#32;&#32;&#32;_Impl::_S_bit_shift_right(__data(__x),&#32;__data(__y)));
5060 &#32;&#32;&#32;&#32;}
5061 
5062 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5063 &#32;&#32;&#32;&#32;_V
5064 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
5065 &#32;&#32;&#32;&#32;{
5066 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;&lt;&#32;0)
5067 &#32;&#32;&#32;&#32;__invoke_ub(<emphasis role="stringliteral">&quot;The&#32;behavior&#32;is&#32;undefined&#32;if&#32;the&#32;right&#32;operand&#32;of&#32;a&#32;&quot;</emphasis>
5068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;shift&#32;operation&#32;is&#32;negative.&#32;[expr.shift]\nA&#32;shift&#32;by&#32;&quot;</emphasis>
5069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%d&#32;was&#32;requested&quot;</emphasis>,
5070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__y);
5071 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>(__y)&#32;&gt;=&#32;<emphasis role="keyword">sizeof</emphasis>(declval&lt;_Tp&gt;()&#32;&lt;&lt;&#32;__y)&#32;*&#32;__CHAR_BIT__)
5072 &#32;&#32;&#32;&#32;__invoke_ub(
5073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;behavior&#32;is&#32;undefined&#32;if&#32;the&#32;right&#32;operand&#32;of&#32;a&#32;&quot;</emphasis>
5074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;shift&#32;operation&#32;is&#32;greater&#32;than&#32;or&#32;equal&#32;to&#32;the&#32;width&#32;of&#32;the&#32;&quot;</emphasis>
5075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;promoted&#32;left&#32;operand.&#32;[expr.shift]\nA&#32;shift&#32;by&#32;%d&#32;was&#32;requested&quot;</emphasis>,
5076 &#32;&#32;&#32;&#32;&#32;&#32;__y);
5077 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5078 &#32;&#32;&#32;&#32;_Impl::_S_bit_shift_left(__data(__x),&#32;__y));
5079 &#32;&#32;&#32;&#32;}
5080 
5081 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>
5082 &#32;&#32;&#32;&#32;_V
5083 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a4560e59cc4f5ddaf0ec23d1a7050b611">operator&gt;&gt;</link>(<emphasis role="keyword">const</emphasis>&#32;_V&amp;&#32;__x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
5084 &#32;&#32;&#32;&#32;{
5085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__y&#32;&lt;&#32;0)
5086 &#32;&#32;&#32;&#32;__invoke_ub(
5087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;behavior&#32;is&#32;undefined&#32;if&#32;the&#32;right&#32;operand&#32;of&#32;a&#32;shift&#32;&quot;</emphasis>
5088 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;operation&#32;is&#32;negative.&#32;[expr.shift]\nA&#32;shift&#32;by&#32;%d&#32;was&#32;requested&quot;</emphasis>,
5089 &#32;&#32;&#32;&#32;&#32;&#32;__y);
5090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>(__y)&#32;&gt;=&#32;<emphasis role="keyword">sizeof</emphasis>(declval&lt;_Tp&gt;()&#32;&lt;&lt;&#32;__y)&#32;*&#32;__CHAR_BIT__)
5091 &#32;&#32;&#32;&#32;__invoke_ub(
5092 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;behavior&#32;is&#32;undefined&#32;if&#32;the&#32;right&#32;operand&#32;of&#32;a&#32;shift&#32;&quot;</emphasis>
5093 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;operation&#32;is&#32;greater&#32;than&#32;or&#32;equal&#32;to&#32;the&#32;width&#32;of&#32;the&#32;promoted&#32;&quot;</emphasis>
5094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;left&#32;operand.&#32;[expr.shift]\nA&#32;shift&#32;by&#32;%d&#32;was&#32;requested&quot;</emphasis>,
5095 &#32;&#32;&#32;&#32;&#32;&#32;__y);
5096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdIntOperators::_S_make_derived(
5097 &#32;&#32;&#32;&#32;_Impl::_S_bit_shift_right(__data(__x),&#32;__y));
5098 &#32;&#32;&#32;&#32;}
5099 
5100 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unary&#32;operators&#32;(for&#32;integral&#32;_Tp)</emphasis>
5101 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR
5102 &#32;&#32;&#32;&#32;_V
5103 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>()<emphasis role="keyword">&#32;const</emphasis>
5104 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_complement(__derived()._M_data)};&#32;}
5105 &#32;&#32;};
5106 
5107 <emphasis role="comment">//}}}1</emphasis>
5109 
5110 <emphasis role="comment">//&#32;simd&#32;{{{</emphasis>
5111 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
5112 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>simd&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_SimdIntOperators&lt;
5113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;_Abi&gt;,&#32;_Tp,&#32;_Abi,
5114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conjunction&lt;is_integral&lt;_Tp&gt;,
5115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_SimdTraits&lt;_Tp,&#32;_Abi&gt;::_IsValid&gt;::value&gt;,
5116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_Abi&gt;::_SimdBase
5117 &#32;&#32;{
5118 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Traits&#32;=&#32;_SimdTraits&lt;_Tp,&#32;_Abi&gt;;
5119 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MemberType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_SimdMember;
5120 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CastType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_SimdCastType;
5121 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp*&#32;_S_type_tag&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
5122 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_SimdBase;
5123 
5124 &#32;&#32;<emphasis role="keyword">public</emphasis>:
5125 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Impl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_SimdImpl;
5126 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Impl;
5127 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_SimdIntOperators&lt;simd,&#32;_Tp,&#32;_Abi,&#32;true&gt;;
5128 
5129 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
5130 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;_SmartReference&lt;_MemberType,&#32;_Impl,&#32;value_type&gt;;
5131 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>mask_type&#32;=&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;;
5132 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>abi_type&#32;=&#32;_Abi;
5133 
5134 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()
5135 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__size_or_zero_v&lt;_Tp,&#32;_Abi&gt;;&#32;}
5136 
5137 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5138 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd(<emphasis role="keyword">const</emphasis>&#32;simd&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
5139 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd(simd&amp;&amp;)&#32;noexcept&#32;=&#32;default;
5140 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&amp;&#32;operator=(const&#32;simd&amp;)&#32;=&#32;default;
5141 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&amp;&#32;operator=(simd&amp;&amp;)&#32;noexcept&#32;=&#32;default;
5142 
5143 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicit&#32;broadcast&#32;constructor</emphasis>
5144 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Up,
5145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;=&#32;enable_if_t&lt;!is_same_v&lt;__remove_cvref_t&lt;_Up&gt;,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;&gt;&gt;
5146 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR
5147 &#32;&#32;&#32;&#32;&#32;&#32;simd(_ValuePreservingOrInt&lt;_Up,&#32;value_type&gt;&amp;&amp;&#32;__x)
5148 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(
5149 &#32;&#32;&#32;&#32;_Impl::_S_broadcast(static_cast&lt;value_type&gt;(static_cast&lt;_Up&amp;&amp;&gt;(__x))))
5150 &#32;&#32;&#32;&#32;&#32;&#32;{}
5151 
5152 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implicit&#32;type&#32;conversion&#32;constructor&#32;(convert&#32;from&#32;fixed_size&#32;to</emphasis>
5153 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fixed_size)</emphasis>
5154 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
5155 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR
5156 &#32;&#32;&#32;&#32;&#32;&#32;simd(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Up,&#32;simd_abi::fixed_size&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&gt;&amp;&#32;__x,
5157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;
5158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;conjunction&lt;
5159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;simd_abi::fixed_size&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;,&#32;abi_type&gt;,
5160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;negation&lt;__is_narrowing_conversion&lt;_Up,&#32;value_type&gt;&gt;,
5161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__converts_to_higher_integer_rank&lt;_Up,&#32;value_type&gt;&gt;<link linkend="_classvalue">::value</link>,
5162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&gt;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)
5163 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;simd{static_cast&lt;<link linkend="_classarray">array</link>&lt;_Up,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&gt;(__x).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;vector_aligned}&#32;{}
5164 
5165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;explicit&#32;type&#32;conversion&#32;constructor</emphasis>
5166 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_ENABLE_STATIC_CAST</emphasis>
5167 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A2,
5168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(static_simd_cast&lt;simd&gt;(
5169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;declval&lt;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Up,&#32;_A2&gt;&amp;&gt;()))&gt;
5170 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX_SIMD_CONSTEXPR
5171 &#32;&#32;&#32;&#32;&#32;&#32;simd(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Up,&#32;_A2&gt;&amp;&#32;__x)
5172 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;simd(static_simd_cast&lt;simd&gt;(__x))&#32;{}
5173 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_SIMD_ENABLE_STATIC_CAST</emphasis>
5174 
5175 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;generator&#32;constructor</emphasis>
5176 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
5177 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX_SIMD_CONSTEXPR
5178 &#32;&#32;&#32;&#32;&#32;&#32;simd(_Fp&amp;&amp;&#32;__gen,&#32;_ValuePreservingOrInt&lt;<emphasis role="keyword">decltype</emphasis>(declval&lt;_Fp&gt;()(
5179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;declval&lt;_SizeConstant&lt;0&gt;&amp;&gt;())),
5180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type&gt;*&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)
5181 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(_Impl::_S_generator(static_cast&lt;_Fp&amp;&amp;&gt;(__gen),&#32;_S_type_tag))&#32;{}
5182 
5183 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;load&#32;constructor</emphasis>
5184 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
5185 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
5186 &#32;&#32;&#32;&#32;&#32;&#32;simd(<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__mem,&#32;_Flags)
5187 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_data(
5188 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_load(_Flags::template&#32;_S_apply&lt;simd&gt;(__mem),&#32;_S_type_tag))
5189 &#32;&#32;&#32;&#32;&#32;&#32;{}
5190 
5191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;loads&#32;[simd.load]</emphasis>
5192 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
5193 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">void</emphasis>
5194 &#32;&#32;&#32;&#32;&#32;&#32;copy_from(<emphasis role="keyword">const</emphasis>&#32;_Vectorizable&lt;_Up&gt;*&#32;__mem,&#32;_Flags)
5195 &#32;&#32;&#32;&#32;&#32;&#32;{
5196 &#32;&#32;&#32;&#32;_M_data&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>decltype(_M_data)<emphasis role="keyword">&gt;</emphasis>(
5197 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_load(_Flags::template&#32;_S_apply&lt;simd&gt;(__mem),&#32;_S_type_tag));
5198 &#32;&#32;&#32;&#32;&#32;&#32;}
5199 
5200 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stores&#32;[simd.store]</emphasis>
5201 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Flags&gt;
5202 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keywordtype">void</emphasis>
5203 &#32;&#32;&#32;&#32;&#32;&#32;copy_to(_Vectorizable&lt;_Up&gt;*&#32;__mem,&#32;_Flags)<emphasis role="keyword">&#32;const</emphasis>
5204 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
5205 &#32;&#32;&#32;&#32;_Impl::_S_store(_M_data,&#32;_Flags::template&#32;_S_apply&lt;simd&gt;(__mem),
5206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_type_tag);
5207 &#32;&#32;&#32;&#32;&#32;&#32;}
5208 
5209 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;scalar&#32;access</emphasis>
5210 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;reference
5211 &#32;&#32;&#32;&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)
5212 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{_M_data,&#32;int(__i)};&#32;}
5213 
5214 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;value_type
5215 &#32;&#32;&#32;&#32;operator[]([[maybe_unused]]&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
5216 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
5217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_Abi&gt;())
5218 &#32;&#32;&#32;&#32;{
5219 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(__i&#32;==&#32;0);
5220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;
5221 &#32;&#32;&#32;&#32;}
5222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5223 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data[__i];
5224 &#32;&#32;&#32;&#32;}
5225 
5226 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;increment&#32;and&#32;decrement:</emphasis>
5227 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&amp;
5228 &#32;&#32;&#32;&#32;operator++()
5229 &#32;&#32;&#32;&#32;{
5230 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_increment(_M_data);
5231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5232 &#32;&#32;&#32;&#32;}
5233 
5234 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd
5235 &#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
5236 &#32;&#32;&#32;&#32;{
5237 &#32;&#32;&#32;&#32;&#32;&#32;simd&#32;__r&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
5238 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_increment(_M_data);
5239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
5240 &#32;&#32;&#32;&#32;}
5241 
5242 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&amp;
5243 &#32;&#32;&#32;&#32;operator--()
5244 &#32;&#32;&#32;&#32;{
5245 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_decrement(_M_data);
5246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
5247 &#32;&#32;&#32;&#32;}
5248 
5249 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd
5250 &#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)
5251 &#32;&#32;&#32;&#32;{
5252 &#32;&#32;&#32;&#32;&#32;&#32;simd&#32;__r&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
5253 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_decrement(_M_data);
5254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
5255 &#32;&#32;&#32;&#32;}
5256 
5257 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unary&#32;operators&#32;(for&#32;any&#32;_Tp)</emphasis>
5258 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;mask_type
5259 &#32;&#32;&#32;&#32;operator!()<emphasis role="keyword">&#32;const</emphasis>
5260 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_negate(_M_data)};&#32;}
5261 
5262 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd
5263 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>()<emphasis role="keyword">&#32;const</emphasis>
5264 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
5265 
5266 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd
5267 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>()<emphasis role="keyword">&#32;const</emphasis>
5268 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_unary_minus(_M_data)};&#32;}
5269 
5270 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;access&#32;to&#32;internal&#32;representation&#32;(suggested&#32;extension)</emphasis>
5271 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;<emphasis role="keyword">explicit</emphasis>&#32;_GLIBCXX_SIMD_CONSTEXPR
5272 &#32;&#32;&#32;&#32;simd(_CastType&#32;__init)&#32;:&#32;_M_data(__init)&#32;{}
5273 
5274 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compound&#32;assignment&#32;[simd.cassign]</emphasis>
5275 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd&amp;
5276 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(simd&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x)
5277 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;+&#32;__x;&#32;}
5278 
5279 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd&amp;
5280 &#32;&#32;&#32;&#32;operator-=(simd&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x)
5281 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;-&#32;__x;&#32;}
5282 
5283 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd&amp;
5284 &#32;&#32;&#32;&#32;operator*=(simd&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x)
5285 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;*&#32;__x;&#32;}
5286 
5287 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd&amp;
5288 &#32;&#32;&#32;&#32;operator/=(simd&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x)
5289 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs&#32;=&#32;__lhs&#32;/&#32;__x;&#32;}
5290 
5291 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;binary&#32;operators&#32;[simd.binary]</emphasis>
5292 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd
5293 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5294 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_plus(__x._M_data,&#32;__y._M_data)};&#32;}
5295 
5296 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd
5297 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5298 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_minus(__x._M_data,&#32;__y._M_data)};&#32;}
5299 
5300 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd
5301 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5302 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_multiplies(__x._M_data,&#32;__y._M_data)};&#32;}
5303 
5304 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd
5305 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a3d4e77a9763e858fed5eed89a6f2637f">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5306 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Impl::_S_divides(__x._M_data,&#32;__y._M_data)};&#32;}
5307 
5308 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compares&#32;[simd.comparison]</emphasis>
5309 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;mask_type
5310 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5311 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd::_S_make_mask(_Impl::_S_equal_to(__x._M_data,&#32;__y._M_data));&#32;}
5312 
5313 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;mask_type
5314 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5315 &#32;&#32;&#32;&#32;{
5316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd::_S_make_mask(
5317 &#32;&#32;&#32;&#32;_Impl::_S_not_equal_to(__x._M_data,&#32;__y._M_data));
5318 &#32;&#32;&#32;&#32;}
5319 
5320 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;mask_type
5321 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5322 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd::_S_make_mask(_Impl::_S_less(__x._M_data,&#32;__y._M_data));&#32;}
5323 
5324 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;mask_type
5325 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5326 &#32;&#32;&#32;&#32;{
5327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd::_S_make_mask(_Impl::_S_less_equal(__x._M_data,&#32;__y._M_data));
5328 &#32;&#32;&#32;&#32;}
5329 
5330 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;mask_type
5331 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5332 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd::_S_make_mask(_Impl::_S_less(__y._M_data,&#32;__x._M_data));&#32;}
5333 
5334 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;mask_type
5335 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__y)
5336 &#32;&#32;&#32;&#32;{
5337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd::_S_make_mask(_Impl::_S_less_equal(__y._M_data,&#32;__x._M_data));
5338 &#32;&#32;&#32;&#32;}
5339 
5340 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;operator?:&#32;overloads&#32;(suggested&#32;extension)&#32;{{{</emphasis>
5341 <emphasis role="preprocessor">#ifdef&#32;__GXX_CONDITIONAL_IS_OVERLOADABLE__</emphasis>
5342 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">friend</emphasis>&#32;simd
5343 &#32;&#32;&#32;&#32;operator?:(<emphasis role="keyword">const</emphasis>&#32;mask_type&amp;&#32;__k,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__where_true,
5344 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&amp;&#32;__where_false)
5345 &#32;&#32;&#32;&#32;{
5346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;__where_false;
5347 &#32;&#32;&#32;&#32;&#32;&#32;_Impl::_S_masked_assign(__data(__k),&#32;__data(__ret),&#32;__data(__where_true));
5348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
5349 &#32;&#32;&#32;&#32;}
5350 
5351 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__GXX_CONDITIONAL_IS_OVERLOADABLE__</emphasis>
5352 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
5353 
5354 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;private&quot;&#32;because&#32;of&#32;the&#32;first&#32;arguments&apos;s&#32;namespace</emphasis>
5355 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
5356 &#32;&#32;&#32;&#32;simd(_PrivateInit,&#32;<emphasis role="keyword">const</emphasis>&#32;_MemberType&amp;&#32;__init)
5357 &#32;&#32;&#32;&#32;:&#32;_M_data(__init)&#32;{}
5358 
5359 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;private&quot;&#32;because&#32;of&#32;the&#32;first&#32;arguments&apos;s&#32;namespace</emphasis>
5360 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
5361 &#32;&#32;&#32;&#32;simd(_BitsetInit,&#32;bitset&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&gt;&#32;__init)&#32;:&#32;_M_data()
5362 &#32;&#32;&#32;&#32;{&#32;where(mask_type(__bitset_init,&#32;__init),&#32;*<emphasis role="keyword">this</emphasis>)&#32;=&#32;~*<emphasis role="keyword">this</emphasis>;&#32;}
5363 
5364 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
5365 &#32;&#32;&#32;&#32;_M_is_constprop()<emphasis role="keyword">&#32;const</emphasis>
5366 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
5367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_Abi&gt;())
5368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_constant_p(_M_data);
5369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
5370 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data._M_is_constprop();
5371 &#32;&#32;&#32;&#32;}
5372 
5373 &#32;&#32;<emphasis role="keyword">private</emphasis>:
5374 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;<emphasis role="keyword">static</emphasis>&#32;mask_type
5375 &#32;&#32;&#32;&#32;_S_make_mask(<emphasis role="keyword">typename</emphasis>&#32;mask_type::_MemberType&#32;__k)
5376 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__k};&#32;}
5377 
5378 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__data&lt;value_type,&#32;abi_type&gt;(<emphasis role="keyword">const</emphasis>&#32;simd&amp;);
5379 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__data&lt;value_type,&#32;abi_type&gt;(simd&amp;);
5380 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_Traits::_S_simd_align)&#32;_MemberType&#32;_M_data;
5381 &#32;&#32;};
5382 
5383 <emphasis role="comment">//&#32;}}}</emphasis>
5385 <emphasis role="comment">//&#32;__data&#32;{{{</emphasis>
5386 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
5387 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
5388 &#32;&#32;__data(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
5389 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data;&#32;}
5390 
5391 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
5392 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
5393 &#32;&#32;__data(simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
5394 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_data;&#32;}
5395 
5396 <emphasis role="comment">//&#32;}}}</emphasis>
5397 <emphasis role="keyword">namespace&#32;</emphasis>__float_bitwise_operators&#32;{&#32;<emphasis role="comment">//{{{</emphasis>
5398 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
5399 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&lt;_Tp,&#32;_Ap&gt;
5400 &#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__b)
5401 &#32;&#32;{
5402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
5403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ap::_SimdImpl::_S_bit_xor(__data(__a),&#32;__data(__b))};
5404 &#32;&#32;}
5405 
5406 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
5407 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&lt;_Tp,&#32;_Ap&gt;
5408 &#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__b)
5409 &#32;&#32;{
5410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
5411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ap::_SimdImpl::_S_bit_or(__data(__a),&#32;__data(__b))};
5412 &#32;&#32;}
5413 
5414 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
5415 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR&#32;simd&lt;_Tp,&#32;_Ap&gt;
5416 &#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__b)
5417 &#32;&#32;{
5418 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,
5419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ap::_SimdImpl::_S_bit_and(__data(__a),&#32;__data(__b))};
5420 &#32;&#32;}
5421 
5422 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
5423 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_GLIBCXX_SIMD_CONSTEXPR
5424 &#32;&#32;enable_if_t&lt;is_floating_point_v&lt;_Tp&gt;,&#32;simd&lt;_Tp,&#32;_Ap&gt;&gt;
5425 &#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__a)
5426 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_Ap::_SimdImpl::_S_complement(__data(__a))};&#32;}
5427 }&#32;<emphasis role="comment">//&#32;namespace&#32;__float_bitwise_operators&#32;}}}</emphasis>
5429 
5431 _GLIBCXX_SIMD_END_NAMESPACE
5432 
5433 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
5434 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_H</emphasis>
5435 
5436 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker&#32;foldmarker={{{,}}}</emphasis>
</programlisting></section>
