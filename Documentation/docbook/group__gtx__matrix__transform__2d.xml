<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__gtx__matrix__transform__2d" xml:lang="en-US">
<title>GLM_GTX_matrix_transform_2d</title>
<indexterm><primary>GLM_GTX_matrix_transform_2d</primary></indexterm>
Collaboration diagram for GLM_GTX_matrix_transform_2d:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__matrix__transform__2d.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; <link linkend="_group__gtx__matrix__transform__2d_1gaa862e868893cf0b963e1d52e5dfb20c0">glm::translate</link> (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp;m, <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; <link linkend="_group__gtx__matrix__transform__2d_1gaddca86444c3dee30a0aa07673d68743d">glm::rotate</link> (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp;m, T <link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; <link linkend="_group__gtx__matrix__transform__2d_1ga6fd2493e8271ee595898e9b3d434c1a7">glm::scale</link> (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp;m, <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; <link linkend="_group__gtx__matrix__transform__2d_1gab0c6659f6895e2536aed6c893d70aa74">glm::shearX</link> (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp;m, T <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; <link linkend="_group__gtx__matrix__transform__2d_1ga2587e46b06a9801aba9ded45cc73445b">glm::shearY</link> (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp;m, T <link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Include &lt;glm/gtx/matrix_transform_2d.hpp&gt; to use the features of this extension.</para>

<para>Defines functions that generate common 2d transformation matrices. </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__gtx__matrix__transform__2d_1gaddca86444c3dee30a0aa07673d68743d"/><section>
    <title>rotate()</title>
<indexterm><primary>rotate</primary><secondary>GLM_GTX_matrix_transform_2d</secondary></indexterm>
<indexterm><primary>GLM_GTX_matrix_transform_2d</primary><secondary>rotate</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; glm::rotate (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp; m, T angle)</computeroutput></para>
<para>Builds a rotation 3 * 3 matrix created from an angle.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>m</entry><entry>
<para>Input matrix multiplied by this translation matrix. </para>
</entry>
                            </row>
                            <row>
<entry>angle</entry><entry>
<para>Rotation angle expressed in radians. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtx__matrix__transform__2d_gaddca86444c3dee30a0aa07673d68743d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtx__matrix__transform__2d_1ga6fd2493e8271ee595898e9b3d434c1a7"/><section>
    <title>scale()</title>
<indexterm><primary>scale</primary><secondary>GLM_GTX_matrix_transform_2d</secondary></indexterm>
<indexterm><primary>GLM_GTX_matrix_transform_2d</primary><secondary>scale</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; glm::scale (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp; m, <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; const &amp; v)</computeroutput></para>
<para>Builds a scale 3 * 3 matrix created from a vector of 2 components.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>m</entry><entry>
<para>Input matrix multiplied by this translation matrix. </para>
</entry>
                            </row>
                            <row>
<entry>v</entry><entry>
<para>Coordinates of a scale vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group__gtx__matrix__transform__2d_1gab0c6659f6895e2536aed6c893d70aa74"/><section>
    <title>shearX()</title>
<indexterm><primary>shearX</primary><secondary>GLM_GTX_matrix_transform_2d</secondary></indexterm>
<indexterm><primary>GLM_GTX_matrix_transform_2d</primary><secondary>shearX</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; glm::shearX (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp; m, T y)</computeroutput></para>
<para>Builds an horizontal (parallel to the x axis) shear 3 * 3 matrix.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>m</entry><entry>
<para>Input matrix multiplied by this translation matrix. </para>
</entry>
                            </row>
                            <row>
<entry>y</entry><entry>
<para>Shear factor. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group__gtx__matrix__transform__2d_1ga2587e46b06a9801aba9ded45cc73445b"/><section>
    <title>shearY()</title>
<indexterm><primary>shearY</primary><secondary>GLM_GTX_matrix_transform_2d</secondary></indexterm>
<indexterm><primary>GLM_GTX_matrix_transform_2d</primary><secondary>shearY</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; glm::shearY (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp; m, T x)</computeroutput></para>
<para>Builds a vertical (parallel to the y axis) shear 3 * 3 matrix.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>m</entry><entry>
<para>Input matrix multiplied by this translation matrix. </para>
</entry>
                            </row>
                            <row>
<entry>x</entry><entry>
<para>Shear factor. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group__gtx__matrix__transform__2d_1gaa862e868893cf0b963e1d52e5dfb20c0"/><section>
    <title>translate()</title>
<indexterm><primary>translate</primary><secondary>GLM_GTX_matrix_transform_2d</secondary></indexterm>
<indexterm><primary>GLM_GTX_matrix_transform_2d</primary><secondary>translate</secondary></indexterm>
<computeroutput>template&lt;typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; glm::translate (<link linkend="_structglm_1_1mat">mat</link>&lt; 3, 3, T, Q &gt; const &amp; m, <link linkend="_structglm_1_1vec">vec</link>&lt; 2, T, Q &gt; const &amp; v)</computeroutput></para>
<para>Builds a translation 3 * 3 matrix created from a vector of 2 components.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>m</entry><entry>
<para>Input matrix multiplied by this translation matrix. </para>
</entry>
                            </row>
                            <row>
<entry>v</entry><entry>
<para>Coordinates of a translation vector. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
</section>
