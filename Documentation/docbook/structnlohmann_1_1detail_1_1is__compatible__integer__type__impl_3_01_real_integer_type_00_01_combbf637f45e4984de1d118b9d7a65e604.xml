<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604" xml:lang="en-US">
<title>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt; Struct Template Reference</title>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1ab267aabfe36c5b9c305c5e5faf06ea36">RealLimits</link> = std::numeric_limits&lt; RealIntegerType &gt;</para>
</listitem>
            <listitem><para>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1a24d97696ca33fba8096e452b1901a8e6">CompatibleLimits</link> = std::numeric_limits&lt; CompatibleNumberIntegerType &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static constexpr auto <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1a8fd20d5e7d65d14b4e9f4ee181a3aded">value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1a24d97696ca33fba8096e452b1901a8e6"/><section>
    <title>CompatibleLimits</title>
<indexterm><primary>CompatibleLimits</primary><secondary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary><secondary>CompatibleLimits</secondary></indexterm>
<computeroutput>template&lt;typename RealIntegerType , typename CompatibleNumberIntegerType &gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">nlohmann::detail::is_compatible_integer_type_impl</link>&lt; RealIntegerType, CompatibleNumberIntegerType, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_integral&lt; RealIntegerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link> &gt; &gt;::CompatibleLimits =  std::numeric_limits&lt;CompatibleNumberIntegerType&gt;</computeroutput></para></section>
<anchor xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1ab267aabfe36c5b9c305c5e5faf06ea36"/><section>
    <title>RealLimits</title>
<indexterm><primary>RealLimits</primary><secondary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary><secondary>RealLimits</secondary></indexterm>
<computeroutput>template&lt;typename RealIntegerType , typename CompatibleNumberIntegerType &gt; </computeroutput><para><computeroutput>using <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">nlohmann::detail::is_compatible_integer_type_impl</link>&lt; RealIntegerType, CompatibleNumberIntegerType, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_integral&lt; RealIntegerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link> &gt; &gt;::RealLimits =  std::numeric_limits&lt;RealIntegerType&gt;</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01_real_integer_type_00_01_combbf637f45e4984de1d118b9d7a65e604_1a8fd20d5e7d65d14b4e9f4ee181a3aded"/><section>
    <title>value</title>
<indexterm><primary>value</primary><secondary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</secondary></indexterm>
<indexterm><primary>nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;typename RealIntegerType , typename CompatibleNumberIntegerType &gt; </computeroutput><para><computeroutput>constexpr auto <link linkend="_structnlohmann_1_1detail_1_1is__compatible__integer__type__impl">nlohmann::detail::is_compatible_integer_type_impl</link>&lt; RealIntegerType, CompatibleNumberIntegerType, <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; std::is_integral&lt; RealIntegerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, CompatibleNumberIntegerType &gt;<link linkend="_classvalue">::value</link> &gt; &gt;<link linkend="_classvalue">::value</link><computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">=
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_constructible&lt;RealIntegerType,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompatibleNumberIntegerType&gt;<link linkend="_classvalue">::value</link>&#32;&amp;&amp;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CompatibleLimits::is_integer&#32;&amp;&amp;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RealLimits::is_signed&#32;==&#32;CompatibleLimits::is_signed
</programlisting></section>
<para>
The documentation for this struct was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
