<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__local__iterator" xml:lang="en-US">
<title>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt; Class Template Reference</title>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary></indexterm>
<para>

<para>Safe iterator wrapper. </para>
 
</para>
<para>
<computeroutput>#include &lt;safe_local_iterator.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a344cb2a20da7eabdec4971b61c73ad21">iterator_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab1f6353bd62e733b828ce45632b990a3">iterator_category</link></para>
</listitem>
            <listitem><para>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a7237e8fed6259acf4b24ad7ba40ee48b">value_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link></para>
</listitem>
            <listitem><para>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526">pointer</link></para>
</listitem>
            <listitem><para>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a344cb2a20da7eabdec4971b61c73ad21">iterator_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab1f6353bd62e733b828ce45632b990a3">iterator_category</link></para>
</listitem>
            <listitem><para>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a7237e8fed6259acf4b24ad7ba40ee48b">value_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link></para>
</listitem>
            <listitem><para>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526">pointer</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b">_Safe_local_iterator</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a380abe1aa1ff4af91374084189f86ed0">_Safe_local_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__cont)</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a0a7e70d70fe6ebf02a59eb4ed6704642">_Safe_local_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__x) noexcept</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a281a8ffa72a96b7599ad892efc6f4367">_Safe_local_iterator</link> (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;&amp;__x) noexcept</para>

<para>Move construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab45913e372960af8e21c2e246563e815">_Safe_local_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _MutableIterator, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, _Sequence &gt;::__type &gt; &amp;__x) noexcept</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4370f29684bf7feab310caad4d1ba01f">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a1e0306579e4d4782b254f5d5732e078f">operator=</link> (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;&amp;__x) noexcept</para>

<para>Move assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a8e237d9370458e65ea6141b677e8e8f8">operator*</link> () const</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4789f11d5d5c248e478a79f590186f1a">operator-&gt;</link> () const</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4341710e5e529c0bb185bc7e9a5926a8">operator++</link> ()</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a970d20722ad94a43afaa2e4db289f85e">operator++</link> (int)</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link> () noexcept</para>

<para>Return the underlying iterator. </para>
</listitem>
            <listitem><para>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a0217a6f536468ef2d3a5b8853bfb2cdb">base</link> () const noexcept</para>
</listitem>
            <listitem><para>size_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2">bucket</link> () const</para>

<para>Return the bucket. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a996c63351ba75c6b08c729662f1e2809">operator _Iterator</link> () const</para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a8da8a15a449165ca5f17393e82445fd3">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6aa79a341cb886c9747c9889a3794ed8">_M_dereferenceable</link> () const</para>

<para>Is the iterator dereferenceable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a230223745882ecdae6c0d0c68beb7027">_M_incrementable</link> () const</para>

<para>Is the iterator incrementable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6105cf6a2df54bc899beadca987738d0">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist_info) const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ac479c9cdb7d3aa286578868f78b5de2c">_M_get_distance_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__rhs) const</para>
</listitem>
            <listitem><para>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab50969fa0dcf622a1dd07ee969bbeb67">_M_get_sequence</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aec66d198e8316a67bd61262fb635d63a">_M_is_begin</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s begin(bucket) iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a10fc12a7ddc4e7d5a554ad0194b0cd90">_M_is_end</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end(bucket)</link> iterator? </para>
</listitem>
            <listitem><para>template&lt;typename _Other &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a39baef008b322b79b4946d682018d4f2">_M_in_same_bucket</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Other, _Sequence &gt; &amp;__other) const</para>

<para>Is this iterator part of the same bucket as the other one? </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b">_Safe_local_iterator</link> () noexcept</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a380abe1aa1ff4af91374084189f86ed0">_Safe_local_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__cont)</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a0a7e70d70fe6ebf02a59eb4ed6704642">_Safe_local_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__x) noexcept</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a281a8ffa72a96b7599ad892efc6f4367">_Safe_local_iterator</link> (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;&amp;__x) noexcept</para>

<para>Move construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab45913e372960af8e21c2e246563e815">_Safe_local_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _MutableIterator, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, _Sequence &gt;::__type &gt; &amp;__x) noexcept</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4370f29684bf7feab310caad4d1ba01f">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a1e0306579e4d4782b254f5d5732e078f">operator=</link> (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;&amp;__x) noexcept</para>

<para>Move assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a8e237d9370458e65ea6141b677e8e8f8">operator*</link> () const</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4789f11d5d5c248e478a79f590186f1a">operator-&gt;</link> () const</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a4341710e5e529c0bb185bc7e9a5926a8">operator++</link> ()</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a970d20722ad94a43afaa2e4db289f85e">operator++</link> (int)</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850">base</link> () noexcept</para>

<para>Return the underlying iterator. </para>
</listitem>
            <listitem><para>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a0217a6f536468ef2d3a5b8853bfb2cdb">base</link> () const noexcept</para>
</listitem>
            <listitem><para>size_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2">bucket</link> () const</para>

<para>Return the bucket. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a996c63351ba75c6b08c729662f1e2809">operator _Iterator</link> () const</para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a8da8a15a449165ca5f17393e82445fd3">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6aa79a341cb886c9747c9889a3794ed8">_M_dereferenceable</link> () const</para>

<para>Is the iterator dereferenceable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a230223745882ecdae6c0d0c68beb7027">_M_incrementable</link> () const</para>

<para>Is the iterator incrementable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a6105cf6a2df54bc899beadca987738d0">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist_info) const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ac479c9cdb7d3aa286578868f78b5de2c">_M_get_distance_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp;__rhs) const</para>
</listitem>
            <listitem><para>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ab50969fa0dcf622a1dd07ee969bbeb67">_M_get_sequence</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aec66d198e8316a67bd61262fb635d63a">_M_is_begin</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s begin(bucket) iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a10fc12a7ddc4e7d5a554ad0194b0cd90">_M_is_end</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end(bucket)</link> iterator? </para>
</listitem>
            <listitem><para>template&lt;typename _Other &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a39baef008b322b79b4946d682018d4f2">_M_in_same_bucket</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Other, _Sequence &gt; &amp;__other) const</para>

<para>Is this iterator part of the same bucket as the other one? </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8">_S_constant</link> ()</para>

<para>Determine if this is a constant iterator. </para>
</listitem>
            <listitem><para>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8">_S_constant</link> ()</para>

<para>Determine if this is a constant iterator. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a92075217670aa87377847edfec282c43">operator==</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp;__rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ada9340182ca30aaf786f085da86c0dcc">operator==</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a9ad6f0f2ef27349dd328892fb482f83e">operator!=</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp;__rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a755ab58d6ca8fffdd98370b67bd53154">operator!=</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a92075217670aa87377847edfec282c43">operator==</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp;__rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1ada9340182ca30aaf786f085da86c0dcc">operator==</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a9ad6f0f2ef27349dd328892fb482f83e">operator!=</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp;__rhs) noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a755ab58d6ca8fffdd98370b67bd53154">operator!=</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp;__rhs) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Attributes inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad07568d7660eb8b85493b548d10c637a">_M_version</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7f653b7476705d7d0445edac938ac78f">_M_prior</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7c9c250dea264463f74591429f8ba123">_M_next</link></para>
</listitem>
        </itemizedlist>
</simplesect>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base">__gnu_debug::_Safe_local_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad7d51ed8396149f6d4d44e9bbf48ddf3">_Safe_local_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a7958bccd20b93cf3f6cffc4ed922346d">_Safe_local_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1aba66dde2adb286395bcb7714f32e64d9">_Safe_local_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base">_Safe_local_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a81a21a2f2e23e5e500ef2e47636b5aaf">~_Safe_local_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> * <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a519195e1575bce300f0d1643d7aca081">_M_get_container</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78f52529ca9957c3f87afb0920456374">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a1d77bdc38465edcace6943056f867725">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad88baf5072fed556979aaf901b3dfafd">_M_detach</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78cee76dec3476ad6c790e55d00eef46">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad7d51ed8396149f6d4d44e9bbf48ddf3">_Safe_local_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a7958bccd20b93cf3f6cffc4ed922346d">_Safe_local_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1aba66dde2adb286395bcb7714f32e64d9">_Safe_local_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base">_Safe_local_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a81a21a2f2e23e5e500ef2e47636b5aaf">~_Safe_local_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link> * <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a519195e1575bce300f0d1643d7aca081">_M_get_container</link> () const noexcept</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78f52529ca9957c3f87afb0920456374">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a1d77bdc38465edcace6943056f867725">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad88baf5072fed556979aaf901b3dfafd">_M_detach</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78cee76dec3476ad6c790e55d00eef46">_M_detach_single</link> ()  throw ()</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename _Iterator, typename _Sequence&gt;<?linebreak?>class __gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</title></simplesect>

<para>Safe iterator wrapper. </para>



<para>The class template _Safe_local_iterator is a wrapper around an iterator that tracks the iterator&apos;s movement among sequences and checks that operations performed on the &quot;safe&quot; iterator are legal. In additional to the basic iterator operations (which are validated, and then passed to the underlying iterator), _Safe_local_iterator has member functions for iterator invalidation, attaching/detaching the iterator from sequences, and querying the iterator&apos;s state. </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb"/><section>
    <title>difference_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb"/><section>
    <title>difference_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ab1f6353bd62e733b828ce45632b990a3"/><section>
    <title>iterator_category<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator_category</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::iterator_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ab1f6353bd62e733b828ce45632b990a3"/><section>
    <title>iterator_category<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator_category</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::iterator_category</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a344cb2a20da7eabdec4971b61c73ad21"/><section>
    <title>iterator_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>iterator_type</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>iterator_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::iterator_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a344cb2a20da7eabdec4971b61c73ad21"/><section>
    <title>iterator_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>iterator_type</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>iterator_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::iterator_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526"/><section>
    <title>pointer<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>pointer</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526"/><section>
    <title>pointer<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>pointer</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">::pointer</link></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304"/><section>
    <title>reference<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304"/><section>
    <title>reference<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a7237e8fed6259acf4b24ad7ba40ee48b"/><section>
    <title>value_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::value_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a7237e8fed6259acf4b24ad7ba40ee48b"/><section>
    <title>value_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>value_type</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::value_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b"/><section>
    <title>_Safe_local_iterator()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><formalpara><title>Postcondition</title>

<para>the iterator is singular and unattached </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_adc916fc873a967e3c62525fb890de36b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a380abe1aa1ff4af91374084189f86ed0"/><section>
    <title>_Safe_local_iterator()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __cont)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</para>

<para><formalpara><title>Precondition</title>

<para><computeroutput>seq</computeroutput> is not NULL </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>this is not singular </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a380abe1aa1ff4af91374084189f86ed0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a0a7e70d70fe6ebf02a59eb4ed6704642"/><section>
    <title>_Safe_local_iterator()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Copy construction. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a0a7e70d70fe6ebf02a59eb4ed6704642_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a281a8ffa72a96b7599ad892efc6f4367"/><section>
    <title>_Safe_local_iterator()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp;&amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move construction. </para>
</para>

<para><formalpara><title>Postcondition</title>

<para>__x is singular and unattached </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a281a8ffa72a96b7599ad892efc6f4367_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ab45913e372960af8e21c2e246563e815"/><section>
    <title>_Safe_local_iterator()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _MutableIterator &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _MutableIterator, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, _Sequence &gt;::__type &gt; &amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_ab45913e372960af8e21c2e246563e815_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1adc916fc873a967e3c62525fb890de36b"/><section>
    <title>_Safe_local_iterator()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para>
<para><formalpara><title>Postcondition</title>

<para>the iterator is singular and unattached </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a380abe1aa1ff4af91374084189f86ed0"/><section>
    <title>_Safe_local_iterator()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __cont)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</para>

<para><formalpara><title>Precondition</title>

<para><computeroutput>seq</computeroutput> is not NULL </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>this is not singular </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a380abe1aa1ff4af91374084189f86ed0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a0a7e70d70fe6ebf02a59eb4ed6704642"/><section>
    <title>_Safe_local_iterator()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Copy construction. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a0a7e70d70fe6ebf02a59eb4ed6704642_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a281a8ffa72a96b7599ad892efc6f4367"/><section>
    <title>_Safe_local_iterator()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp;&amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move construction. </para>
</para>

<para><formalpara><title>Postcondition</title>

<para>__x is singular and unattached </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a281a8ffa72a96b7599ad892efc6f4367_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ab45913e372960af8e21c2e246563e815"/><section>
    <title>_Safe_local_iterator()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>_Safe_local_iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_Safe_local_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _MutableIterator &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_Safe_local_iterator (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _MutableIterator, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, _Sequence &gt;::__type &gt; &amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_ab45913e372960af8e21c2e246563e815_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5"/><section>
    <title>_M_attach()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_attach</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_attach</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_attach (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Attach iterator to the given sequence. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_ae844aa725bcfae4523cd9c050821e0f5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_ae844aa725bcfae4523cd9c050821e0f5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ae844aa725bcfae4523cd9c050821e0f5"/><section>
    <title>_M_attach()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_attach</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_attach</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_attach (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Attach iterator to the given sequence. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_ae844aa725bcfae4523cd9c050821e0f5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a8da8a15a449165ca5f17393e82445fd3"/><section>
    <title>_M_attach_single()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_attach_single</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_attach_single</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_attach_single (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Likewise, but not thread-safe. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a8da8a15a449165ca5f17393e82445fd3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a8da8a15a449165ca5f17393e82445fd3"/><section>
    <title>_M_attach_single()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_attach_single</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_attach_single</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_attach_single (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Likewise, but not thread-safe. </para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a8da8a15a449165ca5f17393e82445fd3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a6aa79a341cb886c9747c9889a3794ed8"/><section>
    <title>_M_dereferenceable()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_dereferenceable</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_dereferenceable</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_dereferenceable ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is the iterator dereferenceable? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a6aa79a341cb886c9747c9889a3794ed8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a6aa79a341cb886c9747c9889a3794ed8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a6aa79a341cb886c9747c9889a3794ed8"/><section>
    <title>_M_dereferenceable()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_dereferenceable</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_dereferenceable</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_dereferenceable ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is the iterator dereferenceable? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a6aa79a341cb886c9747c9889a3794ed8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ac479c9cdb7d3aa286578868f78b5de2c"/><section>
    <title>_M_get_distance_to()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_get_distance_to</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_get_distance_to</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_get_distance_to (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __rhs) const</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ac479c9cdb7d3aa286578868f78b5de2c"/><section>
    <title>_M_get_distance_to()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_get_distance_to</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_get_distance_to</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_get_distance_to (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __rhs) const</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ab50969fa0dcf622a1dd07ee969bbeb67"/><section>
    <title>_M_get_sequence()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_get_sequence</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_get_sequence</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_get_sequence ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_ab50969fa0dcf622a1dd07ee969bbeb67_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ab50969fa0dcf622a1dd07ee969bbeb67"/><section>
    <title>_M_get_sequence()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_get_sequence</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_get_sequence</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_get_sequence ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a39baef008b322b79b4946d682018d4f2"/><section>
    <title>_M_in_same_bucket()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_in_same_bucket</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_in_same_bucket</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _Other &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_in_same_bucket (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Other, _Sequence &gt; &amp; __other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this iterator part of the same bucket as the other one? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a39baef008b322b79b4946d682018d4f2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a39baef008b322b79b4946d682018d4f2"/><section>
    <title>_M_in_same_bucket()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_in_same_bucket</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_in_same_bucket</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _Other &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_in_same_bucket (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Other, _Sequence &gt; &amp; __other) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this iterator part of the same bucket as the other one? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a39baef008b322b79b4946d682018d4f2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a230223745882ecdae6c0d0c68beb7027"/><section>
    <title>_M_incrementable()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_incrementable</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_incrementable</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_incrementable ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is the iterator incrementable? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a230223745882ecdae6c0d0c68beb7027_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a230223745882ecdae6c0d0c68beb7027_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a230223745882ecdae6c0d0c68beb7027"/><section>
    <title>_M_incrementable()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_incrementable</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_incrementable</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_incrementable ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is the iterator incrementable? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a230223745882ecdae6c0d0c68beb7027_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1aec66d198e8316a67bd61262fb635d63a"/><section>
    <title>_M_is_begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_is_begin</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_is_begin</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_is_begin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this iterator equal to the sequence&apos;s begin(bucket) iterator? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_aec66d198e8316a67bd61262fb635d63a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_aec66d198e8316a67bd61262fb635d63a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1aec66d198e8316a67bd61262fb635d63a"/><section>
    <title>_M_is_begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_is_begin</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_is_begin</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_is_begin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this iterator equal to the sequence&apos;s begin(bucket) iterator? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_aec66d198e8316a67bd61262fb635d63a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a10fc12a7ddc4e7d5a554ad0194b0cd90"/><section>
    <title>_M_is_end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_is_end</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_is_end</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_is_end ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end(bucket)</link> iterator? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a10fc12a7ddc4e7d5a554ad0194b0cd90_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a10fc12a7ddc4e7d5a554ad0194b0cd90_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a10fc12a7ddc4e7d5a554ad0194b0cd90"/><section>
    <title>_M_is_end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_is_end</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_is_end</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_is_end ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end(bucket)</link> iterator? </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a10fc12a7ddc4e7d5a554ad0194b0cd90_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a6105cf6a2df54bc899beadca987738d0"/><section>
    <title>_M_valid_range()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_valid_range</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_valid_range</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_valid_range (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp; __dist_info) const</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a6105cf6a2df54bc899beadca987738d0"/><section>
    <title>_M_valid_range()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_valid_range</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_M_valid_range</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_M_valid_range (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__local__iterator_1af57324288194a482b03c4d86422e12cb">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp; __dist_info) const</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8"/><section>
    <title>_S_constant()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_S_constant</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_S_constant</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_S_constant ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Determine if this is a constant iterator. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a65378aa3baca9f98cbc4bf7e0049a8c8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a65378aa3baca9f98cbc4bf7e0049a8c8"/><section>
    <title>_S_constant()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_S_constant</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>_S_constant</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>static constexpr <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::_S_constant ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[constexpr]</computeroutput></computeroutput></para><para>

<para>Determine if this is a constant iterator. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a0217a6f536468ef2d3a5b8853bfb2cdb"/><section>
    <title>base()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>base</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>base</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::base ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a0217a6f536468ef2d3a5b8853bfb2cdb"/><section>
    <title>base()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>base</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>base</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::base ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850"/><section>
    <title>base()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>base</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>base</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Return the underlying iterator. </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_aab499f4662f2037b50801691a38a3850_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1aab499f4662f2037b50801691a38a3850"/><section>
    <title>base()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>base</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>base</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::base ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Return the underlying iterator. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2"/><section>
    <title>bucket()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>bucket</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>bucket</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>size_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::bucket ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the bucket. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a15955b785b5ba3c61918a1c549fda0d2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a15955b785b5ba3c61918a1c549fda0d2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a15955b785b5ba3c61918a1c549fda0d2"/><section>
    <title>bucket()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>bucket</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>bucket</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>size_type <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::bucket ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the bucket. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a15955b785b5ba3c61918a1c549fda0d2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a996c63351ba75c6b08c729662f1e2809"/><section>
    <title>operator _Iterator()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator _Iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator _Iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator _Iterator ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a996c63351ba75c6b08c729662f1e2809"/><section>
    <title>operator _Iterator()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator _Iterator</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator _Iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator _Iterator ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a8e237d9370458e65ea6141b677e8e8f8"/><section>
    <title>operator*()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator dereference. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is dereferenceable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a8e237d9370458e65ea6141b677e8e8f8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a8e237d9370458e65ea6141b677e8e8f8"/><section>
    <title>operator*()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1a89b6f5e9a9d0f30daf0d5de8e60c6304">reference</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator dereference. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is dereferenceable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a8e237d9370458e65ea6141b677e8e8f8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a4341710e5e529c0bb185bc7e9a5926a8"/><section>
    <title>operator++()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator preincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a4341710e5e529c0bb185bc7e9a5926a8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a4341710e5e529c0bb185bc7e9a5926a8"/><section>
    <title>operator++()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator preincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a4341710e5e529c0bb185bc7e9a5926a8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a970d20722ad94a43afaa2e4db289f85e"/><section>
    <title>operator++()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a970d20722ad94a43afaa2e4db289f85e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a970d20722ad94a43afaa2e4db289f85e"/><section>
    <title>operator++()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a970d20722ad94a43afaa2e4db289f85e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a4789f11d5d5c248e478a79f590186f1a"/><section>
    <title>operator-&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-&gt;</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator dereference. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is dereferenceable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a4789f11d5d5c248e478a79f590186f1a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a4789f11d5d5c248e478a79f590186f1a"/><section>
    <title>operator-&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-&gt;</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator_1aeec3c52f9a6db1e4c33790d77fc76526">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator dereference. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is dereferenceable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a4789f11d5d5c248e478a79f590186f1a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a1e0306579e4d4782b254f5d5732e078f"/><section>
    <title>operator=()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator= (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp;&amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move assignment. </para>
</para>

<para><formalpara><title>Postcondition</title>

<para>__x is singular and unattached </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a1e0306579e4d4782b254f5d5732e078f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a1e0306579e4d4782b254f5d5732e078f"/><section>
    <title>operator=()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator= (<link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp;&amp; __x)<computeroutput>[inline]</computeroutput>, <computeroutput>[noexcept]</computeroutput></computeroutput></para><para>

<para>Move assignment. </para>
</para>

<para><formalpara><title>Postcondition</title>

<para>__x is singular and unattached </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a1e0306579e4d4782b254f5d5732e078f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a4370f29684bf7feab310caad4d1ba01f"/><section>
    <title>operator=()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy assignment. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a4370f29684bf7feab310caad4d1ba01f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a4370f29684bf7feab310caad4d1ba01f"/><section>
    <title>operator=()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__local__iterator">__gnu_debug::_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Safe_local_iterator</link>&lt; _Iterator, _Sequence &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy assignment. </para>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__local__iterator_a4370f29684bf7feab310caad4d1ba01f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a9ad6f0f2ef27349dd328892fb482f83e"/><section>
    <title>operator!=<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a9ad6f0f2ef27349dd328892fb482f83e"/><section>
    <title>operator!=<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a755ab58d6ca8fffdd98370b67bd53154"/><section>
    <title>operator!=<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a755ab58d6ca8fffdd98370b67bd53154"/><section>
    <title>operator!=<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a92075217670aa87377847edfec282c43"/><section>
    <title>operator==<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1a92075217670aa87377847edfec282c43"/><section>
    <title>operator==<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ada9340182ca30aaf786f085da86c0dcc"/><section>
    <title>operator==<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__local__iterator_1ada9340182ca30aaf786f085da86c0dcc"/><section>
    <title>operator==<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_local_iterator&lt; _Iterator, _Sequence &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__local__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2formatter_8h">formatter.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__local__iterator_8h">safe_local_iterator.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__local__iterator_8h">safe_local_iterator.h</link></section>
</section>
