<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2std__thread_8h_source" xml:lang="en-US">
<title>std_thread.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/std_thread.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;std::thread&#32;declarations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_THREAD_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_THREAD_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
37 
38 <emphasis role="preprocessor">#include&#32;&lt;iosfwd&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::basic_ostream</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;tuple&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::tuple</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/functional_hash.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;std::hash</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/invoke.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::__invoke</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;bits/refwrap.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;not&#32;required,&#32;but&#32;helpful&#32;to&#32;users</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;bits/unique_ptr.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::unique_ptr</emphasis>
44 
45 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
46 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/gthr.h&gt;</emphasis>
47 <emphasis role="preprocessor">#else</emphasis>
48 <emphasis role="preprocessor">#&#32;include&#32;&lt;errno.h&gt;</emphasis>
49 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/functexcept.h&gt;</emphasis>
50 <emphasis role="preprocessor">#endif</emphasis>
51 
52 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
53 {
54 _GLIBCXX_BEGIN_NAMESPACE_VERSION
55 
61 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>thread
62 &#32;&#32;{
63 &#32;&#32;<emphasis role="keyword">public</emphasis>:
64 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
65 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Abstract&#32;base&#32;class&#32;for&#32;types&#32;that&#32;wrap&#32;arbitrary&#32;functors&#32;to&#32;be</emphasis>
66 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;invoked&#32;in&#32;the&#32;new&#32;thread&#32;of&#32;execution.</emphasis>
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_State
68 &#32;&#32;&#32;&#32;{
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~_State();
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_run()&#32;=&#32;0;
71 &#32;&#32;&#32;&#32;};
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_State_ptr&#32;=&#32;unique_ptr&lt;_State&gt;;
73 
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_handle_type&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a306ab8a31415e59d7772b24c22ab60dc">__gthread_t</link>;
75 <emphasis role="preprocessor">#else</emphasis>
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>native_handle_type&#32;=&#32;int;
77 <emphasis role="preprocessor">#endif</emphasis>
78 
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;native_handle_type&#32;&#32;&#32;&#32;_M_thread;
83 
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
85 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>()&#32;noexcept&#32;:&#32;_M_thread()&#32;{&#32;}
86 
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
88 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>(native_handle_type&#32;__id)&#32;:&#32;_M_thread(__id)&#32;{&#32;}
89 
90 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>thread;
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>&gt;;
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
95 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keywordtype">id</emphasis>&#32;__x,&#32;<emphasis role="keywordtype">id</emphasis>&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>;
96 
97 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;strong_ordering
99 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keywordtype">id</emphasis>&#32;__x,&#32;<emphasis role="keywordtype">id</emphasis>&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>;
100 <emphasis role="preprocessor">#else</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keywordtype">id</emphasis>&#32;__x,&#32;<emphasis role="keywordtype">id</emphasis>&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>;
103 <emphasis role="preprocessor">#endif</emphasis>
104 
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">class</emphasis>&#32;_Traits&gt;
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
107 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__out,&#32;<emphasis role="keywordtype">id</emphasis>&#32;__id);
108 &#32;&#32;&#32;&#32;};
109 
110 &#32;&#32;<emphasis role="keyword">private</emphasis>:
111 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_id;
112 
113 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2097.&#32;&#32;packaged_task&#32;constructors&#32;should&#32;be&#32;constrained</emphasis>
115 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3039.&#32;Unnecessary&#32;decay&#32;in&#32;thread&#32;and&#32;packaged_task</emphasis>
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__not_same&#32;=&#32;__not_&lt;is_same&lt;__remove_cvref_t&lt;_Tp&gt;,&#32;thread&gt;&gt;;
118 
119 &#32;&#32;<emphasis role="keyword">public</emphasis>:
120 &#32;&#32;&#32;&#32;thread()&#32;noexcept&#32;=&#32;default;
121 
122 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Callable,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args,
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Require&lt;__not_same&lt;_Callable&gt;&gt;&gt;
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;thread(_Callable&amp;&amp;&#32;__f,&#32;_Args&amp;&amp;...&#32;__args)
127 &#32;&#32;&#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;__is_invocable&lt;typename&#32;decay&lt;_Callable&gt;::type,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;decay&lt;_Args&gt;::type...&gt;<link linkend="_classvalue">::value</link>,
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::thread&#32;arguments&#32;must&#32;be&#32;invocable&#32;after&#32;conversion&#32;to&#32;rvalues&quot;</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;);
132 
133 <emphasis role="preprocessor">#ifdef&#32;GTHR_ACTIVE_PROXY</emphasis>
134 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;reference&#32;to&#32;pthread_create,&#32;not&#32;just&#32;the&#32;gthr&#32;weak&#32;symbol.</emphasis>
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__depend&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>(*)()<emphasis role="keyword">&gt;</emphasis>(&amp;<link linkend="__classes_2lib_2pthread_8h_1ab3431d2d45bf174acdcecde5dac5839c">pthread_create</link>);
136 <emphasis role="preprocessor">#else</emphasis>
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__depend&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
138 <emphasis role="preprocessor">#endif</emphasis>
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Wrapper&#32;=&#32;_Call_wrapper&lt;_Callable,&#32;_Args...&gt;;
140 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;call&#32;wrapper&#32;with&#32;DECAY_COPY(__f)&#32;as&#32;its&#32;target&#32;object</emphasis>
141 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;DECAY_COPY(__args)...&#32;as&#32;its&#32;bound&#32;argument&#32;entities.</emphasis>
142 &#32;&#32;&#32;&#32;_M_start_thread(_State_ptr(<emphasis role="keyword">new</emphasis>&#32;_State_impl&lt;_Wrapper&gt;(
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Callable&gt;(__f),&#32;std::forward&lt;_Args&gt;(__args)...)),
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__depend);
145 &#32;&#32;&#32;&#32;&#32;&#32;}
146 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
147 
148 &#32;&#32;&#32;&#32;~thread()
149 &#32;&#32;&#32;&#32;{
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(joinable())
151 &#32;&#32;&#32;&#32;std::__terminate();
152 &#32;&#32;&#32;&#32;}
153 
154 &#32;&#32;&#32;&#32;thread(<emphasis role="keyword">const</emphasis>&#32;thread&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
155 
156 &#32;&#32;&#32;&#32;thread(thread&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
157 &#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__t);&#32;}
158 
159 &#32;&#32;&#32;&#32;thread&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;thread&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
160 
161 &#32;&#32;&#32;&#32;thread&amp;&#32;operator=(thread&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
162 &#32;&#32;&#32;&#32;{
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(joinable())
164 &#32;&#32;&#32;&#32;std::__terminate();
165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__t);
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
167 &#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
170 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(thread&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
171 &#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_id,&#32;__t._M_id);&#32;}
172 
173 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
174 &#32;&#32;&#32;&#32;joinable()&#32;const&#32;noexcept
175 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(_M_id&#32;==&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>());&#32;}
176 
177 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
178 &#32;&#32;&#32;&#32;join();
179 
180 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
181 &#32;&#32;&#32;&#32;detach();
182 
183 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">id</emphasis>
184 &#32;&#32;&#32;&#32;get_id()&#32;const&#32;noexcept
185 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_id;&#32;}
186 
189 &#32;&#32;&#32;&#32;native_handle_type
190 &#32;&#32;&#32;&#32;native_handle()
191 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_id._M_thread;&#32;}
192 
193 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;a&#32;value&#32;that&#32;hints&#32;at&#32;the&#32;number&#32;of&#32;hardware&#32;thread&#32;contexts.</emphasis>
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
195 &#32;&#32;&#32;&#32;hardware_concurrency()&#32;noexcept;
196 
197 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
198 &#32;&#32;<emphasis role="keyword">private</emphasis>:
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Callable&gt;
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_State_impl&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_State
201 &#32;&#32;&#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;_Callable&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_func;
203 
204 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
205 &#32;&#32;&#32;&#32;&#32;&#32;_State_impl(_Args&amp;&amp;...&#32;__args)
206 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_func{{std::forward&lt;_Args&gt;(__args)...}}
207 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
208 
209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
210 &#32;&#32;&#32;&#32;_M_run()&#32;{&#32;_M_func();&#32;}
211 &#32;&#32;&#32;&#32;&#32;&#32;};
212 
213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
214 &#32;&#32;&#32;&#32;_M_start_thread(_State_ptr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*)());
215 
216 <emphasis role="preprocessor">#if&#32;_GLIBCXX_THREAD_ABI_COMPAT</emphasis>
217 &#32;&#32;<emphasis role="keyword">public</emphasis>:
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Impl_base;
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;shared_ptr&lt;_Impl_base&gt;&#32;&#32;__shared_base_type;
220 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Impl_base
221 &#32;&#32;&#32;&#32;{
222 &#32;&#32;&#32;&#32;&#32;&#32;__shared_base_type&#32;&#32;&#32;&#32;_M_this_ptr;
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;~_Impl_base()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_run()&#32;=&#32;0;
225 &#32;&#32;&#32;&#32;};
226 
227 &#32;&#32;<emphasis role="keyword">private</emphasis>:
228 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
229 &#32;&#32;&#32;&#32;_M_start_thread(__shared_base_type,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*)());
230 
231 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
232 &#32;&#32;&#32;&#32;_M_start_thread(__shared_base_type);
233 <emphasis role="preprocessor">#endif</emphasis>
234 
235 &#32;&#32;<emphasis role="keyword">private</emphasis>:
236 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;call&#32;wrapper&#32;that&#32;does&#32;INVOKE(forwarded&#32;tuple&#32;elements...)</emphasis>
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tuple&gt;
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Invoker
239 &#32;&#32;&#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;_Tuple&#32;_M_t;
241 
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__result;
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__result&lt;tuple&lt;_Fn,&#32;_Args...&gt;&gt;
246 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__invoke_result&lt;_Fn,&#32;_Args...&gt;
247 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
248 
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Ind&gt;
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__result&lt;_Tuple&gt;::type
251 &#32;&#32;&#32;&#32;&#32;&#32;_M_invoke(_Index_tuple&lt;_Ind...&gt;)
252 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke(std::get&lt;_Ind&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_t))...);&#32;}
253 
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__result&lt;_Tuple&gt;::type
255 &#32;&#32;&#32;&#32;operator()()
256 &#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Indices
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Build_index_tuple&lt;tuple_size&lt;_Tuple&gt;::value&gt;::__type;
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_invoke(_Indices());
260 &#32;&#32;&#32;&#32;}
261 &#32;&#32;&#32;&#32;&#32;&#32;};
262 
263 &#32;&#32;<emphasis role="keyword">public</emphasis>:
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Call_wrapper&#32;=&#32;_Invoker&lt;tuple&lt;typename&#32;decay&lt;_Tp&gt;::type...&gt;&gt;;
266 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
267 &#32;&#32;};
268 
269 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
270 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;thread::join()&#32;{&#32;std::__throw_system_error(EINVAL);&#32;}
271 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;thread::detach()&#32;{&#32;std::__throw_system_error(EINVAL);&#32;}
272 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;thread::hardware_concurrency()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
273 <emphasis role="preprocessor">#endif</emphasis>
274 
275 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
276 &#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(thread&amp;&#32;__x,&#32;thread&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
277 &#32;&#32;{&#32;__x.swap(__y);&#32;}
278 
279 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
280 &#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(thread::id&#32;__x,&#32;thread::id&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
281 &#32;&#32;{
282 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pthread_equal&#32;is&#32;undefined&#32;if&#32;either&#32;thread&#32;ID&#32;is&#32;not&#32;valid,&#32;so&#32;we</emphasis>
283 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&apos;t&#32;safely&#32;use&#32;__gthread_equal&#32;on&#32;default-constructed&#32;values&#32;(nor</emphasis>
284 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;non-zero&#32;value&#32;returned&#32;by&#32;this_thread::get_id()&#32;for</emphasis>
285 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;single-threaded&#32;programs&#32;using&#32;GNU&#32;libc).&#32;Assume&#32;EqualityComparable.</emphasis>
286 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_thread&#32;==&#32;__y._M_thread;
287 &#32;&#32;}
288 
289 &#32;&#32;<emphasis role="comment">//&#32;N.B.&#32;other&#32;comparison&#32;operators&#32;are&#32;defined&#32;in&#32;&lt;thread&gt;</emphasis>
290 
291 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;889.</emphasis>
293 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
294 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;thread::<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>&gt;
295 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;thread::id&gt;
296 &#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
298 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;thread::id&amp;&#32;__id)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Hash_impl::hash(__id._M_thread);&#32;}
300 &#32;&#32;&#32;&#32;};
301 
302 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>this_thread
303 &#32;&#32;{
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;thread::id
306 &#32;&#32;&#32;&#32;get_id()&#32;noexcept
307 &#32;&#32;&#32;&#32;{
308 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thread::id(1);
310 <emphasis role="preprocessor">#elif&#32;defined&#32;_GLIBCXX_NATIVE_THREAD_ID</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thread::id(_GLIBCXX_NATIVE_THREAD_ID);
312 <emphasis role="preprocessor">#else</emphasis>
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;thread::id(__gthread_self());
314 <emphasis role="preprocessor">#endif</emphasis>
315 &#32;&#32;&#32;&#32;}
316 
318 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
319 &#32;&#32;&#32;&#32;yield()&#32;noexcept
320 &#32;&#32;&#32;&#32;{
321 <emphasis role="preprocessor">#if&#32;defined&#32;_GLIBCXX_HAS_GTHREADS&#32;&amp;&amp;&#32;defined&#32;_GLIBCXX_USE_SCHED_YIELD</emphasis>
322 &#32;&#32;&#32;&#32;&#32;&#32;__gthread_yield();
323 <emphasis role="preprocessor">#endif</emphasis>
324 &#32;&#32;&#32;&#32;}
325 
326 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;this_thread</emphasis>
327 
329 
330 _GLIBCXX_END_NAMESPACE_VERSION
331 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
332 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
333 
334 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_THREAD_H</emphasis>
</programlisting></section>
