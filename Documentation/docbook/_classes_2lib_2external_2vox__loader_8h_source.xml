<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2external_2vox__loader_8h_source" xml:lang="en-US">
<title>vox_loader.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/external/vox_loader.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;&#32;&#32;The&#32;MIT&#32;License&#32;(MIT)</emphasis>
3 <emphasis role="comment"></emphasis>
4 <emphasis role="comment">&#32;&#32;&#32;Copyright&#32;(c)&#32;2021&#32;Johann&#32;Nadalutti.</emphasis>
5 <emphasis role="comment"></emphasis>
6 <emphasis role="comment">&#32;&#32;&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy</emphasis>
7 <emphasis role="comment">&#32;&#32;&#32;of&#32;this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal</emphasis>
8 <emphasis role="comment">&#32;&#32;&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the&#32;rights</emphasis>
9 <emphasis role="comment">&#32;&#32;&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell</emphasis>
10 <emphasis role="comment">&#32;&#32;&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is</emphasis>
11 <emphasis role="comment">&#32;&#32;&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
12 <emphasis role="comment"></emphasis>
13 <emphasis role="comment">&#32;&#32;&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in</emphasis>
14 <emphasis role="comment">&#32;&#32;&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
15 <emphasis role="comment"></emphasis>
16 <emphasis role="comment">&#32;&#32;&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
17 <emphasis role="comment">&#32;&#32;&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
18 <emphasis role="comment">&#32;&#32;&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
19 <emphasis role="comment">&#32;&#32;&#32;AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
20 <emphasis role="comment">&#32;&#32;&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
21 <emphasis role="comment">&#32;&#32;&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN</emphasis>
22 <emphasis role="comment">&#32;&#32;&#32;THE&#32;SOFTWARE.</emphasis>
23 <emphasis role="comment"></emphasis>
24 <emphasis role="comment"></emphasis>
25 <emphasis role="comment">&#32;&#32;&#32;&#32;vox_loader&#32;-&#32;v1.01</emphasis>
26 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;no&#32;warranty&#32;implied;&#32;use&#32;at&#32;your&#32;own&#32;risk</emphasis>
27 <emphasis role="comment"></emphasis>
28 <emphasis role="comment">&#32;&#32;&#32;&#32;Do&#32;this:</emphasis>
29 <emphasis role="comment">&#32;&#32;&#32;&#32;#define&#32;VOX_LOADER_INCLUDE__H</emphasis>
30 <emphasis role="comment">&#32;&#32;&#32;&#32;before&#32;you&#32;include&#32;this&#32;file&#32;in*&#32;one*&#32;C&#32;or&#32;C++&#32;file&#32;to&#32;create&#32;the&#32;implementation.</emphasis>
31 <emphasis role="comment"></emphasis>
32 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;i.e.&#32;it&#32;should&#32;look&#32;like&#32;this:</emphasis>
33 <emphasis role="comment">&#32;&#32;&#32;&#32;#include&#32;...</emphasis>
34 <emphasis role="comment">&#32;&#32;&#32;&#32;#include&#32;...</emphasis>
35 <emphasis role="comment">&#32;&#32;&#32;&#32;#include&#32;...</emphasis>
36 <emphasis role="comment">&#32;&#32;&#32;&#32;#define&#32;VOX_LOADER_INCLUDE__H</emphasis>
37 <emphasis role="comment">&#32;&#32;&#32;&#32;#include&#32;&quot;vox_loader.h&quot;</emphasis>
38 <emphasis role="comment"></emphasis>
39 <emphasis role="comment">revision&#32;history:</emphasis>
40 <emphasis role="comment">&#32;&#32;&#32;&#32;1.00&#32;&#32;(2021-09-03)&#32;&#32;first&#32;released&#32;version</emphasis>
41 <emphasis role="comment">&#32;&#32;&#32;&#32;1.01&#32;&#32;(2021-09-07)&#32;&#32;Support&#32;custom&#32;memory&#32;allocators</emphasis>
42 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Removed&#32;Raylib&#32;dependencies</emphasis>
43 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Changed&#32;Vox_LoadFileName&#32;to&#32;Vox_LoadFromMemory</emphasis>
44 <emphasis role="comment">&#32;&#32;&#32;&#32;1.02&#32;&#32;(2021-09-10)&#32;&#32;@raysan5:&#32;Reviewed&#32;some&#32;formating</emphasis>
45 <emphasis role="comment">&#32;&#32;&#32;&#32;1.03&#32;&#32;(2021-10-02)&#32;&#32;@catmanl:&#32;Reduce&#32;warnings&#32;on&#32;gcc</emphasis>
46 <emphasis role="comment">&#32;&#32;&#32;&#32;1.04&#32;&#32;(2021-10-17)&#32;&#32;@warzes:&#32;Fixing&#32;the&#32;error&#32;of&#32;loading&#32;VOX&#32;models</emphasis>
47 <emphasis role="comment"></emphasis>
48 <emphasis role="comment">*/</emphasis>
49 
50 <emphasis role="preprocessor">#ifndef&#32;VOX_LOADER_H</emphasis>
51 <emphasis role="preprocessor">#define&#32;VOX_LOADER_H</emphasis>
52 
53 <emphasis role="comment">//&#32;Allow&#32;custom&#32;memory&#32;allocators</emphasis>
54 <emphasis role="preprocessor">#ifndef&#32;VOX_MALLOC</emphasis>
55 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VOX_MALLOC(sz)&#32;&#32;&#32;&#32;&#32;malloc(sz)</emphasis>
56 <emphasis role="preprocessor">#endif</emphasis>
57 <emphasis role="preprocessor">#ifndef&#32;VOX_CALLOC</emphasis>
58 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VOX_CALLOC(n,sz)&#32;&#32;&#32;calloc(n,sz)</emphasis>
59 <emphasis role="preprocessor">#endif</emphasis>
60 <emphasis role="preprocessor">#ifndef&#32;VOX_REALLOC</emphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VOX_REALLOC(n,sz)&#32;&#32;realloc(n,sz)</emphasis>
62 <emphasis role="preprocessor">#endif</emphasis>
63 <emphasis role="preprocessor">#ifndef&#32;VOX_FREE</emphasis>
64 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;VOX_FREE(p)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(p)</emphasis>
65 <emphasis role="preprocessor">#endif</emphasis>
66 
67 <emphasis role="preprocessor">#define&#32;VOX_SUCCESS&#32;(0)</emphasis>
68 <emphasis role="preprocessor">#define&#32;VOX_ERROR_FILE_NOT_FOUND&#32;(-1)</emphasis>
69 <emphasis role="preprocessor">#define&#32;VOX_ERROR_INVALID_FORMAT&#32;(-2)</emphasis>
70 <emphasis role="preprocessor">#define&#32;VOX_ERROR_FILE_VERSION_NOT_MATCH&#32;(-3)</emphasis>
71 
72 <emphasis role="comment">//&#32;VoxColor,&#32;4&#32;components,&#32;R8G8B8A8&#32;(32bit)</emphasis>
73 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
74 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1abe08814c2f72843fde4d8df41440d5a0">r</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9cd653b1648845554169fbc3a3f6d37a">g</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<link linkend="_struct_vox_color_1aa22b1ee4129e59b7401eeae2398a4713">a</link>;
75 }&#32;<link linkend="_struct_vox_color">VoxColor</link>;
76 
77 <emphasis role="comment">//&#32;VoxVector3,&#32;3&#32;components</emphasis>
78 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
79 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_vox_vector3_1a0dd3887ceaccb5ad357417f5cd575f94">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>;
80 }&#32;<link linkend="_struct_vox_vector3">VoxVector3</link>;
81 
82 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
83 &#32;&#32;&#32;&#32;<link linkend="_struct_vox_vector3">VoxVector3</link>*&#32;<link linkend="_struct_array_vector3_1a7107206e2ee2b44eec616e6d88653154">array</link>;
84 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;used,&#32;<link linkend="_struct_array_vector3_1a89f8851aa15ee417be4073fe1bac30bf">size</link>;
85 }&#32;<link linkend="_struct_array_vector3">ArrayVector3</link>;
86 
87 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
88 &#32;&#32;&#32;&#32;<link linkend="_struct_vox_color">VoxColor</link>*&#32;<link linkend="_struct_array_color_1abf6bd5966d233ba6a5578deecf8a5d26">array</link>;
89 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;used,&#32;<link linkend="_struct_array_color_1a0d87bd2635be67011829e2f44467f30d">size</link>;
90 }&#32;<link linkend="_struct_array_color">ArrayColor</link>;
91 
92 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
93 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>*&#32;<link linkend="_struct_array_u_short_1a233a5f8ba11a1827c3d1a9198318cd3b">array</link>;
94 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;used,&#32;<link linkend="_struct_array_u_short_1ac11cc891d0da881e1deac7f6fc117c47">size</link>;
95 }&#32;<link linkend="_struct_array_u_short">ArrayUShort</link>;
96 
97 <emphasis role="comment">//&#32;A&#32;chunk&#32;that&#32;contain&#32;voxels</emphasis>
98 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
99 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_struct_cube_chunk3_d_1ac9e30368373953e95ad47d04c5afcefa">m_array</link>;&#32;<emphasis role="comment">//If&#32;Sparse&#32;!=&#32;null</emphasis>
100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_cube_chunk3_d_1a135bfc3f64078069fc9fad61a11e2bad">arraySize</link>;&#32;<emphasis role="comment">//Size&#32;for&#32;m_array&#32;in&#32;bytes&#32;(DEBUG&#32;ONLY)</emphasis>
101 }&#32;<link linkend="_struct_cube_chunk3_d">CubeChunk3D</link>;
102 
103 <emphasis role="comment">//&#32;Array&#32;for&#32;voxels</emphasis>
104 <emphasis role="comment">//&#32;Array&#32;is&#32;divised&#32;into&#32;chunks&#32;of&#32;CHUNKSIZE*CHUNKSIZE*CHUNKSIZE&#32;voxels&#32;size</emphasis>
105 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
106 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Array&#32;size&#32;in&#32;voxels</emphasis>
107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1a0fd1d288bea06f99f29d76a031d60b13">sizeX</link>;
108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1a6d47e6fc09de54385778c3f795d251be">sizeY</link>;
109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1a96e9db711f9949c9c1286dfbbaea2dae">sizeZ</link>;
110 
111 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Chunks&#32;size&#32;into&#32;array&#32;(array&#32;is&#32;divised&#32;into&#32;chunks)</emphasis>
112 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1adcb8046b9ebb625e1487511a070e3968">chunksSizeX</link>;
113 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1acaba94d9c1925037760306ec997c6afb">chunksSizeY</link>;
114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1a9fab065e345c4053665e9c71c2f6a36f">chunksSizeZ</link>;
115 
116 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Chunks&#32;array</emphasis>
117 &#32;&#32;&#32;&#32;<link linkend="_struct_cube_chunk3_d">CubeChunk3D</link>*&#32;<link linkend="_struct_vox_array3_d_1a047dd707d986e64d057f9e2696fc36ac">m_arrayChunks</link>;
118 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1a7e2c5fff09ed51845f8b9511b607f409">arrayChunksSize</link>;&#32;<emphasis role="comment">//&#32;Size&#32;for&#32;m_arrayChunks&#32;in&#32;bytes&#32;(DEBUG&#32;ONLY)</emphasis>
119 
120 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1adb755076e614f78f04fa7482a7b38013">ChunkFlattenOffset</link>;
121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1abaa706aa7a5730a2853fe6b99a22cfbc">chunksAllocated</link>;
122 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_struct_vox_array3_d_1a2b6c71a9a2b86621d046ad70532a418a">chunksTotal</link>;
123 
124 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Arrays&#32;for&#32;mesh&#32;build</emphasis>
125 &#32;&#32;&#32;&#32;<link linkend="_struct_array_vector3">ArrayVector3</link>&#32;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>;
126 &#32;&#32;&#32;&#32;<link linkend="_struct_array_u_short">ArrayUShort</link>&#32;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>;
127 &#32;&#32;&#32;&#32;<link linkend="_struct_array_color">ArrayColor</link>&#32;<link linkend="_struct_vox_array3_d_1ac10a254ba627850ab919a3ce2ee3b7eb">colors</link>;
128 
129 &#32;&#32;&#32;&#32;<emphasis role="comment">//Palette&#32;for&#32;voxels</emphasis>
130 &#32;&#32;&#32;&#32;<link linkend="_struct_vox_color">VoxColor</link>&#32;palette[256];
131 
132 }&#32;<link linkend="_struct_vox_array3_d">VoxArray3D</link>;
133 
134 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
135 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prevents&#32;name&#32;mangling&#32;of&#32;functions</emphasis>
136 <emphasis role="preprocessor">#endif</emphasis>
137 
138 <emphasis role="comment">//&#32;Functions</emphasis>
139 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a5aa75a9fc80f5841011e0d2b58bcaa92">Vox_LoadFromMemory</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pvoxData,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;voxDataSize,&#32;<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;pvoxarray);
140 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1aef08af2fed6d8a5ac8e9b37ffe145e1f">Vox_FreeArrays</link>(<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;voxarray);
141 
142 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
143 }
144 <emphasis role="preprocessor">#endif</emphasis>
145 
146 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;VOX_LOADER_H</emphasis>
148 
149 
152 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Implementation</emphasis>
155 
156 <emphasis role="preprocessor">#ifdef&#32;VOX_LOADER_IMPLEMENTATION</emphasis>
157 
158 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
159 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
160 
162 <emphasis role="comment">//&#32;ArrayUShort&#32;helper</emphasis>
164 
165 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;initArrayUShort(<link linkend="_struct_array_u_short">ArrayUShort</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;initialSize)
166 {
167 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a52990d4aed79960d1b1e5d99c1278863">VOX_MALLOC</link>(initialSize&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>));
168 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;=&#32;0;
169 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;=&#32;initialSize;
170 }
171 
172 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;insertArrayUShort(<link linkend="_struct_array_u_short">ArrayUShort</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;element)
173 {
174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size)
175 &#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;*=&#32;2;
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1aed5ee5a22431e7fd07999869b4dae26f">VOX_REALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>));
178 &#32;&#32;&#32;&#32;}
179 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used++]&#32;=&#32;element;
180 }
181 
182 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;freeArrayUShort(<link linkend="_struct_array_u_short">ArrayUShort</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)
183 {
184 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1ae91153116919f385bd359f064b8393ab">VOX_FREE</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array);
185 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
186 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;=&#32;0;
187 }
188 
189 
191 <emphasis role="comment">//&#32;ArrayVector3&#32;helper</emphasis>
193 
194 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;initArrayVector3(<link linkend="_struct_array_vector3">ArrayVector3</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;initialSize)
195 {
196 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a52990d4aed79960d1b1e5d99c1278863">VOX_MALLOC</link>(initialSize&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_vox_vector3">VoxVector3</link>));
197 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;=&#32;0;
198 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;=&#32;initialSize;
199 }
200 
201 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;insertArrayVector3(<link linkend="_struct_array_vector3">ArrayVector3</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<link linkend="_struct_vox_vector3">VoxVector3</link>&#32;element)
202 {
203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size)
204 &#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;*=&#32;2;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1aed5ee5a22431e7fd07999869b4dae26f">VOX_REALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_vox_vector3">VoxVector3</link>));
207 &#32;&#32;&#32;&#32;}
208 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used++]&#32;=&#32;element;
209 }
210 
211 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;freeArrayVector3(<link linkend="_struct_array_vector3">ArrayVector3</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)
212 {
213 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1ae91153116919f385bd359f064b8393ab">VOX_FREE</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array);
214 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
215 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;=&#32;0;
216 }
217 
219 <emphasis role="comment">//&#32;ArrayColor&#32;helper</emphasis>
221 
222 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;initArrayColor(<link linkend="_struct_array_color">ArrayColor</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;initialSize)
223 {
224 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a52990d4aed79960d1b1e5d99c1278863">VOX_MALLOC</link>(initialSize&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_vox_color">VoxColor</link>));
225 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;=&#32;0;
226 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;=&#32;initialSize;
227 }
228 
229 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;insertArrayColor(<link linkend="_struct_array_color">ArrayColor</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<link linkend="_struct_vox_color">VoxColor</link>&#32;element)
230 {
231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size)
232 &#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;*=&#32;2;
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1aed5ee5a22431e7fd07999869b4dae26f">VOX_REALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_vox_color">VoxColor</link>));
235 &#32;&#32;&#32;&#32;}
236 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used++]&#32;=&#32;element;
237 }
238 
239 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;freeArrayColor(<link linkend="_struct_array_color">ArrayColor</link>*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>)
240 {
241 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1ae91153116919f385bd359f064b8393ab">VOX_FREE</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array);
242 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;array&#32;=&#32;<link linkend="__classes_2lib_2external_2miniaudio_8h_1a070d2ce7b6bb7e5c05602aa8c308d0c4">NULL</link>;
243 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;used&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>-&gt;size&#32;=&#32;0;
244 }
245 
246 
248 <emphasis role="comment">//&#32;Vox&#32;Loader</emphasis>
250 
251 <emphasis role="preprocessor">#define&#32;CHUNKSIZE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;16&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;chunk&#32;size&#32;(CHUNKSIZE*CHUNKSIZE*CHUNKSIZE)&#32;in&#32;voxels&#32;</emphasis>
252 <emphasis role="preprocessor">#define&#32;CHUNKSIZE_OPSHIFT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;1&lt;&lt;4=16&#32;-&gt;&#32;Warning&#32;depend&#32;of&#32;CHUNKSIZE</emphasis>
253 <emphasis role="preprocessor">#define&#32;CHUNK_FLATTENOFFSET_OPSHIFT&#32;&#32;8&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Warning&#32;depend&#32;of&#32;CHUNKSIZE</emphasis>
254 
255 <emphasis role="comment">//</emphasis>
256 <emphasis role="comment">//&#32;used&#32;right&#32;handed&#32;system&#32;and&#32;CCW&#32;face</emphasis>
257 <emphasis role="comment">//&#32;</emphasis>
258 <emphasis role="comment">//&#32;indexes&#32;for&#32;voxelcoords,&#32;per&#32;face&#32;orientation</emphasis>
259 <emphasis role="comment">//</emphasis>
260 
261 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;Y</emphasis>
262 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;|</emphasis>
263 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;o----X</emphasis>
264 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;/</emphasis>
265 <emphasis role="comment">//#&#32;&#32;&#32;&#32;Z&#32;&#32;&#32;&#32;&#32;2------------3</emphasis>
266 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/|</emphasis>
267 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;6------------7&#32;|</emphasis>
268 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;|&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;|</emphasis>
269 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|0&#32;----------|-&#32;1</emphasis>
270 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|/&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|/</emphasis>
271 <emphasis role="comment">//#&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4------------5</emphasis>
272 
273 <emphasis role="comment">//&#32;</emphasis>
274 <emphasis role="comment">//&#32;CCW</emphasis>
275 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;fv[6][4]&#32;=&#32;{
276 &#32;&#32;&#32;&#32;{0,&#32;2,&#32;6,&#32;4&#32;},&#32;<emphasis role="comment">//-X</emphasis>
277 &#32;&#32;&#32;&#32;{5,&#32;7,&#32;3,&#32;1&#32;},&#32;<emphasis role="comment">//+X</emphasis>
278 &#32;&#32;&#32;&#32;{0,&#32;4,&#32;5,&#32;1&#32;},&#32;<emphasis role="comment">//-y</emphasis>
279 &#32;&#32;&#32;&#32;{6,&#32;2,&#32;3,&#32;7&#32;},&#32;<emphasis role="comment">//+y</emphasis>
280 &#32;&#32;&#32;&#32;{1,&#32;3,&#32;2,&#32;0&#32;},&#32;<emphasis role="comment">//-Z</emphasis>
281 &#32;&#32;&#32;&#32;{4,&#32;6,&#32;7,&#32;5&#32;}&#32;&#32;<emphasis role="comment">//+Z</emphasis>
282 };
283 
284 <emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_vox_vector3">VoxVector3</link>&#32;SolidVertex[]&#32;=&#32;{
285 &#32;&#32;&#32;&#32;{0,&#32;0,&#32;0},&#32;&#32;&#32;<emphasis role="comment">//0</emphasis>
286 &#32;&#32;&#32;&#32;{1,&#32;0,&#32;0},&#32;&#32;&#32;<emphasis role="comment">//1</emphasis>
287 &#32;&#32;&#32;&#32;{0,&#32;1,&#32;0},&#32;&#32;&#32;<emphasis role="comment">//2</emphasis>
288 &#32;&#32;&#32;&#32;{1,&#32;1,&#32;0},&#32;&#32;&#32;<emphasis role="comment">//3</emphasis>
289 &#32;&#32;&#32;&#32;{0,&#32;0,&#32;1},&#32;&#32;&#32;<emphasis role="comment">//4</emphasis>
290 &#32;&#32;&#32;&#32;{1,&#32;0,&#32;1},&#32;&#32;&#32;<emphasis role="comment">//5</emphasis>
291 &#32;&#32;&#32;&#32;{0,&#32;1,&#32;1},&#32;&#32;&#32;<emphasis role="comment">//6</emphasis>
292 &#32;&#32;&#32;&#32;{1,&#32;1,&#32;1}&#32;&#32;&#32;&#32;<emphasis role="comment">//7</emphasis>
293 &#32;};
294 
295 <emphasis role="comment">//&#32;Allocated&#32;VoxArray3D&#32;size</emphasis>
296 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Vox_AllocArray(<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;pvoxarray,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_sx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_sy,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_sz)
297 {
298 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sx&#32;=&#32;_sx&#32;+&#32;((CHUNKSIZE&#32;-&#32;(_sx&#32;%&#32;CHUNKSIZE))&#32;%&#32;CHUNKSIZE);
299 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sy&#32;=&#32;_sy&#32;+&#32;((CHUNKSIZE&#32;-&#32;(_sy&#32;%&#32;CHUNKSIZE))&#32;%&#32;CHUNKSIZE);
300 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sz&#32;=&#32;_sz&#32;+&#32;((CHUNKSIZE&#32;-&#32;(_sz&#32;%&#32;CHUNKSIZE))&#32;%&#32;CHUNKSIZE);
301 
302 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chx&#32;=&#32;sx&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//Chunks&#32;Count&#32;in&#32;X</emphasis>
303 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chy&#32;=&#32;sy&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//Chunks&#32;Count&#32;in&#32;Y</emphasis>
304 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chz&#32;=&#32;sz&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//Chunks&#32;Count&#32;in&#32;Z</emphasis>
305 
306 &#32;&#32;&#32;&#32;<emphasis role="comment">//VoxArray3D*&#32;parray&#32;=&#32;(VoxArray3D*)VOX_MALLOC(sizeof(VoxArray3D));</emphasis>
307 &#32;&#32;&#32;&#32;pvoxarray-&gt;sizeX&#32;=&#32;sx;
308 &#32;&#32;&#32;&#32;pvoxarray-&gt;sizeY&#32;=&#32;sy;
309 &#32;&#32;&#32;&#32;pvoxarray-&gt;sizeZ&#32;=&#32;sz;
310 
311 &#32;&#32;&#32;&#32;pvoxarray-&gt;chunksSizeX&#32;=&#32;chx;
312 &#32;&#32;&#32;&#32;pvoxarray-&gt;chunksSizeY&#32;=&#32;chy;
313 &#32;&#32;&#32;&#32;pvoxarray-&gt;chunksSizeZ&#32;=&#32;chz;
314 
315 &#32;&#32;&#32;&#32;pvoxarray-&gt;ChunkFlattenOffset&#32;=&#32;(chy&#32;*&#32;chz);&#32;<emphasis role="comment">//m_arrayChunks[(x&#32;*&#32;(sy*sz))&#32;+&#32;(z&#32;*&#32;sy)&#32;+&#32;y]</emphasis>
316 
317 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Alloc&#32;chunks&#32;array</emphasis>
318 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_cube_chunk3_d">CubeChunk3D</link>)&#32;*&#32;chx&#32;*&#32;chy&#32;*&#32;chz;
319 &#32;&#32;&#32;&#32;pvoxarray-&gt;m_arrayChunks&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a52990d4aed79960d1b1e5d99c1278863">VOX_MALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
320 &#32;&#32;&#32;&#32;pvoxarray-&gt;arrayChunksSize&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;
321 
322 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Init&#32;chunks&#32;array</emphasis>
323 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=&#32;chx&#32;*&#32;chy&#32;*&#32;chz;
324 &#32;&#32;&#32;&#32;pvoxarray-&gt;chunksTotal&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;
325 &#32;&#32;&#32;&#32;pvoxarray-&gt;chunksAllocated&#32;=&#32;0;
326 
327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;&#32;i++)
328 &#32;&#32;&#32;&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pvoxarray-&gt;m_arrayChunks[i].m_array&#32;=&#32;0;
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pvoxarray-&gt;m_arrayChunks[i].arraySize&#32;=&#32;0;
331 &#32;&#32;&#32;&#32;}
332 }
333 
334 <emphasis role="comment">//&#32;Set&#32;voxel&#32;ID&#32;from&#32;its&#32;position&#32;into&#32;VoxArray3D</emphasis>
335 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Vox_SetVoxel(<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;pvoxarray,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keywordtype">id</emphasis>)
336 {
337 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;chunk&#32;from&#32;array&#32;pos</emphasis>
338 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chX&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//x&#32;/&#32;CHUNKSIZE;</emphasis>
339 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chY&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//y&#32;/&#32;CHUNKSIZE;</emphasis>
340 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chZ&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//z&#32;/&#32;CHUNKSIZE;</emphasis>
341 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>&#32;=&#32;(chX&#32;*&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1adb755076e614f78f04fa7482a7b38013">ChunkFlattenOffset</link>)&#32;+&#32;(chZ&#32;*&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1acaba94d9c1925037760306ec997c6afb">chunksSizeY</link>)&#32;+&#32;chY;
342 
343 &#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(offset&#32;&gt;&#32;voxarray-&gt;arrayChunksSize)</emphasis>
344 &#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
345 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;TraceLog(LOG_ERROR,&#32;&quot;Out&#32;of&#32;array&quot;);</emphasis>
346 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
347 
348 &#32;&#32;&#32;&#32;<link linkend="_struct_cube_chunk3_d">CubeChunk3D</link>*&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>&#32;=&#32;&amp;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a047dd707d986e64d057f9e2696fc36ac">m_arrayChunks</link>[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>];
349 
350 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;Chunk</emphasis>
351 &#32;&#32;&#32;&#32;chX&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;(chX&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT);&#32;<emphasis role="comment">//x&#32;-&#32;(bx&#32;*&#32;CHUNKSIZE);</emphasis>
352 &#32;&#32;&#32;&#32;chY&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;-&#32;(chY&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT);&#32;<emphasis role="comment">//y&#32;-&#32;(by&#32;*&#32;CHUNKSIZE);</emphasis>
353 &#32;&#32;&#32;&#32;chZ&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;-&#32;(chZ&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT);&#32;<emphasis role="comment">//z&#32;-&#32;(bz&#32;*&#32;CHUNKSIZE);</emphasis>
354 
355 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array&#32;==&#32;0)
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;=&#32;CHUNKSIZE&#32;*&#32;CHUNKSIZE&#32;*&#32;CHUNKSIZE;
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array&#32;=&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a52990d4aed79960d1b1e5d99c1278863">VOX_MALLOC</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;arraySize&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array,&#32;0,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
361 
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1abaa706aa7a5730a2853fe6b99a22cfbc">chunksAllocated</link>++;
363 &#32;&#32;&#32;&#32;}
364 
365 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>&#32;=&#32;(chX&#32;&lt;&lt;&#32;CHUNK_FLATTENOFFSET_OPSHIFT)&#32;+&#32;(chZ&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT)&#32;+&#32;chY;
366 
367 &#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(offset&#32;&gt;&#32;chunk-&gt;arraySize)</emphasis>
368 &#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
369 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;TraceLog(LOG_ERROR,&#32;&quot;Out&#32;of&#32;array&quot;);</emphasis>
370 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
371 
372 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>]&#32;=&#32;<link linkend="__classes_2lib_2external_2glfw_2src_2cocoa__platform_8h_1ae52362b10d585638f5b96140e90f1b7a">id</link>;
373 }
374 
375 <emphasis role="comment">//&#32;Get&#32;voxel&#32;ID&#32;from&#32;its&#32;position&#32;into&#32;VoxArray3D</emphasis>
376 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;Vox_GetVoxel(<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;pvoxarray,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>)
377 {
378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;&#32;0&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&lt;&#32;0&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;&lt;&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
379 
380 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;=&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a0fd1d288bea06f99f29d76a031d60b13">sizeX</link>&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&gt;=&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a6d47e6fc09de54385778c3f795d251be">sizeY</link>&#32;||&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;&gt;=&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a96e9db711f9949c9c1286dfbbaea2dae">sizeZ</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
381 
382 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;chunk&#32;from&#32;array&#32;pos</emphasis>
383 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chX&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//x&#32;/&#32;CHUNKSIZE;</emphasis>
384 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chY&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//y&#32;/&#32;CHUNKSIZE;</emphasis>
385 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;chZ&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;&gt;&gt;&#32;CHUNKSIZE_OPSHIFT;&#32;<emphasis role="comment">//z&#32;/&#32;CHUNKSIZE;</emphasis>
386 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>&#32;=&#32;(chX&#32;*&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1adb755076e614f78f04fa7482a7b38013">ChunkFlattenOffset</link>)&#32;+&#32;(chZ&#32;*&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1acaba94d9c1925037760306ec997c6afb">chunksSizeY</link>)&#32;+&#32;chY;
387 
388 &#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(offset&#32;&gt;&#32;voxarray-&gt;arrayChunksSize)</emphasis>
389 &#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
390 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;TraceLog(LOG_ERROR,&#32;&quot;Out&#32;of&#32;array&quot;);</emphasis>
391 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
392 
393 &#32;&#32;&#32;&#32;<link linkend="_struct_cube_chunk3_d">CubeChunk3D</link>*&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>&#32;=&#32;&amp;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a047dd707d986e64d057f9e2696fc36ac">m_arrayChunks</link>[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>];
394 
395 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;Chunk</emphasis>
396 &#32;&#32;&#32;&#32;chX&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;-&#32;(chX&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT);&#32;<emphasis role="comment">//x&#32;-&#32;(bx&#32;*&#32;CHUNKSIZE);</emphasis>
397 &#32;&#32;&#32;&#32;chY&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;-&#32;(chY&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT);&#32;<emphasis role="comment">//y&#32;-&#32;(by&#32;*&#32;CHUNKSIZE);</emphasis>
398 &#32;&#32;&#32;&#32;chZ&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;-&#32;(chZ&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT);&#32;<emphasis role="comment">//z&#32;-&#32;(bz&#32;*&#32;CHUNKSIZE);</emphasis>
399 
400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array&#32;==&#32;0)
401 &#32;&#32;&#32;&#32;{
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
403 &#32;&#32;&#32;&#32;}
404 
405 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>&#32;=&#32;(chX&#32;&lt;&lt;&#32;CHUNK_FLATTENOFFSET_OPSHIFT)&#32;+&#32;(chZ&#32;&lt;&lt;&#32;CHUNKSIZE_OPSHIFT)&#32;+&#32;chY;
406 
407 &#32;&#32;&#32;&#32;<emphasis role="comment">//if&#32;(offset&#32;&gt;&#32;chunk-&gt;arraySize)</emphasis>
408 &#32;&#32;&#32;&#32;<emphasis role="comment">//{</emphasis>
409 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;TraceLog(LOG_ERROR,&#32;&quot;Out&#32;of&#32;array&quot;);</emphasis>
410 &#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
411 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array[<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ae60229696c2ec17c9e00af4899bf738e">offset</link>];
412 
413 }
414 
415 <emphasis role="comment">//&#32;Calc&#32;visibles&#32;faces&#32;from&#32;a&#32;voxel&#32;position</emphasis>
416 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;Vox_CalcFacesVisible(<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;pvoxArray,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cy,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cz)
417 {
418 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;idXm1&#32;=&#32;Vox_GetVoxel(pvoxArray,&#32;cx&#32;-&#32;1,&#32;cy,&#32;cz);
419 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;idXp1&#32;=&#32;Vox_GetVoxel(pvoxArray,&#32;cx&#32;+&#32;1,&#32;cy,&#32;cz);
420 
421 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;idYm1&#32;=&#32;Vox_GetVoxel(pvoxArray,&#32;cx,&#32;cy&#32;-&#32;1,&#32;cz);
422 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;idYp1&#32;=&#32;Vox_GetVoxel(pvoxArray,&#32;cx,&#32;cy&#32;+&#32;1,&#32;cz);
423 
424 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;idZm1&#32;=&#32;Vox_GetVoxel(pvoxArray,&#32;cx,&#32;cy,&#32;cz&#32;-&#32;1);
425 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;idZp1&#32;=&#32;Vox_GetVoxel(pvoxArray,&#32;cx,&#32;cy,&#32;cz&#32;+&#32;1);
426 
427 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;byVFMask&#32;=&#32;0;
428 
429 &#32;&#32;&#32;&#32;<emphasis role="comment">//#-x</emphasis>
430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idXm1&#32;==&#32;0)&#32;byVFMask&#32;|=&#32;(1&#32;&lt;&lt;&#32;0);
431 
432 &#32;&#32;&#32;&#32;<emphasis role="comment">//#+x</emphasis>
433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idXp1&#32;==&#32;0)&#32;byVFMask&#32;|=&#32;(1&#32;&lt;&lt;&#32;1);
434 
435 &#32;&#32;&#32;&#32;<emphasis role="comment">//#-y</emphasis>
436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idYm1&#32;==&#32;0)&#32;byVFMask&#32;|=&#32;(1&#32;&lt;&lt;&#32;2);
437 
438 &#32;&#32;&#32;&#32;<emphasis role="comment">//#+y</emphasis>
439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idYp1&#32;==&#32;0)&#32;byVFMask&#32;|=&#32;(1&#32;&lt;&lt;&#32;3);
440 
441 &#32;&#32;&#32;&#32;<emphasis role="comment">//#-z</emphasis>
442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idZm1&#32;==&#32;0)&#32;byVFMask&#32;|=&#32;(1&#32;&lt;&lt;&#32;4);
443 
444 &#32;&#32;&#32;&#32;<emphasis role="comment">//#+z</emphasis>
445 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(idZp1&#32;==&#32;0)&#32;byVFMask&#32;|=&#32;(1&#32;&lt;&lt;&#32;5);
446 
447 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;byVFMask;
448 }
449 
450 <emphasis role="comment">//&#32;Get&#32;a&#32;vertex&#32;position&#32;from&#32;a&#32;voxel&apos;s&#32;corner</emphasis>
451 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_vox_vector3">VoxVector3</link>&#32;Vox_GetVertexPosition(<emphasis role="keywordtype">int</emphasis>&#32;_wcx,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_wcy,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_wcz,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_nNumVertex)
452 {
453 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6">scale</link>&#32;=&#32;0.25;
454 &#32;&#32;&#32;&#32;
455 &#32;&#32;&#32;&#32;<link linkend="_struct_vox_vector3">VoxVector3</link>&#32;vtx&#32;=&#32;SolidVertex[_nNumVertex];
456 &#32;&#32;&#32;&#32;vtx.<link linkend="_struct_vox_vector3_1a0dd3887ceaccb5ad357417f5cd575f94">x</link>&#32;=&#32;(vtx.<link linkend="_struct_vox_vector3_1a0dd3887ceaccb5ad357417f5cd575f94">x</link>&#32;+&#32;_wcx)&#32;*&#32;scale;
457 &#32;&#32;&#32;&#32;vtx.<link linkend="_struct_vox_vector3_1a88a13b02259abcdf9a3746e6cc01d018">y</link>&#32;=&#32;(vtx.<link linkend="_struct_vox_vector3_1a88a13b02259abcdf9a3746e6cc01d018">y</link>&#32;+&#32;_wcy)&#32;*&#32;scale;
458 &#32;&#32;&#32;&#32;vtx.<link linkend="_struct_vox_vector3_1ad9c924cef36d2caf3f8566d1b956b003">z</link>&#32;=&#32;(vtx.<link linkend="_struct_vox_vector3_1ad9c924cef36d2caf3f8566d1b956b003">z</link>&#32;+&#32;_wcz)&#32;*&#32;scale;
459 &#32;&#32;&#32;&#32;
460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;vtx;
461 }
462 
463 <emphasis role="comment">//&#32;Build&#32;a&#32;voxel&#32;vertices/colors/indices</emphasis>
464 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Vox_Build_Voxel(<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;pvoxArray,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;matID)
465 {
466 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;byVFMask&#32;=&#32;Vox_CalcFacesVisible(pvoxArray,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>);
467 
468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(byVFMask&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>;
469 
470 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;j;
471 &#32;&#32;&#32;&#32;<link linkend="_struct_vox_vector3">VoxVector3</link>&#32;vertComputed[8];
472 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bVertexComputed[8];
473 &#32;&#32;&#32;&#32;memset(vertComputed,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(vertComputed));
474 &#32;&#32;&#32;&#32;memset(bVertexComputed,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(bVertexComputed));
475 
476 &#32;&#32;&#32;&#32;<emphasis role="comment">//For&#32;each&#32;Cube&apos;s&#32;faces</emphasis>
477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)&#32;<emphasis role="comment">//&#32;6&#32;faces</emphasis>
478 &#32;&#32;&#32;&#32;{
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((byVFMask&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;i))&#32;!=&#32;0)&#32;<emphasis role="comment">//If&#32;face&#32;is&#32;visible</emphasis>
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(j&#32;=&#32;0;&#32;j&#32;&lt;&#32;4;&#32;j++)&#32;&#32;&#32;<emphasis role="comment">//&#32;4&#32;corners</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;&#32;nNumVertex&#32;=&#32;fv[i][j];&#32;&#32;<emphasis role="comment">//Face,Corner</emphasis>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(bVertexComputed[nNumVertex]&#32;==&#32;0)&#32;<emphasis role="comment">//if&#32;never&#32;calc</emphasis>
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bVertexComputed[nNumVertex]&#32;=&#32;1;
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vertComputed[nNumVertex]&#32;=&#32;Vox_GetVertexPosition(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>,&#32;nNumVertex);
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
491 &#32;&#32;&#32;&#32;}
492 
493 &#32;&#32;&#32;&#32;<emphasis role="comment">//Add&#32;face</emphasis>
494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;6;&#32;i++)<emphasis role="comment">//&#32;6&#32;faces</emphasis>
495 &#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((byVFMask&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;i))&#32;==&#32;0)
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//Face&#32;invisible</emphasis>
498 
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7062a23d1d434121d4a88f530703d06a">v0</link>&#32;=&#32;fv[i][0];&#32;&#32;<emphasis role="comment">//Face,&#32;Corner</emphasis>
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>&#32;=&#32;fv[i][1];&#32;&#32;<emphasis role="comment">//Face,&#32;Corner</emphasis>
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>&#32;=&#32;fv[i][2];&#32;&#32;<emphasis role="comment">//Face,&#32;Corner</emphasis>
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1acc806b31cbf466ceba6555983d8b814d">v3</link>&#32;=&#32;fv[i][3];&#32;&#32;<emphasis role="comment">//Face,&#32;Corner</emphasis>
503 
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Arrays</emphasis>
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;idx&#32;=&#32;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>.<link linkend="_struct_array_vector3_1ae7089580e9253c9d2a64c1204ea6d71f">used</link>;
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayVector3(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>,&#32;vertComputed[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a7062a23d1d434121d4a88f530703d06a">v0</link>]);
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayVector3(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>,&#32;vertComputed[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>]);
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayVector3(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>,&#32;vertComputed[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>]);
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayVector3(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>,&#32;vertComputed[<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1acc806b31cbf466ceba6555983d8b814d">v3</link>]);
510 
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vox_color">VoxColor</link>&#32;col&#32;=&#32;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a49ef86b312dfdf1083437d208f535f99">palette</link>[matID];
512 
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayColor(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1ac10a254ba627850ab919a3ce2ee3b7eb">colors</link>,&#32;col);
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayColor(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1ac10a254ba627850ab919a3ce2ee3b7eb">colors</link>,&#32;col);
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayColor(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1ac10a254ba627850ab919a3ce2ee3b7eb">colors</link>,&#32;col);
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayColor(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1ac10a254ba627850ab919a3ce2ee3b7eb">colors</link>,&#32;col);
517 
518 
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//v0&#32;-&#32;v1&#32;-&#32;v2,&#32;v0&#32;-&#32;v2&#32;-&#32;v3</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayUShort(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>,&#32;idx&#32;+&#32;0);
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayUShort(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>,&#32;idx&#32;+&#32;2);
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayUShort(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>,&#32;idx&#32;+&#32;1);
523 
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayUShort(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>,&#32;idx&#32;+&#32;0);
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayUShort(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>,&#32;idx&#32;+&#32;3);
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertArrayUShort(&amp;pvoxArray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>,&#32;idx&#32;+&#32;2);
527 &#32;&#32;&#32;&#32;}
528 }
529 
530 <emphasis role="comment">//&#32;MagicaVoxel&#32;*.vox&#32;file&#32;format&#32;Loader</emphasis>
531 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a5aa75a9fc80f5841011e0d2b58bcaa92">Vox_LoadFromMemory</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pvoxData,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;voxDataSize,&#32;<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;pvoxarray)
532 {
534 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;VOX&#32;file</emphasis>
535 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;4&#32;bytes:&#32;magic&#32;number&#32;(&apos;V&apos;&#32;&apos;O&apos;&#32;&apos;X&apos;&#32;&apos;space&apos;)</emphasis>
536 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;4&#32;bytes:&#32;version&#32;number&#32;(current&#32;version&#32;is&#32;150)</emphasis>
537 
538 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@raysan5:&#32;Reviewed&#32;(unsigned&#32;long)&#32;-&gt;&#32;(unsigned&#32;int),&#32;possible&#32;issue&#32;with&#32;Ubuntu&#32;18.04&#32;64bit</emphasis>
539 
540 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@raysan5:&#32;reviewed&#32;signature&#32;loading</emphasis>
541 
542 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;fileData&#32;=&#32;pvoxData;
543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;fileDataPtr&#32;=&#32;fileData;
544 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;endfileDataPtr&#32;=&#32;fileData&#32;+&#32;voxDataSize;
545 
546 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strncmp((<emphasis role="keywordtype">char</emphasis>*)fileDataPtr,&#32;<emphasis role="stringliteral">&quot;VOX&#32;&quot;</emphasis>,&#32;4)&#32;!=&#32;0)
547 &#32;&#32;&#32;&#32;{
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a3618db529dba01be65652915e3562b13">VOX_ERROR_INVALID_FORMAT</link>;&#32;<emphasis role="comment">//&quot;Not&#32;an&#32;MagicaVoxel&#32;File&#32;format&quot;</emphasis>
549 &#32;&#32;&#32;&#32;}
550 
551 &#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;4;
552 
553 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@raysan5:&#32;reviewed&#32;version&#32;loading</emphasis>
554 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespaceversion">version</link>&#32;=&#32;0;
555 &#32;&#32;&#32;&#32;<link linkend="_namespaceversion">version</link>&#32;=&#32;((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)fileDataPtr)[0];
556 &#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;4;
557 
558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespaceversion">version</link>&#32;!=&#32;150)
559 &#32;&#32;&#32;&#32;{
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a75a406f1d3aa6f21e77bca092ad333df">VOX_ERROR_FILE_VERSION_NOT_MATCH</link>;&#32;<emphasis role="comment">//&quot;MagicaVoxel&#32;version&#32;doesn&apos;t&#32;match&quot;</emphasis>
561 &#32;&#32;&#32;&#32;}
562 
563 
564 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;header</emphasis>
565 &#32;&#32;&#32;&#32;<emphasis role="comment">//4&#32;bytes:&#32;chunk&#32;id</emphasis>
566 &#32;&#32;&#32;&#32;<emphasis role="comment">//4&#32;bytes:&#32;size&#32;of&#32;chunk&#32;contents&#32;(n)</emphasis>
567 &#32;&#32;&#32;&#32;<emphasis role="comment">//4&#32;bytes:&#32;total&#32;size&#32;of&#32;children&#32;chunks(m)</emphasis>
568 
570 &#32;&#32;&#32;&#32;<emphasis role="comment">//n&#32;bytes:&#32;chunk&#32;contents</emphasis>
571 
573 &#32;&#32;&#32;&#32;<emphasis role="comment">//{&#32;child&#32;chunk&#32;0&#32;}</emphasis>
574 &#32;&#32;&#32;&#32;<emphasis role="comment">//{&#32;child&#32;chunk&#32;1&#32;}</emphasis>
575 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;sizeX,&#32;sizeY,&#32;sizeZ;
576 &#32;&#32;&#32;&#32;sizeX&#32;=&#32;sizeY&#32;=&#32;sizeZ&#32;=&#32;0;
577 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVoxels&#32;=&#32;0;
578 
579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(fileDataPtr&#32;&lt;&#32;endfileDataPtr)
580 &#32;&#32;&#32;&#32;{
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;szChunkName[5];
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(szChunkName,&#32;fileDataPtr,&#32;4);
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;szChunkName[4]&#32;=&#32;0;
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;4;
585 
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;chunkSize&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)fileDataPtr);
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;int);
588 
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//unsigned&#32;long&#32;chunkTotalChildSize&#32;=&#32;*((unsigned&#32;long*)fileDataPtr);</emphasis>
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;int);
591 
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(szChunkName,&#32;<emphasis role="stringliteral">&quot;SIZE&quot;</emphasis>)&#32;==&#32;0)
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//(4&#32;bytes&#32;x&#32;3&#32;:&#32;x,&#32;y,&#32;z&#32;)&#32;</emphasis>
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeX&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)fileDataPtr);
596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;int);
597 
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeY&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)fileDataPtr);
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;int);
600 
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sizeZ&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)fileDataPtr);
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;int);
603 
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Alloc&#32;vox&#32;array</emphasis>
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vox_AllocArray(pvoxarray,&#32;sizeX,&#32;sizeZ,&#32;sizeY);&#32;<emphasis role="comment">//Reverse&#32;Y&lt;&gt;Z&#32;for&#32;left&#32;to&#32;right&#32;handed&#32;system</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(szChunkName,&#32;<emphasis role="stringliteral">&quot;XYZI&quot;</emphasis>)&#32;==&#32;0)
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;vx,&#32;vy,&#32;vz,&#32;vi;
610 
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//(numVoxels&#32;:&#32;4&#32;bytes&#32;)</emphasis>
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//(each&#32;voxel:&#32;1&#32;byte&#32;x&#32;4&#32;:&#32;x,&#32;y,&#32;z,&#32;colorIndex&#32;)&#32;x&#32;numVoxels</emphasis>
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numVoxels&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>*)fileDataPtr);
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;int);
615 
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(numVoxels&#32;&gt;&#32;0)
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vx&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vy&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vz&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vi&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
622 
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vox_SetVoxel(pvoxarray,&#32;vx,&#32;vz,&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a96e9db711f9949c9c1286dfbbaea2dae">sizeZ</link>-vy-1,&#32;vi);&#32;<emphasis role="comment">//Reverse&#32;Y&lt;&gt;Z&#32;for&#32;left&#32;to&#32;right&#32;handed&#32;system</emphasis>
624 
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;numVoxels--;
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(szChunkName,&#32;<emphasis role="stringliteral">&quot;RGBA&quot;</emphasis>)&#32;==&#32;0)
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vox_color">VoxColor</link>&#32;col;
631 
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//(each&#32;pixel:&#32;1&#32;byte&#32;x&#32;4&#32;:&#32;r,&#32;g,&#32;b,&#32;a&#32;)&#32;x&#32;256</emphasis>
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;256&#32;-&#32;1;&#32;i++)
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col.<link linkend="_struct_vox_color_1a16fe24cdb8293807c0155b5cf980f570">r</link>&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col.<link linkend="_struct_vox_color_1a9cff2c99cbb2c3ec8acea4975b15d1e2">g</link>&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col.<link linkend="_struct_vox_color_1a98e6602acad79ada6a92692e32da3c50">b</link>&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;col.<link linkend="_struct_vox_color_1aa22b1ee4129e59b7401eeae2398a4713">a</link>&#32;=&#32;*((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)fileDataPtr++);
639 
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a49ef86b312dfdf1083437d208f535f99">palette</link>[i&#32;+&#32;1]&#32;=&#32;col;
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
642 
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fileDataPtr&#32;+=&#32;chunkSize;
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
648 &#32;&#32;&#32;&#32;}
649 
651 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Building&#32;Mesh</emphasis>
652 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;TODO&#32;compute&#32;globals&#32;indices&#32;array</emphasis>
653 
654 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Init&#32;Arrays</emphasis>
655 &#32;&#32;&#32;&#32;initArrayVector3(&amp;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>,&#32;3&#32;*&#32;1024);
656 &#32;&#32;&#32;&#32;initArrayUShort(&amp;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>,&#32;3&#32;*&#32;1024);
657 &#32;&#32;&#32;&#32;initArrayColor(&amp;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1ac10a254ba627850ab919a3ce2ee3b7eb">colors</link>,&#32;3&#32;*&#32;1024);
658 
659 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;vertices&#32;and&#32;indices&#32;buffers</emphasis>
660 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>;
661 
662 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;&lt;=&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a0fd1d288bea06f99f29d76a031d60b13">sizeX</link>;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>++)
663 &#32;&#32;&#32;&#32;{
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>&#32;&lt;=&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a96e9db711f9949c9c1286dfbbaea2dae">sizeZ</link>;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>++)
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;=&#32;0;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>&#32;&lt;=&#32;pvoxarray-&gt;<link linkend="_struct_vox_array3_d_1a6d47e6fc09de54385778c3f795d251be">sizeY</link>;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>++)
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;matID&#32;=&#32;Vox_GetVoxel(pvoxarray,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>);
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(matID&#32;!=&#32;0)
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vox_Build_Voxel(pvoxarray,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a4f27f1eebce8c31db01bb39fab9ef561">y</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ab26e6a0e7d142ed28ac773f12a73f458">z</link>,&#32;matID);
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
673 &#32;&#32;&#32;&#32;}
674 
675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1a19f61636eea0d83aa319e464f1b64879">VOX_SUCCESS</link>;
676 }
677 
678 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1aef08af2fed6d8a5ac8e9b37ffe145e1f">Vox_FreeArrays</link>(<link linkend="_struct_vox_array3_d">VoxArray3D</link>*&#32;voxarray)
679 {
680 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;chunks</emphasis>
681 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(voxarray-&gt;<link linkend="_struct_vox_array3_d_1a047dd707d986e64d057f9e2696fc36ac">m_arrayChunks</link>&#32;!=&#32;0)
682 &#32;&#32;&#32;&#32;{
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a2b6c71a9a2b86621d046ad70532a418a">chunksTotal</link>;&#32;i++)
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_cube_chunk3_d">CubeChunk3D</link>*&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>&#32;=&#32;&amp;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a047dd707d986e64d057f9e2696fc36ac">m_arrayChunks</link>[i];
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array&#32;!=&#32;0)
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;arraySize&#32;=&#32;0;
689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1ae91153116919f385bd359f064b8393ab">VOX_FREE</link>(<link linkend="_namespace_catch_1_1_generators_1acb4654b4e840e438e3bc204ac4d8e157">chunk</link>-&gt;m_array);
690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
692 
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2vox__loader_8h_1ae91153116919f385bd359f064b8393ab">VOX_FREE</link>(voxarray-&gt;<link linkend="_struct_vox_array3_d_1a047dd707d986e64d057f9e2696fc36ac">m_arrayChunks</link>);
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a047dd707d986e64d057f9e2696fc36ac">m_arrayChunks</link>&#32;=&#32;0;
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a7e2c5fff09ed51845f8b9511b607f409">arrayChunksSize</link>&#32;=&#32;0;
696 
697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1adcb8046b9ebb625e1487511a070e3968">chunksSizeX</link>&#32;=&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1acaba94d9c1925037760306ec997c6afb">chunksSizeY</link>&#32;=&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a9fab065e345c4053665e9c71c2f6a36f">chunksSizeZ</link>&#32;=&#32;0;
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a2b6c71a9a2b86621d046ad70532a418a">chunksTotal</link>&#32;=&#32;0;
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1abaa706aa7a5730a2853fe6b99a22cfbc">chunksAllocated</link>&#32;=&#32;0;
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1adb755076e614f78f04fa7482a7b38013">ChunkFlattenOffset</link>&#32;=&#32;0;
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a0fd1d288bea06f99f29d76a031d60b13">sizeX</link>&#32;=&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a6d47e6fc09de54385778c3f795d251be">sizeY</link>&#32;=&#32;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a96e9db711f9949c9c1286dfbbaea2dae">sizeZ</link>&#32;=&#32;0;
702 &#32;&#32;&#32;&#32;}
703 
704 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;arrays</emphasis>
705 &#32;&#32;&#32;&#32;freeArrayVector3(&amp;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a4a8fd3da0f206232acd0923fb38a835d">vertices</link>);
706 &#32;&#32;&#32;&#32;freeArrayUShort(&amp;voxarray-&gt;<link linkend="_struct_vox_array3_d_1a6205eae977827586545e0a4b4798c51c">indices</link>);
707 &#32;&#32;&#32;&#32;freeArrayColor(&amp;voxarray-&gt;<link linkend="_struct_vox_array3_d_1ac10a254ba627850ab919a3ce2ee3b7eb">colors</link>);
708 }
709 
710 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//VOX_LOADER_IMPLEMENTATION</emphasis>
</programlisting></section>
