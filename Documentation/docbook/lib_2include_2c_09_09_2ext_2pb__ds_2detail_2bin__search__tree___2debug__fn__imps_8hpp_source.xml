<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2debug__fn__imps_8hpp_source" xml:lang="en-US">
<title>debug_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
44 
45 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
46 <emphasis role="keywordtype">void</emphasis>
47 PB_DS_CLASS_C_DEC::
48 assert_valid(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
49 <emphasis role="keyword"></emphasis>{
50 &#32;&#32;structure_only_assert_valid(__file,&#32;__line);
51 &#32;&#32;assert_consistent_with_debug_base(__file,&#32;__line);
52 &#32;&#32;assert_size(__file,&#32;__line);
53 &#32;&#32;assert_iterators(__file,&#32;__line);
54 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;==&#32;0)
55 &#32;&#32;&#32;&#32;{
56 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_size&#32;==&#32;0);
57 &#32;&#32;&#32;&#32;}
58 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
59 &#32;&#32;&#32;&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_size&#32;&gt;&#32;0);
61 &#32;&#32;&#32;&#32;}
62 }
63 
64 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
65 <emphasis role="keywordtype">void</emphasis>
66 PB_DS_CLASS_C_DEC::
67 structure_only_assert_valid(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
68 <emphasis role="keyword"></emphasis>{
69 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head&#32;!=&#32;0);
70 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;==&#32;0)
71 &#32;&#32;&#32;&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head-&gt;m_p_left&#32;==&#32;m_p_head);
73 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head-&gt;m_p_right&#32;==&#32;m_p_head);
74 &#32;&#32;&#32;&#32;}
75 &#32;&#32;<emphasis role="keywordflow">else</emphasis>
76 &#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head-&gt;m_p_parent-&gt;m_p_parent&#32;==&#32;m_p_head);
78 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head-&gt;m_p_left&#32;!=&#32;m_p_head);
79 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head-&gt;m_p_right&#32;!=&#32;m_p_head);
80 &#32;&#32;&#32;&#32;}
81 
82 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m_p_head-&gt;m_p_parent&#32;!=&#32;0)
83 &#32;&#32;&#32;&#32;assert_node_consistent(m_p_head-&gt;m_p_parent,&#32;__file,&#32;__line);
84 &#32;&#32;assert_min(__file,&#32;__line);
85 &#32;&#32;assert_max(__file,&#32;__line);
86 }
87 
88 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
89 <emphasis role="keywordtype">void</emphasis>
90 PB_DS_CLASS_C_DEC::
91 assert_node_consistent(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd,
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
93 <emphasis role="keyword"></emphasis>{
94 &#32;&#32;assert_node_consistent_(p_nd,&#32;__file,&#32;__line);
95 }
96 
97 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
98 <emphasis role="keyword">typename</emphasis>&#32;PB_DS_CLASS_C_DEC::node_consistent_t
99 PB_DS_CLASS_C_DEC::
100 assert_node_consistent_(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd,
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
102 <emphasis role="keyword"></emphasis>{
103 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd&#32;==&#32;0)
104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(std::make_pair((const_pointer)0,(const_pointer)0));
105 
106 &#32;&#32;assert_node_consistent_with_left(p_nd,&#32;__file,&#32;__line);
107 &#32;&#32;assert_node_consistent_with_right(p_nd,&#32;__file,&#32;__line);
108 
109 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const_pointer,&#32;const_pointer&gt;
110 &#32;&#32;&#32;&#32;l_range&#32;=&#32;assert_node_consistent_(p_nd-&gt;m_p_left,&#32;__file,&#32;__line);
111 
112 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(l_range.second&#32;!=&#32;0)
113 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*l_range.second),
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value)));
115 
116 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::pair&lt;const_pointer,&#32;const_pointer&gt;
117 &#32;&#32;&#32;&#32;r_range&#32;=&#32;assert_node_consistent_(p_nd-&gt;m_p_right,&#32;__file,&#32;__line);
118 
119 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r_range.first&#32;!=&#32;0)
120 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value),
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*r_range.first)));
122 
123 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::make_pair((l_range.first&#32;!=&#32;0)&#32;?&#32;l_range.first&#32;:&#32;&amp;p_nd-&gt;m_value,
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(r_range.second&#32;!=&#32;0)?&#32;r_range.second&#32;:&#32;&amp;p_nd-&gt;m_value);
125 }
126 
127 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
128 <emphasis role="keywordtype">void</emphasis>
129 PB_DS_CLASS_C_DEC::
130 assert_node_consistent_with_left(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd,
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
132 <emphasis role="keyword"></emphasis>{
133 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_left&#32;==&#32;0)
134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
135 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(p_nd-&gt;m_p_left-&gt;m_p_parent&#32;==&#32;p_nd);
136 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(!Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value),
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_p_left-&gt;m_value)));
138 }
139 
140 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
141 <emphasis role="keywordtype">void</emphasis>
142 PB_DS_CLASS_C_DEC::
143 assert_node_consistent_with_right(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
145 <emphasis role="keyword"></emphasis>{
146 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_right&#32;==&#32;0)
147 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
148 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(p_nd-&gt;m_p_right-&gt;m_p_parent&#32;==&#32;p_nd);
149 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(!Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_p_right-&gt;m_value),
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value)));
151 }
152 
153 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
154 <emphasis role="keywordtype">void</emphasis>
155 PB_DS_CLASS_C_DEC::
156 assert_min(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
157 <emphasis role="keyword"></emphasis>{
158 &#32;&#32;assert_min_imp(m_p_head-&gt;m_p_parent,&#32;__file,&#32;__line);
159 }
160 
161 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
162 <emphasis role="keywordtype">void</emphasis>
163 PB_DS_CLASS_C_DEC::
164 assert_min_imp(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
165 <emphasis role="keyword"></emphasis>{
166 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd&#32;==&#32;0)
167 &#32;&#32;&#32;&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head-&gt;m_p_left&#32;==&#32;m_p_head);
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
170 &#32;&#32;&#32;&#32;}
171 
172 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_left&#32;==&#32;0)
173 &#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(p_nd&#32;==&#32;m_p_head-&gt;m_p_left);
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
176 &#32;&#32;&#32;&#32;}
177 &#32;&#32;assert_min_imp(p_nd-&gt;m_p_left,&#32;__file,&#32;__line);
178 }
179 
180 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
181 <emphasis role="keywordtype">void</emphasis>
182 PB_DS_CLASS_C_DEC::
183 assert_max(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
184 <emphasis role="keyword"></emphasis>{
185 &#32;&#32;assert_max_imp(m_p_head-&gt;m_p_parent,&#32;__file,&#32;__line);
186 }
187 
188 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
189 <emphasis role="keywordtype">void</emphasis>
190 PB_DS_CLASS_C_DEC::
191 assert_max_imp(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
193 <emphasis role="keyword"></emphasis>{
194 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd&#32;==&#32;0)
195 &#32;&#32;&#32;&#32;{
196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(m_p_head-&gt;m_p_right&#32;==&#32;m_p_head);
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
198 &#32;&#32;&#32;&#32;}
199 
200 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd-&gt;m_p_right&#32;==&#32;0)
201 &#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(p_nd&#32;==&#32;m_p_head-&gt;m_p_right);
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
204 &#32;&#32;&#32;&#32;}
205 
206 &#32;&#32;assert_max_imp(p_nd-&gt;m_p_right,&#32;__file,&#32;__line);
207 }
208 
209 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
210 <emphasis role="keywordtype">void</emphasis>
211 PB_DS_CLASS_C_DEC::
212 assert_iterators(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
213 <emphasis role="keyword"></emphasis>{
214 &#32;&#32;size_type&#32;iterated_num&#32;=&#32;0;
215 &#32;&#32;const_iterator&#32;prev_it&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();
216 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(const_iterator&#32;it&#32;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();&#32;it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;++it)
217 &#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;&#32;&#32;++iterated_num;
219 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(lower_bound(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*it)).m_p_nd&#32;==&#32;it.m_p_nd);
220 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;upper_bound_it&#32;=&#32;upper_bound(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*it));
221 &#32;&#32;&#32;&#32;&#32;&#32;--upper_bound_it;
222 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(upper_bound_it.m_p_nd&#32;==&#32;it.m_p_nd);
223 
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prev_it&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
225 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*prev_it),
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*it)));
227 &#32;&#32;&#32;&#32;&#32;&#32;prev_it&#32;=&#32;it;
228 &#32;&#32;&#32;&#32;}
229 
230 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(iterated_num&#32;==&#32;m_size);
231 &#32;&#32;size_type&#32;reverse_iterated_num&#32;=&#32;0;
232 &#32;&#32;const_reverse_iterator&#32;reverse_prev_it&#32;=&#32;rend();
233 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(const_reverse_iterator&#32;reverse_it&#32;=&#32;rbegin();&#32;reverse_it&#32;!=&#32;rend();
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;++reverse_it)
235 &#32;&#32;&#32;&#32;{
236 &#32;&#32;&#32;&#32;&#32;&#32;++reverse_iterated_num;
237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(lower_bound(
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*reverse_it)).m_p_nd&#32;==&#32;reverse_it.m_p_nd);
239 
240 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;upper_bound_it&#32;=&#32;upper_bound(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*reverse_it));
241 &#32;&#32;&#32;&#32;&#32;&#32;--upper_bound_it;
242 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(upper_bound_it.m_p_nd&#32;==&#32;reverse_it.m_p_nd);
243 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(reverse_prev_it&#32;!=&#32;rend())
244 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(!Cmp_Fn::operator()(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*reverse_prev_it),
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(*reverse_it)));
246 &#32;&#32;&#32;&#32;&#32;&#32;reverse_prev_it&#32;=&#32;reverse_it;
247 &#32;&#32;&#32;&#32;}
248 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(reverse_iterated_num&#32;==&#32;m_size);
249 }
250 
251 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
252 <emphasis role="keywordtype">void</emphasis>
253 PB_DS_CLASS_C_DEC::
254 assert_consistent_with_debug_base(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
255 <emphasis role="keyword"></emphasis>{
256 &#32;&#32;debug_base::check_size(m_size,&#32;__file,&#32;__line);
257 &#32;&#32;assert_consistent_with_debug_base(m_p_head-&gt;m_p_parent,&#32;__file,&#32;__line);
258 }
259 
260 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
261 <emphasis role="keywordtype">void</emphasis>
262 PB_DS_CLASS_C_DEC::
263 assert_consistent_with_debug_base(<emphasis role="keyword">const</emphasis>&#32;node_pointer&#32;p_nd,
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
265 <emphasis role="keyword"></emphasis>{
266 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_nd&#32;==&#32;0)
267 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
268 &#32;&#32;debug_base::check_key_exists(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2container__base__dispatch_8hpp_1af0c6120ccc52c862d51ab8fdcf9781c8">PB_DS_V2F</link>(p_nd-&gt;m_value),&#32;__file,&#32;__line);
269 &#32;&#32;assert_consistent_with_debug_base(p_nd-&gt;m_p_left,&#32;__file,&#32;__line);
270 &#32;&#32;assert_consistent_with_debug_base(p_nd-&gt;m_p_right,&#32;__file,&#32;__line);
271 }
272 
273 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
274 <emphasis role="keywordtype">void</emphasis>
275 PB_DS_CLASS_C_DEC::
276 assert_size(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__file,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__line)<emphasis role="keyword">&#32;const</emphasis>
277 <emphasis role="keyword"></emphasis>{&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binary__heap___2binary__heap___8hpp_1a60a4cde43600043cf4bcfa1ecd9f5e44">PB_DS_DEBUG_VERIFY</link>(recursive_count(m_p_head-&gt;m_p_parent)&#32;==&#32;m_size);&#32;}
278 
279 <emphasis role="preprocessor">#endif</emphasis>
280 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
