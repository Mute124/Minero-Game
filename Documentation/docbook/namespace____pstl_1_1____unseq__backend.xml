<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace____pstl_1_1____unseq__backend" xml:lang="en-US">
<title>__pstl::__unseq_backend Namespace Reference</title>
<indexterm><primary>__pstl::__unseq_backend</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____unseq__backend_1_1___combiner">_Combiner</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename _Tp , typename _BinaryOperation &gt; </para><para>using <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link> = std::integral_constant&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, std::is_arithmetic&lt; _Tp &gt;<link linkend="_classvalue">::value</link> &amp;&amp;std::is_same&lt; _BinaryOperation, std::plus&lt; _Tp &gt; &gt;<link linkend="_classvalue">::value</link> &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;class _Iterator , class _DifferenceType , class _Function &gt; </para><para>_Iterator <link linkend="_namespace____pstl_1_1____unseq__backend_1a2196b03264f94d6785c560717628cfd2">__simd_walk_1</link> (_Iterator __first, _DifferenceType __n, _Function __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Iterator1 , class _DifferenceType , class _Iterator2 , class _Function &gt; </para><para>_Iterator2 <link linkend="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932">__simd_walk_2</link> (_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Function __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Iterator1 , class _DifferenceType , class _Iterator2 , class _Iterator3 , class _Function &gt; </para><para>_Iterator3 <link linkend="_namespace____pstl_1_1____unseq__backend_1a08f3845eaf1306879cde3522c5e2d542">__simd_walk_3</link> (_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Iterator3 __first3, _Function __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Pred &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a84dca71a2f0e2711f0e53a5894296ca7">__simd_or</link> (_Index __first, _DifferenceType __n, _Pred __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Compare &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349">__simd_first</link> (_Index __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index1 , class _DifferenceType , class _Index2 , class _Pred &gt; </para><para>std::pair&lt; _Index1, _Index2 &gt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a237b7602b1b54731b7c40f0530ec02f4">__simd_first</link> (_Index1 __first1, _DifferenceType __n, _Index2 __first2, _Pred __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Pred &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____unseq__backend_1aa5db97c5dd4abf4d3f9e36bb4b87246d">__simd_count</link> (_Index __index, _DifferenceType __n, _Pred __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _BinaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1a8f4a13b8b7a0ae886233c0f39105d74b">__simd_unique_copy</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _BinaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _Assigner &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7">__simd_assign</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _Assigner __assigner) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _UnaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1aed82f294600d447d733a67b243739a33">__simd_copy_if</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _UnaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____unseq__backend_1a2a17cb1cac91c919487a9a14776a4b29">__simd_calc_mask_2</link> (_InputIterator __first, _DifferenceType __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask, _BinaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _UnaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____unseq__backend_1ac0071b0b112cd9a2338904f168f77e46">__simd_calc_mask_1</link> (_InputIterator __first, _DifferenceType __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask, _UnaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _Assigner &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1ab878b934153baa9dd2feb302c14a6300">__simd_copy_by_mask</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask, _Assigner __assigner) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator1 , class _OutputIterator2 &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a496b19bf0c9d0074ec201b5925959300">__simd_partition_by_mask</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator1 __out_true, _OutputIterator2 __out_false, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Tp &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1a983f96df75978314ca65ca251d12dcca">__simd_fill_n</link> (_Index __first, _DifferenceType __n, const _Tp &amp;__value) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _DifferenceType , class _Generator &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1a688fc4a4ac7c94084efa0a2ba118fbbd">__simd_generate_n</link> (_Index __first, _DifferenceType __size, _Generator __g) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _Index , class _BinaryPredicate &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____unseq__backend_1adc51efbb93e46158542f104631cfa2e3">__simd_adjacent_find</link> (_Index __first, _Index __last, _BinaryPredicate __pred, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __or_semantic) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _DifferenceType , typename _Tp , typename _BinaryOperation , typename _UnaryOperation &gt; </para><para>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, _Tp &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1afc12596caaca4854e89120ed63e7261e">__simd_transform_reduce</link> (_DifferenceType __n, _Tp __init, _BinaryOperation, _UnaryOperation __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _Size , typename _Tp , typename _BinaryOperation , typename _UnaryOperation &gt; </para><para>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, _Tp &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a13b301c34c843be5a75edc3878672a5e">__simd_transform_reduce</link> (_Size __n, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __f) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1ab2bb4d082cad248f414d6cd55326980c">__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1abc23b8d5064c6b0534d222a9edefe155">__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a75706353071ac21a213fb178f75d2e91">__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____unseq__backend_1a88d20e1fca48435f7a488d01ea3bc0f1">__simd_scan</link> (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Size , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1abef9031d6d8ae9b085d54cbfc8fd0b7e">__simd_min_element</link> (_ForwardIterator __first, _Size __n, _Compare __comp) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Size , typename _Compare &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a2ed9a294e155700282c9599e705b4f90">__simd_minmax_element</link> (_ForwardIterator __first, _Size __n, _Compare __comp) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____unseq__backend_1ac6ab4cceb121c8d40ff90ab47badf64c">__simd_partition_copy</link> (_InputIterator __first, _DifferenceType __n, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _UnaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____unseq__backend_1a34b5595f5511ca6085e97c33055d6b8f">__simd_find_first_of</link> (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _DifferenceType , class _UnaryPredicate &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____unseq__backend_1af3e3465f13790c9379d715942bfd8234">__simd_remove_if</link> (_RandomAccessIterator __first, _DifferenceType __n, _UnaryPredicate __pred) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>const std::size_t <link linkend="_namespace____pstl_1_1____unseq__backend_1a27c10308d5fbdecc0b2c2155df84772b">__lane_size</link> = 64</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858"/><section>
    <title>is_arithmetic_plus</title>
<indexterm><primary>is_arithmetic_plus</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>is_arithmetic_plus</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOperation &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">__pstl::__unseq_backend::is_arithmetic_plus</link> = typedef std::integral_constant&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, std::is_arithmetic&lt;_Tp&gt;<link linkend="_classvalue">::value</link> &amp;&amp; std::is_same&lt;_BinaryOperation, std::plus&lt;_Tp&gt; &gt;<link linkend="_classvalue">::value</link>&gt;</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1adc51efbb93e46158542f104631cfa2e3"/><section>
    <title>__simd_adjacent_find()</title>
<indexterm><primary>__simd_adjacent_find</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_adjacent_find</secondary></indexterm>
<computeroutput>template&lt;class _Index , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_Index __pstl::__unseq_backend::__simd_adjacent_find (_Index __first, _Index __last, _BinaryPredicate __pred, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __or_semantic)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_adc51efbb93e46158542f104631cfa2e3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1abf6b81f4b7a63941917bba09bed75ba7"/><section>
    <title>__simd_assign()</title>
<indexterm><primary>__simd_assign</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_assign</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _Assigner &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__unseq_backend::__simd_assign (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _Assigner __assigner)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_abf6b81f4b7a63941917bba09bed75ba7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1ac0071b0b112cd9a2338904f168f77e46"/><section>
    <title>__simd_calc_mask_1()</title>
<indexterm><primary>__simd_calc_mask_1</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_calc_mask_1</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_DifferenceType __pstl::__unseq_backend::__simd_calc_mask_1 (_InputIterator __first, _DifferenceType __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __mask, _UnaryPredicate __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_ac0071b0b112cd9a2338904f168f77e46_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a2a17cb1cac91c919487a9a14776a4b29"/><section>
    <title>__simd_calc_mask_2()</title>
<indexterm><primary>__simd_calc_mask_2</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_calc_mask_2</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_DifferenceType __pstl::__unseq_backend::__simd_calc_mask_2 (_InputIterator __first, _DifferenceType __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __mask, _BinaryPredicate __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a2a17cb1cac91c919487a9a14776a4b29_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1ab878b934153baa9dd2feb302c14a6300"/><section>
    <title>__simd_copy_by_mask()</title>
<indexterm><primary>__simd_copy_by_mask</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_copy_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _Assigner &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__unseq_backend::__simd_copy_by_mask (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __mask, _Assigner __assigner)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_ab878b934153baa9dd2feb302c14a6300_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1aed82f294600d447d733a67b243739a33"/><section>
    <title>__simd_copy_if()</title>
<indexterm><primary>__simd_copy_if</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_copy_if</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__unseq_backend::__simd_copy_if (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _UnaryPredicate __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_aed82f294600d447d733a67b243739a33_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1aa5db97c5dd4abf4d3f9e36bb4b87246d"/><section>
    <title>__simd_count()</title>
<indexterm><primary>__simd_count</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_count</secondary></indexterm>
<computeroutput>template&lt;class _Index , class _DifferenceType , class _Pred &gt; </computeroutput><para><computeroutput>_DifferenceType __pstl::__unseq_backend::__simd_count (_Index __index, _DifferenceType __n, _Pred __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_aa5db97c5dd4abf4d3f9e36bb4b87246d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a983f96df75978314ca65ca251d12dcca"/><section>
    <title>__simd_fill_n()</title>
<indexterm><primary>__simd_fill_n</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_fill_n</secondary></indexterm>
<computeroutput>template&lt;class _Index , class _DifferenceType , class _Tp &gt; </computeroutput><para><computeroutput>_Index __pstl::__unseq_backend::__simd_fill_n (_Index __first, _DifferenceType __n, const _Tp &amp; __value)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a983f96df75978314ca65ca251d12dcca_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a34b5595f5511ca6085e97c33055d6b8f"/><section>
    <title>__simd_find_first_of()</title>
<indexterm><primary>__simd_find_first_of</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_find_first_of</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__unseq_backend::__simd_find_first_of (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a34b5595f5511ca6085e97c33055d6b8f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a34b5595f5511ca6085e97c33055d6b8f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a023c091ae2ba21d6c93ac71573523349"/><section>
    <title>__simd_first()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__simd_first</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_first</secondary></indexterm>
<computeroutput>template&lt;class _Index , class _DifferenceType , class _Compare &gt; </computeroutput><para><computeroutput>_Index __pstl::__unseq_backend::__simd_first (_Index __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a023c091ae2ba21d6c93ac71573523349_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a237b7602b1b54731b7c40f0530ec02f4"/><section>
    <title>__simd_first()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__simd_first</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_first</secondary></indexterm>
<computeroutput>template&lt;class _Index1 , class _DifferenceType , class _Index2 , class _Pred &gt; </computeroutput><para><computeroutput>std::pair&lt; _Index1, _Index2 &gt; __pstl::__unseq_backend::__simd_first (_Index1 __first1, _DifferenceType __n, _Index2 __first2, _Pred __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a688fc4a4ac7c94084efa0a2ba118fbbd"/><section>
    <title>__simd_generate_n()</title>
<indexterm><primary>__simd_generate_n</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_generate_n</secondary></indexterm>
<computeroutput>template&lt;class _Index , class _DifferenceType , class _Generator &gt; </computeroutput><para><computeroutput>_Index __pstl::__unseq_backend::__simd_generate_n (_Index __first, _DifferenceType __size, _Generator __g)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a688fc4a4ac7c94084efa0a2ba118fbbd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1abef9031d6d8ae9b085d54cbfc8fd0b7e"/><section>
    <title>__simd_min_element()</title>
<indexterm><primary>__simd_min_element</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_min_element</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _Size , typename _Compare &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__unseq_backend::__simd_min_element (_ForwardIterator __first, _Size __n, _Compare __comp)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_abef9031d6d8ae9b085d54cbfc8fd0b7e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a2ed9a294e155700282c9599e705b4f90"/><section>
    <title>__simd_minmax_element()</title>
<indexterm><primary>__simd_minmax_element</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_minmax_element</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _Size , typename _Compare &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; __pstl::__unseq_backend::__simd_minmax_element (_ForwardIterator __first, _Size __n, _Compare __comp)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a2ed9a294e155700282c9599e705b4f90_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a84dca71a2f0e2711f0e53a5894296ca7"/><section>
    <title>__simd_or()</title>
<indexterm><primary>__simd_or</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_or</secondary></indexterm>
<computeroutput>template&lt;class _Index , class _DifferenceType , class _Pred &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__unseq_backend::__simd_or (_Index __first, _DifferenceType __n, _Pred __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a84dca71a2f0e2711f0e53a5894296ca7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a496b19bf0c9d0074ec201b5925959300"/><section>
    <title>__simd_partition_by_mask()</title>
<indexterm><primary>__simd_partition_by_mask</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_partition_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator1 , class _OutputIterator2 &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__unseq_backend::__simd_partition_by_mask (_InputIterator __first, _DifferenceType __n, _OutputIterator1 __out_true, _OutputIterator2 __out_false, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __mask)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a496b19bf0c9d0074ec201b5925959300_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1ac6ab4cceb121c8d40ff90ab47badf64c"/><section>
    <title>__simd_partition_copy()</title>
<indexterm><primary>__simd_partition_copy</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_partition_copy</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; __pstl::__unseq_backend::__simd_partition_copy (_InputIterator __first, _DifferenceType __n, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _UnaryPredicate __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_ac6ab4cceb121c8d40ff90ab47badf64c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1af3e3465f13790c9379d715942bfd8234"/><section>
    <title>__simd_remove_if()</title>
<indexterm><primary>__simd_remove_if</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_remove_if</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _DifferenceType , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__unseq_backend::__simd_remove_if (_RandomAccessIterator __first, _DifferenceType __n, _UnaryPredicate __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_af3e3465f13790c9379d715942bfd8234_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_af3e3465f13790c9379d715942bfd8234_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1abc23b8d5064c6b0534d222a9edefe155"/><section>
    <title>__simd_scan()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__simd_scan</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_scan</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__unseq_backend::__simd_scan (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::false_type )</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a88d20e1fca48435f7a488d01ea3bc0f1"/><section>
    <title>__simd_scan()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__simd_scan</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_scan</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__unseq_backend::__simd_scan (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::true_type )</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1ab2bb4d082cad248f414d6cd55326980c"/><section>
    <title>__simd_scan()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__simd_scan</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_scan</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__unseq_backend::__simd_scan (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation , std::false_type )</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_ab2bb4d082cad248f414d6cd55326980c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a75706353071ac21a213fb178f75d2e91"/><section>
    <title>__simd_scan()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__simd_scan</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_scan</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _Size , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__unseq_backend::__simd_scan (_InputIterator __first, _Size __n, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation , std::true_type )</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1afc12596caaca4854e89120ed63e7261e"/><section>
    <title>__simd_transform_reduce()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__simd_transform_reduce</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;typename _DifferenceType , typename _Tp , typename _BinaryOperation , typename _UnaryOperation &gt; </computeroutput><para><computeroutput>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, _Tp &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__unseq_backend::__simd_transform_reduce (_DifferenceType __n, _Tp __init, _BinaryOperation , _UnaryOperation __f)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_afc12596caaca4854e89120ed63e7261e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a13b301c34c843be5a75edc3878672a5e"/><section>
    <title>__simd_transform_reduce()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__simd_transform_reduce</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;typename _Size , typename _Tp , typename _BinaryOperation , typename _UnaryOperation &gt; </computeroutput><para><computeroutput>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____unseq__backend_1a13c5fe9fe0a5bf280299db1159ff6858">is_arithmetic_plus</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, _Tp &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__unseq_backend::__simd_transform_reduce (_Size __n, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __f)<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a8f4a13b8b7a0ae886233c0f39105d74b"/><section>
    <title>__simd_unique_copy()</title>
<indexterm><primary>__simd_unique_copy</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _InputIterator , class _DifferenceType , class _OutputIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__unseq_backend::__simd_unique_copy (_InputIterator __first, _DifferenceType __n, _OutputIterator __result, _BinaryPredicate __pred)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a8f4a13b8b7a0ae886233c0f39105d74b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a2196b03264f94d6785c560717628cfd2"/><section>
    <title>__simd_walk_1()</title>
<indexterm><primary>__simd_walk_1</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_walk_1</secondary></indexterm>
<computeroutput>template&lt;class _Iterator , class _DifferenceType , class _Function &gt; </computeroutput><para><computeroutput>_Iterator __pstl::__unseq_backend::__simd_walk_1 (_Iterator __first, _DifferenceType __n, _Function __f)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a2196b03264f94d6785c560717628cfd2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1af633b9e9ab66296f5dd7efba7c834932"/><section>
    <title>__simd_walk_2()</title>
<indexterm><primary>__simd_walk_2</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_walk_2</secondary></indexterm>
<computeroutput>template&lt;class _Iterator1 , class _DifferenceType , class _Iterator2 , class _Function &gt; </computeroutput><para><computeroutput>_Iterator2 __pstl::__unseq_backend::__simd_walk_2 (_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Function __f)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_af633b9e9ab66296f5dd7efba7c834932_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a08f3845eaf1306879cde3522c5e2d542"/><section>
    <title>__simd_walk_3()</title>
<indexterm><primary>__simd_walk_3</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__simd_walk_3</secondary></indexterm>
<computeroutput>template&lt;class _Iterator1 , class _DifferenceType , class _Iterator2 , class _Iterator3 , class _Function &gt; </computeroutput><para><computeroutput>_Iterator3 __pstl::__unseq_backend::__simd_walk_3 (_Iterator1 __first1, _DifferenceType __n, _Iterator2 __first2, _Iterator3 __first3, _Function __f)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____unseq__backend_a08f3845eaf1306879cde3522c5e2d542_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespace____pstl_1_1____unseq__backend_1a27c10308d5fbdecc0b2c2155df84772b"/><section>
    <title>__lane_size</title>
<indexterm><primary>__lane_size</primary><secondary>__pstl::__unseq_backend</secondary></indexterm>
<indexterm><primary>__pstl::__unseq_backend</primary><secondary>__lane_size</secondary></indexterm>
<para><computeroutput>const std::size_t __pstl::__unseq_backend::__lane_size = 64</computeroutput></para></section>
</section>
</section>
