<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2move__only__function_8h_source" xml:lang="en-US">
<title>move_only_function.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/move_only_function.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Implementation&#32;of&#32;std::move_only_function&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;The&#32;GNU&#32;Toolchain&#32;Authors.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_MOVE_ONLY_FUNCTION_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOVE_ONLY_FUNCTION_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;202002L</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;bits/invoke.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/utility.h&gt;</emphasis>
39 
40 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
41 {
42 _GLIBCXX_BEGIN_NAMESPACE_VERSION
43 
44 <emphasis role="preprocessor">#define&#32;__cpp_lib_move_only_function&#32;202110L</emphasis>
45 
46 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Signature&gt;
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>move_only_function;&#32;<emphasis role="comment">//&#32;not&#32;defined</emphasis>
48 
50 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Mofunc_base
51 &#32;&#32;{
52 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
53 &#32;&#32;&#32;&#32;_Mofunc_base()&#32;noexcept
54 &#32;&#32;&#32;&#32;:&#32;_M_manage(_S_empty)
55 &#32;&#32;&#32;&#32;{&#32;}
56 
57 &#32;&#32;&#32;&#32;_Mofunc_base(_Mofunc_base&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
58 &#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage&#32;=&#32;std::__exchange(__x._M_manage,&#32;_S_empty);
60 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage(_M_storage,&#32;&amp;__x._M_storage);
61 &#32;&#32;&#32;&#32;}
62 
63 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
65 &#32;&#32;&#32;&#32;&#32;&#32;_S_nothrow_init()&#32;noexcept
66 &#32;&#32;&#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__stored_locally&lt;_Tp&gt;)
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_nothrow_constructible_v&lt;_Tp,&#32;_Args...&gt;;
69 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
70 &#32;&#32;&#32;&#32;&#32;&#32;}
71 
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
74 &#32;&#32;&#32;&#32;&#32;&#32;_M_init(_Args&amp;&amp;...&#32;__args)&#32;<emphasis role="keyword">noexcept</emphasis>(_S_nothrow_init&lt;_Tp,&#32;_Args...&gt;())
75 &#32;&#32;&#32;&#32;&#32;&#32;{
76 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__stored_locally&lt;_Tp&gt;)
77 &#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(_M_storage._M_addr())&#32;_Tp(std::forward&lt;_Args&gt;(__args)...);
78 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;_M_storage._M_p&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_Tp(std::forward&lt;_Args&gt;(__args)...);
80 
81 &#32;&#32;&#32;&#32;_M_manage&#32;=&#32;&amp;_S_manage&lt;_Tp&gt;;
82 &#32;&#32;&#32;&#32;&#32;&#32;}
83 
84 &#32;&#32;&#32;&#32;_Mofunc_base&amp;
85 &#32;&#32;&#32;&#32;operator=(_Mofunc_base&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
86 &#32;&#32;&#32;&#32;{
87 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage(_M_storage,&#32;<emphasis role="keyword">nullptr</emphasis>);
88 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage&#32;=&#32;std::__exchange(__x._M_manage,&#32;_S_empty);
89 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage(_M_storage,&#32;&amp;__x._M_storage);
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
91 &#32;&#32;&#32;&#32;}
92 
93 &#32;&#32;&#32;&#32;_Mofunc_base&amp;
94 &#32;&#32;&#32;&#32;operator=(nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
95 &#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage(_M_storage,&#32;<emphasis role="keyword">nullptr</emphasis>);
97 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage&#32;=&#32;_S_empty;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
99 &#32;&#32;&#32;&#32;}
100 
101 &#32;&#32;&#32;&#32;~_Mofunc_base()&#32;{&#32;_M_manage(_M_storage,&#32;<emphasis role="keyword">nullptr</emphasis>);&#32;}
102 
103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
104 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Mofunc_base&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
105 &#32;&#32;&#32;&#32;{
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Order&#32;of&#32;operations&#32;here&#32;is&#32;more&#32;efficient&#32;if&#32;__x&#32;is&#32;empty.</emphasis>
107 &#32;&#32;&#32;&#32;&#32;&#32;_Storage&#32;__s;
108 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_manage(__s,&#32;&amp;__x._M_storage);
109 &#32;&#32;&#32;&#32;&#32;&#32;_M_manage(__x._M_storage,&#32;&amp;_M_storage);
110 &#32;&#32;&#32;&#32;&#32;&#32;__x._M_manage(_M_storage,&#32;&amp;__s);
111 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_manage,&#32;__x._M_manage);
112 &#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Self&gt;
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp*
116 &#32;&#32;&#32;&#32;&#32;&#32;_S_access(_Self*&#32;__self)&#32;<emphasis role="keyword">noexcept</emphasis>
117 &#32;&#32;&#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__stored_locally&lt;remove_const_t&lt;_Tp&gt;&gt;)
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(__self-&gt;_M_storage._M_addr());
120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(__self-&gt;_M_storage._M_p);
122 &#32;&#32;&#32;&#32;&#32;&#32;}
123 
124 &#32;&#32;<emphasis role="keyword">private</emphasis>:
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Storage
126 &#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_addr()&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_M_bytes[0];&#32;}
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;_M_addr()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_M_bytes[0];&#32;}
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;want&#32;to&#32;have&#32;enough&#32;space&#32;to&#32;store&#32;a&#32;simple&#32;delegate&#32;type.</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Delegate&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(_Storage::*__pfm)();&#32;_Storage*&#32;__obj;&#32;};
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>{
133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;_M_p;
134 &#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(_Delegate)&#32;<emphasis role="keyword">alignas</emphasis>(<emphasis role="keywordtype">void</emphasis>(*)())
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_bytes[<emphasis role="keyword">sizeof</emphasis>(_Delegate)];
136 &#32;&#32;&#32;&#32;&#32;&#32;};
137 &#32;&#32;&#32;&#32;};
138 
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__stored_locally
141 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Storage)&#32;&amp;&amp;&#32;<emphasis role="keyword">alignof</emphasis>(_Tp)&#32;&lt;=&#32;<emphasis role="keyword">alignof</emphasis>(_Storage)
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_nothrow_move_constructible_v&lt;_Tp&gt;;
143 
144 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;function&#32;that&#32;either&#32;destroys&#32;the&#32;target&#32;object&#32;stored&#32;in&#32;__target,</emphasis>
145 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;moves&#32;the&#32;target&#32;object&#32;from&#32;*__src&#32;to&#32;__target.</emphasis>
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Manager&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(*)(_Storage&amp;&#32;__target,&#32;_Storage*&#32;__src)&#32;<emphasis role="keyword">noexcept</emphasis>;
147 
148 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;no-op&#32;manager&#32;function&#32;for&#32;objects&#32;with&#32;no&#32;target.</emphasis>
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_empty(_Storage&amp;,&#32;_Storage*)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;}
150 
151 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;real&#32;manager&#32;function&#32;for&#32;a&#32;target&#32;object&#32;of&#32;type&#32;_Tp.</emphasis>
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;_S_manage(_Storage&amp;&#32;__target,&#32;_Storage*&#32;__src)&#32;<emphasis role="keyword">noexcept</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;{
156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__stored_locally&lt;_Tp&gt;)
157 &#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__src)
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;__rval&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(__src-&gt;_M_addr());
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(__target._M_addr())&#32;_Tp(<link linkend="_namespacestd">std</link>::move(*__rval));
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rval-&gt;~_Tp();
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;_Tp*&gt;(__target._M_addr())-&gt;~_Tp();
166 &#32;&#32;&#32;&#32;&#32;&#32;}
167 &#32;&#32;&#32;&#32;else
168 &#32;&#32;&#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__src)
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__target._M_p&#32;=&#32;__src-&gt;_M_p;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(__target._M_p);
173 &#32;&#32;&#32;&#32;&#32;&#32;}
174 &#32;&#32;&#32;&#32;&#32;&#32;}
175 
176 &#32;&#32;&#32;&#32;_Storage&#32;_M_storage;
177 &#32;&#32;&#32;&#32;_Manager&#32;_M_manage;
178 &#32;&#32;};
179 
180 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_move_only_function_v&#32;=&#32;<emphasis role="keyword">false</emphasis>;
182 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_move_only_function_v&lt;move_only_function&lt;_Tp&gt;&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
185 
186 _GLIBCXX_END_NAMESPACE_VERSION
187 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
188 
189 <emphasis role="preprocessor">#include&#32;&quot;mofunc_impl.h&quot;</emphasis>
190 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_CV&#32;const</emphasis>
191 <emphasis role="preprocessor">#include&#32;&quot;mofunc_impl.h&quot;</emphasis>
192 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_REF&#32;&amp;</emphasis>
193 <emphasis role="preprocessor">#include&#32;&quot;mofunc_impl.h&quot;</emphasis>
194 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_REF&#32;&amp;&amp;</emphasis>
195 <emphasis role="preprocessor">#include&#32;&quot;mofunc_impl.h&quot;</emphasis>
196 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_CV&#32;const</emphasis>
197 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_REF&#32;&amp;</emphasis>
198 <emphasis role="preprocessor">#include&#32;&quot;mofunc_impl.h&quot;</emphasis>
199 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_CV&#32;const</emphasis>
200 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOF_REF&#32;&amp;&amp;</emphasis>
201 <emphasis role="preprocessor">#include&#32;&quot;mofunc_impl.h&quot;</emphasis>
202 
203 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++23</emphasis>
204 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_MOVE_ONLY_FUNCTION_H</emphasis>
</programlisting></section>
