<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2iterator__concepts_8h_source" xml:lang="en-US">
<title>iterator_concepts.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/iterator_concepts.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Concepts&#32;and&#32;traits&#32;for&#32;use&#32;with&#32;iterators&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2019-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_ITERATOR_CONCEPTS_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_ITERATOR_CONCEPTS_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;concepts&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/ptr_traits.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to_address</emphasis>
37 <emphasis role="preprocessor">#include&#32;&lt;bits/ranges_cmp.h&gt;</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;identity,&#32;ranges::less</emphasis>
38 
39 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
40 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
41 {
42 _GLIBCXX_BEGIN_NAMESPACE_VERSION
43 
44 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>input_iterator_tag;
45 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>output_iterator_tag;
46 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>forward_iterator_tag;
47 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>bidirectional_iterator_tag;
48 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>random_access_iterator_tag;
49 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>contiguous_iterator_tag;
50 
51 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
52 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits;
53 
54 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_object_v&lt;_Tp&gt;
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits&lt;_Tp*&gt;;
56 
57 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&gt;
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iterator_traits;
59 
60 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
61 &#32;&#32;{
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
63 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__with_ref&#32;=&#32;_Tp&amp;;
64 
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__can_reference&#32;=&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__with_ref&lt;_Tp&gt;;&#32;};
67 
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__dereferenceable&#32;=&#32;<emphasis role="keyword">requires</emphasis>(_Tp&amp;&#32;__t)
70 &#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;*__t&#32;}&#32;-&gt;&#32;__can_reference;
72 &#32;&#32;&#32;&#32;};
73 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
74 
75 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__dereferenceable&#32;_Tp&gt;
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iter_reference_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(*std::declval&lt;_Tp&amp;&gt;());
77 
78 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>ranges
79 &#32;&#32;{
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cust_imove
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;iter_move();
83 
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__adl_imove
86 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;(std::__detail::__class_or_enum&lt;remove_reference_t&lt;_Tp&gt;&gt;)
87 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Tp&amp;&amp;&#32;__t)&#32;{&#32;iter_move(<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__t));&#32;};
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IMove
90 &#32;&#32;&#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__result
94 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;iter_reference_t&lt;_Tp&gt;;&#32;};
95 
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__adl_imove&lt;_Tp&gt;
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__result&lt;_Tp&gt;
99 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(iter_move(std::declval&lt;_Tp&gt;()));&#32;};
100 
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!__adl_imove&lt;_Tp&gt;)
103 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_lvalue_reference_v&lt;iter_reference_t&lt;_Tp&gt;&gt;
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;__result&lt;_Tp&gt;
105 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;remove_reference_t&lt;iter_reference_t&lt;_Tp&gt;&gt;&amp;&amp;;&#32;};
106 
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
109 &#32;&#32;&#32;&#32;&#32;&#32;_S_noexcept()
110 &#32;&#32;&#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__adl_imove&lt;_Tp&gt;)
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(iter_move(std::declval&lt;_Tp&gt;()));
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(*std::declval&lt;_Tp&gt;());
115 &#32;&#32;&#32;&#32;&#32;&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
118 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;result&#32;type&#32;of&#32;iter_move(std::declval&lt;_Tp&gt;())</emphasis>
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::__detail::__dereferenceable&#32;_Tp&gt;
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__result&lt;_Tp&gt;::type;
121 
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::__detail::__dereferenceable&#32;_Tp&gt;
123 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__type&lt;_Tp&gt;
125 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__e)&#32;<emphasis role="keyword">const</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_noexcept&lt;_Tp&gt;())
127 &#32;&#32;&#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__adl_imove&lt;_Tp&gt;)
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter_move(<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__e));
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_lvalue_reference_v&lt;iter_reference_t&lt;_Tp&gt;&gt;)
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>__type&lt;_Tp&gt;<emphasis role="keyword">&gt;</emphasis>(*__e);
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*__e;
134 &#32;&#32;&#32;&#32;&#32;&#32;}
135 &#32;&#32;&#32;&#32;&#32;&#32;};
136 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__cust_imove</emphasis>
137 
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cust
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__cust_imove::_IMove&#32;iter_move{};
141 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;inline&#32;namespace&#32;__cust</emphasis>
142 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;ranges</emphasis>
143 
144 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__dereferenceable&#32;_Tp&gt;
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::
146 &#32;&#32;&#32;&#32;&#32;&#32;__can_reference&lt;ranges::__cust_imove::_IMove::__type&lt;_Tp&amp;&gt;&gt;
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iter_rvalue_reference_t
148 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;ranges::__cust_imove::_IMove::__type&lt;_Tp&amp;&gt;;
149 
150 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&#32;{&#32;};
151 
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_object_v&lt;_Tp&gt;
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&lt;_Tp*&gt;
154 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;&#32;};
155 
156 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&lt;const&#32;_Iter&gt;
158 &#32;&#32;&#32;&#32;:&#32;incrementable_traits&lt;_Iter&gt;&#32;{&#32;};
159 
160 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::difference_type;&#32;}
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&lt;_Tp&gt;
162 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::difference_type;&#32;};
163 
164 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::difference_type;&#32;}
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__b)
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;{&#32;__a&#32;-&#32;__b&#32;}&#32;-&gt;&#32;integral;&#32;})
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;incrementable_traits&lt;_Tp&gt;
169 &#32;&#32;&#32;&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type
171 &#32;&#32;&#32;&#32;=&#32;make_signed_t&lt;decltype(std::declval&lt;_Tp&gt;()&#32;-&#32;std::declval&lt;_Tp&gt;())&gt;;
172 &#32;&#32;&#32;&#32;};
173 
174 <emphasis role="preprocessor">#if&#32;defined&#32;__STRICT_ANSI__&#32;&amp;&amp;&#32;defined&#32;__SIZEOF_INT128__</emphasis>
175 &#32;&#32;<emphasis role="comment">//&#32;__int128&#32;is&#32;incrementable&#32;even&#32;if&#32;!integral&lt;__int128&gt;</emphasis>
176 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&lt;__int128&gt;
178 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;__int128;&#32;};
179 
180 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&lt;unsigned&#32;__int128&gt;
182 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;__int128;&#32;};
183 <emphasis role="preprocessor">#endif</emphasis>
184 
185 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
186 &#32;&#32;{
187 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;An&#32;iterator&#32;such&#32;that&#32;iterator_traits&lt;_Iter&gt;&#32;names&#32;a&#32;specialization</emphasis>
188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;generated&#32;from&#32;the&#32;primary&#32;template.</emphasis>
189 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__primary_traits_iter
191 &#32;&#32;&#32;&#32;=&#32;__is_base_of(__iterator_traits&lt;_Iter,&#32;void&gt;,&#32;iterator_traits&lt;_Iter&gt;);
192 
193 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iter_traits_impl
195 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;iterator_traits&lt;_Iter&gt;;&#32;};
196 
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
198 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__primary_traits_iter&lt;_Iter&gt;
199 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iter_traits_impl&lt;_Iter,&#32;_Tp&gt;
200 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Tp;&#32;};
201 
202 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ITER_TRAITS</emphasis>
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&#32;=&#32;_Iter&gt;
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter_traits&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits_impl&lt;_Iter,&#32;_Tp&gt;::type;
205 
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter_diff_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>
208 &#32;&#32;&#32;&#32;__iter_traits&lt;_Tp,&#32;incrementable_traits&lt;_Tp&gt;&gt;::difference_type;
209 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
210 
211 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
212 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iter_difference_t&#32;=&#32;__detail::__iter_diff_t&lt;remove_cvref_t&lt;_Tp&gt;&gt;;
213 
214 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
215 &#32;&#32;{
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cond_value_type&#32;{&#32;};
217 
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_object_v&lt;_Tp&gt;
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cond_value_type&lt;_Tp&gt;
220 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;remove_cv_t&lt;_Tp&gt;;&#32;};
221 
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__has_member_value_type
224 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::value_type;&#32;};
225 
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__has_member_element_type
228 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::element_type;&#32;};
229 
230 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
231 
232 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&#32;{&#32;};
233 
234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
235 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;_Tp*&gt;
236 &#32;&#32;&#32;&#32;:&#32;__detail::__cond_value_type&lt;_Tp&gt;
237 &#32;&#32;&#32;&#32;{&#32;};
238 
239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_array_v&lt;_Iter&gt;
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;_Iter&gt;
241 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;remove_cv_t&lt;remove_extent_t&lt;_Iter&gt;&gt;;&#32;};
242 
243 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;const&#32;_Iter&gt;
245 &#32;&#32;&#32;&#32;:&#32;indirectly_readable_traits&lt;_Iter&gt;
246 &#32;&#32;&#32;&#32;{&#32;};
247 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__has_member_value_type&#32;_Tp&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;_Tp&gt;
250 &#32;&#32;&#32;&#32;:&#32;__detail::__cond_value_type&lt;typename&#32;_Tp::value_type&gt;
251 &#32;&#32;&#32;&#32;{&#32;};
252 
253 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__has_member_element_type&#32;_Tp&gt;
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;_Tp&gt;
255 &#32;&#32;&#32;&#32;:&#32;__detail::__cond_value_type&lt;typename&#32;_Tp::element_type&gt;
256 &#32;&#32;&#32;&#32;{&#32;};
257 
258 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
259 &#32;&#32;<emphasis role="comment">//&#32;3446.&#32;indirectly_readable_traits&#32;ambiguity&#32;for&#32;types&#32;with&#32;both&#32;[...]</emphasis>
260 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__has_member_value_type&#32;_Tp&gt;
261 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__has_member_element_type&lt;_Tp&gt;
262 &#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;remove_cv_t&lt;typename&#32;_Tp::element_type&gt;,
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove_cv_t&lt;typename&#32;_Tp::value_type&gt;&gt;
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;_Tp&gt;
265 &#32;&#32;&#32;&#32;:&#32;__detail::__cond_value_type&lt;typename&#32;_Tp::value_type&gt;
266 &#32;&#32;&#32;&#32;{&#32;};
267 
268 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
269 &#32;&#32;<emphasis role="comment">//&#32;3541.&#32;indirectly_readable_traits&#32;should&#32;be&#32;SFINAE-friendly&#32;for&#32;all&#32;types</emphasis>
270 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;__detail::__has_member_value_type&#32;_Tp&gt;
271 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__has_member_element_type&lt;_Tp&gt;
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>indirectly_readable_traits&lt;_Tp&gt;
273 &#32;&#32;&#32;&#32;{&#32;};
274 
275 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
276 &#32;&#32;{
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter_value_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>
279 &#32;&#32;&#32;&#32;__iter_traits&lt;_Tp,&#32;indirectly_readable_traits&lt;_Tp&gt;&gt;::value_type;
280 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
281 
282 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
283 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iter_value_t&#32;=&#32;__detail::__iter_value_t&lt;remove_cvref_t&lt;_Tp&gt;&gt;;
284 
285 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
286 &#32;&#32;{
287 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
288 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3420.&#32;cpp17-iterator&#32;should&#32;check&#32;[type]&#32;looks&#32;like&#32;an&#32;iterator&#32;first</emphasis>
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__cpp17_iterator&#32;=&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__it)
291 &#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;*__it&#32;}&#32;-&gt;&#32;__can_reference;
293 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;++__it&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
294 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;*__it++&#32;}&#32;-&gt;&#32;__can_reference;
295 &#32;&#32;&#32;&#32;}&#32;&amp;&amp;&#32;copyable&lt;_Iter&gt;;
296 
297 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
298 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__cpp17_input_iterator&#32;=&#32;__cpp17_iterator&lt;_Iter&gt;
299 &#32;&#32;&#32;&#32;&amp;&amp;&#32;equality_comparable&lt;_Iter&gt;
300 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__it)
301 &#32;&#32;&#32;&#32;{
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;incrementable_traits&lt;_Iter&gt;::difference_type;
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;indirectly_readable_traits&lt;_Iter&gt;::value_type;
304 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;common_reference_t&lt;iter_reference_t&lt;_Iter&gt;&amp;&amp;,
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;indirectly_readable_traits&lt;_Iter&gt;::value_type&amp;&gt;;
306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;common_reference_t&lt;<emphasis role="keyword">decltype</emphasis>(*__it++)&amp;&amp;,
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;indirectly_readable_traits&lt;_Iter&gt;::value_type&amp;&gt;;
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;signed_integral&lt;
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;incrementable_traits&lt;_Iter&gt;::difference_type&gt;;
310 &#32;&#32;&#32;&#32;};
311 
312 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__cpp17_fwd_iterator&#32;=&#32;__cpp17_input_iterator&lt;_Iter&gt;
314 &#32;&#32;&#32;&#32;&amp;&amp;&#32;constructible_from&lt;_Iter&gt;
315 &#32;&#32;&#32;&#32;&amp;&amp;&#32;is_lvalue_reference_v&lt;iter_reference_t&lt;_Iter&gt;&gt;
316 &#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;remove_cvref_t&lt;iter_reference_t&lt;_Iter&gt;&gt;,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;indirectly_readable_traits&lt;_Iter&gt;::value_type&gt;
318 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__it)
319 &#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;__it++&#32;}&#32;-&gt;&#32;convertible_to&lt;const&#32;_Iter&amp;&gt;;
321 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;*__it++&#32;}&#32;-&gt;&#32;same_as&lt;iter_reference_t&lt;_Iter&gt;&gt;;
322 &#32;&#32;&#32;&#32;};
323 
324 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__cpp17_bidi_iterator&#32;=&#32;__cpp17_fwd_iterator&lt;_Iter&gt;
326 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__it)
327 &#32;&#32;&#32;&#32;{
328 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;--__it&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
329 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;__it--&#32;}&#32;-&gt;&#32;convertible_to&lt;const&#32;_Iter&amp;&gt;;
330 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;*__it--&#32;}&#32;-&gt;&#32;same_as&lt;iter_reference_t&lt;_Iter&gt;&gt;;
331 &#32;&#32;&#32;&#32;};
332 
333 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__cpp17_randacc_iterator&#32;=&#32;__cpp17_bidi_iterator&lt;_Iter&gt;
335 &#32;&#32;&#32;&#32;&amp;&amp;&#32;totally_ordered&lt;_Iter&gt;
336 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__it,
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;incrementable_traits&lt;_Iter&gt;::difference_type&#32;__n)
338 &#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__it&#32;+=&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
340 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__it&#32;-=&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
341 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__it&#32;+&#32;&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;
342 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__n&#32;+&#32;&#32;__it&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;
343 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__it&#32;-&#32;&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;
344 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__it&#32;-&#32;&#32;__it&#32;}&#32;-&gt;&#32;same_as&lt;<emphasis role="keyword">decltype</emphasis>(__n)&gt;;
345 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;__it[__n]&#32;&#32;}&#32;-&gt;&#32;convertible_to&lt;iter_reference_t&lt;_Iter&gt;&gt;;
346 &#32;&#32;&#32;&#32;};
347 
348 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__iter_with_nested_types&#32;=&#32;<emphasis role="keyword">requires</emphasis>&#32;{
350 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::iterator_category;
351 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::value_type;
352 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::difference_type;
353 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::reference;
354 &#32;&#32;&#32;&#32;&#32;&#32;};
355 
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__iter_without_nested_types&#32;=&#32;!__iter_with_nested_types&lt;_Iter&gt;;
358 
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__iter_without_category
361 &#32;&#32;&#32;&#32;=&#32;!<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::iterator_category;&#32;};
362 
363 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
364 
365 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
366 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__iter_with_nested_types&lt;_Iterator&gt;
367 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iterator_traits&lt;_Iterator,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
368 &#32;&#32;&#32;&#32;{
369 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
371 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr
372 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;&#32;};
373 
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::pointer;&#32;}
375 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr&lt;_Iter&gt;
376 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::pointer;&#32;};
377 
378 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::iterator_category;
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::value_type;
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::difference_type;
382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__ptr&lt;_Iterator&gt;::type;
383 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iterator::reference;
384 &#32;&#32;&#32;&#32;};
385 
386 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
387 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__iter_without_nested_types&lt;_Iterator&gt;
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__cpp17_input_iterator&lt;_Iterator&gt;
389 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iterator_traits&lt;_Iterator,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
390 &#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
393 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cat
394 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;input_iterator_tag;&#32;};
395 
396 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::iterator_category;&#32;}
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cat&lt;_Iter&gt;
399 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::iterator_category;&#32;};
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
402 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__iter_without_category&lt;_Iter&gt;
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__cpp17_randacc_iterator&lt;_Iter&gt;
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cat&lt;_Iter&gt;
405 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;random_access_iterator_tag;&#32;};
406 
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
408 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__iter_without_category&lt;_Iter&gt;
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__cpp17_bidi_iterator&lt;_Iter&gt;
410 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cat&lt;_Iter&gt;
411 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;bidirectional_iterator_tag;&#32;};
412 
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
414 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__iter_without_category&lt;_Iter&gt;
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__cpp17_fwd_iterator&lt;_Iter&gt;
416 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__cat&lt;_Iter&gt;
417 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;forward_iterator_tag;&#32;};
418 
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
420 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr
421 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;&#32;};
422 
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::pointer;&#32;}
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr&lt;_Iter&gt;
425 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::pointer;&#32;};
426 
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::pointer;&#32;}
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&amp;&#32;__it)&#32;{&#32;__it.operator-&gt;();&#32;})
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;__ptr&lt;_Iter&gt;
431 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(std::declval&lt;_Iter&amp;&gt;().operator-&gt;());&#32;};
432 
433 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ref
435 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;iter_reference_t&lt;_Iter&gt;;&#32;};
436 
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::reference;&#32;}
438 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ref&lt;_Iter&gt;
439 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter::reference;&#32;};
440 
441 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
442 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__cat&lt;_Iterator&gt;::type;
443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type
444 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;indirectly_readable_traits&lt;_Iterator&gt;::value_type;
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type
446 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;incrementable_traits&lt;_Iterator&gt;::difference_type;
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__ptr&lt;_Iterator&gt;::type;
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__ref&lt;_Iterator&gt;::type;
449 &#32;&#32;&#32;&#32;};
450 
451 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
452 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__iter_without_nested_types&lt;_Iterator&gt;
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__cpp17_iterator&lt;_Iterator&gt;
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iterator_traits&lt;_Iterator,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
455 &#32;&#32;&#32;&#32;{
456 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
457 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
458 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__diff
459 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;&#32;};
460 
461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
462 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>
463 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;incrementable_traits&lt;_Iter&gt;::difference_type;&#32;}
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__diff&lt;_Iter&gt;
465 &#32;&#32;&#32;&#32;{
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;incrementable_traits&lt;_Iter&gt;::difference_type;
467 &#32;&#32;&#32;&#32;};
468 
469 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;output_iterator_tag;
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__diff&lt;_Iterator&gt;::type;
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
475 &#32;&#32;&#32;&#32;};
476 
477 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
478 &#32;&#32;{
479 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iter_concept_impl;
481 
482 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ITER_CONCEPT(I)&#32;is&#32;ITER_TRAITS(I)::iterator_concept&#32;if&#32;that&#32;is&#32;valid.</emphasis>
483 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits&lt;_Iter&gt;::iterator_concept;&#32;}
485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iter_concept_impl&lt;_Iter&gt;
486 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits&lt;_Iter&gt;::iterator_concept;&#32;};
487 
488 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;ITER_TRAITS(I)::iterator_category&#32;if&#32;that&#32;is&#32;valid.</emphasis>
489 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits&lt;_Iter&gt;::iterator_concept;&#32;}
491 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits&lt;_Iter&gt;::iterator_category;&#32;})
492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;__iter_concept_impl&lt;_Iter&gt;
493 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits&lt;_Iter&gt;::iterator_category;&#32;};
494 
495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;random_access_tag&#32;if&#32;iterator_traits&lt;I&gt;&#32;is&#32;not&#32;specialized.</emphasis>
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(!<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits&lt;_Iter&gt;::iterator_concept;&#32;}
498 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits&lt;_Iter&gt;::iterator_category;&#32;}
499 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__primary_traits_iter&lt;_Iter&gt;)
500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>&#32;__iter_concept_impl&lt;_Iter&gt;
501 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;random_access_iterator_tag;&#32;};
502 
503 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Otherwise,&#32;there&#32;is&#32;no&#32;ITER_CONCEPT(I)&#32;type.</emphasis>
504 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__iter_concept_impl
506 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
507 
508 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ITER_CONCEPT</emphasis>
509 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
510 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__iter_concept&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_concept_impl&lt;_Iter&gt;::type;
511 
512 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_In&gt;
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__indirectly_readable_impl&#32;=&#32;<emphasis role="keyword">requires</emphasis>
514 &#32;&#32;&#32;&#32;&#32;&#32;{
515 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iter_value_t&lt;_In&gt;;
516 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iter_reference_t&lt;_In&gt;;
517 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iter_rvalue_reference_t&lt;_In&gt;;
518 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;same_as&lt;iter_reference_t&lt;const&#32;_In&gt;,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_reference_t&lt;_In&gt;&gt;;
520 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;same_as&lt;iter_rvalue_reference_t&lt;const&#32;_In&gt;,
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_rvalue_reference_t&lt;_In&gt;&gt;;
522 &#32;&#32;&#32;&#32;&#32;&#32;}
523 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;common_reference_with&lt;iter_reference_t&lt;_In&gt;&amp;&amp;,&#32;iter_value_t&lt;_In&gt;&amp;&gt;
524 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;common_reference_with&lt;iter_reference_t&lt;_In&gt;&amp;&amp;,
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_rvalue_reference_t&lt;_In&gt;&amp;&amp;&gt;
526 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;common_reference_with&lt;iter_rvalue_reference_t&lt;_In&gt;&amp;&amp;,
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;iter_value_t&lt;_In&gt;&amp;&gt;;
528 
529 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
530 
532 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_In&gt;
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_readable
534 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__detail::__indirectly_readable_impl&lt;remove_cvref_t&lt;_In&gt;&gt;;
535 
536 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;indirectly_readable&#32;_Tp&gt;
537 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iter_common_reference_t
538 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;common_reference_t&lt;iter_reference_t&lt;_Tp&gt;,&#32;iter_value_t&lt;_Tp&gt;&amp;&gt;;
539 
541 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Out,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
542 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_writable&#32;=&#32;<emphasis role="keyword">requires</emphasis>(_Out&amp;&amp;&#32;__o,&#32;_Tp&amp;&amp;&#32;__t)
543 &#32;&#32;&#32;&#32;&#32;&#32;{
544 &#32;&#32;&#32;&#32;*__o&#32;=&#32;std::forward&lt;_Tp&gt;(__t);
545 &#32;&#32;&#32;&#32;*std::forward&lt;_Out&gt;(__o)&#32;=&#32;std::forward&lt;_Tp&gt;(__t);
546 &#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>iter_reference_t&lt;_Out&gt;&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*__o)
547 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::forward&lt;_Tp&gt;(__t);
548 &#32;&#32;&#32;&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>iter_reference_t&lt;_Out&gt;&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(*std::forward&lt;_Out&gt;(__o))
549 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::forward&lt;_Tp&gt;(__t);
550 &#32;&#32;&#32;&#32;&#32;&#32;};
551 
552 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>ranges::__detail
553 &#32;&#32;{
554 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__max_diff_type;
555 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__max_size_type;
556 
557 &#32;&#32;&#32;&#32;__extension__
558 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__is_signed_int128
560 #<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;__SIZEOF_INT128__
561 &#32;&#32;&#32;&#32;=&#32;same_as&lt;_Tp,&#32;__int128&gt;;
562 <emphasis role="preprocessor">#else</emphasis>
563 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
564 <emphasis role="preprocessor">#endif</emphasis>
565 
566 &#32;&#32;&#32;&#32;__extension__
567 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__is_unsigned_int128
569 #<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;__SIZEOF_INT128__
570 &#32;&#32;&#32;&#32;=&#32;same_as&lt;_Tp,&#32;unsigned&#32;__int128&gt;;
571 <emphasis role="preprocessor">#else</emphasis>
572 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">false</emphasis>;
573 <emphasis role="preprocessor">#endif</emphasis>
574 
575 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__cv_bool&#32;=&#32;same_as&lt;const&#32;volatile&#32;_Tp,&#32;const&#32;volatile&#32;bool&gt;;
577 
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__integral_nonbool&#32;=&#32;integral&lt;_Tp&gt;&#32;&amp;&amp;&#32;!__cv_bool&lt;_Tp&gt;;
580 
581 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__is_int128&#32;=&#32;__is_signed_int128&lt;_Tp&gt;&#32;||&#32;__is_unsigned_int128&lt;_Tp&gt;;
583 
584 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__is_integer_like&#32;=&#32;__integral_nonbool&lt;_Tp&gt;
586 &#32;&#32;&#32;&#32;||&#32;__is_int128&lt;_Tp&gt;
587 &#32;&#32;&#32;&#32;||&#32;same_as&lt;_Tp,&#32;__max_diff_type&gt;&#32;||&#32;same_as&lt;_Tp,&#32;__max_size_type&gt;;
588 
589 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
590 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__is_signed_integer_like&#32;=&#32;signed_integral&lt;_Tp&gt;
591 &#32;&#32;&#32;&#32;||&#32;__is_signed_int128&lt;_Tp&gt;
592 &#32;&#32;&#32;&#32;||&#32;same_as&lt;_Tp,&#32;__max_diff_type&gt;;
593 
594 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;ranges::__detail</emphasis>
595 
596 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>ranges::__detail::__is_signed_integer_like;&#32;}
597 
599 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
600 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>weakly_incrementable&#32;=&#32;movable&lt;_Iter&gt;
601 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__i)
602 &#32;&#32;&#32;&#32;&#32;&#32;{
603 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iter_difference_t&lt;_Iter&gt;;
604 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__detail::__is_signed_integer_like&lt;iter_difference_t&lt;_Iter&gt;&gt;;
605 &#32;&#32;&#32;&#32;{&#32;++__i&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
606 &#32;&#32;&#32;&#32;__i++;
607 &#32;&#32;&#32;&#32;&#32;&#32;};
608 
609 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
610 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>incrementable&#32;=&#32;regular&lt;_Iter&gt;&#32;&amp;&amp;&#32;weakly_incrementable&lt;_Iter&gt;
611 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__i)&#32;{&#32;{&#32;__i++&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;&#32;};
612 
613 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
614 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>input_or_output_iterator
615 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__i)&#32;{&#32;{&#32;*__i&#32;}&#32;-&gt;&#32;__detail::__can_reference;&#32;}
616 &#32;&#32;&#32;&#32;&amp;&amp;&#32;weakly_incrementable&lt;_Iter&gt;;
617 
618 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
619 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>sentinel_for&#32;=&#32;semiregular&lt;_Sent&gt;
620 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;input_or_output_iterator&lt;_Iter&gt;
621 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__detail::__weakly_eq_cmp_with&lt;_Sent,&#32;_Iter&gt;;
622 
623 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
624 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;disable_sized_sentinel_for&#32;=&#32;<emphasis role="keyword">false</emphasis>;
625 
626 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sent,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
627 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>sized_sentinel_for&#32;=&#32;sentinel_for&lt;_Sent,&#32;_Iter&gt;
628 &#32;&#32;&#32;&#32;&amp;&amp;&#32;!disable_sized_sentinel_for&lt;remove_cv_t&lt;_Sent&gt;,&#32;remove_cv_t&lt;_Iter&gt;&gt;
629 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(<emphasis role="keyword">const</emphasis>&#32;_Iter&amp;&#32;__i,&#32;<emphasis role="keyword">const</emphasis>&#32;_Sent&amp;&#32;__s)
630 &#32;&#32;&#32;&#32;{
631 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__s&#32;-&#32;__i&#32;}&#32;-&gt;&#32;same_as&lt;iter_difference_t&lt;_Iter&gt;&gt;;
632 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__i&#32;-&#32;__s&#32;}&#32;-&gt;&#32;same_as&lt;iter_difference_t&lt;_Iter&gt;&gt;;
633 &#32;&#32;&#32;&#32;};
634 
635 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
636 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>input_iterator&#32;=&#32;input_or_output_iterator&lt;_Iter&gt;
637 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_readable&lt;_Iter&gt;
638 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;__detail::__iter_concept&lt;_Iter&gt;;&#32;}
639 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;derived_from&lt;__detail::__iter_concept&lt;_Iter&gt;,&#32;input_iterator_tag&gt;;
640 
641 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
642 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>output_iterator&#32;=&#32;input_or_output_iterator&lt;_Iter&gt;
643 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Iter,&#32;_Tp&gt;
644 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__i,&#32;_Tp&amp;&amp;&#32;__t)&#32;{&#32;*__i++&#32;=&#32;std::forward&lt;_Tp&gt;(__t);&#32;};
645 
646 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>forward_iterator&#32;=&#32;input_iterator&lt;_Iter&gt;
648 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;derived_from&lt;__detail::__iter_concept&lt;_Iter&gt;,&#32;forward_iterator_tag&gt;
649 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;incrementable&lt;_Iter&gt;&#32;&amp;&amp;&#32;sentinel_for&lt;_Iter,&#32;_Iter&gt;;
650 
651 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
652 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>bidirectional_iterator&#32;=&#32;forward_iterator&lt;_Iter&gt;
653 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;derived_from&lt;__detail::__iter_concept&lt;_Iter&gt;,
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bidirectional_iterator_tag&gt;
655 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__i)
656 &#32;&#32;&#32;&#32;&#32;&#32;{
657 &#32;&#32;&#32;&#32;{&#32;--__i&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
658 &#32;&#32;&#32;&#32;{&#32;__i--&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;
659 &#32;&#32;&#32;&#32;&#32;&#32;};
660 
661 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
662 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>random_access_iterator&#32;=&#32;bidirectional_iterator&lt;_Iter&gt;
663 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;derived_from&lt;__detail::__iter_concept&lt;_Iter&gt;,
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag&gt;
665 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;totally_ordered&lt;_Iter&gt;&#32;&amp;&amp;&#32;sized_sentinel_for&lt;_Iter,&#32;_Iter&gt;
666 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Iter&#32;__i,&#32;<emphasis role="keyword">const</emphasis>&#32;_Iter&#32;__j,
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;iter_difference_t&lt;_Iter&gt;&#32;__n)
668 &#32;&#32;&#32;&#32;&#32;&#32;{
669 &#32;&#32;&#32;&#32;{&#32;__i&#32;+=&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
670 &#32;&#32;&#32;&#32;{&#32;__j&#32;+&#32;&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;
671 &#32;&#32;&#32;&#32;{&#32;__n&#32;+&#32;&#32;__j&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;
672 &#32;&#32;&#32;&#32;{&#32;__i&#32;-=&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&amp;&gt;;
673 &#32;&#32;&#32;&#32;{&#32;__j&#32;-&#32;&#32;__n&#32;}&#32;-&gt;&#32;same_as&lt;_Iter&gt;;
674 &#32;&#32;&#32;&#32;{&#32;&#32;__j[__n]&#32;&#32;}&#32;-&gt;&#32;same_as&lt;iter_reference_t&lt;_Iter&gt;&gt;;
675 &#32;&#32;&#32;&#32;&#32;&#32;};
676 
677 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
678 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>contiguous_iterator&#32;=&#32;random_access_iterator&lt;_Iter&gt;
679 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;derived_from&lt;__detail::__iter_concept&lt;_Iter&gt;,&#32;contiguous_iterator_tag&gt;
680 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_lvalue_reference_v&lt;iter_reference_t&lt;_Iter&gt;&gt;
681 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;same_as&lt;iter_value_t&lt;_Iter&gt;,&#32;remove_cvref_t&lt;iter_reference_t&lt;_Iter&gt;&gt;&gt;
682 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(<emphasis role="keyword">const</emphasis>&#32;_Iter&amp;&#32;__i)
683 &#32;&#32;&#32;&#32;&#32;&#32;{
684 &#32;&#32;&#32;&#32;{&#32;std::to_address(__i)&#32;}
685 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;same_as&lt;add_pointer_t&lt;iter_reference_t&lt;_Iter&gt;&gt;&gt;;
686 &#32;&#32;&#32;&#32;&#32;&#32;};
687 
688 &#32;&#32;<emphasis role="comment">//&#32;[indirectcallable],&#32;indirect&#32;callable&#32;requirements</emphasis>
689 
690 &#32;&#32;<emphasis role="comment">//&#32;[indirectcallable.indirectinvocable],&#32;indirect&#32;callables</emphasis>
691 
692 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
693 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_unary_invocable&#32;=&#32;indirectly_readable&lt;_Iter&gt;
694 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;copy_constructible&lt;_Fn&gt;&#32;&amp;&amp;&#32;invocable&lt;_Fn&amp;,&#32;iter_value_t&lt;_Iter&gt;&amp;&gt;
695 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;invocable&lt;_Fn&amp;,&#32;iter_reference_t&lt;_Iter&gt;&gt;
696 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;invocable&lt;_Fn&amp;,&#32;iter_common_reference_t&lt;_Iter&gt;&gt;
697 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;common_reference_with&lt;invoke_result_t&lt;_Fn&amp;,&#32;iter_value_t&lt;_Iter&gt;&amp;&gt;,
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invoke_result_t&lt;_Fn&amp;,&#32;iter_reference_t&lt;_Iter&gt;&gt;&gt;;
699 
700 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
701 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_regular_unary_invocable&#32;=&#32;indirectly_readable&lt;_Iter&gt;
702 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;copy_constructible&lt;_Fn&gt;
703 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;regular_invocable&lt;_Fn&amp;,&#32;iter_value_t&lt;_Iter&gt;&amp;&gt;
704 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;regular_invocable&lt;_Fn&amp;,&#32;iter_reference_t&lt;_Iter&gt;&gt;
705 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;regular_invocable&lt;_Fn&amp;,&#32;iter_common_reference_t&lt;_Iter&gt;&gt;
706 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;common_reference_with&lt;invoke_result_t&lt;_Fn&amp;,&#32;iter_value_t&lt;_Iter&gt;&amp;&gt;,
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invoke_result_t&lt;_Fn&amp;,&#32;iter_reference_t&lt;_Iter&gt;&gt;&gt;;
708 
709 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
710 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirect_unary_predicate&#32;=&#32;indirectly_readable&lt;_Iter&gt;
711 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;copy_constructible&lt;_Fn&gt;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_value_t&lt;_Iter&gt;&amp;&gt;
712 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_reference_t&lt;_Iter&gt;&gt;
713 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_common_reference_t&lt;_Iter&gt;&gt;;
714 
715 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I2&gt;
716 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirect_binary_predicate
717 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;indirectly_readable&lt;_I1&gt;&#32;&amp;&amp;&#32;indirectly_readable&lt;_I2&gt;
718 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;copy_constructible&lt;_Fn&gt;
719 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_value_t&lt;_I1&gt;&amp;,&#32;iter_value_t&lt;_I2&gt;&amp;&gt;
720 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_value_t&lt;_I1&gt;&amp;,&#32;iter_reference_t&lt;_I2&gt;&gt;
721 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_reference_t&lt;_I1&gt;,&#32;iter_value_t&lt;_I2&gt;&amp;&gt;
722 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_reference_t&lt;_I1&gt;,&#32;iter_reference_t&lt;_I2&gt;&gt;
723 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;predicate&lt;_Fn&amp;,&#32;iter_common_reference_t&lt;_I1&gt;,
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_common_reference_t&lt;_I2&gt;&gt;;
725 
726 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I2&#32;=&#32;_I1&gt;
727 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirect_equivalence_relation
728 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;indirectly_readable&lt;_I1&gt;&#32;&amp;&amp;&#32;indirectly_readable&lt;_I2&gt;
729 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;copy_constructible&lt;_Fn&gt;
730 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;equivalence_relation&lt;_Fn&amp;,&#32;iter_value_t&lt;_I1&gt;&amp;,&#32;iter_value_t&lt;_I2&gt;&amp;&gt;
731 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;equivalence_relation&lt;_Fn&amp;,&#32;iter_value_t&lt;_I1&gt;&amp;,&#32;iter_reference_t&lt;_I2&gt;&gt;
732 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;equivalence_relation&lt;_Fn&amp;,&#32;iter_reference_t&lt;_I1&gt;,&#32;iter_value_t&lt;_I2&gt;&amp;&gt;
733 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;equivalence_relation&lt;_Fn&amp;,&#32;iter_reference_t&lt;_I1&gt;,
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_reference_t&lt;_I2&gt;&gt;
735 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;equivalence_relation&lt;_Fn&amp;,&#32;iter_common_reference_t&lt;_I1&gt;,
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_common_reference_t&lt;_I2&gt;&gt;;
737 
738 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I2&#32;=&#32;_I1&gt;
739 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirect_strict_weak_order
740 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;indirectly_readable&lt;_I1&gt;&#32;&amp;&amp;&#32;indirectly_readable&lt;_I2&gt;
741 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;copy_constructible&lt;_Fn&gt;
742 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;strict_weak_order&lt;_Fn&amp;,&#32;iter_value_t&lt;_I1&gt;&amp;,&#32;iter_value_t&lt;_I2&gt;&amp;&gt;
743 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;strict_weak_order&lt;_Fn&amp;,&#32;iter_value_t&lt;_I1&gt;&amp;,&#32;iter_reference_t&lt;_I2&gt;&gt;
744 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;strict_weak_order&lt;_Fn&amp;,&#32;iter_reference_t&lt;_I1&gt;,&#32;iter_value_t&lt;_I2&gt;&amp;&gt;
745 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;strict_weak_order&lt;_Fn&amp;,&#32;iter_reference_t&lt;_I1&gt;,&#32;iter_reference_t&lt;_I2&gt;&gt;
746 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;strict_weak_order&lt;_Fn&amp;,&#32;iter_common_reference_t&lt;_I1&gt;,
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_common_reference_t&lt;_I2&gt;&gt;;
748 
749 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fn,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Is&gt;
750 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;(indirectly_readable&lt;_Is&gt;&#32;&amp;&amp;&#32;...)
751 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;invocable&lt;_Fn,&#32;iter_reference_t&lt;_Is&gt;...&gt;
752 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>indirect_result_t&#32;=&#32;invoke_result_t&lt;_Fn,&#32;iter_reference_t&lt;_Is&gt;...&gt;;
753 
755 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;indirectly_readable&#32;_Iter,
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;indirectly_regular_unary_invocable&lt;_Iter&gt;&#32;_Proj&gt;
757 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>projected
758 &#32;&#32;&#32;&#32;{
759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;remove_cvref_t&lt;indirect_result_t&lt;_Proj&amp;,&#32;_Iter&gt;&gt;;
760 
761 &#32;&#32;&#32;&#32;&#32;&#32;indirect_result_t&lt;_Proj&amp;,&#32;_Iter&gt;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;<emphasis role="keyword">const</emphasis>;&#32;<emphasis role="comment">//&#32;not&#32;defined</emphasis>
762 &#32;&#32;&#32;&#32;};
763 
764 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;weakly_incrementable&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&gt;
765 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>incrementable_traits&lt;projected&lt;_Iter,&#32;_Proj&gt;&gt;
766 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;iter_difference_t&lt;_Iter&gt;;&#32;};
767 
768 &#32;&#32;<emphasis role="comment">//&#32;[alg.req],&#32;common&#32;algorithm&#32;requirements</emphasis>
769 
771 
772 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_In,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
773 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_movable&#32;=&#32;indirectly_readable&lt;_In&gt;
774 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;iter_rvalue_reference_t&lt;_In&gt;&gt;;
775 
776 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_In,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
777 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_movable_storable&#32;=&#32;indirectly_movable&lt;_In,&#32;_Out&gt;
778 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;iter_value_t&lt;_In&gt;&gt;
779 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;movable&lt;iter_value_t&lt;_In&gt;&gt;
780 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;constructible_from&lt;iter_value_t&lt;_In&gt;,&#32;iter_rvalue_reference_t&lt;_In&gt;&gt;
781 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;assignable_from&lt;iter_value_t&lt;_In&gt;&amp;,&#32;iter_rvalue_reference_t&lt;_In&gt;&gt;;
782 
784 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_In,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
785 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_copyable&#32;=&#32;indirectly_readable&lt;_In&gt;
786 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;iter_reference_t&lt;_In&gt;&gt;;
787 
788 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_In,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out&gt;
789 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_copyable_storable&#32;=&#32;indirectly_copyable&lt;_In,&#32;_Out&gt;
790 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;iter_value_t&lt;_In&gt;&amp;&gt;
791 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;const&#32;iter_value_t&lt;_In&gt;&amp;&gt;
792 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;iter_value_t&lt;_In&gt;&amp;&amp;&gt;
793 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_writable&lt;_Out,&#32;const&#32;iter_value_t&lt;_In&gt;&amp;&amp;&gt;
794 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;copyable&lt;iter_value_t&lt;_In&gt;&gt;
795 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;constructible_from&lt;iter_value_t&lt;_In&gt;,&#32;iter_reference_t&lt;_In&gt;&gt;
796 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;assignable_from&lt;iter_value_t&lt;_In&gt;&amp;,&#32;iter_reference_t&lt;_In&gt;&gt;;
797 
798 <emphasis role="keyword">namespace&#32;</emphasis>ranges
799 {
800 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cust_iswap
801 &#32;&#32;{
802 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_It1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_It2&gt;
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;iter_swap(_It1,&#32;_It2)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
804 
805 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
806 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__adl_iswap
807 &#32;&#32;&#32;&#32;=&#32;(std::__detail::__class_or_enum&lt;remove_reference_t&lt;_Tp&gt;&gt;
808 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;std::__detail::__class_or_enum&lt;remove_reference_t&lt;_Up&gt;&gt;)
809 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Tp&amp;&amp;&#32;__t,&#32;_Up&amp;&amp;&#32;__u)&#32;{
810 &#32;&#32;&#32;&#32;&#32;&#32;iter_swap(<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__t),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__u));
811 &#32;&#32;&#32;&#32;};
812 
813 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Xp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;iter_value_t&lt;_Xp&gt;
815 &#32;&#32;&#32;&#32;&#32;&#32;__iter_exchange_move(_Xp&amp;&amp;&#32;__x,&#32;_Yp&amp;&amp;&#32;__y)
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(iter_value_t&lt;_Xp&gt;(iter_move(__x)))
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>(*__x&#32;=&#32;iter_move(__y)))
818 &#32;&#32;&#32;&#32;&#32;&#32;{
819 &#32;&#32;&#32;&#32;iter_value_t&lt;_Xp&gt;&#32;__old_value(iter_move(__x));
820 &#32;&#32;&#32;&#32;*__x&#32;=&#32;iter_move(__y);
821 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old_value;
822 &#32;&#32;&#32;&#32;&#32;&#32;}
823 
824 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IterSwap
825 &#32;&#32;&#32;&#32;{
826 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
829 &#32;&#32;&#32;&#32;_S_noexcept()
830 &#32;&#32;&#32;&#32;{
831 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__adl_iswap&lt;_Tp,&#32;_Up&gt;)
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(iter_swap(std::declval&lt;_Tp&gt;(),
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Up&gt;()));
834 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(indirectly_readable&lt;_Tp&gt;
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_readable&lt;_Up&gt;
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;swappable_with&lt;iter_reference_t&lt;_Tp&gt;,&#32;iter_reference_t&lt;_Up&gt;&gt;)
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(ranges::swap(*std::declval&lt;_Tp&gt;(),
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*std::declval&lt;_Up&gt;()));
839 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>(*std::declval&lt;_Tp&gt;()
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__iter_exchange_move(std::declval&lt;_Up&gt;(),
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Tp&gt;()));
843 &#32;&#32;&#32;&#32;}
844 
845 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;__adl_iswap&lt;_Tp,&#32;_Up&gt;
848 &#32;&#32;&#32;&#32;||&#32;(indirectly_readable&lt;remove_reference_t&lt;_Tp&gt;&gt;
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_readable&lt;remove_reference_t&lt;_Up&gt;&gt;
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;swappable_with&lt;iter_reference_t&lt;_Tp&gt;,&#32;iter_reference_t&lt;_Up&gt;&gt;)
851 &#32;&#32;&#32;&#32;||&#32;(indirectly_movable_storable&lt;_Tp,&#32;_Up&gt;
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_movable_storable&lt;_Up,&#32;_Tp&gt;)
853 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
854 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__e1,&#32;_Up&amp;&amp;&#32;__e2)&#32;<emphasis role="keyword">const</emphasis>
855 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_S_noexcept&lt;_Tp,&#32;_Up&gt;())
856 &#32;&#32;&#32;&#32;{
857 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__adl_iswap&lt;_Tp,&#32;_Up&gt;)
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iter_swap(<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__e1),&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__e2));
859 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(indirectly_readable&lt;_Tp&gt;
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_readable&lt;_Up&gt;
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;swappable_with&lt;iter_reference_t&lt;_Tp&gt;,&#32;iter_reference_t&lt;_Up&gt;&gt;)
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ranges::swap(*__e1,&#32;*__e2);
863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__e1&#32;=&#32;__iter_exchange_move(__e2,&#32;__e1);
865 &#32;&#32;&#32;&#32;}
866 &#32;&#32;&#32;&#32;};
867 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__cust_iswap</emphasis>
868 
869 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>__cust
870 &#32;&#32;{
871 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__cust_iswap::_IterSwap&#32;iter_swap{};
872 &#32;&#32;}&#32;<emphasis role="comment">//&#32;inline&#32;namespace&#32;__cust</emphasis>
873 
874 }&#32;<emphasis role="comment">//&#32;namespace&#32;ranges</emphasis>
875 
877 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_I1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I2&#32;=&#32;_I1&gt;
878 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_swappable
879 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;indirectly_readable&lt;_I1&gt;&#32;&amp;&amp;&#32;indirectly_readable&lt;_I2&gt;
880 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(<emphasis role="keyword">const</emphasis>&#32;_I1&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;_I2&#32;__i2)
881 &#32;&#32;&#32;&#32;&#32;&#32;{
882 &#32;&#32;&#32;&#32;ranges::iter_swap(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);
883 &#32;&#32;&#32;&#32;ranges::iter_swap(__i2,&#32;__i2);
884 &#32;&#32;&#32;&#32;ranges::iter_swap(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2);
885 &#32;&#32;&#32;&#32;ranges::iter_swap(__i2,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>);
886 &#32;&#32;&#32;&#32;&#32;&#32;};
887 
889 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_I1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rel,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
891 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>indirectly_comparable
892 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;indirect_binary_predicate&lt;_Rel,&#32;projected&lt;_I1,&#32;_P1&gt;,
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_I2,&#32;_P2&gt;&gt;;
894 
896 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&gt;
897 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>permutable&#32;=&#32;forward_iterator&lt;_Iter&gt;
898 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_movable_storable&lt;_Iter,&#32;_Iter&gt;
899 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_swappable&lt;_Iter,&#32;_Iter&gt;;
900 
902 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_I1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_I2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Out,
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rel&#32;=&#32;ranges::less,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P1&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>,
904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
905 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>mergeable&#32;=&#32;input_iterator&lt;_I1&gt;&#32;&amp;&amp;&#32;input_iterator&lt;_I2&gt;
906 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;weakly_incrementable&lt;_Out&gt;&#32;&amp;&amp;&#32;indirectly_copyable&lt;_I1,&#32;_Out&gt;
907 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirectly_copyable&lt;_I2,&#32;_Out&gt;
908 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_strict_weak_order&lt;_Rel,&#32;projected&lt;_I1,&#32;_P1&gt;,
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;projected&lt;_I2,&#32;_P2&gt;&gt;;
910 
912 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rel&#32;=&#32;ranges::less,
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Proj&#32;=&#32;<link linkend="_group__ext__matrix__transform_1ga81696f2b8d1db02ea1aff8da8f269314">identity</link>&gt;
914 &#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>sortable&#32;=&#32;permutable&lt;_Iter&gt;
915 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;indirect_strict_weak_order&lt;_Rel,&#32;projected&lt;_Iter,&#32;_Proj&gt;&gt;;
916 
917 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>unreachable_sentinel_t
918 &#32;&#32;{
919 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;weakly_incrementable&#32;_It&gt;
920 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
921 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(unreachable_sentinel_t,&#32;<emphasis role="keyword">const</emphasis>&#32;_It&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>
922 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;}
923 &#32;&#32;};
924 
925 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;unreachable_sentinel_t&#32;unreachable_sentinel{};
926 
927 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>default_sentinel_t&#32;{&#32;};
928 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;default_sentinel_t&#32;default_sentinel{};
929 
930 &#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;the&#32;namespace&#32;for&#32;[range.access]&#32;CPOs.</emphasis>
931 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>ranges::__cust_access
932 &#32;&#32;{
933 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::__detail::__class_or_enum;
934 
935 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Decay_copy&#32;final
936 &#32;&#32;&#32;&#32;{
937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
938 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;decay_t&lt;_Tp&gt;
939 &#32;&#32;&#32;&#32;operator()(_Tp&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">const</emphasis>
940 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_nothrow_convertible_v&lt;_Tp,&#32;decay_t&lt;_Tp&gt;&gt;)
941 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__t);&#32;}
942 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__decay_copy{};
943 
944 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
945 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__member_begin&#32;=&#32;<emphasis role="keyword">requires</emphasis>(_Tp&amp;&#32;__t)
946 &#32;&#32;&#32;&#32;{
947 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__decay_copy(__t.begin())&#32;}&#32;-&gt;&#32;input_or_output_iterator;
948 &#32;&#32;&#32;&#32;};
949 
950 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Poison&#32;pills&#32;so&#32;that&#32;unqualified&#32;lookup&#32;doesn&apos;t&#32;find&#32;std::begin.</emphasis>
951 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(<emphasis role="keyword">auto</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
952 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
953 
954 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
955 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">concept&#32;</emphasis>__adl_begin&#32;=&#32;__class_or_enum&lt;remove_reference_t&lt;_Tp&gt;&gt;
956 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<emphasis role="keyword">requires</emphasis>(_Tp&amp;&#32;__t)
957 &#32;&#32;&#32;&#32;{
958 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__decay_copy(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(__t))&#32;}&#32;-&gt;&#32;input_or_output_iterator;
959 &#32;&#32;&#32;&#32;};
960 
961 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simplified&#32;version&#32;of&#32;std::ranges::begin&#32;that&#32;only&#32;supports&#32;lvalues,</emphasis>
962 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;use&#32;by&#32;__range_iter_t&#32;below.</emphasis>
963 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_array_v&lt;_Tp&gt;&#32;||&#32;__member_begin&lt;_Tp&amp;&gt;&#32;||&#32;__adl_begin&lt;_Tp&amp;&gt;
965 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
966 &#32;&#32;&#32;&#32;&#32;&#32;__begin(_Tp&amp;&#32;__t)
967 &#32;&#32;&#32;&#32;&#32;&#32;{
968 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_array_v&lt;_Tp&gt;)
969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t&#32;+&#32;0;
970 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__member_begin&lt;_Tp&amp;&gt;)
971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t.begin();
972 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(__t);
974 &#32;&#32;&#32;&#32;&#32;&#32;}
975 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;ranges::__cust_access</emphasis>
976 
977 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
978 &#32;&#32;{
979 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;of&#32;std::ranges::iterator_t,&#32;without&#32;using&#32;ranges::begin.</emphasis>
980 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__range_iter_t
982 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(ranges::__cust_access::__begin(std::declval&lt;_Tp&amp;&gt;()));
983 
984 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
985 
986 _GLIBCXX_END_NAMESPACE_VERSION
987 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
988 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20&#32;library&#32;concepts</emphasis>
989 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_ITERATOR_CONCEPTS_H</emphasis>
</programlisting></section>
