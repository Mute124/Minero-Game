<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespace____pstl_1_1____internal" xml:lang="en-US">
<title>__pstl::__internal Namespace Reference</title>
<indexterm><primary>__pstl::__internal</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____brick__move__destroy">__brick_move_destroy</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1_____brick_copy_construct">__BrickCopyConstruct</link></para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____equal__value">__equal_value</link></para>

<para>Like a polymorphic lambda for ==value. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____equal__value__by__pred">__equal_value_by_pred</link></para>

<para>Like a polymorphic lambda for pred(...,value) </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__is_random_access_iterator</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator_3_01___iterator_type_01_4">__is_random_access_iterator&lt; _IteratorType &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____no__op">__no_op</link></para>

<para>Unary operator that returns reference to its argument. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____not__equal__value">__not_equal_value</link></para>

<para>Logical negation of ==value. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____not__pred">__not_pred</link></para>

<para>Logical negation of a predicate. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__policy_traits</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__policy_01_4">__policy_traits&lt; parallel_policy &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01parallel__unsequenced__policy_01_4">__policy_traits&lt; parallel_unsequenced_policy &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01sequenced__policy_01_4">__policy_traits&lt; sequenced_policy &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits_3_01unsequenced__policy_01_4">__policy_traits&lt; unsequenced_policy &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____prefer__parallel__tag">__prefer_parallel_tag</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct____pstl_1_1____internal_1_1____prefer__unsequenced__tag">__prefer_unsequenced_tag</link></para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____pstl__equal">__pstl_equal</link></para>

<para>&quot;==&quot; comparison. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____pstl__less">__pstl_less</link></para>

<para>&quot;&lt;&quot; comparison. </para>
</listitem>
            <listitem><para>class <link linkend="_class____pstl_1_1____internal_1_1____reorder__pred">__reorder_pred</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>template&lt;class _ExecPolicy , class _Tp &gt; </para><para>using <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__enable_if_execution_policy</link> = typename std::enable_if&lt; <link linkend="_struct____pstl_1_1execution_1_1v1_1_1is__execution__policy">__pstl::execution::is_execution_policy</link>&lt; typename std::decay&lt; _ExecPolicy &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;<link linkend="_classvalue">::value</link>, _Tp &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy &gt; </para><para>using <link linkend="_namespace____pstl_1_1____internal_1ae19f2535af6ba1b6ccf714704628d7ce">__collector_t</link> = typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt; typename std::decay&lt; _ExecutionPolicy &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;::__collector_type</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy &gt; </para><para>using <link linkend="_namespace____pstl_1_1____internal_1a9a909a1997cffa29a64d86f61adee836">__allow_vector</link> = typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt; typename std::decay&lt; _ExecutionPolicy &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;::__allow_vector</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy &gt; </para><para>using <link linkend="_namespace____pstl_1_1____internal_1a5d7af2c48372e5092c6a147bd48ea4ec">__allow_unsequenced</link> = typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt; typename std::decay&lt; _ExecutionPolicy &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;::__allow_unsequenced</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy &gt; </para><para>using <link linkend="_namespace____pstl_1_1____internal_1a126fcadf26cac3891eaa97538e25c7c7">__allow_parallel</link> = typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt; typename std::decay&lt; _ExecutionPolicy &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> &gt;::__allow_parallel</para>
</listitem>
            <listitem><para>template&lt;typename _Tp , typename _BinaryOperation &gt; </para><para>using <link linkend="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f">is_arithmetic_udop</link> = std::integral_constant&lt; <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, std::is_arithmetic&lt; _Tp &gt;<link linkend="_classvalue">::value</link> &amp;&amp;!std::is_same&lt; _BinaryOperation, std::plus&lt; _Tp &gt; &gt;<link linkend="_classvalue">::value</link> &gt;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;class _ForwardIterator , class _Pred &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752">__brick_any_of</link> (const _ForwardIterator, const _ForwardIterator, _Pred, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Pred &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a9b2b912b52719adc814aec19b4ae5724">__brick_any_of</link> (const _ForwardIterator, const _ForwardIterator, _Pred, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd">__pattern_any_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Pred, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1ac1fcc787847842dc5354728aabdcaf52">__pattern_any_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Pred, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Function &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f">__brick_walk1</link> (_ForwardIterator, _ForwardIterator, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Function &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a05a30a7d5e1521a48e690ef8894280d6">__brick_walk1</link> (_RandomAccessIterator, _RandomAccessIterator, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pattern_walk1</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1af335f95356f4ebf43cf207b222405f41">__pattern_walk1</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Brick &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pattern_walk_brick</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Brick &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a18df289a04236eebcd56b382e71eee12">__pattern_walk_brick</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _Function &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348">__brick_walk1_n</link> (_ForwardIterator, _Size, _Function, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _DifferenceType , class _Function &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a6378128671ed99ba10eca13fe91bece4">__brick_walk1_n</link> (_RandomAccessIterator, _DifferenceType, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Function , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pattern_walk1_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _Size, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Function , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1aed0391a132d75451e377268d2c658440">__pattern_walk1_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _Size, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Brick &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pattern_walk_brick_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _Size, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Brick &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a82332631799d42f5a9da54f3fc13da21">__pattern_walk_brick_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _Size, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70">__brick_walk2</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1aaceae6601e9503c253986f2db46fc3cf">__brick_walk2</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93">__brick_walk2_n</link> (_ForwardIterator1, _Size, _ForwardIterator2, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1aea52cfdce93a0d5017b0668ad7113ad3">__brick_walk2_n</link> (_ForwardIterator1, _Size, _ForwardIterator2, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pattern_walk2</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1af969c08a7c5fba72fe026426354c22cb">__pattern_walk2</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pattern_walk2_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _Size, _ForwardIterator2, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _Size , class _RandomAccessIterator2 , class _Function , class _IsVector &gt; </para><para>_RandomAccessIterator2 <link linkend="_namespace____pstl_1_1____internal_1afbe880c5f7740c2d414c6487247ee527">__pattern_walk2_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _Size, _RandomAccessIterator2, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Brick &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pattern_walk2_brick</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Brick &gt; </para><para>_RandomAccessIterator2 <link linkend="_namespace____pstl_1_1____internal_1a8653f3d43fc8d6b095c57650fed9f77c">__pattern_walk2_brick</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Brick &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pattern_walk2_brick_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _Size, _ForwardIterator2, _Brick, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _Size , class _RandomAccessIterator2 , class _Brick &gt; </para><para>_RandomAccessIterator2 <link linkend="_namespace____pstl_1_1____internal_1a2ce242375a503d9905db8a0e7ce1f016">__pattern_walk2_brick_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _Size, _RandomAccessIterator2, _Brick, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator3 , class _Function &gt; </para><para>_ForwardIterator3 <link linkend="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739">__brick_walk3</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator3, _Function, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Function &gt; </para><para>_RandomAccessIterator3 <link linkend="_namespace____pstl_1_1____internal_1acae311291914182fd1ce298c044639f4">__brick_walk3</link> (_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator3, _Function, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator3 , class _Function , class _IsVector &gt; </para><para>_ForwardIterator3 <link linkend="_namespace____pstl_1_1____internal_1a618223855e120744a00b409ddfb37ea3">__pattern_walk3</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator3, _Function, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Function , class _IsVector &gt; </para><para>_RandomAccessIterator3 <link linkend="_namespace____pstl_1_1____internal_1a5686ea0a28913fdc233959a0f24f836f">__pattern_walk3</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator3, _Function, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a">__brick_equal</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a053bbd4b7e93e04d16e4df04e4d3838b">__brick_equal</link> (_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518">__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a332e322b408e2e79300d0905a08e618c">__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _BinaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a472d5691c7f9feb0200fddec85c9a568">__brick_equal</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a44ebc2d1dfe65c1228db698daa2e1cc7">__brick_equal</link> (_RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a36710873120eed2fa180a36e2b03a419">__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a6d8ee7abba31d48fda0226527ee72464">__pattern_equal</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _BinaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Predicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761">__brick_find_if</link> (_ForwardIterator, _ForwardIterator, _Predicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Predicate &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a581d8543c481a200d1d83d18d5f4a6db">__brick_find_if</link> (_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a048b6c9be4b418a089e7e1de87722139">__pattern_find_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae297f95d5af67e7659376698b891d9b6">__pattern_find_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6">__brick_find_end</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a2fccb31b7e808df816acc32eca1d7c8e">__brick_find_end</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1ab41e2c44c1a0b564c5f9e350dc98cd07">__pattern_find_end</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a4bbac7fb426c503541d7a13f3f6a3ccd">__pattern_find_end</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd">__brick_find_first_of</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a8ff145b4e3b762807d7ef4ef380d2b6e">__brick_find_first_of</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1ab87ed0d016b76e9009330174d6dd604f">__pattern_find_first_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a60c0a49ac96eb84fac73ad09bb67e9b2">__pattern_find_first_of</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f">__brick_search</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a8cdbed978ba5750739475e7ef7118a5b">__brick_search</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1af101203bfce74b08bef3c56eaa652f97">__pattern_search</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator1 <link linkend="_namespace____pstl_1_1____internal_1a8ccbebe06473a8864e3f075b85bac098">__pattern_search</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f">__brick_search_n</link> (_ForwardIterator, _ForwardIterator, _Size, const _Tp &amp;, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aaf9729ce5af62bb1b0a1a2fdc7270345">__brick_search_n</link> (_ForwardIterator, _ForwardIterator, _Size, const _Tp &amp;, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate , class IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aeee6ca536b74ecbe6543c70b07b0bbf4">__pattern_search_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Size, const _Tp &amp;, _BinaryPredicate, IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Tp , class _BinaryPredicate , class IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a1e4dd7de3f8c01c02c10cbc548099a90">__pattern_search_n</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Size, const _Tp &amp;, _BinaryPredicate, IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__brick_copy_n</link> (_ForwardIterator, _Size, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a46dbb9cc91b8fdb864ff4e6ce460dd20">__brick_copy_n</link> (_ForwardIterator, _Size, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__brick_copy</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a88fcc796f526a2ba6957acf3976dbbc3">__brick_copy</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975">__brick_move</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7680520275602d5e91c39a4d3d69c44a">__brick_move</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a5859660f8d8c3308e80935f3bda79577">__brick_swap_ranges</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a53e8bfe6e5f007e9bf7dde1ca0e5ed11">__brick_swap_ranges</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc">__brick_copy_if</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1acbebb21468389df805688ba0a2ab0ec1">__brick_copy_if</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _ForwardIterator , class _UnaryPredicate &gt; </para><para>std::pair&lt; _DifferenceType, _DifferenceType &gt; <link linkend="_namespace____pstl_1_1____internal_1aa9f3335e6c5bc8f3c503f12c2c706399">__brick_calc_mask_1</link> (_ForwardIterator, _ForwardIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _RandomAccessIterator , class _UnaryPredicate &gt; </para><para>std::pair&lt; _DifferenceType, _DifferenceType &gt; <link linkend="_namespace____pstl_1_1____internal_1a9a557df6c1ed000c198914129fb70ec1">__brick_calc_mask_1</link> (_RandomAccessIterator, _RandomAccessIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc">__brick_copy_by_mask</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a06aa8369aa54e91cb1f8b939f3fd2bc7">__brick_copy_by_mask</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40">__brick_partition_by_mask</link> (_ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator1 , class _OutputIterator2 &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a1944146783531194c658918287714564">__brick_partition_by_mask</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator1, _OutputIterator2, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a00b73000f7d2c9884939b67f41de7bb3">__pattern_copy_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1aa037013595e41eca3362fb3a268ed297">__pattern_copy_if</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Predicate &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91">__brick_count</link> (_ForwardIterator, _ForwardIterator, _Predicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Predicate &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1a2da220bb96436b8c805755018fb8aee7">__brick_count</link> (_ForwardIterator, _ForwardIterator, _Predicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1ab6c85c9e6daf1ae911a899fb47a2dac9">__pattern_count</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </para><para>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type <link linkend="_namespace____pstl_1_1____internal_1ac2f2f71c321b21d7898859b498562000">__pattern_count</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Predicate, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774">__brick_unique</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1affc5add2a525af1c97863d16e6aad934">__brick_unique</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a7d71081d25f6bd099154a9d7ab2acc0b">__pattern_unique</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a11935690aa5dac579ee657f013e63a34">__pattern_unique</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _BinaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class OutputIterator , class _BinaryPredicate &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57">__brick_unique_copy</link> (_ForwardIterator, _ForwardIterator, OutputIterator, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _OutputIterator , class _BinaryPredicate &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1aaa5e056a16dd2452e11d2b5946167a0f">__brick_unique_copy</link> (_RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ae5b4115f81569b63f8d0feb2bd3b90ec">__pattern_unique_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____internal_1a0c5ab799fe2096f845371f4cc601a3e8">__brick_calc_mask_2</link> (_RandomAccessIterator, _RandomAccessIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _BinaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____internal_1acbd907ca57b3934450a4f9e449412dc2">__brick_calc_mask_2</link> (_RandomAccessIterator, _RandomAccessIterator, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict, _BinaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7b3e1f14245a12221c9a3e8bd3f1af5c">__pattern_unique_copy</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _BinaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd">__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a0b4d274f65f477174b1552a456f8d908">__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a2cc357497651525e564373c01db2a76a">__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a9d65cdb7fc2943b62938649b44ff97d1">__brick_reverse</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a5f2267ae5935da96528156e02f6f4303">__pattern_reverse</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a94ad8c6840c1904f7d52858e7be74354">__pattern_reverse</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4">__brick_reverse_copy</link> (_BidirectionalIterator, _BidirectionalIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a2d77b0bfe7a8ee8ad7fc9c37d2e09f9f">__brick_reverse_copy</link> (_BidirectionalIterator, _BidirectionalIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1af2c72d8af8666a15b6ddcdbd7756cce0">__pattern_reverse_copy</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _OutputIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a1bbdf6f7bb9a5f3a4f31114a9043ddb4">__pattern_reverse_copy</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _OutputIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde">__brick_rotate</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a1441ac541a6e5a1fd3b0a243d89c8e38">__brick_rotate</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aa1344d4c056259b28555671b7a23108d">__pattern_rotate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a94a7d55cfbf7d100e9c4605bb77112ca">__pattern_rotate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d">__brick_rotate_copy</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a49a58246b209a35772ed9c026d5531a9">__brick_rotate_copy</link> (_ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a6a5ba3b17e77b55a76e8ed1b6130f2e2">__pattern_rotate_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a00eafc09ae70c395ab01c3f9a66fd235">__pattern_rotate_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _ForwardIterator, _OutputIterator, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd">__brick_is_partitioned</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1abbf66af8bb8e1309bd15b4a84c7465e6">__brick_is_partitioned</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a3c61e6bb9156e92c5f8e13ad0c5e5e5b">__pattern_is_partitioned</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a731f25ad9c5911a4653029fe4daa672b">__pattern_is_partitioned</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605">__brick_partition</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae705dda6a3e436b790679fc77d04d7f5">__brick_partition</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523">__pattern_partition</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a61f63e28f8029e1701e73ac7b545d735">__pattern_partition</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _UnaryPredicate &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3">__brick_stable_partition</link> (_BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _UnaryPredicate &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a3e9891c584f6ee493a619a56d0bdde9c">__brick_stable_partition</link> (_BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a8c278dd40fdab60b98fd9a0046876130">__pattern_stable_partition</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_BidirectionalIterator <link linkend="_namespace____pstl_1_1____internal_1a5adc5d57d7e462d14f717be5a4a1fc84">__pattern_stable_partition</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _UnaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910">__brick_partition_copy</link> (_ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a697f3e432645ec6bd4d0d3005fa806e1">__brick_partition_copy</link> (_ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate , class _IsVector &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a213f0e051dd1ea6261325ac6f2f65cb2">__pattern_partition_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate , class _IsVector &gt; </para><para>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a39b7209a5f972f57dd561159aaef3301">__pattern_partition_copy</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator1, _OutputIterator2, _UnaryPredicate, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector , class _IsMoveConstructible &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a5ccc13fdf58da10d6d45be7770ad0a4c">__pattern_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type, _IsMoveConstructible) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1ab5e5fe62a4b7da3722035a9a77ac890b">__pattern_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aee8744385f4f206ef9dd2c11f1af9b48">__pattern_stable_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a0dbd23a8f6451b9d6a2faaa4abf0e1e1">__pattern_stable_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a913b070daf38b8f0c138c1c5df02f47c">__pattern_partial_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aba659375caae21864599440aa982bc74">__pattern_partial_sort</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1ac7fa2ccc37779ff9c32374cab3d19453">__pattern_partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a0b0d1ce785beef64a5003271d4cd5c4a">__pattern_partial_sort_copy</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26">__brick_adjacent_find</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::true_type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a3445e693a1a46acd217e4d7754a7f50f">__brick_adjacent_find</link> (_ForwardIterator, _ForwardIterator, _BinaryPredicate, std::false_type, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a6baa124378ed7fdc525b00a43af706ab">__pattern_adjacent_find</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _BinaryPredicate, std::false_type, _IsVector, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _BinaryPredicate , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a9a5ef5a50f34242baa056308a62ce5cc">__pattern_adjacent_find</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _BinaryPredicate, std::true_type, _IsVector, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a1d4194f0c17340011a1f84e4123b368a">__pattern_nth_element</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a6363ba028d1204de35e49c2992dc33be">__pattern_nth_element</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Tp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__brick_fill</link> (_ForwardIterator, _ForwardIterator, const _Tp &amp;, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Tp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a19af0566e05f3357ce3695374cca0c2e">__brick_fill</link> (_ForwardIterator, _ForwardIterator, const _Tp &amp;, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9">__pattern_fill</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, const _Tp &amp;, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a476db1d5f698af0a5a952a4645a4af70">__pattern_fill</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, const _Tp &amp;, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _OutputIterator , class _Size , class _Tp &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__brick_fill_n</link> (_OutputIterator, _Size, const _Tp &amp;, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _OutputIterator , class _Size , class _Tp &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1adf5ed1e8c383803a15d59309774cb0cb">__brick_fill_n</link> (_OutputIterator, _Size, const _Tp &amp;, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Tp , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ad46a2d1af24aa54224f2adc68ef625ce">__pattern_fill_n</link> (_ExecutionPolicy &amp;&amp;, _OutputIterator, _Size, const _Tp &amp;, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Tp , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a56499de61c94cc462ef14f3fc499dc9e">__pattern_fill_n</link> (_ExecutionPolicy &amp;&amp;, _OutputIterator, _Size, const _Tp &amp;, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Generator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5">__brick_generate</link> (_RandomAccessIterator, _RandomAccessIterator, _Generator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Generator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a6e77e64ed5384bd6a772763fdd2a70a9">__brick_generate</link> (_ForwardIterator, _ForwardIterator, _Generator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d">__pattern_generate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Generator, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a9a6fbb749f8b1ef63c3fc3ae5c81dc48">__pattern_generate</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Generator, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23">__brick_generate_n</link> (OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a63a2d4d1bf2db03ad2c4467854e5bb31">__brick_generate_n</link> (OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator , class _IsVector &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a89ba2dce127a80f7bc0578270c7fcb9c">__pattern_generate_n</link> (_ExecutionPolicy &amp;&amp;, OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::false_type, _IsVector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator , class _IsVector &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ae9558d53b020bc0bce2d465e61be16f0">__pattern_generate_n</link> (_ExecutionPolicy &amp;&amp;, OutputIterator, <link linkend="_struct_size">Size</link>, _Generator, std::true_type, _IsVector)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b">__brick_remove_if</link> (_ForwardIterator, _ForwardIterator, _UnaryPredicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _UnaryPredicate &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1ac0861501c2dea5f3bc26f3d05f2e6ce4">__brick_remove_if</link> (_RandomAccessIterator, _RandomAccessIterator, _UnaryPredicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ab7a6c74a4cb2c2ee930c2da12b6cd686">__pattern_remove_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1abaac748503657c571bfa47fdc1e0cc08">__pattern_remove_if</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _UnaryPredicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117">__brick_merge</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a1b6ea99e4a5059dafcaa7365f69ab37e">__brick_merge</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a76f9badc9cf4092c8e996b0564a8a8d2">__pattern_merge</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a88efac728302414dc40ef03666a525b9">__pattern_merge</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001">__brick_inplace_merge</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _BidirectionalIterator , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1ae6cb9d42f676a70f65ec28cac4fc47b9">__brick_inplace_merge</link> (_BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a28f4f64e2180b392ca4c226ee3c76d7c">__pattern_inplace_merge</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a4776592443a46071702773c7f7fd40d8">__pattern_inplace_merge</link> (_ExecutionPolicy &amp;&amp;, _BidirectionalIterator, _BidirectionalIterator, _BidirectionalIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1af4bd54f061b9f4a0d379383965a84e62">__pattern_includes</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a4e83898b31f777a59d85ceca52311ff8">__pattern_includes</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e">__brick_set_union</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a8960afc1a06baf39cd1a8a07e05c675a">__brick_set_union</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a0b5347b92e571caa994698482c35535b">__pattern_set_union</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ac7e0e35e17f94ea6ac0b9a531e6805f6">__pattern_set_union</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2">__brick_set_intersection</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a776f0c606778603c1b1ad6ab0acdd8cb">__brick_set_intersection</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1aa71f557e499f46f8fdfcb81c1ade34b3">__pattern_set_intersection</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a505413fc2fcfaf823836f8ba2348a21d">__pattern_set_intersection</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2">__brick_set_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a84aa3f0b49e2a585c1c41c7d36699c09">__brick_set_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ae2ac09b3a487a7ba6061822478a08420">__pattern_set_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a21887a3e3ba35dc56e4d524dd6f2dde5">__pattern_set_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8">__brick_set_symmetric_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a21a50e296afe62174b2781e8578fde76">__brick_set_symmetric_difference</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a2468e1a5821a3180a4352135b4ac89c9">__pattern_set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a0a3f69c5b0b60d4ea1e4127f8eab8ef2">__pattern_set_symmetric_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _OutputIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Compare &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0">__brick_is_heap_until</link> (_RandomAccessIterator, _RandomAccessIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Compare &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a1e8373179634547b3c8361940e47cfba">__brick_is_heap_until</link> (_RandomAccessIterator, _RandomAccessIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a0fe7d90d58490eee0f9aa2f92a0a48e1">__pattern_is_heap_until</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a71c7837f9acfc44b3fb3f952136e2100">__pattern_is_heap_until</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33">__brick_min_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ae85230afa98e8cc1e1d28e4ba68f3265">__brick_min_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1afac22840ab45394d57a19b1b5c102a9b">__pattern_min_element</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _RandomAccessIterator , typename _Compare , typename _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a68e4819c62973487b53a5fd4c2bfb6e2">__pattern_min_element</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13">__brick_minmax_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1a1637cf51097a64736c8993b610374047">__brick_minmax_element</link> (_ForwardIterator, _ForwardIterator, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1ac0ba54f6df57a5a9f3dfb520b1dffd37">__pattern_minmax_element</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </para><para>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; <link linkend="_namespace____pstl_1_1____internal_1a20c5c80ff4a258db9f3fa9020ac1d544">__pattern_minmax_element</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Compare, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e">__brick_mismatch</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Predicate, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </para><para>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1ae0ab000d4488fd3f8a2b3690fc2a6e5f">__brick_mismatch</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Predicate, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate , class _IsVector &gt; </para><para>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1af94c79334ec95c8bccf8ce29d207f8b2">__pattern_mismatch</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Predicate, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Predicate , class _IsVector &gt; </para><para>std::pair&lt; _RandomAccessIterator1, _RandomAccessIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1a86ddc2652f50a65b022beba313670f4d">__pattern_mismatch</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _RandomAccessIterator2, _Predicate, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50">__brick_lexicographical_compare</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a4e26a9f86fcb67483a36b7f60d34213c">__brick_lexicographical_compare</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a87963436503d6c04ddbae7eb6827f60c">__pattern_lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a0594b7be154260d4252b5fecdd79b5a8">__pattern_lexicographical_compare</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _ForwardIterator2, _Compare, _IsVector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Size , class _Function &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a762eb8ef259f810b138bc5db0bb710a5">__for_each_n_it_serial</link> (_ForwardIterator __first, _Size __n, _Function __f)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </para><para>_RandomAccessIterator1 <link linkend="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717">__find_subrange</link> (_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator1 __global_last, _RandomAccessIterator2 __s_first, _RandomAccessIterator2 __s_last, _BinaryPredicate __pred, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __b_first, _IsVector __is_vector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _Size , class _Tp , class _BinaryPredicate , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a6f93d988180bca3af81439acef42d29a">__find_subrange</link> (_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __global_last, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value, _BinaryPredicate __pred, _IsVector __is_vector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1a56a0e31fa0d0c5465107414c385adc9d">__pattern_search_n</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator __first, _ForwardIterator __last, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value, _BinaryPredicate __pred, _IsVector __is_vector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Tp , class _BinaryPredicate , class _IsVector &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a8aa1b892e7073b6e0b8d55419e556b10">__pattern_search_n</link> (_ExecutionPolicy &amp;&amp;__exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, const _Tp &amp;__value, _BinaryPredicate __pred, _IsVector __is_vector, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _ForwardIterator , class _UnaryPredicate &gt; </para><para>std::pair&lt; _DifferenceType, _DifferenceType &gt; <link linkend="_namespace____pstl_1_1____internal_1aa96b3b332114ed1896c9a520f2c1c1df">__brick_calc_mask_1</link> (_ForwardIterator __first, _ForwardIterator __last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _UnaryPredicate __pred, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _Assigner &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a2b6810b4080cb98c9517e33805201e15">__brick_copy_by_mask</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__mask, _Assigner __assigner, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _Assigner &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aea137f27e3acdf549a66a940928f3554">__brick_copy_by_mask</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _Assigner __assigner, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _CalcMask , class _IsVector &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ab96ad0e98fb260ea102f3a20ddc0dbf0">__remove_elements</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator __first, _ForwardIterator __last, _CalcMask __calc_mask, _IsVector __is_vector)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class OutputIterator , class _BinaryPredicate &gt; </para><para>OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a73adac60db27e51e2cd5e6c02e8e8102">__brick_unique_copy</link> (_RandomAccessIterator __first, _RandomAccessIterator __last, OutputIterator __result, _BinaryPredicate __pred, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____internal_1a315346648fe9bfba046a0b5328ec3451">__brick_calc_mask_2</link> (_RandomAccessIterator __first, _RandomAccessIterator __last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _BinaryPredicate __pred, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </para><para>_DifferenceType <link linkend="_namespace____pstl_1_1____internal_1a54b4602768b4295c075a4d88d91dfe9b">__brick_calc_mask_2</link> (_RandomAccessIterator __first, _RandomAccessIterator __last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _BinaryPredicate __pred, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Generator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a91b9564bbea48ebdfc23c3da99c1ccf2">__pattern_generate_n</link> (_ExecutionPolicy &amp;&amp;, _OutputIterator __first, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, _Generator __g, std::false_type, _IsVector __is_vector) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Generator , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a6483b9c861063f91a19776970567bc1a">__pattern_generate_n</link> (_ExecutionPolicy &amp;&amp;__exec, _OutputIterator __first, _Size <link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>, _Generator __g, std::true_type, _IsVector __is_vector)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector , class _SizeFunction , class _SetOP &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b">__parallel_set_op</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _SizeFunction __size_func, _SetOP __set_op, _IsVector __is_vector)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _SetUnionOp , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a32f3932c1bca5cc9da70582e4ddf540b">__parallel_set_union_op</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _SetUnionOp __set_union_op, _IsVector __is_vector)</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _DifferenceType , class _Compare &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a421e80a845f245294fb04c66915e4557">__is_heap_until_local</link> (_RandomAccessIterator __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _RandomAccessIterator , class _DifferenceType , class _Compare &gt; </para><para>_RandomAccessIterator <link linkend="_namespace____pstl_1_1____internal_1a212e7a586dc52970f6f43592525b5d05">__is_heap_until_local</link> (_RandomAccessIterator __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </para><para>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; <link linkend="_namespace____pstl_1_1____internal_1af6e1bf383fe96c36bfa6a803caa71076">__mismatch_serial</link> (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)</para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>std::false_type <link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__lazy_and</link> (_Tp, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1ab6cd19e3eb297893962c80882b1e7f78">__lazy_and</link> (_Tp __a, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>std::true_type <link linkend="_namespace____pstl_1_1____internal_1aa4e87f24d82bdaef2aa34e5a55cb6b40">__lazy_or</link> (_Tp, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;typename _Tp &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1ad994dc0fe84a65285d33a6bfd5de2c87">__lazy_or</link> (_Tp __a, std::false_type)</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename... _IteratorTypes&gt; </para><para>auto <link linkend="_namespace____pstl_1_1____internal_1aba53c2e534557bf2c817808fb3b3c269">__is_vectorization_preferred</link> (_ExecutionPolicy &amp;&amp;__exec) -&gt; decltype(<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_vector(), typename <link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator</link>&lt; _IteratorTypes... &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>()))</para>
</listitem>
            <listitem><para>template&lt;typename _ExecutionPolicy , typename... _IteratorTypes&gt; </para><para>auto <link linkend="_namespace____pstl_1_1____internal_1a96278219a9b5139e6060c4a24235841c">__is_parallelization_preferred</link> (_ExecutionPolicy &amp;&amp;__exec) -&gt; decltype(<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_parallel(), typename <link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator</link>&lt; _IteratorTypes... &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>()))</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1af0e19ee5ecb61c1dc825f6cf32f73187">__brick_uninitialized_move</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a0b4087c7ee26c9cfbfb34bd9b9483015">__brick_uninitialized_move</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _Iterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a30e2ecbaecd03b7e1e3d0b9eeaed24db">__brick_destroy</link> (_Iterator __first, _Iterator __last, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _Iterator &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a3aea87a05a5f6cfdbe3eac21991c7115">__brick_destroy</link> (_Iterator __first, _Iterator __last, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a4fb75417b7d24445de9704f283dc126b">__brick_uninitialized_copy</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a3876eab2404179bf5211468a07824055">__brick_uninitialized_copy</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22">__brick_transform_reduce</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Tp, _BinaryOperation1, _BinaryOperation2, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1aa7ba25d524027030ef5b1c5deecc2314">__brick_transform_reduce</link> (_ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Tp, _BinaryOperation1, _BinaryOperation2, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 , class _IsVector &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pattern_transform_reduce</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator1, _ForwardIterator1, _ForwardIterator2, _Tp, _BinaryOperation1, _BinaryOperation2, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 , class _IsVector &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1adafb3c27c7136034f666734ae902ff04">__pattern_transform_reduce</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator1, _RandomAccessIterator1, _RandomAccessIterator2, _Tp, _BinaryOperation1, _BinaryOperation2, _IsVector __is_vector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Tp , class _UnaryOperation , class _BinaryOperation &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1a38086abd3dd81cdae417ac4cce2c240b">__brick_transform_reduce</link> (_ForwardIterator, _ForwardIterator, _Tp, _BinaryOperation, _UnaryOperation, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1a12bc8c9b6562120eb8791b6862c72098">__brick_transform_reduce</link> (_ForwardIterator, _ForwardIterator, _Tp, _BinaryOperation, _UnaryOperation, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation , class _IsVector &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1add18cbb980aea037c337adc3b0bb155f">__pattern_transform_reduce</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Tp, _BinaryOperation, _UnaryOperation, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation , class _IsVector &gt; </para><para>_Tp <link linkend="_namespace____pstl_1_1____internal_1afcebd939332b7acb17ecdb4debdf8e36">__pattern_transform_reduce</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _Tp, _BinaryOperation, _UnaryOperation, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::pair&lt; _OutputIterator, _Tp &gt; <link linkend="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7">__brick_transform_scan</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryOperation, _Tp, _BinaryOperation, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::pair&lt; _OutputIterator, _Tp &gt; <link linkend="_namespace____pstl_1_1____internal_1aca47af7abcd5194728e4926e3f4756f6">__brick_transform_scan</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryOperation, _Tp, _BinaryOperation, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a8b1fafa95881c18c8c209a63b817198d">__pattern_transform_scan</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator, _UnaryOperation, _Tp, _BinaryOperation, _Inclusive, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive , class _IsVector &gt; </para><para>std::enable_if&lt;!std::is_floating_point&lt; _Tp &gt;<link linkend="_classvalue">::value</link>, _OutputIterator &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1af0c85b4392a0bb4de013e30fdf4426b4">__pattern_transform_scan</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _UnaryOperation, _Tp, _BinaryOperation, _Inclusive, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive , class _IsVector &gt; </para><para>std::enable_if&lt; std::is_floating_point&lt; _Tp &gt;<link linkend="_classvalue">::value</link>, _OutputIterator &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a4132256b7a2d3aa5c5320835f2579b4e">__pattern_transform_scan</link> (_ExecutionPolicy &amp;&amp;, _RandomAccessIterator, _RandomAccessIterator, _OutputIterator, _UnaryOperation, _Tp, _BinaryOperation, _Inclusive, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _BinaryOperation &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a90a33e151b2c88ee9555294dfff168ae">__brick_adjacent_difference</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryOperation, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _BinaryOperation &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a75730095b096b996c384c480c53dbe75">__brick_adjacent_difference</link> (_ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryOperation, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _BinaryOperation , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1a06ab524ac584392677a2d3002e998d89">__pattern_adjacent_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryOperation, _IsVector, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _BinaryOperation , class _IsVector &gt; </para><para>_OutputIterator <link linkend="_namespace____pstl_1_1____internal_1ae558b85f130d52a8711c7ca1982e7664">__pattern_adjacent_difference</link> (_ExecutionPolicy &amp;&amp;, _ForwardIterator, _ForwardIterator, _OutputIterator, _BinaryOperation, _IsVector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::pair&lt; _OutputIterator, _Tp &gt; <link linkend="_namespace____pstl_1_1____internal_1aef1959f0b3a497e5f1b5b8c390a32ede">__brick_transform_scan</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::false_type, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </para><para>std::pair&lt; _OutputIterator, _Tp &gt; <link linkend="_namespace____pstl_1_1____internal_1ac6a3148b57eb93e5c93e1b3b3c4c9044">__brick_transform_scan</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::true_type, std::false_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive &gt; </para><para>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f">is_arithmetic_udop</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1abb41d2f1b684f9602d32682e343f1b07">__brick_transform_scan</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive &gt; </para><para>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f">is_arithmetic_udop</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a747ecbfd187ce551a0e4f06bd3c24be0">__brick_transform_scan</link> (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class BinaryOperation &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1aa67eb80c1820e76feb9211a26b6cfec4">__brick_adjacent_difference</link> (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first, BinaryOperation __op, std::true_type) noexcept</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation , class _IsVector &gt; </para><para>_ForwardIterator2 <link linkend="_namespace____pstl_1_1____internal_1a660ec4d23c146d1c5a380d0b202cf6e3">__pattern_adjacent_difference</link> (_ExecutionPolicy &amp;&amp;__exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first, _BinaryOperation __op, _IsVector __is_vector, std::true_type)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _Index , class _Brick , class _Compare &gt; </para><para>_Index <link linkend="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2">__parallel_find</link> (_ExecutionPolicy &amp;&amp;__exec, _Index __first, _Index __last, _Brick __f, _Compare __comp, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __b_first)</para>
</listitem>
            <listitem><para>template&lt;class _ExecutionPolicy , class _Index , class _Brick &gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_namespace____pstl_1_1____internal_1a0b24f24f2dfdffa3149539596892d0b0">__parallel_or</link> (_ExecutionPolicy &amp;&amp;__exec, _Index __first, _Index __last, _Brick __f)</para>

<para>Return true if brick f[i,j) returns true for some subrange [i,j) of [first,last) </para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para>std::result_of&lt; _Fp()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__except_handler</link> (_Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a87c94f05940f4ecf102a6ffd803dfdaf">__invoke_if</link> (std::true_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1aa28f5d7304eca28001c5617cbc03a49e">__invoke_if</link> (std::false_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a99ffa966b0cf5f0b3687352c6b055f81">__invoke_if_not</link> (std::false_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _Fp &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_namespace____pstl_1_1____internal_1a3d31de2b216616b4c29fb20b7f3af4ae">__invoke_if_not</link> (std::true_type, _Fp __f)</para>
</listitem>
            <listitem><para>template&lt;typename _F1 , typename _F2 &gt; </para><para>std::result_of&lt; _F1()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__invoke_if_else</link> (std::true_type, _F1 __f1, _F2 __f2)</para>
</listitem>
            <listitem><para>template&lt;typename _F1 , typename _F2 &gt; </para><para>std::result_of&lt; _F2()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> <link linkend="_namespace____pstl_1_1____internal_1a6cf4d82365aad117c8b0dc5bc28b533c">__invoke_if_else</link> (std::false_type, _F1 __f1, _F2 __f2)</para>
</listitem>
            <listitem><para>template&lt;typename _ForwardIterator , typename _Compare &gt; </para><para>_ForwardIterator <link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__cmp_iterators_by_values</link> (_ForwardIterator __a, _ForwardIterator __b, _Compare __comp)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>constexpr auto <link linkend="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50">__set_algo_cut_off</link> = 1000</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespace____pstl_1_1____internal_1a126fcadf26cac3891eaa97538e25c7c7"/><section>
    <title>__allow_parallel</title>
<indexterm><primary>__allow_parallel</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__allow_parallel</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace____pstl_1_1____internal_1a126fcadf26cac3891eaa97538e25c7c7">__pstl::__internal::__allow_parallel</link> = typedef typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt;typename std::decay&lt;_ExecutionPolicy&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;::__allow_parallel</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5d7af2c48372e5092c6a147bd48ea4ec"/><section>
    <title>__allow_unsequenced</title>
<indexterm><primary>__allow_unsequenced</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__allow_unsequenced</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace____pstl_1_1____internal_1a5d7af2c48372e5092c6a147bd48ea4ec">__pstl::__internal::__allow_unsequenced</link> = typedef typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt;typename std::decay&lt;_ExecutionPolicy&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;::__allow_unsequenced</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9a909a1997cffa29a64d86f61adee836"/><section>
    <title>__allow_vector</title>
<indexterm><primary>__allow_vector</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__allow_vector</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace____pstl_1_1____internal_1a9a909a1997cffa29a64d86f61adee836">__pstl::__internal::__allow_vector</link> = typedef typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt;typename std::decay&lt;_ExecutionPolicy&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;::__allow_vector</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae19f2535af6ba1b6ccf714704628d7ce"/><section>
    <title>__collector_t</title>
<indexterm><primary>__collector_t</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__collector_t</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace____pstl_1_1____internal_1ae19f2535af6ba1b6ccf714704628d7ce">__pstl::__internal::__collector_t</link> = typedef typename <link linkend="_struct____pstl_1_1____internal_1_1____policy__traits">__internal::__policy_traits</link>&lt;typename std::decay&lt;_ExecutionPolicy&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;::__collector_type</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a"/><section>
    <title>__enable_if_execution_policy</title>
<indexterm><primary>__enable_if_execution_policy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__enable_if_execution_policy</secondary></indexterm>
<computeroutput>template&lt;class _ExecPolicy , class _Tp &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link> = typedef typename std::enable_if&lt;<link linkend="_struct____pstl_1_1execution_1_1v1_1_1is__execution__policy">__pstl::execution::is_execution_policy</link>&lt;typename std::decay&lt;_ExecPolicy&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;<link linkend="_classvalue">::value</link>, _Tp&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f"/><section>
    <title>is_arithmetic_udop</title>
<indexterm><primary>is_arithmetic_udop</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>is_arithmetic_udop</secondary></indexterm>
<computeroutput>template&lt;typename _Tp , typename _BinaryOperation &gt; </computeroutput><para><computeroutput>using <link linkend="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f">__pstl::__internal::is_arithmetic_udop</link> = typedef std::integral_constant&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>, std::is_arithmetic&lt;_Tp&gt;<link linkend="_classvalue">::value</link> &amp;&amp; !std::is_same&lt;_BinaryOperation, std::plus&lt;_Tp&gt; &gt;<link linkend="_classvalue">::value</link>&gt;</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespace____pstl_1_1____internal_1a90a33e151b2c88ee9555294dfff168ae"/><section>
    <title>__brick_adjacent_difference()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__brick_adjacent_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _BinaryOperation &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_adjacent_difference (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __d_first, _BinaryOperation __op, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a90a33e151b2c88ee9555294dfff168ae_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a90a33e151b2c88ee9555294dfff168ae_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a75730095b096b996c384c480c53dbe75"/><section>
    <title>__brick_adjacent_difference()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__brick_adjacent_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _BinaryOperation &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_adjacent_difference (_ForwardIterator , _ForwardIterator , _OutputIterator , _BinaryOperation , std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa67eb80c1820e76feb9211a26b6cfec4"/><section>
    <title>__brick_adjacent_difference()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__brick_adjacent_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class BinaryOperation &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__brick_adjacent_difference (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first, BinaryOperation __op, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa67eb80c1820e76feb9211a26b6cfec4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3445e693a1a46acd217e4d7754a7f50f"/><section>
    <title>__brick_adjacent_find()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_adjacent_find</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_adjacent_find</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_adjacent_find (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred, std::false_type , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3445e693a1a46acd217e4d7754a7f50f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1b8170b65ea0cebedcc3348875bc4a26"/><section>
    <title>__brick_adjacent_find()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_adjacent_find</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_adjacent_find</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_adjacent_find (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred, std::true_type , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __or_semantic)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1b8170b65ea0cebedcc3348875bc4a26_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1b8170b65ea0cebedcc3348875bc4a26_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a70dd7a72263c0d3f533749756766d752"/><section>
    <title>__brick_any_of()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_any_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_any_of</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Pred &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_any_of (const _ForwardIterator __first, const _ForwardIterator __last, _Pred __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a70dd7a72263c0d3f533749756766d752_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a70dd7a72263c0d3f533749756766d752_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9b2b912b52719adc814aec19b4ae5724"/><section>
    <title>__brick_any_of()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_any_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_any_of</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Pred &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_any_of (const _ForwardIterator __first, const _ForwardIterator __last, _Pred __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9b2b912b52719adc814aec19b4ae5724_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa96b3b332114ed1896c9a520f2c1c1df"/><section>
    <title>__brick_calc_mask_1()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__brick_calc_mask_1</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_calc_mask_1</secondary></indexterm>
<computeroutput>template&lt;class _DifferenceType , class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _DifferenceType, _DifferenceType &gt; __pstl::__internal::__brick_calc_mask_1 (_ForwardIterator __first, _ForwardIterator __last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _UnaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa9f3335e6c5bc8f3c503f12c2c706399"/><section>
    <title>__brick_calc_mask_1()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__brick_calc_mask_1</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_calc_mask_1</secondary></indexterm>
<computeroutput>template&lt;class _DifferenceType , class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _DifferenceType, _DifferenceType &gt; __pstl::__internal::__brick_calc_mask_1 (_ForwardIterator , _ForwardIterator , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __restrict, _UnaryPredicate , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9a557df6c1ed000c198914129fb70ec1"/><section>
    <title>__brick_calc_mask_1()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__brick_calc_mask_1</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_calc_mask_1</secondary></indexterm>
<computeroutput>template&lt;class _DifferenceType , class _RandomAccessIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _DifferenceType, _DifferenceType &gt; __pstl::__internal::__brick_calc_mask_1 (_RandomAccessIterator __first, _RandomAccessIterator __last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __restrict, _UnaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9a557df6c1ed000c198914129fb70ec1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a315346648fe9bfba046a0b5328ec3451"/><section>
    <title>__brick_calc_mask_2()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__brick_calc_mask_2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_calc_mask_2</secondary></indexterm>
<computeroutput>template&lt;class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_DifferenceType __pstl::__internal::__brick_calc_mask_2 (_RandomAccessIterator __first, _RandomAccessIterator __last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _BinaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a54b4602768b4295c075a4d88d91dfe9b"/><section>
    <title>__brick_calc_mask_2()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__brick_calc_mask_2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_calc_mask_2</secondary></indexterm>
<computeroutput>template&lt;class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_DifferenceType __pstl::__internal::__brick_calc_mask_2 (_RandomAccessIterator __first, _RandomAccessIterator __last, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _BinaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a54b4602768b4295c075a4d88d91dfe9b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0c5ab799fe2096f845371f4cc601a3e8"/><section>
    <title>__brick_calc_mask_2()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__brick_calc_mask_2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_calc_mask_2</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_DifferenceType __pstl::__internal::__brick_calc_mask_2 (_RandomAccessIterator , _RandomAccessIterator , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __restrict, _BinaryPredicate , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1acbd907ca57b3934450a4f9e449412dc2"/><section>
    <title>__brick_calc_mask_2()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__brick_calc_mask_2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_calc_mask_2</secondary></indexterm>
<computeroutput>template&lt;class _DifferenceType , class _RandomAccessIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_DifferenceType __pstl::__internal::__brick_calc_mask_2 (_RandomAccessIterator , _RandomAccessIterator , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __restrict, _BinaryPredicate , std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de"/><section>
    <title>__brick_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_copy (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afeb0a574201d45df430150e28155b9de_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afeb0a574201d45df430150e28155b9de_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a88fcc796f526a2ba6957acf3976dbbc3"/><section>
    <title>__brick_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_copy (_RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator __result, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a88fcc796f526a2ba6957acf3976dbbc3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2b6810b4080cb98c9517e33805201e15"/><section>
    <title>__brick_copy_by_mask()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__brick_copy_by_mask</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _Assigner &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_copy_by_mask (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __mask, _Assigner __assigner, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aea137f27e3acdf549a66a940928f3554"/><section>
    <title>__brick_copy_by_mask()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__brick_copy_by_mask</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _Assigner &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_copy_by_mask (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> *__restrict __mask, _Assigner __assigner, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aea137f27e3acdf549a66a940928f3554_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a80a6116f76e81904dfc09a968b0557fc"/><section>
    <title>__brick_copy_by_mask()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__brick_copy_by_mask</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_copy_by_mask (_ForwardIterator , _ForwardIterator , _OutputIterator , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a80a6116f76e81904dfc09a968b0557fc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a06aa8369aa54e91cb1f8b939f3fd2bc7"/><section>
    <title>__brick_copy_by_mask()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__brick_copy_by_mask</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_copy_by_mask (_ForwardIterator , _ForwardIterator , _OutputIterator , <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __restrict, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a7019046a2d066cebe7d5d084cf504afc"/><section>
    <title>__brick_copy_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_copy_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_if</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_copy_if (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7019046a2d066cebe7d5d084cf504afc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7019046a2d066cebe7d5d084cf504afc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1acbebb21468389df805688ba0a2ab0ec1"/><section>
    <title>__brick_copy_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_copy_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_if</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_copy_if (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_acbebb21468389df805688ba0a2ab0ec1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941"/><section>
    <title>__brick_copy_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_copy_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_n</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Size , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_copy_n (_ForwardIterator __first, _Size __n, _OutputIterator __result, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1f4de244878be866aa77d89e4f80a941_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1f4de244878be866aa77d89e4f80a941_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a46dbb9cc91b8fdb864ff4e6ce460dd20"/><section>
    <title>__brick_copy_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_copy_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_copy_n</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Size , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_copy_n (_ForwardIterator __first, _Size __n, _OutputIterator __result, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a46dbb9cc91b8fdb864ff4e6ce460dd20_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2da220bb96436b8c805755018fb8aee7"/><section>
    <title>__brick_count()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_count</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_count</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type __pstl::__internal::__brick_count (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2da220bb96436b8c805755018fb8aee7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a642be71b7c6b220885e392356dd4de91"/><section>
    <title>__brick_count()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_count</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_count</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type __pstl::__internal::__brick_count (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a642be71b7c6b220885e392356dd4de91_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a642be71b7c6b220885e392356dd4de91_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a30e2ecbaecd03b7e1e3d0b9eeaed24db"/><section>
    <title>__brick_destroy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_destroy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_destroy</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_destroy (_Iterator __first, _Iterator __last, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a30e2ecbaecd03b7e1e3d0b9eeaed24db_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3aea87a05a5f6cfdbe3eac21991c7115"/><section>
    <title>__brick_destroy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_destroy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_destroy</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_destroy (_Iterator __first, _Iterator __last, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3aea87a05a5f6cfdbe3eac21991c7115_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a98e65b1d83eb66d32d3ebe20452a168a"/><section>
    <title>__brick_equal()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__brick_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_equal</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_equal (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __p, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a98e65b1d83eb66d32d3ebe20452a168a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a98e65b1d83eb66d32d3ebe20452a168a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a472d5691c7f9feb0200fddec85c9a568"/><section>
    <title>__brick_equal()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__brick_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_equal</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_equal (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __p, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a472d5691c7f9feb0200fddec85c9a568_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a053bbd4b7e93e04d16e4df04e4d3838b"/><section>
    <title>__brick_equal()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__brick_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_equal</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_equal (_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _BinaryPredicate __p, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a053bbd4b7e93e04d16e4df04e4d3838b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a44ebc2d1dfe65c1228db698daa2e1cc7"/><section>
    <title>__brick_equal()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__brick_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_equal</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_equal (_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _BinaryPredicate __p, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a44ebc2d1dfe65c1228db698daa2e1cc7_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a19af0566e05f3357ce3695374cca0c2e"/><section>
    <title>__brick_fill()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_fill</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_fill</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_fill (_ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a19af0566e05f3357ce3695374cca0c2e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b"/><section>
    <title>__brick_fill()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_fill</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_fill</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Tp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_fill (_ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8609d730151cea711f5568745830001b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8609d730151cea711f5568745830001b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1adf5ed1e8c383803a15d59309774cb0cb"/><section>
    <title>__brick_fill_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_fill_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_fill_n</secondary></indexterm>
<computeroutput>template&lt;class _OutputIterator , class _Size , class _Tp &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_fill_n (_OutputIterator __first, _Size __count, const _Tp &amp; __value, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_adf5ed1e8c383803a15d59309774cb0cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01"/><section>
    <title>__brick_fill_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_fill_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_fill_n</secondary></indexterm>
<computeroutput>template&lt;class _OutputIterator , class _Size , class _Tp &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_fill_n (_OutputIterator __first, _Size __count, const _Tp &amp; __value, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_abf6e7beca88698d7433bf8f0a4271a01_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_abf6e7beca88698d7433bf8f0a4271a01_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1afc79e8c65046a86f9a2766afc203bdc6"/><section>
    <title>__brick_find_end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_find_end</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_find_end</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__brick_find_end (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afc79e8c65046a86f9a2766afc203bdc6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afc79e8c65046a86f9a2766afc203bdc6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2fccb31b7e808df816acc32eca1d7c8e"/><section>
    <title>__brick_find_end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_find_end</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_find_end</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__brick_find_end (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2fccb31b7e808df816acc32eca1d7c8e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a831367ff62774ae96f53ce675d0e5abd"/><section>
    <title>__brick_find_first_of()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_find_first_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_find_first_of</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__brick_find_first_of (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a831367ff62774ae96f53ce675d0e5abd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a831367ff62774ae96f53ce675d0e5abd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8ff145b4e3b762807d7ef4ef380d2b6e"/><section>
    <title>__brick_find_first_of()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_find_first_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_find_first_of</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__brick_find_first_of (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8ff145b4e3b762807d7ef4ef380d2b6e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac7d9945ca6e956c4953efb2594b3f761"/><section>
    <title>__brick_find_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_find_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_find_if</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Predicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_find_if (_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac7d9945ca6e956c4953efb2594b3f761_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac7d9945ca6e956c4953efb2594b3f761_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a581d8543c481a200d1d83d18d5f4a6db"/><section>
    <title>__brick_find_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_find_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_find_if</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _Predicate &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__brick_find_if (_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a581d8543c481a200d1d83d18d5f4a6db_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6e77e64ed5384bd6a772763fdd2a70a9"/><section>
    <title>__brick_generate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_generate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_generate</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Generator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_generate (_ForwardIterator __first, _ForwardIterator __last, _Generator __g, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6e77e64ed5384bd6a772763fdd2a70a9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa4e8af00945dc77eacbc427e3c14bec5"/><section>
    <title>__brick_generate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_generate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_generate</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _Generator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_generate (_RandomAccessIterator __first, _RandomAccessIterator __last, _Generator __g, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa4e8af00945dc77eacbc427e3c14bec5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa4e8af00945dc77eacbc427e3c14bec5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a63a2d4d1bf2db03ad2c4467854e5bb31"/><section>
    <title>__brick_generate_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_generate_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_generate_n</secondary></indexterm>
<computeroutput>template&lt;class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator &gt; </computeroutput><para><computeroutput>OutputIterator __pstl::__internal::__brick_generate_n (OutputIterator __first, <link linkend="_struct_size">Size</link> __count, _Generator __g, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a63a2d4d1bf2db03ad2c4467854e5bb31_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5da5e1e0c6ad779e9621a6403607fe23"/><section>
    <title>__brick_generate_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_generate_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_generate_n</secondary></indexterm>
<computeroutput>template&lt;class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator &gt; </computeroutput><para><computeroutput>OutputIterator __pstl::__internal::__brick_generate_n (OutputIterator __first, <link linkend="_struct_size">Size</link> __count, _Generator __g, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5da5e1e0c6ad779e9621a6403607fe23_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5da5e1e0c6ad779e9621a6403607fe23_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a35908f407d1c98b3f5f57a9738fa1001"/><section>
    <title>__brick_inplace_merge()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_inplace_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_inplace_merge</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_inplace_merge (_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a35908f407d1c98b3f5f57a9738fa1001_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a35908f407d1c98b3f5f57a9738fa1001_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae6cb9d42f676a70f65ec28cac4fc47b9"/><section>
    <title>__brick_inplace_merge()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_inplace_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_inplace_merge</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_inplace_merge (_BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae6cb9d42f676a70f65ec28cac4fc47b9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a25a06be9bdcfa0b99e3c30baf1a739a0"/><section>
    <title>__brick_is_heap_until()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_is_heap_until</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_is_heap_until</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__brick_is_heap_until (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a25a06be9bdcfa0b99e3c30baf1a739a0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a25a06be9bdcfa0b99e3c30baf1a739a0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1e8373179634547b3c8361940e47cfba"/><section>
    <title>__brick_is_heap_until()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_is_heap_until</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_is_heap_until</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _Compare &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__brick_is_heap_until (_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1e8373179634547b3c8361940e47cfba_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a622621727d35e996e256f9b96d4680bd"/><section>
    <title>__brick_is_partitioned()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_is_partitioned</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_is_partitioned</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_is_partitioned (_ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a622621727d35e996e256f9b96d4680bd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a622621727d35e996e256f9b96d4680bd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1abbf66af8bb8e1309bd15b4a84c7465e6"/><section>
    <title>__brick_is_partitioned()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_is_partitioned</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_is_partitioned</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_is_partitioned (_ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_abbf66af8bb8e1309bd15b4a84c7465e6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a25bc7cb77cfdd3c6c75cef7315fbbf50"/><section>
    <title>__brick_lexicographical_compare()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_lexicographical_compare</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_lexicographical_compare</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_lexicographical_compare (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a25bc7cb77cfdd3c6c75cef7315fbbf50_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a25bc7cb77cfdd3c6c75cef7315fbbf50_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a4e26a9f86fcb67483a36b7f60d34213c"/><section>
    <title>__brick_lexicographical_compare()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_lexicographical_compare</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_lexicographical_compare</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Compare &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__brick_lexicographical_compare (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4e26a9f86fcb67483a36b7f60d34213c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a70ab125a9ca5e91d4e2716719b66e117"/><section>
    <title>__brick_merge()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_merge</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_merge (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __d_first, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a70ab125a9ca5e91d4e2716719b66e117_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a70ab125a9ca5e91d4e2716719b66e117_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1b6ea99e4a5059dafcaa7365f69ab37e"/><section>
    <title>__brick_merge()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_merge</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_merge (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __d_first, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1b6ea99e4a5059dafcaa7365f69ab37e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5911eb58c7d91507828d829ae22f5a33"/><section>
    <title>__brick_min_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_min_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_min_element</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _Compare &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_min_element (_ForwardIterator __first, _ForwardIterator __last, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5911eb58c7d91507828d829ae22f5a33_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5911eb58c7d91507828d829ae22f5a33_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae85230afa98e8cc1e1d28e4ba68f3265"/><section>
    <title>__brick_min_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_min_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_min_element</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _Compare &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_min_element (_ForwardIterator __first, _ForwardIterator __last, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae85230afa98e8cc1e1d28e4ba68f3265_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a813346c7a8ea9a457346d85fb9b3ec13"/><section>
    <title>__brick_minmax_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_minmax_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_minmax_element</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _Compare &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; __pstl::__internal::__brick_minmax_element (_ForwardIterator __first, _ForwardIterator __last, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a813346c7a8ea9a457346d85fb9b3ec13_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a813346c7a8ea9a457346d85fb9b3ec13_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1637cf51097a64736c8993b610374047"/><section>
    <title>__brick_minmax_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_minmax_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_minmax_element</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _Compare &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; __pstl::__internal::__brick_minmax_element (_ForwardIterator __first, _ForwardIterator __last, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1637cf51097a64736c8993b610374047_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2011ee19f02c28a238c06f2b74b8106e"/><section>
    <title>__brick_mismatch()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_mismatch</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; __pstl::__internal::__brick_mismatch (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Predicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2011ee19f02c28a238c06f2b74b8106e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2011ee19f02c28a238c06f2b74b8106e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae0ab000d4488fd3f8a2b3690fc2a6e5f"/><section>
    <title>__brick_mismatch()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_mismatch</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; __pstl::__internal::__brick_mismatch (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Predicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae0ab000d4488fd3f8a2b3690fc2a6e5f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6d4b0add6bd0d4764ea4e41cde92d975"/><section>
    <title>__brick_move()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_move</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_move</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_move (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6d4b0add6bd0d4764ea4e41cde92d975_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6d4b0add6bd0d4764ea4e41cde92d975_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a7680520275602d5e91c39a4d3d69c44a"/><section>
    <title>__brick_move()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_move</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_move</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_move (_RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator __result, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7680520275602d5e91c39a4d3d69c44a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae322bd077e3fd6429c010272c9e48605"/><section>
    <title>__brick_partition()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_partition</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_partition (_ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae322bd077e3fd6429c010272c9e48605_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae322bd077e3fd6429c010272c9e48605_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae705dda6a3e436b790679fc77d04d7f5"/><section>
    <title>__brick_partition()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_partition</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_partition (_ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae705dda6a3e436b790679fc77d04d7f5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa5a8f3647e8be9932ef2c1aa69e47f40"/><section>
    <title>__brick_partition_by_mask()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_partition_by_mask</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_partition_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_partition_by_mask (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __mask, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa5a8f3647e8be9932ef2c1aa69e47f40_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1944146783531194c658918287714564"/><section>
    <title>__brick_partition_by_mask()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_partition_by_mask</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_partition_by_mask</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _OutputIterator1 , class _OutputIterator2 &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_partition_by_mask (_RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> * __mask, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1944146783531194c658918287714564_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ad6a93bac17929ca09cd1ce3a78d73910"/><section>
    <title>__brick_partition_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_partition_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_partition_copy</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; __pstl::__internal::__brick_partition_copy (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _UnaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ad6a93bac17929ca09cd1ce3a78d73910_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ad6a93bac17929ca09cd1ce3a78d73910_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a697f3e432645ec6bd4d0d3005fa806e1"/><section>
    <title>__brick_partition_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_partition_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_partition_copy</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; __pstl::__internal::__brick_partition_copy (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _UnaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a697f3e432645ec6bd4d0d3005fa806e1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1acfc78209433e3b4840607a173bb5e75b"/><section>
    <title>__brick_remove_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_remove_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_remove_if</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_remove_if (_ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_acfc78209433e3b4840607a173bb5e75b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_acfc78209433e3b4840607a173bb5e75b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac0861501c2dea5f3bc26f3d05f2e6ce4"/><section>
    <title>__brick_remove_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_remove_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_remove_if</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__brick_remove_if (_RandomAccessIterator __first, _RandomAccessIterator __last, _UnaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac0861501c2dea5f3bc26f3d05f2e6ce4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2cc357497651525e564373c01db2a76a"/><section>
    <title>__brick_reverse()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__brick_reverse</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_reverse</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_reverse (_BidirectionalIterator __first, _BidirectionalIterator __last, _BidirectionalIterator __d_last, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9d65cdb7fc2943b62938649b44ff97d1"/><section>
    <title>__brick_reverse()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__brick_reverse</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_reverse</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_reverse (_BidirectionalIterator __first, _BidirectionalIterator __last, _BidirectionalIterator __d_last, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9d65cdb7fc2943b62938649b44ff97d1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9faf5b36fe9b02dad4ff616e418d8bdd"/><section>
    <title>__brick_reverse()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__brick_reverse</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_reverse</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_reverse (_BidirectionalIterator __first, _BidirectionalIterator __last, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9faf5b36fe9b02dad4ff616e418d8bdd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9faf5b36fe9b02dad4ff616e418d8bdd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0b4d274f65f477174b1552a456f8d908"/><section>
    <title>__brick_reverse()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__brick_reverse</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_reverse</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_reverse (_BidirectionalIterator __first, _BidirectionalIterator __last, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0b4d274f65f477174b1552a456f8d908_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3d4a5a0406253133d06199c46d46e8d4"/><section>
    <title>__brick_reverse_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_reverse_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_reverse_copy</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_reverse_copy (_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __d_first, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3d4a5a0406253133d06199c46d46e8d4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3d4a5a0406253133d06199c46d46e8d4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2d77b0bfe7a8ee8ad7fc9c37d2e09f9f"/><section>
    <title>__brick_reverse_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_reverse_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_reverse_copy</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_reverse_copy (_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __d_first, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2d77b0bfe7a8ee8ad7fc9c37d2e09f9f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a4839fc534579a3fc930d2e75fac28bde"/><section>
    <title>__brick_rotate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_rotate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_rotate</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_rotate (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4839fc534579a3fc930d2e75fac28bde_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4839fc534579a3fc930d2e75fac28bde_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1441ac541a6e5a1fd3b0a243d89c8e38"/><section>
    <title>__brick_rotate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_rotate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_rotate</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_rotate (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1441ac541a6e5a1fd3b0a243d89c8e38_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5e570a4fb18169e688868351cb36789d"/><section>
    <title>__brick_rotate_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_rotate_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_rotate_copy</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_rotate_copy (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5e570a4fb18169e688868351cb36789d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5e570a4fb18169e688868351cb36789d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a49a58246b209a35772ed9c026d5531a9"/><section>
    <title>__brick_rotate_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_rotate_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_rotate_copy</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_rotate_copy (_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a49a58246b209a35772ed9c026d5531a9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a062af2a29d222a167d4abe66dc66fa1f"/><section>
    <title>__brick_search()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_search</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_search</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__brick_search (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a062af2a29d222a167d4abe66dc66fa1f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a062af2a29d222a167d4abe66dc66fa1f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8cdbed978ba5750739475e7ef7118a5b"/><section>
    <title>__brick_search()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_search</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_search</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__brick_search (_ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8cdbed978ba5750739475e7ef7118a5b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0da38e5c5a7d0f076295e36c34dd260f"/><section>
    <title>__brick_search_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_search_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_search_n</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_search_n (_ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp &amp; __value, _BinaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0da38e5c5a7d0f076295e36c34dd260f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0da38e5c5a7d0f076295e36c34dd260f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aaf9729ce5af62bb1b0a1a2fdc7270345"/><section>
    <title>__brick_search_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_search_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_search_n</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_search_n (_ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp &amp; __value, _BinaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aaf9729ce5af62bb1b0a1a2fdc7270345_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a07696af449269fcc74ef20fd53fd2db2"/><section>
    <title>__brick_set_difference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_set_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_difference</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_difference (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a07696af449269fcc74ef20fd53fd2db2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a07696af449269fcc74ef20fd53fd2db2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a84aa3f0b49e2a585c1c41c7d36699c09"/><section>
    <title>__brick_set_difference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_set_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_difference</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_difference (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a84aa3f0b49e2a585c1c41c7d36699c09_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a02b4929b5a742ec0936b3831db5f6bd2"/><section>
    <title>__brick_set_intersection()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_set_intersection</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_intersection</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_intersection (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a02b4929b5a742ec0936b3831db5f6bd2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a02b4929b5a742ec0936b3831db5f6bd2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a776f0c606778603c1b1ad6ab0acdd8cb"/><section>
    <title>__brick_set_intersection()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_set_intersection</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_intersection</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_intersection (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a776f0c606778603c1b1ad6ab0acdd8cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a7aee903e19ce015f8d17fc3ea6dc20f8"/><section>
    <title>__brick_set_symmetric_difference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_set_symmetric_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_symmetric_difference</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_symmetric_difference (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7aee903e19ce015f8d17fc3ea6dc20f8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7aee903e19ce015f8d17fc3ea6dc20f8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a21a50e296afe62174b2781e8578fde76"/><section>
    <title>__brick_set_symmetric_difference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_set_symmetric_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_symmetric_difference</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_symmetric_difference (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a21a50e296afe62174b2781e8578fde76_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a665966afdcae3e29d9cf09d83592063e"/><section>
    <title>__brick_set_union()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_set_union</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_union</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_union (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a665966afdcae3e29d9cf09d83592063e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a665966afdcae3e29d9cf09d83592063e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8960afc1a06baf39cd1a8a07e05c675a"/><section>
    <title>__brick_set_union()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_set_union</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_set_union</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_set_union (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8960afc1a06baf39cd1a8a07e05c675a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3cf8035d93d96d8e03fc862a9f691be3"/><section>
    <title>__brick_stable_partition()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_stable_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_stable_partition</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_BidirectionalIterator __pstl::__internal::__brick_stable_partition (_BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3cf8035d93d96d8e03fc862a9f691be3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3cf8035d93d96d8e03fc862a9f691be3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3e9891c584f6ee493a619a56d0bdde9c"/><section>
    <title>__brick_stable_partition()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_stable_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_stable_partition</secondary></indexterm>
<computeroutput>template&lt;class _BidirectionalIterator , class _UnaryPredicate &gt; </computeroutput><para><computeroutput>_BidirectionalIterator __pstl::__internal::__brick_stable_partition (_BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3e9891c584f6ee493a619a56d0bdde9c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5859660f8d8c3308e80935f3bda79577"/><section>
    <title>__brick_swap_ranges()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_swap_ranges</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_swap_ranges</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_swap_ranges (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5859660f8d8c3308e80935f3bda79577_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a53e8bfe6e5f007e9bf7dde1ca0e5ed11"/><section>
    <title>__brick_swap_ranges()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_swap_ranges</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_swap_ranges</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_swap_ranges (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a53e8bfe6e5f007e9bf7dde1ca0e5ed11_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a12bc8c9b6562120eb8791b6862c72098"/><section>
    <title>__brick_transform_reduce()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__brick_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__brick_transform_reduce (_ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a12bc8c9b6562120eb8791b6862c72098_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a38086abd3dd81cdae417ac4cce2c240b"/><section>
    <title>__brick_transform_reduce()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__brick_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Tp , class _UnaryOperation , class _BinaryOperation &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__brick_transform_reduce (_ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a38086abd3dd81cdae417ac4cce2c240b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa7ba25d524027030ef5b1c5deecc2314"/><section>
    <title>__brick_transform_reduce()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__brick_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__brick_transform_reduce (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1acd4482d348cefeae69173c5b0ba19c22"/><section>
    <title>__brick_transform_reduce()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__brick_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__brick_transform_reduce (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_acd4482d348cefeae69173c5b0ba19c22_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_acd4482d348cefeae69173c5b0ba19c22_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1abb41d2f1b684f9602d32682e343f1b07"/><section>
    <title>__brick_transform_scan()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>__brick_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive &gt; </computeroutput><para><computeroutput>std::enable_if&lt;!<link linkend="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f">is_arithmetic_udop</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__internal::__brick_transform_scan (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive , std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_abb41d2f1b684f9602d32682e343f1b07_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a747ecbfd187ce551a0e4f06bd3c24be0"/><section>
    <title>__brick_transform_scan()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>__brick_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive &gt; </computeroutput><para><computeroutput>std::enable_if&lt; <link linkend="_namespace____pstl_1_1____internal_1aba8c1ac5372f69ec959b76d43b54ce1f">is_arithmetic_udop</link>&lt; _Tp, _BinaryOperation &gt;<link linkend="_classvalue">::value</link>, std::pair&lt; _OutputIterator, _Tp &gt; &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__internal::__brick_transform_scan (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive , std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a747ecbfd187ce551a0e4f06bd3c24be0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aef1959f0b3a497e5f1b5b8c390a32ede"/><section>
    <title>__brick_transform_scan()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>__brick_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator, _Tp &gt; __pstl::__internal::__brick_transform_scan (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::false_type , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac6a3148b57eb93e5c93e1b3b3c4c9044"/><section>
    <title>__brick_transform_scan()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>__brick_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator, _Tp &gt; __pstl::__internal::__brick_transform_scan (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, std::true_type , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6ceb558910155d72c76e56455e8acba7"/><section>
    <title>__brick_transform_scan()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>__brick_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator, _Tp &gt; __pstl::__internal::__brick_transform_scan (_ForwardIterator , _ForwardIterator , _OutputIterator , _UnaryOperation , _Tp , _BinaryOperation , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6ceb558910155d72c76e56455e8acba7_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aca47af7abcd5194728e4926e3f4756f6"/><section>
    <title>__brick_transform_scan()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>__brick_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator, _Tp &gt; __pstl::__internal::__brick_transform_scan (_ForwardIterator , _ForwardIterator , _OutputIterator , _UnaryOperation , _Tp , _BinaryOperation , std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a4fb75417b7d24445de9704f283dc126b"/><section>
    <title>__brick_uninitialized_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_uninitialized_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_uninitialized_copy</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_uninitialized_copy (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4fb75417b7d24445de9704f283dc126b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3876eab2404179bf5211468a07824055"/><section>
    <title>__brick_uninitialized_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_uninitialized_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_uninitialized_copy</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_uninitialized_copy (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3876eab2404179bf5211468a07824055_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af0e19ee5ecb61c1dc825f6cf32f73187"/><section>
    <title>__brick_uninitialized_move()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_uninitialized_move</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_uninitialized_move</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_uninitialized_move (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af0e19ee5ecb61c1dc825f6cf32f73187_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af0e19ee5ecb61c1dc825f6cf32f73187_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0b4087c7ee26c9cfbfb34bd9b9483015"/><section>
    <title>__brick_uninitialized_move()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_uninitialized_move</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_uninitialized_move</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _OutputIterator &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_uninitialized_move (_ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0b4087c7ee26c9cfbfb34bd9b9483015_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa9a4a90870c131e96cd38ded4ae59774"/><section>
    <title>__brick_unique()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_unique</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_unique</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_unique (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa9a4a90870c131e96cd38ded4ae59774_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa9a4a90870c131e96cd38ded4ae59774_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1affc5add2a525af1c97863d16e6aad934"/><section>
    <title>__brick_unique()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_unique</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_unique</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_unique (_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_affc5add2a525af1c97863d16e6aad934_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9beb05de0c0cca0210da6ad34342bb57"/><section>
    <title>__brick_unique_copy()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__brick_unique_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class OutputIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>OutputIterator __pstl::__internal::__brick_unique_copy (_ForwardIterator __first, _ForwardIterator __last, OutputIterator __result, _BinaryPredicate __pred, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9beb05de0c0cca0210da6ad34342bb57_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9beb05de0c0cca0210da6ad34342bb57_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a73adac60db27e51e2cd5e6c02e8e8102"/><section>
    <title>__brick_unique_copy()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__brick_unique_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class OutputIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>OutputIterator __pstl::__internal::__brick_unique_copy (_RandomAccessIterator __first, _RandomAccessIterator __last, OutputIterator __result, _BinaryPredicate __pred, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a73adac60db27e51e2cd5e6c02e8e8102_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aaa5e056a16dd2452e11d2b5946167a0f"/><section>
    <title>__brick_unique_copy()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__brick_unique_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _OutputIterator , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__brick_unique_copy (_RandomAccessIterator , _RandomAccessIterator , _OutputIterator , _BinaryPredicate , std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a10f3fa367669b260a10c4b442772016f"/><section>
    <title>__brick_walk1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_walk1</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk1</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Function &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_walk1 (_ForwardIterator __first, _ForwardIterator __last, _Function __f, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a10f3fa367669b260a10c4b442772016f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a10f3fa367669b260a10c4b442772016f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a05a30a7d5e1521a48e690ef8894280d6"/><section>
    <title>__brick_walk1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_walk1</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk1</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _Function &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__brick_walk1 (_RandomAccessIterator __first, _RandomAccessIterator __last, _Function __f, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a05a30a7d5e1521a48e690ef8894280d6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a7795b3eeca3e008e29421b018b374348"/><section>
    <title>__brick_walk1_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_walk1_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk1_n</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Size , class _Function &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__brick_walk1_n (_ForwardIterator __first, _Size __n, _Function __f, std::false_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7795b3eeca3e008e29421b018b374348_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7795b3eeca3e008e29421b018b374348_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6378128671ed99ba10eca13fe91bece4"/><section>
    <title>__brick_walk1_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_walk1_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk1_n</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _DifferenceType , class _Function &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__brick_walk1_n (_RandomAccessIterator __first, _DifferenceType __n, _Function __f, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6378128671ed99ba10eca13fe91bece4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a64612fede4b3b107931bb84c68e45e70"/><section>
    <title>__brick_walk2()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_walk2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk2</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Function &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__brick_walk2 (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Function __f, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a64612fede4b3b107931bb84c68e45e70_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aaceae6601e9503c253986f2db46fc3cf"/><section>
    <title>__brick_walk2()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_walk2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk2</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _Function &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__brick_walk2 (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Function __f, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aaceae6601e9503c253986f2db46fc3cf_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a71c434f189a8195feda8458a188e6b93"/><section>
    <title>__brick_walk2_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_walk2_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk2_n</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__brick_walk2_n (_ForwardIterator1 __first1, _Size __n, _ForwardIterator2 __first2, _Function __f, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a71c434f189a8195feda8458a188e6b93_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aea52cfdce93a0d5017b0668ad7113ad3"/><section>
    <title>__brick_walk2_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_walk2_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk2_n</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__brick_walk2_n (_ForwardIterator1 __first1, _Size __n, _ForwardIterator2 __first2, _Function __f, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aea52cfdce93a0d5017b0668ad7113ad3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa8fb50c7cc913bbd3621876d84eb7739"/><section>
    <title>__brick_walk3()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__brick_walk3</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk3</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator3 , class _Function &gt; </computeroutput><para><computeroutput>_ForwardIterator3 __pstl::__internal::__brick_walk3 (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator3 __first3, _Function __f, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa8fb50c7cc913bbd3621876d84eb7739_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1acae311291914182fd1ce298c044639f4"/><section>
    <title>__brick_walk3()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__brick_walk3</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__brick_walk3</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Function &gt; </computeroutput><para><computeroutput>_RandomAccessIterator3 __pstl::__internal::__brick_walk3 (_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _RandomAccessIterator3 __first3, _Function __f, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_acae311291914182fd1ce298c044639f4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e"/><section>
    <title>__cmp_iterators_by_values()</title>
<indexterm><primary>__cmp_iterators_by_values</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__cmp_iterators_by_values</secondary></indexterm>
<computeroutput>template&lt;typename _ForwardIterator , typename _Compare &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__cmp_iterators_by_values (_ForwardIterator __a, _ForwardIterator __b, _Compare __comp)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac5870aee10bdade2147062d8b74f6d2e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b"/><section>
    <title>__except_handler()</title>
<indexterm><primary>__except_handler</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__except_handler</secondary></indexterm>
<computeroutput>template&lt;typename _Fp &gt; </computeroutput><para><computeroutput>std::result_of&lt; _Fp()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__internal::__except_handler (_Fp __f)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9e83352cee63f3312126c9e33e7ae17b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6f93d988180bca3af81439acef42d29a"/><section>
    <title>__find_subrange()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__find_subrange</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__find_subrange</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _Size , class _Tp , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__find_subrange (_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __global_last, _Size __count, const _Tp &amp; __value, _BinaryPredicate __pred, _IsVector __is_vector)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6f93d988180bca3af81439acef42d29a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1afb69e05dbf9cbe3f0ee1f4ac80b06717"/><section>
    <title>__find_subrange()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__find_subrange</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__find_subrange</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator1 __pstl::__internal::__find_subrange (_RandomAccessIterator1 __first, _RandomAccessIterator1 __last, _RandomAccessIterator1 __global_last, _RandomAccessIterator2 __s_first, _RandomAccessIterator2 __s_last, _BinaryPredicate __pred, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __b_first, _IsVector __is_vector)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afb69e05dbf9cbe3f0ee1f4ac80b06717_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afb69e05dbf9cbe3f0ee1f4ac80b06717_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a762eb8ef259f810b138bc5db0bb710a5"/><section>
    <title>__for_each_n_it_serial()</title>
<indexterm><primary>__for_each_n_it_serial</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__for_each_n_it_serial</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator , class _Size , class _Function &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__for_each_n_it_serial (_ForwardIterator __first, _Size __n, _Function __f)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a762eb8ef259f810b138bc5db0bb710a5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa28f5d7304eca28001c5617cbc03a49e"/><section>
    <title>__invoke_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__invoke_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__invoke_if</secondary></indexterm>
<computeroutput>template&lt;typename _Fp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__invoke_if (std::false_type , _Fp __f)</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a87c94f05940f4ecf102a6ffd803dfdaf"/><section>
    <title>__invoke_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__invoke_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__invoke_if</secondary></indexterm>
<computeroutput>template&lt;typename _Fp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__invoke_if (std::true_type , _Fp __f)</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6cf4d82365aad117c8b0dc5bc28b533c"/><section>
    <title>__invoke_if_else()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__invoke_if_else</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__invoke_if_else</secondary></indexterm>
<computeroutput>template&lt;typename _F1 , typename _F2 &gt; </computeroutput><para><computeroutput>std::result_of&lt; _F2()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__internal::__invoke_if_else (std::false_type , _F1 __f1, _F2 __f2)</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6"/><section>
    <title>__invoke_if_else()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__invoke_if_else</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__invoke_if_else</secondary></indexterm>
<computeroutput>template&lt;typename _F1 , typename _F2 &gt; </computeroutput><para><computeroutput>std::result_of&lt; _F1()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__internal::__invoke_if_else (std::true_type , _F1 __f1, _F2 __f2)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a15436428a09d1f47fcfdebbebd4a19d6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a99ffa966b0cf5f0b3687352c6b055f81"/><section>
    <title>__invoke_if_not()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__invoke_if_not</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__invoke_if_not</secondary></indexterm>
<computeroutput>template&lt;typename _Fp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__invoke_if_not (std::false_type , _Fp __f)</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a99ffa966b0cf5f0b3687352c6b055f81_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3d31de2b216616b4c29fb20b7f3af4ae"/><section>
    <title>__invoke_if_not()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__invoke_if_not</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__invoke_if_not</secondary></indexterm>
<computeroutput>template&lt;typename _Fp &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__invoke_if_not (std::true_type , _Fp __f)</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a421e80a845f245294fb04c66915e4557"/><section>
    <title>__is_heap_until_local()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__is_heap_until_local</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__is_heap_until_local</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _DifferenceType , class _Compare &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__is_heap_until_local (_RandomAccessIterator __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a421e80a845f245294fb04c66915e4557_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a212e7a586dc52970f6f43592525b5d05"/><section>
    <title>__is_heap_until_local()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__is_heap_until_local</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__is_heap_until_local</secondary></indexterm>
<computeroutput>template&lt;class _RandomAccessIterator , class _DifferenceType , class _Compare &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__is_heap_until_local (_RandomAccessIterator __first, _DifferenceType __begin, _DifferenceType __end, _Compare __comp, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a212e7a586dc52970f6f43592525b5d05_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a96278219a9b5139e6060c4a24235841c"/><section>
    <title>__is_parallelization_preferred()</title>
<indexterm><primary>__is_parallelization_preferred</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__is_parallelization_preferred</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy , typename... _IteratorTypes&gt; </computeroutput><para><computeroutput>auto __pstl::__internal::__is_parallelization_preferred (_ExecutionPolicy &amp;&amp; __exec) -&gt; decltype(<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_parallel(),
                                       typename <link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator</link>&lt;_IteratorTypes...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>()))
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a96278219a9b5139e6060c4a24235841c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a96278219a9b5139e6060c4a24235841c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aba53c2e534557bf2c817808fb3b3c269"/><section>
    <title>__is_vectorization_preferred()</title>
<indexterm><primary>__is_vectorization_preferred</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__is_vectorization_preferred</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy , typename... _IteratorTypes&gt; </computeroutput><para><computeroutput>auto __pstl::__internal::__is_vectorization_preferred (_ExecutionPolicy &amp;&amp; __exec) -&gt; decltype(<link linkend="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703">__internal::__lazy_and</link>(__exec.__allow_vector(),
                                       typename <link linkend="_struct____pstl_1_1____internal_1_1____is__random__access__iterator">__internal::__is_random_access_iterator</link>&lt;_IteratorTypes...&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>()))
</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aba53c2e534557bf2c817808fb3b3c269_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aba53c2e534557bf2c817808fb3b3c269_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab6cd19e3eb297893962c80882b1e7f78"/><section>
    <title>__lazy_and()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__lazy_and</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__lazy_and</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__lazy_and (_Tp __a, std::true_type )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3c2cbbe7383471b9eee17763a807b703"/><section>
    <title>__lazy_and()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__lazy_and</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__lazy_and</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>std::false_type __pstl::__internal::__lazy_and (_Tp , std::false_type )</computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3c2cbbe7383471b9eee17763a807b703_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ad994dc0fe84a65285d33a6bfd5de2c87"/><section>
    <title>__lazy_or()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__lazy_or</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__lazy_or</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__lazy_or (_Tp __a, std::false_type )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa4e87f24d82bdaef2aa34e5a55cb6b40"/><section>
    <title>__lazy_or()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__lazy_or</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__lazy_or</secondary></indexterm>
<computeroutput>template&lt;typename _Tp &gt; </computeroutput><para><computeroutput>std::true_type __pstl::__internal::__lazy_or (_Tp , std::true_type )</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af6e1bf383fe96c36bfa6a803caa71076"/><section>
    <title>__mismatch_serial()</title>
<indexterm><primary>__mismatch_serial</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__mismatch_serial</secondary></indexterm>
<computeroutput>template&lt;class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; __pstl::__internal::__mismatch_serial (_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __pred)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af6e1bf383fe96c36bfa6a803caa71076_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af6e1bf383fe96c36bfa6a803caa71076_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa1bc2681550192052e058f8e14869ad2"/><section>
    <title>__parallel_find()</title>
<indexterm><primary>__parallel_find</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__parallel_find</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _Index , class _Brick , class _Compare &gt; </computeroutput><para><computeroutput>_Index __pstl::__internal::__parallel_find (_ExecutionPolicy &amp;&amp; __exec, _Index __first, _Index __last, _Brick __f, _Compare __comp, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __b_first)</computeroutput></para>
<para>Return extremum value returned by brick f[i,j) for subranges [i,j) of [first,last) Each f[i,j) must return a value in [i,j). </para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa1bc2681550192052e058f8e14869ad2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0b24f24f2dfdffa3149539596892d0b0"/><section>
    <title>__parallel_or()</title>
<indexterm><primary>__parallel_or</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__parallel_or</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _Index , class _Brick &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__parallel_or (_ExecutionPolicy &amp;&amp; __exec, _Index __first, _Index __last, _Brick __f)</computeroutput></para><para>

<para>Return true if brick f[i,j) returns true for some subrange [i,j) of [first,last) </para>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0b24f24f2dfdffa3149539596892d0b0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2a2e617044fa3cd2d77dd999cd2a2d3b"/><section>
    <title>__parallel_set_op()</title>
<indexterm><primary>__parallel_set_op</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__parallel_set_op</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector , class _SizeFunction , class _SetOP &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__parallel_set_op (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _SizeFunction __size_func, _SetOP __set_op, _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2a2e617044fa3cd2d77dd999cd2a2d3b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2a2e617044fa3cd2d77dd999cd2a2d3b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a32f3932c1bca5cc9da70582e4ddf540b"/><section>
    <title>__parallel_set_union_op()</title>
<indexterm><primary>__parallel_set_union_op</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__parallel_set_union_op</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _SetUnionOp , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__parallel_set_union_op (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _SetUnionOp __set_union_op, _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a32f3932c1bca5cc9da70582e4ddf540b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a32f3932c1bca5cc9da70582e4ddf540b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a06ab524ac584392677a2d3002e998d89"/><section>
    <title>__pattern_adjacent_difference()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__pattern_adjacent_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _BinaryOperation , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_adjacent_difference (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _OutputIterator __d_first, _BinaryOperation __op, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a06ab524ac584392677a2d3002e998d89_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a06ab524ac584392677a2d3002e998d89_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae558b85f130d52a8711c7ca1982e7664"/><section>
    <title>__pattern_adjacent_difference()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__pattern_adjacent_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _BinaryOperation , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_adjacent_difference (_ExecutionPolicy &amp;&amp; , _ForwardIterator , _ForwardIterator , _OutputIterator , _BinaryOperation , _IsVector , std::true_type )</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a660ec4d23c146d1c5a380d0b202cf6e3"/><section>
    <title>__pattern_adjacent_difference()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__pattern_adjacent_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_adjacent_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryOperation , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__pattern_adjacent_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first, _BinaryOperation __op, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a660ec4d23c146d1c5a380d0b202cf6e3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6baa124378ed7fdc525b00a43af706ab"/><section>
    <title>__pattern_adjacent_find()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_adjacent_find</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_adjacent_find</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_adjacent_find (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred, std::false_type , _IsVector __is_vector, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __or_semantic)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6baa124378ed7fdc525b00a43af706ab_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6baa124378ed7fdc525b00a43af706ab_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9a5ef5a50f34242baa056308a62ce5cc"/><section>
    <title>__pattern_adjacent_find()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_adjacent_find</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_adjacent_find</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_adjacent_find (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _BinaryPredicate __pred, std::true_type , _IsVector __is_vector, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __or_semantic)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9a5ef5a50f34242baa056308a62ce5cc_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1abab9a13bd7c30a7e4c10aafb238323dd"/><section>
    <title>__pattern_any_of()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_any_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_any_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_any_of (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Pred __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_abab9a13bd7c30a7e4c10aafb238323dd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_abab9a13bd7c30a7e4c10aafb238323dd_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac1fcc787847842dc5354728aabdcaf52"/><section>
    <title>__pattern_any_of()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_any_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_any_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Pred , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_any_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Pred __pred, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac1fcc787847842dc5354728aabdcaf52_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a00b73000f7d2c9884939b67f41de7bb3"/><section>
    <title>__pattern_copy_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_copy_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_copy_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_copy_if (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a00b73000f7d2c9884939b67f41de7bb3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a00b73000f7d2c9884939b67f41de7bb3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa037013595e41eca3362fb3a268ed297"/><section>
    <title>__pattern_copy_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_copy_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_copy_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_copy_if (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator __result, _UnaryPredicate __pred, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa037013595e41eca3362fb3a268ed297_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab6c85c9e6daf1ae911a899fb47a2dac9"/><section>
    <title>__pattern_count()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_count</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_count</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </computeroutput><para><computeroutput>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type __pstl::__internal::__pattern_count (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::false_type , _IsVector __is_vector)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab6c85c9e6daf1ae911a899fb47a2dac9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab6c85c9e6daf1ae911a899fb47a2dac9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac2f2f71c321b21d7898859b498562000"/><section>
    <title>__pattern_count()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_count</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_count</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </computeroutput><para><computeroutput>std::iterator_traits&lt; _ForwardIterator &gt;::difference_type __pstl::__internal::__pattern_count (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, std::true_type , _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac2f2f71c321b21d7898859b498562000_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a596361246dd948515acd5af4fffe2518"/><section>
    <title>__pattern_equal()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__pattern_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_equal (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __p, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a596361246dd948515acd5af4fffe2518_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a596361246dd948515acd5af4fffe2518_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a36710873120eed2fa180a36e2b03a419"/><section>
    <title>__pattern_equal()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__pattern_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_equal (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _BinaryPredicate __p, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a36710873120eed2fa180a36e2b03a419_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a332e322b408e2e79300d0905a08e618c"/><section>
    <title>__pattern_equal()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__pattern_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_equal (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _BinaryPredicate __p, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a332e322b408e2e79300d0905a08e618c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6d8ee7abba31d48fda0226527ee72464"/><section>
    <title>__pattern_equal()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__pattern_equal</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_equal</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_equal (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _BinaryPredicate __p, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6d8ee7abba31d48fda0226527ee72464_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aff16869e1f76cf88c7dcdd1baa6304a9"/><section>
    <title>__pattern_fill()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_fill</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_fill</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_fill (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value, std::false_type , _IsVector __is_vector)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aff16869e1f76cf88c7dcdd1baa6304a9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aff16869e1f76cf88c7dcdd1baa6304a9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a476db1d5f698af0a5a952a4645a4af70"/><section>
    <title>__pattern_fill()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_fill</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_fill</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_fill (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp &amp; __value, std::true_type , _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a476db1d5f698af0a5a952a4645a4af70_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ad46a2d1af24aa54224f2adc68ef625ce"/><section>
    <title>__pattern_fill_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_fill_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_fill_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Tp , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_fill_n (_ExecutionPolicy &amp;&amp; , _OutputIterator __first, _Size __count, const _Tp &amp; __value, std::false_type , _IsVector __is_vector)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ad46a2d1af24aa54224f2adc68ef625ce_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ad46a2d1af24aa54224f2adc68ef625ce_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a56499de61c94cc462ef14f3fc499dc9e"/><section>
    <title>__pattern_fill_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_fill_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_fill_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Tp , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_fill_n (_ExecutionPolicy &amp;&amp; __exec, _OutputIterator __first, _Size __count, const _Tp &amp; __value, std::true_type , _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a56499de61c94cc462ef14f3fc499dc9e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab41e2c44c1a0b564c5f9e350dc98cd07"/><section>
    <title>__pattern_find_end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_find_end</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_find_end</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__pattern_find_end (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab41e2c44c1a0b564c5f9e350dc98cd07_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab41e2c44c1a0b564c5f9e350dc98cd07_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a4bbac7fb426c503541d7a13f3f6a3ccd"/><section>
    <title>__pattern_find_end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_find_end</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_find_end</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__pattern_find_end (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4bbac7fb426c503541d7a13f3f6a3ccd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab87ed0d016b76e9009330174d6dd604f"/><section>
    <title>__pattern_find_first_of()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_find_first_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_find_first_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__pattern_find_first_of (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab87ed0d016b76e9009330174d6dd604f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab87ed0d016b76e9009330174d6dd604f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a60c0a49ac96eb84fac73ad09bb67e9b2"/><section>
    <title>__pattern_find_first_of()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_find_first_of</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_find_first_of</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__pattern_find_first_of (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a60c0a49ac96eb84fac73ad09bb67e9b2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a048b6c9be4b418a089e7e1de87722139"/><section>
    <title>__pattern_find_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_find_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_find_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_find_if (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a048b6c9be4b418a089e7e1de87722139_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a048b6c9be4b418a089e7e1de87722139_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae297f95d5af67e7659376698b891d9b6"/><section>
    <title>__pattern_find_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_find_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_find_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Predicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_find_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae297f95d5af67e7659376698b891d9b6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a761ab81e053354013f7e051cca8bee7d"/><section>
    <title>__pattern_generate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_generate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_generate</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_generate (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Generator __g, std::false_type , _IsVector __is_vector)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a761ab81e053354013f7e051cca8bee7d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a761ab81e053354013f7e051cca8bee7d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9a6fbb749f8b1ef63c3fc3ae5c81dc48"/><section>
    <title>__pattern_generate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_generate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_generate</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Generator , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_generate (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Generator __g, std::true_type , _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9a6fbb749f8b1ef63c3fc3ae5c81dc48_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a91b9564bbea48ebdfc23c3da99c1ccf2"/><section>
    <title>__pattern_generate_n()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__pattern_generate_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_generate_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Generator , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_generate_n (_ExecutionPolicy &amp;&amp; , _OutputIterator __first, _Size __count, _Generator __g, std::false_type , _IsVector __is_vector)<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a91b9564bbea48ebdfc23c3da99c1ccf2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a89ba2dce127a80f7bc0578270c7fcb9c"/><section>
    <title>__pattern_generate_n()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__pattern_generate_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_generate_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator , class _IsVector &gt; </computeroutput><para><computeroutput>OutputIterator __pstl::__internal::__pattern_generate_n (_ExecutionPolicy &amp;&amp; , OutputIterator , <link linkend="_struct_size">Size</link> , _Generator , std::false_type , _IsVector )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a89ba2dce127a80f7bc0578270c7fcb9c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae9558d53b020bc0bce2d465e61be16f0"/><section>
    <title>__pattern_generate_n()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__pattern_generate_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_generate_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class OutputIterator , class <link linkend="_struct_size">Size</link> , class _Generator , class _IsVector &gt; </computeroutput><para><computeroutput>OutputIterator __pstl::__internal::__pattern_generate_n (_ExecutionPolicy &amp;&amp; , OutputIterator , <link linkend="_struct_size">Size</link> , _Generator , std::true_type , _IsVector )</computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6483b9c861063f91a19776970567bc1a"/><section>
    <title>__pattern_generate_n()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__pattern_generate_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_generate_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _OutputIterator , class _Size , class _Generator , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_generate_n (_ExecutionPolicy &amp;&amp; __exec, _OutputIterator __first, _Size __count, _Generator __g, std::true_type , _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6483b9c861063f91a19776970567bc1a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af4bd54f061b9f4a0d379383965a84e62"/><section>
    <title>__pattern_includes()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_includes</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_includes</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_includes (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp, _IsVector , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af4bd54f061b9f4a0d379383965a84e62_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af4bd54f061b9f4a0d379383965a84e62_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a4e83898b31f777a59d85ceca52311ff8"/><section>
    <title>__pattern_includes()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_includes</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_includes</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_includes (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp, _IsVector , std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4e83898b31f777a59d85ceca52311ff8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a28f4f64e2180b392ca4c226ee3c76d7c"/><section>
    <title>__pattern_inplace_merge()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_inplace_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_inplace_merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_inplace_merge (_ExecutionPolicy &amp;&amp; , _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a28f4f64e2180b392ca4c226ee3c76d7c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a28f4f64e2180b392ca4c226ee3c76d7c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a4776592443a46071702773c7f7fd40d8"/><section>
    <title>__pattern_inplace_merge()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_inplace_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_inplace_merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_inplace_merge (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4776592443a46071702773c7f7fd40d8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0fe7d90d58490eee0f9aa2f92a0a48e1"/><section>
    <title>__pattern_is_heap_until()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_is_heap_until</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_is_heap_until</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_is_heap_until (_ExecutionPolicy &amp;&amp; , _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0fe7d90d58490eee0f9aa2f92a0a48e1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0fe7d90d58490eee0f9aa2f92a0a48e1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a71c7837f9acfc44b3fb3f952136e2100"/><section>
    <title>__pattern_is_heap_until()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_is_heap_until</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_is_heap_until</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_is_heap_until (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a71c7837f9acfc44b3fb3f952136e2100_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a3c61e6bb9156e92c5f8e13ad0c5e5e5b"/><section>
    <title>__pattern_is_partitioned()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_is_partitioned</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_is_partitioned</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_is_partitioned (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3c61e6bb9156e92c5f8e13ad0c5e5e5b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a3c61e6bb9156e92c5f8e13ad0c5e5e5b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a731f25ad9c5911a4653029fe4daa672b"/><section>
    <title>__pattern_is_partitioned()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_is_partitioned</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_is_partitioned</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_is_partitioned (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a731f25ad9c5911a4653029fe4daa672b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a87963436503d6c04ddbae7eb6827f60c"/><section>
    <title>__pattern_lexicographical_compare()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_lexicographical_compare</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_lexicographical_compare</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_lexicographical_compare (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a87963436503d6c04ddbae7eb6827f60c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a87963436503d6c04ddbae7eb6827f60c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0594b7be154260d4252b5fecdd79b5a8"/><section>
    <title>__pattern_lexicographical_compare()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_lexicographical_compare</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_lexicographical_compare</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __pstl::__internal::__pattern_lexicographical_compare (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0594b7be154260d4252b5fecdd79b5a8_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a76f9badc9cf4092c8e996b0564a8a8d2"/><section>
    <title>__pattern_merge()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_merge (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __d_first, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a76f9badc9cf4092c8e996b0564a8a8d2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a76f9badc9cf4092c8e996b0564a8a8d2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a88efac728302414dc40ef03666a525b9"/><section>
    <title>__pattern_merge()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_merge</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_merge</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_merge (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _OutputIterator __d_first, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a88efac728302414dc40ef03666a525b9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1afac22840ab45394d57a19b1b5c102a9b"/><section>
    <title>__pattern_min_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_min_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_min_element</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_min_element (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afac22840ab45394d57a19b1b5c102a9b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afac22840ab45394d57a19b1b5c102a9b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a68e4819c62973487b53a5fd4c2bfb6e2"/><section>
    <title>__pattern_min_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_min_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_min_element</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy , typename _RandomAccessIterator , typename _Compare , typename _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_min_element (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a68e4819c62973487b53a5fd4c2bfb6e2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac0ba54f6df57a5a9f3dfb520b1dffd37"/><section>
    <title>__pattern_minmax_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_minmax_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_minmax_element</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; __pstl::__internal::__pattern_minmax_element (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac0ba54f6df57a5a9f3dfb520b1dffd37_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac0ba54f6df57a5a9f3dfb520b1dffd37_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a20c5c80ff4a258db9f3fa9020ac1d544"/><section>
    <title>__pattern_minmax_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_minmax_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_minmax_element</secondary></indexterm>
<computeroutput>template&lt;typename _ExecutionPolicy , typename _ForwardIterator , typename _Compare , typename _IsVector &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator, _ForwardIterator &gt; __pstl::__internal::__pattern_minmax_element (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a20c5c80ff4a258db9f3fa9020ac1d544_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af94c79334ec95c8bccf8ce29d207f8b2"/><section>
    <title>__pattern_mismatch()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_mismatch</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Predicate , class _IsVector &gt; </computeroutput><para><computeroutput>std::pair&lt; _ForwardIterator1, _ForwardIterator2 &gt; __pstl::__internal::__pattern_mismatch (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Predicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af94c79334ec95c8bccf8ce29d207f8b2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af94c79334ec95c8bccf8ce29d207f8b2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a86ddc2652f50a65b022beba313670f4d"/><section>
    <title>__pattern_mismatch()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_mismatch</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_mismatch</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Predicate , class _IsVector &gt; </computeroutput><para><computeroutput>std::pair&lt; _RandomAccessIterator1, _RandomAccessIterator2 &gt; __pstl::__internal::__pattern_mismatch (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _Predicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a86ddc2652f50a65b022beba313670f4d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1d4194f0c17340011a1f84e4123b368a"/><section>
    <title>__pattern_nth_element()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_nth_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_nth_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_nth_element (_ExecutionPolicy &amp;&amp; , _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp, _IsVector , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1d4194f0c17340011a1f84e4123b368a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1d4194f0c17340011a1f84e4123b368a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6363ba028d1204de35e49c2992dc33be"/><section>
    <title>__pattern_nth_element()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_nth_element</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_nth_element</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_nth_element (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6363ba028d1204de35e49c2992dc33be_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a913b070daf38b8f0c138c1c5df02f47c"/><section>
    <title>__pattern_partial_sort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_partial_sort</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partial_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_partial_sort (_ExecutionPolicy &amp;&amp; , _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp, _IsVector , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a913b070daf38b8f0c138c1c5df02f47c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a913b070daf38b8f0c138c1c5df02f47c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aba659375caae21864599440aa982bc74"/><section>
    <title>__pattern_partial_sort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_partial_sort</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partial_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_partial_sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp, _IsVector , std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aba659375caae21864599440aa982bc74_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac7fa2ccc37779ff9c32374cab3d19453"/><section>
    <title>__pattern_partial_sort_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_partial_sort_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partial_sort_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_partial_sort_copy (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last, _Compare __comp, _IsVector , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac7fa2ccc37779ff9c32374cab3d19453_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac7fa2ccc37779ff9c32374cab3d19453_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0b0d1ce785beef64a5003271d4cd5c4a"/><section>
    <title>__pattern_partial_sort_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_partial_sort_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partial_sort_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_partial_sort_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _RandomAccessIterator __d_first, _RandomAccessIterator __d_last, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0b0d1ce785beef64a5003271d4cd5c4a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aad5bdaaadc2aee6f032d7188f9556523"/><section>
    <title>__pattern_partition()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partition</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_partition (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aad5bdaaadc2aee6f032d7188f9556523_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aad5bdaaadc2aee6f032d7188f9556523_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a61f63e28f8029e1701e73ac7b545d735"/><section>
    <title>__pattern_partition()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partition</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_partition (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a61f63e28f8029e1701e73ac7b545d735_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a213f0e051dd1ea6261325ac6f2f65cb2"/><section>
    <title>__pattern_partition_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_partition_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partition_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; __pstl::__internal::__pattern_partition_copy (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _UnaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a213f0e051dd1ea6261325ac6f2f65cb2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a213f0e051dd1ea6261325ac6f2f65cb2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a39b7209a5f972f57dd561159aaef3301"/><section>
    <title>__pattern_partition_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_partition_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_partition_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator1 , class _OutputIterator2 , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>std::pair&lt; _OutputIterator1, _OutputIterator2 &gt; __pstl::__internal::__pattern_partition_copy (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator1 __out_true, _OutputIterator2 __out_false, _UnaryPredicate __pred, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a39b7209a5f972f57dd561159aaef3301_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab7a6c74a4cb2c2ee930c2da12b6cd686"/><section>
    <title>__pattern_remove_if()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_remove_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_remove_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_remove_if (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab7a6c74a4cb2c2ee930c2da12b6cd686_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab7a6c74a4cb2c2ee930c2da12b6cd686_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1abaac748503657c571bfa47fdc1e0cc08"/><section>
    <title>__pattern_remove_if()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_remove_if</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_remove_if</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_remove_if (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_abaac748503657c571bfa47fdc1e0cc08_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5f2267ae5935da96528156e02f6f4303"/><section>
    <title>__pattern_reverse()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_reverse</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_reverse</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_reverse (_ExecutionPolicy &amp;&amp; , _BidirectionalIterator __first, _BidirectionalIterator __last, _IsVector _is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5f2267ae5935da96528156e02f6f4303_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5f2267ae5935da96528156e02f6f4303_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a94ad8c6840c1904f7d52858e7be74354"/><section>
    <title>__pattern_reverse()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_reverse</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_reverse</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_reverse (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a94ad8c6840c1904f7d52858e7be74354_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af2c72d8af8666a15b6ddcdbd7756cce0"/><section>
    <title>__pattern_reverse_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_reverse_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_reverse_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _OutputIterator , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_reverse_copy (_ExecutionPolicy &amp;&amp; , _BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __d_first, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af2c72d8af8666a15b6ddcdbd7756cce0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af2c72d8af8666a15b6ddcdbd7756cce0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1bbdf6f7bb9a5f3a4f31114a9043ddb4"/><section>
    <title>__pattern_reverse_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_reverse_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_reverse_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _OutputIterator , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_reverse_copy (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __d_first, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a1bbdf6f7bb9a5f3a4f31114a9043ddb4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa1344d4c056259b28555671b7a23108d"/><section>
    <title>__pattern_rotate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_rotate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_rotate</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_rotate (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa1344d4c056259b28555671b7a23108d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa1344d4c056259b28555671b7a23108d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a94a7d55cfbf7d100e9c4605bb77112ca"/><section>
    <title>__pattern_rotate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_rotate</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_rotate</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_rotate (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a94a7d55cfbf7d100e9c4605bb77112ca_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a6a5ba3b17e77b55a76e8ed1b6130f2e2"/><section>
    <title>__pattern_rotate_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_rotate_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_rotate_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_rotate_copy (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6a5ba3b17e77b55a76e8ed1b6130f2e2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a6a5ba3b17e77b55a76e8ed1b6130f2e2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a00eafc09ae70c395ab01c3f9a66fd235"/><section>
    <title>__pattern_rotate_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_rotate_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_rotate_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_rotate_copy (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a00eafc09ae70c395ab01c3f9a66fd235_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af101203bfce74b08bef3c56eaa652f97"/><section>
    <title>__pattern_search()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_search</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_search</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__pattern_search (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af101203bfce74b08bef3c56eaa652f97_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af101203bfce74b08bef3c56eaa652f97_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8ccbebe06473a8864e3f075b85bac098"/><section>
    <title>__pattern_search()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_search</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_search</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator1 __pstl::__internal::__pattern_search (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8ccbebe06473a8864e3f075b85bac098_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a56a0e31fa0d0c5465107414c385adc9d"/><section>
    <title>__pattern_search_n()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__pattern_search_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_search_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_search_n (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Size __count, const _Tp &amp; __value, _BinaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a56a0e31fa0d0c5465107414c385adc9d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aeee6ca536b74ecbe6543c70b07b0bbf4"/><section>
    <title>__pattern_search_n()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__pattern_search_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_search_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Tp , class _BinaryPredicate , class IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_search_n (_ExecutionPolicy &amp;&amp; , _ForwardIterator , _ForwardIterator , _Size , const _Tp &amp; , _BinaryPredicate , IsVector , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aeee6ca536b74ecbe6543c70b07b0bbf4_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a1e4dd7de3f8c01c02c10cbc548099a90"/><section>
    <title>__pattern_search_n()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__pattern_search_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_search_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Tp , class _BinaryPredicate , class IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_search_n (_ExecutionPolicy &amp;&amp; , _RandomAccessIterator , _RandomAccessIterator , _Size , const _Tp &amp; , _BinaryPredicate , IsVector , std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8aa1b892e7073b6e0b8d55419e556b10"/><section>
    <title>__pattern_search_n()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__pattern_search_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_search_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Tp , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_search_n (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Size __count, const _Tp &amp; __value, _BinaryPredicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8aa1b892e7073b6e0b8d55419e556b10_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae2ac09b3a487a7ba6061822478a08420"/><section>
    <title>__pattern_set_difference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_set_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_difference (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae2ac09b3a487a7ba6061822478a08420_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae2ac09b3a487a7ba6061822478a08420_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a21887a3e3ba35dc56e4d524dd6f2dde5"/><section>
    <title>__pattern_set_difference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_set_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a21887a3e3ba35dc56e4d524dd6f2dde5_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aa71f557e499f46f8fdfcb81c1ade34b3"/><section>
    <title>__pattern_set_intersection()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_set_intersection</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_intersection</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_intersection (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa71f557e499f46f8fdfcb81c1ade34b3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aa71f557e499f46f8fdfcb81c1ade34b3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a505413fc2fcfaf823836f8ba2348a21d"/><section>
    <title>__pattern_set_intersection()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_set_intersection</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_intersection</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_intersection (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a505413fc2fcfaf823836f8ba2348a21d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2468e1a5821a3180a4352135b4ac89c9"/><section>
    <title>__pattern_set_symmetric_difference()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_set_symmetric_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_symmetric_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_symmetric_difference (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2468e1a5821a3180a4352135b4ac89c9_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2468e1a5821a3180a4352135b4ac89c9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0a3f69c5b0b60d4ea1e4127f8eab8ef2"/><section>
    <title>__pattern_set_symmetric_difference()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_set_symmetric_difference</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_symmetric_difference</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_symmetric_difference (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0a3f69c5b0b60d4ea1e4127f8eab8ef2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0b5347b92e571caa994698482c35535b"/><section>
    <title>__pattern_set_union()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_set_union</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_union</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_union (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0b5347b92e571caa994698482c35535b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0b5347b92e571caa994698482c35535b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac7e0e35e17f94ea6ac0b9a531e6805f6"/><section>
    <title>__pattern_set_union()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_set_union</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_set_union</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _OutputIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_set_union (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2, _OutputIterator __result, _Compare __comp, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ac7e0e35e17f94ea6ac0b9a531e6805f6_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5ccc13fdf58da10d6d45be7770ad0a4c"/><section>
    <title>__pattern_sort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_sort</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector , class _IsMoveConstructible &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_sort (_ExecutionPolicy &amp;&amp; , _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _IsVector , std::false_type , _IsMoveConstructible )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5ccc13fdf58da10d6d45be7770ad0a4c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5ccc13fdf58da10d6d45be7770ad0a4c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab5e5fe62a4b7da3722035a9a77ac890b"/><section>
    <title>__pattern_sort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_sort</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _IsVector , std::true_type , std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab5e5fe62a4b7da3722035a9a77ac890b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8c278dd40fdab60b98fd9a0046876130"/><section>
    <title>__pattern_stable_partition()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_stable_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_stable_partition</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_BidirectionalIterator __pstl::__internal::__pattern_stable_partition (_ExecutionPolicy &amp;&amp; , _BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8c278dd40fdab60b98fd9a0046876130_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8c278dd40fdab60b98fd9a0046876130_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5adc5d57d7e462d14f717be5a4a1fc84"/><section>
    <title>__pattern_stable_partition()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_stable_partition</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_stable_partition</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _BidirectionalIterator , class _UnaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_BidirectionalIterator __pstl::__internal::__pattern_stable_partition (_ExecutionPolicy &amp;&amp; __exec, _BidirectionalIterator __first, _BidirectionalIterator __last, _UnaryPredicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5adc5d57d7e462d14f717be5a4a1fc84_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aee8744385f4f206ef9dd2c11f1af9b48"/><section>
    <title>__pattern_stable_sort()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_stable_sort</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_stable_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_stable_sort (_ExecutionPolicy &amp;&amp; , _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _IsVector , std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aee8744385f4f206ef9dd2c11f1af9b48_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aee8744385f4f206ef9dd2c11f1af9b48_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a0dbd23a8f6451b9d6a2faaa4abf0e1e1"/><section>
    <title>__pattern_stable_sort()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_stable_sort</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_stable_sort</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Compare , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_stable_sort (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp, _IsVector , std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a0dbd23a8f6451b9d6a2faaa4abf0e1e1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1add18cbb980aea037c337adc3b0bb155f"/><section>
    <title>__pattern_transform_reduce()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>__pattern_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation , class _IsVector &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__pattern_transform_reduce (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_add18cbb980aea037c337adc3b0bb155f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1afcebd939332b7acb17ecdb4debdf8e36"/><section>
    <title>__pattern_transform_reduce()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>__pattern_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Tp , class _BinaryOperation , class _UnaryOperation , class _IsVector &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__pattern_transform_reduce (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afcebd939332b7acb17ecdb4debdf8e36_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440"/><section>
    <title>__pattern_transform_reduce()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>__pattern_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 , class _IsVector &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__pattern_transform_reduce (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_adc9b1a1468736ba57bfa4bbbc56a0440_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_adc9b1a1468736ba57bfa4bbbc56a0440_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1adafb3c27c7136034f666734ae902ff04"/><section>
    <title>__pattern_transform_reduce()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>__pattern_transform_reduce</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_transform_reduce</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Tp , class _BinaryOperation1 , class _BinaryOperation2 , class _IsVector &gt; </computeroutput><para><computeroutput>_Tp __pstl::__internal::__pattern_transform_reduce (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_adafb3c27c7136034f666734ae902ff04_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8b1fafa95881c18c8c209a63b817198d"/><section>
    <title>__pattern_transform_scan()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__pattern_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_transform_scan (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive , _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8b1fafa95881c18c8c209a63b817198d_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8b1fafa95881c18c8c209a63b817198d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af0c85b4392a0bb4de013e30fdf4426b4"/><section>
    <title>__pattern_transform_scan()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__pattern_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive , class _IsVector &gt; </computeroutput><para><computeroutput>std::enable_if&lt;!std::is_floating_point&lt; _Tp &gt;<link linkend="_classvalue">::value</link>, _OutputIterator &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__internal::__pattern_transform_scan (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive , _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af0c85b4392a0bb4de013e30fdf4426b4_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a4132256b7a2d3aa5c5320835f2579b4e"/><section>
    <title>__pattern_transform_scan()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__pattern_transform_scan</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_transform_scan</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _UnaryOperation , class _Tp , class _BinaryOperation , class _Inclusive , class _IsVector &gt; </computeroutput><para><computeroutput>std::enable_if&lt; std::is_floating_point&lt; _Tp &gt;<link linkend="_classvalue">::value</link>, _OutputIterator &gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link> __pstl::__internal::__pattern_transform_scan (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator __result, _UnaryOperation __unary_op, _Tp __init, _BinaryOperation __binary_op, _Inclusive , _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a4132256b7a2d3aa5c5320835f2579b4e_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a7d71081d25f6bd099154a9d7ab2acc0b"/><section>
    <title>__pattern_unique()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_unique</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_unique</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_unique (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7d71081d25f6bd099154a9d7ab2acc0b_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7d71081d25f6bd099154a9d7ab2acc0b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a11935690aa5dac579ee657f013e63a34"/><section>
    <title>__pattern_unique()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_unique</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_unique</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_unique (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred, _IsVector __is_vector, std::true_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a11935690aa5dac579ee657f013e63a34_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ae5b4115f81569b63f8d0feb2bd3b90ec"/><section>
    <title>__pattern_unique_copy()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_unique_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _OutputIterator , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_unique_copy (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _OutputIterator __result, _BinaryPredicate __pred, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae5b4115f81569b63f8d0feb2bd3b90ec_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ae5b4115f81569b63f8d0feb2bd3b90ec_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a7b3e1f14245a12221c9a3e8bd3f1af5c"/><section>
    <title>__pattern_unique_copy()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_unique_copy</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_unique_copy</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _OutputIterator , class _BinaryPredicate , class _IsVector &gt; </computeroutput><para><computeroutput>_OutputIterator __pstl::__internal::__pattern_unique_copy (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _OutputIterator __result, _BinaryPredicate __pred, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a7b3e1f14245a12221c9a3e8bd3f1af5c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051"/><section>
    <title>__pattern_walk1()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk1</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk1</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_walk1 (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Function __f, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab0763e7038c1a483b7905a47fb58f051_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab0763e7038c1a483b7905a47fb58f051_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af335f95356f4ebf43cf207b222405f41"/><section>
    <title>__pattern_walk1()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk1</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk1</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_walk1 (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Function __f, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af335f95356f4ebf43cf207b222405f41_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87"/><section>
    <title>__pattern_walk1_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk1_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk1_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_walk1_n (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _Size __n, _Function __f, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a11dfb059348e8a4ad07857209d99bc87_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a11dfb059348e8a4ad07857209d99bc87_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aed0391a132d75451e377268d2c658440"/><section>
    <title>__pattern_walk1_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk1_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk1_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_walk1_n (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _Size __n, _Function __f, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aed0391a132d75451e377268d2c658440_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0"/><section>
    <title>__pattern_walk2()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__pattern_walk2 (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Function __f, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a70065033fe2904641ef4cceafc92c7a0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a70065033fe2904641ef4cceafc92c7a0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af969c08a7c5fba72fe026426354c22cb"/><section>
    <title>__pattern_walk2()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__pattern_walk2 (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Function __f, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af969c08a7c5fba72fe026426354c22cb_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5"/><section>
    <title>__pattern_walk2_brick()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2_brick</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2_brick</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _Brick &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__pattern_walk2_brick (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Brick __brick, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a28e6956cf2cd3d8cfe4949d41a700cc5_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a8653f3d43fc8d6b095c57650fed9f77c"/><section>
    <title>__pattern_walk2_brick()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2_brick</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2_brick</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _Brick &gt; </computeroutput><para><computeroutput>_RandomAccessIterator2 __pstl::__internal::__pattern_walk2_brick (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _Brick __brick, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a8653f3d43fc8d6b095c57650fed9f77c_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599"/><section>
    <title>__pattern_walk2_brick_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2_brick_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2_brick_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Brick &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__pattern_walk2_brick_n (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _Size __n, _ForwardIterator2 __first2, _Brick __brick, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_af9995ae7f7807a02b57d84a9053eb599_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a2ce242375a503d9905db8a0e7ce1f016"/><section>
    <title>__pattern_walk2_brick_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2_brick_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2_brick_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _Size , class _RandomAccessIterator2 , class _Brick &gt; </computeroutput><para><computeroutput>_RandomAccessIterator2 __pstl::__internal::__pattern_walk2_brick_n (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _Size __n, _RandomAccessIterator2 __first2, _Brick __brick, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a2ce242375a503d9905db8a0e7ce1f016_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63"/><section>
    <title>__pattern_walk2_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _Size , class _ForwardIterator2 , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator2 __pstl::__internal::__pattern_walk2_n (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _Size __n, _ForwardIterator2 __first2, _Function __f, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aaf0adc66e234afd1485fde5689041a63_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_aaf0adc66e234afd1485fde5689041a63_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1afbe880c5f7740c2d414c6487247ee527"/><section>
    <title>__pattern_walk2_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk2_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk2_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _Size , class _RandomAccessIterator2 , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator2 __pstl::__internal::__pattern_walk2_n (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _Size __n, _RandomAccessIterator2 __first2, _Function __f, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_afbe880c5f7740c2d414c6487247ee527_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a618223855e120744a00b409ddfb37ea3"/><section>
    <title>__pattern_walk3()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk3</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk3</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator1 , class _ForwardIterator2 , class _ForwardIterator3 , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator3 __pstl::__internal::__pattern_walk3 (_ExecutionPolicy &amp;&amp; , _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator3 __first3, _Function __f, _IsVector __is_vector, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a618223855e120744a00b409ddfb37ea3_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a618223855e120744a00b409ddfb37ea3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a5686ea0a28913fdc233959a0f24f836f"/><section>
    <title>__pattern_walk3()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk3</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk3</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator1 , class _RandomAccessIterator2 , class _RandomAccessIterator3 , class _Function , class _IsVector &gt; </computeroutput><para><computeroutput>_RandomAccessIterator3 __pstl::__internal::__pattern_walk3 (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2, _RandomAccessIterator3 __first3, _Function __f, _IsVector __is_vector, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a5686ea0a28913fdc233959a0f24f836f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e"/><section>
    <title>__pattern_walk_brick()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk_brick</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk_brick</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Brick &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_walk_brick (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _ForwardIterator __last, _Brick __brick, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a9f0cc9e31db8bdd25f6e8d7233ffba3e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a18df289a04236eebcd56b382e71eee12"/><section>
    <title>__pattern_walk_brick()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk_brick</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk_brick</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Brick &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> __pstl::__internal::__pattern_walk_brick (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _Brick __brick, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a18df289a04236eebcd56b382e71eee12_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f"/><section>
    <title>__pattern_walk_brick_n()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>__pattern_walk_brick_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk_brick_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _Size , class _Brick &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__pattern_walk_brick_n (_ExecutionPolicy &amp;&amp; , _ForwardIterator __first, _Size __n, _Brick __brick, std::false_type )<computeroutput>[noexcept]</computeroutput></computeroutput></para>Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a33569d9fe129889d08729fa3424ac32f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1a82332631799d42f5a9da54f3fc13da21"/><section>
    <title>__pattern_walk_brick_n()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>__pattern_walk_brick_n</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__pattern_walk_brick_n</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _RandomAccessIterator , class _Size , class _Brick &gt; </computeroutput><para><computeroutput>_RandomAccessIterator __pstl::__internal::__pattern_walk_brick_n (_ExecutionPolicy &amp;&amp; __exec, _RandomAccessIterator __first, _Size __n, _Brick __brick, std::true_type )</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_a82332631799d42f5a9da54f3fc13da21_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_namespace____pstl_1_1____internal_1ab96ad0e98fb260ea102f3a20ddc0dbf0"/><section>
    <title>__remove_elements()</title>
<indexterm><primary>__remove_elements</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__remove_elements</secondary></indexterm>
<computeroutput>template&lt;class _ExecutionPolicy , class _ForwardIterator , class _CalcMask , class _IsVector &gt; </computeroutput><para><computeroutput>_ForwardIterator __pstl::__internal::__remove_elements (_ExecutionPolicy &amp;&amp; __exec, _ForwardIterator __first, _ForwardIterator __last, _CalcMask __calc_mask, _IsVector __is_vector)</computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab96ad0e98fb260ea102f3a20ddc0dbf0_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="namespace____pstl_1_1____internal_ab96ad0e98fb260ea102f3a20ddc0dbf0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespace____pstl_1_1____internal_1ac26064ef0ea999796fe776c3f3260a50"/><section>
    <title>__set_algo_cut_off</title>
<indexterm><primary>__set_algo_cut_off</primary><secondary>__pstl::__internal</secondary></indexterm>
<indexterm><primary>__pstl::__internal</primary><secondary>__set_algo_cut_off</secondary></indexterm>
<para><computeroutput>constexpr auto __pstl::__internal::__set_algo_cut_off = 1000<computeroutput>[constexpr]</computeroutput></computeroutput></para></section>
</section>
</section>
