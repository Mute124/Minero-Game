<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2_raylib_erosion_standalone-main_2raylib_2src_2gestures_8h_source" xml:lang="en-US">
<title>gestures.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/RaylibErosionStandalone-main/raylib/src/gestures.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/**********************************************************************************************</emphasis>
2 <emphasis role="comment">*</emphasis>
3 <emphasis role="comment">*&#32;&#32;&#32;raylib.gestures&#32;-&#32;Gestures&#32;system,&#32;gestures&#32;processing&#32;based&#32;on&#32;input&#32;events&#32;(touch/mouse)</emphasis>
4 <emphasis role="comment">*</emphasis>
5 <emphasis role="comment">*&#32;&#32;&#32;NOTE:&#32;Memory&#32;footprint&#32;of&#32;this&#32;library&#32;is&#32;aproximately&#32;128&#32;bytes&#32;(global&#32;variables)</emphasis>
6 <emphasis role="comment">*</emphasis>
7 <emphasis role="comment">*&#32;&#32;&#32;CONFIGURATION:</emphasis>
8 <emphasis role="comment">*</emphasis>
9 <emphasis role="comment">*&#32;&#32;&#32;#define&#32;GESTURES_IMPLEMENTATION</emphasis>
10 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generates&#32;the&#32;implementation&#32;of&#32;the&#32;library&#32;into&#32;the&#32;included&#32;file.</emphasis>
11 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;not&#32;defined,&#32;the&#32;library&#32;is&#32;in&#32;header&#32;only&#32;mode&#32;and&#32;can&#32;be&#32;included&#32;in&#32;other&#32;headers</emphasis>
12 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;or&#32;source&#32;files&#32;without&#32;problems.&#32;But&#32;only&#32;ONE&#32;file&#32;should&#32;hold&#32;the&#32;implementation.</emphasis>
13 <emphasis role="comment">*</emphasis>
14 <emphasis role="comment">*&#32;&#32;&#32;#define&#32;GESTURES_STANDALONE</emphasis>
15 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;defined,&#32;the&#32;library&#32;can&#32;be&#32;used&#32;as&#32;standalone&#32;to&#32;process&#32;gesture&#32;events&#32;with</emphasis>
16 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;no&#32;external&#32;dependencies.</emphasis>
17 <emphasis role="comment">*</emphasis>
18 <emphasis role="comment">*&#32;&#32;&#32;CONTRIBUTORS:</emphasis>
19 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marc&#32;Palau:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Initial&#32;implementation&#32;(2014)</emphasis>
20 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Albert&#32;Martos:&#32;&#32;&#32;&#32;&#32;&#32;Complete&#32;redesign&#32;and&#32;testing&#32;(2015)</emphasis>
21 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ian&#32;Eito:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Complete&#32;redesign&#32;and&#32;testing&#32;(2015)</emphasis>
22 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ramon&#32;Santamaria:&#32;&#32;&#32;Supervision,&#32;review,&#32;update&#32;and&#32;maintenance</emphasis>
23 <emphasis role="comment">*</emphasis>
24 <emphasis role="comment">*</emphasis>
25 <emphasis role="comment">*&#32;&#32;&#32;LICENSE:&#32;zlib/libpng</emphasis>
26 <emphasis role="comment">*</emphasis>
27 <emphasis role="comment">*&#32;&#32;&#32;Copyright&#32;(c)&#32;2014-2020&#32;Ramon&#32;Santamaria&#32;(@raysan5)</emphasis>
28 <emphasis role="comment">*</emphasis>
29 <emphasis role="comment">*&#32;&#32;&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as-is&quot;,&#32;without&#32;any&#32;express&#32;or&#32;implied&#32;warranty.&#32;In&#32;no&#32;event</emphasis>
30 <emphasis role="comment">*&#32;&#32;&#32;will&#32;the&#32;authors&#32;be&#32;held&#32;liable&#32;for&#32;any&#32;damages&#32;arising&#32;from&#32;the&#32;use&#32;of&#32;this&#32;software.</emphasis>
31 <emphasis role="comment">*</emphasis>
32 <emphasis role="comment">*&#32;&#32;&#32;Permission&#32;is&#32;granted&#32;to&#32;anyone&#32;to&#32;use&#32;this&#32;software&#32;for&#32;any&#32;purpose,&#32;including&#32;commercial</emphasis>
33 <emphasis role="comment">*&#32;&#32;&#32;applications,&#32;and&#32;to&#32;alter&#32;it&#32;and&#32;redistribute&#32;it&#32;freely,&#32;subject&#32;to&#32;the&#32;following&#32;restrictions:</emphasis>
34 <emphasis role="comment">*</emphasis>
35 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;1.&#32;The&#32;origin&#32;of&#32;this&#32;software&#32;must&#32;not&#32;be&#32;misrepresented;&#32;you&#32;must&#32;not&#32;claim&#32;that&#32;you</emphasis>
36 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;wrote&#32;the&#32;original&#32;software.&#32;If&#32;you&#32;use&#32;this&#32;software&#32;in&#32;a&#32;product,&#32;an&#32;acknowledgment</emphasis>
37 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;in&#32;the&#32;product&#32;documentation&#32;would&#32;be&#32;appreciated&#32;but&#32;is&#32;not&#32;required.</emphasis>
38 <emphasis role="comment">*</emphasis>
39 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;2.&#32;Altered&#32;source&#32;versions&#32;must&#32;be&#32;plainly&#32;marked&#32;as&#32;such,&#32;and&#32;must&#32;not&#32;be&#32;misrepresented</emphasis>
40 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;as&#32;being&#32;the&#32;original&#32;software.</emphasis>
41 <emphasis role="comment">*</emphasis>
42 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;3.&#32;This&#32;notice&#32;may&#32;not&#32;be&#32;removed&#32;or&#32;altered&#32;from&#32;any&#32;source&#32;distribution.</emphasis>
43 <emphasis role="comment">*</emphasis>
44 <emphasis role="comment">**********************************************************************************************/</emphasis>
45 
46 <emphasis role="preprocessor">#ifndef&#32;GESTURES_H</emphasis>
47 <emphasis role="preprocessor">#define&#32;GESTURES_H</emphasis>
48 
49 <emphasis role="preprocessor">#ifndef&#32;PI</emphasis>
50 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;PI&#32;3.14159265358979323846</emphasis>
51 <emphasis role="preprocessor">#endif</emphasis>
52 
53 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
54 <emphasis role="comment">//&#32;Defines&#32;and&#32;Macros</emphasis>
55 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
56 <emphasis role="comment">//...</emphasis>
57 
58 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
59 <emphasis role="comment">//&#32;Types&#32;and&#32;Structures&#32;Definition</emphasis>
60 <emphasis role="comment">//&#32;NOTE:&#32;Below&#32;types&#32;are&#32;required&#32;for&#32;GESTURES_STANDALONE&#32;usage</emphasis>
61 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
62 <emphasis role="preprocessor">#if&#32;defined(GESTURES_STANDALONE)</emphasis>
63 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifndef&#32;__cplusplus</emphasis>
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Boolean&#32;type</emphasis>
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keyword">true</emphasis>&#32;}&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>;
66 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
67 
68 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Vector2&#32;type</emphasis>
69 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_vector2">Vector2</link>&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_vector2_1a046bb8d17a876acc49415128dc0502f2">x</link>;
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_vector2_1a0e07bad05f01ed811b909a2eef97f9e2">y</link>;
72 &#32;&#32;&#32;&#32;}&#32;<link linkend="_struct_vector2">Vector2</link>;
73 
74 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gestures&#32;type</emphasis>
75 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;It&#32;could&#32;be&#32;used&#32;as&#32;flags&#32;to&#32;enable&#32;only&#32;some&#32;gestures</emphasis>
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0,
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12aa6ea36cd5cdb1a323cc2428937fb1692">GESTURE_TAP</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1,
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a8b5d655a878adcc18c6ef37367c75943">GESTURE_DOUBLETAP</link>&#32;&#32;&#32;=&#32;2,
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;4,
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;8,
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a337cfdf346943f1ba19c3b668234860e">GESTURE_SWIPE_RIGHT</link>&#32;=&#32;16,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a6ce54903fd831fdc6364471eadaacb9c">GESTURE_SWIPE_LEFT</link>&#32;&#32;=&#32;32,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a64bda7d6d0dc201f3f195297c0c45d70">GESTURE_SWIPE_UP</link>&#32;&#32;&#32;&#32;=&#32;64,
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12accf621e170b4d2e51966bd72ec053fc2">GESTURE_SWIPE_DOWN</link>&#32;&#32;=&#32;128,
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a4c029381b3757f0143cbcc687449bad6">GESTURE_PINCH_IN</link>&#32;&#32;&#32;&#32;=&#32;256,
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12adb71607a217fbb056bf654af46bc9384">GESTURE_PINCH_OUT</link>&#32;&#32;&#32;=&#32;512
88 &#32;&#32;&#32;&#32;}&#32;Gestures;
89 <emphasis role="preprocessor">#endif</emphasis>
90 
91 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a90884c2f9baa25f5107bfa334297fce3">TOUCH_UP</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a9b9626b3c6c2fb5d2731f3751a0f42d5">TOUCH_DOWN</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a744fb6f69db9d3e132fe29477c6b8e93">TOUCH_MOVE</link>&#32;}&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9">TouchAction</link>;
92 
93 <emphasis role="comment">//&#32;Gesture&#32;events</emphasis>
94 <emphasis role="comment">//&#32;NOTE:&#32;MAX_TOUCH_POINTS&#32;fixed&#32;to&#32;4</emphasis>
95 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
96 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;touchAction;
97 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pointCount;
98 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pointerId[4];
99 &#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>[4];
100 }&#32;<link linkend="_struct_gesture_event">GestureEvent</link>;
101 
102 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
103 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prevents&#32;name&#32;mangling&#32;of&#32;functions</emphasis>
104 <emphasis role="preprocessor">#endif</emphasis>
105 
106 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
107 <emphasis role="comment">//&#32;Global&#32;Variables&#32;Definition</emphasis>
108 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
109 <emphasis role="comment">//...</emphasis>
110 
111 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
112 <emphasis role="comment">//&#32;Module&#32;Functions&#32;Declaration</emphasis>
113 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
114 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1a5deba7e45ec5eb1bdb6da834d3a3ee09">ProcessGestureEvent</link>(<link linkend="_struct_gesture_event">GestureEvent</link>&#32;event);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Process&#32;gesture&#32;event&#32;and&#32;translate&#32;it&#32;into&#32;gestures</emphasis>
115 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1a628850a03d5f85e55c0f067788badc24">UpdateGestures</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;gestures&#32;detected&#32;(must&#32;be&#32;called&#32;every&#32;frame)</emphasis>
116 
117 <emphasis role="preprocessor">#if&#32;defined(GESTURES_STANDALONE)</emphasis>
118 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa898903158e991388598c5579afbf8b4">SetGesturesEnabled</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;gestureFlags);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;a&#32;set&#32;of&#32;gestures&#32;using&#32;flags</emphasis>
119 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1ac651be90036f1680d9e5c9ef718dfe1d">IsGestureDetected</link>(<emphasis role="keywordtype">int</emphasis>&#32;gesture);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;a&#32;gesture&#32;have&#32;been&#32;detected</emphasis>
120 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a0f070ca4a33f9e8bcadbe9ea8f1f09d7">GetGestureDetected</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;latest&#32;detected&#32;gesture</emphasis>
121 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2raylib_8h_1a09eaa7a0236828e4e7ff567eaa103c0f">GetTouchPointsCount</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;touch&#32;points&#32;count</emphasis>
122 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a6d1b4db504365dfb4b1e1f345075e7de">GetGestureHoldDuration</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;hold&#32;time&#32;in&#32;milliseconds</emphasis>
123 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8b647fad066d251cbe72cddc612f4ecd">GetGestureDragVector</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;drag&#32;vector</emphasis>
124 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa6d8169205c4f6e8cfbd6f39f98943d2">GetGestureDragAngle</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;drag&#32;angle</emphasis>
125 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a85b0053a8ccc10862b000aa2bc5404c9">GetGesturePinchVector</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;pinch&#32;delta</emphasis>
126 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8215af8efd6dc55081f44d13b99161bf">GetGesturePinchAngle</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;pinch&#32;angle</emphasis>
127 <emphasis role="preprocessor">#endif</emphasis>
128 
129 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
130 }
131 <emphasis role="preprocessor">#endif</emphasis>
132 
133 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;GESTURES_H</emphasis>
134 
135 <emphasis role="comment">/***********************************************************************************</emphasis>
136 <emphasis role="comment">*</emphasis>
137 <emphasis role="comment">*&#32;&#32;&#32;GESTURES&#32;IMPLEMENTATION</emphasis>
138 <emphasis role="comment">*</emphasis>
139 <emphasis role="comment">************************************************************************************/</emphasis>
140 
141 <emphasis role="preprocessor">#if&#32;defined(GESTURES_IMPLEMENTATION)</emphasis>
142 
143 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
144 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Functions&#32;required&#32;to&#32;query&#32;time&#32;on&#32;Windows</emphasis>
145 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;QueryPerformanceCounter(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*lpPerformanceCount);
146 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;QueryPerformanceFrequency(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*lpFrequency);
147 <emphasis role="preprocessor">#elif&#32;defined(__linux__)</emphasis>
148 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;_POSIX_C_SOURCE&#32;&lt;&#32;199309L</emphasis>
149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;_POSIX_C_SOURCE</emphasis>
150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;_POSIX_C_SOURCE&#32;199309L&#32;</emphasis><emphasis role="comment">//&#32;Required&#32;for&#32;CLOCK_MONOTONIC&#32;if&#32;compiled&#32;with&#32;c99&#32;without&#32;gnu&#32;ext.</emphasis>
151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;sys/time.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;timespec</emphasis>
153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;time.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;clock_gettime()</emphasis>
154 
155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;math.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;sqrtf(),&#32;atan2f()</emphasis>
156 <emphasis role="preprocessor">#endif</emphasis>
157 
158 <emphasis role="preprocessor">#if&#32;defined(__APPLE__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;macOS&#32;also&#32;defines&#32;__MACH__</emphasis>
159 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;mach/clock.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;clock_get_time()</emphasis>
160 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;mach/mach.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;mach_timespec_t</emphasis>
161 <emphasis role="preprocessor">#endif</emphasis>
162 
163 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
164 <emphasis role="comment">//&#32;Defines&#32;and&#32;Macros</emphasis>
165 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
166 <emphasis role="preprocessor">#define&#32;FORCE_TO_SWIPE&#32;&#32;&#32;&#32;&#32;&#32;0.0005f&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Measured&#32;in&#32;normalized&#32;screen&#32;units/time</emphasis>
167 <emphasis role="preprocessor">#define&#32;MINIMUM_DRAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.015f&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Measured&#32;in&#32;normalized&#32;screen&#32;units&#32;(0.0f&#32;to&#32;1.0f)</emphasis>
168 <emphasis role="preprocessor">#define&#32;MINIMUM_PINCH&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.005f&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Measured&#32;in&#32;normalized&#32;screen&#32;units&#32;(0.0f&#32;to&#32;1.0f)</emphasis>
169 <emphasis role="preprocessor">#define&#32;TAP_TIMEOUT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;300&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Time&#32;in&#32;milliseconds</emphasis>
170 <emphasis role="preprocessor">#define&#32;PINCH_TIMEOUT&#32;&#32;&#32;&#32;&#32;&#32;&#32;300&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Time&#32;in&#32;milliseconds</emphasis>
171 <emphasis role="preprocessor">#define&#32;DOUBLETAP_RANGE&#32;&#32;&#32;&#32;&#32;0.03f&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Measured&#32;in&#32;normalized&#32;screen&#32;units&#32;(0.0f&#32;to&#32;1.0f)</emphasis>
172 
173 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
174 <emphasis role="comment">//&#32;Types&#32;and&#32;Structures&#32;Definition</emphasis>
175 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
176 
177 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;current;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Current&#32;detected&#32;gesture</emphasis>
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;enabledFlags;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enabled&#32;gestures&#32;flags</emphasis>
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstId;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;id&#32;for&#32;first&#32;touch&#32;point</emphasis>
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pointCount;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;points&#32;counter</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;eventTime;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;stamp&#32;when&#32;an&#32;event&#32;happened</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;upPosition;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;up&#32;position</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;downPositionA;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;touch&#32;down&#32;position</emphasis>
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;downPositionB;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second&#32;touch&#32;down&#32;position</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;downDragPosition;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;drag&#32;position</emphasis>
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;moveDownPositionA;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;touch&#32;down&#32;position&#32;on&#32;move</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;moveDownPositionB;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second&#32;touch&#32;down&#32;position&#32;on&#32;move</emphasis>
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tapCounter;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TAP&#32;counter&#32;(one&#32;tap&#32;implies&#32;TOUCH_DOWN&#32;and&#32;TOUCH_UP&#32;actions)</emphasis>
191 &#32;&#32;&#32;&#32;}&#32;Touch;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;resetRequired;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HOLD&#32;reset&#32;to&#32;get&#32;first&#32;touch&#32;point&#32;again</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeDuration;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HOLD&#32;duration&#32;in&#32;milliseconds</emphasis>
195 &#32;&#32;&#32;&#32;}&#32;Hold;
196 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;vector;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;vector&#32;(between&#32;initial&#32;and&#32;current&#32;position)</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;angle&#32;(relative&#32;to&#32;x-axis)</emphasis>
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_namespacedistance">distance</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;distance&#32;(from&#32;initial&#32;touch&#32;point&#32;to&#32;final)&#32;(normalized&#32;[0..1])</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;intensity;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;intensity,&#32;how&#32;far&#32;why&#32;did&#32;the&#32;DRAG&#32;(pixels&#32;per&#32;frame)</emphasis>
201 &#32;&#32;&#32;&#32;}&#32;Drag;
202 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SWIPE&#32;used&#32;to&#32;define&#32;when&#32;start&#32;measuring&#32;GESTURES.Swipe.timeDuration</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeDuration;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SWIPE&#32;time&#32;to&#32;calculate&#32;drag&#32;intensity</emphasis>
205 &#32;&#32;&#32;&#32;}&#32;Swipe;
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;vector;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PINCH&#32;vector&#32;(between&#32;first&#32;and&#32;second&#32;touch&#32;points)</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PINCH&#32;angle&#32;(relative&#32;to&#32;x-axis)</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_namespacedistance">distance</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PINCH&#32;displacement&#32;distance&#32;(normalized&#32;[0..1])</emphasis>
210 &#32;&#32;&#32;&#32;}&#32;Pinch;
211 }&#32;GesturesData;
212 
213 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
214 <emphasis role="comment">//&#32;Global&#32;Variables&#32;Definition</emphasis>
215 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
216 <emphasis role="keyword">static</emphasis>&#32;GesturesData&#32;GESTURES&#32;=&#32;{
217 &#32;&#32;&#32;&#32;.Touch.firstId&#32;=&#32;-1,
218 &#32;&#32;&#32;&#32;.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>,
219 &#32;&#32;&#32;&#32;.enabledFlags&#32;=&#32;0b0000001111111111&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;All&#32;gestures&#32;enabled&#32;by&#32;default</emphasis>
220 };
221 
222 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
223 <emphasis role="comment">//&#32;Module&#32;specific&#32;Functions&#32;Declaration</emphasis>
224 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
225 <emphasis role="preprocessor">#if&#32;defined(GESTURES_STANDALONE)</emphasis>
226 <emphasis role="comment">//&#32;Some&#32;required&#32;math&#32;functions&#32;provided&#32;by&#32;raymath.h</emphasis>
227 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a45d90af29bab5673f90ac6f51d3c1f06">Vector2Angle</link>(<link linkend="_struct_vector2">Vector2</link>&#32;initialPosition,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;finalPosition);
228 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>);
229 <emphasis role="preprocessor">#endif</emphasis>
230 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;GetCurrentTime(<emphasis role="keywordtype">void</emphasis>);
231 
232 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
233 <emphasis role="comment">//&#32;Module&#32;Functions&#32;Definition</emphasis>
234 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
235 
236 <emphasis role="comment">//&#32;Enable&#32;only&#32;desired&#32;getures&#32;to&#32;be&#32;detected</emphasis>
237 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa898903158e991388598c5579afbf8b4">SetGesturesEnabled</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;gestureFlags)
238 {
239 &#32;&#32;&#32;&#32;GESTURES.enabledFlags&#32;=&#32;gestureFlags;
240 }
241 
242 <emphasis role="comment">//&#32;Check&#32;if&#32;a&#32;gesture&#32;have&#32;been&#32;detected</emphasis>
243 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1ac651be90036f1680d9e5c9ef718dfe1d">IsGestureDetected</link>(<emphasis role="keywordtype">int</emphasis>&#32;gesture)
244 {
245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.enabledFlags&#32;&amp;&#32;GESTURES.current)&#32;==&#32;gesture)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
247 }
248 
249 <emphasis role="comment">//&#32;Process&#32;gesture&#32;event&#32;and&#32;translate&#32;it&#32;into&#32;gestures</emphasis>
250 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1a5deba7e45ec5eb1bdb6da834d3a3ee09">ProcessGestureEvent</link>(<link linkend="_struct_gesture_event">GestureEvent</link>&#32;event)
251 {
252 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;required&#32;variables</emphasis>
253 &#32;&#32;&#32;&#32;GESTURES.Touch.pointCount&#32;=&#32;<emphasis role="keyword">event</emphasis>.pointCount;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;on&#32;UpdateGestures()</emphasis>
254 
255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.Touch.pointCount&#32;&lt;&#32;2)
256 &#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a9b9626b3c6c2fb5d2731f3751a0f42d5">TOUCH_DOWN</link>)
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.tapCounter++;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tap&#32;counter</emphasis>
260 
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_DOUBLE_TAP</emphasis>
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>)&#32;&amp;&amp;&#32;(GESTURES.Touch.tapCounter&#32;&gt;=&#32;2)&#32;&amp;&amp;&#32;((GetCurrentTime()&#32;-&#32;GESTURES.Touch.eventTime)&#32;&lt;&#32;TAP_TIMEOUT)&#32;&amp;&amp;&#32;(<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(GESTURES.Touch.downPositionA,&#32;event.<link linkend="_struct_gesture_event_1a0671722c15eccf2fe2add25aab71b83c">position</link>[0])&#32;&lt;&#32;DOUBLETAP_RANGE))
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a8b5d655a878adcc18c6ef37367c75943">GESTURE_DOUBLETAP</link>;
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.tapCounter&#32;=&#32;0;
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_TAP</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.tapCounter&#32;=&#32;1;
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12aa6ea36cd5cdb1a323cc2428937fb1692">GESTURE_TAP</link>;
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
272 
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downDragPosition&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
275 
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.upPosition&#32;=&#32;GESTURES.Touch.downPositionA;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.eventTime&#32;=&#32;GetCurrentTime();
278 
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.firstId&#32;=&#32;<emphasis role="keyword">event</emphasis>.pointerId[0];
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.vector&#32;=&#32;(<link linkend="_struct_vector2">Vector2</link>){&#32;0.0f,&#32;0.0f&#32;};
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a90884c2f9baa25f5107bfa334297fce3">TOUCH_UP</link>)
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>)&#32;GESTURES.Touch.upPosition&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
286 
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;GESTURES.Drag.intensity&#32;dependend&#32;on&#32;the&#32;resolution&#32;of&#32;the&#32;screen</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.distance&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.upPosition);
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.intensity&#32;=&#32;GESTURES.Drag.distance/(float)((GetCurrentTime()&#32;-&#32;GESTURES.Swipe.timeDuration));
290 
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Swipe.start&#32;=&#32;<emphasis role="keyword">false</emphasis>;
292 
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_SWIPE</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.intensity&#32;&gt;&#32;FORCE_TO_SWIPE)&#32;&amp;&amp;&#32;(GESTURES.Touch.firstId&#32;==&#32;<emphasis role="keyword">event</emphasis>.pointerId[0]))
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;should&#32;be&#32;inverted&#32;in&#32;Y</emphasis>
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.angle&#32;=&#32;360.0f&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a45d90af29bab5673f90ac6f51d3c1f06">Vector2Angle</link>(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.upPosition);
298 
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&lt;&#32;30)&#32;||&#32;(GESTURES.Drag.angle&#32;&gt;&#32;330))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a337cfdf346943f1ba19c3b668234860e">GESTURE_SWIPE_RIGHT</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&gt;&#32;30)&#32;&amp;&amp;&#32;(GESTURES.Drag.angle&#32;&lt;&#32;120))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a64bda7d6d0dc201f3f195297c0c45d70">GESTURE_SWIPE_UP</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Up</emphasis>
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&gt;&#32;120)&#32;&amp;&amp;&#32;(GESTURES.Drag.angle&#32;&lt;&#32;210))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a6ce54903fd831fdc6364471eadaacb9c">GESTURE_SWIPE_LEFT</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left</emphasis>
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&gt;&#32;210)&#32;&amp;&amp;&#32;(GESTURES.Drag.angle&#32;&lt;&#32;300))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12accf621e170b4d2e51966bd72ec053fc2">GESTURE_SWIPE_DOWN</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;Down</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.distance&#32;=&#32;0.0f;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.intensity&#32;=&#32;0.0f;
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.angle&#32;=&#32;0.0f;
310 
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
313 
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downDragPosition&#32;=&#32;(<link linkend="_struct_vector2">Vector2</link>){&#32;0.0f,&#32;0.0f&#32;};
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.pointCount&#32;=&#32;0;
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a744fb6f69db9d3e132fe29477c6b8e93">TOUCH_MOVE</link>)
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>)&#32;GESTURES.Touch.eventTime&#32;=&#32;GetCurrentTime();
320 
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!GESTURES.Swipe.start)
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Swipe.timeDuration&#32;=&#32;GetCurrentTime();
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Swipe.start&#32;=&#32;<emphasis role="keyword">true</emphasis>;
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.moveDownPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
328 
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>)
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.Hold.resetRequired)&#32;GESTURES.Touch.downPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
332 
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.resetRequired&#32;=&#32;<emphasis role="keyword">false</emphasis>;
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_DRAG</emphasis>
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.moveDownPositionA)&#32;&gt;=&#32;MINIMUM_DRAG)
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.eventTime&#32;=&#32;GetCurrentTime();
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>;
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.vector.x&#32;=&#32;GESTURES.Touch.moveDownPositionA.x&#32;-&#32;GESTURES.Touch.downDragPosition.x;
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.vector.y&#32;=&#32;GESTURES.Touch.moveDownPositionA.y&#32;-&#32;GESTURES.Touch.downDragPosition.y;
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
346 &#32;&#32;&#32;&#32;}
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Two&#32;touch&#32;points</emphasis>
348 &#32;&#32;&#32;&#32;{
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a9b9626b3c6c2fb5d2731f3751a0f42d5">TOUCH_DOWN</link>)
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionB&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[1];
353 
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//GESTURES.Pinch.distance&#32;=&#32;Vector2Distance(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.downPositionB);</emphasis>
355 
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.x&#32;=&#32;GESTURES.Touch.downPositionB.x&#32;-&#32;GESTURES.Touch.downPositionA.x;
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.y&#32;=&#32;GESTURES.Touch.downPositionB.y&#32;-&#32;GESTURES.Touch.downPositionA.y;
358 
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;GetCurrentTime();
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a744fb6f69db9d3e132fe29477c6b8e93">TOUCH_MOVE</link>)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.distance&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(GESTURES.Touch.moveDownPositionA,&#32;GESTURES.Touch.moveDownPositionB);
365 
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionA&#32;=&#32;GESTURES.Touch.moveDownPositionA;
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionB&#32;=&#32;GESTURES.Touch.moveDownPositionB;
368 
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.moveDownPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.moveDownPositionB&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[1];
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.x&#32;=&#32;GESTURES.Touch.moveDownPositionB.x&#32;-&#32;GESTURES.Touch.moveDownPositionA.x;
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.y&#32;=&#32;GESTURES.Touch.moveDownPositionB.y&#32;-&#32;GESTURES.Touch.moveDownPositionA.y;
374 
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.moveDownPositionA)&#32;&gt;=&#32;MINIMUM_PINCH)&#32;||&#32;(<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(GESTURES.Touch.downPositionB,&#32;GESTURES.Touch.moveDownPositionB)&#32;&gt;=&#32;MINIMUM_PINCH))
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(GESTURES.Touch.moveDownPositionA,&#32;GESTURES.Touch.moveDownPositionB)&#32;-&#32;GESTURES.Pinch.distance)&#32;&lt;&#32;0)&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a4c029381b3757f0143cbcc687449bad6">GESTURE_PINCH_IN</link>;
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12adb71607a217fbb056bf654af46bc9384">GESTURE_PINCH_OUT</link>;
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;GetCurrentTime();
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
385 
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;should&#32;be&#32;inverted&#32;in&#32;Y</emphasis>
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.angle&#32;=&#32;360.0f&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a45d90af29bab5673f90ac6f51d3c1f06">Vector2Angle</link>(GESTURES.Touch.moveDownPositionA,&#32;GESTURES.Touch.moveDownPositionB);
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a90884c2f9baa25f5107bfa334297fce3">TOUCH_UP</link>)
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.distance&#32;=&#32;0.0f;
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.angle&#32;=&#32;0.0f;
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector&#32;=&#32;(<link linkend="_struct_vector2">Vector2</link>){&#32;0.0f,&#32;0.0f&#32;};
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.pointCount&#32;=&#32;0;
395 
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
398 &#32;&#32;&#32;&#32;}
399 }
400 
401 <emphasis role="comment">//&#32;Update&#32;gestures&#32;detected&#32;(must&#32;be&#32;called&#32;every&#32;frame)</emphasis>
402 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1a628850a03d5f85e55c0f067788badc24">UpdateGestures</link>(<emphasis role="keywordtype">void</emphasis>)
403 {
404 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Gestures&#32;are&#32;processed&#32;through&#32;system&#32;callbacks&#32;on&#32;touch&#32;events</emphasis>
405 
406 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_HOLD</emphasis>
407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12aa6ea36cd5cdb1a323cc2428937fb1692">GESTURE_TAP</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a8b5d655a878adcc18c6ef37367c75943">GESTURE_DOUBLETAP</link>))&#32;&amp;&amp;&#32;(GESTURES.Touch.pointCount&#32;&lt;&#32;2))
408 &#32;&#32;&#32;&#32;{
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;GetCurrentTime();
411 &#32;&#32;&#32;&#32;}
412 
413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((GetCurrentTime()&#32;-&#32;GESTURES.Touch.eventTime)&#32;&gt;&#32;TAP_TIMEOUT)&#32;&amp;&amp;&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>)&#32;&amp;&amp;&#32;(GESTURES.Touch.pointCount&#32;&lt;&#32;2))
414 &#32;&#32;&#32;&#32;{
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;GetCurrentTime();
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.resetRequired&#32;=&#32;<emphasis role="keyword">true</emphasis>;
418 &#32;&#32;&#32;&#32;}
419 
420 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_NONE</emphasis>
421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a337cfdf346943f1ba19c3b668234860e">GESTURE_SWIPE_RIGHT</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a64bda7d6d0dc201f3f195297c0c45d70">GESTURE_SWIPE_UP</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a6ce54903fd831fdc6364471eadaacb9c">GESTURE_SWIPE_LEFT</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12accf621e170b4d2e51966bd72ec053fc2">GESTURE_SWIPE_DOWN</link>))
422 &#32;&#32;&#32;&#32;{
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
424 &#32;&#32;&#32;&#32;}
425 }
426 
427 <emphasis role="comment">//&#32;Get&#32;number&#32;of&#32;touch&#32;points</emphasis>
428 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2raylib_8h_1a09eaa7a0236828e4e7ff567eaa103c0f">GetTouchPointsCount</link>(<emphasis role="keywordtype">void</emphasis>)
429 {
430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;point&#32;count&#32;is&#32;calculated&#32;when&#32;ProcessGestureEvent(GestureEvent&#32;event)&#32;is&#32;called</emphasis>
431 
432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Touch.pointCount;
433 }
434 
435 <emphasis role="comment">//&#32;Get&#32;latest&#32;detected&#32;gesture</emphasis>
436 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a0f070ca4a33f9e8bcadbe9ea8f1f09d7">GetGestureDetected</link>(<emphasis role="keywordtype">void</emphasis>)
437 {
438 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;current&#32;gesture&#32;only&#32;if&#32;enabled</emphasis>
439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(GESTURES.enabledFlags&#32;&amp;&#32;GESTURES.current);
440 }
441 
442 <emphasis role="comment">//&#32;Hold&#32;time&#32;measured&#32;in&#32;ms</emphasis>
443 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a6d1b4db504365dfb4b1e1f345075e7de">GetGestureHoldDuration</link>(<emphasis role="keywordtype">void</emphasis>)
444 {
445 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;time&#32;is&#32;calculated&#32;on&#32;current&#32;gesture&#32;HOLD</emphasis>
446 
447 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structtime">time</link>&#32;=&#32;0.0;
448 
449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>)&#32;<link linkend="_structtime">time</link>&#32;=&#32;GetCurrentTime()&#32;-&#32;GESTURES.Hold.timeDuration;
450 
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>)<link linkend="_structtime">time</link>;
452 }
453 
454 <emphasis role="comment">//&#32;Get&#32;drag&#32;vector&#32;(between&#32;initial&#32;touch&#32;point&#32;to&#32;current)</emphasis>
455 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8b647fad066d251cbe72cddc612f4ecd">GetGestureDragVector</link>(<emphasis role="keywordtype">void</emphasis>)
456 {
457 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;drag&#32;vector&#32;is&#32;calculated&#32;on&#32;one&#32;touch&#32;points&#32;TOUCH_MOVE</emphasis>
458 
459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Drag.vector;
460 }
461 
462 <emphasis role="comment">//&#32;Get&#32;drag&#32;angle</emphasis>
463 <emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;in&#32;degrees,&#32;horizontal-right&#32;is&#32;0,&#32;counterclock-wise</emphasis>
464 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa6d8169205c4f6e8cfbd6f39f98943d2">GetGestureDragAngle</link>(<emphasis role="keywordtype">void</emphasis>)
465 {
466 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;drag&#32;angle&#32;is&#32;calculated&#32;on&#32;one&#32;touch&#32;points&#32;TOUCH_UP</emphasis>
467 
468 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Drag.angle;
469 }
470 
471 <emphasis role="comment">//&#32;Get&#32;distance&#32;between&#32;two&#32;pinch&#32;points</emphasis>
472 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a85b0053a8ccc10862b000aa2bc5404c9">GetGesturePinchVector</link>(<emphasis role="keywordtype">void</emphasis>)
473 {
474 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;The&#32;position&#32;values&#32;used&#32;for&#32;GESTURES.Pinch.distance&#32;are&#32;not&#32;modified&#32;like&#32;the&#32;position&#32;values&#32;of&#32;[core.c]--&gt;GetTouchPosition(int&#32;index)</emphasis>
475 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;pinch&#32;distance&#32;is&#32;calculated&#32;on&#32;two&#32;touch&#32;points&#32;TOUCH_MOVE</emphasis>
476 
477 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Pinch.vector;
478 }
479 
480 <emphasis role="comment">//&#32;Get&#32;angle&#32;beween&#32;two&#32;pinch&#32;points</emphasis>
481 <emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;in&#32;degrees,&#32;horizontal-right&#32;is&#32;0,&#32;counterclock-wise</emphasis>
482 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8215af8efd6dc55081f44d13b99161bf">GetGesturePinchAngle</link>(<emphasis role="keywordtype">void</emphasis>)
483 {
484 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;pinch&#32;angle&#32;is&#32;calculated&#32;on&#32;two&#32;touch&#32;points&#32;TOUCH_MOVE</emphasis>
485 
486 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Pinch.angle;
487 }
488 
489 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
490 <emphasis role="comment">//&#32;Module&#32;specific&#32;Functions&#32;Definition</emphasis>
491 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
492 <emphasis role="preprocessor">#if&#32;defined(GESTURES_STANDALONE)</emphasis>
493 <emphasis role="comment">//&#32;Returns&#32;angle&#32;from&#32;two-points&#32;vector&#32;with&#32;X-axis</emphasis>
494 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a45d90af29bab5673f90ac6f51d3c1f06">Vector2Angle</link>(<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>)
495 {
496 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>&#32;=&#32;atan2f(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.y&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.y,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.x&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.x)*(180.0f/<link linkend="__classes_2lib_2raylib_2src_2gestures_8h_1a598a3330b3c21701223ee0ca14316eca">PI</link>);
497 
498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(angle&#32;&lt;&#32;0)&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>&#32;+=&#32;360.0f;
499 
500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>;
501 }
502 
503 <emphasis role="comment">//&#32;Calculate&#32;distance&#32;between&#32;two&#32;Vector2</emphasis>
504 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2raymath_8h_1a2e16f8f7553aa565422cf9aff49ab852">Vector2Distance</link>(<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>)
505 {
506 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
507 
508 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dx&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.x&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.x;
509 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dy&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.y&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.y;
510 
511 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(dx*dx&#32;+&#32;dy*dy);
512 
513 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
514 }
515 <emphasis role="preprocessor">#endif</emphasis>
516 
517 <emphasis role="comment">//&#32;Time&#32;measure&#32;returned&#32;are&#32;milliseconds</emphasis>
518 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;GetCurrentTime(<emphasis role="keywordtype">void</emphasis>)
519 {
520 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structtime">time</link>&#32;=&#32;0;
521 
522 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
523 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;clockFrequency,&#32;currentTime;
524 
525 &#32;&#32;&#32;&#32;QueryPerformanceFrequency(&amp;clockFrequency);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BE&#32;CAREFUL:&#32;Costly&#32;operation!</emphasis>
526 &#32;&#32;&#32;&#32;QueryPerformanceCounter(&amp;currentTime);
527 
528 &#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;=&#32;(double)currentTime/clockFrequency*1000.0f;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;miliseconds</emphasis>
529 <emphasis role="preprocessor">#endif</emphasis>
530 
531 <emphasis role="preprocessor">#if&#32;defined(__linux__)</emphasis>
532 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Only&#32;for&#32;Linux-based&#32;systems</emphasis>
533 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timespec&#32;now;
534 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread__time_8h_1a907d36e3ac946c73f25cc3d4cbf44c7a">clock_gettime</link>(<link linkend="__classes_2lib_2pthread__time_8h_1a6fb83f5e91e704391ff796553d5e0f46">CLOCK_MONOTONIC</link>,&#32;&amp;now);
535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nowTime&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;int)now.tv_sec*1000000000LLU&#32;+&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)now.tv_nsec;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;nanoseconds</emphasis>
536 
537 &#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;=&#32;((double)nowTime/1000000.0);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;miliseconds</emphasis>
538 <emphasis role="preprocessor">#endif</emphasis>
539 
540 <emphasis role="preprocessor">#if&#32;defined(__APPLE__)</emphasis>
541 &#32;&#32;&#32;&#32;<emphasis role="comment">//#define&#32;CLOCK_REALTIME&#32;&#32;CALENDAR_CLOCK&#32;&#32;&#32;&#32;//&#32;returns&#32;UTC&#32;time&#32;since&#32;1970-01-01</emphasis>
542 &#32;&#32;&#32;&#32;<emphasis role="comment">//#define&#32;CLOCK_MONOTONIC&#32;SYSTEM_CLOCK&#32;&#32;&#32;&#32;&#32;&#32;//&#32;returns&#32;the&#32;time&#32;since&#32;boot&#32;time</emphasis>
543 
544 &#32;&#32;&#32;&#32;clock_serv_t&#32;cclock;
545 &#32;&#32;&#32;&#32;mach_timespec_t&#32;now;
546 &#32;&#32;&#32;&#32;host_get_clock_service(mach_host_self(),&#32;SYSTEM_CLOCK,&#32;&amp;cclock);
547 
548 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;OS&#32;X&#32;does&#32;not&#32;have&#32;clock_gettime(),&#32;using&#32;clock_get_time()</emphasis>
549 &#32;&#32;&#32;&#32;clock_get_time(cclock,&#32;&amp;now);
550 &#32;&#32;&#32;&#32;mach_port_deallocate(mach_task_self(),&#32;cclock);
551 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nowTime&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;int)now.tv_sec*1000000000LLU&#32;+&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)now.tv_nsec;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;nanoseconds</emphasis>
552 
553 &#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;=&#32;((double)nowTime/1000000.0);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;miliseconds</emphasis>
554 <emphasis role="preprocessor">#endif</emphasis>
555 
556 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structtime">time</link>;
557 }
558 
559 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;GESTURES_IMPLEMENTATION</emphasis>
</programlisting></section>
