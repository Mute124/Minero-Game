<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_unicode_8inl_source" xml:lang="en-US">
<title>unicode.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/unicode.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="comment">//#&#32;{{</emphasis>
8 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
9 <emphasis role="preprocessor">#if&#32;!TOML_IMPLEMENTATION</emphasis>
10 <emphasis role="preprocessor">#error&#32;This&#32;is&#32;an&#32;implementation-only&#32;header.</emphasis>
11 <emphasis role="preprocessor">#endif</emphasis>
12 <emphasis role="comment">//#&#32;}}</emphasis>
13 
14 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_unicode_8h">unicode.h</link>&quot;</emphasis>
15 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2simd_8h">simd.h</link>&quot;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
17 
18 <link linkend="_unicode_8inl_1af62a64490c99e43956a0f41548262369">TOML_IMPL_NAMESPACE_START</link>
19 {
20 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a930d63cd08b8db4f5d7be9f8ef861c17">TOML_PURE_GETTER</link>
21 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
22 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_toml_8hpp_1a59540c22f4b7e10864095f21c67e0c69">is_ascii</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
23 &#32;&#32;&#32;&#32;{
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>&#32;=&#32;str&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
25 
26 <emphasis role="preprocessor">#if&#32;TOML_HAS_SSE2&#32;&amp;&amp;&#32;(128&#32;%&#32;CHAR_BIT)&#32;==&#32;0</emphasis>
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;chars_per_vector&#32;=&#32;128u&#32;/&#32;CHAR_BIT;
29 
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;simdable&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;-&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;%&#32;chars_per_vector))
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;<link linkend="_namespacemask">mask</link>&#32;=&#32;_mm_setzero_si128();
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<emphasis role="keyword">const</emphasis>&#32;e&#32;=&#32;str&#32;+&#32;simdable;&#32;str&#32;&lt;&#32;e;&#32;str&#32;+=&#32;chars_per_vector)
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;current_bytes&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i*<emphasis role="keyword">&gt;</emphasis>(str));
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacemask">mask</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_mm_or_si128(<link linkend="_namespacemask">mask</link>,&#32;current_bytes);
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;has_error&#32;=&#32;_mm_cmpgt_epi8(_mm_setzero_si128(),&#32;<link linkend="_namespacemask">mask</link>);
39 
40 <emphasis role="preprocessor">#if&#32;TOML_HAS_SSE4_1</emphasis>
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_mm_testz_si128(has_error,&#32;has_error))
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
43 <emphasis role="preprocessor">#else</emphasis>
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_mm_movemask_epi8(_mm_cmpeq_epi8(has_error,&#32;_mm_setzero_si128()))&#32;!=&#32;0xFFFF)
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
46 <emphasis role="preprocessor">#endif</emphasis>
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
49 <emphasis role="preprocessor">#endif</emphasis>
50 
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;str&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>;&#32;str++)
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(*str)&#32;&gt;&#32;127u)
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
54 
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
56 &#32;&#32;&#32;&#32;}
57 }
58 <link linkend="_preprocessor_8h_1abec69dd25f1e4c1dfbdd288441864939">TOML_IMPL_NAMESPACE_END</link>;
59 
60 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
</programlisting></section>
