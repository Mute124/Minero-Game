<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2chrono_8h_source" xml:lang="en-US">
<title>chrono.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/chrono.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;chrono::duration&#32;and&#32;chrono::time_point&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2008-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_CHRONO_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_CHRONO_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;ratio&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;ctime&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/parse_numbers.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;literals&#32;support.</emphasis>
42 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
43 <emphasis role="preprocessor">#&#32;include&#32;&lt;concepts&gt;</emphasis>
44 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
45 <emphasis role="preprocessor">#endif</emphasis>
46 
47 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
48 {
49 _GLIBCXX_BEGIN_NAMESPACE_VERSION
50 
51 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
52 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>filesystem&#32;{&#32;<emphasis role="keyword">struct&#32;</emphasis>__file_clock;&#32;};
53 <emphasis role="preprocessor">#endif</emphasis>
54 
55 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>chrono
56 &#32;&#32;{
59 
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&#32;=&#32;ratio&lt;1&gt;&gt;
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>duration;
63 
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock::duration&gt;
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>time_point;
68 &#32;&#32;}
69 
72 
73 &#32;&#32;<emphasis role="comment">//&#32;20.11.4.3&#32;specialization&#32;of&#32;common_type&#32;(for&#32;duration,&#32;sfinae-friendly)</emphasis>
74 
76 
77 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__duration_common_type
79 &#32;&#32;&#32;&#32;{&#32;};
80 
81 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__duration_common_type&lt;_CT,&#32;_Period1,&#32;_Period2,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_CT::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&gt;&gt;
84 &#32;&#32;&#32;&#32;{
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gcd_num&#32;=&#32;__static_gcd&lt;_Period1::num,&#32;_Period2::num&gt;;
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gcd_den&#32;=&#32;__static_gcd&lt;_Period1::den,&#32;_Period2::den&gt;;
88 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__cr&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_CT::type;
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__r&#32;=&#32;ratio&lt;__gcd_num::value,
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_Period1::den&#32;/&#32;__gcd_den::value)&#32;*&#32;_Period2::den&gt;;
91 
92 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;chrono::duration&lt;__cr,&#32;typename&#32;__r::type&gt;;
94 &#32;&#32;&#32;&#32;};
95 
97 
100 
102 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>common_type&lt;chrono::duration&lt;_Rep1,&#32;_Period1&gt;,
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::duration&lt;_Rep2,&#32;_Period2&gt;&gt;
105 &#32;&#32;&#32;&#32;:&#32;__duration_common_type&lt;common_type&lt;_Rep1,&#32;_Rep2&gt;,
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Period1::type,
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Period2::type&gt;
108 &#32;&#32;&#32;&#32;{&#32;};
109 
111 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>common_type&lt;chrono::duration&lt;_Rep,&#32;_Period&gt;,
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::duration&lt;_Rep,&#32;_Period&gt;&gt;
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;chrono::duration&lt;typename&#32;common_type&lt;_Rep&gt;::type,
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period::type&gt;;
117 &#32;&#32;&#32;&#32;};
118 
120 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>common_type&lt;chrono::duration&lt;_Rep,&#32;_Period&gt;&gt;
122 &#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;chrono::duration&lt;typename&#32;common_type&lt;_Rep&gt;::type,
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period::type&gt;;
125 &#32;&#32;&#32;&#32;};
127 
128 &#32;&#32;<emphasis role="comment">//&#32;20.11.4.3&#32;specialization&#32;of&#32;common_type&#32;(for&#32;time_point,&#32;sfinae-friendly)</emphasis>
129 
131 
132 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
133 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__timepoint_common_type
134 &#32;&#32;&#32;&#32;{&#32;};
135 
136 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock&gt;
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__timepoint_common_type&lt;_CT,&#32;_Clock,&#32;__void_t&lt;typename&#32;_CT::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&gt;&gt;
138 &#32;&#32;&#32;&#32;{
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;chrono::time_point&lt;_Clock,&#32;typename&#32;_CT::type&gt;;
140 &#32;&#32;&#32;&#32;};
141 
143 
146 
148 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration2&gt;
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>common_type&lt;chrono::time_point&lt;_Clock,&#32;_Duration1&gt;,
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::time_point&lt;_Clock,&#32;_Duration2&gt;&gt;
151 &#32;&#32;&#32;&#32;:&#32;__timepoint_common_type&lt;common_type&lt;_Duration1,&#32;_Duration2&gt;,&#32;_Clock&gt;
152 &#32;&#32;&#32;&#32;{&#32;};
153 
155 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>common_type&lt;chrono::time_point&lt;_Clock,&#32;_Duration&gt;,
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::time_point&lt;_Clock,&#32;_Duration&gt;&gt;
158 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;chrono::time_point&lt;_Clock,&#32;_Duration&gt;;&#32;};
159 
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>common_type&lt;chrono::time_point&lt;_Clock,&#32;_Duration&gt;&gt;
163 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;chrono::time_point&lt;_Clock,&#32;_Duration&gt;;&#32;};
165 
167 
168 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>chrono
169 &#32;&#32;{
172 
174 
175 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Primary&#32;template&#32;for&#32;duration_cast&#32;impl.</emphasis>
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CF,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CR,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_NumIsOne&#32;=&#32;<emphasis role="keyword">false</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_DenIsOne&#32;=&#32;<emphasis role="keyword">false</emphasis>&gt;
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__duration_cast_impl
179 &#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ToDur
182 &#32;&#32;&#32;&#32;&#32;&#32;__cast(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
183 &#32;&#32;&#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToDur::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_rep;
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_ToDur(<emphasis role="keyword">static_cast&lt;</emphasis>__to_rep<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">static_cast&lt;</emphasis>_CR<emphasis role="keyword">&gt;</emphasis>(__d.count())
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_CR<emphasis role="keyword">&gt;</emphasis>(_CF::num)
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_CR<emphasis role="keyword">&gt;</emphasis>(_CF::den)));
188 &#32;&#32;&#32;&#32;&#32;&#32;}
189 &#32;&#32;&#32;&#32;&#32;&#32;};
190 
191 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CF,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CR&gt;
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__duration_cast_impl&lt;_ToDur,&#32;_CF,&#32;_CR,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
193 &#32;&#32;&#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ToDur
196 &#32;&#32;&#32;&#32;&#32;&#32;__cast(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
197 &#32;&#32;&#32;&#32;&#32;&#32;{
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToDur::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_rep;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_ToDur(<emphasis role="keyword">static_cast&lt;</emphasis>__to_rep<emphasis role="keyword">&gt;</emphasis>(__d.count()));
200 &#32;&#32;&#32;&#32;&#32;&#32;}
201 &#32;&#32;&#32;&#32;&#32;&#32;};
202 
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CF,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CR&gt;
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__duration_cast_impl&lt;_ToDur,&#32;_CF,&#32;_CR,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
205 &#32;&#32;&#32;&#32;&#32;&#32;{
206 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ToDur
208 &#32;&#32;&#32;&#32;&#32;&#32;__cast(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
209 &#32;&#32;&#32;&#32;&#32;&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToDur::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_rep;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_ToDur(<emphasis role="keyword">static_cast&lt;</emphasis>__to_rep<emphasis role="keyword">&gt;</emphasis>(
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_CR<emphasis role="keyword">&gt;</emphasis>(__d.count())&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_CR<emphasis role="keyword">&gt;</emphasis>(_CF::den)));
213 &#32;&#32;&#32;&#32;&#32;&#32;}
214 &#32;&#32;&#32;&#32;&#32;&#32;};
215 
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CF,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CR&gt;
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__duration_cast_impl&lt;_ToDur,&#32;_CF,&#32;_CR,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
218 &#32;&#32;&#32;&#32;&#32;&#32;{
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ToDur
221 &#32;&#32;&#32;&#32;&#32;&#32;__cast(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
222 &#32;&#32;&#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToDur::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_rep;
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_ToDur(<emphasis role="keyword">static_cast&lt;</emphasis>__to_rep<emphasis role="keyword">&gt;</emphasis>(
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_CR<emphasis role="keyword">&gt;</emphasis>(__d.count())&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_CR<emphasis role="keyword">&gt;</emphasis>(_CF::num)));
226 &#32;&#32;&#32;&#32;&#32;&#32;}
227 &#32;&#32;&#32;&#32;&#32;&#32;};
228 
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_duration
231 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::false_type
232 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
233 
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
235 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_duration&lt;duration&lt;_Rep,&#32;_Period&gt;&gt;
236 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::true_type
237 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
238 
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__enable_if_is_duration
241 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__is_duration&lt;_Tp&gt;::value,&#32;_Tp&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
242 
243 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__disable_if_is_duration
245 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;!__is_duration&lt;_Tp&gt;::value,&#32;_Tp&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
246 
248 
250 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__enable_if_is_duration&lt;_ToDur&gt;
252 &#32;&#32;&#32;&#32;&#32;&#32;duration_cast(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
253 &#32;&#32;&#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToDur::period&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_period;
255 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ToDur::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_rep;
256 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;ratio_divide&lt;_Period,&#32;__to_period&gt;&#32;&#32;&#32;&#32;&#32;&#32;__cf;
257 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__to_rep,&#32;_Rep,&#32;intmax_t&gt;::type&#32;__cr;
258 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;&#32;__duration_cast_impl&lt;_ToDur,&#32;__cf,&#32;__cr,
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__cf::num&#32;==&#32;1,&#32;__cf::den&#32;==&#32;1&gt;&#32;__dc;
260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__dc::__cast(__d);
261 &#32;&#32;&#32;&#32;&#32;&#32;}
262 
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep&gt;
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>treat_as_floating_point
266 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_forward__declarations_8h_1a400919fd056905f7b68893873e1f96de">is_floating_point</link>&lt;_Rep&gt;
267 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
268 
269 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep&gt;
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;treat_as_floating_point_v&#32;=
272 &#32;&#32;&#32;&#32;treat_as_floating_point&lt;_Rep&gt;::value;
273 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
274 
275 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
276 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_clock;
278 
279 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_clock_v&#32;=&#32;is_clock&lt;_Tp&gt;::value;
281 
282 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
283 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_clock&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>
285 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
286 
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::rep;
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::period;
291 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::duration;
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::time_point::clock;
293 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::time_point::duration;
294 &#32;&#32;&#32;&#32;{&#32;&amp;_Tp::is_steady&#32;}&#32;-&gt;&#32;same_as&lt;const&#32;bool*&gt;;
295 &#32;&#32;&#32;&#32;{&#32;_Tp::now()&#32;}&#32;-&gt;&#32;same_as&lt;typename&#32;_Tp::time_point&gt;;
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;same_as&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp::duration,
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&lt;typename&#32;_Tp::rep,&#32;typename&#32;_Tp::period&gt;&gt;;
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;same_as&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp::time_point::duration,
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::duration&gt;;
300 &#32;&#32;&#32;&#32;&#32;&#32;}
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_clock&lt;_Tp&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
302 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
303 <emphasis role="preprocessor">#else</emphasis>
304 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_clock_impl&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>
306 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
307 
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_clock_impl&lt;_Tp,
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5">void_t</link>&lt;typename&#32;_Tp::rep,&#32;typename&#32;_Tp::period,
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Tp::duration,
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Tp::time_point::duration,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decltype(_Tp::is_steady),
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decltype(_Tp::now())&gt;&gt;
315 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__and_&lt;is_same&lt;typename&#32;_Tp::duration,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&lt;typename&#32;_Tp::rep,&#32;typename&#32;_Tp::period&gt;&gt;,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;typename&#32;_Tp::time_point::duration,
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Tp::duration&gt;,
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;decltype(&amp;_Tp::is_steady),&#32;const&#32;bool*&gt;,
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_same&lt;decltype(_Tp::now()),&#32;typename&#32;_Tp::time_point&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
321 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
322 
323 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_clock&#32;:&#32;__is_clock_impl&lt;_Tp&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
325 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
326 <emphasis role="preprocessor">#endif</emphasis>
327 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
328 
329 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
330 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_chrono&#32;201611L</emphasis>
331 
332 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__enable_if_is_duration&lt;_ToDur&gt;
334 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
335 &#32;&#32;&#32;&#32;&#32;&#32;{
336 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__to&#32;=&#32;chrono::duration_cast&lt;_ToDur&gt;(__d);
337 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__to&#32;&gt;&#32;__d)
338 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to&#32;-&#32;_ToDur{1};
339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to;
340 &#32;&#32;&#32;&#32;&#32;&#32;}
341 
342 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__enable_if_is_duration&lt;_ToDur&gt;
344 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
345 &#32;&#32;&#32;&#32;&#32;&#32;{
346 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__to&#32;=&#32;chrono::duration_cast&lt;_ToDur&gt;(__d);
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__to&#32;&lt;&#32;__d)
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to&#32;+&#32;_ToDur{1};
349 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to;
350 &#32;&#32;&#32;&#32;&#32;&#32;}
351 
352 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
354 &#32;&#32;&#32;&#32;__and_&lt;__is_duration&lt;_ToDur&gt;,
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;treat_as_floating_point&lt;typename&#32;_ToDur::rep&gt;&gt;&gt;<link linkend="_classvalue">::value</link>,
356 &#32;&#32;&#32;&#32;_ToDur&gt;
357 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6ea10f4260b54a61665ead26cb995ba3">round</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
358 &#32;&#32;&#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;_ToDur&#32;__t0&#32;=&#32;chrono::floor&lt;_ToDur&gt;(__d);
360 &#32;&#32;&#32;&#32;_ToDur&#32;__t1&#32;=&#32;__t0&#32;+&#32;_ToDur{1};
361 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__diff0&#32;=&#32;__d&#32;-&#32;__t0;
362 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__diff1&#32;=&#32;__t1&#32;-&#32;__d;
363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__diff0&#32;==&#32;__diff1)
364 &#32;&#32;&#32;&#32;{
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__t0.count()&#32;&amp;&#32;1)
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t1;
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t0;
368 &#32;&#32;&#32;&#32;}
369 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__diff0&#32;&lt;&#32;__diff1)
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t0;
371 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t1;
372 &#32;&#32;&#32;&#32;&#32;&#32;}
373 
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
376 &#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;numeric_limits&lt;_Rep&gt;::is_signed,&#32;duration&lt;_Rep,&#32;_Period&gt;&gt;
377 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1ga439e60a72eadecfeda2df5449c613a64">abs</link>(duration&lt;_Rep,&#32;_Period&gt;&#32;__d)
378 &#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d&#32;&gt;=&#32;__d.zero())
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d;
381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-__d;
382 &#32;&#32;&#32;&#32;&#32;&#32;}
383 
384 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;chrono::ceil&lt;D&gt;&#32;also&#32;usable&#32;as&#32;chrono::__detail::ceil&lt;D&gt;.</emphasis>
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis>chrono::ceil;&#32;}
386 
387 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;!&#32;C++17</emphasis>
388 
389 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;want&#32;to&#32;use&#32;ceil&#32;even&#32;when&#32;compiling&#32;for&#32;earlier&#32;standards&#32;versions.</emphasis>
390 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++11&#32;only&#32;allows&#32;a&#32;single&#32;statement&#32;in&#32;a&#32;constexpr&#32;function,&#32;so&#32;we</emphasis>
391 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;move&#32;the&#32;comparison&#32;into&#32;a&#32;separate&#32;function,&#32;__ceil_impl.</emphasis>
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail
393 &#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
395 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
396 &#32;&#32;&#32;&#32;__ceil_impl(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t,&#32;<emphasis role="keyword">const</emphasis>&#32;_Up&amp;&#32;__u)
397 &#32;&#32;&#32;&#32;{
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__t&#32;&lt;&#32;__u)&#32;?&#32;(__t&#32;+&#32;_Tp{1})&#32;:&#32;__t;
399 &#32;&#32;&#32;&#32;}
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++11-friendly&#32;version&#32;of&#32;std::chrono::ceil&lt;D&gt;&#32;for&#32;internal&#32;use.</emphasis>
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
403 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_ToDur
404 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep,&#32;_Period&gt;&amp;&#32;__d)
405 &#32;&#32;&#32;&#32;{
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__ceil_impl(chrono::duration_cast&lt;_ToDur&gt;(__d),&#32;__d);
407 &#32;&#32;&#32;&#32;}
408 &#32;&#32;&#32;&#32;}
409 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
410 
412 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep&gt;
413 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>duration_values
414 &#32;&#32;&#32;&#32;&#32;&#32;{
415 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Rep
416 &#32;&#32;&#32;&#32;<link linkend="_group__gtc__constants_1ga788f5a421fc0f40a1296ebc094cbaa8a">zero</link>()&#32;noexcept
417 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Rep(0);&#32;}
418 
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Rep
420 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()&#32;noexcept
421 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;numeric_limits&lt;_Rep&gt;::max();&#32;}
422 
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Rep
424 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()&#32;noexcept
425 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;numeric_limits&lt;_Rep&gt;::lowest();&#32;}
426 &#32;&#32;&#32;&#32;&#32;&#32;};
427 
429 
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_ratio
432 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::false_type
433 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
434 
435 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>max_t&#32;_Num,&#32;<emphasis role="keywordtype">int</emphasis>max_t&#32;_Den&gt;
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_ratio&lt;ratio&lt;_Num,&#32;_Den&gt;&gt;
437 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;std::true_type
438 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
439 
441 
442 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>duration
444 &#32;&#32;&#32;&#32;&#32;&#32;{
445 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
446 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep2&gt;
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_float&#32;=&#32;treat_as_floating_point&lt;_Rep2&gt;;
448 
449 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a036cd61bb4b30bb510b9538af4cebd1d">intmax_t</link>
450 &#32;&#32;&#32;&#32;_S_gcd(<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a036cd61bb4b30bb510b9538af4cebd1d">intmax_t</link>&#32;__m,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a036cd61bb4b30bb510b9538af4cebd1d">intmax_t</link>&#32;__n)&#32;<emphasis role="keyword">noexcept</emphasis>
451 &#32;&#32;&#32;&#32;{
452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Duration&#32;only&#32;allows&#32;positive&#32;periods&#32;so&#32;we&#32;don&apos;t&#32;need&#32;to</emphasis>
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;negative&#32;values&#32;here&#32;(unlike&#32;__static_gcd&#32;and&#32;std::gcd).</emphasis>
454 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a036cd61bb4b30bb510b9538af4cebd1d">intmax_t</link>&#32;__rem&#32;=&#32;__m&#32;%&#32;__n;
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m&#32;=&#32;__n;
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n&#32;=&#32;__rem;
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n&#32;!=&#32;0);
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__m;
463 <emphasis role="preprocessor">#else</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++11&#32;doesn&apos;t&#32;allow&#32;loops&#32;in&#32;constexpr&#32;functions,&#32;but&#32;this</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recursive&#32;version&#32;can&#32;be&#32;more&#32;expensive&#32;to&#32;evaluate.</emphasis>
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__n&#32;==&#32;0)&#32;?&#32;__m&#32;:&#32;_S_gcd(__n,&#32;__m&#32;%&#32;__n);
467 <emphasis role="preprocessor">#endif</emphasis>
468 &#32;&#32;&#32;&#32;}
469 
470 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
471 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2094.&#32;overflow&#32;shouldn&apos;t&#32;participate&#32;in&#32;overload&#32;resolution</emphasis>
472 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3090.&#32;What&#32;is&#32;[2094]&#32;intended&#32;to&#32;mean?</emphasis>
473 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;only&#32;produces&#32;a&#32;valid&#32;type&#32;if&#32;no&#32;overflow&#32;occurs.</emphasis>
474 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_R1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_R2,
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a036cd61bb4b30bb510b9538af4cebd1d">intmax_t</link>&#32;__gcd1&#32;=&#32;_S_gcd(_R1::num,&#32;_R2::num),
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a036cd61bb4b30bb510b9538af4cebd1d">intmax_t</link>&#32;__gcd2&#32;=&#32;_S_gcd(_R1::den,&#32;_R2::den)&gt;
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__divide&#32;=&#32;ratio&lt;(_R1::num&#32;/&#32;__gcd1)&#32;*&#32;(_R2::den&#32;/&#32;__gcd2),
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_R1::den&#32;/&#32;__gcd2)&#32;*&#32;(_R2::num&#32;/&#32;__gcd1)&gt;;
479 
480 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Period2&#32;is&#32;an&#32;exact&#32;multiple&#32;of&#32;_Period</emphasis>
481 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__is_harmonic
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__bool_constant&lt;__divide&lt;_Period2,&#32;_Period&gt;::den&#32;==&#32;1&gt;;
484 
485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
486 
487 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rep&#32;=&#32;_Rep;
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>period&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period::type;
489 
490 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!__is_duration&lt;_Rep&gt;::value,&#32;<emphasis role="stringliteral">&quot;rep&#32;cannot&#32;be&#32;a&#32;duration&quot;</emphasis>);
491 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_ratio&lt;_Period&gt;::value,
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;period&#32;must&#32;be&#32;a&#32;specialization&#32;of&#32;ratio&quot;</emphasis>);
493 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Period::num&#32;&gt;&#32;0,&#32;<emphasis role="stringliteral">&quot;period&#32;must&#32;be&#32;positive&quot;</emphasis>);
494 
495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;20.11.5.1&#32;construction&#32;/&#32;copy&#32;/&#32;destroy</emphasis>
496 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
497 
498 &#32;&#32;&#32;&#32;duration(<emphasis role="keyword">const</emphasis>&#32;duration&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
499 
500 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
501 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3050.&#32;Conversion&#32;specification&#32;problem&#32;in&#32;chrono::duration</emphasis>
502 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Require&lt;
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;const&#32;_Rep2&amp;,&#32;rep&gt;,
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__or_&lt;__is_float&lt;rep&gt;,&#32;__not_&lt;__is_float&lt;_Rep2&gt;&gt;&gt;&gt;&gt;
505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>&#32;duration(<emphasis role="keyword">const</emphasis>&#32;_Rep2&amp;&#32;__rep)
506 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__r(static_cast&lt;rep&gt;(__rep))&#32;{&#32;}
507 
508 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Require&lt;
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;const&#32;_Rep2&amp;,&#32;rep&gt;,
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__or_&lt;__is_float&lt;rep&gt;,
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;__is_harmonic&lt;_Period2&gt;,
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;__is_float&lt;_Rep2&gt;&gt;&gt;&gt;&gt;&gt;
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__d)
514 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__r(duration_cast&lt;duration&gt;(__d).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>())&#32;{&#32;}
515 
516 &#32;&#32;&#32;&#32;~duration()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
517 &#32;&#32;&#32;&#32;duration&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;duration&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
518 
519 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;20.11.5.2&#32;observer</emphasis>
520 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;rep
521 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()<emphasis role="keyword">&#32;const</emphasis>
522 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;&#32;}
523 
524 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;20.11.5.3&#32;arithmetic</emphasis>
525 
526 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration&lt;typename&#32;common_type&lt;rep&gt;::type,&#32;period&gt;
527 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>()<emphasis role="keyword">&#32;const</emphasis>
528 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration&lt;typename&#32;common_type&lt;rep&gt;::type,&#32;period&gt;(__r);&#32;}
529 
530 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration&lt;typename&#32;common_type&lt;rep&gt;::type,&#32;period&gt;
531 &#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>()<emphasis role="keyword">&#32;const</emphasis>
532 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration&lt;typename&#32;common_type&lt;rep&gt;::type,&#32;period&gt;(-__r);&#32;}
533 
534 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration&amp;
535 &#32;&#32;&#32;&#32;operator++()
536 &#32;&#32;&#32;&#32;{
537 &#32;&#32;&#32;&#32;&#32;&#32;++__r;
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
539 &#32;&#32;&#32;&#32;}
540 
541 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration
542 &#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
543 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration(__r++);&#32;}
544 
545 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration&amp;
546 &#32;&#32;&#32;&#32;operator--()
547 &#32;&#32;&#32;&#32;{
548 &#32;&#32;&#32;&#32;&#32;&#32;--__r;
549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
550 &#32;&#32;&#32;&#32;}
551 
552 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration
553 &#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)
554 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration(__r--);&#32;}
555 
556 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration&amp;
557 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;duration&amp;&#32;__d)
558 &#32;&#32;&#32;&#32;{
559 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;+=&#32;__d.count();
560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
561 &#32;&#32;&#32;&#32;}
562 
563 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration&amp;
564 &#32;&#32;&#32;&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;duration&amp;&#32;__d)
565 &#32;&#32;&#32;&#32;{
566 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;-=&#32;__d.count();
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
568 &#32;&#32;&#32;&#32;}
569 
570 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration&amp;
571 &#32;&#32;&#32;&#32;operator*=(<emphasis role="keyword">const</emphasis>&#32;rep&amp;&#32;__rhs)
572 &#32;&#32;&#32;&#32;{
573 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;*=&#32;__rhs;
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
575 &#32;&#32;&#32;&#32;}
576 
577 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;duration&amp;
578 &#32;&#32;&#32;&#32;operator/=(<emphasis role="keyword">const</emphasis>&#32;rep&amp;&#32;__rhs)
579 &#32;&#32;&#32;&#32;{
580 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;/=&#32;__rhs;
581 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
582 &#32;&#32;&#32;&#32;}
583 
584 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;934.</emphasis>
585 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep2&#32;=&#32;rep&gt;
586 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;!treat_as_floating_point&lt;_Rep2&gt;::value,
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&amp;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
589 &#32;&#32;&#32;&#32;&#32;&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;rep&amp;&#32;__rhs)
590 &#32;&#32;&#32;&#32;&#32;&#32;{
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;%=&#32;__rhs;
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
593 &#32;&#32;&#32;&#32;&#32;&#32;}
594 
595 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep2&#32;=&#32;rep&gt;
596 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;!treat_as_floating_point&lt;_Rep2&gt;::value,
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&amp;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
599 &#32;&#32;&#32;&#32;&#32;&#32;operator%=(<emphasis role="keyword">const</emphasis>&#32;duration&amp;&#32;__d)
600 &#32;&#32;&#32;&#32;&#32;&#32;{
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;%=&#32;__d.count();
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
603 &#32;&#32;&#32;&#32;&#32;&#32;}
604 
605 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;20.11.5.4&#32;special&#32;values</emphasis>
606 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration
607 &#32;&#32;&#32;&#32;<link linkend="_group__gtc__constants_1ga788f5a421fc0f40a1296ebc094cbaa8a">zero</link>()&#32;noexcept
608 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration(duration_values&lt;rep&gt;::zero());&#32;}
609 
610 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration
611 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()&#32;noexcept
612 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration(duration_values&lt;rep&gt;::min());&#32;}
613 
614 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration
615 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()&#32;noexcept
616 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;duration(duration_values&lt;rep&gt;::max());&#32;}
617 
618 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
619 &#32;&#32;&#32;&#32;rep&#32;__r;
620 &#32;&#32;&#32;&#32;&#32;&#32;};
621 
624 
626 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;duration&lt;_Rep1,&#32;_Period1&gt;,
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&lt;_Rep2,&#32;_Period2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
630 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
632 &#32;&#32;&#32;&#32;&#32;&#32;{
633 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur1;
634 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
635 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__dur1,__dur2&gt;::type&#32;&#32;&#32;__cd;
636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cd(__cd(__lhs).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;+&#32;__cd(__rhs).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>());
637 &#32;&#32;&#32;&#32;&#32;&#32;}
638 
640 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;duration&lt;_Rep1,&#32;_Period1&gt;,
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&lt;_Rep2,&#32;_Period2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
644 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
646 &#32;&#32;&#32;&#32;&#32;&#32;{
647 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur1;
648 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
649 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__dur1,__dur2&gt;::type&#32;&#32;&#32;__cd;
650 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cd(__cd(__lhs).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;-&#32;__cd(__rhs).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>());
651 &#32;&#32;&#32;&#32;&#32;&#32;}
652 
654 
656 
657 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SFINAE&#32;helper&#32;to&#32;obtain&#32;common_type&lt;_Rep1,&#32;_Rep2&gt;&#32;only&#32;if&#32;_Rep2</emphasis>
658 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;implicitly&#32;convertible&#32;to&#32;it.</emphasis>
659 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
660 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3050.&#32;Conversion&#32;specification&#32;problem&#32;in&#32;chrono::duration&#32;constructor</emphasis>
661 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CRep&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Rep1,&#32;_Rep2&gt;::type&gt;
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__common_rep_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>
664 &#32;&#32;&#32;&#32;enable_if&lt;is_convertible&lt;const&#32;_Rep2&amp;,&#32;_CRep&gt;::value,&#32;_CRep&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
665 
667 
673 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2&gt;
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration&lt;__common_rep_t&lt;_Rep1,&#32;_Rep2&gt;,&#32;_Period&gt;
675 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period&gt;&amp;&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_Rep2&amp;&#32;__s)
676 &#32;&#32;&#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;typename&#32;common_type&lt;_Rep1,&#32;_Rep2&gt;::type,&#32;_Period&gt;
678 &#32;&#32;&#32;&#32;&#32;&#32;__cd;
679 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cd(__cd(__d).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;*&#32;__s);
680 &#32;&#32;&#32;&#32;&#32;&#32;}
681 
682 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period&gt;
683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration&lt;__common_rep_t&lt;_Rep2,&#32;_Rep1&gt;,&#32;_Period&gt;
684 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>(<emphasis role="keyword">const</emphasis>&#32;_Rep1&amp;&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period&gt;&amp;&#32;__d)
685 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d&#32;*&#32;__s;&#32;}
686 
687 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2&gt;
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;duration&lt;__common_rep_t&lt;_Rep1,&#32;__disable_if_is_duration&lt;_Rep2&gt;&gt;,&#32;_Period&gt;
690 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a3d4e77a9763e858fed5eed89a6f2637f">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period&gt;&amp;&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_Rep2&amp;&#32;__s)
691 &#32;&#32;&#32;&#32;&#32;&#32;{
692 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;typename&#32;common_type&lt;_Rep1,&#32;_Rep2&gt;::type,&#32;_Period&gt;
693 &#32;&#32;&#32;&#32;&#32;&#32;__cd;
694 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cd(__cd(__d).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;/&#32;__s);
695 &#32;&#32;&#32;&#32;&#32;&#32;}
696 
697 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
699 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Rep1,&#32;_Rep2&gt;::type
700 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a3d4e77a9763e858fed5eed89a6f2637f">operator/</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
702 &#32;&#32;&#32;&#32;&#32;&#32;{
703 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur1;
704 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
705 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__dur1,__dur2&gt;::type&#32;&#32;&#32;__cd;
706 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cd(__lhs).count()&#32;/&#32;__cd(__rhs).count();
707 &#32;&#32;&#32;&#32;&#32;&#32;}
708 
709 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;934.</emphasis>
710 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2&gt;
711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
712 &#32;&#32;&#32;&#32;&#32;&#32;duration&lt;__common_rep_t&lt;_Rep1,&#32;__disable_if_is_duration&lt;_Rep2&gt;&gt;,&#32;_Period&gt;
713 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1ad13992bdf0dd6f817de965e28f4ae2bf">operator%</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period&gt;&amp;&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_Rep2&amp;&#32;__s)
714 &#32;&#32;&#32;&#32;&#32;&#32;{
715 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;typename&#32;common_type&lt;_Rep1,&#32;_Rep2&gt;::type,&#32;_Period&gt;
716 &#32;&#32;&#32;&#32;&#32;&#32;__cd;
717 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cd(__cd(__d).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;%&#32;__s);
718 &#32;&#32;&#32;&#32;&#32;&#32;}
719 
720 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;duration&lt;_Rep1,&#32;_Period1&gt;,
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&lt;_Rep2,&#32;_Period2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
724 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1ad13992bdf0dd6f817de965e28f4ae2bf">operator%</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
726 &#32;&#32;&#32;&#32;&#32;&#32;{
727 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur1;
728 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
729 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__dur1,__dur2&gt;::type&#32;&#32;&#32;__cd;
730 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__cd(__cd(__lhs).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>()&#32;%&#32;__cd(__rhs).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>());
731 &#32;&#32;&#32;&#32;&#32;&#32;}
733 
734 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;comparisons</emphasis>
735 
741 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
746 &#32;&#32;&#32;&#32;&#32;&#32;{
747 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur1;
748 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
749 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__dur1,__dur2&gt;::type&#32;&#32;&#32;__ct;
750 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ct(__lhs).count()&#32;==&#32;__ct(__rhs).count();
751 &#32;&#32;&#32;&#32;&#32;&#32;}
752 
753 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
755 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
756 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
758 &#32;&#32;&#32;&#32;&#32;&#32;{
759 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur1;
760 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
761 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__dur1,__dur2&gt;::type&#32;&#32;&#32;__ct;
762 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ct(__lhs).count()&#32;&lt;&#32;__ct(__rhs).count();
763 &#32;&#32;&#32;&#32;&#32;&#32;}
764 
765 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
766 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;three_way_comparable&lt;common_type_t&lt;_Rep1,&#32;_Rep2&gt;&gt;
769 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
770 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
772 &#32;&#32;&#32;&#32;&#32;&#32;{
773 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ct&#32;=&#32;common_type_t&lt;duration&lt;_Rep1,&#32;_Period1&gt;,
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration&lt;_Rep2,&#32;_Period2&gt;&gt;;
775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ct(__lhs).count()&#32;&lt;=&gt;&#32;__ct(__rhs).count();
776 &#32;&#32;&#32;&#32;&#32;&#32;}
777 <emphasis role="preprocessor">#else</emphasis>
778 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
781 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
783 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
784 <emphasis role="preprocessor">#endif</emphasis>
785 
786 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
789 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
791 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
792 
793 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
795 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
796 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
798 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
799 
800 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
802 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
803 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
805 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
806 
808 
810 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_C99_STDINT_TR1</emphasis>
811 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_CHRONO_INT64_T&#32;int64_t</emphasis>
812 <emphasis role="preprocessor">#elif&#32;defined&#32;__INT64_TYPE__</emphasis>
813 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_CHRONO_INT64_T&#32;__INT64_TYPE__</emphasis>
814 <emphasis role="preprocessor">#else</emphasis>
815 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(std::numeric_limits&lt;unsigned&#32;long&#32;long&gt;::digits&#32;&gt;=&#32;64,
816 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Representation&#32;type&#32;for&#32;nanoseconds&#32;must&#32;have&#32;at&#32;least&#32;64&#32;bits&quot;</emphasis>);
817 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_CHRONO_INT64_T&#32;long&#32;long</emphasis>
818 <emphasis role="preprocessor">#endif</emphasis>
820 
822 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>nanoseconds&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;nano&gt;;
823 
825 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>microseconds&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;micro&gt;;
826 
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>milliseconds&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;milli&gt;;
829 
831 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>seconds&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T&gt;;
832 
834 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>minutes&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;ratio&lt;&#32;60&gt;&gt;;
835 
837 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>hours&#32;&#32;&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;ratio&lt;3600&gt;&gt;;
838 
839 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
841 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>days&#32;&#32;&#32;&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;ratio&lt;86400&gt;&gt;;
842 
844 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>weeks&#32;&#32;&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;ratio&lt;604800&gt;&gt;;
845 
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>years&#32;&#32;&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;ratio&lt;31556952&gt;&gt;;
848 
850 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>months&#32;&#32;&#32;&#32;=&#32;duration&lt;_GLIBCXX_CHRONO_INT64_T,&#32;ratio&lt;2629746&gt;&gt;;
851 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
852 
853 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_CHRONO_INT64_T</emphasis>
854 
855 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
856 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>time_point
857 &#32;&#32;&#32;&#32;&#32;&#32;{
858 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_duration&lt;_Dur&gt;::value,
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;duration&#32;must&#32;be&#32;a&#32;specialization&#32;of&#32;std::chrono::duration&quot;</emphasis>);
860 
861 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Clock&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;clock;
862 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Dur&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration;
863 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;duration::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep;
864 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;duration::period&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;period;
865 
866 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point()&#32;:&#32;__d(duration::<link linkend="_group__gtc__constants_1ga788f5a421fc0f40a1296ebc094cbaa8a">zero</link>())
867 &#32;&#32;&#32;&#32;{&#32;}
868 
869 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">explicit</emphasis>&#32;time_point(<emphasis role="keyword">const</emphasis>&#32;duration&amp;&#32;__dur)
870 &#32;&#32;&#32;&#32;:&#32;__d(__dur)
871 &#32;&#32;&#32;&#32;{&#32;}
872 
873 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;conversions</emphasis>
874 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur2,
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Require&lt;is_convertible&lt;_Dur2,&#32;_Dur&gt;&gt;&gt;
876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;clock,&#32;_Dur2&gt;&amp;&#32;__t)
877 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__d(__t.time_since_epoch())
878 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
879 
880 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observer</emphasis>
881 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;duration
882 &#32;&#32;&#32;&#32;time_since_epoch()<emphasis role="keyword">&#32;const</emphasis>
883 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d;&#32;}
884 
885 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
886 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point&amp;
887 &#32;&#32;&#32;&#32;operator++()
888 &#32;&#32;&#32;&#32;{
889 &#32;&#32;&#32;&#32;&#32;&#32;++__d;
890 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
891 &#32;&#32;&#32;&#32;}
892 
893 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point
894 &#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
895 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point{__d++};&#32;}
896 
897 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point&amp;
898 &#32;&#32;&#32;&#32;operator--()
899 &#32;&#32;&#32;&#32;{
900 &#32;&#32;&#32;&#32;&#32;&#32;--__d;
901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
902 &#32;&#32;&#32;&#32;}
903 
904 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point
905 &#32;&#32;&#32;&#32;operator--(<emphasis role="keywordtype">int</emphasis>)
906 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point{__d--};&#32;}
907 <emphasis role="preprocessor">#endif</emphasis>
908 
909 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arithmetic</emphasis>
910 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;time_point&amp;
911 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;duration&amp;&#32;__dur)
912 &#32;&#32;&#32;&#32;{
913 &#32;&#32;&#32;&#32;&#32;&#32;__d&#32;+=&#32;__dur;
914 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
915 &#32;&#32;&#32;&#32;}
916 
917 &#32;&#32;&#32;&#32;_GLIBCXX17_CONSTEXPR&#32;time_point&amp;
918 &#32;&#32;&#32;&#32;operator-=(<emphasis role="keyword">const</emphasis>&#32;duration&amp;&#32;__dur)
919 &#32;&#32;&#32;&#32;{
920 &#32;&#32;&#32;&#32;&#32;&#32;__d&#32;-=&#32;__dur;
921 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
922 &#32;&#32;&#32;&#32;}
923 
924 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;special&#32;values</emphasis>
925 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point
926 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()&#32;noexcept
927 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point(duration::min());&#32;}
928 
929 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point
930 &#32;&#32;&#32;&#32;<link linkend="_group__core__func__common_1gae02d42887fc5570451f880e3c624b9ac">max</link>()&#32;noexcept
931 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point(duration::max());&#32;}
932 
933 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
934 &#32;&#32;&#32;&#32;duration&#32;__d;
935 &#32;&#32;&#32;&#32;&#32;&#32;};
936 
938 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
939 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__is_duration&lt;_ToDur&gt;::value,
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;time_point&lt;_Clock,&#32;_ToDur&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
941 &#32;&#32;&#32;&#32;&#32;&#32;time_point_cast(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__t)
942 &#32;&#32;&#32;&#32;&#32;&#32;{
943 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;time_point&lt;_Clock,&#32;_ToDur&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__time_point;
944 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__time_point(duration_cast&lt;_ToDur&gt;(__t.time_since_epoch()));
945 &#32;&#32;&#32;&#32;&#32;&#32;}
946 
947 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
948 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
950 &#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;__is_duration&lt;_ToDur&gt;::value,&#32;time_point&lt;_Clock,&#32;_ToDur&gt;&gt;
951 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__tp)
952 &#32;&#32;&#32;&#32;&#32;&#32;{
953 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point&lt;_Clock,&#32;_ToDur&gt;{
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::floor&lt;_ToDur&gt;(__tp.time_since_epoch())};
955 &#32;&#32;&#32;&#32;&#32;&#32;}
956 
957 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
959 &#32;&#32;&#32;&#32;&#32;&#32;enable_if_t&lt;__is_duration&lt;_ToDur&gt;::value,&#32;time_point&lt;_Clock,&#32;_ToDur&gt;&gt;
960 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__tp)
961 &#32;&#32;&#32;&#32;&#32;&#32;{
962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point&lt;_Clock,&#32;_ToDur&gt;{
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::ceil&lt;_ToDur&gt;(__tp.time_since_epoch())};
964 &#32;&#32;&#32;&#32;&#32;&#32;}
965 
966 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ToDur,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
968 &#32;&#32;&#32;&#32;__and_&lt;__is_duration&lt;_ToDur&gt;,
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;treat_as_floating_point&lt;typename&#32;_ToDur::rep&gt;&gt;&gt;<link linkend="_classvalue">::value</link>,
970 &#32;&#32;&#32;&#32;time_point&lt;_Clock,&#32;_ToDur&gt;&gt;
971 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6ea10f4260b54a61665ead26cb995ba3">round</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur&gt;&amp;&#32;__tp)
972 &#32;&#32;&#32;&#32;&#32;&#32;{
973 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point&lt;_Clock,&#32;_ToDur&gt;{
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chrono::round&lt;_ToDur&gt;(__tp.time_since_epoch())};
975 &#32;&#32;&#32;&#32;&#32;&#32;}
976 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
977 
980 
982 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point&lt;_Clock,
985 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Dur1,&#32;duration&lt;_Rep2,&#32;_Period2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
986 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
988 &#32;&#32;&#32;&#32;&#32;&#32;{
989 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
990 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Dur1,__dur2&gt;::type&#32;&#32;&#32;&#32;__ct;
991 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;time_point&lt;_Clock,&#32;__ct&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__time_point;
992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__time_point(__lhs.time_since_epoch()&#32;+&#32;__rhs);
993 &#32;&#32;&#32;&#32;&#32;&#32;}
994 
996 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rep1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period1,
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point&lt;_Clock,
999 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;duration&lt;_Rep1,&#32;_Period1&gt;,&#32;_Dur2&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
1000 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a074287bb202b5f53de64b5b63c16b23c">operator+</link>(<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&amp;&#32;__lhs,
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1002 &#32;&#32;&#32;&#32;&#32;&#32;{
1003 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep1,&#32;_Period1&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur1;
1004 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;__dur1,_Dur2&gt;::type&#32;&#32;&#32;&#32;__ct;
1005 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;time_point&lt;_Clock,&#32;__ct&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__time_point;
1006 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__time_point(__rhs.time_since_epoch()&#32;+&#32;__lhs);
1007 &#32;&#32;&#32;&#32;&#32;&#32;}
1008 
1010 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rep2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Period2&gt;
1012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;time_point&lt;_Clock,
1013 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Dur1,&#32;duration&lt;_Rep2,&#32;_Period2&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
1014 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&amp;&#32;__rhs)
1016 &#32;&#32;&#32;&#32;&#32;&#32;{
1017 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration&lt;_Rep2,&#32;_Period2&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dur2;
1018 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Dur1,__dur2&gt;::type&#32;&#32;&#32;&#32;__ct;
1019 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;time_point&lt;_Clock,&#32;__ct&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__time_point;
1020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__time_point(__lhs.time_since_epoch()&#32;-__rhs);
1021 &#32;&#32;&#32;&#32;&#32;&#32;}
1022 
1024 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
1025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Dur1,&#32;_Dur2&gt;::type
1026 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a773876155d1503e9901e13f073e4947d">operator-</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1028 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.time_since_epoch()&#32;-&#32;__rhs.time_since_epoch();&#32;}
1030 
1036 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
1037 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1038 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1040 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.time_since_epoch()&#32;==&#32;__rhs.time_since_epoch();&#32;}
1041 
1042 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1043 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;three_way_comparable_with&lt;_Dur1&gt;&#32;_Dur2&gt;
1045 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1046 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1048 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.time_since_epoch()&#32;&lt;=&gt;&#32;__rhs.time_since_epoch();&#32;}
1049 <emphasis role="preprocessor">#else</emphasis>
1050 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
1051 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1052 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1054 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1055 <emphasis role="preprocessor">#endif</emphasis>
1056 
1057 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
1058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1059 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1061 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&#32;__lhs.time_since_epoch()&#32;&lt;&#32;__rhs.time_since_epoch();&#32;}
1062 
1063 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
1064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1065 &#32;&#32;&#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1067 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
1068 
1069 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
1070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1071 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1073 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
1074 
1075 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Clock,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur2&gt;
1076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1077 &#32;&#32;&#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur1&gt;&amp;&#32;__lhs,
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;time_point&lt;_Clock,&#32;_Dur2&gt;&amp;&#32;__rhs)
1079 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
1080 
1083 
1084 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clocks.</emphasis>
1085 
1086 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Why&#32;nanosecond&#32;resolution&#32;as&#32;the&#32;default?</emphasis>
1087 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Why&#32;have&#32;std::system_clock&#32;always&#32;count&#32;in&#32;the&#32;highest</emphasis>
1088 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;resolution&#32;(ie&#32;nanoseconds),&#32;even&#32;if&#32;on&#32;some&#32;OSes&#32;the&#32;low&#32;3</emphasis>
1089 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;9&#32;decimal&#32;digits&#32;will&#32;be&#32;always&#32;zero?&#32;This&#32;allows&#32;later</emphasis>
1090 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementations&#32;to&#32;change&#32;the&#32;system_clock::now()</emphasis>
1091 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementation&#32;any&#32;time&#32;to&#32;provide&#32;better&#32;resolution&#32;without</emphasis>
1092 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;changing&#32;function&#32;signature&#32;or&#32;units.</emphasis>
1093 
1094 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;To&#32;support&#32;the&#32;(forward)&#32;evolution&#32;of&#32;the&#32;library&apos;s&#32;defined</emphasis>
1095 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clocks,&#32;wrap&#32;inside&#32;inline&#32;namespace&#32;so&#32;that&#32;the&#32;current</emphasis>
1096 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;defintions&#32;of&#32;system_clock,&#32;steady_clock,&#32;and</emphasis>
1097 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;high_resolution_clock&#32;types&#32;are&#32;uniquely&#32;mangled.&#32;This&#32;way,&#32;new</emphasis>
1098 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;code&#32;can&#32;use&#32;the&#32;latests&#32;clocks,&#32;while&#32;the&#32;library&#32;can&#32;contain</emphasis>
1099 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compatibility&#32;definitions&#32;for&#32;previous&#32;versions.&#32;&#32;At&#32;some</emphasis>
1100 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;point,&#32;when&#32;these&#32;clocks&#32;settle&#32;down,&#32;the&#32;inlined&#32;namespaces</emphasis>
1101 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;can&#32;be&#32;removed.&#32;&#32;XXX&#32;GLIBCXX_ABI&#32;Deprecated</emphasis>
1102 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>_V2&#32;{
1103 
1110 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>system_clock
1111 &#32;&#32;&#32;&#32;{
1112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;chrono::nanoseconds&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration;
1113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep;
1114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration::period&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;period;
1115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;chrono::time_point&lt;system_clock,&#32;duration&gt;&#32;&#32;&#32;&#32;time_point;
1116 
1117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(system_clock::duration::min()
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;&#32;system_clock::duration::zero(),
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;a&#32;clock&apos;s&#32;minimum&#32;duration&#32;cannot&#32;be&#32;less&#32;than&#32;its&#32;epoch&quot;</emphasis>);
1120 
1121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_steady&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1122 
1123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;time_point
1124 &#32;&#32;&#32;&#32;&#32;&#32;now()&#32;noexcept;
1125 
1126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Map&#32;to&#32;C&#32;API</emphasis>
1127 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;<link linkend="_namespacestd">std</link>::time_t
1128 &#32;&#32;&#32;&#32;&#32;&#32;to_time_t(const&#32;time_point&amp;&#32;__t)&#32;noexcept
1129 &#32;&#32;&#32;&#32;&#32;&#32;{
1130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::time_t(duration_cast&lt;chrono::seconds&gt;
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__t.time_since_epoch()).count());
1132 &#32;&#32;&#32;&#32;&#32;&#32;}
1133 
1134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;time_point
1135 &#32;&#32;&#32;&#32;&#32;&#32;from_time_t(std::time_t&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
1136 &#32;&#32;&#32;&#32;&#32;&#32;{
1137 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;chrono::time_point&lt;system_clock,&#32;seconds&gt;&#32;&#32;&#32;__from;
1138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;time_point_cast&lt;system_clock::duration&gt;
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__from(chrono::seconds(__t)));
1140 &#32;&#32;&#32;&#32;&#32;&#32;}
1141 &#32;&#32;&#32;&#32;};
1142 
1143 
1150 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>steady_clock
1151 &#32;&#32;&#32;&#32;{
1152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;chrono::nanoseconds&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duration;
1153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration::rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rep;
1154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;duration::period&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;period;
1155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;chrono::time_point&lt;steady_clock,&#32;duration&gt;&#32;&#32;&#32;&#32;time_point;
1156 
1157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_steady&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1158 
1159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;time_point
1160 &#32;&#32;&#32;&#32;&#32;&#32;now()&#32;noexcept;
1161 &#32;&#32;&#32;&#32;};
1162 
1163 
1172 &#32;&#32;&#32;&#32;using&#32;high_resolution_clock&#32;=&#32;system_clock;
1173 
1174 &#32;&#32;&#32;&#32;}&#32;<emphasis role="comment">//&#32;end&#32;inline&#32;namespace&#32;_V2</emphasis>
1175 
1176 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
1179 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
1180 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>sys_time&#32;=&#32;time_point&lt;system_clock,&#32;_Duration&gt;;
1181 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>sys_seconds&#32;=&#32;sys_time&lt;seconds&gt;;
1182 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>sys_days&#32;=&#32;sys_time&lt;days&gt;;
1183 
1184 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>file_clock&#32;=&#32;::std::filesystem::__file_clock;
1185 
1186 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Duration&gt;
1187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>file_time&#32;=&#32;time_point&lt;file_clock,&#32;_Duration&gt;;
1188 
1189 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_clock&lt;system_clock&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
1190 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_clock&lt;steady_clock&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
1191 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>is_clock&lt;file_clock&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
1192 
1193 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_clock_v&lt;system_clock&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1194 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_clock_v&lt;steady_clock&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1195 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_clock_v&lt;file_clock&gt;&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1197 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
1198 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;chrono</emphasis>
1199 
1200 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
1201 <emphasis role="preprocessor">#define&#32;__cpp_lib_chrono_udls&#32;201304L</emphasis>
1202 
1203 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceliterals">literals</link>
1204 &#32;&#32;{
1229 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>chrono_literals
1230 &#32;&#32;{
1233 
1234 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
1235 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wliteral-suffix&quot;</emphasis>
1237 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur,&#32;<emphasis role="keywordtype">char</emphasis>...&#32;_Digits&gt;
1238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Dur&#32;__check_overflow()
1239 &#32;&#32;&#32;&#32;&#32;&#32;{
1240 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Val&#32;=&#32;__parse_int::_Parse_int&lt;_Digits...&gt;;
1241 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dur::rep&#32;__repval&#32;=&#32;_Val::value;
1242 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__repval&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;__repval&#32;==&#32;_Val::value,
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;literal&#32;value&#32;cannot&#32;be&#32;represented&#32;by&#32;duration&#32;type&quot;</emphasis>);
1244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Dur(__repval);
1245 &#32;&#32;&#32;&#32;&#32;&#32;}
1247 
1249 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;ratio&lt;3600,1&gt;&gt;
1250 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>h(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__hours)
1251 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;ratio&lt;3600,1&gt;&gt;{__hours};&#32;}
1252 
1254 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">char</emphasis>...&#32;_Digits&gt;
1255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::hours
1256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>h()
1257 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_overflow&lt;chrono::hours,&#32;_Digits...&gt;();&#32;}
1258 
1260 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;ratio&lt;60,1&gt;&gt;
1261 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__mins)
1262 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;ratio&lt;60,1&gt;&gt;{__mins};&#32;}
1263 
1265 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">char</emphasis>...&#32;_Digits&gt;
1266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::minutes
1267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis><link linkend="_toml_8hpp_1aef6fbc596e7e69a80f14c34a2b786a14">min</link>()
1268 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_overflow&lt;chrono::minutes,&#32;_Digits...&gt;();&#32;}
1269 
1271 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::duration&lt;long&#32;double&gt;
1272 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>s(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__secs)
1273 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;chrono::duration&lt;long&#32;double&gt;{__secs};&#32;}
1274 
1276 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">char</emphasis>...&#32;_Digits&gt;
1277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::seconds
1278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>s()
1279 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_overflow&lt;chrono::seconds,&#32;_Digits...&gt;();&#32;}
1280 
1282 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;milli&gt;
1283 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>ms(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__msecs)
1284 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;milli&gt;{__msecs};&#32;}
1285 
1287 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">char</emphasis>...&#32;_Digits&gt;
1288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::milliseconds
1289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>ms()
1290 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_overflow&lt;chrono::milliseconds,&#32;_Digits...&gt;();&#32;}
1291 
1293 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;micro&gt;
1294 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>us(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__usecs)
1295 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;micro&gt;{__usecs};&#32;}
1296 
1298 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">char</emphasis>...&#32;_Digits&gt;
1299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::microseconds
1300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>us()
1301 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_overflow&lt;chrono::microseconds,&#32;_Digits...&gt;();&#32;}
1302 
1304 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;nano&gt;
1305 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>ns(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;__nsecs)
1306 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;chrono::duration&lt;long&#32;double,&#32;nano&gt;{__nsecs};&#32;}
1307 
1309 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">char</emphasis>...&#32;_Digits&gt;
1310 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::nanoseconds
1311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>ns()
1312 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__check_overflow&lt;chrono::nanoseconds,&#32;_Digits...&gt;();&#32;}
1313 
1314 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1316 &#32;&#32;}&#32;<emphasis role="comment">//&#32;inline&#32;namespace&#32;chrono_literals</emphasis>
1317 &#32;&#32;}&#32;<emphasis role="comment">//&#32;inline&#32;namespace&#32;literals</emphasis>
1318 
1319 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>chrono
1320 &#32;&#32;{
1321 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>literals::chrono_literals;
1322 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;chrono</emphasis>
1323 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
1324 
1325 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1326 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>filesystem
1327 &#32;&#32;{
1328 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__file_clock
1329 &#32;&#32;&#32;&#32;{
1330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>duration&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;chrono::nanoseconds;
1331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rep&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;duration::rep;
1332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>period&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;duration::period;
1333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>time_point&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;chrono::time_point&lt;__file_clock&gt;;
1334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_steady&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1335 
1336 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;time_point
1337 &#32;&#32;&#32;&#32;&#32;&#32;now()&#32;noexcept
1338 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_from_sys(chrono::system_clock::now());&#32;}
1339 
1340 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
1342 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>
1343 &#32;&#32;&#32;&#32;chrono::file_time&lt;_Dur&gt;
1344 &#32;&#32;&#32;&#32;from_sys(<emphasis role="keyword">const</emphasis>&#32;chrono::sys_time&lt;_Dur&gt;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
1345 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_from_sys(__t);&#32;}
1346 
1347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;internal&#32;use&#32;only</emphasis>
1348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
1349 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>
1350 &#32;&#32;&#32;&#32;chrono::sys_time&lt;_Dur&gt;
1351 &#32;&#32;&#32;&#32;to_sys(<emphasis role="keyword">const</emphasis>&#32;chrono::file_time&lt;_Dur&gt;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
1352 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_to_sys(__t);&#32;}
1353 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
1354 
1355 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__sys_clock&#32;=&#32;chrono::system_clock;
1357 
1358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;clock&apos;s&#32;(unspecified)&#32;epoch&#32;is&#32;2174-01-01&#32;00:00:00&#32;UTC.</emphasis>
1359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;signed&#32;64-bit&#32;duration&#32;with&#32;nanosecond&#32;resolution&#32;gives&#32;roughly</emphasis>
1360 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;+/-&#32;292&#32;years,&#32;which&#32;covers&#32;the&#32;1901-2446&#32;date&#32;range&#32;for&#32;ext4.</emphasis>
1361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;chrono::seconds&#32;_S_epoch_diff{6437664000};
1362 
1363 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;internal&#32;use&#32;only</emphasis>
1365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
1366 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>
1367 &#32;&#32;&#32;&#32;chrono::time_point&lt;__file_clock,&#32;_Dur&gt;
1368 &#32;&#32;&#32;&#32;_S_from_sys(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;__sys_clock,&#32;_Dur&gt;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
1369 &#32;&#32;&#32;&#32;{
1370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__file_time&#32;=&#32;chrono::time_point&lt;__file_clock,&#32;_Dur&gt;;
1371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__file_time{__t.time_since_epoch()}&#32;-&#32;_S_epoch_diff;
1372 &#32;&#32;&#32;&#32;}
1373 
1374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;internal&#32;use&#32;only</emphasis>
1375 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dur&gt;
1376 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>
1377 &#32;&#32;&#32;&#32;chrono::time_point&lt;__sys_clock,&#32;_Dur&gt;
1378 &#32;&#32;&#32;&#32;_S_to_sys(<emphasis role="keyword">const</emphasis>&#32;chrono::time_point&lt;__file_clock,&#32;_Dur&gt;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
1379 &#32;&#32;&#32;&#32;{
1380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__sys_time&#32;=&#32;chrono::time_point&lt;__sys_clock,&#32;_Dur&gt;;
1381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sys_time{__t.time_since_epoch()}&#32;+&#32;_S_epoch_diff;
1382 &#32;&#32;&#32;&#32;}
1383 &#32;&#32;&#32;&#32;};
1384 &#32;&#32;}&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
1385 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1386 
1387 _GLIBCXX_END_NAMESPACE_VERSION
1388 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
1389 
1390 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1391 
1392 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//_GLIBCXX_CHRONO_H</emphasis>
</programlisting></section>
