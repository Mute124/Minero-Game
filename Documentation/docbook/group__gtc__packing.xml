<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__gtc__packing" xml:lang="en-US">
<title>GLM_GTC_packing</title>
<indexterm><primary>GLM_GTC_packing</primary></indexterm>
Collaboration diagram for GLM_GTC_packing:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> <link linkend="_group__gtc__packing_1ga2f9963e5d762b10085b280d3662017ba">glm::packUnorm1x8</link> (float <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> float <link linkend="_group__gtc__packing_1ga32f3f2642df2ea87449d59fb614a8305">glm::unpackUnorm1x8</link> (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga833288fc0d4a79f19d0db75a6843bfe6">glm::packUnorm2x8</link> (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> <link linkend="_group__gtc__packing_1ga96ce0c24339ee676e28a027fffd1edf6">glm::unpackUnorm2x8</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> <link linkend="_group__gtc__packing_1ga26b6cd7a35c46c4b6a342f3b97b47423">glm::packSnorm1x8</link> (float s)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> float <link linkend="_group__gtc__packing_1ga6f2bebf536fbf7c8b97d4b306bb3354e">glm::unpackSnorm1x8</link> (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga05d08a82923166ec7cd5d0e6154c9953">glm::packSnorm2x8</link> (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> <link linkend="_group__gtc__packing_1ga27f30f0281b88e152b0895f5e2ead878">glm::unpackSnorm2x8</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga60c7d915f5653559ae02c2f79a8c5c1d">glm::packUnorm1x16</link> (float <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> float <link linkend="_group__gtc__packing_1ga7770e3ade4f4764cc1b2eb42ac4ec188">glm::unpackUnorm1x16</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1gac561f06c908b7302537a8ef29fcb409e">glm::packUnorm4x16</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1gafb2b502bc406031a5618ce930139a9e3">glm::unpackUnorm4x16</link> (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1gac29411d6c0f6ed0fe9f0396dfe92e0e8">glm::packSnorm1x16</link> (float <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> float <link linkend="_group__gtc__packing_1ga246f451cebf590726324f7a283e3d65e">glm::unpackSnorm1x16</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga9b237d7c66b7a71964e6d1f4dc06539f">glm::packSnorm4x16</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1ga1bfaa3f217fd7a4b6b9d3117ecb3fcac">glm::unpackSnorm4x16</link> (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1gaba534b320836a35372e00af5771dd1a2">glm::packHalf1x16</link> (float <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> float <link linkend="_group__gtc__packing_1gaa6eebcdfc746584b7d1823f1d5344fed">glm::unpackHalf1x16</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga8104f0b719b7792491f2b789a6dd6f96">glm::packHalf4x16</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1gaea526d6491ad40401eac34803984bf27">glm::unpackHalf4x16</link> (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga032e18fa5bc5b8f3897104aeb2f1e195">glm::packI3x10_1x2</link> (<link linkend="_group__core__vector_1ga2ba9198ee02a3947883e934a222548e0">ivec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga2ba9198ee02a3947883e934a222548e0">ivec4</link> <link linkend="_group__gtc__packing_1ga08bcd34cf9c34701d658dd861ee6e300">glm::unpackI3x10_1x2</link> (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1gaf656d8862628f96b20de7a36eaa1fe56">glm::packU3x10_1x2</link> (<link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> <link linkend="_group__gtc__packing_1ga119aa2d7d55952f9dc4214390a6ffefc">glm::unpackU3x10_1x2</link> (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga0d4157cec37c0312216a7be1cc92df54">glm::packSnorm3x10_1x2</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1ga8b8bb827a3743ca553d8702d3e337101">glm::unpackSnorm3x10_1x2</link> (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga2cf2d11b40bd48639110456fd74c2e33">glm::packUnorm3x10_1x2</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1gaf69ace2b5e9234f8afb4e99c3df1193d">glm::unpackUnorm3x10_1x2</link> (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga8c2a0eeee677ca4dafd9e093d9e81062">glm::packF2x11_1x10</link> (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> <link linkend="_group__gtc__packing_1ga8b9c7991eb021d95c778bf5c0b2f7824">glm::unpackF2x11_1x10</link> (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga0984f9598edc648d59a9643d9a61b121">glm::packF3x9_E1x5</link> (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> <link linkend="_group__gtc__packing_1ga15d8845a31e1e55d493803d0c8cb5910">glm::unpackF3x9_E1x5</link> (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; <link linkend="_group__gtc__packing_1ga41bf9d8daf1bb553fbffb6d2762853b0">glm::packRGBM</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; const &amp;rgb)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; <link linkend="_group__gtc__packing_1gafba3d7070c4918ad1ce3ac3112b30a8f">glm::unpackRGBM</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; const &amp;rgbm)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link>, Q &gt; <link linkend="_group__gtc__packing_1ga72b41f62169feb06d2c86613b8e1e6bf">glm::packHalf</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, float, Q &gt; const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, float, Q &gt; <link linkend="_group__gtc__packing_1ga7b2b3383bd086048acad804fe9dd4685">glm::unpackHalf</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link>, Q &gt; const &amp;p)</para>
</listitem>
            <listitem><para>template&lt;typename uintType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename floatType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, uintType, Q &gt; <link linkend="_group__gtc__packing_1ga224c97fa9cec9235173084d851fbd78e">glm::packUnorm</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para>template&lt;typename floatType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename uintType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; <link linkend="_group__gtc__packing_1ga620ed87ba2ddf15f641e93a9b0257e25">glm::unpackUnorm</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, uintType, Q &gt; const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para>template&lt;typename intType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename floatType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, intType, Q &gt; <link linkend="_group__gtc__packing_1ga4063fe32d0d7ac6aff3b4001429e7c9d">glm::packSnorm</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para>template&lt;typename floatType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename intType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </para><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; <link linkend="_group__gtc__packing_1ga5ea23187b1b7d15b53cf06ef286a8f09">glm::unpackSnorm</link> (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, intType, Q &gt; const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> <link linkend="_group__gtc__packing_1gad68eb2f848ba867192b8787998c0595a">glm::packUnorm2x4</link> (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> <link linkend="_group__gtc__packing_1ga3afb0452954320f2d83fe6f38cb24147">glm::unpackUnorm2x4</link> (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1gad493c9f130e91dd8a4b360b05dcea573">glm::packUnorm4x4</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1ga38a0a518d53e15a9481c31dc1e574a40">glm::unpackUnorm4x4</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga0fcb493167d540aca105d11df5c55503">glm::packUnorm1x5_1x6_1x5</link> (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> <link linkend="_group__gtc__packing_1ga6804d0525daf68bcac226f46fbb3b24e">glm::unpackUnorm1x5_1x6_1x5</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga1b41375846ed66768da78ca299d8d010">glm::packUnorm3x5_1x1</link> (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1gaab3b476e8f320670717fd518f350ce28">glm::unpackUnorm3x5_1x1</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> <link linkend="_group__gtc__packing_1ga0acca4eb99c300fe2edeef7ebd8fa08b">glm::packUnorm2x3_1x2</link> (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> <link linkend="_group__gtc__packing_1gaeeacc5275329100c50fe8fc0871eb423">glm::unpackUnorm2x3_1x2</link> (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__int__sized_1ga22d9cd55823f7c4aeee13aceafd7238a">int16</link> <link linkend="_group__gtc__packing_1ga532b06d8915c6c65649f828e9106a1d9">glm::packInt2x8</link> (<link linkend="_group__ext__vector__int2__sized_1gade57e4b55fe2b2345a4f2ac2b149cd32">i8vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__int2__sized_1gade57e4b55fe2b2345a4f2ac2b149cd32">i8vec2</link> <link linkend="_group__gtc__packing_1ga55b4670bffab6ddb39d4a0fbf98718c1">glm::unpackInt2x8</link> (<link linkend="_group__ext__scalar__int__sized_1ga22d9cd55823f7c4aeee13aceafd7238a">int16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga4a431a30aa5dfb425be3ea84fe561844">glm::packUint2x8</link> (<link linkend="_group__ext__vector__uint2__sized_1ga01e28d0272428f94d22ea6111f0112be">u8vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__uint2__sized_1ga01e28d0272428f94d22ea6111f0112be">u8vec2</link> <link linkend="_group__gtc__packing_1ga060e0e7e299aa73ff869c197ebf44210">glm::unpackUint2x8</link> (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__int__sized_1gafc36c598ca57ab4a9286a53bf91a5fff">int32</link> <link linkend="_group__gtc__packing_1gac04277b39f9ca1ae2ca4840a3cb987e8">glm::packInt4x8</link> (<link linkend="_group__ext__vector__int4__sized_1gaaad99cfb998ddcb74e9c33d0149fdd0e">i8vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__int4__sized_1gaaad99cfb998ddcb74e9c33d0149fdd0e">i8vec4</link> <link linkend="_group__gtc__packing_1gaeed27076c5d26f4cca0d06637d3e878c">glm::unpackInt4x8</link> (<link linkend="_group__ext__scalar__int__sized_1gafc36c598ca57ab4a9286a53bf91a5fff">int32</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1gaeb4262f799821affa62edf7067deaef9">glm::packUint4x8</link> (<link linkend="_group__ext__vector__uint4__sized_1ga6c8841fa492bd5b1078b171452fd6974">u8vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__uint4__sized_1ga6c8841fa492bd5b1078b171452fd6974">u8vec4</link> <link linkend="_group__gtc__packing_1ga99229dc6cb31d82c39a324d5753792c6">glm::unpackUint4x8</link> (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> int <link linkend="_group__gtc__packing_1ga0182984c14b2b59fd74e72af3f3b4bb9">glm::packInt2x16</link> (<link linkend="_group__ext__vector__int2__sized_1gad912fd04abb876a5b806118ec6e0f283">i16vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__int2__sized_1gad912fd04abb876a5b806118ec6e0f283">i16vec2</link> <link linkend="_group__gtc__packing_1ga639c216b452fc364b32c15eb5b8b6a87">glm::unpackInt2x16</link> (int p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> <link linkend="_group__gtc__packing_1gac3ef78d62735b5c34503c33e37e401c2">glm::packInt4x16</link> (<link linkend="_group__ext__vector__int4__sized_1ga99a249a4cc129cb527c48d3afd38b666">i16vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__int4__sized_1ga99a249a4cc129cb527c48d3afd38b666">i16vec4</link> <link linkend="_group__gtc__packing_1ga625619888b95299a1ee0d9e50469c482">glm::unpackInt4x16</link> (<link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="_group__gtc__packing_1gad5ca2e64edae3c233657c9fb0d18a9c9">glm::packUint2x16</link> (<link linkend="_group__ext__vector__uint2__sized_1ga50bd2ceeb100a187e7c46f135269a0ec">u16vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__uint2__sized_1ga50bd2ceeb100a187e7c46f135269a0ec">u16vec2</link> <link linkend="_group__gtc__packing_1ga7778efa924e6efc386cb9f373bb06b72">glm::unpackUint2x16</link> (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga19813cb34dd7102f9612ba6c0d9ef377">glm::packUint4x16</link> (<link linkend="_group__ext__vector__uint4__sized_1ga049d45ad8d0f78578d7ceb86a7fdaae4">u16vec4</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__uint4__sized_1ga049d45ad8d0f78578d7ceb86a7fdaae4">u16vec4</link> <link linkend="_group__gtc__packing_1gaf1eea82404af955004aae19a2dcb55f1">glm::unpackUint4x16</link> (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> <link linkend="_group__gtc__packing_1ga1d6c24ff4f2b198eb2c4a2e4dcf7c336">glm::packInt2x32</link> (<link linkend="_group__ext__vector__int2__sized_1ga99191e0de942ecc1df32d522f8064789">i32vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__int2__sized_1ga99191e0de942ecc1df32d522f8064789">i32vec2</link> <link linkend="_group__gtc__packing_1ga6410b50fa48d15e70b2c34174ee4a3fc">glm::unpackInt2x32</link> (<link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> p)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga4c4e4d6ab81a6b14cf066b40b6967c0a">glm::packUint2x32</link> (<link linkend="_group__ext__vector__uint2__sized_1gad854a1005ce84d8f6e8f05e42893f5c9">u32vec2</link> const &amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_group__ext__vector__uint2__sized_1gad854a1005ce84d8f6e8f05e42893f5c9">u32vec2</link> <link linkend="_group__gtc__packing_1gab211ea5f8cf86f00efa4fd53cb302c82">glm::unpackUint2x32</link> (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Include &lt;glm/gtc/packing.hpp&gt; to use the features of this extension.</para>

<para>This extension provides a set of function to convert vertors to packed formats. </para>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__gtc__packing_1ga8c2a0eeee677ca4dafd9e093d9e81062"/><section>
    <title>packF2x11_1x10()</title>
<indexterm><primary>packF2x11_1x10</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packF2x11_1x10</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> glm::packF2x11_1x10 (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp; v)</computeroutput></para>
<para>First, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values. Then, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The first vector component specifies the 11 least-significant bits of the result; the last component specifies the 10 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> unpackF2x11_1x10(uint32 const&amp; p) </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga8c2a0eeee677ca4dafd9e093d9e81062_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga8c2a0eeee677ca4dafd9e093d9e81062_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga0984f9598edc648d59a9643d9a61b121"/><section>
    <title>packF3x9_E1x5()</title>
<indexterm><primary>packF3x9_E1x5</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packF3x9_E1x5</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> glm::packF3x9_E1x5 (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp; v)</computeroutput></para>
<para>First, converts the first two components of the normalized floating-point value v into 11-bit signless floating-point values. Then, converts the third component of the normalized floating-point value v into a 10-bit signless floating-point value. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The first vector component specifies the 11 least-significant bits of the result; the last component specifies the 10 most-significant bits.</para>

<para>packF3x9_E1x5 allows encoding into RGBE / RGB9E5 format</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> unpackF3x9_E1x5(uint32 const&amp; p) </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga0984f9598edc648d59a9643d9a61b121_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga0984f9598edc648d59a9643d9a61b121_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga72b41f62169feb06d2c86613b8e1e6bf"/><section>
    <title>packHalf()</title>
<indexterm><primary>packHalf</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packHalf</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link>, Q &gt; glm::packHalf (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, float, Q &gt; const &amp; v)</computeroutput></para>
<para>Returns an unsigned integer vector obtained by converting the components of a floating-point vector to the 16-bit floating-point representation found in the OpenGL Specification. The first vector component specifies the 16 least-significant bits of the result; the forth component specifies the 16 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>vec&lt;L, float, Q&gt; <link linkend="_group__gtc__packing_1ga7b2b3383bd086048acad804fe9dd4685">unpackHalf(vec&lt;L, uint16, Q&gt; const&amp; p)</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga72b41f62169feb06d2c86613b8e1e6bf_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaba534b320836a35372e00af5771dd1a2"/><section>
    <title>packHalf1x16()</title>
<indexterm><primary>packHalf1x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packHalf1x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packHalf1x16 (float v)</computeroutput></para>
<para>Returns an unsigned integer obtained by converting the components of a floating-point scalar to the 16-bit floating-point representation found in the OpenGL Specification, and then packing this 16-bit value into a 16-bit unsigned integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1ga20f134b07db3a3d3a38efb2617388c92">packHalf2x16(vec2 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga8104f0b719b7792491f2b789a6dd6f96">packHalf4x16(vec4 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml">GLSL packHalf2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaba534b320836a35372e00af5771dd1a2_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaba534b320836a35372e00af5771dd1a2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga8104f0b719b7792491f2b789a6dd6f96"/><section>
    <title>packHalf4x16()</title>
<indexterm><primary>packHalf4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packHalf4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> glm::packHalf4x16 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link> const &amp; v)</computeroutput></para>
<para>Returns an unsigned integer obtained by converting the components of a four-component floating-point vector to the 16-bit floating-point representation found in the OpenGL Specification, and then packing these four 16-bit values into a 64-bit unsigned integer. The first vector component specifies the 16 least-significant bits of the result; the forth component specifies the 16 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> packHalf1x16(float const&amp; v) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1ga20f134b07db3a3d3a38efb2617388c92">packHalf2x16(vec2 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml">GLSL packHalf2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga8104f0b719b7792491f2b789a6dd6f96_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga8104f0b719b7792491f2b789a6dd6f96_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga032e18fa5bc5b8f3897104aeb2f1e195"/><section>
    <title>packI3x10_1x2()</title>
<indexterm><primary>packI3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packI3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> glm::packI3x10_1x2 (<link linkend="_group__core__vector_1ga2ba9198ee02a3947883e934a222548e0">ivec4</link> const &amp; v)</computeroutput></para>
<para>Returns an unsigned integer obtained by converting the components of a four-component signed integer vector to the 10-10-10-2-bit signed integer representation found in the OpenGL Specification, and then packing these four values into a 32-bit unsigned integer. The first vector component specifies the 10 least-significant bits of the result; the forth component specifies the 2 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> packI3x10_1x2(uvec4 const&amp; v) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga0d4157cec37c0312216a7be1cc92df54">packSnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga2cf2d11b40bd48639110456fd74c2e33">packUnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__core__vector_1ga2ba9198ee02a3947883e934a222548e0">ivec4</link> unpackI3x10_1x2(uint32 const&amp; p) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga032e18fa5bc5b8f3897104aeb2f1e195_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga0182984c14b2b59fd74e72af3f3b4bb9"/><section>
    <title>packInt2x16()</title>
<indexterm><primary>packInt2x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packInt2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> int glm::packInt2x16 (<link linkend="_group__ext__vector__int2__sized_1gad912fd04abb876a5b806118ec6e0f283">i16vec2</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__int2__sized_1gad912fd04abb876a5b806118ec6e0f283">i16vec2</link> <link linkend="_group__gtc__packing_1ga639c216b452fc364b32c15eb5b8b6a87">unpackInt2x16(int p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga0182984c14b2b59fd74e72af3f3b4bb9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga1d6c24ff4f2b198eb2c4a2e4dcf7c336"/><section>
    <title>packInt2x32()</title>
<indexterm><primary>packInt2x32</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packInt2x32</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> glm::packInt2x32 (<link linkend="_group__ext__vector__int2__sized_1ga99191e0de942ecc1df32d522f8064789">i32vec2</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__int2__sized_1ga99191e0de942ecc1df32d522f8064789">i32vec2</link> unpackInt2x32(int p) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga1d6c24ff4f2b198eb2c4a2e4dcf7c336_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga532b06d8915c6c65649f828e9106a1d9"/><section>
    <title>packInt2x8()</title>
<indexterm><primary>packInt2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packInt2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__int__sized_1ga22d9cd55823f7c4aeee13aceafd7238a">int16</link> glm::packInt2x8 (<link linkend="_group__ext__vector__int2__sized_1gade57e4b55fe2b2345a4f2ac2b149cd32">i8vec2</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__int2__sized_1gade57e4b55fe2b2345a4f2ac2b149cd32">i8vec2</link> <link linkend="_group__gtc__packing_1ga55b4670bffab6ddb39d4a0fbf98718c1">unpackInt2x8(int16 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga532b06d8915c6c65649f828e9106a1d9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gac3ef78d62735b5c34503c33e37e401c2"/><section>
    <title>packInt4x16()</title>
<indexterm><primary>packInt4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packInt4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> glm::packInt4x16 (<link linkend="_group__ext__vector__int4__sized_1ga99a249a4cc129cb527c48d3afd38b666">i16vec4</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__int4__sized_1ga99a249a4cc129cb527c48d3afd38b666">i16vec4</link> <link linkend="_group__gtc__packing_1ga625619888b95299a1ee0d9e50469c482">unpackInt4x16(int64 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gac3ef78d62735b5c34503c33e37e401c2_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gac04277b39f9ca1ae2ca4840a3cb987e8"/><section>
    <title>packInt4x8()</title>
<indexterm><primary>packInt4x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packInt4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__int__sized_1gafc36c598ca57ab4a9286a53bf91a5fff">int32</link> glm::packInt4x8 (<link linkend="_group__ext__vector__int4__sized_1gaaad99cfb998ddcb74e9c33d0149fdd0e">i8vec4</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__int4__sized_1gaaad99cfb998ddcb74e9c33d0149fdd0e">i8vec4</link> <link linkend="_group__gtc__packing_1gaeed27076c5d26f4cca0d06637d3e878c">unpackInt4x8(int32 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gac04277b39f9ca1ae2ca4840a3cb987e8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga41bf9d8daf1bb553fbffb6d2762853b0"/><section>
    <title>packRGBM()</title>
<indexterm><primary>packRGBM</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packRGBM</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; glm::packRGBM (<link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; const &amp; rgb)</computeroutput></para>
<para>Returns an unsigned integer vector obtained by converting the components of a floating-point vector to the 16-bit floating-point representation found in the OpenGL Specification. The first vector component specifies the 16 least-significant bits of the result; the forth component specifies the 16 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structglm_1_1vec_3_013_00_01_t_00_01_q_01_4">vec&lt;3, T, Q&gt;</link> <link linkend="_group__gtc__packing_1gafba3d7070c4918ad1ce3ac3112b30a8f">unpackRGBM(vec&lt;4, T, Q&gt; const&amp; p)</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga41bf9d8daf1bb553fbffb6d2762853b0_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga4063fe32d0d7ac6aff3b4001429e7c9d"/><section>
    <title>packSnorm()</title>
<indexterm><primary>packSnorm</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packSnorm</secondary></indexterm>
<computeroutput>template&lt;typename intType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename floatType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, intType, Q &gt; glm::packSnorm (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; const &amp; v)</computeroutput></para>
<para>Convert each component of the normalized floating-point vector into signed integer values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>vec&lt;L, floatType, Q&gt; <link linkend="_group__gtc__packing_1ga5ea23187b1b7d15b53cf06ef286a8f09">unpackSnorm(vec&lt;L, intType, Q&gt; const&amp; p)</link>; </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gac29411d6c0f6ed0fe9f0396dfe92e0e8"/><section>
    <title>packSnorm1x16()</title>
<indexterm><primary>packSnorm1x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packSnorm1x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packSnorm1x16 (float v)</computeroutput></para>
<para>First, converts the normalized floating-point value v into 16-bit integer value. Then, the results are packed into the returned 16-bit unsigned integer.</para>

<para>The conversion to fixed point is done as follows: packSnorm1x8: round(clamp(s, -1, +1) * 32767.0)</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1ga977ab172da5494e5ac63e952afacfbe2">packSnorm2x16(vec2 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga9b237d7c66b7a71964e6d1f4dc06539f">packSnorm4x16(vec4 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gac29411d6c0f6ed0fe9f0396dfe92e0e8_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga26b6cd7a35c46c4b6a342f3b97b47423"/><section>
    <title>packSnorm1x8()</title>
<indexterm><primary>packSnorm1x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packSnorm1x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> glm::packSnorm1x8 (float s)</computeroutput></para>
<para>First, converts the normalized floating-point value v into 8-bit integer value. Then, the results are packed into the returned 8-bit unsigned integer.</para>

<para>The conversion to fixed point is done as follows: packSnorm1x8: round(clamp(s, -1, +1) * 127.0)</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga05d08a82923166ec7cd5d0e6154c9953">packSnorm2x8(vec2 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1ga85e8f17627516445026ab7a9c2e3531a">packSnorm4x8(vec4 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga26b6cd7a35c46c4b6a342f3b97b47423_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga05d08a82923166ec7cd5d0e6154c9953"/><section>
    <title>packSnorm2x8()</title>
<indexterm><primary>packSnorm2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packSnorm2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packSnorm2x8 (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 8-bit integer values. Then, the results are packed into the returned 16-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packSnorm2x8: round(clamp(c, -1, +1) * 127.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> packSnorm1x8(float const&amp; v) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1ga85e8f17627516445026ab7a9c2e3531a">packSnorm4x8(vec4 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga05d08a82923166ec7cd5d0e6154c9953_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga0d4157cec37c0312216a7be1cc92df54"/><section>
    <title>packSnorm3x10_1x2()</title>
<indexterm><primary>packSnorm3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packSnorm3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> glm::packSnorm3x10_1x2 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>First, converts the first three components of the normalized floating-point value v into 10-bit signed integer values. Then, converts the forth component of the normalized floating-point value v into 2-bit signed integer values. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packSnorm3x10_1x2(xyz): round(clamp(c, -1, +1) * 511.0) packSnorm3x10_1x2(w): round(clamp(c, -1, +1) * 1.0)</para>

<para>The first vector component specifies the 10 least-significant bits of the result; the forth component specifies the 2 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> unpackSnorm3x10_1x2(uint32 const&amp; p) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga2cf2d11b40bd48639110456fd74c2e33">packUnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1gaf656d8862628f96b20de7a36eaa1fe56">packU3x10_1x2(uvec4 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga032e18fa5bc5b8f3897104aeb2f1e195">packI3x10_1x2(ivec4 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga0d4157cec37c0312216a7be1cc92df54_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga9b237d7c66b7a71964e6d1f4dc06539f"/><section>
    <title>packSnorm4x16()</title>
<indexterm><primary>packSnorm4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packSnorm4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> glm::packSnorm4x16 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 16-bit integer values. Then, the results are packed into the returned 64-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packSnorm2x8: round(clamp(c, -1, +1) * 32767.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> packSnorm1x16(float const&amp; v) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1ga977ab172da5494e5ac63e952afacfbe2">packSnorm2x16(vec2 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml">GLSL packSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga9b237d7c66b7a71964e6d1f4dc06539f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaf656d8862628f96b20de7a36eaa1fe56"/><section>
    <title>packU3x10_1x2()</title>
<indexterm><primary>packU3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packU3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> glm::packU3x10_1x2 (<link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> const &amp; v)</computeroutput></para>
<para>Returns an unsigned integer obtained by converting the components of a four-component unsigned integer vector to the 10-10-10-2-bit unsigned integer representation found in the OpenGL Specification, and then packing these four values into a 32-bit unsigned integer. The first vector component specifies the 10 least-significant bits of the result; the forth component specifies the 2 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga032e18fa5bc5b8f3897104aeb2f1e195">packI3x10_1x2(ivec4 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga0d4157cec37c0312216a7be1cc92df54">packSnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga2cf2d11b40bd48639110456fd74c2e33">packUnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__core__vector_1ga2ba9198ee02a3947883e934a222548e0">ivec4</link> unpackU3x10_1x2(uint32 const&amp; p) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaf656d8862628f96b20de7a36eaa1fe56_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gad5ca2e64edae3c233657c9fb0d18a9c9"/><section>
    <title>packUint2x16()</title>
<indexterm><primary>packUint2x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUint2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> glm::packUint2x16 (<link linkend="_group__ext__vector__uint2__sized_1ga50bd2ceeb100a187e7c46f135269a0ec">u16vec2</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed unsigned integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__uint2__sized_1ga50bd2ceeb100a187e7c46f135269a0ec">u16vec2</link> <link linkend="_group__gtc__packing_1ga7778efa924e6efc386cb9f373bb06b72">unpackUint2x16(uint p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gad5ca2e64edae3c233657c9fb0d18a9c9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga4c4e4d6ab81a6b14cf066b40b6967c0a"/><section>
    <title>packUint2x32()</title>
<indexterm><primary>packUint2x32</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUint2x32</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> glm::packUint2x32 (<link linkend="_group__ext__vector__uint2__sized_1gad854a1005ce84d8f6e8f05e42893f5c9">u32vec2</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed unsigned integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__uint2__sized_1gad854a1005ce84d8f6e8f05e42893f5c9">u32vec2</link> unpackUint2x32(int p) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga4c4e4d6ab81a6b14cf066b40b6967c0a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga4a431a30aa5dfb425be3ea84fe561844"/><section>
    <title>packUint2x8()</title>
<indexterm><primary>packUint2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUint2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packUint2x8 (<link linkend="_group__ext__vector__uint2__sized_1ga01e28d0272428f94d22ea6111f0112be">u8vec2</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed unsigned integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__uint2__sized_1ga01e28d0272428f94d22ea6111f0112be">u8vec2</link> unpackInt2x8(uint16 p) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga4a431a30aa5dfb425be3ea84fe561844_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga19813cb34dd7102f9612ba6c0d9ef377"/><section>
    <title>packUint4x16()</title>
<indexterm><primary>packUint4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUint4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> glm::packUint4x16 (<link linkend="_group__ext__vector__uint4__sized_1ga049d45ad8d0f78578d7ceb86a7fdaae4">u16vec4</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed unsigned integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__uint4__sized_1ga049d45ad8d0f78578d7ceb86a7fdaae4">u16vec4</link> <link linkend="_group__gtc__packing_1gaf1eea82404af955004aae19a2dcb55f1">unpackUint4x16(uint64 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga19813cb34dd7102f9612ba6c0d9ef377_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaeb4262f799821affa62edf7067deaef9"/><section>
    <title>packUint4x8()</title>
<indexterm><primary>packUint4x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUint4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> glm::packUint4x8 (<link linkend="_group__ext__vector__uint4__sized_1ga6c8841fa492bd5b1078b171452fd6974">u8vec4</link> const &amp; v)</computeroutput></para>
<para>Convert each component from an integer vector into a packed unsigned integer.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__vector__uint4__sized_1ga6c8841fa492bd5b1078b171452fd6974">u8vec4</link> <link linkend="_group__gtc__packing_1ga99229dc6cb31d82c39a324d5753792c6">unpackUint4x8(uint32 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaeb4262f799821affa62edf7067deaef9_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga224c97fa9cec9235173084d851fbd78e"/><section>
    <title>packUnorm()</title>
<indexterm><primary>packUnorm</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm</secondary></indexterm>
<computeroutput>template&lt;typename uintType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename floatType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, uintType, Q &gt; glm::packUnorm (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; const &amp; v)</computeroutput></para>
<para>Convert each component of the normalized floating-point vector into unsigned integer values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>vec&lt;L, floatType, Q&gt; unpackUnorm(vec&lt;L, intType, Q&gt; const&amp; p); </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga60c7d915f5653559ae02c2f79a8c5c1d"/><section>
    <title>packUnorm1x16()</title>
<indexterm><primary>packUnorm1x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm1x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packUnorm1x16 (float v)</computeroutput></para>
<para>First, converts the normalized floating-point value v into a 16-bit integer value. Then, the results are packed into the returned 16-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packUnorm1x16: round(clamp(c, 0, +1) * 65535.0)</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> packSnorm1x16(float const&amp; v) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga9b237d7c66b7a71964e6d1f4dc06539f">packSnorm4x16(vec4 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga60c7d915f5653559ae02c2f79a8c5c1d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga0fcb493167d540aca105d11df5c55503"/><section>
    <title>packUnorm1x5_1x6_1x5()</title>
<indexterm><primary>packUnorm1x5_1x6_1x5</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm1x5_1x6_1x5</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packUnorm1x5_1x6_1x5 (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp; v)</computeroutput></para>
<para>Convert each component of the normalized floating-point vector into unsigned integer values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> <link linkend="_group__gtc__packing_1ga6804d0525daf68bcac226f46fbb3b24e">unpackUnorm1x5_1x6_1x5(uint16 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga0fcb493167d540aca105d11df5c55503_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga2f9963e5d762b10085b280d3662017ba"/><section>
    <title>packUnorm1x8()</title>
<indexterm><primary>packUnorm1x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm1x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> glm::packUnorm1x8 (float v)</computeroutput></para>
<para>First, converts the normalized floating-point value v into a 8-bit integer value. Then, the results are packed into the returned 8-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packUnorm1x8: round(clamp(c, 0, +1) * 255.0)</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga833288fc0d4a79f19d0db75a6843bfe6">packUnorm2x8(vec2 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1gaf7d2f7341a9eeb4a436929d6f9ad08f2">packUnorm4x8(vec4 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga2f9963e5d762b10085b280d3662017ba_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga0acca4eb99c300fe2edeef7ebd8fa08b"/><section>
    <title>packUnorm2x3_1x2()</title>
<indexterm><primary>packUnorm2x3_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm2x3_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> glm::packUnorm2x3_1x2 (<link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> const &amp; v)</computeroutput></para>
<para>Convert each component of the normalized floating-point vector into unsigned integer values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> <link linkend="_group__gtc__packing_1gaeeacc5275329100c50fe8fc0871eb423">unpackUnorm2x3_1x2(uint8 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga0acca4eb99c300fe2edeef7ebd8fa08b_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gad68eb2f848ba867192b8787998c0595a"/><section>
    <title>packUnorm2x4()</title>
<indexterm><primary>packUnorm2x4</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm2x4</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> glm::packUnorm2x4 (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp; v)</computeroutput></para>
<para>Convert each component of the normalized floating-point vector into unsigned integer values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structvec2">vec2</link> <link linkend="_group__gtc__packing_1ga3afb0452954320f2d83fe6f38cb24147">unpackUnorm2x4(uint8 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gad68eb2f848ba867192b8787998c0595a_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga833288fc0d4a79f19d0db75a6843bfe6"/><section>
    <title>packUnorm2x8()</title>
<indexterm><primary>packUnorm2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packUnorm2x8 (<link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 8-bit integer values. Then, the results are packed into the returned 16-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packUnorm2x8: round(clamp(c, 0, +1) * 255.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> packUnorm1x8(float const&amp; v) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1gaf7d2f7341a9eeb4a436929d6f9ad08f2">packUnorm4x8(vec4 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga833288fc0d4a79f19d0db75a6843bfe6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga2cf2d11b40bd48639110456fd74c2e33"/><section>
    <title>packUnorm3x10_1x2()</title>
<indexterm><primary>packUnorm3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> glm::packUnorm3x10_1x2 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>First, converts the first three components of the normalized floating-point value v into 10-bit unsigned integer values. Then, converts the forth component of the normalized floating-point value v into 2-bit signed uninteger values. Then, the results are packed into the returned 32-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packUnorm3x10_1x2(xyz): round(clamp(c, 0, +1) * 1023.0) packUnorm3x10_1x2(w): round(clamp(c, 0, +1) * 3.0)</para>

<para>The first vector component specifies the 10 least-significant bits of the result; the forth component specifies the 2 most-significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> unpackUnorm3x10_1x2(uint32 const&amp; p) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga2cf2d11b40bd48639110456fd74c2e33">packUnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1gaf656d8862628f96b20de7a36eaa1fe56">packU3x10_1x2(uvec4 const&amp; v)</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga032e18fa5bc5b8f3897104aeb2f1e195">packI3x10_1x2(ivec4 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga2cf2d11b40bd48639110456fd74c2e33_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga1b41375846ed66768da78ca299d8d010"/><section>
    <title>packUnorm3x5_1x1()</title>
<indexterm><primary>packUnorm3x5_1x1</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm3x5_1x1</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packUnorm3x5_1x1 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>Convert each component of the normalized floating-point vector into unsigned integer values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1gaab3b476e8f320670717fd518f350ce28">unpackUnorm3x5_1x1(uint16 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga1b41375846ed66768da78ca299d8d010_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gac561f06c908b7302537a8ef29fcb409e"/><section>
    <title>packUnorm4x16()</title>
<indexterm><primary>packUnorm4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> glm::packUnorm4x16 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>First, converts each component of the normalized floating-point value v into 16-bit integer values. Then, the results are packed into the returned 64-bit unsigned integer.</para>

<para>The conversion for component c of v to fixed point is done as follows: packUnorm4x16: round(clamp(c, 0, +1) * 65535.0)</para>

<para>The first component of the vector will be written to the least significant bits of the output; the last component will be written to the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> packUnorm1x16(float const&amp; v) </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__core__func__packing_1ga0e2d107039fe608a209497af867b85fb">packUnorm2x16(vec2 const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml">GLSL packUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gac561f06c908b7302537a8ef29fcb409e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gad493c9f130e91dd8a4b360b05dcea573"/><section>
    <title>packUnorm4x4()</title>
<indexterm><primary>packUnorm4x4</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>packUnorm4x4</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> glm::packUnorm4x4 (<link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> const &amp; v)</computeroutput></para>
<para>Convert each component of the normalized floating-point vector into unsigned integer values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1ga38a0a518d53e15a9481c31dc1e574a40">unpackUnorm4x4(uint16 p)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gad493c9f130e91dd8a4b360b05dcea573_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga8b9c7991eb021d95c778bf5c0b2f7824"/><section>
    <title>unpackF2x11_1x10()</title>
<indexterm><primary>unpackF2x11_1x10</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackF2x11_1x10</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> glm::unpackF2x11_1x10 (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value . Then, each component is converted to a normalized floating-point value to generate the returned three-component vector.</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga8c2a0eeee677ca4dafd9e093d9e81062">packF2x11_1x10(vec3 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga8b9c7991eb021d95c778bf5c0b2f7824_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga8b9c7991eb021d95c778bf5c0b2f7824_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga15d8845a31e1e55d493803d0c8cb5910"/><section>
    <title>unpackF3x9_E1x5()</title>
<indexterm><primary>unpackF3x9_E1x5</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackF3x9_E1x5</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> glm::unpackF3x9_E1x5 (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into two 11-bit signless floating-point values and one 10-bit signless floating-point value . Then, each component is converted to a normalized floating-point value to generate the returned three-component vector.</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para>unpackF3x9_E1x5 allows decoding RGBE / RGB9E5 data</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga0984f9598edc648d59a9643d9a61b121">packF3x9_E1x5(vec3 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga15d8845a31e1e55d493803d0c8cb5910_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga7b2b3383bd086048acad804fe9dd4685"/><section>
    <title>unpackHalf()</title>
<indexterm><primary>unpackHalf</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackHalf</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, float, Q &gt; glm::unpackHalf (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, <link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link>, Q &gt; const &amp; p)</computeroutput></para>
<para>Returns a floating-point vector with components obtained by reinterpreting an integer vector as 16-bit floating-point numbers and converting them to 32-bit floating-point values. The first component of the vector is obtained from the 16 least-significant bits of v; the forth component is obtained from the 16 most-significant bits of v.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>vec&lt;L, uint16, Q&gt; <link linkend="_group__gtc__packing_1ga72b41f62169feb06d2c86613b8e1e6bf">packHalf(vec&lt;L, float, Q&gt; const&amp; v)</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga7b2b3383bd086048acad804fe9dd4685_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaa6eebcdfc746584b7d1823f1d5344fed"/><section>
    <title>unpackHalf1x16()</title>
<indexterm><primary>unpackHalf1x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackHalf1x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> float glm::unpackHalf1x16 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> v)</computeroutput></para>
<para>Returns a floating-point scalar with components obtained by unpacking a 16-bit unsigned integer into a 16-bit value, interpreted as a 16-bit floating-point number according to the OpenGL Specification, and converting it to 32-bit floating-point values.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structvec2">vec2</link> unpackHalf2x16(uint32 const&amp; v) </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> unpackHalf4x16(uint64 const&amp; v) </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml">GLSL unpackHalf2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaa6eebcdfc746584b7d1823f1d5344fed_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaa6eebcdfc746584b7d1823f1d5344fed_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaea526d6491ad40401eac34803984bf27"/><section>
    <title>unpackHalf4x16()</title>
<indexterm><primary>unpackHalf4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackHalf4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">glm::vec4</link> glm::unpackHalf4x16 (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</computeroutput></para>
<para>Returns a four-component floating-point vector with components obtained by unpacking a 64-bit unsigned integer into four 16-bit values, interpreting those values as 16-bit floating-point numbers according to the OpenGL Specification, and converting them to 32-bit floating-point values. The first component of the vector is obtained from the 16 least-significant bits of v; the forth component is obtained from the 16 most-significant bits of v.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>float unpackHalf1x16(uint16 const&amp; v) </para>

<para><link linkend="_structvec2">vec2</link> unpackHalf2x16(uint32 const&amp; v) </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml">GLSL unpackHalf2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaea526d6491ad40401eac34803984bf27_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaea526d6491ad40401eac34803984bf27_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga08bcd34cf9c34701d658dd861ee6e300"/><section>
    <title>unpackI3x10_1x2()</title>
<indexterm><primary>unpackI3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackI3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga2ba9198ee02a3947883e934a222548e0">ivec4</link> glm::unpackI3x10_1x2 (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</computeroutput></para>
<para>Unpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit signed integers.</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1gaf656d8862628f96b20de7a36eaa1fe56">packU3x10_1x2(uvec4 const&amp; v)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> unpackSnorm3x10_1x2(uint32 const&amp; p); </para>

<para><link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> unpackI3x10_1x2(uint32 const&amp; p); </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga08bcd34cf9c34701d658dd861ee6e300_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga639c216b452fc364b32c15eb5b8b6a87"/><section>
    <title>unpackInt2x16()</title>
<indexterm><primary>unpackInt2x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackInt2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__int2__sized_1gad912fd04abb876a5b806118ec6e0f283">i16vec2</link> glm::unpackInt2x16 (int p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>int <link linkend="_group__gtc__packing_1ga0182984c14b2b59fd74e72af3f3b4bb9">packInt2x16(i16vec2 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga639c216b452fc364b32c15eb5b8b6a87_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga6410b50fa48d15e70b2c34174ee4a3fc"/><section>
    <title>unpackInt2x32()</title>
<indexterm><primary>unpackInt2x32</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackInt2x32</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__int2__sized_1ga99191e0de942ecc1df32d522f8064789">i32vec2</link> glm::unpackInt2x32 (<link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>int packInt2x16(i32vec2 const&amp; v) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga6410b50fa48d15e70b2c34174ee4a3fc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga55b4670bffab6ddb39d4a0fbf98718c1"/><section>
    <title>unpackInt2x8()</title>
<indexterm><primary>unpackInt2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackInt2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__int2__sized_1gade57e4b55fe2b2345a4f2ac2b149cd32">i8vec2</link> glm::unpackInt2x8 (<link linkend="_group__ext__scalar__int__sized_1ga22d9cd55823f7c4aeee13aceafd7238a">int16</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__int__sized_1ga22d9cd55823f7c4aeee13aceafd7238a">int16</link> <link linkend="_group__gtc__packing_1ga532b06d8915c6c65649f828e9106a1d9">packInt2x8(i8vec2 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga55b4670bffab6ddb39d4a0fbf98718c1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga625619888b95299a1ee0d9e50469c482"/><section>
    <title>unpackInt4x16()</title>
<indexterm><primary>unpackInt4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackInt4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__int4__sized_1ga99a249a4cc129cb527c48d3afd38b666">i16vec4</link> glm::unpackInt4x16 (<link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__int__sized_1ga435d75819cce297cc5fa21bd84ef89a5">int64</link> <link linkend="_group__gtc__packing_1gac3ef78d62735b5c34503c33e37e401c2">packInt4x16(i16vec4 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga625619888b95299a1ee0d9e50469c482_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaeed27076c5d26f4cca0d06637d3e878c"/><section>
    <title>unpackInt4x8()</title>
<indexterm><primary>unpackInt4x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackInt4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__int4__sized_1gaaad99cfb998ddcb74e9c33d0149fdd0e">i8vec4</link> glm::unpackInt4x8 (<link linkend="_group__ext__scalar__int__sized_1gafc36c598ca57ab4a9286a53bf91a5fff">int32</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__int__sized_1gafc36c598ca57ab4a9286a53bf91a5fff">int32</link> packInt2x8(i8vec4 const&amp; v) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaeed27076c5d26f4cca0d06637d3e878c_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gafba3d7070c4918ad1ce3ac3112b30a8f"/><section>
    <title>unpackRGBM()</title>
<indexterm><primary>unpackRGBM</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackRGBM</secondary></indexterm>
<computeroutput>template&lt;<link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename T , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; 3, T, Q &gt; glm::unpackRGBM (<link linkend="_structglm_1_1vec">vec</link>&lt; 4, T, Q &gt; const &amp; rgbm)</computeroutput></para>
<para>Returns a floating-point vector with components obtained by reinterpreting an integer vector as 16-bit floating-point numbers and converting them to 32-bit floating-point values. The first component of the vector is obtained from the 16 least-significant bits of v; the forth component is obtained from the 16 most-significant bits of v.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structglm_1_1vec_3_014_00_01_t_00_01_q_01_4">vec&lt;4, T, Q&gt;</link> packRGBM(vec&lt;3, float, Q&gt; const&amp; v) </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gafba3d7070c4918ad1ce3ac3112b30a8f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga5ea23187b1b7d15b53cf06ef286a8f09"/><section>
    <title>unpackSnorm()</title>
<indexterm><primary>unpackSnorm</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackSnorm</secondary></indexterm>
<computeroutput>template&lt;typename floatType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename intType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; glm::unpackSnorm (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, intType, Q &gt; const &amp; v)</computeroutput></para>
<para>Convert a packed integer to a normalized floating-point vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>vec&lt;L, intType, Q&gt; <link linkend="_group__gtc__packing_1ga4063fe32d0d7ac6aff3b4001429e7c9d">packSnorm(vec&lt;L, floatType, Q&gt; const&amp; v)</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga246f451cebf590726324f7a283e3d65e"/><section>
    <title>unpackSnorm1x16()</title>
<indexterm><primary>unpackSnorm1x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackSnorm1x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> float glm::unpackSnorm1x16 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>First, unpacks a single 16-bit unsigned integer p into a single 16-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned scalar.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm1x16: clamp(f / 32767.0, -1, +1)</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structvec2">vec2</link> <link linkend="_group__core__func__packing_1gacd8f8971a3fe28418be0d0fa1f786b38">unpackSnorm2x16(uint32 p)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1ga1bfaa3f217fd7a4b6b9d3117ecb3fcac">unpackSnorm4x16(uint64 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm1x16.xml">GLSL unpackSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga246f451cebf590726324f7a283e3d65e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga6f2bebf536fbf7c8b97d4b306bb3354e"/><section>
    <title>unpackSnorm1x8()</title>
<indexterm><primary>unpackSnorm1x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackSnorm1x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> float glm::unpackSnorm1x8 (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</computeroutput></para>
<para>First, unpacks a single 8-bit unsigned integer p into a single 8-bit signed integers. Then, the value is converted to a normalized floating-point value to generate the returned scalar.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm1x8: clamp(f / 127.0, -1, +1)</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structvec2">vec2</link> <link linkend="_group__gtc__packing_1ga27f30f0281b88e152b0895f5e2ead878">unpackSnorm2x8(uint16 p)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__core__func__packing_1ga2db488646d48b7c43d3218954523fe82">unpackSnorm4x8(uint32 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga6f2bebf536fbf7c8b97d4b306bb3354e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga27f30f0281b88e152b0895f5e2ead878"/><section>
    <title>unpackSnorm2x8()</title>
<indexterm><primary>unpackSnorm2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackSnorm2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> glm::unpackSnorm2x8 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>First, unpacks a single 16-bit unsigned integer p into a pair of 8-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned two-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm2x8: clamp(f / 127.0, -1, +1)</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>float <link linkend="_group__gtc__packing_1ga6f2bebf536fbf7c8b97d4b306bb3354e">unpackSnorm1x8(uint8 p)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__core__func__packing_1ga2db488646d48b7c43d3218954523fe82">unpackSnorm4x8(uint32 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml">GLSL unpackSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga27f30f0281b88e152b0895f5e2ead878_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga8b8bb827a3743ca553d8702d3e337101"/><section>
    <title>unpackSnorm3x10_1x2()</title>
<indexterm><primary>unpackSnorm3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackSnorm3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackSnorm3x10_1x2 (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm3x10_1x2(xyz): clamp(f / 511.0, -1, +1) unpackSnorm3x10_1x2(w): clamp(f / 511.0, -1, +1)</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga0d4157cec37c0312216a7be1cc92df54">packSnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> unpackUnorm3x10_1x2(uint32 const&amp; p)) </para>

<para><link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> unpackI3x10_1x2(uint32 const&amp; p) </para>

<para><link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> unpackU3x10_1x2(uint32 const&amp; p) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga8b8bb827a3743ca553d8702d3e337101_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga1bfaa3f217fd7a4b6b9d3117ecb3fcac"/><section>
    <title>unpackSnorm4x16()</title>
<indexterm><primary>unpackSnorm4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackSnorm4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackSnorm4x16 (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</computeroutput></para>
<para>First, unpacks a single 64-bit unsigned integer p into four 16-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm4x16: clamp(f / 32767.0, -1, +1)</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>float <link linkend="_group__gtc__packing_1ga246f451cebf590726324f7a283e3d65e">unpackSnorm1x16(uint16 p)</link> </para>

<para><link linkend="_structvec2">vec2</link> <link linkend="_group__core__func__packing_1gacd8f8971a3fe28418be0d0fa1f786b38">unpackSnorm2x16(uint32 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml">GLSL unpackSnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga1bfaa3f217fd7a4b6b9d3117ecb3fcac_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga119aa2d7d55952f9dc4214390a6ffefc"/><section>
    <title>unpackU3x10_1x2()</title>
<indexterm><primary>unpackU3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackU3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> glm::unpackU3x10_1x2 (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</computeroutput></para>
<para>Unpacks a single 32-bit unsigned integer p into three 10-bit and one 2-bit unsigned integers.</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1gaf656d8862628f96b20de7a36eaa1fe56">packU3x10_1x2(uvec4 const&amp; v)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> unpackSnorm3x10_1x2(uint32 const&amp; p); </para>

<para><link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> unpackI3x10_1x2(uint32 const&amp; p); </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga119aa2d7d55952f9dc4214390a6ffefc_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga7778efa924e6efc386cb9f373bb06b72"/><section>
    <title>unpackUint2x16()</title>
<indexterm><primary>unpackUint2x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUint2x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__uint2__sized_1ga50bd2ceeb100a187e7c46f135269a0ec">u16vec2</link> glm::unpackUint2x16 (<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link> <link linkend="_group__gtc__packing_1gad5ca2e64edae3c233657c9fb0d18a9c9">packUint2x16(u16vec2 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga7778efa924e6efc386cb9f373bb06b72_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gab211ea5f8cf86f00efa4fd53cb302c82"/><section>
    <title>unpackUint2x32()</title>
<indexterm><primary>unpackUint2x32</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUint2x32</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__uint2__sized_1gad854a1005ce84d8f6e8f05e42893f5c9">u32vec2</link> glm::unpackUint2x32 (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>int packUint2x16(u32vec2 const&amp; v) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gab211ea5f8cf86f00efa4fd53cb302c82_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga060e0e7e299aa73ff869c197ebf44210"/><section>
    <title>unpackUint2x8()</title>
<indexterm><primary>unpackUint2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUint2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__uint2__sized_1ga01e28d0272428f94d22ea6111f0112be">u8vec2</link> glm::unpackUint2x8 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> packInt2x8(u8vec2 const&amp; v) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga060e0e7e299aa73ff869c197ebf44210_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaf1eea82404af955004aae19a2dcb55f1"/><section>
    <title>unpackUint4x16()</title>
<indexterm><primary>unpackUint4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUint4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__uint4__sized_1ga049d45ad8d0f78578d7ceb86a7fdaae4">u16vec4</link> glm::unpackUint4x16 (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> <link linkend="_group__gtc__packing_1ga19813cb34dd7102f9612ba6c0d9ef377">packUint4x16(u16vec4 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaf1eea82404af955004aae19a2dcb55f1_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga99229dc6cb31d82c39a324d5753792c6"/><section>
    <title>unpackUint4x8()</title>
<indexterm><primary>unpackUint4x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUint4x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__ext__vector__uint4__sized_1ga6c8841fa492bd5b1078b171452fd6974">u8vec4</link> glm::unpackUint4x8 (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</computeroutput></para>
<para>Convert a packed integer into an integer vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> packUint4x8(u8vec2 const&amp; v) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga99229dc6cb31d82c39a324d5753792c6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga620ed87ba2ddf15f641e93a9b0257e25"/><section>
    <title>unpackUnorm()</title>
<indexterm><primary>unpackUnorm</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm</secondary></indexterm>
<computeroutput>template&lt;typename floatType , <link linkend="_namespaceglm_1a090a0de2260835bee80e71a702492ed9">length_t</link> L, typename uintType , <link linkend="_namespaceglm_1a36ed105b07c7746804d7fdc7cc90ff25">qualifier</link> Q&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1ab2d052de21a70539923e9bcbf6e83a51">GLM_FUNC_DECL</link> <link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, floatType, Q &gt; glm::unpackUnorm (<link linkend="_structglm_1_1vec">vec</link>&lt; <link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>, uintType, Q &gt; const &amp; v)</computeroutput></para>
<para>Convert a packed integer to a normalized floating-point vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>vec&lt;L, intType, Q&gt; <link linkend="_group__gtc__packing_1ga224c97fa9cec9235173084d851fbd78e">packUnorm(vec&lt;L, floatType, Q&gt; const&amp; v)</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga7770e3ade4f4764cc1b2eb42ac4ec188"/><section>
    <title>unpackUnorm1x16()</title>
<indexterm><primary>unpackUnorm1x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm1x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> float glm::unpackUnorm1x16 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>First, unpacks a single 16-bit unsigned integer p into a of 16-bit unsigned integers. Then, the value is converted to a normalized floating-point value to generate the returned scalar.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackUnorm1x16: f / 65535.0</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structvec2">vec2</link> <link linkend="_group__core__func__packing_1ga1f66188e5d65afeb9ffba1ad971e4007">unpackUnorm2x16(uint32 p)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__gtc__packing_1gafb2b502bc406031a5618ce930139a9e3">unpackUnorm4x16(uint64 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga7770e3ade4f4764cc1b2eb42ac4ec188_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga6804d0525daf68bcac226f46fbb3b24e"/><section>
    <title>unpackUnorm1x5_1x6_1x5()</title>
<indexterm><primary>unpackUnorm1x5_1x6_1x5</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm1x5_1x6_1x5</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> glm::unpackUnorm1x5_1x6_1x5 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>Convert a packed integer to a normalized floating-point vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga0fcb493167d540aca105d11df5c55503">packUnorm1x5_1x6_1x5(vec3 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga6804d0525daf68bcac226f46fbb3b24e_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga32f3f2642df2ea87449d59fb614a8305"/><section>
    <title>unpackUnorm1x8()</title>
<indexterm><primary>unpackUnorm1x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm1x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> float glm::unpackUnorm1x8 (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</computeroutput></para>
<para>Convert a single 8-bit integer to a normalized floating-point value.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackUnorm4x8: f / 255.0</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_structvec2">vec2</link> <link linkend="_group__gtc__packing_1ga96ce0c24339ee676e28a027fffd1edf6">unpackUnorm2x8(uint16 p)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__core__func__packing_1ga7f903259150b67e9466f5f8edffcd197">unpackUnorm4x8(uint32 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga32f3f2642df2ea87449d59fb614a8305_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaeeacc5275329100c50fe8fc0871eb423"/><section>
    <title>unpackUnorm2x3_1x2()</title>
<indexterm><primary>unpackUnorm2x3_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm2x3_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga4320b87e41013b7e875f845f439fc498">vec3</link> glm::unpackUnorm2x3_1x2 (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</computeroutput></para>
<para>Convert a packed integer to a normalized floating-point vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> <link linkend="_group__gtc__packing_1ga0acca4eb99c300fe2edeef7ebd8fa08b">packUnorm2x3_1x2(vec3 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaeeacc5275329100c50fe8fc0871eb423_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga3afb0452954320f2d83fe6f38cb24147"/><section>
    <title>unpackUnorm2x4()</title>
<indexterm><primary>unpackUnorm2x4</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm2x4</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> glm::unpackUnorm2x4 (<link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> p)</computeroutput></para>
<para>Convert a packed integer to a normalized floating-point vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga536143d82147bb78849bfccffece8bff">uint8</link> <link linkend="_group__gtc__packing_1gad68eb2f848ba867192b8787998c0595a">packUnorm2x4(vec2 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga3afb0452954320f2d83fe6f38cb24147_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga96ce0c24339ee676e28a027fffd1edf6"/><section>
    <title>unpackUnorm2x8()</title>
<indexterm><primary>unpackUnorm2x8</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm2x8</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga6ebf1ff1f152ff34c800b6997d5f311f">vec2</link> glm::unpackUnorm2x8 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>First, unpacks a single 16-bit unsigned integer p into a pair of 8-bit unsigned integers. Then, each component is converted to a normalized floating-point value to generate the returned two-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackUnorm4x8: f / 255.0</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>float <link linkend="_group__gtc__packing_1ga32f3f2642df2ea87449d59fb614a8305">unpackUnorm1x8(uint8 v)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> <link linkend="_group__core__func__packing_1ga7f903259150b67e9466f5f8edffcd197">unpackUnorm4x8(uint32 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml">GLSL unpackUnorm4x8 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga96ce0c24339ee676e28a027fffd1edf6_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaf69ace2b5e9234f8afb4e99c3df1193d"/><section>
    <title>unpackUnorm3x10_1x2()</title>
<indexterm><primary>unpackUnorm3x10_1x2</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm3x10_1x2</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackUnorm3x10_1x2 (<link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> p)</computeroutput></para>
<para>First, unpacks a single 32-bit unsigned integer p into four 16-bit signed integers. Then, each component is converted to a normalized floating-point value to generate the returned four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackSnorm3x10_1x2(xyz): clamp(f / 1023.0, 0, +1) unpackSnorm3x10_1x2(w): clamp(f / 3.0, 0, +1)</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga22033ef3f73efe1da8e437410adda3be">uint32</link> <link linkend="_group__gtc__packing_1ga0d4157cec37c0312216a7be1cc92df54">packSnorm3x10_1x2(vec4 const&amp; v)</link> </para>

<para><link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> unpackInorm3x10_1x2(uint32 const&amp; p)) </para>

<para><link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> unpackI3x10_1x2(uint32 const&amp; p) </para>

<para><link linkend="_group__core__vector_1ga1f435aa3882ae117565222321adeb3f1">uvec4</link> unpackU3x10_1x2(uint32 const&amp; p) </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaf69ace2b5e9234f8afb4e99c3df1193d_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gaab3b476e8f320670717fd518f350ce28"/><section>
    <title>unpackUnorm3x5_1x1()</title>
<indexterm><primary>unpackUnorm3x5_1x1</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm3x5_1x1</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackUnorm3x5_1x1 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>Convert a packed integer to a normalized floating-point vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1ga1b41375846ed66768da78ca299d8d010">packUnorm3x5_1x1(vec4 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gaab3b476e8f320670717fd518f350ce28_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1gafb2b502bc406031a5618ce930139a9e3"/><section>
    <title>unpackUnorm4x16()</title>
<indexterm><primary>unpackUnorm4x16</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm4x16</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackUnorm4x16 (<link linkend="_group__ext__scalar__uint__sized_1gae3632bf9b37da66233d78930dd06378a">uint64</link> p)</computeroutput></para>
<para>First, unpacks a single 64-bit unsigned integer p into four 16-bit unsigned integers. Then, each component is converted to a normalized floating-point value to generate the returned four-component vector.</para>

<para>The conversion for unpacked fixed-point value f to floating point is done as follows: unpackUnormx4x16: f / 65535.0</para>

<para>The first component of the returned vector will be extracted from the least significant bits of the input; the last component will be extracted from the most significant bits.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para>float <link linkend="_group__gtc__packing_1ga7770e3ade4f4764cc1b2eb42ac4ec188">unpackUnorm1x16(uint16 p)</link> </para>

<para><link linkend="_structvec2">vec2</link> <link linkend="_group__core__func__packing_1ga1f66188e5d65afeb9ffba1ad971e4007">unpackUnorm2x16(uint32 p)</link> </para>

<para><link xlink:href="http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml">GLSL unpackUnorm2x16 man page</link> </para>

<para><link xlink:href="http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_gafb2b502bc406031a5618ce930139a9e3_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_group__gtc__packing_1ga38a0a518d53e15a9481c31dc1e574a40"/><section>
    <title>unpackUnorm4x4()</title>
<indexterm><primary>unpackUnorm4x4</primary><secondary>GLM_GTC_packing</secondary></indexterm>
<indexterm><primary>GLM_GTC_packing</primary><secondary>unpackUnorm4x4</secondary></indexterm>
<para><computeroutput><link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link> <link linkend="_group__core__vector_1ga233f0e8f1aecf686e67c5c39316c4da8">vec4</link> glm::unpackUnorm4x4 (<link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> p)</computeroutput></para>
<para>Convert a packed integer to a normalized floating-point vector.</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group__gtc__packing">GLM_GTC_packing</link> </para>

<para><link linkend="_group__ext__scalar__uint__sized_1ga6201f5c504a50620708b19bae303c32a">uint16</link> <link linkend="_group__gtc__packing_1gad493c9f130e91dd8a4b360b05dcea573">packUnorm4x4(vec4 const&amp; v)</link> </para>
</formalpara>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__gtc__packing_ga38a0a518d53e15a9481c31dc1e574a40_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
</section>
