<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2numeric__traits_8h" xml:lang="en-US">
<title>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/numeric_traits.h File Reference</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/experimental/bits/numeric_traits.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;type_traits&gt;<?linebreak?></programlisting>Include dependency graph for numeric_traits.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="_old_2_classes_2lib_2include_2c_09_09_2experimental_2bits_2numeric__traits_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists__impl">std::__value_exists_impl&lt; _Trait, _Tp, typename &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists__impl_3_01___trait_00_01___tp_00_01void__t_3_01decltype_07___trai2a9d6c26cbf51bee76e01c3e3a87e2f8">std::__value_exists_impl&lt; _Trait, _Tp, void_t&lt; decltype(_Trait&lt; _Tp &gt;::value)&gt; &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl">std::__digits_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01___tp_00_01true_01_4">std::__digits_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01float_00_01true_01_4">std::__digits_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01double_00_01true_01_4">std::__digits_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits__impl_3_01long_01double_00_01true_01_4">std::__digits_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl">std::__digits10_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01___tp_00_01true_01_4">std::__digits10_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01float_00_01true_01_4">std::__digits10_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01double_00_01true_01_4">std::__digits10_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10__impl_3_01long_01double_00_01true_01_4">std::__digits10_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10__impl">std::__max_digits10_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10__impl_3_01___tp_00_01true_01_4">std::__max_digits10_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl">std::__max_exponent_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01float_01_4">std::__max_exponent_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01double_01_4">std::__max_exponent_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent__impl_3_01long_01double_01_4">std::__max_exponent_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl">std::__max_exponent10_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01float_01_4">std::__max_exponent10_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01double_01_4">std::__max_exponent10_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10__impl_3_01long_01double_01_4">std::__max_exponent10_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl">std::__min_exponent_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01float_01_4">std::__min_exponent_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01double_01_4">std::__min_exponent_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent__impl_3_01long_01double_01_4">std::__min_exponent_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl">std::__min_exponent10_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01float_01_4">std::__min_exponent10_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01double_01_4">std::__min_exponent10_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10__impl_3_01long_01double_01_4">std::__min_exponent10_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix__impl">std::__radix_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix__impl_3_01___tp_00_01true_01_4">std::__radix_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____value__exists">std::__value_exists&lt; _Trait, _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl">std::__norm_min_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01___tp_00_01true_01_4">std::__norm_min_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01float_00_01true_01_4">std::__norm_min_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01double_00_01true_01_4">std::__norm_min_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min__impl_3_01long_01double_00_01true_01_4">std::__norm_min_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____denorm__min__impl">std::__denorm_min_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl">std::__epsilon_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01float_01_4">std::__epsilon_impl&lt; float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01double_01_4">std::__epsilon_impl&lt; double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon__impl_3_01long_01double_01_4">std::__epsilon_impl&lt; long double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl">std::__finite_min_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01___tp_00_01true_01_4">std::__finite_min_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01float_00_01true_01_4">std::__finite_min_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01double_00_01true_01_4">std::__finite_min_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min__impl_3_01long_01double_00_01true_01_4">std::__finite_min_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl">std::__finite_max_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01___tp_00_01true_01_4">std::__finite_max_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01float_00_01true_01_4">std::__finite_max_impl&lt; float, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01double_00_01true_01_4">std::__finite_max_impl&lt; double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max__impl_3_01long_01double_00_01true_01_4">std::__finite_max_impl&lt; long double, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____infinity__impl">std::__infinity_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____quiet___na_n__impl">std::__quiet_NaN_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold__impl">std::__reciprocal_overflow_threshold_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold__impl_3_01___tp_00_01true_01_4">std::__reciprocal_overflow_threshold_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error__impl">std::__round_error_impl&lt; _Tp, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error__impl_3_01___tp_00_01true_01_4">std::__round_error_impl&lt; _Tp, true &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____signaling___na_n__impl">std::__signaling_NaN_impl&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____denorm__min">std::__denorm_min&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____epsilon">std::__epsilon&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__max">std::__finite_max&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____finite__min">std::__finite_min&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____infinity">std::__infinity&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____norm__min">std::__norm_min&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____quiet___na_n">std::__quiet_NaN&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____reciprocal__overflow__threshold">std::__reciprocal_overflow_threshold&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____round__error">std::__round_error&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____signaling___na_n">std::__signaling_NaN&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits">std::__digits&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____digits10">std::__digits10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__digits10">std::__max_digits10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent">std::__max_exponent&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____max__exponent10">std::__max_exponent10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent">std::__min_exponent&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____min__exponent10">std::__min_exponent10&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____radix">std::__radix&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____has__iec559__storage__format">std::__has_iec559_storage_format&lt; _Tp &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structstd_1_1____has__iec559__behavior">std::__has_iec559_behavior&lt; _Trait, _Tp &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespacestd">std</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;template&lt; typename &gt; class _Trait, typename _Tp , typename _Up  = _Tp&gt; </para><para>constexpr _Up <link linkend="_namespacestd_1afb0b54c9aca639344dd22870d4179eca">std::__value_or</link> (_Up __def=_Up()) noexcept</para>
</listitem>
        </itemizedlist>
</simplesect>
</section>
