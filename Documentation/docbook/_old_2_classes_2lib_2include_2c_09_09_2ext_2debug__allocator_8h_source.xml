<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2ext_2debug__allocator_8h_source" xml:lang="en-US">
<title>debug_allocator.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/ext/debug_allocator.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Allocators&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996-1997</emphasis>
27 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
28 <emphasis role="comment">&#32;*</emphasis>
29 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
30 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
31 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
32 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
33 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
34 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
35 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
36 <emphasis role="comment">&#32;*/</emphasis>
37 
42 <emphasis role="preprocessor">#ifndef&#32;_DEBUG_ALLOCATOR_H</emphasis>
43 <emphasis role="preprocessor">#define&#32;_DEBUG_ALLOCATOR_H&#32;1</emphasis>
44 
45 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
48 
49 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__cxx">__gnu_cxx</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
50 {
51 _GLIBCXX_BEGIN_NAMESPACE_VERSION
52 
59 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>debug_allocator
61 &#32;&#32;&#32;&#32;{
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>debug_allocator;
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__alloc_traits&lt;_Alloc&gt;&#32;_Traits;
65 
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
67 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
68 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::difference_type&#32;difference_type;
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
70 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::const_pointer&#32;&#32;&#32;&#32;const_pointer;
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::const_reference&#32;&#32;const_reference;
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
74 
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>rebind
77 &#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::template&#32;rebind&lt;_Up&gt;::other&#32;__other;
79 
80 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
81 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;debug_allocator&lt;__other&gt;&#32;other;
82 &#32;&#32;&#32;&#32;};
83 
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_extra&#32;is&#32;the&#32;number&#32;of&#32;objects&#32;that&#32;correspond&#32;to&#32;the</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;extra&#32;space&#32;where&#32;debug&#32;information&#32;is&#32;stored.</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_extra;
88 &#32;&#32;&#32;&#32;&#32;&#32;
89 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocator;
90 
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2,
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__alloc_traits&lt;_Alloc2&gt;::template
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rebind&lt;value_type&gt;::other&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__convertible
95 &#32;&#32;&#32;&#32;{&#32;};
96 
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
98 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__convertible&lt;_Alloc2,&#32;_Alloc&gt;
99 &#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__type;
101 &#32;&#32;&#32;&#32;};
102 
103 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;_S_extra()
104 &#32;&#32;&#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::size_t&#32;__obj_size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(value_type);
106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(size_type)&#32;+&#32;__obj_size&#32;-&#32;1)&#32;/&#32;__obj_size;&#32;
107 &#32;&#32;&#32;&#32;&#32;&#32;}
108 
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
110 &#32;&#32;&#32;&#32;&#32;&#32;debug_allocator()&#32;:&#32;_M_extra(_S_extra())&#32;{&#32;}
111 
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
113 &#32;&#32;&#32;&#32;debug_allocator(<emphasis role="keyword">const</emphasis>&#32;debug_allocator&lt;_Alloc2&gt;&amp;&#32;__a2,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__convertible&lt;_Alloc2&gt;::__type&#32;=&#32;0)
115 &#32;&#32;&#32;&#32;:&#32;_M_extra(_S_extra()),&#32;_M_allocator(__a2._M_allocator)&#32;&#32;{&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;debug_allocator(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
118 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_extra(_S_extra()),&#32;_M_allocator(__a)&#32;&#32;{&#32;}
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
121 &#32;&#32;&#32;&#32;&#32;&#32;allocate(size_type&#32;__n)
122 &#32;&#32;&#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__res&#32;=&#32;_M_allocator.allocate(__n&#32;+&#32;_M_extra);&#32;&#32;&#32;&#32;&#32;&#32;
124 &#32;&#32;&#32;&#32;size_type*&#32;__ps&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>size_type*<emphasis role="keyword">&gt;</emphasis>(__res);
125 &#32;&#32;&#32;&#32;*__ps&#32;=&#32;__n;
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res&#32;+&#32;_M_extra;
127 &#32;&#32;&#32;&#32;&#32;&#32;}
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
130 &#32;&#32;&#32;&#32;&#32;&#32;allocate(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__hint)
131 &#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__res&#32;=&#32;_M_allocator.allocate(__n&#32;+&#32;_M_extra,&#32;__hint);
133 &#32;&#32;&#32;&#32;size_type*&#32;__ps&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>size_type*<emphasis role="keyword">&gt;</emphasis>(__res);
134 &#32;&#32;&#32;&#32;*__ps&#32;=&#32;__n;
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res&#32;+&#32;_M_extra;
136 &#32;&#32;&#32;&#32;&#32;&#32;}
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;deallocate(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;size_type&#32;__n)
140 &#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>std::__throw_runtime_error;
142 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__p)
143 &#32;&#32;&#32;&#32;&#32;&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__real_p&#32;=&#32;__p&#32;-&#32;_M_extra;
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>size_type*<emphasis role="keyword">&gt;</emphasis>(__real_p)&#32;!=&#32;__n)
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__throw_runtime_error(<emphasis role="stringliteral">&quot;debug_allocator::deallocate&#32;wrong&#32;size&quot;</emphasis>);
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocator.deallocate(__real_p,&#32;__n&#32;+&#32;_M_extra);
148 &#32;&#32;&#32;&#32;&#32;&#32;}
149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;__throw_runtime_error(<emphasis role="stringliteral">&quot;debug_allocator::deallocate&#32;null&#32;pointer&quot;</emphasis>);
151 &#32;&#32;&#32;&#32;&#32;&#32;}
152 
153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
154 &#32;&#32;&#32;&#32;&#32;&#32;construct(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
155 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Traits::construct(_M_allocator,&#32;__p,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
156 
157 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
160 &#32;&#32;&#32;&#32;construct(_Tp*&#32;__p,&#32;_Args&amp;&amp;...&#32;__args)
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;_Traits::construct(_M_allocator,&#32;__p,
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
164 &#32;&#32;&#32;&#32;}
165 <emphasis role="preprocessor">#endif</emphasis>
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
169 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_Tp*&#32;__p)
170 &#32;&#32;&#32;&#32;{&#32;_Traits::destroy(_M_allocator,&#32;__p);&#32;}
171 
172 &#32;&#32;&#32;&#32;&#32;&#32;size_type
173 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;throw()
174 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Traits::max_size(_M_allocator)&#32;-&#32;_M_extra;&#32;}
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
178 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;debug_allocator&amp;&#32;__lhs,
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;debug_allocator&lt;_Alloc2&gt;&amp;&#32;__rhs)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
180 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_allocator&#32;==&#32;debug_allocator(__rhs)._M_allocator;&#32;}
181 
182 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc2&gt;
184 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
185 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;debug_allocator&amp;&#32;__lhs,
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;debug_allocator&lt;_Alloc2&gt;&amp;&#32;__rhs)&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link>
187 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
188 <emphasis role="preprocessor">#endif</emphasis>
189 &#32;&#32;&#32;&#32;};
190 
191 _GLIBCXX_END_NAMESPACE_VERSION
192 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
193 
194 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
