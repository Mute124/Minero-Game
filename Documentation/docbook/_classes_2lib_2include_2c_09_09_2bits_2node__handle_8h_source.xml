<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2node__handle_8h_source" xml:lang="en-US">
<title>node_handle.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/node_handle.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Node&#32;handles&#32;for&#32;containers&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2016-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="preprocessor">#ifndef&#32;_NODE_HANDLE</emphasis>
32 <emphasis role="preprocessor">#define&#32;_NODE_HANDLE&#32;1</emphasis>
33 
34 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
35 
36 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
37 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_node_extract&#32;201606L</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/alloc_traits.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/ptr_traits.h&gt;</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
63 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeAlloc&gt;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Node_handle_common
65 &#32;&#32;&#32;&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_AllocTraits&#32;=&#32;allocator_traits&lt;_NodeAlloc&gt;;
67 
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>allocator_type&#32;=&#32;__alloc_rebind&lt;_NodeAlloc,&#32;_Val&gt;;
70 
71 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
72 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;const&#32;noexcept
73 &#32;&#32;&#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;__glibcxx_assert(!this-&gt;empty());
75 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type(_M_alloc._M_alloc);
76 &#32;&#32;&#32;&#32;&#32;&#32;}
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;[[nodiscard]]&#32;<emphasis role="keywordtype">bool</emphasis>&#32;empty()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
81 
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
84 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Node_handle_common()&#32;noexcept&#32;:&#32;_M_ptr()&#32;{&#32;}
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;~_Node_handle_common()
87 &#32;&#32;&#32;&#32;&#32;&#32;{
88 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!empty())
89 &#32;&#32;&#32;&#32;&#32;&#32;_M_reset();
90 &#32;&#32;&#32;&#32;&#32;&#32;}
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle_common(_Node_handle_common&amp;&amp;&#32;__nh)&#32;noexcept
93 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__nh._M_ptr)
94 &#32;&#32;&#32;&#32;&#32;&#32;{
95 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ptr)
96 &#32;&#32;&#32;&#32;&#32;&#32;_M_move(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));
97 &#32;&#32;&#32;&#32;&#32;&#32;}
98 
99 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle_common&amp;
100 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Node_handle_common&amp;&amp;&#32;__nh)&#32;<emphasis role="keyword">noexcept</emphasis>
101 &#32;&#32;&#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
103 &#32;&#32;&#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__nh.empty())
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_move(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));
106 &#32;&#32;&#32;&#32;&#32;&#32;}
107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nh.empty())
108 &#32;&#32;&#32;&#32;&#32;&#32;_M_reset();
109 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;current&#32;node&#32;before&#32;replacing&#32;the&#32;allocator.</emphasis>
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_AllocTraits::destroy(*_M_alloc,&#32;_M_ptr-&gt;_M_valptr());
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_AllocTraits::deallocate(*_M_alloc,&#32;_M_ptr,&#32;1);
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_alloc&#32;=&#32;__nh._M_alloc.release();&#32;<emphasis role="comment">//&#32;assigns&#32;if&#32;POCMA</emphasis>
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__nh._M_ptr;
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__nh._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
118 &#32;&#32;&#32;&#32;&#32;&#32;}
119 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
120 &#32;&#32;&#32;&#32;&#32;&#32;}
121 
122 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle_common(<emphasis role="keyword">typename</emphasis>&#32;_AllocTraits::pointer&#32;__ptr,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_NodeAlloc&amp;&#32;__alloc)
124 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__ptr),&#32;_M_alloc(__alloc)
125 &#32;&#32;&#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;__glibcxx_assert(__ptr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
127 &#32;&#32;&#32;&#32;&#32;&#32;}
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
130 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(_Node_handle_common&amp;&#32;__nh)&#32;<emphasis role="keyword">noexcept</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(empty())
133 &#32;&#32;&#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__nh.empty())
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_move(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));
136 &#32;&#32;&#32;&#32;&#32;&#32;}
137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__nh.empty())
138 &#32;&#32;&#32;&#32;&#32;&#32;__nh._M_move(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(*<emphasis role="keyword">this</emphasis>));
139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
140 &#32;&#32;&#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_M_ptr,&#32;__nh._M_ptr);
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_alloc.swap(__nh._M_alloc);&#32;<emphasis role="comment">//&#32;swaps&#32;if&#32;POCS</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;}
145 &#32;&#32;&#32;&#32;&#32;&#32;}
146 
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Moves&#32;the&#32;pointer&#32;and&#32;allocator&#32;from&#32;__nh&#32;to&#32;*this.</emphasis>
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;empty()&#32;&amp;&amp;&#32;!__nh.empty()</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Postcondition:&#32;!empty()&#32;&amp;&amp;&#32;__nh.empty()</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;_M_move(_Node_handle_common&amp;&amp;&#32;__nh)&#32;<emphasis role="keyword">noexcept</emphasis>
153 &#32;&#32;&#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;::new&#32;(std::__addressof(_M_alloc))&#32;_NodeAlloc(__nh._M_alloc.release());
155 &#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__nh._M_ptr;
156 &#32;&#32;&#32;&#32;__nh._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
157 &#32;&#32;&#32;&#32;&#32;&#32;}
158 
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Deallocates&#32;the&#32;node,&#32;destroys&#32;the&#32;allocator.</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;!empty()</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Postcondition:&#32;empty()</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;_M_reset()&#32;noexcept
164 &#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;_NodeAlloc&#32;__alloc&#32;=&#32;_M_alloc.release();
166 &#32;&#32;&#32;&#32;_AllocTraits::destroy(__alloc,&#32;_M_ptr-&gt;_M_valptr());
167 &#32;&#32;&#32;&#32;_AllocTraits::deallocate(__alloc,&#32;_M_ptr,&#32;1);
168 &#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
169 &#32;&#32;&#32;&#32;&#32;&#32;}
170 
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_AllocTraits::pointer&#32;_M_ptr;
173 
174 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;simplified,&#32;non-copyable&#32;std::optional&lt;_NodeAlloc&gt;.</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;release()&#32;before&#32;destruction&#32;iff&#32;the&#32;allocator&#32;member&#32;is&#32;active.</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>_Optional_alloc
178 &#32;&#32;&#32;&#32;&#32;&#32;{
179 &#32;&#32;&#32;&#32;_Optional_alloc()&#32;{&#32;}
180 &#32;&#32;&#32;&#32;~_Optional_alloc()&#32;{&#32;}
181 
182 &#32;&#32;&#32;&#32;_Optional_alloc(_Optional_alloc&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
183 &#32;&#32;&#32;&#32;_Optional_alloc&amp;&#32;operator=(_Optional_alloc&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
184 
185 &#32;&#32;&#32;&#32;_Optional_alloc(<emphasis role="keyword">const</emphasis>&#32;_NodeAlloc&amp;&#32;__alloc)&#32;noexcept
186 &#32;&#32;&#32;&#32;:&#32;_M_alloc(__alloc)
187 &#32;&#32;&#32;&#32;{&#32;}
188 
189 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;_M_alloc&#32;is&#32;the&#32;active&#32;member&#32;of&#32;the&#32;union.</emphasis>
190 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
191 &#32;&#32;&#32;&#32;operator=(_NodeAlloc&amp;&amp;&#32;__alloc)&#32;<emphasis role="keyword">noexcept</emphasis>
192 &#32;&#32;&#32;&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ATr&#32;=&#32;_AllocTraits;
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_ATr::propagate_on_container_move_assignment::value)
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_alloc&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__alloc);
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_AllocTraits::is_always_equal::value)
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_alloc&#32;==&#32;__alloc);
198 &#32;&#32;&#32;&#32;}
199 
200 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;_M_alloc&#32;is&#32;the&#32;active&#32;member&#32;of&#32;both&#32;unions.</emphasis>
201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
202 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Optional_alloc&amp;&#32;__other)&#32;<emphasis role="keyword">noexcept</emphasis>
203 &#32;&#32;&#32;&#32;{
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_AllocTraits::propagate_on_container_swap::value)
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_M_alloc,&#32;__other._M_alloc);
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!_AllocTraits::is_always_equal::value)
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(_M_alloc&#32;==&#32;__other._M_alloc);
209 &#32;&#32;&#32;&#32;}
210 
211 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;_M_alloc&#32;is&#32;the&#32;active&#32;member&#32;of&#32;the&#32;union.</emphasis>
212 &#32;&#32;&#32;&#32;_NodeAlloc&amp;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_alloc;&#32;}
213 
214 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Precondition:&#32;_M_alloc&#32;is&#32;the&#32;active&#32;member&#32;of&#32;the&#32;union.</emphasis>
215 &#32;&#32;&#32;&#32;_NodeAlloc&#32;release()&#32;noexcept
216 &#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;_NodeAlloc&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_alloc);
218 &#32;&#32;&#32;&#32;&#32;&#32;_M_alloc.~_NodeAlloc();
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
220 &#32;&#32;&#32;&#32;}
221 
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Empty&#32;{&#32;};
223 
224 &#32;&#32;&#32;&#32;[[__no_unique_address__]]&#32;_Empty&#32;&#32;&#32;&#32;&#32;_M_empty;
225 &#32;&#32;&#32;&#32;[[__no_unique_address__]]&#32;_NodeAlloc&#32;_M_alloc;
226 &#32;&#32;&#32;&#32;&#32;&#32;};
227 
228 &#32;&#32;&#32;&#32;&#32;&#32;[[__no_unique_address__]]&#32;_Optional_alloc&#32;_M_alloc;
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueAlloc&gt;
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Rb_tree;
233 
235 &#32;&#32;&#32;&#32;};
236 
238 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeAlloc&gt;
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Node_handle&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Node_handle_common&lt;_Value,&#32;_NodeAlloc&gt;
240 &#32;&#32;&#32;&#32;{
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Node_handle()&#32;noexcept&#32;=&#32;default;
243 &#32;&#32;&#32;&#32;&#32;&#32;~_Node_handle()&#32;=&#32;default;
244 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle(_Node_handle&amp;&amp;)&#32;noexcept&#32;=&#32;default;
245 
246 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle&amp;
247 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Node_handle&amp;&amp;)&#32;noexcept&#32;=&#32;default;
248 
249 &#32;&#32;&#32;&#32;&#32;&#32;using&#32;key_type&#32;=&#32;_Key;
250 &#32;&#32;&#32;&#32;&#32;&#32;using&#32;mapped_type&#32;=&#32;typename&#32;_Value::second_type;
251 
252 &#32;&#32;&#32;&#32;&#32;&#32;key_type&amp;
253 &#32;&#32;&#32;&#32;&#32;&#32;key()&#32;const&#32;noexcept
254 &#32;&#32;&#32;&#32;&#32;&#32;{
255 &#32;&#32;&#32;&#32;__glibcxx_assert(!this-&gt;empty());
256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_pkey;
257 &#32;&#32;&#32;&#32;&#32;&#32;}
258 
259 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
260 &#32;&#32;&#32;&#32;&#32;&#32;mapped()&#32;const&#32;noexcept
261 &#32;&#32;&#32;&#32;&#32;&#32;{
262 &#32;&#32;&#32;&#32;__glibcxx_assert(!this-&gt;empty());
263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_pmapped;
264 &#32;&#32;&#32;&#32;&#32;&#32;}
265 
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Node_handle&amp;&#32;__nh)&#32;<emphasis role="keyword">noexcept</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;{
269 &#32;&#32;&#32;&#32;this-&gt;_M_swap(__nh);
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
271 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_M_pkey,&#32;__nh._M_pkey);
272 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_M_pmapped,&#32;__nh._M_pmapped);
273 &#32;&#32;&#32;&#32;&#32;&#32;}
274 
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Node_handle&amp;&#32;__x,&#32;_Node_handle&amp;&#32;__y)
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
278 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
279 
280 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
281 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_AllocTraits&#32;=&#32;allocator_traits&lt;_NodeAlloc&gt;;
282 
283 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle(<emphasis role="keyword">typename</emphasis>&#32;_AllocTraits::pointer&#32;__ptr,
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_NodeAlloc&amp;&#32;__alloc)
285 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_handle_common&lt;_Value,&#32;_NodeAlloc&gt;(__ptr,&#32;__alloc)
286 &#32;&#32;&#32;&#32;&#32;&#32;{
287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__ptr)
288 &#32;&#32;&#32;&#32;&#32;&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__key&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>_Key&amp;<emphasis role="keyword">&gt;</emphasis>(__ptr-&gt;_M_valptr()-&gt;first);
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pkey&#32;=&#32;_S_pointer_to(__key);
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pmapped&#32;=&#32;_S_pointer_to(__ptr-&gt;_M_valptr()-&gt;second);
292 &#32;&#32;&#32;&#32;&#32;&#32;}
293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;{
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pkey&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pmapped&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
297 &#32;&#32;&#32;&#32;&#32;&#32;}
298 &#32;&#32;&#32;&#32;&#32;&#32;}
299 
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
301 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__pointer
302 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__ptr_rebind&lt;<emphasis role="keyword">typename</emphasis>&#32;_AllocTraits::pointer,
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remove_reference_t&lt;_Tp&gt;&gt;;
304 
305 &#32;&#32;&#32;&#32;&#32;&#32;__pointer&lt;_Key&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pkey&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
306 &#32;&#32;&#32;&#32;&#32;&#32;__pointer&lt;typename&#32;_Value::second_type&gt;&#32;&#32;&#32;_M_pmapped&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
307 
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
309 &#32;&#32;&#32;&#32;__pointer&lt;_Tp&gt;
310 &#32;&#32;&#32;&#32;_S_pointer_to(_Tp&amp;&#32;__obj)
311 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pointer_traits&lt;__pointer&lt;_Tp&gt;&gt;::pointer_to(__obj);&#32;}
312 
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;
314 &#32;&#32;&#32;&#32;&#32;&#32;_M_key()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;key();&#32;}
315 
316 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueAlloc&gt;
318 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Rb_tree;
319 
320 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueAlloc,
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Equal,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RangeHash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Unused,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RehashPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
324 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Hashtable;
325 &#32;&#32;&#32;&#32;};
326 
328 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Value,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeAlloc&gt;
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Node_handle&lt;_Value,&#32;_Value,&#32;_NodeAlloc&gt;
330 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Node_handle_common&lt;_Value,&#32;_NodeAlloc&gt;
331 &#32;&#32;&#32;&#32;{
332 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Node_handle()&#32;noexcept&#32;=&#32;default;
334 &#32;&#32;&#32;&#32;&#32;&#32;~_Node_handle()&#32;=&#32;default;
335 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle(_Node_handle&amp;&amp;)&#32;noexcept&#32;=&#32;default;
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle&amp;
338 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_Node_handle&amp;&amp;)&#32;noexcept&#32;=&#32;default;
339 
340 &#32;&#32;&#32;&#32;&#32;&#32;using&#32;value_type&#32;=&#32;_Value;
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;value_type&amp;
343 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>()&#32;const&#32;noexcept
344 &#32;&#32;&#32;&#32;&#32;&#32;{
345 &#32;&#32;&#32;&#32;__glibcxx_assert(!this-&gt;empty());
346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*this-&gt;_M_ptr-&gt;_M_valptr();
347 &#32;&#32;&#32;&#32;&#32;&#32;}
348 
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
350 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Node_handle&amp;&#32;__nh)&#32;<emphasis role="keyword">noexcept</emphasis>
351 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;_M_swap(__nh);&#32;}
352 
353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
354 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Node_handle&amp;&#32;__x,&#32;_Node_handle&amp;&#32;__y)
355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
356 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
357 
358 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_AllocTraits&#32;=&#32;allocator_traits&lt;_NodeAlloc&gt;;
360 
361 &#32;&#32;&#32;&#32;&#32;&#32;_Node_handle(<emphasis role="keyword">typename</emphasis>&#32;_AllocTraits::pointer&#32;__ptr,
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_NodeAlloc&amp;&#32;__alloc)
363 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Node_handle_common&lt;_Value,&#32;_NodeAlloc&gt;(__ptr,&#32;__alloc)&#32;{&#32;}
364 
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;
366 &#32;&#32;&#32;&#32;&#32;&#32;_M_key()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>();&#32;}
367 
368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_KeyOfValue,
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
370 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Rb_tree;
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Value2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValueAlloc,
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ExtractKey,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Equal,
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RangeHash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Unused,
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RehashPolicy,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits&gt;
376 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Hashtable;
377 &#32;&#32;&#32;&#32;};
378 
380 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_NodeHandle&gt;
381 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Node_insert_return
382 &#32;&#32;&#32;&#32;{
383 &#32;&#32;&#32;&#32;&#32;&#32;_Iterator&#32;&#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>&#32;=&#32;_Iterator();
384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;inserted&#32;=&#32;<emphasis role="keyword">false</emphasis>;
385 &#32;&#32;&#32;&#32;&#32;&#32;_NodeHandle&#32;&#32;&#32;node;
386 &#32;&#32;&#32;&#32;};
387 
389 
390 _GLIBCXX_END_NAMESPACE_VERSION
391 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
392 
393 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
394 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
