<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2pstl_2utils_8h_source" xml:lang="en-US">
<title>utils.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/utils.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;utils.h&#32;-----------------------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_UTILS_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_UTILS_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;new&gt;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
15 
16 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>
17 {
18 <emphasis role="keyword">namespace&#32;</emphasis>__internal
19 {
20 
21 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
22 <emphasis role="keyword">typename</emphasis>&#32;std::result_of&lt;_Fp()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
23 <link linkend="_namespace____pstl_1_1____internal_1a9e83352cee63f3312126c9e33e7ae17b">__except_handler</link>(_Fp&#32;__f)
24 {
25 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>
26 &#32;&#32;&#32;&#32;{
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__f();
28 &#32;&#32;&#32;&#32;}
29 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::bad_alloc&amp;)
30 &#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>;&#32;<emphasis role="comment">//&#32;re-throw&#32;bad_alloc&#32;according&#32;to&#32;the&#32;standard&#32;[algorithms.parallel.exceptions]</emphasis>
32 &#32;&#32;&#32;&#32;}
33 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(...)
34 &#32;&#32;&#32;&#32;{
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__terminate();&#32;<emphasis role="comment">//&#32;Good&#32;bye&#32;according&#32;to&#32;the&#32;standard&#32;[algorithms.parallel.exceptions]</emphasis>
36 &#32;&#32;&#32;&#32;}
37 }
38 
39 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
40 <emphasis role="keywordtype">void</emphasis>
41 <link linkend="_namespace____pstl_1_1____internal_1a87c94f05940f4ecf102a6ffd803dfdaf">__invoke_if</link>(std::true_type,&#32;_Fp&#32;__f)
42 {
43 &#32;&#32;&#32;&#32;__f();
44 }
45 
46 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
47 <emphasis role="keywordtype">void</emphasis>
48 <link linkend="_namespace____pstl_1_1____internal_1a87c94f05940f4ecf102a6ffd803dfdaf">__invoke_if</link>(std::false_type,&#32;_Fp&#32;__f)
49 {
50 }
51 
52 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
53 <emphasis role="keywordtype">void</emphasis>
54 <link linkend="_namespace____pstl_1_1____internal_1a99ffa966b0cf5f0b3687352c6b055f81">__invoke_if_not</link>(std::false_type,&#32;_Fp&#32;__f)
55 {
56 &#32;&#32;&#32;&#32;__f();
57 }
58 
59 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
60 <emphasis role="keywordtype">void</emphasis>
61 <link linkend="_namespace____pstl_1_1____internal_1a99ffa966b0cf5f0b3687352c6b055f81">__invoke_if_not</link>(std::true_type,&#32;_Fp&#32;__f)
62 {
63 }
64 
65 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_F1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F2&gt;
66 <emphasis role="keyword">typename</emphasis>&#32;std::result_of&lt;_F1()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
67 <link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__invoke_if_else</link>(std::true_type,&#32;_F1&#32;__f1,&#32;_F2&#32;__f2)
68 {
69 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__f1();
70 }
71 
72 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_F1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_F2&gt;
73 <emphasis role="keyword">typename</emphasis>&#32;std::result_of&lt;_F2()&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
74 <link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__invoke_if_else</link>(std::false_type,&#32;_F1&#32;__f1,&#32;_F2&#32;__f2)
75 {
76 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__f2();
77 }
78 
80 <emphasis role="keyword">struct&#32;</emphasis>__no_op
81 {
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
83 &#32;&#32;&#32;&#32;_Tp&amp;&amp;
84 &#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op_1a365d25d2b0f844ac3d1d0f921835b9fe">operator()</link>(_Tp&amp;&amp;&#32;__a)<emphasis role="keyword">&#32;const</emphasis>
85 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Tp&gt;(__a);
87 &#32;&#32;&#32;&#32;}
88 };
89 
91 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
92 <emphasis role="keyword">class&#32;</emphasis>__not_pred
93 {
94 &#32;&#32;&#32;&#32;_Pred&#32;_M_pred;
95 
96 &#32;&#32;<emphasis role="keyword">public</emphasis>:
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____pstl_1_1____internal_1_1____not__pred_1aac292e2356e75df388b78128655600e7">__not_pred</link>(_Pred&#32;__pred)&#32;:&#32;_M_pred(__pred)&#32;{}
98 
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
101 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____not__pred_1ae927f4b44bb0e3ed64615f741f4c92e8">operator()</link>(_Args&amp;&amp;...&#32;__args)
102 &#32;&#32;&#32;&#32;{
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_M_pred(std::forward&lt;_Args&gt;(__args)...);
104 &#32;&#32;&#32;&#32;}
105 };
106 
107 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pred&gt;
108 <emphasis role="keyword">class&#32;</emphasis>__reorder_pred
109 {
110 &#32;&#32;&#32;&#32;_Pred&#32;_M_pred;
111 
112 &#32;&#32;<emphasis role="keyword">public</emphasis>:
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____pstl_1_1____internal_1_1____reorder__pred_1a2c9a07973aa6c02f7c41022484061a4b">__reorder_pred</link>(_Pred&#32;__pred)&#32;:&#32;_M_pred(__pred)&#32;{}
114 
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_FTp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_STp&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
117 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____reorder__pred_1a3c9fbcc31a5577cba903f32e13f3fc36">operator()</link>(_FTp&amp;&amp;&#32;__a,&#32;_STp&amp;&amp;&#32;__b)
118 &#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pred(std::forward&lt;_STp&gt;(__b),&#32;std::forward&lt;_FTp&gt;(__a));
120 &#32;&#32;&#32;&#32;}
121 };
122 
124 
126 <emphasis role="keyword">class&#32;</emphasis>__pstl_equal
127 {
128 &#32;&#32;<emphasis role="keyword">public</emphasis>:
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____pstl_1_1____internal_1_1____pstl__equal_1a0ee988ce5e2203308380125d5486537f">__pstl_equal</link>()&#32;{}
130 
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Xp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
132 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
133 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____pstl__equal_1af3233eade4d6048613400dfc030abbb6">operator()</link>(_Xp&amp;&amp;&#32;__x,&#32;_Yp&amp;&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
134 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Xp&gt;(__x)&#32;==&#32;std::forward&lt;_Yp&gt;(__y);
136 &#32;&#32;&#32;&#32;}
137 };
138 
140 <emphasis role="keyword">class&#32;</emphasis>__pstl_less
141 {
142 &#32;&#32;<emphasis role="keyword">public</emphasis>:
143 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____pstl_1_1____internal_1_1____pstl__less_1a6107e3daac50a0653dd68f1fe62ae18d">__pstl_less</link>()&#32;{}
144 
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Xp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
146 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
147 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____pstl__less_1a4a53f2b0684eeac13602035a646784ac">operator()</link>(_Xp&amp;&amp;&#32;__x,&#32;_Yp&amp;&amp;&#32;__y)<emphasis role="keyword">&#32;const</emphasis>
148 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Xp&gt;(__x)&#32;&lt;&#32;std::forward&lt;_Yp&gt;(__y);
150 &#32;&#32;&#32;&#32;}
151 };
152 
154 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
155 <emphasis role="keyword">class&#32;</emphasis>__equal_value_by_pred
156 {
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;_M_value;
158 &#32;&#32;&#32;&#32;_Predicate&#32;_M_pred;
159 
160 &#32;&#32;<emphasis role="keyword">public</emphasis>:
161 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____equal__value__by__pred_1a1e4cd61123dfe6f014f6e4f252bdbe59">__equal_value_by_pred</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;_Predicate&#32;__pred)&#32;:&#32;_M_value(__value),&#32;_M_pred(__pred)&#32;{}
162 
163 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
164 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
165 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____equal__value__by__pred_1a4311241d58473b2aa23ec8e2a746905b">operator()</link>(_Arg&amp;&amp;&#32;__arg)
166 &#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pred(std::forward&lt;_Arg&gt;(__arg),&#32;_M_value);
168 &#32;&#32;&#32;&#32;}
169 };
170 
172 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
173 <emphasis role="keyword">class&#32;</emphasis>__equal_value
174 {
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;_M_value;
176 
177 &#32;&#32;<emphasis role="keyword">public</emphasis>:
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____pstl_1_1____internal_1_1____equal__value_1aa1947afcc84d8fac318d2e51d620c96e">__equal_value</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)&#32;:&#32;_M_value(__value)&#32;{}
179 
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
182 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____equal__value_1a2b9eb5cf4995615fb84c4642b79f5dfa">operator()</link>(_Arg&amp;&amp;&#32;__arg)<emphasis role="keyword">&#32;const</emphasis>
183 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::forward&lt;_Arg&gt;(__arg)&#32;==&#32;_M_value;
185 &#32;&#32;&#32;&#32;}
186 };
187 
189 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
190 <emphasis role="keyword">class&#32;</emphasis>__not_equal_value
191 {
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;_M_value;
193 
194 &#32;&#32;<emphasis role="keyword">public</emphasis>:
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class____pstl_1_1____internal_1_1____not__equal__value_1af8951e999b61f26bf6d84b6819fc0aa2">__not_equal_value</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)&#32;:&#32;_M_value(__value)&#32;{}
196 
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
199 &#32;&#32;&#32;&#32;<link linkend="_class____pstl_1_1____internal_1_1____not__equal__value_1a3ce464d605bd80c3b62647f544bea57c">operator()</link>(_Arg&amp;&amp;&#32;__arg)<emphasis role="keyword">&#32;const</emphasis>
200 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(std::forward&lt;_Arg&gt;(__arg)&#32;==&#32;_M_value);
202 &#32;&#32;&#32;&#32;}
203 };
204 
205 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
206 _ForwardIterator
207 <link linkend="_namespace____pstl_1_1____internal_1ac5870aee10bdade2147062d8b74f6d2e">__cmp_iterators_by_values</link>(_ForwardIterator&#32;__a,&#32;_ForwardIterator&#32;__b,&#32;_Compare&#32;__comp)
208 {
209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__a&#32;&lt;&#32;__b)
210 &#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;we&#32;should&#32;return&#32;closer&#32;iterator</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(*__b,&#32;*__a)&#32;?&#32;__b&#32;:&#32;__a;
212 &#32;&#32;&#32;&#32;}
213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
214 &#32;&#32;&#32;&#32;{
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__comp(*__a,&#32;*__b)&#32;?&#32;__a&#32;:&#32;__b;
216 &#32;&#32;&#32;&#32;}
217 }
218 
219 }&#32;<emphasis role="comment">//&#32;namespace&#32;__internal</emphasis>
220 }&#32;<emphasis role="comment">//&#32;namespace&#32;__pstl</emphasis>
221 
222 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_UTILS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
