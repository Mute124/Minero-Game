<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func" xml:lang="en-US">
<title>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt; Class Template Reference</title>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;parallel_backend_tbb.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1ad70838187f992556274f4ad60d5abccd">__merge_func</link> (_SizeType __xs, _SizeType __xe, _SizeType __ys, _SizeType __ye, _SizeType __zs, _Compare __comp, _Cleanup, _LeafMerge __leaf_merge, _SizeType __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __x_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __y_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a522a6348cd3d14ef1885e45b6107c3f6">is_left</link> (_SizeType __idx) const</para>
</listitem>
            <listitem><para>template&lt;typename IndexType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1afc24fae571f75b8f9aa700d18de319a6">set_odd</link> (IndexType __idx, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __on_off)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a74d8035c7d3206b043b6d09db33ba1db">operator()</link> (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> *__self)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1ad70838187f992556274f4ad60d5abccd">__merge_func</link> (_SizeType __xs, _SizeType __xe, _SizeType __ys, _SizeType __ye, _SizeType __zs, _Compare __comp, _Cleanup, _LeafMerge __leaf_merge, _SizeType __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __x_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __y_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a522a6348cd3d14ef1885e45b6107c3f6">is_left</link> (_SizeType __idx) const</para>
</listitem>
            <listitem><para>template&lt;typename IndexType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1afc24fae571f75b8f9aa700d18de319a6">set_odd</link> (IndexType __idx, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __on_off)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1aa2e0ca38a43a3d5d80cc3533df4ea90b">operator()</link> (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> *__self)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1ad70838187f992556274f4ad60d5abccd">__merge_func</link> (_SizeType __xs, _SizeType __xe, _SizeType __ys, _SizeType __ye, _SizeType __zs, _Compare __comp, _Cleanup, _LeafMerge __leaf_merge, _SizeType __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __x_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __y_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a522a6348cd3d14ef1885e45b6107c3f6">is_left</link> (_SizeType __idx) const</para>
</listitem>
            <listitem><para>template&lt;typename IndexType &gt; </para><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1afc24fae571f75b8f9aa700d18de319a6">set_odd</link> (IndexType __idx, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __on_off)</para>
</listitem>
            <listitem><para><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func_1aa2e0ca38a43a3d5d80cc3533df4ea90b">operator()</link> (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> *__self)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1ad70838187f992556274f4ad60d5abccd"/><section>
    <title>__merge_func()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>__merge_func</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>__merge_func</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::__merge_func (_SizeType __xs, _SizeType __xe, _SizeType __ys, _SizeType __ye, _SizeType __zs, _Compare __comp, _Cleanup , _LeafMerge __leaf_merge, _SizeType __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __x_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __y_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1ad70838187f992556274f4ad60d5abccd"/><section>
    <title>__merge_func()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>__merge_func</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>__merge_func</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::__merge_func (_SizeType __xs, _SizeType __xe, _SizeType __ys, _SizeType __ye, _SizeType __zs, _Compare __comp, _Cleanup , _LeafMerge __leaf_merge, _SizeType __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __x_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __y_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1ad70838187f992556274f4ad60d5abccd"/><section>
    <title>__merge_func()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>__merge_func</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>__merge_func</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::__merge_func (_SizeType __xs, _SizeType __xe, _SizeType __ys, _SizeType __ye, _SizeType __zs, _Compare __comp, _Cleanup , _LeafMerge __leaf_merge, _SizeType __nsort, _RandomAccessIterator1 __x_beg, _RandomAccessIterator2 __z_beg, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __x_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __y_orig, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __root)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a522a6348cd3d14ef1885e45b6107c3f6"/><section>
    <title>is_left()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>is_left</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>is_left</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::is_left (_SizeType __idx) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a522a6348cd3d14ef1885e45b6107c3f6"/><section>
    <title>is_left()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>is_left</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>is_left</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::is_left (_SizeType __idx) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a522a6348cd3d14ef1885e45b6107c3f6"/><section>
    <title>is_left()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>is_left</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>is_left</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::is_left (_SizeType __idx) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1a74d8035c7d3206b043b6d09db33ba1db"/><section>
    <title>operator()()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename __M_Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, __M_Compare, _Cleanup, _LeafMerge &gt;::operator() (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * __self)</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1aa2e0ca38a43a3d5d80cc3533df4ea90b"/><section>
    <title>operator()()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::operator() (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * __self)</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1aa2e0ca38a43a3d5d80cc3533df4ea90b"/><section>
    <title>operator()()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator()</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><para><computeroutput><link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::operator() (<link linkend="_class____pstl_1_1____tbb__backend_1_1____task">__task</link> * __self)</computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1afc24fae571f75b8f9aa700d18de319a6"/><section>
    <title>set_odd()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>set_odd</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>set_odd</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><computeroutput>template&lt;typename IndexType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::set_odd (IndexType __idx, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __on_off)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1afc24fae571f75b8f9aa700d18de319a6"/><section>
    <title>set_odd()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>set_odd</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>set_odd</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><computeroutput>template&lt;typename IndexType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::set_odd (IndexType __idx, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __on_off)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____pstl_1_1____tbb__backend_1_1____merge__func_1afc24fae571f75b8f9aa700d18de319a6"/><section>
    <title>set_odd()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>set_odd</primary><secondary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</secondary></indexterm>
<indexterm><primary>__pstl::__tbb_backend::__merge_func&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;</primary><secondary>set_odd</secondary></indexterm>
<computeroutput>template&lt;typename _RandomAccessIterator1 , typename _RandomAccessIterator2 , typename _Compare , typename _Cleanup , typename _LeafMerge &gt; </computeroutput><computeroutput>template&lt;typename IndexType &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____pstl_1_1____tbb__backend_1_1____merge__func">__pstl::__tbb_backend::__merge_func</link>&lt; _RandomAccessIterator1, _RandomAccessIterator2, _Compare, _Cleanup, _LeafMerge &gt;::set_odd (IndexType __idx, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __on_off)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/pstl/<link linkend="__classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/<link linkend="_lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2parallel__backend__tbb_8h">parallel_backend_tbb.h</link></section>
</section>
