<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2refwrap_8h_source" xml:lang="en-US">
<title>refwrap.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/refwrap.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Implementation&#32;of&#32;std::reference_wrapper&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_REFWRAP_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_REFWRAP_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;bits/invoke.h&gt;</emphasis>
39 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;unary_function&#32;and&#32;binary_function</emphasis>
40 
41 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
42 {
43 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
46 
52 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_ArgTypes&gt;
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Maybe_unary_or_binary_function&#32;{&#32;};
54 
55 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;unary_function&#32;and&#32;binary_function.</emphasis>
56 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
57 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
58 
60 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1&gt;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Maybe_unary_or_binary_function&lt;_Res,&#32;_T1&gt;
62 &#32;&#32;&#32;&#32;:&#32;std::unary_function&lt;_T1,&#32;_Res&gt;&#32;{&#32;};
63 
65 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Maybe_unary_or_binary_function&lt;_Res,&#32;_T1,&#32;_T2&gt;
67 &#32;&#32;&#32;&#32;:&#32;std::binary_function&lt;_T1,&#32;_T2,&#32;_Res&gt;&#32;{&#32;};
68 
69 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
70 
71 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Signature&gt;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mem_fn_traits;
73 
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Class,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_ArgTypes&gt;
75 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Mem_fn_traits_base
76 &#32;&#32;&#32;&#32;{
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__result_type&#32;=&#32;_Res;
78 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__maybe_type
79 &#32;&#32;&#32;&#32;=&#32;_Maybe_unary_or_binary_function&lt;_Res,&#32;_Class*,&#32;_ArgTypes...&gt;;
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__arity&#32;=&#32;integral_constant&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1aa9d55e2f20e580b7445617d0d12fff6e">size_t</link>,&#32;<emphasis role="keyword">sizeof</emphasis>...(_ArgTypes)&gt;;
81 &#32;&#32;&#32;&#32;};
82 
83 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MEM_FN_TRAITS2(_CV,&#32;_REF,&#32;_LVAL,&#32;_RVAL)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
84 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Res,&#32;typename&#32;_Class,&#32;typename...&#32;_ArgTypes&gt;&#32;&#32;&#32;\</emphasis>
85 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;_Mem_fn_traits&lt;_Res&#32;(_Class::*)(_ArgTypes...)&#32;_CV&#32;_REF&gt;&#32;&#32;\</emphasis>
86 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;:&#32;_Mem_fn_traits_base&lt;_Res,&#32;_CV&#32;_Class,&#32;_ArgTypes...&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
87 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
88 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;using&#32;__vararg&#32;=&#32;false_type;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
89 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
90 <emphasis role="preprocessor">&#32;&#32;template&lt;typename&#32;_Res,&#32;typename&#32;_Class,&#32;typename...&#32;_ArgTypes&gt;&#32;&#32;&#32;\</emphasis>
91 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;_Mem_fn_traits&lt;_Res&#32;(_Class::*)(_ArgTypes...&#32;...)&#32;_CV&#32;_REF&gt;&#32;&#32;\</emphasis>
92 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;:&#32;_Mem_fn_traits_base&lt;_Res,&#32;_CV&#32;_Class,&#32;_ArgTypes...&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
93 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
94 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;using&#32;__vararg&#32;=&#32;true_type;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
95 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};</emphasis>
96 
97 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MEM_FN_TRAITS(_REF,&#32;_LVAL,&#32;_RVAL)&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
98 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_MEM_FN_TRAITS2(&#32;&#32;&#32;&#32;&#32;&#32;,&#32;_REF,&#32;_LVAL,&#32;_RVAL)&#32;&#32;&#32;\</emphasis>
99 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_MEM_FN_TRAITS2(const&#32;&#32;&#32;&#32;&#32;,&#32;_REF,&#32;_LVAL,&#32;_RVAL)&#32;&#32;&#32;\</emphasis>
100 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_MEM_FN_TRAITS2(volatile&#32;&#32;,&#32;_REF,&#32;_LVAL,&#32;_RVAL)&#32;&#32;&#32;\</emphasis>
101 <emphasis role="preprocessor">&#32;&#32;_GLIBCXX_MEM_FN_TRAITS2(const&#32;volatile,&#32;_REF,&#32;_LVAL,&#32;_RVAL)</emphasis>
102 
103 _GLIBCXX_MEM_FN_TRAITS(&#32;,&#32;true_type,&#32;true_type)
104 _GLIBCXX_MEM_FN_TRAITS(&amp;,&#32;true_type,&#32;false_type)
105 _GLIBCXX_MEM_FN_TRAITS(&amp;&amp;,&#32;false_type,&#32;true_type)
106 
107 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
108 _GLIBCXX_MEM_FN_TRAITS(<emphasis role="keyword">noexcept</emphasis>,&#32;true_type,&#32;true_type)
109 _GLIBCXX_MEM_FN_TRAITS(&amp;&#32;<emphasis role="keyword">noexcept</emphasis>,&#32;true_type,&#32;false_type)
110 _GLIBCXX_MEM_FN_TRAITS(&amp;&amp;&#32;<emphasis role="keyword">noexcept</emphasis>,&#32;false_type,&#32;true_type)
111 <emphasis role="preprocessor">#endif</emphasis>
112 
113 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_MEM_FN_TRAITS</emphasis>
114 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_MEM_FN_TRAITS2</emphasis>
115 
117 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Functor,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
118 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Maybe_get_result_type
119 &#32;&#32;&#32;&#32;{&#32;};
120 
121 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Functor&gt;
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Maybe_get_result_type&lt;_Functor,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Functor::result_type&gt;&gt;
124 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Functor::result_type&#32;result_type;&#32;};
125 
130 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Functor&gt;
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type_impl
132 &#32;&#32;&#32;&#32;:&#32;_Maybe_get_result_type&lt;_Functor&gt;
133 &#32;&#32;&#32;&#32;{&#32;};
134 
136 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_ArgTypes&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type_impl&lt;_Res(_ArgTypes...)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
138 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Res&#32;result_type;&#32;};
139 
141 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_ArgTypes&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type_impl&lt;_Res(_ArgTypes......)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
143 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Res&#32;result_type;&#32;};
144 
146 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_ArgTypes&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type_impl&lt;_Res(*)(_ArgTypes...)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
148 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Res&#32;result_type;&#32;};
149 
151 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_ArgTypes&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct</emphasis>
153 &#32;&#32;&#32;&#32;_Weak_result_type_impl&lt;_Res(*)(_ArgTypes......)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
154 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Res&#32;result_type;&#32;};
155 
156 &#32;&#32;<emphasis role="comment">//&#32;Let&#32;_Weak_result_type_impl&#32;perform&#32;the&#32;real&#32;work.</emphasis>
157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Functor,
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_member_function_pointer&lt;_Functor&gt;::value&gt;
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type_memfun
160 &#32;&#32;&#32;&#32;:&#32;_Weak_result_type_impl&lt;_Functor&gt;
161 &#32;&#32;&#32;&#32;{&#32;};
162 
163 &#32;&#32;<emphasis role="comment">//&#32;A&#32;pointer&#32;to&#32;member&#32;function&#32;has&#32;a&#32;weak&#32;result&#32;type.</emphasis>
164 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_MemFunPtr&gt;
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type_memfun&lt;_MemFunPtr,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
166 &#32;&#32;&#32;&#32;{
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>result_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Mem_fn_traits&lt;_MemFunPtr&gt;::__result_type;
168 &#32;&#32;&#32;&#32;};
169 
170 &#32;&#32;<emphasis role="comment">//&#32;A&#32;pointer&#32;to&#32;data&#32;member&#32;doesn&apos;t&#32;have&#32;a&#32;weak&#32;result&#32;type.</emphasis>
171 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Func,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Class&gt;
172 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type_memfun&lt;_Func&#32;_Class::*,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
173 &#32;&#32;&#32;&#32;{&#32;};
174 
179 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Functor&gt;
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Weak_result_type
181 &#32;&#32;&#32;&#32;:&#32;_Weak_result_type_memfun&lt;typename&#32;remove_cv&lt;_Functor&gt;::type&gt;
182 &#32;&#32;&#32;&#32;{&#32;};
183 
184 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
185 &#32;&#32;<emphasis role="comment">//&#32;Detect&#32;nested&#32;argument_type.</emphasis>
186 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
187 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Refwrap_base_arg1
188 &#32;&#32;&#32;&#32;{&#32;};
189 
190 &#32;&#32;<emphasis role="comment">//&#32;Nested&#32;argument_type.</emphasis>
191 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Refwrap_base_arg1&lt;_Tp,
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Tp::argument_type&gt;&gt;
194 &#32;&#32;&#32;&#32;{
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::argument_type&#32;argument_type;
196 &#32;&#32;&#32;&#32;};
197 
198 &#32;&#32;<emphasis role="comment">//&#32;Detect&#32;nested&#32;first_argument_type&#32;and&#32;second_argument_type.</emphasis>
199 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__<emphasis role="keywordtype">void</emphasis>_t&lt;&gt;&gt;
200 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Refwrap_base_arg2
201 &#32;&#32;&#32;&#32;{&#32;};
202 
203 &#32;&#32;<emphasis role="comment">//&#32;Nested&#32;first_argument_type&#32;and&#32;second_argument_type.</emphasis>
204 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Refwrap_base_arg2&lt;_Tp,
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__void_t&lt;typename&#32;_Tp::first_argument_type,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typename&#32;_Tp::second_argument_type&gt;&gt;
208 &#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::first_argument_type&#32;first_argument_type;
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::second_argument_type&#32;second_argument_type;
211 &#32;&#32;&#32;&#32;};
212 
219 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
220 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base
221 &#32;&#32;&#32;&#32;:&#32;_Weak_result_type&lt;_Tp&gt;,&#32;_Refwrap_base_arg1&lt;_Tp&gt;,&#32;_Refwrap_base_arg2&lt;_Tp&gt;
222 &#32;&#32;&#32;&#32;{&#32;};
223 
224 <emphasis role="comment">//&#32;Ignore&#32;warnings&#32;about&#32;unary_function&#32;and&#32;binary_function.</emphasis>
225 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
226 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
227 
228 &#32;&#32;<emphasis role="comment">//&#32;-&#32;a&#32;function&#32;type&#32;(unary)</emphasis>
229 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
230 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
231 &#32;&#32;&#32;&#32;:&#32;unary_function&lt;_T1,&#32;_Res&gt;
232 &#32;&#32;&#32;&#32;{&#32;};
233 
234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1&gt;
235 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1)&#32;const&gt;
236 &#32;&#32;&#32;&#32;:&#32;unary_function&lt;_T1,&#32;_Res&gt;
237 &#32;&#32;&#32;&#32;{&#32;};
238 
239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1&gt;
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1)&#32;volatile&gt;
241 &#32;&#32;&#32;&#32;:&#32;unary_function&lt;_T1,&#32;_Res&gt;
242 &#32;&#32;&#32;&#32;{&#32;};
243 
244 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1&gt;
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1)&#32;const&#32;volatile&gt;
246 &#32;&#32;&#32;&#32;:&#32;unary_function&lt;_T1,&#32;_Res&gt;
247 &#32;&#32;&#32;&#32;{&#32;};
248 
249 &#32;&#32;<emphasis role="comment">//&#32;-&#32;a&#32;function&#32;type&#32;(binary)</emphasis>
250 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
251 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1,&#32;_T2)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
252 &#32;&#32;&#32;&#32;:&#32;binary_function&lt;_T1,&#32;_T2,&#32;_Res&gt;
253 &#32;&#32;&#32;&#32;{&#32;};
254 
255 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
256 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1,&#32;_T2)&#32;const&gt;
257 &#32;&#32;&#32;&#32;:&#32;binary_function&lt;_T1,&#32;_T2,&#32;_Res&gt;
258 &#32;&#32;&#32;&#32;{&#32;};
259 
260 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
261 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1,&#32;_T2)&#32;volatile&gt;
262 &#32;&#32;&#32;&#32;:&#32;binary_function&lt;_T1,&#32;_T2,&#32;_Res&gt;
263 &#32;&#32;&#32;&#32;{&#32;};
264 
265 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&gt;
266 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(_T1,&#32;_T2)&#32;const&#32;volatile&gt;
267 &#32;&#32;&#32;&#32;:&#32;binary_function&lt;_T1,&#32;_T2,&#32;_Res&gt;
268 &#32;&#32;&#32;&#32;{&#32;};
269 
270 &#32;&#32;<emphasis role="comment">//&#32;-&#32;a&#32;function&#32;pointer&#32;type&#32;(unary)</emphasis>
271 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
272 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(*)(_T1)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
273 &#32;&#32;&#32;&#32;:&#32;unary_function&lt;_T1,&#32;_Res&gt;
274 &#32;&#32;&#32;&#32;{&#32;};
275 
276 &#32;&#32;<emphasis role="comment">//&#32;-&#32;a&#32;function&#32;pointer&#32;type&#32;(binary)</emphasis>
277 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Res,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_T2&#32;_GLIBCXX_NOEXCEPT_PARM&gt;
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base&lt;_Res(*)(_T1,&#32;_T2)&#32;_GLIBCXX_NOEXCEPT_QUAL&gt;
279 &#32;&#32;&#32;&#32;:&#32;binary_function&lt;_T1,&#32;_T2,&#32;_Res&gt;
280 &#32;&#32;&#32;&#32;{&#32;};
281 
282 &#32;&#32;template&lt;typename&#32;_Tp,&#32;bool&#32;=&#32;is_member_function_pointer&lt;_Tp&gt;::value&gt;
283 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base_memfun
284 &#32;&#32;&#32;&#32;:&#32;_Reference_wrapper_base&lt;_Tp&gt;
285 &#32;&#32;&#32;&#32;{&#32;};
286 
287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_MemFunPtr&gt;
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Reference_wrapper_base_memfun&lt;_MemFunPtr,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
289 &#32;&#32;&#32;&#32;:&#32;_Mem_fn_traits&lt;_MemFunPtr&gt;::__maybe_type
290 &#32;&#32;&#32;&#32;{
291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>result_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Mem_fn_traits&lt;_MemFunPtr&gt;::__result_type;
292 &#32;&#32;&#32;&#32;};
293 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
294 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;C++20</emphasis>
295 
297 
302 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
303 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>reference_wrapper
304 #<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;__cplusplus&#32;&lt;=&#32;201703L
305 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;C++20&#32;std::reference_wrapper&lt;T&gt;&#32;allows&#32;T&#32;to&#32;be&#32;incomplete,</emphasis>
306 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;so&#32;checking&#32;for&#32;nested&#32;types&#32;could&#32;result&#32;in&#32;ODR&#32;violations.</emphasis>
307 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Reference_wrapper_base_memfun&lt;typename&#32;remove_cv&lt;_Tp&gt;::type&gt;
308 <emphasis role="preprocessor">#endif</emphasis>
309 &#32;&#32;&#32;&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;_M_data;
311 
312 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp*&#32;_S_fun(_Tp&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__r);&#32;}
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_fun(_Tp&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
316 
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up2&#32;=&#32;__remove_cvref_t&lt;_Up&gt;&gt;
318 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__not_same
319 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;!is_same&lt;reference_wrapper,&#32;_Up2&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
320 
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>;
323 
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2993.&#32;reference_wrapper&lt;T&gt;&#32;conversion&#32;from&#32;T&amp;&amp;</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3041.&#32;Unnecessary&#32;decay&#32;in&#32;reference_wrapper</emphasis>
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__not_same&lt;_Up&gt;,&#32;<emphasis role="keyword">typename</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;decltype(reference_wrapper::_S_fun(std::declval&lt;_Up&gt;()))&gt;
329 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
330 &#32;&#32;&#32;&#32;reference_wrapper(_Up&amp;&amp;&#32;__uref)
331 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(reference_wrapper::_S_fun(std::declval&lt;_Up&gt;())))
332 &#32;&#32;&#32;&#32;:&#32;_M_data(reference_wrapper::_S_fun(std::forward&lt;_Up&gt;(__uref)))
333 &#32;&#32;&#32;&#32;{&#32;}
334 
335 &#32;&#32;&#32;&#32;&#32;&#32;reference_wrapper(<emphasis role="keyword">const</emphasis>&#32;reference_wrapper&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;reference_wrapper&amp;
338 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;reference_wrapper&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
339 
340 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_Tp&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
342 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();&#32;}
343 
344 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
345 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&amp;
346 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;const&#32;noexcept
347 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_data;&#32;}
348 
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
350 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
351 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;result_of&lt;_Tp&amp;(_Args&amp;&amp;...)&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
352 &#32;&#32;&#32;&#32;operator()(_Args&amp;&amp;...&#32;__args)<emphasis role="keyword">&#32;const</emphasis>
353 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
354 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_object_v&lt;type&gt;)
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>),&#32;<emphasis role="stringliteral">&quot;type&#32;must&#32;be&#32;complete&quot;</emphasis>);
357 <emphasis role="preprocessor">#endif</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__invoke(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>(),&#32;std::forward&lt;_Args&gt;(__args)...);
359 &#32;&#32;&#32;&#32;}
360 &#32;&#32;&#32;&#32;};
361 
362 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides</emphasis>
363 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
364 &#32;&#32;&#32;&#32;reference_wrapper(_Tp&amp;)&#32;-&gt;&#32;reference_wrapper&lt;_Tp&gt;;
365 <emphasis role="preprocessor">#endif</emphasis>
366 
368 
370 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
371 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
372 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;reference_wrapper&lt;_Tp&gt;
373 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>(_Tp&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
374 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reference_wrapper&lt;_Tp&gt;(__t);&#32;}
375 
377 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
378 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
379 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;reference_wrapper&lt;const&#32;_Tp&gt;
380 &#32;&#32;&#32;&#32;cref(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
381 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reference_wrapper&lt;const&#32;_Tp&gt;(__t);&#32;}
382 
383 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
384 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
385 
386 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
387 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;cref(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
388 
390 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
391 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;reference_wrapper&lt;_Tp&gt;
393 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a083de4c8e32ad3d9059245f26be721de">ref</link>(reference_wrapper&lt;_Tp&gt;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
394 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t;&#32;}
395 
397 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
398 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
399 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;reference_wrapper&lt;const&#32;_Tp&gt;
400 &#32;&#32;&#32;&#32;cref(reference_wrapper&lt;_Tp&gt;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
401 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;__t.get()&#32;};&#32;}
402 
404 
405 _GLIBCXX_END_NAMESPACE_VERSION
406 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
407 
408 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
409 
410 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_REFWRAP_H</emphasis>
</programlisting></section>
