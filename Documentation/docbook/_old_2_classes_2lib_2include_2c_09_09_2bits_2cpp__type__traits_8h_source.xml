<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2cpp__type__traits_8h_source" xml:lang="en-US">
<title>cpp_type_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/cpp_type_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;The&#32;&#32;-*-&#32;C++&#32;-*-&#32;type&#32;traits&#32;classes&#32;for&#32;internal&#32;use&#32;in&#32;libstdc++</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2000-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Gabriel&#32;Dos&#32;Reis&#32;&lt;dosreis@cmla.ens-cachan.fr&gt;</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_CPP_TYPE_TRAITS_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_CPP_TYPE_TRAITS_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
36 
37 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
38 
39 <emphasis role="comment">//</emphasis>
40 <emphasis role="comment">//&#32;This&#32;file&#32;provides&#32;some&#32;compile-time&#32;information&#32;about&#32;various&#32;types.</emphasis>
41 <emphasis role="comment">//&#32;These&#32;representations&#32;were&#32;designed,&#32;on&#32;purpose,&#32;to&#32;be&#32;constant-expressions</emphasis>
42 <emphasis role="comment">//&#32;and&#32;not&#32;types&#32;as&#32;found&#32;in&#32;&lt;bits/type_traits.h&gt;.&#32;&#32;In&#32;particular,&#32;they</emphasis>
43 <emphasis role="comment">//&#32;can&#32;be&#32;used&#32;in&#32;control&#32;structures&#32;and&#32;the&#32;optimizer&#32;hopefully&#32;will&#32;do</emphasis>
44 <emphasis role="comment">//&#32;the&#32;obvious&#32;thing.</emphasis>
45 <emphasis role="comment">//</emphasis>
46 <emphasis role="comment">//&#32;Why&#32;integral&#32;expressions,&#32;and&#32;not&#32;functions&#32;nor&#32;types?</emphasis>
47 <emphasis role="comment">//&#32;Firstly,&#32;these&#32;compile-time&#32;entities&#32;are&#32;used&#32;as&#32;template-arguments</emphasis>
48 <emphasis role="comment">//&#32;so&#32;function&#32;return&#32;values&#32;won&apos;t&#32;work:&#32;&#32;We&#32;need&#32;compile-time&#32;entities.</emphasis>
49 <emphasis role="comment">//&#32;We&apos;re&#32;left&#32;with&#32;types&#32;and&#32;constant&#32;&#32;integral&#32;expressions.</emphasis>
50 <emphasis role="comment">//&#32;Secondly,&#32;from&#32;the&#32;point&#32;of&#32;view&#32;of&#32;ease&#32;of&#32;use,&#32;type-based&#32;compile-time</emphasis>
51 <emphasis role="comment">//&#32;information&#32;is&#32;-not-&#32;*that*&#32;convenient.&#32;&#32;One&#32;has&#32;to&#32;write&#32;lots&#32;of</emphasis>
52 <emphasis role="comment">//&#32;overloaded&#32;functions&#32;and&#32;to&#32;hope&#32;that&#32;the&#32;compiler&#32;will&#32;select&#32;the&#32;right</emphasis>
53 <emphasis role="comment">//&#32;one.&#32;As&#32;a&#32;net&#32;effect,&#32;the&#32;overall&#32;structure&#32;isn&apos;t&#32;very&#32;clear&#32;at&#32;first</emphasis>
54 <emphasis role="comment">//&#32;glance.</emphasis>
55 <emphasis role="comment">//&#32;Thirdly,&#32;partial&#32;ordering&#32;and&#32;overload&#32;resolution&#32;(of&#32;function&#32;templates)</emphasis>
56 <emphasis role="comment">//&#32;is&#32;highly&#32;costly&#32;in&#32;terms&#32;of&#32;compiler-resource.&#32;&#32;It&#32;is&#32;a&#32;Good&#32;Thing&#32;to</emphasis>
57 <emphasis role="comment">//&#32;keep&#32;these&#32;resource&#32;consumption&#32;as&#32;least&#32;as&#32;possible.</emphasis>
58 <emphasis role="comment">//</emphasis>
59 <emphasis role="comment">//&#32;See&#32;valarray_array.h&#32;for&#32;a&#32;case&#32;use.</emphasis>
60 <emphasis role="comment">//</emphasis>
61 <emphasis role="comment">//&#32;--&#32;Gaby&#32;(dosreis@cmla.ens-cachan.fr)&#32;2000-03-06.</emphasis>
62 <emphasis role="comment">//</emphasis>
63 <emphasis role="comment">//&#32;Update&#32;2005:&#32;types&#32;are&#32;also&#32;provided&#32;and&#32;&lt;bits/type_traits.h&gt;&#32;has&#32;been</emphasis>
64 <emphasis role="comment">//&#32;removed.</emphasis>
65 <emphasis role="comment">//</emphasis>
66 
67 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C++&quot;</emphasis>&#32;{
68 
69 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
70 {
71 _GLIBCXX_BEGIN_NAMESPACE_VERSION
72 
73 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__true_type&#32;{&#32;};
74 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__false_type&#32;{&#32;};
75 
76 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&gt;
77 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__truth_type
78 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;&#32;};
79 
80 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__truth_type&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
82 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;&#32;};
83 
84 &#32;&#32;<emphasis role="comment">//&#32;N.B.&#32;The&#32;conversions&#32;to&#32;bool&#32;are&#32;needed&#32;due&#32;to&#32;the&#32;issue</emphasis>
85 &#32;&#32;<emphasis role="comment">//&#32;explained&#32;in&#32;c++/19404.</emphasis>
86 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Sp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__traitor
88 &#32;&#32;&#32;&#32;{
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(_Sp::__value)&#32;||&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>(_Tp::__value)&#32;};
90 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__truth_type&lt;__value&gt;::__type&#32;__type;
91 &#32;&#32;&#32;&#32;};
92 
93 &#32;&#32;<emphasis role="comment">//&#32;Compare&#32;for&#32;equality&#32;of&#32;types.</emphasis>
94 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__are_same
96 &#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
99 &#32;&#32;&#32;&#32;};
100 
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__are_same&lt;_Tp,&#32;_Tp&gt;
103 &#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
106 &#32;&#32;&#32;&#32;};
107 
108 &#32;&#32;<emphasis role="comment">//&#32;Holds&#32;if&#32;the&#32;template-argument&#32;is&#32;a&#32;void&#32;type.</emphasis>
109 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_void
111 &#32;&#32;&#32;&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
114 &#32;&#32;&#32;&#32;};
115 
116 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
117 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_void&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
118 &#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
121 &#32;&#32;&#32;&#32;};
122 
123 &#32;&#32;<emphasis role="comment">//</emphasis>
124 &#32;&#32;<emphasis role="comment">//&#32;Integer&#32;types</emphasis>
125 &#32;&#32;<emphasis role="comment">//</emphasis>
126 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer
128 &#32;&#32;&#32;&#32;{
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
131 &#32;&#32;&#32;&#32;};
132 
133 &#32;&#32;<emphasis role="comment">//&#32;Thirteen&#32;specializations&#32;(yes&#32;there&#32;are&#32;eleven&#32;standard&#32;integer</emphasis>
134 &#32;&#32;<emphasis role="comment">//&#32;types;&#32;&lt;em&gt;long&#32;long&lt;/em&gt;&#32;and&#32;&lt;em&gt;unsigned&#32;long&#32;long&lt;/em&gt;&#32;are</emphasis>
135 &#32;&#32;<emphasis role="comment">//&#32;supported&#32;as&#32;extensions).&#32;&#32;Up&#32;to&#32;four&#32;target-specific&#32;__int&lt;N&gt;</emphasis>
136 &#32;&#32;<emphasis role="comment">//&#32;types&#32;are&#32;supported&#32;as&#32;well.</emphasis>
137 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
138 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&gt;
139 &#32;&#32;&#32;&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
142 &#32;&#32;&#32;&#32;};
143 
144 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
145 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;char&gt;
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
148 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
149 &#32;&#32;&#32;&#32;};
150 
151 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
152 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;signed&#32;char&gt;
153 &#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
156 &#32;&#32;&#32;&#32;};
157 
158 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
159 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;unsigned&#32;char&gt;
160 &#32;&#32;&#32;&#32;{
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
163 &#32;&#32;&#32;&#32;};
164 
165 <emphasis role="preprocessor">#&#32;ifdef&#32;__WCHAR_TYPE__</emphasis>
166 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;
168 &#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
171 &#32;&#32;&#32;&#32;};
172 <emphasis role="preprocessor">#&#32;endif</emphasis>
173 
174 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
175 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;char8_t&gt;
177 &#32;&#32;&#32;&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
179 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
180 &#32;&#32;&#32;&#32;};
181 <emphasis role="preprocessor">#endif</emphasis>
182 
183 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;char16_t&gt;
186 &#32;&#32;&#32;&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
189 &#32;&#32;&#32;&#32;};
190 
191 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;char32_t&gt;
193 &#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
196 &#32;&#32;&#32;&#32;};
197 <emphasis role="preprocessor">#endif</emphasis>
198 
199 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
200 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;short&gt;
201 &#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
204 &#32;&#32;&#32;&#32;};
205 
206 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
207 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;unsigned&#32;short&gt;
208 &#32;&#32;&#32;&#32;{
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
210 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
211 &#32;&#32;&#32;&#32;};
212 
213 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;int&gt;
215 &#32;&#32;&#32;&#32;{
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
218 &#32;&#32;&#32;&#32;};
219 
220 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
221 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;unsigned&#32;int&gt;
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
225 &#32;&#32;&#32;&#32;};
226 
227 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
228 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;long&gt;
229 &#32;&#32;&#32;&#32;{
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
232 &#32;&#32;&#32;&#32;};
233 
234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
235 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;unsigned&#32;long&gt;
236 &#32;&#32;&#32;&#32;{
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
239 &#32;&#32;&#32;&#32;};
240 
241 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;long&#32;long&gt;
243 &#32;&#32;&#32;&#32;{
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
245 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
246 &#32;&#32;&#32;&#32;};
247 
248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_integer&lt;unsigned&#32;long&#32;long&gt;
250 &#32;&#32;&#32;&#32;{
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
253 &#32;&#32;&#32;&#32;};
254 
255 <emphasis role="preprocessor">#define&#32;__INT_N(TYPE)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
256 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
257 <emphasis role="preprocessor">&#32;&#32;template&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
258 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;__is_integer&lt;TYPE&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
259 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
260 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;enum&#32;{&#32;__value&#32;=&#32;1&#32;};&#32;&#32;&#32;&#32;&#32;\</emphasis>
261 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;__true_type&#32;__type;&#32;&#32;&#32;\</emphasis>
262 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
263 <emphasis role="preprocessor">&#32;&#32;__extension__&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
264 <emphasis role="preprocessor">&#32;&#32;template&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
265 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;__is_integer&lt;unsigned&#32;TYPE&gt;&#32;&#32;\</emphasis>
266 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
267 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;enum&#32;{&#32;__value&#32;=&#32;1&#32;};&#32;&#32;&#32;&#32;&#32;\</emphasis>
268 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;typedef&#32;__true_type&#32;__type;&#32;&#32;&#32;\</emphasis>
269 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};</emphasis>
270 
271 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_0</emphasis>
272 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2cpp__type__traits_8h_1a336bf4e61fee5f317313d01106fde707">__INT_N</link>(__GLIBCXX_TYPE_INT_N_0)
273 <emphasis role="preprocessor">#endif</emphasis>
274 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_1</emphasis>
275 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2cpp__type__traits_8h_1a336bf4e61fee5f317313d01106fde707">__INT_N</link>(__GLIBCXX_TYPE_INT_N_1)
276 <emphasis role="preprocessor">#endif</emphasis>
277 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_2</emphasis>
278 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2cpp__type__traits_8h_1a336bf4e61fee5f317313d01106fde707">__INT_N</link>(__GLIBCXX_TYPE_INT_N_2)
279 <emphasis role="preprocessor">#endif</emphasis>
280 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_3</emphasis>
281 <link linkend="__classes_2lib_2include_2c_09_09_2bits_2cpp__type__traits_8h_1a336bf4e61fee5f317313d01106fde707">__INT_N</link>(__GLIBCXX_TYPE_INT_N_3)
282 <emphasis role="preprocessor">#endif</emphasis>
283 
284 <emphasis role="preprocessor">#undef&#32;__INT_N</emphasis>
285 
286 &#32;&#32;<emphasis role="comment">//</emphasis>
287 &#32;&#32;<emphasis role="comment">//&#32;Floating&#32;point&#32;types</emphasis>
288 &#32;&#32;<emphasis role="comment">//</emphasis>
289 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_floating
291 &#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
293 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
294 &#32;&#32;&#32;&#32;};
295 
296 &#32;&#32;<emphasis role="comment">//&#32;three&#32;specializations&#32;(float,&#32;double&#32;and&#32;&apos;long&#32;double&apos;)</emphasis>
297 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
298 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_floating&lt;float&gt;
299 &#32;&#32;&#32;&#32;{
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
302 &#32;&#32;&#32;&#32;};
303 
304 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
305 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_floating&lt;double&gt;
306 &#32;&#32;&#32;&#32;{
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
309 &#32;&#32;&#32;&#32;};
310 
311 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
312 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_floating&lt;long&#32;double&gt;
313 &#32;&#32;&#32;&#32;{
314 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
316 &#32;&#32;&#32;&#32;};
317 
318 &#32;&#32;<emphasis role="comment">//</emphasis>
319 &#32;&#32;<emphasis role="comment">//&#32;Pointer&#32;types</emphasis>
320 &#32;&#32;<emphasis role="comment">//</emphasis>
321 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
322 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_pointer
323 &#32;&#32;&#32;&#32;{
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
326 &#32;&#32;&#32;&#32;};
327 
328 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_pointer&lt;_Tp*&gt;
330 &#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
333 &#32;&#32;&#32;&#32;};
334 
335 &#32;&#32;<emphasis role="comment">//</emphasis>
336 &#32;&#32;<emphasis role="comment">//&#32;An&#32;arithmetic&#32;type&#32;is&#32;an&#32;integer&#32;type&#32;or&#32;a&#32;floating&#32;point&#32;type</emphasis>
337 &#32;&#32;<emphasis role="comment">//</emphasis>
338 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_arithmetic
340 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__traitor&lt;__is_integer&lt;_Tp&gt;,&#32;__is_floating&lt;_Tp&gt;&#32;&gt;
341 &#32;&#32;&#32;&#32;{&#32;};
342 
343 &#32;&#32;<emphasis role="comment">//</emphasis>
344 &#32;&#32;<emphasis role="comment">//&#32;A&#32;scalar&#32;type&#32;is&#32;an&#32;arithmetic&#32;type&#32;or&#32;a&#32;pointer&#32;type</emphasis>
345 &#32;&#32;<emphasis role="comment">//&#32;</emphasis>
346 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
347 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_scalar
348 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__traitor&lt;__is_arithmetic&lt;_Tp&gt;,&#32;__is_pointer&lt;_Tp&gt;&#32;&gt;
349 &#32;&#32;&#32;&#32;{&#32;};
350 
351 &#32;&#32;<emphasis role="comment">//</emphasis>
352 &#32;&#32;<emphasis role="comment">//&#32;For&#32;use&#32;in&#32;std::copy&#32;and&#32;std::find&#32;overloads&#32;for&#32;streambuf&#32;iterators.</emphasis>
353 &#32;&#32;<emphasis role="comment">//</emphasis>
354 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_char
356 &#32;&#32;&#32;&#32;{
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
359 &#32;&#32;&#32;&#32;};
360 
361 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
362 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_char&lt;char&gt;
363 &#32;&#32;&#32;&#32;{
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
366 &#32;&#32;&#32;&#32;};
367 
368 <emphasis role="preprocessor">#ifdef&#32;__WCHAR_TYPE__</emphasis>
369 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
370 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_char&lt;<link linkend="__classes_2lib_2include_2stddef_8h_1a5f245e933e58ed4d268146a5b1f116ca">wchar_t</link>&gt;
371 &#32;&#32;&#32;&#32;{
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
374 &#32;&#32;&#32;&#32;};
375 <emphasis role="preprocessor">#endif</emphasis>
376 
377 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
378 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_byte
379 &#32;&#32;&#32;&#32;{
380 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
382 &#32;&#32;&#32;&#32;};
383 
384 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_byte&lt;char&gt;
386 &#32;&#32;&#32;&#32;{
387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
389 &#32;&#32;&#32;&#32;};
390 
391 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_byte&lt;signed&#32;char&gt;
393 &#32;&#32;&#32;&#32;{
394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
396 &#32;&#32;&#32;&#32;};
397 
398 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
399 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_byte&lt;unsigned&#32;char&gt;
400 &#32;&#32;&#32;&#32;{
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
402 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
403 &#32;&#32;&#32;&#32;};
404 
405 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
406 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;char;
407 
408 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
409 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_byte&lt;<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>&gt;
410 &#32;&#32;&#32;&#32;{
411 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
413 &#32;&#32;&#32;&#32;};
414 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
415 
416 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
417 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_byte&lt;char8_t&gt;
419 &#32;&#32;&#32;&#32;{
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;1&#32;};
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__true_type&#32;__type;
422 &#32;&#32;&#32;&#32;};
423 <emphasis role="preprocessor">#endif</emphasis>
424 
425 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>iterator_traits;
426 
427 &#32;&#32;<emphasis role="comment">//&#32;A&#32;type&#32;that&#32;is&#32;safe&#32;for&#32;use&#32;with&#32;memcpy,&#32;memmove,&#32;memcmp&#32;etc.</emphasis>
428 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_nonvolatile_trivially_copyable
430 &#32;&#32;&#32;&#32;{
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;__is_trivially_copyable(_Tp)&#32;};
432 &#32;&#32;&#32;&#32;};
433 
434 &#32;&#32;<emphasis role="comment">//&#32;Cannot&#32;use&#32;memcpy/memmove/memcmp&#32;on&#32;volatile&#32;types&#32;even&#32;if&#32;they&#32;are</emphasis>
435 &#32;&#32;<emphasis role="comment">//&#32;trivially&#32;copyable,&#32;so&#32;ensure&#32;__memcpyable&lt;volatile&#32;int*,&#32;volatile&#32;int*&gt;</emphasis>
436 &#32;&#32;<emphasis role="comment">//&#32;and&#32;similar&#32;will&#32;be&#32;false.</emphasis>
437 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
438 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_nonvolatile_trivially_copyable&lt;volatile&#32;_Tp&gt;
439 &#32;&#32;&#32;&#32;{
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
441 &#32;&#32;&#32;&#32;};
442 
443 &#32;&#32;<emphasis role="comment">//&#32;Whether&#32;two&#32;iterator&#32;types&#32;can&#32;be&#32;used&#32;with&#32;memcpy/memmove.</emphasis>
444 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_InputIter&gt;
445 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__memcpyable
446 &#32;&#32;&#32;&#32;{
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
448 &#32;&#32;&#32;&#32;};
449 
450 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
451 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__memcpyable&lt;_Tp*,&#32;_Tp*&gt;
452 &#32;&#32;&#32;&#32;:&#32;__is_nonvolatile_trivially_copyable&lt;_Tp&gt;
453 &#32;&#32;&#32;&#32;{&#32;};
454 
455 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
456 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__memcpyable&lt;_Tp*,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
457 &#32;&#32;&#32;&#32;:&#32;__is_nonvolatile_trivially_copyable&lt;_Tp&gt;
458 &#32;&#32;&#32;&#32;{&#32;};
459 
460 &#32;&#32;<emphasis role="comment">//&#32;Whether&#32;two&#32;iterator&#32;types&#32;can&#32;be&#32;used&#32;with&#32;memcmp.</emphasis>
461 &#32;&#32;<emphasis role="comment">//&#32;This&#32;trait&#32;only&#32;says&#32;it&apos;s&#32;well-formed&#32;to&#32;use&#32;memcmp,&#32;not&#32;that&#32;it</emphasis>
462 &#32;&#32;<emphasis role="comment">//&#32;gives&#32;the&#32;right&#32;answer&#32;for&#32;a&#32;given&#32;algorithm.&#32;So&#32;for&#32;example,&#32;std::equal</emphasis>
463 &#32;&#32;<emphasis role="comment">//&#32;needs&#32;to&#32;add&#32;additional&#32;checks&#32;that&#32;the&#32;types&#32;are&#32;integers&#32;or&#32;pointers,</emphasis>
464 &#32;&#32;<emphasis role="comment">//&#32;because&#32;other&#32;trivially&#32;copyable&#32;types&#32;can&#32;overload&#32;operator==.</emphasis>
465 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Iter2&gt;
466 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__memcmpable
467 &#32;&#32;&#32;&#32;{
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
469 &#32;&#32;&#32;&#32;};
470 
471 &#32;&#32;<emphasis role="comment">//&#32;OK&#32;to&#32;use&#32;memcmp&#32;with&#32;pointers&#32;to&#32;trivially&#32;copyable&#32;types.</emphasis>
472 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__memcmpable&lt;_Tp*,&#32;_Tp*&gt;
474 &#32;&#32;&#32;&#32;:&#32;__is_nonvolatile_trivially_copyable&lt;_Tp&gt;
475 &#32;&#32;&#32;&#32;{&#32;};
476 
477 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
478 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__memcmpable&lt;const&#32;_Tp*,&#32;_Tp*&gt;
479 &#32;&#32;&#32;&#32;:&#32;__is_nonvolatile_trivially_copyable&lt;_Tp&gt;
480 &#32;&#32;&#32;&#32;{&#32;};
481 
482 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
483 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__memcmpable&lt;_Tp*,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&gt;
484 &#32;&#32;&#32;&#32;:&#32;__is_nonvolatile_trivially_copyable&lt;_Tp&gt;
485 &#32;&#32;&#32;&#32;{&#32;};
486 
487 &#32;&#32;<emphasis role="comment">//&#32;Whether&#32;memcmp&#32;can&#32;be&#32;used&#32;to&#32;determine&#32;ordering&#32;for&#32;a&#32;type</emphasis>
488 &#32;&#32;<emphasis role="comment">//&#32;e.g.&#32;in&#32;std::lexicographical_compare&#32;or&#32;three-way&#32;comparisons.</emphasis>
489 &#32;&#32;<emphasis role="comment">//&#32;True&#32;for&#32;unsigned&#32;integer-like&#32;types&#32;where&#32;comparing&#32;each&#32;byte&#32;in&#32;turn</emphasis>
490 &#32;&#32;<emphasis role="comment">//&#32;as&#32;an&#32;unsigned&#32;char&#32;yields&#32;the&#32;right&#32;result.&#32;This&#32;is&#32;true&#32;for&#32;all</emphasis>
491 &#32;&#32;<emphasis role="comment">//&#32;unsigned&#32;integers&#32;on&#32;big&#32;endian&#32;targets,&#32;but&#32;only&#32;unsigned&#32;narrow</emphasis>
492 &#32;&#32;<emphasis role="comment">//&#32;character&#32;types&#32;(and&#32;std::byte)&#32;on&#32;little&#32;endian&#32;targets.</emphasis>
493 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_TreatAsBytes&#32;=
494 <emphasis role="preprocessor">#if&#32;__BYTE_ORDER__&#32;==&#32;__ORDER_BIG_ENDIAN__</emphasis>
495 &#32;&#32;&#32;&#32;__is_integer&lt;_Tp&gt;::__value
496 <emphasis role="preprocessor">#else</emphasis>
497 &#32;&#32;&#32;&#32;__is_byte&lt;_Tp&gt;::__value
498 <emphasis role="preprocessor">#endif</emphasis>
499 &#32;&#32;&#32;&#32;&gt;
500 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered
501 &#32;&#32;&#32;&#32;{
502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;_Tp(-1)&#32;&gt;&#32;_Tp(1);&#32;<emphasis role="comment">//&#32;is&#32;unsigned</emphasis>
503 &#32;&#32;&#32;&#32;};
504 
505 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
507 &#32;&#32;&#32;&#32;{
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">false</emphasis>;
509 &#32;&#32;&#32;&#32;};
510 
511 &#32;&#32;<emphasis role="comment">//&#32;Whether&#32;two&#32;types&#32;can&#32;be&#32;compared&#32;using&#32;memcmp.</emphasis>
512 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;sizeof(_Tp)&#32;==&#32;sizeof(_Up)&gt;
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered_with
514 &#32;&#32;&#32;&#32;{
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;__is_memcmp_ordered&lt;_Tp&gt;::__value
516 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__is_memcmp_ordered&lt;_Up&gt;::__value;
517 &#32;&#32;&#32;&#32;};
518 
519 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
520 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered_with&lt;_Tp,&#32;_Up,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
521 &#32;&#32;&#32;&#32;{
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">false</emphasis>;
523 &#32;&#32;&#32;&#32;};
524 
525 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
526 <emphasis role="preprocessor">#if&#32;__BYTE_ORDER__&#32;==&#32;__ORDER_BIG_ENDIAN__</emphasis>
527 &#32;&#32;<emphasis role="comment">//&#32;std::byte&#32;is&#32;not&#32;an&#32;integer,&#32;but&#32;it&#32;can&#32;be&#32;compared&#32;using&#32;memcmp.</emphasis>
528 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
529 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
530 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;};
531 <emphasis role="preprocessor">#endif</emphasis>
532 
533 &#32;&#32;<emphasis role="comment">//&#32;std::byte&#32;can&#32;only&#32;be&#32;compared&#32;to&#32;itself,&#32;not&#32;to&#32;other&#32;types.</emphasis>
534 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
535 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered_with&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>,&#32;std::byte,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
536 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;};
537 
538 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_SameSize&gt;
539 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered_with&lt;_Tp,&#32;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>,&#32;_SameSize&gt;
540 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;};
541 
542 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_SameSize&gt;
543 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_memcmp_ordered_with&lt;<link linkend="_namespacestd">std</link>::<link linkend="__classes_2lib_2raylib_2src_2rlgl_8h_1a0c8186d9b9b7880309c27230bbb5e69d">byte</link>,&#32;_Up,&#32;_SameSize&gt;
544 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__value&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;};
545 <emphasis role="preprocessor">#endif</emphasis>
546 
547 &#32;&#32;<emphasis role="comment">//</emphasis>
548 &#32;&#32;<emphasis role="comment">//&#32;Move&#32;iterator&#32;type</emphasis>
549 &#32;&#32;<emphasis role="comment">//</emphasis>
550 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_move_iterator
552 &#32;&#32;&#32;&#32;{
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;__value&#32;=&#32;0&#32;};
554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__false_type&#32;__type;
555 &#32;&#32;&#32;&#32;};
556 
557 &#32;&#32;<emphasis role="comment">//&#32;Fallback&#32;implementation&#32;of&#32;the&#32;function&#32;in&#32;bits/stl_iterator.h&#32;used&#32;to</emphasis>
558 &#32;&#32;<emphasis role="comment">//&#32;remove&#32;the&#32;move_iterator&#32;wrapper.</emphasis>
559 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator&gt;
560 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Iterator
562 &#32;&#32;&#32;&#32;__miter_base(_Iterator&#32;__it)
563 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__it;&#32;}
564 
565 _GLIBCXX_END_NAMESPACE_VERSION
566 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
567 }&#32;<emphasis role="comment">//&#32;extern&#32;&quot;C++&quot;</emphasis>
568 
569 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//_CPP_TYPE_TRAITS_H</emphasis>
</programlisting></section>
