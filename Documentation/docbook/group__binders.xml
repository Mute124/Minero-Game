<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__binders" xml:lang="en-US">
<title>Binder Classes</title>
<indexterm><primary>Binder Classes</primary></indexterm>
Collaboration diagram for Binder Classes:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="group__binders.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>

<para>Binders turn functions/functors with two arguments into functors with a single argument, storing an argument to be applied later. For example, a variable <computeroutput>B</computeroutput> of type <computeroutput>binder1st</computeroutput> is constructed from a functor <computeroutput>f</computeroutput> and an argument <computeroutput>x</computeroutput>. Later, B&apos;s <computeroutput>operator()</computeroutput> is called with a single argument <computeroutput>y</computeroutput>. The return value is the value of <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y)</link></computeroutput>. <computeroutput>B</computeroutput> can be <emphasis>called</emphasis> with various arguments (y1, y2, ...) and will in turn call <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y1)</link></computeroutput>, <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y2)</link></computeroutput>, ...</para>

<para>The function <computeroutput>bind1st</computeroutput> is provided to save some typing. It takes the function and an argument as parameters, and returns an instance of <computeroutput>binder1st</computeroutput>.</para>

<para>The type <computeroutput>binder2nd</computeroutput> and its creator function <computeroutput>bind2nd</computeroutput> do the same thing, but the stored argument is passed as the second parameter instead of the first, e.g., <computeroutput>bind2nd</computeroutput>(std::minus&lt;float&gt;(),1.3) will create a functor whose <computeroutput>operator()</computeroutput> accepts a floating-point number, subtracts 1.3 from it, and returns the result. (If <computeroutput>bind1st</computeroutput> had been used, the functor would perform <emphasis>1.3 - x</emphasis> instead.</para>

<para>Creator-wrapper functions like <computeroutput>bind1st</computeroutput> are intended to be used in calling algorithms. Their return values will be temporary objects. (The goal is to not require you to type names like <computeroutput>std::binder1st&lt;std::plus&lt;int&gt;&gt;</computeroutput> for declaring a variable to hold the return value from <computeroutput>bind1st(std::plus&lt;int&gt;(),5)</computeroutput>.</para>

<para>These become more useful when combined with the composition functions.</para>

<para>These functions are deprecated in C++11 and can be replaced by <computeroutput>std::bind</computeroutput> (or <computeroutput>std::tr1::bind</computeroutput>) which is more powerful and flexible, supporting functions with any number of arguments. Uses of <computeroutput>bind1st</computeroutput> can be replaced by <computeroutput>std::bind(f, x, std::placeholders::_1)</computeroutput> and <computeroutput>bind2nd</computeroutput> by <computeroutput>std::bind(f, std::placeholders::_1, x)</computeroutput>.</para>

<para>Binders turn functions/functors with two arguments into functors with a single argument, storing an argument to be applied later. For example, a variable <computeroutput>B</computeroutput> of type <computeroutput>binder1st</computeroutput> is constructed from a functor <computeroutput>f</computeroutput> and an argument <computeroutput>x</computeroutput>. Later, B&apos;s <computeroutput>operator()</computeroutput> is called with a single argument <computeroutput>y</computeroutput>. The return value is the value of <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y)</link></computeroutput>. <computeroutput>B</computeroutput> can be <emphasis>called</emphasis> with various arguments (y1, y2, ...) and will in turn call <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y1)</link></computeroutput>, <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y2)</link></computeroutput>, ...</para>

<para>The function <computeroutput>bind1st</computeroutput> is provided to save some typing. It takes the function and an argument as parameters, and returns an instance of <computeroutput>binder1st</computeroutput>.</para>

<para>The type <computeroutput>binder2nd</computeroutput> and its creator function <computeroutput>bind2nd</computeroutput> do the same thing, but the stored argument is passed as the second parameter instead of the first, e.g., <computeroutput>bind2nd</computeroutput>(std::minus&lt;float&gt;(),1.3) will create a functor whose <computeroutput>operator()</computeroutput> accepts a floating-point number, subtracts 1.3 from it, and returns the result. (If <computeroutput>bind1st</computeroutput> had been used, the functor would perform <emphasis>1.3 - x</emphasis> instead.</para>

<para>Creator-wrapper functions like <computeroutput>bind1st</computeroutput> are intended to be used in calling algorithms. Their return values will be temporary objects. (The goal is to not require you to type names like <computeroutput>std::binder1st&lt;std::plus&lt;int&gt;&gt;</computeroutput> for declaring a variable to hold the return value from <computeroutput>bind1st(std::plus&lt;int&gt;(),5)</computeroutput>.</para>

<para>These become more useful when combined with the composition functions.</para>

<para>These functions are deprecated in C++11 and can be replaced by <computeroutput>std::bind</computeroutput> (or <computeroutput>std::tr1::bind</computeroutput>) which is more powerful and flexible, supporting functions with any number of arguments. Uses of <computeroutput>bind1st</computeroutput> can be replaced by <computeroutput>std::bind(f, x, std::placeholders::_1)</computeroutput> and <computeroutput>bind2nd</computeroutput> by <computeroutput>std::bind(f, std::placeholders::_1, x)</computeroutput>.</para>

<para>Binders turn functions/functors with two arguments into functors with a single argument, storing an argument to be applied later. For example, a variable <computeroutput>B</computeroutput> of type <computeroutput>binder1st</computeroutput> is constructed from a functor <computeroutput>f</computeroutput> and an argument <computeroutput>x</computeroutput>. Later, B&apos;s <computeroutput>operator()</computeroutput> is called with a single argument <computeroutput>y</computeroutput>. The return value is the value of <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y)</link></computeroutput>. <computeroutput>B</computeroutput> can be <emphasis>called</emphasis> with various arguments (y1, y2, ...) and will in turn call <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y1)</link></computeroutput>, <computeroutput><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0fdda94b8b7e64884690244028f455ba">f(x,y2)</link></computeroutput>, ...</para>

<para>The function <computeroutput>bind1st</computeroutput> is provided to save some typing. It takes the function and an argument as parameters, and returns an instance of <computeroutput>binder1st</computeroutput>.</para>

<para>The type <computeroutput>binder2nd</computeroutput> and its creator function <computeroutput>bind2nd</computeroutput> do the same thing, but the stored argument is passed as the second parameter instead of the first, e.g., <computeroutput>bind2nd</computeroutput>(std::minus&lt;float&gt;(),1.3) will create a functor whose <computeroutput>operator()</computeroutput> accepts a floating-point number, subtracts 1.3 from it, and returns the result. (If <computeroutput>bind1st</computeroutput> had been used, the functor would perform <emphasis>1.3 - x</emphasis> instead.</para>

<para>Creator-wrapper functions like <computeroutput>bind1st</computeroutput> are intended to be used in calling algorithms. Their return values will be temporary objects. (The goal is to not require you to type names like <computeroutput>std::binder1st&lt;std::plus&lt;int&gt;&gt;</computeroutput> for declaring a variable to hold the return value from <computeroutput>bind1st(std::plus&lt;int&gt;(),5)</computeroutput>.</para>

<para>These become more useful when combined with the composition functions.</para>

<para>These functions are deprecated in C++11 and can be replaced by <computeroutput>std::bind</computeroutput> (or <computeroutput>std::tr1::bind</computeroutput>) which is more powerful and flexible, supporting functions with any number of arguments. Uses of <computeroutput>bind1st</computeroutput> can be replaced by <computeroutput>std::bind(f, x, std::placeholders::_1)</computeroutput> and <computeroutput>bind2nd</computeroutput> by <computeroutput>std::bind(f, std::placeholders::_1, x)</computeroutput>.</para>
</section>
