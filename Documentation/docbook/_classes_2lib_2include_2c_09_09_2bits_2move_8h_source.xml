<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2move_8h_source" xml:lang="en-US">
<title>move.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/move.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Move,&#32;forward&#32;and&#32;identity&#32;for&#32;C++11&#32;+&#32;swap&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_MOVE_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_MOVE_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#include&#32;&lt;bits/c++config.h&gt;</emphasis>
34 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
35 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/concept_check.h&gt;</emphasis>
36 <emphasis role="preprocessor">#endif</emphasis>
37 
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
39 {
40 _GLIBCXX_BEGIN_NAMESPACE_VERSION
41 
42 &#32;&#32;<emphasis role="comment">//&#32;Used,&#32;in&#32;C++03&#32;mode&#32;too,&#32;by&#32;allocators,&#32;etc.</emphasis>
47 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
48 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX_CONSTEXPR&#32;_Tp*
49 &#32;&#32;&#32;&#32;__addressof(_Tp&amp;&#32;__r)&#32;_GLIBCXX_NOEXCEPT
50 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_addressof(__r);&#32;}
51 
52 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
53 
54 _GLIBCXX_END_NAMESPACE_VERSION
55 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
56 
57 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>&#32;<emphasis role="comment">//&#32;Brings&#32;in&#32;std::declval&#32;too.</emphasis>
58 
59 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
60 {
61 _GLIBCXX_BEGIN_NAMESPACE_VERSION
62 
74 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
75 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
76 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;&amp;
77 &#32;&#32;&#32;&#32;forward(<emphasis role="keyword">typename</emphasis>&#32;std::remove_reference&lt;_Tp&gt;::type&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
78 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__t);&#32;}
79 
86 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
87 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp&amp;&amp;
89 &#32;&#32;&#32;&#32;forward(<emphasis role="keyword">typename</emphasis>&#32;std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_lvalue_reference&lt;_Tp&gt;::value,
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;std::forward&#32;must&#32;not&#32;be&#32;used&#32;to&#32;convert&#32;an&#32;rvalue&#32;to&#32;an&#32;lvalue&quot;</emphasis>);
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__t);
94 &#32;&#32;&#32;&#32;}
95 
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
102 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_reference&lt;_Tp&gt;::type&amp;&amp;
104 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(_Tp&amp;&amp;&#32;__t)&#32;<emphasis role="keyword">noexcept</emphasis>
105 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;std::remove_reference&lt;_Tp&gt;::type&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__t);&#32;}
106 
107 
108 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__move_if_noexcept_cond
110 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__and_&lt;__not_&lt;is_nothrow_move_constructible&lt;_Tp&gt;&gt;,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_copy_constructible&lt;_Tp&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;{&#32;};
112 
121 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
122 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
124 &#32;&#32;&#32;&#32;__conditional_t&lt;__move_if_noexcept_cond&lt;_Tp&gt;::value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;_Tp&amp;&amp;&gt;
125 &#32;&#32;&#32;&#32;move_if_noexcept(_Tp&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
126 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x);&#32;}
127 
128 &#32;&#32;<emphasis role="comment">//&#32;declval,&#32;from&#32;type_traits.</emphasis>
129 
130 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
131 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
132 &#32;&#32;<emphasis role="comment">//&#32;2296.&#32;std::addressof&#32;should&#32;be&#32;constexpr</emphasis>
133 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_addressof_constexpr&#32;201603L</emphasis>
134 <emphasis role="preprocessor">#endif</emphasis>
142 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
143 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;_Tp*
145 &#32;&#32;&#32;&#32;addressof(_Tp&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
146 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(__r);&#32;}
147 
148 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
149 &#32;&#32;<emphasis role="comment">//&#32;2598.&#32;addressof&#32;works&#32;on&#32;temporaries</emphasis>
150 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
151 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;addressof(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
152 
153 &#32;&#32;<emphasis role="comment">//&#32;C++11&#32;version&#32;of&#32;std::exchange&#32;for&#32;internal&#32;use.</emphasis>
154 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&#32;=&#32;_Tp&gt;
155 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp
157 &#32;&#32;&#32;&#32;__exchange(_Tp&amp;&#32;__obj,&#32;_Up&amp;&amp;&#32;__new_val)
158 &#32;&#32;&#32;&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__old_val&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__obj);
160 &#32;&#32;&#32;&#32;&#32;&#32;__obj&#32;=&#32;std::forward&lt;_Up&gt;(__new_val);
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__old_val;
162 &#32;&#32;&#32;&#32;}
163 
165 
166 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FWDREF(_Tp)&#32;_Tp&amp;&amp;</emphasis>
167 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOVE(__val)&#32;std::move(__val)</emphasis>
168 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FORWARD(_Tp,&#32;__val)&#32;std::forward&lt;_Tp&gt;(__val)</emphasis>
169 <emphasis role="preprocessor">#else</emphasis>
170 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FWDREF(_Tp)&#32;const&#32;_Tp&amp;</emphasis>
171 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MOVE(__val)&#32;(__val)</emphasis>
172 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FORWARD(_Tp,&#32;__val)&#32;(__val)</emphasis>
173 <emphasis role="preprocessor">#endif</emphasis>
174 
186 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
187 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
188 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
189 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
190 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;__not_&lt;__is_tuple_like&lt;_Tp&gt;&gt;,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_move_constructible&lt;_Tp&gt;,
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_move_assignable&lt;_Tp&gt;&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
193 <emphasis role="preprocessor">#else</emphasis>
194 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
195 <emphasis role="preprocessor">#endif</emphasis>
196 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Tp&amp;&#32;__a,&#32;_Tp&amp;&#32;__b)
197 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__and_&lt;is_nothrow_move_constructible&lt;_Tp&gt;,
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_nothrow_move_assignable&lt;_Tp&gt;&gt;<link linkend="_classvalue">::value</link>)
199 &#32;&#32;&#32;&#32;{
200 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ad4d65553da008b4ea233b534b21d4009">__glibcxx_function_requires</link>(_SGIAssignableConcept&lt;_Tp&gt;)
203 <emphasis role="preprocessor">#endif</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__a);
205 &#32;&#32;&#32;&#32;&#32;&#32;__a&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(__b);
206 &#32;&#32;&#32;&#32;&#32;&#32;__b&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2move_8h_1a25fb9ca1ff181cdd99fa46b2fd2eeddc">_GLIBCXX_MOVE</link>(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
207 &#32;&#32;&#32;&#32;}
208 
209 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
210 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;809.&#32;std::swap&#32;should&#32;be&#32;overloaded&#32;for&#32;array&#32;types.</emphasis>
212 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
213 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
215 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__is_swappable&lt;_Tp&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
217 <emphasis role="preprocessor">#else</emphasis>
218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
219 <emphasis role="preprocessor">#endif</emphasis>
220 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_Tp&#32;(&amp;__a)[_Nm],&#32;_Tp&#32;(&amp;__b)[_Nm])
221 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable&lt;_Tp&gt;::value)
222 &#32;&#32;&#32;&#32;{
223 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__n&#32;=&#32;0;&#32;__n&#32;&lt;&#32;_Nm;&#32;++__n)
224 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__a[__n],&#32;__b[__n]);
225 &#32;&#32;&#32;&#32;}
226 
228 _GLIBCXX_END_NAMESPACE_VERSION
229 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
230 
231 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_MOVE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
