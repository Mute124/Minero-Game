<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_source" xml:lang="en-US">
<title>functional_hash.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/functional_hash.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;functional_hash.h&#32;header&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_FUNCTIONAL_HASH_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_FUNCTIONAL_HASH_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;bits/hash_bytes.h&gt;</emphasis>
37 
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
39 {
40 _GLIBCXX_BEGIN_NAMESPACE_VERSION
41 
50 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Result,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Arg&gt;
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__hash_base
52 &#32;&#32;&#32;&#32;{
53 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Result&#32;&#32;&#32;&#32;&#32;result_type&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9fc2e019cf58d1fd9471f83ca143155d">_GLIBCXX17_DEPRECATED</link>;
54 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Arg&#32;&#32;&#32;&#32;&#32;&#32;argument_type&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a9fc2e019cf58d1fd9471f83ca143155d">_GLIBCXX17_DEPRECATED</link>;
55 &#32;&#32;&#32;&#32;};
56 
58 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash;
60 
61 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__poison_hash
63 &#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__enable_hash_call&#32;=&#32;<emphasis role="keyword">false</emphasis>;
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
66 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Private&#32;rather&#32;than&#32;deleted&#32;to&#32;be&#32;non-trivially-copyable.</emphasis>
67 &#32;&#32;&#32;&#32;&#32;&#32;__poison_hash(__poison_hash&amp;&amp;);
68 &#32;&#32;&#32;&#32;&#32;&#32;~__poison_hash();
69 &#32;&#32;&#32;&#32;};
70 
71 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
72 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__poison_hash&lt;_Tp,&#32;__void_t&lt;decltype(hash&lt;_Tp&gt;()(declval&lt;_Tp&gt;()))&gt;&gt;
73 &#32;&#32;&#32;&#32;{
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__enable_hash_call&#32;=&#32;<emphasis role="keyword">true</emphasis>;
75 &#32;&#32;&#32;&#32;};
76 
77 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;struct&#32;for&#32;SFINAE-poisoning&#32;non-enum&#32;types.</emphasis>
78 &#32;&#32;template&lt;typename&#32;_Tp,&#32;bool&#32;=&#32;is_enum&lt;_Tp&gt;::value&gt;
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__hash_enum
80 &#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
82 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Private&#32;rather&#32;than&#32;deleted&#32;to&#32;be&#32;non-trivially-copyable.</emphasis>
83 &#32;&#32;&#32;&#32;&#32;&#32;__hash_enum(__hash_enum&amp;&amp;);
84 &#32;&#32;&#32;&#32;&#32;&#32;~__hash_enum();
85 &#32;&#32;&#32;&#32;};
86 
87 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;struct&#32;for&#32;hash&#32;with&#32;enum&#32;types.</emphasis>
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__hash_enum&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;_Tp&gt;
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
92 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;underlying_type&lt;_Tp&gt;::type;
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash&lt;__type&gt;{}(<emphasis role="keyword">static_cast&lt;</emphasis>__type<emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));
96 &#32;&#32;&#32;&#32;&#32;&#32;}
97 &#32;&#32;&#32;&#32;};
98 
100 &#32;&#32;<emphasis role="comment">//&#32;Use&#32;with&#32;non-enum&#32;types&#32;still&#32;SFINAES.</emphasis>
101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&#32;:&#32;__hash_enum&lt;_Tp&gt;
103 &#32;&#32;&#32;&#32;{&#32;};
104 
106 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;_Tp*&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;_Tp*&gt;
108 &#32;&#32;&#32;&#32;{
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp*&#32;__p)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(__p);&#32;}
112 &#32;&#32;&#32;&#32;};
113 
114 &#32;&#32;<emphasis role="comment">//&#32;Explicit&#32;specializations&#32;for&#32;integer&#32;types.</emphasis>
115 <emphasis role="preprocessor">#define&#32;_Cxx_hashtable_define_trivial_hash(_Tp)&#32;&#32;&#32;&#32;&#32;\</emphasis>
116 <emphasis role="preprocessor">&#32;&#32;template&lt;&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
117 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;struct&#32;hash&lt;_Tp&gt;&#32;:&#32;public&#32;__hash_base&lt;size_t,&#32;_Tp&gt;&#32;&#32;\</emphasis>
118 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
119 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;size_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;operator()(_Tp&#32;__val)&#32;const&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;return&#32;static_cast&lt;size_t&gt;(__val);&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
122 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;};</emphasis>
123 
125 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">bool</emphasis>)
126 
127 &#32;&#32;
128 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">char</emphasis>)
129 
130 &#32;&#32;
131 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">signed</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)
132 
133 &#32;&#32;
134 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)
135 
136 &#32;&#32;
137 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">wchar_t</emphasis>)
138 
139 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
141 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">char8_t</emphasis>)
142 <emphasis role="preprocessor">#endif</emphasis>
143 
145 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">char16_t</emphasis>)
146 
147 &#32;&#32;
148 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">char32_t</emphasis>)
149 
150 &#32;&#32;
151 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">short</emphasis>)
152 
153 &#32;&#32;
154 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">int</emphasis>)
155 
156 &#32;&#32;
157 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">long</emphasis>)
158 
159 &#32;&#32;
160 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)
161 
162 &#32;&#32;
163 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>)
164 
165 &#32;&#32;
166 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)
167 
168 &#32;&#32;
169 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)
170 
171 &#32;&#32;
172 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)
173 
174 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_0</emphasis>
175 &#32;&#32;__extension__
176 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_0)
177 &#32;&#32;__extension__
178 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_0&#32;<emphasis role="keywordtype">unsigned</emphasis>)
179 <emphasis role="preprocessor">#endif</emphasis>
180 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_1</emphasis>
181 &#32;&#32;__extension__
182 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_1)
183 &#32;&#32;__extension__
184 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_1&#32;<emphasis role="keywordtype">unsigned</emphasis>)
185 <emphasis role="preprocessor">#endif</emphasis>
186 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_2</emphasis>
187 &#32;&#32;__extension__
188 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_2)
189 &#32;&#32;__extension__
190 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_2&#32;<emphasis role="keywordtype">unsigned</emphasis>)
191 <emphasis role="preprocessor">#endif</emphasis>
192 <emphasis role="preprocessor">#ifdef&#32;__GLIBCXX_TYPE_INT_N_3</emphasis>
193 &#32;&#32;__extension__
194 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_3)
195 &#32;&#32;__extension__
196 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2functional__hash_8h_1a306723f38810927246a2eb7b4c791197">_Cxx_hashtable_define_trivial_hash</link>(__GLIBCXX_TYPE_INT_N_3&#32;<emphasis role="keywordtype">unsigned</emphasis>)
197 <emphasis role="preprocessor">#endif</emphasis>
198 
199 <emphasis role="preprocessor">#undef&#32;_Cxx_hashtable_define_trivial_hash</emphasis>
200 
201 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_impl
202 &#32;&#32;{
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
204 &#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__ptr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__clength,
205 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__seed&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(0xc70f6907UL))
206 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a46efad1a1add9933b471435df48b3c04">_Hash_bytes</link>(__ptr,&#32;__clength,&#32;__seed);&#32;}
207 
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
211 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash(&amp;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));&#32;}
212 
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
215 &#32;&#32;&#32;&#32;&#32;&#32;__hash_combine(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__hash)
216 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash(&amp;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;__hash);&#32;}
217 &#32;&#32;};
218 
219 &#32;&#32;<emphasis role="comment">//&#32;A&#32;hash&#32;function&#32;similar&#32;to&#32;FNV-1a&#32;(see&#32;PR59406&#32;for&#32;how&#32;it&#32;differs).</emphasis>
220 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Fnv_hash_impl
221 &#32;&#32;{
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
223 &#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__ptr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__clength,
224 &#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__seed&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(2166136261UL))
225 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ae22dd3a584b885cf26cf4e6f9d5d0f6b">_Fnv_hash_bytes</link>(__ptr,&#32;__clength,&#32;__seed);&#32;}
226 
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;hash(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
230 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash(&amp;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>));&#32;}
231 
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
234 &#32;&#32;&#32;&#32;&#32;&#32;__hash_combine(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__hash)
235 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash(&amp;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;__hash);&#32;}
236 &#32;&#32;};
237 
239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;float&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;float&gt;
241 &#32;&#32;&#32;&#32;{
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
243 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;and&#32;-0&#32;both&#32;hash&#32;to&#32;zero.</emphasis>
246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;!=&#32;0.0f&#32;?&#32;std::_Hash_impl::hash(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;:&#32;0;
247 &#32;&#32;&#32;&#32;&#32;&#32;}
248 &#32;&#32;&#32;&#32;};
249 
251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;double&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;double&gt;
253 &#32;&#32;&#32;&#32;{
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
255 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;0&#32;and&#32;-0&#32;both&#32;hash&#32;to&#32;zero.</emphasis>
258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;!=&#32;0.0&#32;?&#32;std::_Hash_impl::hash(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;:&#32;0;
259 &#32;&#32;&#32;&#32;&#32;&#32;}
260 &#32;&#32;&#32;&#32;};
261 
263 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
264 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;long&#32;double&gt;
265 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;long&#32;double&gt;
266 &#32;&#32;&#32;&#32;{
267 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link>&#32;<emphasis role="keywordtype">size_t</emphasis>
268 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
269 &#32;&#32;&#32;&#32;};
270 
271 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
272 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
273 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;nullptr_t&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;nullptr_t&gt;
274 &#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
276 &#32;&#32;&#32;&#32;&#32;&#32;operator()(nullptr_t)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
277 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
278 &#32;&#32;&#32;&#32;};
279 <emphasis role="preprocessor">#endif</emphasis>
280 
282 
283 &#32;&#32;<emphasis role="comment">//&#32;Hint&#32;about&#32;performance&#32;of&#32;hash&#32;functor.&#32;If&#32;not&#32;fast&#32;the&#32;hash-based</emphasis>
284 &#32;&#32;<emphasis role="comment">//&#32;containers&#32;will&#32;cache&#32;the&#32;hash&#32;code.</emphasis>
285 &#32;&#32;<emphasis role="comment">//&#32;Default&#32;behavior&#32;is&#32;to&#32;consider&#32;that&#32;hashers&#32;are&#32;fast&#32;unless&#32;specified</emphasis>
286 &#32;&#32;<emphasis role="comment">//&#32;otherwise.</emphasis>
287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Hash&gt;
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fast_hash&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::true_type
289 &#32;&#32;&#32;&#32;{&#32;};
290 
291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fast_hash&lt;hash&lt;long&#32;double&gt;&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::false_type
293 &#32;&#32;&#32;&#32;{&#32;};
294 
295 _GLIBCXX_END_NAMESPACE_VERSION
296 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
297 
298 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_FUNCTIONAL_HASH_H</emphasis>
</programlisting></section>
