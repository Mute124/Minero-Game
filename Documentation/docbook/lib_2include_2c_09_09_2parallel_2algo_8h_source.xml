<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2parallel_2algo_8h_source" xml:lang="en-US">
<title>algo.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/parallel/algo.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
35 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler&#32;and&#32;Felix&#32;Putze.</emphasis>
36 
37 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_ALGO_H</emphasis>
38 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_ALGO_H&#32;1</emphasis>
39 
40 <emphasis role="preprocessor">#include&#32;&lt;parallel/algorithmfwd.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algobase.h&gt;</emphasis>
42 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_algo.h&gt;</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;parallel/iterator.h&gt;</emphasis>
44 <emphasis role="preprocessor">#include&#32;&lt;parallel/base.h&gt;</emphasis>
45 <emphasis role="preprocessor">#include&#32;&lt;parallel/sort.h&gt;</emphasis>
46 <emphasis role="preprocessor">#include&#32;&lt;parallel/workstealing.h&gt;</emphasis>
47 <emphasis role="preprocessor">#include&#32;&lt;parallel/par_loop.h&gt;</emphasis>
48 <emphasis role="preprocessor">#include&#32;&lt;parallel/omp_loop.h&gt;</emphasis>
49 <emphasis role="preprocessor">#include&#32;&lt;parallel/omp_loop_static.h&gt;</emphasis>
50 <emphasis role="preprocessor">#include&#32;&lt;parallel/for_each_selectors.h&gt;</emphasis>
51 <emphasis role="preprocessor">#include&#32;&lt;parallel/for_each.h&gt;</emphasis>
52 <emphasis role="preprocessor">#include&#32;&lt;parallel/find.h&gt;</emphasis>
53 <emphasis role="preprocessor">#include&#32;&lt;parallel/find_selectors.h&gt;</emphasis>
54 <emphasis role="preprocessor">#include&#32;&lt;parallel/search.h&gt;</emphasis>
55 <emphasis role="preprocessor">#include&#32;&lt;parallel/random_shuffle.h&gt;</emphasis>
56 <emphasis role="preprocessor">#include&#32;&lt;parallel/partition.h&gt;</emphasis>
57 <emphasis role="preprocessor">#include&#32;&lt;parallel/merge.h&gt;</emphasis>
58 <emphasis role="preprocessor">#include&#32;&lt;parallel/unique_copy.h&gt;</emphasis>
59 <emphasis role="preprocessor">#include&#32;&lt;parallel/set_operations.h&gt;</emphasis>
60 
61 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
62 {
63 <emphasis role="keyword">namespace&#32;</emphasis>__parallel
64 {
65 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
66 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Function&gt;
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Function
68 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Function&#32;__f,
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
70 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::for_each(__begin,&#32;__end,&#32;__f);&#32;}
71 
72 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
73 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Function,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
74 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Function
75 &#32;&#32;&#32;&#32;__for_each_switch(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Function&#32;__f,
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
77 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>(__begin,&#32;__end,&#32;__f,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
78 
79 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
80 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Function&gt;
81 &#32;&#32;&#32;&#32;_Function
82 &#32;&#32;&#32;&#32;__for_each_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Function&#32;__f,&#32;random_access_iterator_tag,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
85 &#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().for_each_minimal_n
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__dummy;
92 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____for__each__selector">__gnu_parallel::__for_each_selector&lt;_RAIter&gt;</link>&#32;__functionality;
93 
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
95 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__f,&#32;__functionality,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___dummy_reduct">__gnu_parallel::_DummyReduct</link>(),&#32;<emphasis role="keyword">true</emphasis>,&#32;__dummy,&#32;-1,
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
99 &#32;&#32;&#32;&#32;}
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>(__begin,&#32;__end,&#32;__f,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
102 &#32;&#32;&#32;&#32;}
103 
104 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
105 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Function&gt;
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Function
107 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>(_Iterator&#32;__begin,&#32;_Iterator&#32;__end,&#32;_Function&#32;__f,
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__for_each_switch(__begin,&#32;__end,&#32;__f,
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
113 &#32;&#32;&#32;&#32;}
114 
115 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Function&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Function
117 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aefb696460665211a0f32f8a15f444c57">for_each</link>(_Iterator&#32;__begin,&#32;_Iterator&#32;__end,&#32;_Function&#32;__f)
118 &#32;&#32;&#32;&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__for_each_switch(__begin,&#32;__end,&#32;__f,
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
121 &#32;&#32;&#32;&#32;}
122 
123 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
124 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
126 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">find</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
127 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
128 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
129 
130 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
131 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
132 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
133 &#32;&#32;&#32;&#32;__find_switch(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
135 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
136 
137 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;find&#32;for&#32;random&#32;access&#32;iterators</emphasis>
138 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
139 &#32;&#32;&#32;&#32;_RAIter
140 &#32;&#32;&#32;&#32;__find_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;random_access_iterator_tag)
142 &#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
147 &#32;&#32;&#32;&#32;{
148 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd">__gnu_parallel::__binder2nd</link>&lt;<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo</link>&lt;_ValueType,
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&gt;,
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp(<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo&lt;_ValueType, const _Tp&amp;&gt;</link>(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::__find_template</link>(
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__begin,&#32;__comp,
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____find__if__selector">__gnu_parallel::__find_if_selector</link>()).first;
155 &#32;&#32;&#32;&#32;}
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
157 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
158 &#32;&#32;&#32;&#32;}
159 
160 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
161 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
163 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ae3e398a3f38b0182e770944d57402701">find</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
164 &#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__find_switch(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
167 &#32;&#32;&#32;&#32;}
168 
169 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
170 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
171 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
172 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">find_if</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Predicate&#32;__pred,
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
174 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find_if(__begin,&#32;__end,&#32;__pred);&#32;}
175 
176 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
177 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
179 &#32;&#32;&#32;&#32;__find_if_switch(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Predicate&#32;__pred,
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
181 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find_if(__begin,&#32;__end,&#32;__pred);&#32;}
182 
183 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;find_if&#32;for&#32;random&#32;access&#32;iterators</emphasis>
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
185 &#32;&#32;&#32;&#32;_RAIter
186 &#32;&#32;&#32;&#32;__find_if_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;random_access_iterator_tag)
188 &#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
190 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::__find_template</link>(__begin,&#32;__end,&#32;__begin,&#32;__pred,
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel">__gnu_parallel</link>::
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__find_if_selector()).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find_if(__begin,&#32;__end,&#32;__pred);
195 &#32;&#32;&#32;&#32;}
196 
197 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
198 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
200 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a12540b98a8b3f5862173e50b92f1de81">find_if</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Predicate&#32;__pred)
201 &#32;&#32;&#32;&#32;{
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__find_if_switch(__begin,&#32;__end,&#32;__pred,
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
204 &#32;&#32;&#32;&#32;}
205 
206 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
207 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
209 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__begin2,&#32;_FIterator&#32;__end2,
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
212 &#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find_first_of(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2);
214 &#32;&#32;&#32;&#32;}
215 
216 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
217 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
220 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__begin2,&#32;_FIterator&#32;__end2,
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
223 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::find_first_of(
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__comp);&#32;}
225 
226 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;type</emphasis>
227 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
230 &#32;&#32;&#32;&#32;__find_first_of_switch(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__begin2,&#32;_FIterator&#32;__end2,
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2)
233 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
235 
236 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
237 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
239 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_RAIter
240 &#32;&#32;&#32;&#32;__find_first_of_switch(_RAIter&#32;__begin1,
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end1,
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__begin2,&#32;_FIterator&#32;__end2,
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp,&#32;random_access_iterator_tag,
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
245 &#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::</link>
247 <link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">	__find_template</link>(__begin1,&#32;__end1,&#32;__begin1,&#32;__comp,
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____find__first__of__selector">__gnu_parallel::__find_first_of_selector</link>
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;_FIterator&gt;(__begin2,&#32;__end2)).first;
250 &#32;&#32;&#32;&#32;}
251 
252 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;type</emphasis>
253 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
256 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
257 &#32;&#32;&#32;&#32;__find_first_of_switch(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__begin2,&#32;_FIterator&#32;__end2,
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp,&#32;_IteratorTag1,&#32;_IteratorTag2)
260 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__comp,
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
262 
263 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
264 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
266 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
267 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__begin2,&#32;_FIterator&#32;__end2,
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__comp)
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__find_first_of_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__comp,
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
274 &#32;&#32;&#32;&#32;}
275 
276 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
277 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
278 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_IIter
279 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator&#32;__begin2,&#32;_FIterator&#32;__end2)
281 &#32;&#32;&#32;&#32;{
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;::value_type&#32;_IValueType;
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_FIterator&gt;::value_type&#32;_FValueType;
284 
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::find_first_of(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo&lt;_IValueType, _FValueType&gt;</link>());
287 &#32;&#32;&#32;&#32;}
288 
289 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
290 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
291 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
292 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,&#32;_OutputIterator&#32;__out,
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
294 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::unique_copy(__begin1,&#32;__end1,&#32;__out);&#32;}
295 
296 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
297 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
299 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
300 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,&#32;_OutputIterator&#32;__out,
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
302 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::unique_copy(__begin1,&#32;__end1,&#32;__out,&#32;__pred);&#32;}
303 
304 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
308 &#32;&#32;&#32;&#32;__unique_copy_switch(_IIter&#32;__begin,&#32;_IIter&#32;__last,
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred,
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2)
311 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::unique_copy(__begin,&#32;__last,&#32;__out,&#32;__pred);&#32;}
312 
313 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;unique_copy&#32;for&#32;random&#32;access&#32;iterators</emphasis>
314 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomAccessOutputIterator,
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
316 &#32;&#32;&#32;&#32;_RandomAccessOutputIterator
317 &#32;&#32;&#32;&#32;__unique_copy_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__last,
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomAccessOutputIterator&#32;__out,&#32;_Predicate&#32;__pred,
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag)
320 &#32;&#32;&#32;&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__last&#32;-&#32;__begin)
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().unique_copy_minimal_n))
324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a15f31ee1c15e180d0d838571cd6c8b24">__gnu_parallel::__parallel_unique_copy</link>(
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__last,&#32;__out,&#32;__pred);
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::unique_copy(__begin,&#32;__last,&#32;__out,&#32;__pred);
328 &#32;&#32;&#32;&#32;}
329 
330 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
331 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
332 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
333 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,&#32;_OutputIterator&#32;__out)
334 &#32;&#32;&#32;&#32;{
335 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter&gt;::value_type&#32;_ValueType;
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__unique_copy_switch(
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__out,&#32;equal_to&lt;_ValueType&gt;(),
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
341 &#32;&#32;&#32;&#32;}
342 
343 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
344 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
345 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
346 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5dca0b0436966649ae7ffb41cf4c67d9">unique_copy</link>(_IIter&#32;__begin1,&#32;_IIter&#32;__end1,&#32;_OutputIterator&#32;__out,
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred)
348 &#32;&#32;&#32;&#32;{
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__unique_copy_switch(
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__out,&#32;__pred,
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
353 &#32;&#32;&#32;&#32;}
354 
355 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
356 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
358 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
359 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
362 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_union(
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out);&#32;}
364 
365 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
366 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
368 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
369 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred,
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
373 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_union(__begin1,&#32;__end1,
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred);&#32;}
375 
376 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
377 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag3&gt;
380 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
381 &#32;&#32;&#32;&#32;__set_union_switch(
382 &#32;&#32;&#32;&#32;&#32;&#32;_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
383 &#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Predicate&#32;__pred,
384 &#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2,&#32;_IteratorTag3)
385 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_union(__begin1,&#32;__end1,
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);&#32;}
387 
388 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;set_union&#32;for&#32;random&#32;access&#32;iterators</emphasis>
389 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Output_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
391 &#32;&#32;&#32;&#32;_Output_RAIter
392 &#32;&#32;&#32;&#32;__set_union_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_RAIter2&#32;__end2,
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Output_RAIter&#32;__result,&#32;_Predicate&#32;__pred,
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag,
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
397 &#32;&#32;&#32;&#32;{
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end1&#32;-&#32;__begin1)
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_union_minimal_n
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end2&#32;-&#32;__begin2)
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_union_minimal_n))
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a56bac3b8498aadcd3ce073422f0b9822">__gnu_parallel::__parallel_set_union</link>(
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_union(__begin1,&#32;__end1,
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
408 &#32;&#32;&#32;&#32;}
409 
410 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
411 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
413 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
414 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,&#32;_OutputIterator&#32;__out)
416 &#32;&#32;&#32;&#32;{
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type&#32;_ValueType1;
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&#32;_ValueType2;
419 
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_union_switch(
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___less">__gnu_parallel::_Less&lt;_ValueType1, _ValueType2&gt;</link>(),
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
426 &#32;&#32;&#32;&#32;}
427 
428 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
429 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
431 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
432 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a155557f687cee85bd20e448e8739c8">set_union</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred)
435 &#32;&#32;&#32;&#32;{
436 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_union_switch(
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred,
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
441 &#32;&#32;&#32;&#32;}
442 
443 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
444 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
446 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
447 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
450 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_intersection(__begin1,&#32;__end1,
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__out);&#32;}
452 
453 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
454 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
456 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
457 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred,
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
461 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_intersection(
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred);&#32;}
463 
464 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
465 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2,
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag3&gt;
469 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
470 &#32;&#32;&#32;&#32;__set_intersection_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Predicate&#32;__pred,
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2,&#32;_IteratorTag3)
474 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_intersection(__begin1,&#32;__end1,&#32;__begin2,
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end2,&#32;__result,&#32;__pred);&#32;}
476 
477 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;set_intersection&#32;for&#32;random&#32;access&#32;iterators</emphasis>
478 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Output_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
480 &#32;&#32;&#32;&#32;_Output_RAIter
481 &#32;&#32;&#32;&#32;__set_intersection_switch(_RAIter1&#32;__begin1,
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__end1,
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__end2,
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Output_RAIter&#32;__result,
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
490 &#32;&#32;&#32;&#32;{
491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end1&#32;-&#32;__begin1)
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_union_minimal_n
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end2&#32;-&#32;__begin2)
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_union_minimal_n))
496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1aa2d25a01058104978680d0b5d934b54f">__gnu_parallel::__parallel_set_intersection</link>(
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
499 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_intersection(
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
501 &#32;&#32;&#32;&#32;}
502 
503 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
504 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
507 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out)
510 &#32;&#32;&#32;&#32;{
511 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type&#32;_ValueType1;
512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&#32;_ValueType2;
513 
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_intersection_switch(
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___less">__gnu_parallel::_Less&lt;_ValueType1, _ValueType2&gt;</link>(),
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
520 &#32;&#32;&#32;&#32;}
521 
522 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
524 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
525 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1ea0f963e5844bd26cf0a784c6257cfa">set_intersection</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred)
528 &#32;&#32;&#32;&#32;{
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_intersection_switch(
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred,
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
534 &#32;&#32;&#32;&#32;}
535 
536 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
537 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
539 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
540 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
544 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_symmetric_difference(
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out);&#32;}
546 
547 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
548 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
550 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
551 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred,
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
555 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_symmetric_difference(
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred);&#32;}
557 
558 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
559 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2,
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag3&gt;
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
564 &#32;&#32;&#32;&#32;__set_symmetric_difference_switch(
565 &#32;&#32;&#32;&#32;_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
566 &#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Predicate&#32;__pred,
567 &#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2,&#32;_IteratorTag3)
568 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_symmetric_difference(
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);&#32;}
570 
571 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;set_symmetric_difference&#32;for&#32;random&#32;access&#32;iterators</emphasis>
572 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Output_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
574 &#32;&#32;&#32;&#32;_Output_RAIter
575 &#32;&#32;&#32;&#32;__set_symmetric_difference_switch(_RAIter1&#32;__begin1,
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__end1,
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__end2,
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Output_RAIter&#32;__result,
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
584 &#32;&#32;&#32;&#32;{
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end1&#32;-&#32;__begin1)
587 &#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_symmetric_difference_minimal_n
588 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end2&#32;-&#32;__begin2)
589 &#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_symmetric_difference_minimal_n))
590 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a567012d512340614386402b7e3234ec6">__gnu_parallel::__parallel_set_symmetric_difference</link>(
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
592 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
593 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_symmetric_difference(
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
595 &#32;&#32;&#32;&#32;}
596 
597 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
598 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
600 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
601 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out)
604 &#32;&#32;&#32;&#32;{
605 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type&#32;_ValueType1;
606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&#32;_ValueType2;
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_symmetric_difference_switch(
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___less">__gnu_parallel::_Less&lt;_ValueType1, _ValueType2&gt;</link>(),
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
614 &#32;&#32;&#32;&#32;}
615 
616 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
617 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
619 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
620 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ab9be505d384524d65c4cd4e07090db6c">set_symmetric_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred)
623 &#32;&#32;&#32;&#32;{
624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_symmetric_difference_switch(
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred,
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
629 &#32;&#32;&#32;&#32;}
630 
631 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
632 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
634 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
635 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
638 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_difference(
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,__end1,&#32;__begin2,&#32;__end2,&#32;__out);&#32;}
640 
641 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
642 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
644 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
645 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred,
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
649 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_difference(__begin1,&#32;__end1,
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred);&#32;}
651 
652 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
653 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag3&gt;
656 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
657 &#32;&#32;&#32;&#32;__set_difference_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Predicate&#32;__pred,
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2,&#32;_IteratorTag3)
661 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_difference(
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);&#32;}
663 
664 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;set_difference&#32;for&#32;random&#32;access&#32;iterators</emphasis>
665 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Output_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
667 &#32;&#32;&#32;&#32;_Output_RAIter
668 &#32;&#32;&#32;&#32;__set_difference_switch(_RAIter1&#32;__begin1,
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter1&#32;__end1,
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__end2,
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Output_RAIter&#32;__result,&#32;_Predicate&#32;__pred,
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
676 &#32;&#32;&#32;&#32;{
677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end1&#32;-&#32;__begin1)
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_difference_minimal_n
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end2&#32;-&#32;__begin2)
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().set_difference_minimal_n))
682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1abb75bc882413dc8cba7fce93c5eaaaf0">__gnu_parallel::__parallel_set_difference</link>(
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
685 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::set_difference(
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__pred);
687 &#32;&#32;&#32;&#32;}
688 
689 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
690 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
692 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
693 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out)
696 &#32;&#32;&#32;&#32;{
697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type&#32;_ValueType1;
698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&#32;_ValueType2;
699 
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_difference_switch(
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___less">__gnu_parallel::_Less&lt;_ValueType1, _ValueType2&gt;</link>(),
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
706 &#32;&#32;&#32;&#32;}
707 
708 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
709 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
711 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
712 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1adb4e8e1785a2a6604b9f327ce4b7fd70">set_difference</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__out,&#32;_Predicate&#32;__pred)
715 &#32;&#32;&#32;&#32;{
716 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__set_difference_switch(
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__out,&#32;__pred,
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__out));
721 &#32;&#32;&#32;&#32;}
722 
723 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
724 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
725 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
726 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
728 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::adjacent_find(__begin,&#32;__end);&#32;}
729 
730 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
731 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
732 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
733 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__binary_pred,
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
736 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::adjacent_find(__begin,&#32;__end,&#32;__binary_pred);&#32;}
737 
738 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
739 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
740 &#32;&#32;&#32;&#32;_RAIter
741 &#32;&#32;&#32;&#32;__adjacent_find_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
743 &#32;&#32;&#32;&#32;{
744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
746 
747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
748 &#32;&#32;&#32;&#32;{
749 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__spot&#32;=&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::</link>
750 <link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">	      __find_template</link>(
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end&#32;-&#32;1,&#32;__begin,&#32;equal_to&lt;_ValueType&gt;(),
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____adjacent__find__selector">__gnu_parallel::__adjacent_find_selector</link>())
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.first;
754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__spot&#32;==&#32;(__end&#32;-&#32;1))
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__end;
756 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__spot;
758 &#32;&#32;&#32;&#32;}
759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
760 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(__begin,&#32;__end,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
761 &#32;&#32;&#32;&#32;}
762 
763 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
764 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
765 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
766 &#32;&#32;&#32;&#32;__adjacent_find_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
768 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(__begin,&#32;__end,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
769 
770 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
771 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
772 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
773 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end)
774 &#32;&#32;&#32;&#32;{
775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__adjacent_find_switch(__begin,&#32;__end,
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
777 &#32;&#32;&#32;&#32;}
778 
779 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
780 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate,
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
782 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
783 &#32;&#32;&#32;&#32;__adjacent_find_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;_IteratorTag)
785 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(__begin,&#32;__end,&#32;__pred,
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
787 
788 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
789 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
790 &#32;&#32;&#32;&#32;_RAIter
791 &#32;&#32;&#32;&#32;__adjacent_find_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;random_access_iterator_tag)
793 &#32;&#32;&#32;&#32;{
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(<emphasis role="keyword">true</emphasis>))
795 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af4b3d28761a76e60f6836a50f5cebb7d">__gnu_parallel::__find_template</link>(__begin,&#32;__end,&#32;__begin,&#32;__pred,
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel">__gnu_parallel</link>::
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__adjacent_find_selector()).<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
799 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(__begin,&#32;__end,&#32;__pred,
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
801 &#32;&#32;&#32;&#32;}
802 
803 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
804 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
805 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
806 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a2e464ead1e536b9225fdcd8e87438bc7">adjacent_find</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred)
808 &#32;&#32;&#32;&#32;{
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__adjacent_find_switch(__begin,&#32;__end,&#32;__pred,
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
811 &#32;&#32;&#32;&#32;}
812 
813 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
814 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
815 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
816 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
817 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
818 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::count(__begin,&#32;__end,&#32;__value);&#32;}
819 
820 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;code&#32;for&#32;random&#32;access&#32;iterators</emphasis>
821 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
822 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::difference_type
823 &#32;&#32;&#32;&#32;__count_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,&#32;random_access_iterator_tag,
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
826 &#32;&#32;&#32;&#32;{
827 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link>&#32;_SequenceIndex;
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_SequenceIndex<emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().count_minimal_n
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
836 &#32;&#32;&#32;&#32;{
837 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____count__selector">__gnu_parallel::__count_selector&lt;_RAIter, _DifferenceType&gt;</link>
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__functionality;
839 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__res&#32;=&#32;0;
840 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
841 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__value,&#32;__functionality,
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_SequenceIndex&gt;(),&#32;__res,&#32;__res,&#32;-1,
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res;
846 &#32;&#32;&#32;&#32;}
847 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(__begin,&#32;__end,&#32;__value,
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
850 &#32;&#32;&#32;&#32;}
851 
852 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
853 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
854 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
855 &#32;&#32;&#32;&#32;__count_switch(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
857 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(__begin,&#32;__end,&#32;__value,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
858 &#32;&#32;&#32;&#32;&#32;&#32;}
859 
860 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
861 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
862 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
863 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value,
864 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
865 &#32;&#32;&#32;&#32;{
866 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__count_switch(__begin,&#32;__end,&#32;__value,
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
869 &#32;&#32;&#32;&#32;}
870 
871 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
872 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
873 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
874 &#32;&#32;&#32;&#32;{
875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__count_switch(__begin,&#32;__end,&#32;__value,
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
877 &#32;&#32;&#32;&#32;}
878 
879 
880 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
881 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
882 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
883 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Predicate&#32;__pred,
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
885 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::count_if(__begin,&#32;__end,&#32;__pred);&#32;}
886 
887 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;count_if&#32;for&#32;random&#32;access&#32;iterators</emphasis>
888 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
889 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::difference_type
890 &#32;&#32;&#32;&#32;__count_if_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;random_access_iterator_tag,
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
893 &#32;&#32;&#32;&#32;{
894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
895 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
897 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link>&#32;_SequenceIndex;
898 
899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_SequenceIndex<emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().count_minimal_n
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
903 &#32;&#32;&#32;&#32;{
904 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__res&#32;=&#32;0;
905 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_parallel::
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__count_if_selector&lt;_RAIter,&#32;_DifferenceType&gt;
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__functionality;
908 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
909 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__pred,&#32;__functionality,
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_SequenceIndex&gt;(),&#32;__res,&#32;__res,&#32;-1,
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res;
914 &#32;&#32;&#32;&#32;}
915 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
916 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link>(__begin,&#32;__end,&#32;__pred,
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
918 &#32;&#32;&#32;&#32;}
919 
920 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
921 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
922 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
923 &#32;&#32;&#32;&#32;__count_if_switch(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Predicate&#32;__pred,
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
925 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link>(__begin,&#32;__end,&#32;__pred,
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
927 
928 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
929 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
930 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
931 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Predicate&#32;__pred,
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
933 &#32;&#32;&#32;&#32;{
934 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__count_if_switch(__begin,&#32;__end,&#32;__pred,
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
937 &#32;&#32;&#32;&#32;}
938 
939 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
940 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_IIter&gt;::difference_type
941 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3211beceffa7786771b08add1e4a7f9c">count_if</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_Predicate&#32;__pred)
942 &#32;&#32;&#32;&#32;{
943 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__count_if_switch(__begin,&#32;__end,&#32;__pred,
944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
945 &#32;&#32;&#32;&#32;}
946 
947 
948 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
949 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator2&gt;
950 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator1
951 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_FIterator1&#32;__begin1,&#32;_FIterator1&#32;__end1,
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator2&#32;__begin2,&#32;_FIterator2&#32;__end2,
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
954 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::search(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2);&#32;}
955 
956 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterator</emphasis>
957 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2&gt;
958 &#32;&#32;&#32;&#32;_RAIter1
959 &#32;&#32;&#32;&#32;__search_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_RAIter2&#32;__end2,
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag)
962 &#32;&#32;&#32;&#32;{
963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RAIter1&gt;::value_type&#32;_ValueType1;
964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RAIter2&gt;::value_type&#32;_ValueType2;
965 
966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end1&#32;-&#32;__begin1)
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().search_minimal_n))
969 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af1e654f03e48e80a0c73db7ad88e8a86">__gnu_parallel::</link>
970 <link linkend="_namespace____gnu__parallel_1af1e654f03e48e80a0c73db7ad88e8a86">	  __search_template</link>(
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo&lt;_ValueType1, _ValueType2&gt;</link>());
973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
976 &#32;&#32;&#32;&#32;}
977 
978 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
979 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator2,
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
981 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator1
982 &#32;&#32;&#32;&#32;__search_switch(_FIterator1&#32;__begin1,&#32;_FIterator1&#32;__end1,
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator2&#32;__begin2,&#32;_FIterator2&#32;__end2,
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2)
985 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
987 
988 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
989 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator2&gt;
990 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator1
991 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_FIterator1&#32;__begin1,&#32;_FIterator1&#32;__end1,
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator2&#32;__begin2,&#32;_FIterator2&#32;__end2)
993 &#32;&#32;&#32;&#32;{
994 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__search_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
997 &#32;&#32;&#32;&#32;}
998 
999 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1000 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator2,
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1002 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator1
1003 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_FIterator1&#32;__begin1,&#32;_FIterator1&#32;__end1,
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator2&#32;__begin2,&#32;_FIterator2&#32;__end2,
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1006 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::search(
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred);&#32;}
1008 
1009 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterator.</emphasis>
1010 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1012 &#32;&#32;&#32;&#32;_RAIter1
1013 &#32;&#32;&#32;&#32;__search_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,&#32;_RAIter2&#32;__end2,
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag)
1017 &#32;&#32;&#32;&#32;{
1018 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end1&#32;-&#32;__begin1)
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().search_minimal_n))
1021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af1e654f03e48e80a0c73db7ad88e8a86">__gnu_parallel::__search_template</link>(__begin1,&#32;__end1,
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__end2,&#32;__pred);
1023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1024 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred,
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1026 &#32;&#32;&#32;&#32;}
1027 
1028 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
1029 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator2,
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
1032 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator1
1033 &#32;&#32;&#32;&#32;__search_switch(_FIterator1&#32;__begin1,&#32;_FIterator1&#32;__end1,
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator2&#32;__begin2,&#32;_FIterator2&#32;__end2,
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;__pred,&#32;_IteratorTag1,&#32;_IteratorTag2)
1036 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred,
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1038 
1039 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1040 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_FIterator2,
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1042 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator1
1043 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_FIterator1&#32;__begin1,&#32;_FIterator1&#32;__end1,
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_FIterator2&#32;__begin2,&#32;_FIterator2&#32;__end2,
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryPredicate&#32;&#32;__pred)
1046 &#32;&#32;&#32;&#32;{
1047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__search_switch(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__pred,
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2));
1050 &#32;&#32;&#32;&#32;}
1051 
1052 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1060 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Searcher&gt;
1061 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_ForwardIterator
1062 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a5a4354dff231af6d172e1f24befda7f2">search</link>(_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Searcher&amp;&#32;__searcher)
1064 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__searcher(__first,&#32;__last).first;&#32;}
1065 <emphasis role="preprocessor">#endif</emphasis>
1066 
1067 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1068 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1069 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1070 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1072 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::search_n(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
1073 
1074 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1075 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1077 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1078 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_BinaryPredicate&#32;__binary_pred,
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1081 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::search_n(
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__binary_pred);&#32;}
1083 
1084 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1085 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1086 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1087 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
1089 &#32;&#32;&#32;&#32;{
1090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_FIterator&gt;::value_type&#32;_ValueType;
1091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::search_n(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___equal_to">__gnu_parallel::_EqualTo&lt;_ValueType, _Tp&gt;</link>());
1093 &#32;&#32;&#32;&#32;}
1094 
1095 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1096 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1098 &#32;&#32;&#32;&#32;_RAIter
1099 &#32;&#32;&#32;&#32;__search_n_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_BinaryPredicate&#32;__binary_pred,
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
1102 &#32;&#32;&#32;&#32;{
1103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().search_minimal_n))
1106 &#32;&#32;&#32;&#32;{
1107 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1___pseudo_sequence">__gnu_parallel::_PseudoSequence&lt;_Tp, _Integer&gt;</link>&#32;__ps(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>);
1108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af1e654f03e48e80a0c73db7ad88e8a86">__gnu_parallel::__search_template</link>(
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__ps.<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a51b9740eb71084e18aec7d254cab3e30">begin</link>(),&#32;__ps.<link linkend="_class____gnu__parallel_1_1___pseudo_sequence_1a8a0b6be67bf27256c7701980673775b6">end</link>(),&#32;__binary_pred);
1110 &#32;&#32;&#32;&#32;}
1111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::search_n(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
1113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred);
1114 &#32;&#32;&#32;&#32;}
1115 
1116 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
1117 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
1118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
1119 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1120 &#32;&#32;&#32;&#32;__search_n_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_BinaryPredicate&#32;__binary_pred,
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
1123 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::search_n(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_pred);&#32;}
1125 
1126 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1127 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Integer,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryPredicate&gt;
1129 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1130 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a514f8e6fe1bd2905e5e94f231ce5255a">search_n</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;_BinaryPredicate&#32;__binary_pred)
1132 &#32;&#32;&#32;&#32;{
1133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__search_n_switch(__begin,&#32;__end,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__binary_pred,
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
1135 &#32;&#32;&#32;&#32;}
1136 
1137 
1138 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
1139 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryOperation&gt;
1141 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1142 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_OutputIterator&#32;__result,
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1144 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::transform(__begin,&#32;__end,&#32;__result,&#32;__unary_op);&#32;}
1145 
1146 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;unary&#32;transform&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1147 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryOperation&gt;
1149 &#32;&#32;&#32;&#32;_RAIter2
1150 &#32;&#32;&#32;&#32;__transform1_switch(_RAIter1&#32;__begin,&#32;_RAIter1&#32;__end,
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__result,&#32;_UnaryOperation&#32;__unary_op,
1152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag,
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1154 &#32;&#32;&#32;&#32;{
1155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().transform_minimal_n
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
1159 &#32;&#32;&#32;&#32;{
1160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__dummy&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___iterator_pair">__gnu_parallel::_IteratorPair</link>&lt;_RAIter1,
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2,&#32;random_access_iterator_tag&gt;&#32;_ItTrip;
1163 &#32;&#32;&#32;&#32;&#32;&#32;_ItTrip&#32;__begin_pair(__begin,&#32;__result),
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end_pair(__end,&#32;__result&#32;+&#32;(__end&#32;-&#32;__begin));
1165 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____transform1__selector">__gnu_parallel::__transform1_selector&lt;_ItTrip&gt;</link>&#32;__functionality;
1166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
1167 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin_pair,&#32;__end_pair,&#32;__unary_op,&#32;__functionality,
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___dummy_reduct">__gnu_parallel::_DummyReduct</link>(),
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dummy,&#32;__dummy,&#32;-1,&#32;__parallelism_tag);
1171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__functionality.<link linkend="_struct____gnu__parallel_1_1____generic__for__each__selector_1a3b43c6fa8f1aa9bf6a3506102d0755c9">_M_finish_iterator</link>;
1172 &#32;&#32;&#32;&#32;}
1173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(__begin,&#32;__end,&#32;__result,&#32;__unary_op,
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1176 &#32;&#32;&#32;&#32;}
1177 
1178 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
1179 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryOperation,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2&gt;
1182 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_RAIter2
1183 &#32;&#32;&#32;&#32;__transform1_switch(_RAIter1&#32;__begin,&#32;_RAIter1&#32;__end,
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__result,&#32;_UnaryOperation&#32;__unary_op,
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2)
1186 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(__begin,&#32;__end,&#32;__result,&#32;__unary_op,
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1188 
1189 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1190 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryOperation&gt;
1192 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1193 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_OutputIterator&#32;__result,
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op,
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1196 &#32;&#32;&#32;&#32;{
1197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__transform1_switch(__begin,&#32;__end,&#32;__result,&#32;__unary_op,
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__result),
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
1201 &#32;&#32;&#32;&#32;}
1202 
1203 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_UnaryOperation&gt;
1205 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1206 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter&#32;__begin,&#32;_IIter&#32;__end,&#32;_OutputIterator&#32;__result,
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op)
1208 &#32;&#32;&#32;&#32;{
1209 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__transform1_switch(__begin,&#32;__end,&#32;__result,&#32;__unary_op,
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__result));
1212 &#32;&#32;&#32;&#32;}
1213 
1214 
1215 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1216 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
1218 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1219 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_OutputIterator&#32;__result,
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1222 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::transform(__begin1,&#32;__end1,
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin2,&#32;__result,&#32;__binary_op);&#32;}
1224 
1225 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;binary&#32;transform&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter2,
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_RAIter3,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
1228 &#32;&#32;&#32;&#32;_RAIter3
1229 &#32;&#32;&#32;&#32;__transform2_switch(_RAIter1&#32;__begin1,&#32;_RAIter1&#32;__end1,
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2&#32;__begin2,
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter3&#32;__result,&#32;_BinaryOperation&#32;__binary_op,
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag,
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1235 &#32;&#32;&#32;&#32;{
1236 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__end1&#32;-&#32;__begin1)&#32;&gt;=
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().transform_minimal_n
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
1240 &#32;&#32;&#32;&#32;{
1241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__dummy&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__parallel_1_1___iterator_triple">__gnu_parallel::_IteratorTriple</link>&lt;_RAIter1,
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter2,&#32;_RAIter3,
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag&gt;&#32;_ItTrip;
1245 &#32;&#32;&#32;&#32;&#32;&#32;_ItTrip&#32;__begin_triple(__begin1,&#32;__begin2,&#32;__result),
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__end_triple(__end1,&#32;__begin2&#32;+&#32;(__end1&#32;-&#32;__begin1),
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result&#32;+&#32;(__end1&#32;-&#32;__begin1));
1248 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____transform2__selector">__gnu_parallel::__transform2_selector&lt;_ItTrip&gt;</link>&#32;__functionality;
1249 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
1250 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(__begin_triple,&#32;__end_triple,
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op,&#32;__functionality,
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___dummy_reduct">__gnu_parallel::_DummyReduct</link>(),
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dummy,&#32;__dummy,&#32;-1,
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
1255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__functionality.<link linkend="_struct____gnu__parallel_1_1____generic__for__each__selector_1a3b43c6fa8f1aa9bf6a3506102d0755c9">_M_finish_iterator</link>;
1256 &#32;&#32;&#32;&#32;}
1257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1258 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__result,&#32;__binary_op,
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1260 &#32;&#32;&#32;&#32;}
1261 
1262 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
1263 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation,
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tag1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tag2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tag3&gt;
1266 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1267 &#32;&#32;&#32;&#32;__transform2_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_OutputIterator&#32;__result,
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op,&#32;_Tag1,&#32;_Tag2,&#32;_Tag3)
1270 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(__begin1,&#32;__end1,&#32;__begin2,&#32;__result,&#32;__binary_op,
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1272 
1273 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1274 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
1276 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1277 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_OutputIterator&#32;__result,
1279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op,
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1281 &#32;&#32;&#32;&#32;{
1282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__transform2_switch(
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__result,&#32;__binary_op,
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__result),
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
1288 &#32;&#32;&#32;&#32;}
1289 
1290 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
1292 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1293 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_OutputIterator&#32;__result,
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op)
1296 &#32;&#32;&#32;&#32;{
1297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__transform2_switch(
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__result,&#32;__binary_op,
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__result));
1302 &#32;&#32;&#32;&#32;}
1303 
1304 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1306 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1307 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__old_value,
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1309 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::replace(__begin,&#32;__end,&#32;__old_value,&#32;__new_value);&#32;}
1310 
1311 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
1312 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
1313 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1314 &#32;&#32;&#32;&#32;__replace_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__old_value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
1317 &#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__begin,&#32;__end,&#32;__old_value,&#32;__new_value,
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1319 
1320 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;replace&#32;for&#32;random&#32;access&#32;iterators</emphasis>
1321 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1322 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1323 &#32;&#32;&#32;&#32;__replace_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__old_value,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1327 &#32;&#32;&#32;&#32;{
1328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;parallel&#32;version&#32;is&#32;where?</emphasis>
1329 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__begin,&#32;__end,&#32;__old_value,&#32;__new_value,
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1331 &#32;&#32;&#32;&#32;}
1332 
1333 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1334 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1335 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1336 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__old_value,
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1339 &#32;&#32;&#32;&#32;{
1340 &#32;&#32;&#32;&#32;&#32;&#32;__replace_switch(__begin,&#32;__end,&#32;__old_value,&#32;__new_value,
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
1343 &#32;&#32;&#32;&#32;}
1344 
1345 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1346 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1347 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__old_value,
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value)
1349 &#32;&#32;&#32;&#32;{
1350 &#32;&#32;&#32;&#32;&#32;&#32;__replace_switch(__begin,&#32;__end,&#32;__old_value,&#32;__new_value,
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
1352 &#32;&#32;&#32;&#32;}
1353 
1354 
1355 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1356 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1357 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1358 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Predicate&#32;__pred,
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1360 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::replace_if(__begin,&#32;__end,&#32;__pred,&#32;__new_value);&#32;}
1361 
1362 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
1363 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
1365 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1366 &#32;&#32;&#32;&#32;__replace_if_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,&#32;_IteratorTag)
1368 &#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link>(__begin,&#32;__end,&#32;__pred,&#32;__new_value,
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1370 
1371 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1372 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1373 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1374 &#32;&#32;&#32;&#32;__replace_if_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1378 &#32;&#32;&#32;&#32;{
1379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().replace_minimal_n
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
1383 &#32;&#32;&#32;&#32;{
1384 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__dummy;
1385 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_parallel::
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__replace_if_selector&lt;_RAIter,&#32;_Predicate,&#32;_Tp&gt;
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__functionality(__new_value);
1388 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
1389 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__pred,&#32;__functionality,
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___dummy_reduct">__gnu_parallel::_DummyReduct</link>(),
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>,&#32;__dummy,&#32;-1,&#32;__parallelism_tag);
1393 &#32;&#32;&#32;&#32;}
1394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1395 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link>(__begin,&#32;__end,&#32;__pred,&#32;__new_value,
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1397 &#32;&#32;&#32;&#32;}
1398 
1399 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1400 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1401 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1402 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value,
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1405 &#32;&#32;&#32;&#32;{
1406 &#32;&#32;&#32;&#32;&#32;&#32;__replace_if_switch(__begin,&#32;__end,&#32;__pred,&#32;__new_value,
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
1409 &#32;&#32;&#32;&#32;}
1410 
1411 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1412 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1413 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9e0540c56b14e041d7db2a1c36b34fd7">replace_if</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
1414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__new_value)
1415 &#32;&#32;&#32;&#32;{
1416 &#32;&#32;&#32;&#32;&#32;&#32;__replace_if_switch(__begin,&#32;__end,&#32;__pred,&#32;__new_value,
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
1418 &#32;&#32;&#32;&#32;}
1419 
1420 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1421 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1422 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1423 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">generate</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Generator&#32;__gen,
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1425 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::generate(__begin,&#32;__end,&#32;__gen);&#32;}
1426 
1427 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
1428 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
1429 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1430 &#32;&#32;&#32;&#32;__generate_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Generator&#32;__gen,
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
1432 &#32;&#32;&#32;&#32;{&#32;<link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">generate</link>(__begin,&#32;__end,&#32;__gen,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1433 
1434 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1435 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1436 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1437 &#32;&#32;&#32;&#32;__generate_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Generator&#32;__gen,&#32;random_access_iterator_tag,
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1440 &#32;&#32;&#32;&#32;{
1441 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().generate_minimal_n
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
1445 &#32;&#32;&#32;&#32;{
1446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__dummy;
1447 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____generate__selector">__gnu_parallel::__generate_selector&lt;_RAIter&gt;</link>
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__functionality;
1449 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
1450 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__gen,&#32;__functionality,
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___dummy_reduct">__gnu_parallel::_DummyReduct</link>(),
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>,&#32;__dummy,&#32;-1,&#32;__parallelism_tag);
1454 &#32;&#32;&#32;&#32;}
1455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1456 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">generate</link>(__begin,&#32;__end,&#32;__gen,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1457 &#32;&#32;&#32;&#32;}
1458 
1459 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1460 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1461 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1462 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">generate</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Generator&#32;__gen,&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1464 &#32;&#32;&#32;&#32;{
1465 &#32;&#32;&#32;&#32;&#32;&#32;__generate_switch(__begin,&#32;__end,&#32;__gen,
1466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
1468 &#32;&#32;&#32;&#32;}
1469 
1470 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1471 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1472 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af6065e33e83259566f3eed5b4ab8c0c7">generate</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Generator&#32;__gen)
1473 &#32;&#32;&#32;&#32;{
1474 &#32;&#32;&#32;&#32;&#32;&#32;__generate_switch(__begin,&#32;__end,&#32;__gen,
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
1476 &#32;&#32;&#32;&#32;}
1477 
1478 
1479 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
1480 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1481 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1482 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link>(_OutputIterator&#32;__begin,&#32;_Size&#32;__n,&#32;_Generator&#32;__gen,
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1484 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::generate_n(__begin,&#32;__n,&#32;__gen);&#32;}
1485 
1486 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
1487 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator,
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
1489 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1490 &#32;&#32;&#32;&#32;__generate_n_switch(_OutputIterator&#32;__begin,&#32;_Size&#32;__n,&#32;_Generator&#32;__gen,
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag)
1492 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link>(__begin,&#32;__n,&#32;__gen,
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1494 
1495 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1496 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1497 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_RAIter
1498 &#32;&#32;&#32;&#32;__generate_n_switch(_RAIter&#32;__begin,&#32;_Size&#32;__n,&#32;_Generator&#32;__gen,
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1501 &#32;&#32;&#32;&#32;{
1502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;parallel&#32;version&#32;is&#32;where?</emphasis>
1503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link>(__begin,&#32;__n,&#32;__gen,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1504 &#32;&#32;&#32;&#32;}
1505 
1506 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1507 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1508 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1509 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link>(_OutputIterator&#32;__begin,&#32;_Size&#32;__n,&#32;_Generator&#32;__gen,
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
1511 &#32;&#32;&#32;&#32;{
1512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_n_switch(__begin,&#32;__n,&#32;__gen,
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
1515 &#32;&#32;&#32;&#32;}
1516 
1517 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Size,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Generator&gt;
1518 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1519 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a81641e273e00fcf6a7109be182426757">generate_n</link>(_OutputIterator&#32;__begin,&#32;_Size&#32;__n,&#32;_Generator&#32;__gen)
1520 &#32;&#32;&#32;&#32;{
1521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__generate_n_switch(__begin,&#32;__n,&#32;__gen,
1522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
1523 &#32;&#32;&#32;&#32;}
1524 
1525 
1526 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
1527 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1528 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1529 &#32;&#32;&#32;&#32;random_shuffle(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1531 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::random_shuffle(__begin,&#32;__end);&#32;}
1532 
1533 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
1534 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
1535 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1536 &#32;&#32;&#32;&#32;random_shuffle(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&amp;&#32;__rand,
1538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1539 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::random_shuffle(__begin,&#32;__end,&#32;__rand);&#32;}
1540 
1541 
1543 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_MustBeInt&#32;=&#32;<emphasis role="keywordtype">int</emphasis>&gt;
1544 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_CRandNumber
1545 &#32;&#32;&#32;&#32;{
1546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
1547 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keywordtype">int</emphasis>&#32;__limit)
1548 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;rand()&#32;%&#32;__limit;&#32;}
1549 &#32;&#32;&#32;&#32;};
1550 
1551 &#32;&#32;<emphasis role="comment">//&#32;Fill&#32;in&#32;random&#32;number&#32;generator.</emphasis>
1552 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1553 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1554 &#32;&#32;&#32;&#32;random_shuffle(_RAIter&#32;__begin,&#32;_RAIter&#32;__end)
1555 &#32;&#32;&#32;&#32;{
1556 &#32;&#32;&#32;&#32;&#32;&#32;_CRandNumber&lt;&gt;&#32;__r;
1557 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parallelization&#32;still&#32;possible.</emphasis>
1558 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_parallel::random_shuffle(__begin,&#32;__end,&#32;__r);
1559 &#32;&#32;&#32;&#32;}
1560 
1561 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1562 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_RandomNumberGenerator&gt;
1563 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1564 &#32;&#32;&#32;&#32;random_shuffle(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1565 #<emphasis role="keywordflow">if</emphasis>&#32;__cplusplus&#32;&gt;=&#32;201103L
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&amp;&amp;&#32;__rand)
1567 <emphasis role="preprocessor">#else</emphasis>
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RandomNumberGenerator&amp;&#32;__rand)
1569 #endif
1570 &#32;&#32;&#32;&#32;{
1571 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__begin&#32;==&#32;__end)
1572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().random_shuffle_minimal_n))
1576 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a6e78b59cb50c8e14ebf6990016af7342">__gnu_parallel::__parallel_random_shuffle</link>(__begin,&#32;__end,&#32;__rand);
1577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1578 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa9ee237cbbdd03ed217714a05e5a8868">__gnu_parallel::__sequential_random_shuffle</link>(__begin,&#32;__end,&#32;__rand);
1579 &#32;&#32;&#32;&#32;}
1580 
1581 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback.</emphasis>
1582 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1583 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1584 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1586 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::partition(__begin,&#32;__end,&#32;__pred);&#32;}
1587 
1588 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case.</emphasis>
1589 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
1590 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1591 &#32;&#32;&#32;&#32;__partition_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
1592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;_IteratorTag)
1593 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link>(__begin,&#32;__end,&#32;__pred,
1594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
1595 
1596 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators.</emphasis>
1597 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1598 &#32;&#32;&#32;&#32;_RAIter
1599 &#32;&#32;&#32;&#32;__partition_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Predicate&#32;__pred,&#32;random_access_iterator_tag)
1601 &#32;&#32;&#32;&#32;{
1602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().partition_minimal_n))
1605 &#32;&#32;&#32;&#32;{
1606 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;::
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type&#32;_DifferenceType;
1608 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__middle&#32;=&#32;<link linkend="_namespace____gnu__parallel_1ac870af1d69405f2f53cd7a96e1d92348">__gnu_parallel::</link>
1609 <link linkend="_namespace____gnu__parallel_1ac870af1d69405f2f53cd7a96e1d92348">	    __parallel_partition</link>(__begin,&#32;__end,&#32;__pred,
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1aa72851b809c2b314bc09580c3512f281">__gnu_parallel::__get_max_threads</link>());
1611 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__begin&#32;+&#32;__middle;
1612 &#32;&#32;&#32;&#32;}
1613 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link>(__begin,&#32;__end,&#32;__pred,
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1616 &#32;&#32;&#32;&#32;}
1617 
1618 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface.</emphasis>
1619 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Predicate&gt;
1620 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
1621 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a7dde62cf155d6b5bde1a1c0577a9a57f">partition</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Predicate&#32;__pred)
1622 &#32;&#32;&#32;&#32;{
1623 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__partition_switch(__begin,&#32;__end,&#32;__pred,
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
1625 &#32;&#32;&#32;&#32;}
1626 
1627 &#32;&#32;<emphasis role="comment">//&#32;sort&#32;interface</emphasis>
1628 
1629 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1630 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1631 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1632 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1633 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1634 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::sort(__begin,&#32;__end);&#32;}
1635 
1636 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1637 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1638 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1639 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp,
1640 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1641 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::sort&lt;_RAIter,&#32;_Compare&gt;(__begin,&#32;__end,
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp);&#32;}
1643 
1644 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1645 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Parallelism&gt;
1647 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1648 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp,
1649 &#32;&#32;&#32;&#32;&#32;_Parallelism&#32;__parallelism)
1650 &#32;&#32;{
1651 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1652 
1653 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__begin&#32;!=&#32;__end)
1654 &#32;&#32;&#32;&#32;&#32;&#32;{
1655 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)&#32;&gt;=
1657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().sort_minimal_n))
1658 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_parallel::__parallel_sort&lt;false&gt;(
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__comp,&#32;__parallelism);
1660 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1661 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;__comp,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1662 &#32;&#32;&#32;&#32;&#32;&#32;}
1663 &#32;&#32;}
1664 
1665 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1666 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1667 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1668 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end)
1669 &#32;&#32;&#32;&#32;{
1670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1671 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1default__parallel__tag">__gnu_parallel::default_parallel_tag</link>());
1673 &#32;&#32;&#32;&#32;}
1674 
1675 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1676 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1677 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1678 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1679 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1default__parallel__tag">__gnu_parallel::default_parallel_tag</link>&#32;__parallelism)
1680 &#32;&#32;&#32;&#32;{
1681 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1682 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1683 &#32;&#32;&#32;&#32;}
1684 
1685 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1686 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1687 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1688 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1689 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1parallel__tag">__gnu_parallel::parallel_tag</link>&#32;__parallelism)
1690 &#32;&#32;&#32;&#32;{
1691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1692 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1693 &#32;&#32;&#32;&#32;}
1694 
1695 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1696 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1697 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1698 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1699 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1multiway__mergesort__tag">__gnu_parallel::multiway_mergesort_tag</link>&#32;__parallelism)
1700 &#32;&#32;&#32;&#32;{
1701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1702 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1703 &#32;&#32;&#32;&#32;}
1704 
1705 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1706 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1707 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1708 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1709 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1multiway__mergesort__sampling__tag">__gnu_parallel::multiway_mergesort_sampling_tag</link>&#32;__parallelism)
1710 &#32;&#32;&#32;&#32;{
1711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1712 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1713 &#32;&#32;&#32;&#32;}
1714 
1715 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1716 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1717 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1718 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1719 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1multiway__mergesort__exact__tag">__gnu_parallel::multiway_mergesort_exact_tag</link>&#32;__parallelism)
1720 &#32;&#32;&#32;&#32;{
1721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1722 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1723 &#32;&#32;&#32;&#32;}
1724 
1725 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1726 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1727 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1728 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1729 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1quicksort__tag">__gnu_parallel::quicksort_tag</link>&#32;__parallelism)
1730 &#32;&#32;&#32;&#32;{
1731 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1732 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1733 &#32;&#32;&#32;&#32;}
1734 
1735 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1736 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1737 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1738 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1739 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1balanced__quicksort__tag">__gnu_parallel::balanced_quicksort_tag</link>&#32;__parallelism)
1740 &#32;&#32;&#32;&#32;{
1741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1742 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1743 &#32;&#32;&#32;&#32;}
1744 
1745 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1746 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1747 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1748 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp)
1749 &#32;&#32;&#32;&#32;{
1750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1751 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>(__begin,&#32;__end,&#32;__comp,&#32;<link linkend="_struct____gnu__parallel_1_1default__parallel__tag">__gnu_parallel::default_parallel_tag</link>());
1752 &#32;&#32;&#32;&#32;}
1753 
1754 &#32;&#32;<emphasis role="comment">//&#32;stable_sort&#32;interface</emphasis>
1755 
1756 
1757 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1758 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1759 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1760 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1762 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::stable_sort(__begin,&#32;__end);&#32;}
1763 
1764 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1765 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1766 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1767 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1769 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::stable_sort&lt;_RAIter,&#32;_Compare&gt;(__begin,&#32;__end,&#32;__comp);&#32;}
1770 
1771 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1772 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Parallelism&gt;
1774 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1775 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_Parallelism&#32;__parallelism)
1777 &#32;&#32;&#32;&#32;{
1778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
1779 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
1780 
1781 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__begin&#32;!=&#32;__end)
1782 &#32;&#32;&#32;&#32;{
1783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)&#32;&gt;=
1785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().sort_minimal_n))
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__gnu_parallel::__parallel_sort&lt;true&gt;(__begin,&#32;__end,
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__parallelism);
1788 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(__begin,&#32;__end,&#32;__comp,
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1791 &#32;&#32;&#32;&#32;}
1792 &#32;&#32;&#32;&#32;}
1793 
1794 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1795 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1796 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1797 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end)
1798 &#32;&#32;&#32;&#32;{
1799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1800 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1default__parallel__tag">__gnu_parallel::default_parallel_tag</link>());
1802 &#32;&#32;&#32;&#32;}
1803 
1804 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1805 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1806 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1807 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1default__parallel__tag">__gnu_parallel::default_parallel_tag</link>&#32;__parallelism)
1809 &#32;&#32;&#32;&#32;{
1810 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1811 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1812 &#32;&#32;&#32;&#32;}
1813 
1814 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1815 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1816 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1817 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1parallel__tag">__gnu_parallel::parallel_tag</link>&#32;__parallelism)
1819 &#32;&#32;&#32;&#32;{
1820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1821 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1822 &#32;&#32;&#32;&#32;}
1823 
1824 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1825 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1826 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1827 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1multiway__mergesort__tag">__gnu_parallel::multiway_mergesort_tag</link>&#32;__parallelism)
1829 &#32;&#32;&#32;&#32;{
1830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1831 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1832 &#32;&#32;&#32;&#32;}
1833 
1834 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1835 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1836 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1837 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1quicksort__tag">__gnu_parallel::quicksort_tag</link>&#32;__parallelism)
1839 &#32;&#32;&#32;&#32;{
1840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1841 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1842 &#32;&#32;&#32;&#32;}
1843 
1844 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1845 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1846 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1847 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1balanced__quicksort__tag">__gnu_parallel::balanced_quicksort_tag</link>&#32;__parallelism)
1849 &#32;&#32;&#32;&#32;{
1850 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1851 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),&#32;__parallelism);
1852 &#32;&#32;&#32;&#32;}
1853 
1854 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1855 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1856 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1857 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp)
1858 &#32;&#32;&#32;&#32;{
1859 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac4ae475114c7f06297db807234405f8a">stable_sort</link>(
1860 &#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;__comp,&#32;<link linkend="_struct____gnu__parallel_1_1default__parallel__tag">__gnu_parallel::default_parallel_tag</link>());
1861 &#32;&#32;&#32;&#32;}
1862 
1863 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1864 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
1866 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1867 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
1868 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__end2,&#32;_OutputIterator&#32;__result,
1869 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1870 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::merge(
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result);&#32;}
1872 
1873 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1874 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1876 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1877 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
1878 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__end2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
1879 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1880 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::merge(
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__comp);&#32;}
1882 
1883 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
1884 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag1,
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag3&gt;
1887 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1888 &#32;&#32;&#32;&#32;__merge_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
1889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IteratorTag1,&#32;_IteratorTag2,&#32;_IteratorTag3)
1892 &#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::merge(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,&#32;__comp);&#32;}
1894 
1895 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
1896 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1898 &#32;&#32;&#32;&#32;_OutputIterator
1899 &#32;&#32;&#32;&#32;__merge_switch(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__begin2,&#32;_IIter2&#32;__end2,
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp,
1902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag,&#32;random_access_iterator_tag,
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;random_access_iterator_tag)
1904 &#32;&#32;&#32;&#32;{
1905 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end1&#32;-&#32;__begin1)
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().merge_minimal_n
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end2&#32;-&#32;__begin2)
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().merge_minimal_n)))
1910 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1af1626ed7bbe2eb745a31f18728d73f4e">__gnu_parallel::__parallel_merge_advance</link>(
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__end1&#32;-&#32;__begin1)&#32;+&#32;(__end2&#32;-&#32;__begin2),&#32;__comp);
1913 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1914 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a0059cd13cc6ab70692f8309ad92cb548">__gnu_parallel::__merge_advance</link>(
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__end1&#32;-&#32;__begin1)&#32;+&#32;(__end2&#32;-&#32;__begin2),&#32;__comp);
1917 &#32;&#32;}
1918 
1919 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1920 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1922 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1923 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
1924 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__end2,&#32;_OutputIterator&#32;__result,&#32;_Compare&#32;__comp)
1925 &#32;&#32;&#32;&#32;{
1926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge_switch(
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,&#32;__result,&#32;__comp,
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin1),
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin2),
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__result));
1931 &#32;&#32;}
1932 
1933 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1934 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_IIter1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IIter2,
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_OutputIterator&gt;
1936 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_OutputIterator
1937 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a23f39d0444be06ebfa219bbfd4e3854f">merge</link>(_IIter1&#32;__begin1,&#32;_IIter1&#32;__end1,&#32;_IIter2&#32;__begin2,
1938 &#32;&#32;&#32;&#32;&#32;&#32;_IIter2&#32;__end2,&#32;_OutputIterator&#32;__result)
1939 &#32;&#32;&#32;&#32;{
1940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter1&gt;::value_type&#32;_ValueType1;
1941 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_IIter2&gt;::value_type&#32;_ValueType2;
1942 
1943 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::merge(__begin1,&#32;__end1,&#32;__begin2,&#32;__end2,
1944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,&#32;<link linkend="_struct____gnu__parallel_1_1___less">__gnu_parallel::_Less&lt;_ValueType1, _ValueType2&gt;</link>());
1945 &#32;&#32;&#32;&#32;}
1946 
1947 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1948 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1949 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1950 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__nth,
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1952 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::nth_element(__begin,&#32;__nth,&#32;__end);&#32;}
1953 
1954 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1955 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1956 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1957 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__nth,
1958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp,
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1960 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::nth_element(__begin,&#32;__nth,&#32;__end,&#32;__comp);&#32;}
1961 
1962 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
1963 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1964 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1965 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__nth,
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp)
1967 &#32;&#32;&#32;&#32;{
1968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().nth_element_minimal_n))
1971 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a1567c37a7562eaee17d13ebda1172586">__gnu_parallel::__parallel_nth_element</link>(__begin,&#32;__nth,&#32;__end,&#32;__comp);
1972 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1973 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>(__begin,&#32;__nth,&#32;__end,&#32;__comp,
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
1975 &#32;&#32;&#32;&#32;}
1976 
1977 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
1978 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1979 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1980 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a9aedeebce40e8d85738b1e6f9ba8c919">nth_element</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__nth,
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end)
1982 &#32;&#32;&#32;&#32;{
1983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_RAIter&gt;::value_type&#32;_ValueType;
1984 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_parallel::nth_element(__begin,&#32;__nth,&#32;__end,
1985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;_ValueType&gt;());
1986 &#32;&#32;&#32;&#32;}
1987 
1988 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1989 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
1990 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1991 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__middle,
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp,
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
1994 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::partial_sort(__begin,&#32;__middle,&#32;__end,&#32;__comp);&#32;}
1995 
1996 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
1997 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
1998 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1999 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__middle,
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end,&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
2001 &#32;&#32;&#32;&#32;{&#32;_GLIBCXX_STD_A::partial_sort(__begin,&#32;__middle,&#32;__end);&#32;}
2002 
2003 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
2004 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2005 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2006 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__middle,
2007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end,&#32;_Compare&#32;__comp)
2008 &#32;&#32;&#32;&#32;{
2009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
2010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().partial_sort_minimal_n))
2012 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1abe60c5cc3788e1b1602175af0057d3f8">__gnu_parallel::</link>
2013 <link linkend="_namespace____gnu__parallel_1abe60c5cc3788e1b1602175af0057d3f8">	  __parallel_partial_sort</link>(__begin,&#32;__middle,&#32;__end,&#32;__comp);
2014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2015 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>(__begin,&#32;__middle,&#32;__end,&#32;__comp,
2016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
2017 &#32;&#32;&#32;&#32;}
2018 
2019 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
2020 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter&gt;
2021 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2022 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a52a9f99b3fdcc2a91f5984ac6a4a24bc">partial_sort</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__middle,
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__end)
2024 &#32;&#32;&#32;&#32;{
2025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
2026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
2027 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_parallel::partial_sort(__begin,&#32;__middle,&#32;__end,
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;_ValueType&gt;());
2029 &#32;&#32;&#32;&#32;}
2030 
2031 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
2032 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
2033 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2034 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
2036 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::max_element(__begin,&#32;__end);&#32;}
2037 
2038 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
2039 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2040 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2041 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Compare&#32;__comp,
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
2043 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::max_element(__begin,&#32;__end,&#32;__comp);&#32;}
2044 
2045 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
2046 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
2047 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2048 &#32;&#32;&#32;&#32;__max_element_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IteratorTag)
2050 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(__begin,&#32;__end,&#32;__comp,
2051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
2052 
2053 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
2054 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2055 &#32;&#32;&#32;&#32;_RAIter
2056 &#32;&#32;&#32;&#32;__max_element_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;random_access_iterator_tag,
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
2059 &#32;&#32;&#32;&#32;{
2060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
2061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
2062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().max_element_minimal_n
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
2064 &#32;&#32;&#32;&#32;{
2065 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__res(__begin);
2066 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____identity__selector">__gnu_parallel::__identity_selector&lt;_RAIter&gt;</link>
2067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__functionality;
2068 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
2069 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
2070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;<link linkend="_struct____gnu__parallel_1_1___nothing">__gnu_parallel::_Nothing</link>(),&#32;__functionality,
2071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____max__element__reduct">__gnu_parallel::__max_element_reduct&lt;_Compare, _RAIter&gt;</link>(__comp),
2072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res,&#32;__res,&#32;-1,&#32;__parallelism_tag);
2073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res;
2074 &#32;&#32;&#32;&#32;}
2075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(__begin,&#32;__end,&#32;__comp,
2077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
2078 &#32;&#32;&#32;&#32;}
2079 
2080 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
2081 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
2082 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2083 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
2084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
2085 &#32;&#32;&#32;&#32;{
2086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_FIterator&gt;::value_type&#32;_ValueType;
2087 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
2089 &#32;&#32;&#32;&#32;}
2090 
2091 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
2092 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2093 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end)
2094 &#32;&#32;&#32;&#32;{
2095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_FIterator&gt;::value_type&#32;_ValueType;
2096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::max_element(__begin,&#32;__end,
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;_ValueType&gt;());
2098 &#32;&#32;&#32;&#32;}
2099 
2100 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
2101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2102 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2103 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Compare&#32;__comp,
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
2105 &#32;&#32;&#32;&#32;{
2106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__max_element_switch(__begin,&#32;__end,&#32;__comp,
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
2109 &#32;&#32;&#32;&#32;}
2110 
2111 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2112 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2113 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1aa1e6cdbc0afeb988a4d89d1dab4066d4">max_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Compare&#32;__comp)
2114 &#32;&#32;&#32;&#32;{
2115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__max_element_switch(__begin,&#32;__end,&#32;__comp,
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
2117 &#32;&#32;&#32;&#32;}
2118 
2119 
2120 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
2121 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
2122 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2123 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
2125 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::min_element(__begin,&#32;__end);&#32;}
2126 
2127 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback</emphasis>
2128 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2129 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2130 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Compare&#32;__comp,
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>)
2132 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_GLIBCXX_STD_A::min_element(__begin,&#32;__end,&#32;__comp);&#32;}
2133 
2134 &#32;&#32;<emphasis role="comment">//&#32;Sequential&#32;fallback&#32;for&#32;input&#32;iterator&#32;case</emphasis>
2135 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_IteratorTag&gt;
2136 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2137 &#32;&#32;&#32;&#32;__min_element_switch(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;_IteratorTag)
2139 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(__begin,&#32;__end,&#32;__comp,
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());&#32;}
2141 
2142 &#32;&#32;<emphasis role="comment">//&#32;Parallel&#32;algorithm&#32;for&#32;random&#32;access&#32;iterators</emphasis>
2143 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2144 &#32;&#32;&#32;&#32;_RAIter
2145 &#32;&#32;&#32;&#32;__min_element_switch(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;random_access_iterator_tag,
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
2148 &#32;&#32;&#32;&#32;{
2149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2settings_8h_1ad816e8f52b933c9300598977cada7d18">_GLIBCXX_PARALLEL_CONDITION</link>(
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a1cbb61a4863a306daa23823d89f9bef1">__gnu_parallel::_SequenceIndex</link><emphasis role="keyword">&gt;</emphasis>(__end&#32;-&#32;__begin)
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;=&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">__gnu_parallel::_Settings::get</link>().min_element_minimal_n
2152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__gnu_parallel::__is_parallel</link>(__parallelism_tag)))
2153 &#32;&#32;&#32;&#32;{
2154 &#32;&#32;&#32;&#32;&#32;&#32;_RAIter&#32;__res(__begin);
2155 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____identity__selector">__gnu_parallel::__identity_selector&lt;_RAIter&gt;</link>
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__functionality;
2157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">__gnu_parallel::</link>
2158 <link linkend="_namespace____gnu__parallel_1a0ebbe56e1b059cba72c3d706307a0e50">	    __for_each_template_random_access</link>(
2159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__end,&#32;<link linkend="_struct____gnu__parallel_1_1___nothing">__gnu_parallel::_Nothing</link>(),&#32;__functionality,
2160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1____min__element__reduct">__gnu_parallel::__min_element_reduct&lt;_Compare, _RAIter&gt;</link>(__comp),
2161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__res,&#32;__res,&#32;-1,&#32;__parallelism_tag);
2162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__res;
2163 &#32;&#32;&#32;&#32;}
2164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(__begin,&#32;__end,&#32;__comp,
2166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1sequential__tag">__gnu_parallel::sequential_tag</link>());
2167 &#32;&#32;&#32;&#32;}
2168 
2169 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface,&#32;insert&#32;default&#32;comparator</emphasis>
2170 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
2171 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2172 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,
2173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
2174 &#32;&#32;&#32;&#32;{
2175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_FIterator&gt;::value_type&#32;_ValueType;
2176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(__begin,&#32;__end,&#32;std::less&lt;_ValueType&gt;(),
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
2178 &#32;&#32;&#32;&#32;}
2179 
2180 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator&gt;
2181 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2182 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end)
2183 &#32;&#32;&#32;&#32;{
2184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_FIterator&gt;::value_type&#32;_ValueType;
2185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_parallel::min_element(__begin,&#32;__end,
2186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::less&lt;_ValueType&gt;());
2187 &#32;&#32;&#32;&#32;}
2188 
2189 &#32;&#32;<emphasis role="comment">//&#32;Public&#32;interface</emphasis>
2190 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2191 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2192 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Compare&#32;__comp,
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a76f6cbf29b1b8d57762cce1ed9bd01a8">__gnu_parallel::_Parallelism</link>&#32;__parallelism_tag)
2194 &#32;&#32;&#32;&#32;{
2195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__min_element_switch(__begin,&#32;__end,&#32;__comp,
2196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin),
2197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__parallelism_tag);
2198 &#32;&#32;&#32;&#32;}
2199 
2200 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
2201 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_FIterator
2202 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af1620d34bc7426f2bafc5a3b1849588e">min_element</link>(_FIterator&#32;__begin,&#32;_FIterator&#32;__end,&#32;_Compare&#32;__comp)
2203 &#32;&#32;&#32;&#32;{
2204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__min_element_switch(__begin,&#32;__end,&#32;__comp,
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__iterator_category(__begin));
2206 &#32;&#32;&#32;&#32;}
2207 
2208 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2209 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_GLIBCXX_STD_A::for_each_n;
2210 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_GLIBCXX_STD_A::sample;
2211 <emphasis role="preprocessor">#endif</emphasis>
2212 }&#32;<emphasis role="comment">//&#32;end&#32;namespace</emphasis>
2213 }&#32;<emphasis role="comment">//&#32;end&#32;namespace</emphasis>
2214 
2215 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_ALGO_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
