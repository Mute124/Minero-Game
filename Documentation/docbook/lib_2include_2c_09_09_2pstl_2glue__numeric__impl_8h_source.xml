<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2pstl_2glue__numeric__impl_8h_source" xml:lang="en-US">
<title>glue_numeric_impl.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/pstl/glue_numeric_impl.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;glue_numeric_impl.h&#32;-----------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_GLUE_NUMERIC_IMPL_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_GLUE_NUMERIC_IMPL_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&lt;functional&gt;</emphasis>
14 
15 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2utils_8h">utils.h</link>&quot;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2numeric__fwd_8h">numeric_fwd.h</link>&quot;</emphasis>
17 
18 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>
19 {
20 
21 <emphasis role="comment">//&#32;[reduce]</emphasis>
22 
23 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
24 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _Tp&gt;</link>
25 <link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Tp&#32;__init,
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op)
27 {
28 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">transform_reduce</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__init,&#32;__binary_op,
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>());
30 }
31 
32 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
33 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _Tp&gt;</link>
34 <link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Tp&#32;__init)
35 {
36 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">transform_reduce</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__init,&#32;std::plus&lt;_Tp&gt;(),
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>());
38 }
39 
40 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
41 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy</link>&lt;_ExecutionPolicy,
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;
43 <link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
44 {
45 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
46 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">transform_reduce</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;_ValueType{},
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_ValueType&gt;(),&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>());
48 }
49 
50 <emphasis role="comment">//&#32;[transform.reduce]</emphasis>
51 
52 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
53 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _Tp&gt;</link>
54 <link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">transform_reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_Tp&#32;__init)
56 {
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type&#32;_InputType;
58 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pstl::__internal::__pattern_transform_reduce</link>(
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__first2,&#32;__init,&#32;std::plus&lt;_InputType&gt;(),
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::multiplies&lt;_InputType&gt;(),
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec),
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec));
65 }
66 
67 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation1,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation2&gt;
69 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _Tp&gt;</link>
70 <link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">transform_reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first1,&#32;_ForwardIterator1&#32;__last1,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__first2,&#32;_Tp&#32;__init,&#32;_BinaryOperation1&#32;__binary_op1,&#32;_BinaryOperation2&#32;__binary_op2)
72 {
73 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pstl::__internal::__pattern_transform_reduce</link>(
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first1,&#32;__last1,&#32;__first2,&#32;__init,&#32;__binary_op1,&#32;__binary_op2,
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec),
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec));
79 }
80 
81 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation,&#32;<emphasis role="keyword">class</emphasis>&#32;_UnaryOperation&gt;
82 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _Tp&gt;</link>
83 <link linkend="_namespacestd_1a704ff380cbc127a2f0a5583f1108f015">transform_reduce</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;_Tp&#32;__init,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryOperation&#32;__binary_op,&#32;_UnaryOperation&#32;__unary_op)
85 {
86 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1adc9b1a1468736ba57bfa4bbbc56a0440">__pstl::__internal::__pattern_transform_reduce</link>(
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__init,&#32;__binary_op,&#32;__unary_op,
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec),
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec));
90 }
91 
92 <emphasis role="comment">//&#32;[exclusive.scan]</emphasis>
93 
94 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
95 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
96 <link linkend="_namespacestd_1aac1171bbebbee1cee2ad392f6a76f824">exclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result,&#32;_Tp&#32;__init)
98 {
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>;
100 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__internal::__pattern_transform_scan(
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>(),&#32;__init,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_Tp&gt;(),&#32;<emphasis role="comment">/*inclusive=*/</emphasis>std::false_type(),
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(__exec),
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(__exec));
105 }
106 
107 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
108 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
109 <link linkend="_namespacestd_1aac1171bbebbee1cee2ad392f6a76f824">exclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op)
111 {
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis><link linkend="_namespace____pstl">__pstl</link>;
113 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__internal::__pattern_transform_scan(
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>(),&#32;__init,
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op,&#32;<emphasis role="comment">/*inclusive=*/</emphasis>std::false_type(),
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(__exec),
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(__exec));
118 }
119 
120 <emphasis role="comment">//&#32;[inclusive.scan]</emphasis>
121 
122 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2&gt;
123 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
124 <link linkend="_namespacestd_1aa444107e571b4df65fd6162079d2cbc3">inclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result)
126 {
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type&#32;_InputType;
128 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3">transform_inclusive_scan</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::plus&lt;_InputType&gt;(),&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>());
130 }
131 
132 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
133 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
134 <link linkend="_namespacestd_1aa444107e571b4df65fd6162079d2cbc3">inclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result,&#32;_BinaryOperation&#32;__binary_op)
136 {
137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3">transform_inclusive_scan</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,&#32;__binary_op,
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>());
139 }
140 
141 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
142 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
143 <link linkend="_namespacestd_1aa444107e571b4df65fd6162079d2cbc3">inclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result,&#32;_BinaryOperation&#32;__binary_op,&#32;_Tp&#32;__init)
145 {
146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3">transform_inclusive_scan</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,&#32;__binary_op,
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct____pstl_1_1____internal_1_1____no__op">__pstl::__internal::__no_op</link>(),&#32;__init);
148 }
149 
150 <emphasis role="comment">//&#32;[transform.exclusive.scan]</emphasis>
151 
152 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation&gt;
154 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
155 <link linkend="_namespacestd_1a5fbaaeef2064a2cd0bc45351cd8671cd">transform_exclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result,&#32;_Tp&#32;__init,&#32;_BinaryOperation&#32;__binary_op,
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_UnaryOperation&#32;__unary_op)
158 {
159 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a8b1fafa95881c18c8c209a63b817198d">__pstl::__internal::__pattern_transform_scan</link>(
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,&#32;__unary_op,&#32;__init,&#32;__binary_op,
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*inclusive=*/</emphasis>std::false_type(),
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec),
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec));
166 }
167 
168 <emphasis role="comment">//&#32;[transform.inclusive.scan]</emphasis>
169 
170 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,&#32;<emphasis role="keyword">class&#32;</emphasis>_Tp&gt;
172 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
173 <link linkend="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3">transform_inclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result,&#32;_BinaryOperation&#32;__binary_op,&#32;_UnaryOperation&#32;__unary_op,
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;__init)
176 {
177 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a8b1fafa95881c18c8c209a63b817198d">__pstl::__internal::__pattern_transform_scan</link>(
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,&#32;__unary_op,&#32;__init,&#32;__binary_op,
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*inclusive=*/</emphasis>std::true_type(),
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec),
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec));
184 }
185 
186 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class&#32;</emphasis>_ExecutionPolicy,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator1,&#32;<emphasis role="keyword">class&#32;</emphasis>_ForwardIterator2,&#32;<emphasis role="keyword">class&#32;</emphasis>_UnaryOperation,
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_BinaryOperation&gt;
188 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
189 <link linkend="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3">transform_inclusive_scan</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__result,&#32;_BinaryOperation&#32;__binary_op,&#32;_UnaryOperation&#32;__unary_op)
191 {
192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;!=&#32;__last)
193 &#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__unary_op(*__first);
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*__result&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a290fe0a53840e3a23288a43e7ae3ebf3">transform_inclusive_scan</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;++__first,&#32;__last,&#32;++__result,
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op,&#32;__unary_op,&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>);
198 &#32;&#32;&#32;&#32;}
199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
200 &#32;&#32;&#32;&#32;{
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
202 &#32;&#32;&#32;&#32;}
203 }
204 
205 <emphasis role="comment">//&#32;[adjacent.difference]</emphasis>
206 
207 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2,&#32;<emphasis role="keyword">class</emphasis>&#32;_BinaryOperation&gt;
208 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
209 <link linkend="_namespacestd_1a8e0ebcf0b7a1a4e60d98f9a377ed012a">adjacent_difference</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__d_first,&#32;_BinaryOperation&#32;__op)
211 {
212 
213 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__first&#32;==&#32;__last)
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__d_first;
215 
216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a06ab524ac584392677a2d3002e998d89">__pstl::__internal::__pattern_adjacent_difference</link>(
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__d_first,&#32;__op,
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec),
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator1,&#32;_ForwardIterator2&gt;(
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__exec));
222 }
223 
224 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator1,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator2&gt;
225 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator2&gt;</link>
226 <link linkend="_namespacestd_1a8e0ebcf0b7a1a4e60d98f9a377ed012a">adjacent_difference</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator1&#32;__first,&#32;_ForwardIterator1&#32;__last,
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ForwardIterator2&#32;__d_first)
228 {
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator1&gt;::value_type&#32;_ValueType;
230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8e0ebcf0b7a1a4e60d98f9a377ed012a">adjacent_difference</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__d_first,
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::minus&lt;_ValueType&gt;());
232 }
233 
234 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
235 
236 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_GLUE_NUMERIC_IMPL_H_&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
