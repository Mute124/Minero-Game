<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classnlohmann_1_1detail_1_1parse__error" xml:lang="en-US">
<title>nlohmann::detail::parse_error Class Reference</title>
<indexterm><primary>nlohmann::detail::parse_error</primary></indexterm>
<para>

<para>exception indicating a parse error </para>
 
</para>
<para>
<computeroutput>#include &lt;json.hpp&gt;</computeroutput>
</para>
Inheritance diagram for nlohmann::detail::parse_error:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1parse__error__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for nlohmann::detail::parse_error:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1parse__error__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename BasicJsonContext , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json__context">is_basic_json_context</link>&lt; BasicJsonContext &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>static <link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link> <link linkend="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f">create</link> (int id_, const <link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link> &amp;pos, const std::string &amp;what_arg, BasicJsonContext context)</para>

<para>create a parse error exception </para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonContext , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json__context">is_basic_json_context</link>&lt; BasicJsonContext &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </para><para>static <link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link> <link linkend="_classnlohmann_1_1detail_1_1parse__error_1a80f6011cc0a2ef991c11c53bd9ac50dd">create</link> (int id_, std::size_t byte_, const std::string &amp;what_arg, BasicJsonContext context)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>const std::size_t <link linkend="_classnlohmann_1_1detail_1_1parse__error_1a9505aaa1ca943be927eec7cc579592ff">byte</link></para>

<para>byte index of the parse error </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Attributes inherited from <link linkend="_classnlohmann_1_1detail_1_1exception">nlohmann::detail::exception</link>        <itemizedlist>
            <listitem><para>const int <link linkend="_classnlohmann_1_1detail_1_1exception_1a0d4589a3fb54e81646d986c05efa3b9a">id</link></para>

<para>the id of the exception </para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Additional Inherited Members    </title>
Public Member Functions inherited from <link linkend="_classnlohmann_1_1detail_1_1exception">nlohmann::detail::exception</link>        <itemizedlist>
            <listitem><para>const char * <link linkend="_classnlohmann_1_1detail_1_1exception_1ad863f4455f8bb2ea006a78e6fcf0b090">what</link> () const noexcept override</para>

<para>returns the explanatory string </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_classstd_1_1exception">std::exception</link>        <itemizedlist>
            <listitem><para><link linkend="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56">exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual <link linkend="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff">~exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para><link linkend="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56">exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual <link linkend="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff">~exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para><link linkend="_classstd_1_1exception_1ad84d979d801cefc84d141dfb0b2cae56">exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
            <listitem><para>virtual <link linkend="_classstd_1_1exception_1a7932e7fd665b6dedef034379cfcfb8ff">~exception</link> () <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1871651bd291385f1c36eebfb34eaf69">_GLIBCXX_TXN_SAFE_DYN</link> <link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1af2a92889977e9171e0cbfe6445b6a79f">_GLIBCXX_NOTHROW</link></para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_classnlohmann_1_1detail_1_1exception">nlohmann::detail::exception</link>        <itemizedlist>
            <listitem><para><link linkend="_classnlohmann_1_1detail_1_1exception_1ae323ad0d53bc724414c2233164e65657">exception</link> (int id_, const char *what_arg)</para>
</listitem>
        </itemizedlist>
Static Protected Member Functions inherited from <link linkend="_classnlohmann_1_1detail_1_1exception">nlohmann::detail::exception</link>        <itemizedlist>
            <listitem><para>static std::string <link linkend="_classnlohmann_1_1detail_1_1exception_1abf41a7e9178356314082284e6cfea278">name</link> (const std::string &amp;ename, int id_)</para>
</listitem>
            <listitem><para>static std::string <link linkend="_classnlohmann_1_1detail_1_1exception_1a9032b2e5d344c9f1f7afef4212f0ad39">diagnostics</link> (std::nullptr_t)</para>
</listitem>
            <listitem><para>template&lt;typename BasicJsonType &gt; </para><para>static std::string <link linkend="_classnlohmann_1_1detail_1_1exception_1a9f8f89e64fc50d8840e35a5e1c154f73">diagnostics</link> (const BasicJsonType *leaf_element)</para>
</listitem>
        </itemizedlist>
<section>
<title>Detailed Description</title>

<para>exception indicating a parse error </para>



<para><formalpara><title>See also</title>

<para><link xlink:href="https://json.nlohmann.me/api/basic_json/parse_error/">https://json.nlohmann.me/api/basic_json/parse_error/</link> </para>
</formalpara>
</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1parse__error_1a33f7191c381cb7220ea7245d90aded7f"/><section>
    <title>create()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>create</primary><secondary>nlohmann::detail::parse_error</secondary></indexterm>
<indexterm><primary>nlohmann::detail::parse_error</primary><secondary>create</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonContext , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json__context">is_basic_json_context</link>&lt; BasicJsonContext &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>static <link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link> nlohmann::detail::parse_error::create (int id_, const <link linkend="_structnlohmann_1_1detail_1_1position__t">position_t</link> &amp; pos, const std::string &amp; what_arg, BasicJsonContext context)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>create a parse error exception </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>id_</entry><entry>
<para>the id of the exception </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>pos</entry><entry>
<para>the position where the error occurred (or with chars_read_total=0 if the position cannot be determined) </para>
</entry>
                            </row>
                            <row>
<entry>in</entry><entry>what_arg</entry><entry>
<para>the explanatory string </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link> object </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1parse__error_a33f7191c381cb7220ea7245d90aded7f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Here is the caller graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1parse__error_a33f7191c381cb7220ea7245d90aded7f_icgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_classnlohmann_1_1detail_1_1parse__error_1a80f6011cc0a2ef991c11c53bd9ac50dd"/><section>
    <title>create()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>create</primary><secondary>nlohmann::detail::parse_error</secondary></indexterm>
<indexterm><primary>nlohmann::detail::parse_error</primary><secondary>create</secondary></indexterm>
<computeroutput>template&lt;typename BasicJsonContext , <link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt; <link linkend="_structnlohmann_1_1detail_1_1is__basic__json__context">is_basic_json_context</link>&lt; BasicJsonContext &gt;<link linkend="_classvalue">::value</link>, int &gt;  = 0&gt; </computeroutput><para><computeroutput>static <link linkend="_classnlohmann_1_1detail_1_1parse__error">parse_error</link> nlohmann::detail::parse_error::create (int id_, std::size_t byte_, const std::string &amp; what_arg, BasicJsonContext context)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classnlohmann_1_1detail_1_1parse__error_a80f6011cc0a2ef991c11c53bd9ac50dd_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classnlohmann_1_1detail_1_1parse__error_1a9505aaa1ca943be927eec7cc579592ff"/><section>
    <title>byte</title>
<indexterm><primary>byte</primary><secondary>nlohmann::detail::parse_error</secondary></indexterm>
<indexterm><primary>nlohmann::detail::parse_error</primary><secondary>byte</secondary></indexterm>
<para><computeroutput>const std::size_t nlohmann::detail::parse_error::byte</computeroutput></para><para>

<para>byte index of the parse error </para>
</para>

<para>The byte index of the last read character in the input file.</para>

<para><note><title>Note</title>

<para>For an input with n bytes, 1 is the index of the first character and n+1 is the index of the terminating null byte or the end of file. This also holds true when reading a byte vector (CBOR or MessagePack). </para>
</note>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_json_8hpp">json.hpp</link></section>
</section>
