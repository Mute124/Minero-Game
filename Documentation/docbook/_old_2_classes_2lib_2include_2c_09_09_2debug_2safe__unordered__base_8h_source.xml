<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__unordered__base_8h_source" xml:lang="en-US">
<title>safe_unordered_base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/safe_unordered_base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Safe&#32;container/iterator&#32;base&#32;implementation&#32;&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2011-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
29 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_DEBUG_SAFE_UNORDERED_BASE_H</emphasis>
30 <emphasis role="preprocessor">#define&#32;_GLIBCXX_DEBUG_SAFE_UNORDERED_BASE_H&#32;1</emphasis>
31 
32 <emphasis role="preprocessor">#include&#32;&lt;debug/safe_base.h&gt;</emphasis>
33 
34 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>
35 {
36 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_unordered_container_base;
37 
50 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Safe_local_iterator_base&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Safe_iterator_base
51 &#32;&#32;{
52 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
54 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad7d51ed8396149f6d4d44e9bbf48ddf3">_Safe_local_iterator_base</link>()
55 &#32;&#32;&#32;&#32;{&#32;}
56 
64 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a7958bccd20b93cf3f6cffc4ed922346d">_Safe_local_iterator_base</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>*&#32;__seq,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant)
65 &#32;&#32;&#32;&#32;{&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78f52529ca9957c3f87afb0920456374">_M_attach</link>(<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>*<emphasis role="keyword">&gt;</emphasis>(__seq),&#32;__constant);&#32;}
66 
70 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1aba66dde2adb286395bcb7714f32e64d9">_Safe_local_iterator_base</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base">_Safe_local_iterator_base</link>&amp;&#32;__x,
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant)
72 &#32;&#32;&#32;&#32;{&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78f52529ca9957c3f87afb0920456374">_M_attach</link>(__x._M_sequence,&#32;__constant);&#32;}
73 
74 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a81a21a2f2e23e5e500ef2e47636b5aaf">~_Safe_local_iterator_base</link>()&#32;{&#32;this-&gt;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad88baf5072fed556979aaf901b3dfafd">_M_detach</link>();&#32;}
75 
76 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link>*
77 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a519195e1575bce300f0d1643d7aca081">_M_get_container</link>()&#32;const&#32;noexcept;
78 
84 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
85 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78f52529ca9957c3f87afb0920456374">_M_attach</link>(<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>*&#32;__seq,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant);
86 
88 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
89 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a1d77bdc38465edcace6943056f867725">_M_attach_single</link>(<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>*&#32;__seq,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant)&#32;throw&#32;();
90 
94 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
95 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1ad88baf5072fed556979aaf901b3dfafd">_M_detach</link>();
96 
98 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
99 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__local__iterator__base_1a78cee76dec3476ad6c790e55d00eef46">_M_detach_single</link>()&#32;throw&#32;();
100 &#32;&#32;};
101 
120 &#32;&#32;class&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link>&#32;:&#32;public&#32;<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>
121 &#32;&#32;{
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class____gnu__debug_1_1___safe__local__iterator__base">_Safe_local_iterator_base</link>;
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link>&#32;_Base;
124 
125 &#32;&#32;<emphasis role="keyword">public</emphasis>:
127 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>*&#32;_M_local_iterators;
128 
130 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>*&#32;_M_const_local_iterators;
131 
132 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
133 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;with&#32;a&#32;version&#32;number&#32;of&#32;1&#32;and&#32;no&#32;iterators</emphasis>
134 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a9e65f903563508a84aff66abc81f0a5d">_Safe_unordered_container_base</link>()&#32;noexcept
135 &#32;&#32;&#32;&#32;:&#32;_M_local_iterators(<emphasis role="keywordtype">nullptr</emphasis>),&#32;_M_const_local_iterators(<emphasis role="keywordtype">nullptr</emphasis>)
136 &#32;&#32;&#32;&#32;{&#32;}
137 
138 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;constructor&#32;does&#32;not&#32;copy&#32;iterators.</emphasis>
139 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a6f7357bc3a3a6ef05fff5425d2416560">_Safe_unordered_container_base</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link>&amp;)
140 &#32;&#32;&#32;&#32;noexcept
141 &#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link>()&#32;{&#32;}
142 
143 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;moved&#32;unordered&#32;containers&#32;iterators&#32;are&#32;swapped.</emphasis>
144 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a4c64b0f6365a57a5acea89a074ca8510">_Safe_unordered_container_base</link>(<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link>&amp;&amp;&#32;__x)
145 &#32;&#32;&#32;&#32;noexcept
146 &#32;&#32;&#32;&#32;:&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link>()
147 &#32;&#32;&#32;&#32;{&#32;this-&gt;_M_swap(__x);&#32;}
148 
151 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a918ae91156e92a8701da15fc61d05b63">~_Safe_unordered_container_base</link>()&#32;noexcept
152 &#32;&#32;&#32;&#32;{&#32;this-&gt;_M_detach_all();&#32;}
153 
155 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
156 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1aa7ec5c80048329d10fe2916fff73aeff">_M_detach_all</link>();
157 
163 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
164 &#32;&#32;&#32;&#32;<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base_1a1ff909e73bfb6e9646caf6df99db2d70">_M_swap</link>(<link linkend="_class____gnu__debug_1_1___safe__unordered__container__base">_Safe_unordered_container_base</link>&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>;
165 
166 &#32;&#32;<emphasis role="keyword">private</emphasis>:
168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
169 &#32;&#32;&#32;&#32;_M_attach_local(<link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>*&#32;__it,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant);
170 
172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
173 &#32;&#32;&#32;&#32;_M_attach_local_single(<link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>*&#32;__it,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__constant)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
174 
176 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
177 &#32;&#32;&#32;&#32;_M_detach_local(<link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>*&#32;__it);
178 
180 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
181 &#32;&#32;&#32;&#32;_M_detach_local_single(<link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link>*&#32;__it)&#32;<emphasis role="keywordflow">throw</emphasis>&#32;();
182 &#32;&#32;};
183 }&#32;<emphasis role="comment">//&#32;namespace&#32;__gnu_debug</emphasis>
184 
185 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
