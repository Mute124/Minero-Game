<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2pthread_8h_source" xml:lang="en-US">
<title>pthread.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/pthread.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">&#32;&#32;&#32;Copyright&#32;(c)&#32;2011-2016&#32;mingw-w64&#32;project</emphasis>
3 <emphasis role="comment"></emphasis>
4 <emphasis role="comment">&#32;&#32;&#32;Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a</emphasis>
5 <emphasis role="comment">&#32;&#32;&#32;copy&#32;of&#32;this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),</emphasis>
6 <emphasis role="comment">&#32;&#32;&#32;to&#32;deal&#32;in&#32;the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation</emphasis>
7 <emphasis role="comment">&#32;&#32;&#32;the&#32;rights&#32;to&#32;use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,</emphasis>
8 <emphasis role="comment">&#32;&#32;&#32;and/or&#32;sell&#32;copies&#32;of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the</emphasis>
9 <emphasis role="comment">&#32;&#32;&#32;Software&#32;is&#32;furnished&#32;to&#32;do&#32;so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
10 <emphasis role="comment"></emphasis>
11 <emphasis role="comment">&#32;&#32;&#32;The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in</emphasis>
12 <emphasis role="comment">&#32;&#32;&#32;all&#32;copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
13 <emphasis role="comment"></emphasis>
14 <emphasis role="comment">&#32;&#32;&#32;THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
15 <emphasis role="comment">&#32;&#32;&#32;IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
16 <emphasis role="comment">&#32;&#32;&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
17 <emphasis role="comment">&#32;&#32;&#32;AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
18 <emphasis role="comment">&#32;&#32;&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING</emphasis>
19 <emphasis role="comment">&#32;&#32;&#32;FROM,&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER</emphasis>
20 <emphasis role="comment">&#32;&#32;&#32;DEALINGS&#32;IN&#32;THE&#32;SOFTWARE.</emphasis>
21 <emphasis role="comment">*/</emphasis>
22 
23 <emphasis role="comment">/*</emphasis>
24 <emphasis role="comment">&#32;*&#32;Parts&#32;of&#32;this&#32;library&#32;are&#32;derived&#32;by:</emphasis>
25 <emphasis role="comment">&#32;*</emphasis>
26 <emphasis role="comment">&#32;*&#32;Posix&#32;Threads&#32;library&#32;for&#32;Microsoft&#32;Windows</emphasis>
27 <emphasis role="comment">&#32;*</emphasis>
28 <emphasis role="comment">&#32;*&#32;Use&#32;at&#32;own&#32;risk,&#32;there&#32;is&#32;no&#32;implied&#32;warranty&#32;to&#32;this&#32;code.</emphasis>
29 <emphasis role="comment">&#32;*&#32;It&#32;uses&#32;undocumented&#32;features&#32;of&#32;Microsoft&#32;Windows&#32;that&#32;can&#32;change</emphasis>
30 <emphasis role="comment">&#32;*&#32;at&#32;any&#32;time&#32;in&#32;the&#32;future.</emphasis>
31 <emphasis role="comment">&#32;*</emphasis>
32 <emphasis role="comment">&#32;*&#32;(C)&#32;2010&#32;Lockless&#32;Inc.</emphasis>
33 <emphasis role="comment">&#32;*&#32;All&#32;rights&#32;reserved.</emphasis>
34 <emphasis role="comment">&#32;*</emphasis>
35 <emphasis role="comment">&#32;*&#32;Redistribution&#32;and&#32;use&#32;in&#32;source&#32;and&#32;binary&#32;forms,&#32;with&#32;or&#32;without&#32;modification,</emphasis>
36 <emphasis role="comment">&#32;*&#32;are&#32;permitted&#32;provided&#32;that&#32;the&#32;following&#32;conditions&#32;are&#32;met:</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;&#32;*&#32;Redistributions&#32;of&#32;source&#32;code&#32;must&#32;retain&#32;the&#32;above&#32;copyright&#32;notice,</emphasis>
40 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;this&#32;list&#32;of&#32;conditions&#32;and&#32;the&#32;following&#32;disclaimer.</emphasis>
41 <emphasis role="comment">&#32;*&#32;&#32;*&#32;Redistributions&#32;in&#32;binary&#32;form&#32;must&#32;reproduce&#32;the&#32;above&#32;copyright&#32;notice,</emphasis>
42 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;this&#32;list&#32;of&#32;conditions&#32;and&#32;the&#32;following&#32;disclaimer&#32;in&#32;the&#32;documentation</emphasis>
43 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;and/or&#32;other&#32;materials&#32;provided&#32;with&#32;the&#32;distribution.</emphasis>
44 <emphasis role="comment">&#32;*&#32;&#32;*&#32;Neither&#32;the&#32;name&#32;of&#32;Lockless&#32;Inc.&#32;nor&#32;the&#32;names&#32;of&#32;its&#32;contributors&#32;may&#32;be</emphasis>
45 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;used&#32;to&#32;endorse&#32;or&#32;promote&#32;products&#32;derived&#32;from&#32;this&#32;software&#32;without</emphasis>
46 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;specific&#32;prior&#32;written&#32;permission.</emphasis>
47 <emphasis role="comment">&#32;*</emphasis>
48 <emphasis role="comment">&#32;*&#32;THIS&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;BY&#32;THE&#32;COPYRIGHT&#32;HOLDERS&#32;AND&#32;CONTRIBUTORS&#32;&quot;AS&#32;IS&quot;&#32;AN</emphasis>
49 <emphasis role="comment">&#32;*&#32;ANY&#32;EXPRESS&#32;OR&#32;IMPLIED&#32;WARRANTIES,&#32;INCLUDING,&#32;BUT&#32;NOT&#32;LIMITED&#32;TO,&#32;THE&#32;IMPLIED</emphasis>
50 <emphasis role="comment">&#32;*&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY&#32;AND&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;ARE&#32;DISCLAIMED.</emphasis>
51 <emphasis role="comment">&#32;*&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE&#32;COPYRIGHT&#32;HOLDER&#32;OR&#32;CONTRIBUTORS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;DIRECT,</emphasis>
52 <emphasis role="comment">&#32;*&#32;INDIRECT,&#32;INCIDENTAL,&#32;SPECIAL,&#32;EXEMPLARY,&#32;OR&#32;CONSEQUENTIAL&#32;DAMAGES&#32;(INCLUDING,</emphasis>
53 <emphasis role="comment">&#32;*&#32;BUT&#32;NOT&#32;LIMITED&#32;TO,&#32;PROCUREMENT&#32;OF&#32;SUBSTITUTE&#32;GOODS&#32;OR&#32;SERVICES;&#32;LOSS&#32;OF&#32;USE,</emphasis>
54 <emphasis role="comment">&#32;*&#32;DATA,&#32;OR&#32;PROFITS;&#32;OR&#32;BUSINESS&#32;INTERRUPTION)&#32;HOWEVER&#32;CAUSED&#32;AND&#32;ON&#32;ANY&#32;THEORY&#32;OF</emphasis>
55 <emphasis role="comment">&#32;*&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;CONTRACT,&#32;STRICT&#32;LIABILITY,&#32;OR&#32;TORT&#32;(INCLUDING&#32;NEGLIGENCE</emphasis>
56 <emphasis role="comment">&#32;*&#32;OR&#32;OTHERWISE)&#32;ARISING&#32;IN&#32;ANY&#32;WAY&#32;OUT&#32;OF&#32;THE&#32;USE&#32;OF&#32;THIS&#32;SOFTWARE,&#32;EVEN&#32;IF&#32;ADVISED</emphasis>
57 <emphasis role="comment">&#32;*&#32;OF&#32;THE&#32;POSSIBILITY&#32;OF&#32;SUCH&#32;DAMAGE.</emphasis>
58 <emphasis role="comment">&#32;*/</emphasis>
59 <emphasis role="preprocessor">#ifndef&#32;WIN_PTHREADS_H</emphasis>
60 <emphasis role="preprocessor">#define&#32;WIN_PTHREADS_H</emphasis>
61 
62 <emphasis role="preprocessor">#include&#32;&lt;stddef.h&gt;</emphasis>
63 <emphasis role="preprocessor">#include&#32;&lt;errno.h&gt;</emphasis>
64 <emphasis role="preprocessor">#include&#32;&lt;sys/types.h&gt;</emphasis>
65 
66 <emphasis role="preprocessor">#include&#32;&lt;process.h&gt;</emphasis>
67 <emphasis role="preprocessor">#include&#32;&lt;limits.h&gt;</emphasis>
68 <emphasis role="preprocessor">#include&#32;&lt;signal.h&gt;</emphasis>
69 <emphasis role="preprocessor">#include&#32;&lt;time.h&gt;</emphasis>
70 
71 <emphasis role="preprocessor">#include&#32;&lt;sys/timeb.h&gt;</emphasis>
72 
73 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2pthread__compat_8h">pthread_compat.h</link>&quot;</emphasis>
74 
75 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
76 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
77 <emphasis role="preprocessor">#endif</emphasis>
78 
79 <emphasis role="preprocessor">#define&#32;__WINPTHREADS_VERSION_MAJOR&#32;0</emphasis>
80 <emphasis role="preprocessor">#define&#32;__WINPTHREADS_VERSION_MINOR&#32;5</emphasis>
81 <emphasis role="preprocessor">#define&#32;__WINPTHREADS_VERSION_PATCHLEVEL&#32;0</emphasis>
82 
83 <emphasis role="comment">/*&#32;MSB&#32;8-bit&#32;major&#32;version,&#32;8-bit&#32;minor&#32;version,&#32;16-bit&#32;patch&#32;level.&#32;&#32;*/</emphasis>
84 <emphasis role="preprocessor">#define&#32;__WINPTHREADS_VERSION&#32;0x00050000</emphasis>
85 
86 <emphasis role="preprocessor">#if&#32;defined&#32;DLL_EXPORT</emphasis>
87 <emphasis role="preprocessor">#ifdef&#32;IN_WINPTHREAD</emphasis>
88 <emphasis role="preprocessor">#define&#32;WINPTHREAD_API&#32;__declspec(dllexport)</emphasis>
89 <emphasis role="preprocessor">#else</emphasis>
90 <emphasis role="preprocessor">#define&#32;WINPTHREAD_API&#32;__declspec(dllimport)</emphasis>
91 <emphasis role="preprocessor">#endif</emphasis>
92 <emphasis role="preprocessor">#else</emphasis>
93 <emphasis role="preprocessor">#define&#32;WINPTHREAD_API</emphasis>
94 <emphasis role="preprocessor">#endif</emphasis>
95 
96 <emphasis role="comment">/*&#32;#define&#32;WINPTHREAD_DBG&#32;1&#32;*/</emphasis>
97 
98 <emphasis role="comment">/*&#32;Compatibility&#32;stuff:&#32;*/</emphasis>
99 <emphasis role="preprocessor">#define&#32;RWLS_PER_THREAD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8</emphasis>
100 
101 <emphasis role="comment">/*&#32;Error-codes.&#32;&#32;*/</emphasis>
102 <emphasis role="preprocessor">#ifndef&#32;ETIMEDOUT</emphasis>
103 <emphasis role="preprocessor">#define&#32;ETIMEDOUT&#32;&#32;&#32;138</emphasis>
104 <emphasis role="preprocessor">#endif</emphasis>
105 <emphasis role="preprocessor">#ifndef&#32;ENOTSUP</emphasis>
106 <emphasis role="preprocessor">#define&#32;ENOTSUP&#32;&#32;&#32;&#32;&#32;129</emphasis>
107 <emphasis role="preprocessor">#endif</emphasis>
108 <emphasis role="preprocessor">#ifndef&#32;EWOULDBLOCK</emphasis>
109 <emphasis role="preprocessor">#define&#32;EWOULDBLOCK&#32;140</emphasis>
110 <emphasis role="preprocessor">#endif</emphasis>
111 
112 <emphasis role="comment">/*&#32;pthread&#32;specific&#32;defines.&#32;&#32;*/</emphasis>
113 
114 <emphasis role="preprocessor">#define&#32;PTHREAD_CANCEL_DISABLE&#32;0</emphasis>
115 <emphasis role="preprocessor">#define&#32;PTHREAD_CANCEL_ENABLE&#32;0x01</emphasis>
116 
117 <emphasis role="preprocessor">#define&#32;PTHREAD_CANCEL_DEFERRED&#32;0</emphasis>
118 <emphasis role="preprocessor">#define&#32;PTHREAD_CANCEL_ASYNCHRONOUS&#32;0x02</emphasis>
119 
120 <emphasis role="preprocessor">#define&#32;PTHREAD_CREATE_JOINABLE&#32;0</emphasis>
121 <emphasis role="preprocessor">#define&#32;PTHREAD_CREATE_DETACHED&#32;0x04</emphasis>
122 
123 <emphasis role="preprocessor">#define&#32;PTHREAD_EXPLICIT_SCHED&#32;0</emphasis>
124 <emphasis role="preprocessor">#define&#32;PTHREAD_INHERIT_SCHED&#32;0x08</emphasis>
125 
126 <emphasis role="preprocessor">#define&#32;PTHREAD_SCOPE_PROCESS&#32;0</emphasis>
127 <emphasis role="preprocessor">#define&#32;PTHREAD_SCOPE_SYSTEM&#32;0x10</emphasis>
128 
129 <emphasis role="preprocessor">#define&#32;PTHREAD_DEFAULT_ATTR&#32;(PTHREAD_CANCEL_ENABLE)</emphasis>
130 
131 <emphasis role="preprocessor">#define&#32;PTHREAD_CANCELED&#32;((void&#32;*)&#32;(intptr_t)&#32;0xDEADBEEF)</emphasis>
132 
133 <emphasis role="preprocessor">#define&#32;_PTHREAD_NULL_THREAD&#32;((pthread_t)&#32;0)</emphasis>
134 
135 <emphasis role="preprocessor">#define&#32;PTHREAD_ONCE_INIT&#32;0</emphasis>
136 
137 <emphasis role="preprocessor">#define&#32;PTHREAD_DESTRUCTOR_ITERATIONS&#32;256</emphasis>
138 <emphasis role="preprocessor">#define&#32;PTHREAD_KEYS_MAX&#32;(1&lt;&lt;20)</emphasis>
139 
140 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_NORMAL&#32;0</emphasis>
141 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_ERRORCHECK&#32;1</emphasis>
142 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_RECURSIVE&#32;2</emphasis>
143 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_DEFAULT&#32;PTHREAD_MUTEX_NORMAL</emphasis>
144 
145 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_SHARED&#32;1</emphasis>
146 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_PRIVATE&#32;0</emphasis>
147 
148 <emphasis role="preprocessor">#define&#32;PTHREAD_PRIO_NONE&#32;0</emphasis>
149 <emphasis role="preprocessor">#define&#32;PTHREAD_PRIO_INHERIT&#32;8</emphasis>
150 <emphasis role="preprocessor">#define&#32;PTHREAD_PRIO_PROTECT&#32;16</emphasis>
151 <emphasis role="preprocessor">#define&#32;PTHREAD_PRIO_MULT&#32;32</emphasis>
152 <emphasis role="preprocessor">#define&#32;PTHREAD_PROCESS_SHARED&#32;1</emphasis>
153 <emphasis role="preprocessor">#define&#32;PTHREAD_PROCESS_PRIVATE&#32;0</emphasis>
154 
155 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_FAST_NP&#32;&#32;&#32;&#32;&#32;&#32;&#32;PTHREAD_MUTEX_NORMAL</emphasis>
156 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_TIMED_NP&#32;&#32;&#32;&#32;&#32;&#32;PTHREAD_MUTEX_FAST_NP</emphasis>
157 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_ADAPTIVE_NP&#32;&#32;&#32;PTHREAD_MUTEX_FAST_NP</emphasis>
158 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_ERRORCHECK_NP&#32;PTHREAD_MUTEX_ERRORCHECK</emphasis>
159 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_RECURSIVE_NP&#32;&#32;PTHREAD_MUTEX_RECURSIVE</emphasis>
160 
161 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a3d6dbf593876e112325fb0ffec4c1296">pthread_timechange_handler_np</link>(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;dummy);
162 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a6c5e5fd955d576e0e7bc430973623943">pthread_delay_np</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*interval);
163 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4e6a0670be198551b6458ba3e3af3ebd">pthread_num_processors_np</link>(<emphasis role="keywordtype">void</emphasis>);
164 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a02871566ac428be959ad377bcfa26a04">pthread_set_num_processors_np</link>(<emphasis role="keywordtype">int</emphasis>&#32;n);
165 
166 <emphasis role="preprocessor">#define&#32;PTHREAD_BARRIER_SERIAL_THREAD&#32;1</emphasis>
167 
168 <emphasis role="comment">/*&#32;maximum&#32;number&#32;of&#32;times&#32;a&#32;read&#32;lock&#32;may&#32;be&#32;obtained&#32;*/</emphasis>
169 <emphasis role="preprocessor">#define&#32;MAX_READ_LOCKS&#32;&#32;&#32;&#32;&#32;&#32;(INT_MAX&#32;-&#32;1)</emphasis>
170 
171 <emphasis role="comment">/*&#32;No&#32;fork()&#32;in&#32;windows&#32;-&#32;so&#32;ignore&#32;this&#32;*/</emphasis>
172 <emphasis role="preprocessor">#define&#32;pthread_atfork(F1,F2,F3)&#32;0</emphasis>
173 
174 <emphasis role="comment">/*&#32;unsupported&#32;stuff:&#32;*/</emphasis>
175 <emphasis role="preprocessor">#define&#32;pthread_mutex_getprioceiling(M,&#32;P)&#32;ENOTSUP</emphasis>
176 <emphasis role="preprocessor">#define&#32;pthread_mutex_setprioceiling(M,&#32;P)&#32;ENOTSUP</emphasis>
177 <emphasis role="preprocessor">#define&#32;pthread_getcpuclockid(T,&#32;C)&#32;ENOTSUP</emphasis>
178 <emphasis role="preprocessor">#define&#32;pthread_attr_getguardsize(A,&#32;S)&#32;ENOTSUP</emphasis>
179 <emphasis role="preprocessor">#define&#32;pthread_attr_setgaurdsize(A,&#32;S)&#32;ENOTSUP</emphasis>
180 
181 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4be465d5b536b183b4a9a6e56d67eab4">pthread_once_t</link>;
182 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>;
183 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae3576124dcee020fef884de07a48290c">pthread_key_t</link>;
184 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2pthread_8h_1a83657bf7064da5386d9df866335bae36">pthread_barrierattr_t</link>;
185 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>;
186 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab478b207d8ef5f2b3f4be9fcfbe6fbf9">pthread_rwlockattr_t</link>;
187 
188 <emphasis role="comment">/*</emphasis>
189 <emphasis role="comment">struct&#32;_pthread_v;</emphasis>
190 <emphasis role="comment"></emphasis>
191 <emphasis role="comment">typedef&#32;struct&#32;pthread_t&#32;{</emphasis>
192 <emphasis role="comment">&#32;&#32;struct&#32;_pthread_v&#32;*p;</emphasis>
193 <emphasis role="comment">&#32;&#32;int&#32;x;</emphasis>
194 <emphasis role="comment">}&#32;pthread_t;</emphasis>
195 <emphasis role="comment">*/</emphasis>
196 
197 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>;
198 
199 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct__pthread__cleanup">_pthread_cleanup</link>&#32;<link linkend="_struct__pthread__cleanup">_pthread_cleanup</link>;
200 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct__pthread__cleanup">_pthread_cleanup</link>
201 {
202 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&#32;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func</link>)(<emphasis role="keywordtype">void</emphasis>&#32;*);
203 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_struct__pthread__cleanup_1a379e9bd167a60f62b9b2d7f94a6af9d4">arg</link>;
204 &#32;&#32;&#32;&#32;<link linkend="_struct__pthread__cleanup">_pthread_cleanup</link>&#32;*<link linkend="_struct__pthread__cleanup_1a2347eeb0b66a7053512a142eef3dcbf5">next</link>;
205 };
206 
207 <emphasis role="preprocessor">#define&#32;pthread_cleanup_push(F,&#32;A)\</emphasis>
208 <emphasis role="preprocessor">{\</emphasis>
209 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;_pthread_cleanup&#32;_pthread_cup&#32;=&#32;{(F),&#32;(A),&#32;*pthread_getclean()};\</emphasis>
210 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__sync_synchronize();\</emphasis>
211 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;*pthread_getclean()&#32;=&#32;(_pthread_cleanup&#32;*)&#32;&amp;_pthread_cup;\</emphasis>
212 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;__sync_synchronize()</emphasis>
213 
214 <emphasis role="comment">/*&#32;Note&#32;that&#32;if&#32;async&#32;cancelling&#32;is&#32;used,&#32;then&#32;there&#32;is&#32;a&#32;race&#32;here&#32;*/</emphasis>
215 <emphasis role="preprocessor">#define&#32;pthread_cleanup_pop(E)\</emphasis>
216 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;(*pthread_getclean()&#32;=&#32;_pthread_cup.next,&#32;((E)&#32;?&#32;(_pthread_cup.func((pthread_once_t&#32;*)_pthread_cup.arg))&#32;:&#32;(void)0));}</emphasis>
217 
218 <emphasis role="preprocessor">#ifndef&#32;SCHED_OTHER</emphasis>
219 <emphasis role="comment">/*&#32;Some&#32;POSIX&#32;realtime&#32;extensions,&#32;mostly&#32;stubbed&#32;*/</emphasis>
220 <emphasis role="preprocessor">#define&#32;SCHED_OTHER&#32;&#32;&#32;&#32;&#32;0</emphasis>
221 <emphasis role="preprocessor">#define&#32;SCHED_FIFO&#32;&#32;&#32;&#32;&#32;&#32;1</emphasis>
222 <emphasis role="preprocessor">#define&#32;SCHED_RR&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2</emphasis>
223 <emphasis role="preprocessor">#define&#32;SCHED_MIN&#32;&#32;&#32;&#32;&#32;&#32;&#32;SCHED_OTHER</emphasis>
224 <emphasis role="preprocessor">#define&#32;SCHED_MAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;SCHED_RR</emphasis>
225 
226 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsched__param">sched_param</link>&#32;{
227 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structsched__param_1aa0f2640949273f2c30549ed8d1bb197e">sched_priority</link>;
228 };
229 
230 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a6c8d40dba19ab44315a73fa45579e07c">sched_yield</link>(<emphasis role="keywordtype">void</emphasis>);
231 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4c3046c4f2a21f421684222bb7b013fa">sched_get_priority_min</link>(<emphasis role="keywordtype">int</emphasis>&#32;pol);
232 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4adca5eec5f7d79a9a66c938a6481547">sched_get_priority_max</link>(<emphasis role="keywordtype">int</emphasis>&#32;pol);
233 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab610c8ffbea07146984789a8e647d0f5">sched_getscheduler</link>(pid_t&#32;pid);
234 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a3d8665afa3c679d799e6108ab146c637">sched_setscheduler</link>(pid_t&#32;pid,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pol,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsched__param">sched_param</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>);
235 
236 <emphasis role="preprocessor">#endif</emphasis>
237 
238 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>;
239 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structpthread__attr__t">pthread_attr_t</link>
240 {
241 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structpthread__attr__t_1afbffad13381ceff0628ba79397933acd">p_state</link>;
242 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_structpthread__attr__t_1a24c790e83123e988fc8fdeb7c7ad9325">stack</link>;
243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_structpthread__attr__t_1ab5b29d66d9066bde00a07619d25d4bba">s_size</link>;
244 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsched__param">sched_param</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>;
245 };
246 
247 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a1b0680550e1649866719e5c23232a620">pthread_attr_setschedparam</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsched__param">sched_param</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>);
248 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a62a2814e0abc775243b49e253f145ee6">pthread_attr_getschedparam</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsched__param">sched_param</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>);
249 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a5953c02e8601721f28f600e06ca0052e">pthread_getschedparam</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;thread,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*pol,&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsched__param">sched_param</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>);
250 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab2c23d7c6f85bd86d76b464ab92bd169">pthread_setschedparam</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;thread,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pol,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsched__param">sched_param</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a630cfbd3157b61ef7097600d4b7885b7">param</link>);
251 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab1808e229a275eff5dba5e69f2a8ac2e">pthread_attr_setschedpolicy</link>&#32;(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pol);
252 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a03daab49bb90274e7adf26dbe619e292">pthread_attr_getschedpolicy</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*pol);
253 
254 <emphasis role="comment">/*&#32;synchronization&#32;objects&#32;*/</emphasis>
255 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1abd3131a20f4053d808d4277db3e39a23">intptr_t</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a8014fe324aecf71a1c44f2ae8be4c796">pthread_spinlock_t</link>;
256 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1abd3131a20f4053d808d4277db3e39a23">intptr_t</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>;
257 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1abd3131a20f4053d808d4277db3e39a23">intptr_t</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>;
258 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1abd3131a20f4053d808d4277db3e39a23">intptr_t</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>;
259 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2pthread_8h_1a97b11306d02a9507ed1d6c7cdc06384e">pthread_barrier_t</link>;
260 
261 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_NORMAL&#32;0</emphasis>
262 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_ERRORCHECK&#32;1</emphasis>
263 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_RECURSIVE&#32;2</emphasis>
264 
265 <emphasis role="preprocessor">#define&#32;GENERIC_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1</emphasis>
266 <emphasis role="preprocessor">#define&#32;GENERIC_ERRORCHECK_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-2</emphasis>
267 <emphasis role="preprocessor">#define&#32;GENERIC_RECURSIVE_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-3</emphasis>
268 <emphasis role="preprocessor">#define&#32;GENERIC_NORMAL_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1</emphasis>
269 <emphasis role="preprocessor">#define&#32;PTHREAD_MUTEX_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(pthread_mutex_t)GENERIC_INITIALIZER</emphasis>
270 <emphasis role="preprocessor">#define&#32;PTHREAD_RECURSIVE_MUTEX_INITIALIZER&#32;&#32;&#32;&#32;&#32;(pthread_mutex_t)GENERIC_RECURSIVE_INITIALIZER</emphasis>
271 <emphasis role="preprocessor">#define&#32;PTHREAD_ERRORCHECK_MUTEX_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(pthread_mutex_t)GENERIC_ERRORCHECK_INITIALIZER</emphasis>
272 <emphasis role="preprocessor">#define&#32;PTHREAD_NORMAL_MUTEX_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(pthread_mutex_t)GENERIC_NORMAL_INITIALIZER</emphasis>
273 <emphasis role="preprocessor">#define&#32;PTHREAD_DEFAULT_MUTEX_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;PTHREAD_NORMAL_MUTEX_INITIALIZER</emphasis>
274 <emphasis role="preprocessor">#define&#32;PTHREAD_COND_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(pthread_cond_t)GENERIC_INITIALIZER</emphasis>
275 <emphasis role="preprocessor">#define&#32;PTHREAD_RWLOCK_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(pthread_rwlock_t)GENERIC_INITIALIZER</emphasis>
276 <emphasis role="preprocessor">#define&#32;PTHREAD_SPINLOCK_INITIALIZER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(pthread_spinlock_t)GENERIC_INITIALIZER</emphasis>
277 
278 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;(**<link linkend="__classes_2lib_2pthread_8h_1a27dc5b525727e12c13fa3e8e7a3ce316">_pthread_key_dest</link>)(<emphasis role="keywordtype">void</emphasis>&#32;*);
279 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1af2edd6107c5cf7dcff1a40bf878a9a7a">pthread_key_create</link>(<link linkend="__classes_2lib_2pthread_8h_1ae3576124dcee020fef884de07a48290c">pthread_key_t</link>&#32;*key,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*&#32;dest)(<emphasis role="keywordtype">void</emphasis>&#32;*));
280 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a9b51f8826d51d11e280d16d896ea2050">pthread_key_delete</link>(<link linkend="__classes_2lib_2pthread_8h_1ae3576124dcee020fef884de07a48290c">pthread_key_t</link>&#32;key);
281 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a118837985ccd3a829c518928ec32c1ac">pthread_getspecific</link>(<link linkend="__classes_2lib_2pthread_8h_1ae3576124dcee020fef884de07a48290c">pthread_key_t</link>&#32;key);
282 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a828266e605ec695f7a5b3096b486e70e">pthread_setspecific</link>(<link linkend="__classes_2lib_2pthread_8h_1ae3576124dcee020fef884de07a48290c">pthread_key_t</link>&#32;key,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_classvalue">value</link>);
283 
284 <link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a2fdeabafeb422282ee687c9361dde092">pthread_self</link>(<emphasis role="keywordtype">void</emphasis>);
285 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ad3e2169d99cca6716f63e7a6a815e1f9">pthread_once</link>(<link linkend="__classes_2lib_2pthread_8h_1a4be465d5b536b183b4a9a6e56d67eab4">pthread_once_t</link>&#32;*o,&#32;<emphasis role="keywordtype">void</emphasis>&#32;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func</link>)(<emphasis role="keywordtype">void</emphasis>));
286 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a0dfff655a4b5cc5d4b01c56e1c8ba08a">pthread_testcancel</link>(<emphasis role="keywordtype">void</emphasis>);
287 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a3bfce84d4d4fd73d4ae6793135412178">pthread_equal</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t1,&#32;<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t2);
288 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae908993d5507a823938515589950b69c">pthread_tls_init</link>(<emphasis role="keywordtype">void</emphasis>);
289 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a21935f15dcd1dd7afd62a7f7cbbe33e0">_pthread_cleanup_dest</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t);
290 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ac06f56ffc1deb5d3b8aa34a3bc7a08a5">pthread_get_concurrency</link>(<emphasis role="keywordtype">int</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
291 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a68ab02ab7e3ae454c530323a0f8da22e">pthread_set_concurrency</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
292 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1afad0f29df9eb6f3e86301718bbb6316a">pthread_exit</link>(<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
293 <emphasis role="keywordtype">void</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ac3dbcac124ed2e2b7609246a938b7fe1">_pthread_invoke_cancel</link>(<emphasis role="keywordtype">void</emphasis>);
294 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ad9b32625e1e5bfb65deae5b61b71ecc8">pthread_cancel</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t);
295 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a749ba3392059e98863a0b2b035617367">pthread_kill</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t,&#32;<emphasis role="keywordtype">int</emphasis>&#32;sig);
296 <emphasis role="keywordtype">unsigned</emphasis>&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1aa1770937fe67ca9acae751b2eb444c35">_pthread_get_state</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;flag);
297 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a7d623235cf8a15f8be1d6cea34a36320">_pthread_set_state</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;flag,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
298 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a24ad4b1de7181072166ae53e81deb1dd">pthread_setcancelstate</link>(<emphasis role="keywordtype">int</emphasis>&#32;state,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*oldstate);
299 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a41f88b756d35a184d2bf1e071c40b462">pthread_setcanceltype</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*oldtype);
300 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a15c1feba54c6a4e13a5ca2b15fae9a46">pthread_create_wrapper</link>(<emphasis role="keywordtype">void</emphasis>&#32;*args);
301 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab3431d2d45bf174acdcecde5dac5839c">pthread_create</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;*th,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*(*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a18ae3ab36a07e388833b568cfdfa90c8">func</link>)(<emphasis role="keywordtype">void</emphasis>&#32;*),&#32;<emphasis role="keywordtype">void</emphasis>&#32;*arg);
302 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a25b888453922185b872e6c87aee3e214">pthread_join</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t,&#32;<emphasis role="keywordtype">void</emphasis>&#32;**<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
303 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1afd57474cd16075a818e924f5435dd1fe">pthread_detach</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t);
304 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1adfb31579ce822409c3bb9da64dcd0200">pthread_setname_np</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;thread,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>);
305 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a41cfaefbf9484183cb5c80c880c5f38c">pthread_getname_np</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;thread,&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a14d7642df08c5cb68e4fb90cc8a73509">name</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
306 
307 
308 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a8b0236a54b1a552da75d9462a433cc9a">pthread_rwlock_init</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*rwlock_,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab478b207d8ef5f2b3f4be9fcfbe6fbf9">pthread_rwlockattr_t</link>&#32;*attr);
309 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1aaa05ecbfd49263978ba98c33d3dcd3bd">pthread_rwlock_wrlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*l);
310 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a6cd2f2210af793294019b4eac35557f7">pthread_rwlock_timedwrlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*rwlock,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*ts);
311 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a934badca344e311494bc98ce9ecc418f">pthread_rwlock_rdlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*l);
312 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a3ae5ac44425416f02e5e64cd55fd4f86">pthread_rwlock_timedrdlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*l,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*ts);
313 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a0546e1f061a93e3e48db8774c2d993df">pthread_rwlock_unlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*l);
314 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ad38420683b0f21ebbb3837be26657d64">pthread_rwlock_tryrdlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*l);
315 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a2fb5f696689de783c6d741f4a68a230e">pthread_rwlock_trywrlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*l);
316 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a1d53ef6e2f7cec1cfee4dc1c09677bef">pthread_rwlock_destroy</link>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a5a5e5bc818ac67556b101a770e22ea41">pthread_rwlock_t</link>&#32;*l);
317 
318 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a9ae7756a4d025b42386fc1835efa6975">pthread_cond_init</link>(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*cv,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
319 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a8855d5ab1f81a02c4e4c7e708bfe3ae6">pthread_cond_destroy</link>(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*cv);
320 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4ba961fe959f9d2c2770e822ae51184f">pthread_cond_signal</link>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*cv);
321 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1abfd2c6ee1cd83fe2e556c696bd140e2f">pthread_cond_broadcast</link>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*cv);
322 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a9eb8d1c21f8f6da4114b33e12dfcd069">pthread_cond_wait</link>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*cv,&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*external_mutex);
323 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1adce004fdb8b6813b22e5e1ee1b2bf923">pthread_cond_timedwait</link>(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*cv,&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*external_mutex,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*t);
324 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a400339df0751a0d37fec4eae4e3581cd">pthread_cond_timedwait_relative_np</link>(<link linkend="__classes_2lib_2pthread_8h_1a889b578630430003a00009eb9bc682f1">pthread_cond_t</link>&#32;*cv,&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*external_mutex,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*t);
325 
326 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4ca880f3d1afbb33cea07c60934cc49a">pthread_mutex_lock</link>(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*m);
327 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1aca21274598f7fad8d0fd8bef4eab9608">pthread_mutex_timedlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*m,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*ts);
328 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a7e057138b5fb17da713695ebb25732e1">pthread_mutex_unlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*m);
329 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a9c7d6c19b9d517190ecd1f4d6fd27d7f">pthread_mutex_trylock</link>(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*m);
330 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a766f78ccf9846265c8f379ee92852a2c">pthread_mutex_init</link>(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*m,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
331 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a058f31bed045ef535cb482d45ccaebec">pthread_mutex_destroy</link>(<link linkend="__classes_2lib_2pthread_8h_1a50d9d56f346ce3e4ce711d7d1acea193">pthread_mutex_t</link>&#32;*m);
332 
333 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1aca74e3a5cca425ca86099a40202bd202">pthread_barrier_destroy</link>(<link linkend="__classes_2lib_2pthread_8h_1a97b11306d02a9507ed1d6c7cdc06384e">pthread_barrier_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
334 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae924e8cd2e7c98939a889b5692ee6cab">pthread_barrier_init</link>(<link linkend="__classes_2lib_2pthread_8h_1a97b11306d02a9507ed1d6c7cdc06384e">pthread_barrier_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*attr,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>);
335 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a2c037b0958a72d44210f039af37868a9">pthread_barrier_wait</link>(<link linkend="__classes_2lib_2pthread_8h_1a97b11306d02a9507ed1d6c7cdc06384e">pthread_barrier_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a6eba317e3cf44d6d26c04a5a8f197dcb">b</link>);
336 
337 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a7b2614b4434a16abf7d600b978c16593">pthread_spin_init</link>(<link linkend="__classes_2lib_2pthread_8h_1a8014fe324aecf71a1c44f2ae8be4c796">pthread_spinlock_t</link>&#32;*l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;pshared);
338 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a079ca5962f3761b95cd933f41c8a6422">pthread_spin_destroy</link>(<link linkend="__classes_2lib_2pthread_8h_1a8014fe324aecf71a1c44f2ae8be4c796">pthread_spinlock_t</link>&#32;*l);
339 <emphasis role="comment">/*&#32;No-fair&#32;spinlock&#32;due&#32;to&#32;lack&#32;of&#32;knowledge&#32;of&#32;thread&#32;number.&#32;&#32;*/</emphasis>
340 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a3bf0cfe080e7125ec65309ef9b26bd77">pthread_spin_lock</link>(<link linkend="__classes_2lib_2pthread_8h_1a8014fe324aecf71a1c44f2ae8be4c796">pthread_spinlock_t</link>&#32;*l);
341 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a78aec2f8ee27093b74deb1a64f120c15">pthread_spin_trylock</link>(<link linkend="__classes_2lib_2pthread_8h_1a8014fe324aecf71a1c44f2ae8be4c796">pthread_spinlock_t</link>&#32;*l);
342 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a0b3a41f95a2d99430490fb5aceeacc53">pthread_spin_unlock</link>(<link linkend="__classes_2lib_2pthread_8h_1a8014fe324aecf71a1c44f2ae8be4c796">pthread_spinlock_t</link>&#32;*l);
343 
344 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a0ef09cf581ad2a5eb9617503886be618">pthread_attr_init</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr);
345 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae14ebd7965a1b57d97be6dc63c267ade">pthread_attr_destroy</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr);
346 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a2d2bf5c16432171c8b78aa63a879efcf">pthread_attr_setdetachstate</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;flag);
347 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a98345320e03353adfe4d5df55eec1759">pthread_attr_getdetachstate</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*flag);
348 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a6ae39f3c6ef2eaf922e9f29230c120ec">pthread_attr_setinheritsched</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;flag);
349 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a43570f550aa10203f18dd54e84ea2646">pthread_attr_getinheritsched</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*flag);
350 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a56865a0e4b8807119e9ee01737ccb237">pthread_attr_setscope</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;flag);
351 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ad579d16a8ca69ef1a895fc77a1c97c74">pthread_attr_getscope</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*flag);
352 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1af63580e116bd1a2a6d233cdbdf57af9d">pthread_attr_getstack</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;**stack,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
353 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a617505a212ce1920f11b2c1db6673d6b">pthread_attr_setstack</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*stack,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
354 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab5ceb1f3d3221e5a343b177d25b7c604">pthread_attr_getstackaddr</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;**stack);
355 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab9122afa80368a1661932090ff8281c2">pthread_attr_setstackaddr</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*stack);
356 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1adba842f9211981ea42b91c885d5f4517">pthread_attr_getstacksize</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
357 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a5647e73d03fb44da6ddf55207d795d76">pthread_attr_setstacksize</link>(<link linkend="_structpthread__attr__t">pthread_attr_t</link>&#32;*attr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
358 
359 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ab890b953e5712cbc68601993097ba87c">pthread_mutexattr_init</link>(<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
360 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1acad46d5d742884ab327f165012ad6d31">pthread_mutexattr_destroy</link>(<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
361 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a2601009fc70b6dc322260b369f475871">pthread_mutexattr_gettype</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
362 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ad6de9a4bb74d0cd006d8b9dd4e22ba8b">pthread_mutexattr_settype</link>(<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
363 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1af432217ccf445c654c9fe74340138984">pthread_mutexattr_getpshared</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
364 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4f284016f1f5a2c5c231bbb19494b7f9">pthread_mutexattr_setpshared</link>(<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
365 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a53970e28a03899f410cd94c45e294b27">pthread_mutexattr_getprotocol</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
366 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a5f76c64fae8aeddbe2c080b2b61baa69">pthread_mutexattr_setprotocol</link>(<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>);
367 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1afebf429948c5d67366b2bb89e2c473ee">pthread_mutexattr_getprioceiling</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*&#32;prio);
368 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1aa401e6cd8bb5714a17c6d7698a1f25fd">pthread_mutexattr_setprioceiling</link>(<link linkend="__classes_2lib_2pthread_8h_1ae27e7f66c70f4c171ba28f05d288070e">pthread_mutexattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;prio);
369 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a83862b978f09eda3ae88aaa79bef8c91">pthread_getconcurrency</link>(<emphasis role="keywordtype">void</emphasis>);
370 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1aea6126c432271d7fbf42b70b9830850a">pthread_setconcurrency</link>(<emphasis role="keywordtype">int</emphasis>&#32;new_level);
371 
372 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4baf19e242b0ea6dabf0823fe841e573">pthread_condattr_destroy</link>(<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
373 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1aec3deff5e45a451f3eb4f099ce1c03a2">pthread_condattr_init</link>(<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
374 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a836ca4246a84c7399b9e9f7b6ae25549">pthread_condattr_getpshared</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*s);
375 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a5ae9b003b51bc9be3a8e0a9817102686">pthread_condattr_setpshared</link>(<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;s);
376 
377 <emphasis role="preprocessor">#ifndef&#32;__clockid_t_defined</emphasis>
378 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a6dcac6a5cea7d9c842145e1444d91e22">clockid_t</link>;
379 <emphasis role="preprocessor">#define&#32;__clockid_t_defined&#32;1</emphasis>
380 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">/*&#32;__clockid_t_defined&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
381 
382 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1af32f25fab7d501debebd11cdb51f8205">pthread_condattr_getclock</link>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>&#32;*attr,
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a6dcac6a5cea7d9c842145e1444d91e22">clockid_t</link>&#32;*clock_id);
384 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a24ac9d6639f17af40ca1623ac571f4d7">pthread_condattr_setclock</link>(<link linkend="__classes_2lib_2pthread_8h_1a598223d4c21c5ed7d2391c33c8346cd7">pthread_condattr_t</link>&#32;*attr,
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a6dcac6a5cea7d9c842145e1444d91e22">clockid_t</link>&#32;clock_id);
386 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a972b229090cad05d2be981d08fe6efdc">__pthread_clock_nanosleep</link>(<link linkend="__classes_2lib_2pthread_8h_1a6dcac6a5cea7d9c842145e1444d91e22">clockid_t</link>&#32;clock_id,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*rqtp,&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*rmtp);
387 
388 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1acf60e538ef7e4ab5729e6156520148c5">pthread_barrierattr_init</link>(<emphasis role="keywordtype">void</emphasis>&#32;**attr);
389 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a90b7b79950b7091c107eadf60437e82f">pthread_barrierattr_destroy</link>(<emphasis role="keywordtype">void</emphasis>&#32;**attr);
390 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a9cb86cfb5f7a1c62a1f08037b024c6b6">pthread_barrierattr_setpshared</link>(<emphasis role="keywordtype">void</emphasis>&#32;**attr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;s);
391 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a50d28249042398b8e00ece6176e099d1">pthread_barrierattr_getpshared</link>(<emphasis role="keywordtype">void</emphasis>&#32;**attr,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*s);
392 
393 <emphasis role="comment">/*&#32;Private&#32;extensions&#32;for&#32;analysis&#32;and&#32;internal&#32;use.&#32;&#32;*/</emphasis>
394 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct__pthread__cleanup">_pthread_cleanup</link>&#32;**&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1add685e25f063750fecead852c7299ce5">pthread_getclean</link>&#32;(<emphasis role="keywordtype">void</emphasis>);
395 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a8c63e4e207904d994fff58f3f7c4a0d9">pthread_gethandle</link>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t);
396 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a243499eeafcf5d37b99d40b148d22cbd">pthread_getevent</link>&#32;(<emphasis role="keywordtype">void</emphasis>);
397 
398 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a46abebb4a3dc683a5ce3b8280979fda6">_pthread_rel_time_in_ms</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*ts);
399 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a912d0d532916985dc8b38814a788bad2">_pthread_time_in_ms</link>(<emphasis role="keywordtype">void</emphasis>);
400 <emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a536325afc3bfe8e010fbc28a61b61fc6">_pthread_time_in_ms_from_timespec</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">struct</emphasis>&#32;timespec&#32;*ts);
401 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a4befe3e1e4ff892e95a1a2e94779f88f">_pthread_tryjoin</link>&#32;(<link linkend="__classes_2lib_2pthread_8h_1a5a968e6376296a133fae83572d4b2efc">pthread_t</link>&#32;t,&#32;<emphasis role="keywordtype">void</emphasis>&#32;**<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>);
402 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a52661e9058b24130b299109c82e1e2b9">pthread_rwlockattr_destroy</link>(<link linkend="__classes_2lib_2pthread_8h_1ab478b207d8ef5f2b3f4be9fcfbe6fbf9">pthread_rwlockattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
403 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a7ff08784db76993ca1e8d43d42c00ac0">pthread_rwlockattr_getpshared</link>(<link linkend="__classes_2lib_2pthread_8h_1ab478b207d8ef5f2b3f4be9fcfbe6fbf9">pthread_rwlockattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;*s);
404 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1ac766f2a3449960b3f7e1346f9157ec5e">pthread_rwlockattr_init</link>(<link linkend="__classes_2lib_2pthread_8h_1ab478b207d8ef5f2b3f4be9fcfbe6fbf9">pthread_rwlockattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>);
405 <emphasis role="keywordtype">int</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread_8h_1a322901d273e2a229ee61eb5dd3f69b92">WINPTHREAD_API</link>&#32;<link linkend="__classes_2lib_2pthread_8h_1a73a87c0e21c431639dd7333d8198185f">pthread_rwlockattr_setpshared</link>(<link linkend="__classes_2lib_2pthread_8h_1ab478b207d8ef5f2b3f4be9fcfbe6fbf9">pthread_rwlockattr_t</link>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;s);
406 
407 <emphasis role="preprocessor">#ifndef&#32;SIG_BLOCK</emphasis>
408 <emphasis role="preprocessor">#define&#32;SIG_BLOCK&#32;0</emphasis>
409 <emphasis role="preprocessor">#endif</emphasis>
410 <emphasis role="preprocessor">#ifndef&#32;SIG_UNBLOCK</emphasis>
411 <emphasis role="preprocessor">#define&#32;SIG_UNBLOCK&#32;1</emphasis>
412 <emphasis role="preprocessor">#endif</emphasis>
413 <emphasis role="preprocessor">#ifndef&#32;SIG_SETMASK</emphasis>
414 <emphasis role="preprocessor">#define&#32;SIG_SETMASK&#32;2</emphasis>
415 <emphasis role="preprocessor">#endif</emphasis>
416 
417 <emphasis role="preprocessor">#include&#32;&lt;<link linkend="__old_2_classes_2lib_2pthread__unistd_8h">pthread_unistd.h</link>&gt;</emphasis>
418 
419 <emphasis role="preprocessor">#undef&#32;_POSIX_THREAD_DESTRUCTOR_ITERATIONS</emphasis>
420 <emphasis role="preprocessor">#define&#32;_POSIX_THREAD_DESTRUCTOR_ITERATIONS&#32;&#32;&#32;&#32;&#32;PTHREAD_DESTRUCTOR_ITERATIONS</emphasis>
421 
422 <emphasis role="preprocessor">#undef&#32;_POSIX_THREAD_KEYS_MAX</emphasis>
423 <emphasis role="preprocessor">#define&#32;_POSIX_THREAD_KEYS_MAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PTHREAD_KEYS_MAX</emphasis>
424 
425 <emphasis role="preprocessor">#undef&#32;PTHREAD_THREADS_MAX</emphasis>
426 <emphasis role="preprocessor">#define&#32;PTHREAD_THREADS_MAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2019</emphasis>
427 
428 <emphasis role="preprocessor">#undef&#32;_POSIX_SEM_NSEMS_MAX</emphasis>
429 <emphasis role="preprocessor">#define&#32;_POSIX_SEM_NSEMS_MAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;256</emphasis>
430 
431 <emphasis role="preprocessor">#undef&#32;SEM_NSEMS_MAX</emphasis>
432 <emphasis role="preprocessor">#define&#32;SEM_NSEMS_MAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1024</emphasis>
433 
434 <emphasis role="comment">/*&#32;Wrap&#32;cancellation&#32;points.&#32;&#32;*/</emphasis>
435 <emphasis role="preprocessor">#ifdef&#32;__WINPTRHEAD_ENABLE_WRAP_API</emphasis>
436 <emphasis role="preprocessor">#define&#32;accept(...)&#32;(pthread_testcancel(),&#32;accept(__VA_ARGS__))</emphasis>
437 <emphasis role="preprocessor">#define&#32;aio_suspend(...)&#32;(pthread_testcancel(),&#32;aio_suspend(__VA_ARGS__))</emphasis>
438 <emphasis role="preprocessor">#define&#32;clock_nanosleep(...)&#32;(pthread_testcancel(),&#32;clock_nanosleep(__VA_ARGS__))</emphasis>
439 <emphasis role="preprocessor">#define&#32;close(...)&#32;(pthread_testcancel(),&#32;close(__VA_ARGS__))</emphasis>
440 <emphasis role="preprocessor">#define&#32;connect(...)&#32;(pthread_testcancel(),&#32;connect(__VA_ARGS__))</emphasis>
441 <emphasis role="preprocessor">#define&#32;creat(...)&#32;(pthread_testcancel(),&#32;creat(__VA_ARGS__))</emphasis>
442 <emphasis role="preprocessor">#define&#32;fcntl(...)&#32;(pthread_testcancel(),&#32;fcntl(__VA_ARGS__))</emphasis>
443 <emphasis role="preprocessor">#define&#32;fdatasync(...)&#32;(pthread_testcancel(),&#32;fdatasync(__VA_ARGS__))</emphasis>
444 <emphasis role="preprocessor">#define&#32;fsync(...)&#32;(pthread_testcancel(),&#32;fsync(__VA_ARGS__))</emphasis>
445 <emphasis role="preprocessor">#define&#32;getmsg(...)&#32;(pthread_testcancel(),&#32;getmsg(__VA_ARGS__))</emphasis>
446 <emphasis role="preprocessor">#define&#32;getpmsg(...)&#32;(pthread_testcancel(),&#32;getpmsg(__VA_ARGS__))</emphasis>
447 <emphasis role="preprocessor">#define&#32;lockf(...)&#32;(pthread_testcancel(),&#32;lockf(__VA_ARGS__))</emphasis>
448 <emphasis role="preprocessor">#define&#32;mg_receive(...)&#32;(pthread_testcancel(),&#32;mg_receive(__VA_ARGS__))</emphasis>
449 <emphasis role="preprocessor">#define&#32;mg_send(...)&#32;(pthread_testcancel(),&#32;mg_send(__VA_ARGS__))</emphasis>
450 <emphasis role="preprocessor">#define&#32;mg_timedreceive(...)&#32;(pthread_testcancel(),&#32;mg_timedreceive(__VA_ARGS__))</emphasis>
451 <emphasis role="preprocessor">#define&#32;mg_timessend(...)&#32;(pthread_testcancel(),&#32;mg_timedsend(__VA_ARGS__))</emphasis>
452 <emphasis role="preprocessor">#define&#32;msgrcv(...)&#32;(pthread_testcancel(),&#32;msgrecv(__VA_ARGS__))</emphasis>
453 <emphasis role="preprocessor">#define&#32;msgsnd(...)&#32;(pthread_testcancel(),&#32;msgsnd(__VA_ARGS__))</emphasis>
454 <emphasis role="preprocessor">#define&#32;msync(...)&#32;(pthread_testcancel(),&#32;msync(__VA_ARGS__))</emphasis>
455 <emphasis role="preprocessor">#define&#32;nanosleep(...)&#32;(pthread_testcancel(),&#32;nanosleep(__VA_ARGS__))</emphasis>
456 <emphasis role="preprocessor">#define&#32;open(...)&#32;(pthread_testcancel(),&#32;open(__VA_ARGS__))</emphasis>
457 <emphasis role="preprocessor">#define&#32;pause(...)&#32;(pthread_testcancel(),&#32;pause(__VA_ARGS__))</emphasis>
458 <emphasis role="preprocessor">#define&#32;poll(...)&#32;(pthread_testcancel(),&#32;poll(__VA_ARGS__))</emphasis>
459 <emphasis role="preprocessor">#define&#32;pread(...)&#32;(pthread_testcancel(),&#32;pread(__VA_ARGS__))</emphasis>
460 <emphasis role="preprocessor">#define&#32;pselect(...)&#32;(pthread_testcancel(),&#32;pselect(__VA_ARGS__))</emphasis>
461 <emphasis role="preprocessor">#define&#32;putmsg(...)&#32;(pthread_testcancel(),&#32;putmsg(__VA_ARGS__))</emphasis>
462 <emphasis role="preprocessor">#define&#32;putpmsg(...)&#32;(pthread_testcancel(),&#32;putpmsg(__VA_ARGS__))</emphasis>
463 <emphasis role="preprocessor">#define&#32;pwrite(...)&#32;(pthread_testcancel(),&#32;pwrite(__VA_ARGS__))</emphasis>
464 <emphasis role="preprocessor">#define&#32;read(...)&#32;(pthread_testcancel(),&#32;read(__VA_ARGS__))</emphasis>
465 <emphasis role="preprocessor">#define&#32;readv(...)&#32;(pthread_testcancel(),&#32;readv(__VA_ARGS__))</emphasis>
466 <emphasis role="preprocessor">#define&#32;recv(...)&#32;(pthread_testcancel(),&#32;recv(__VA_ARGS__))</emphasis>
467 <emphasis role="preprocessor">#define&#32;recvfrom(...)&#32;(pthread_testcancel(),&#32;recvfrom(__VA_ARGS__))</emphasis>
468 <emphasis role="preprocessor">#define&#32;recvmsg(...)&#32;(pthread_testcancel(),&#32;recvmsg(__VA_ARGS__))</emphasis>
469 <emphasis role="preprocessor">#define&#32;select(...)&#32;(pthread_testcancel(),&#32;select(__VA_ARGS__))</emphasis>
470 <emphasis role="preprocessor">#define&#32;sem_timedwait(...)&#32;(pthread_testcancel(),&#32;sem_timedwait(__VA_ARGS__))</emphasis>
471 <emphasis role="preprocessor">#define&#32;sem_wait(...)&#32;(pthread_testcancel(),&#32;sem_wait(__VA_ARGS__))</emphasis>
472 <emphasis role="preprocessor">#define&#32;send(...)&#32;(pthread_testcancel(),&#32;send(__VA_ARGS__))</emphasis>
473 <emphasis role="preprocessor">#define&#32;sendmsg(...)&#32;(pthread_testcancel(),&#32;sendmsg(__VA_ARGS__))</emphasis>
474 <emphasis role="preprocessor">#define&#32;sendto(...)&#32;(pthread_testcancel(),&#32;sendto(__VA_ARGS__))</emphasis>
475 <emphasis role="preprocessor">#define&#32;sigpause(...)&#32;(pthread_testcancel(),&#32;sigpause(__VA_ARGS__))</emphasis>
476 <emphasis role="preprocessor">#define&#32;sigsuspend(...)&#32;(pthread_testcancel(),&#32;sigsuspend(__VA_ARGS__))</emphasis>
477 <emphasis role="preprocessor">#define&#32;sigwait(...)&#32;(pthread_testcancel(),&#32;sigwait(__VA_ARGS__))</emphasis>
478 <emphasis role="preprocessor">#define&#32;sigwaitinfo(...)&#32;(pthread_testcancel(),&#32;sigwaitinfo(__VA_ARGS__))</emphasis>
479 <emphasis role="preprocessor">#define&#32;sleep(...)&#32;(pthread_testcancel(),&#32;sleep(__VA_ARGS__))</emphasis>
480 <emphasis role="comment">//#define&#32;Sleep(...)&#32;(pthread_testcancel(),&#32;Sleep(__VA_ARGS__))</emphasis>
481 <emphasis role="preprocessor">#define&#32;system(...)&#32;(pthread_testcancel(),&#32;system(__VA_ARGS__))</emphasis>
482 <emphasis role="preprocessor">#define&#32;access(...)&#32;(pthread_testcancel(),&#32;access(__VA_ARGS__))</emphasis>
483 <emphasis role="preprocessor">#define&#32;asctime(...)&#32;(pthread_testcancel(),&#32;asctime(__VA_ARGS__))</emphasis>
484 <emphasis role="preprocessor">#define&#32;catclose(...)&#32;(pthread_testcancel(),&#32;catclose(__VA_ARGS__))</emphasis>
485 <emphasis role="preprocessor">#define&#32;catgets(...)&#32;(pthread_testcancel(),&#32;catgets(__VA_ARGS__))</emphasis>
486 <emphasis role="preprocessor">#define&#32;catopen(...)&#32;(pthread_testcancel(),&#32;catopen(__VA_ARGS__))</emphasis>
487 <emphasis role="preprocessor">#define&#32;closedir(...)&#32;(pthread_testcancel(),&#32;closedir(__VA_ARGS__))</emphasis>
488 <emphasis role="preprocessor">#define&#32;closelog(...)&#32;(pthread_testcancel(),&#32;closelog(__VA_ARGS__))</emphasis>
489 <emphasis role="preprocessor">#define&#32;ctermid(...)&#32;(pthread_testcancel(),&#32;ctermid(__VA_ARGS__))</emphasis>
490 <emphasis role="preprocessor">#define&#32;ctime(...)&#32;(pthread_testcancel(),&#32;ctime(__VA_ARGS__))</emphasis>
491 <emphasis role="preprocessor">#define&#32;dbm_close(...)&#32;(pthread_testcancel(),&#32;dbm_close(__VA_ARGS__))</emphasis>
492 <emphasis role="preprocessor">#define&#32;dbm_delete(...)&#32;(pthread_testcancel(),&#32;dbm_delete(__VA_ARGS__))</emphasis>
493 <emphasis role="preprocessor">#define&#32;dbm_fetch(...)&#32;(pthread_testcancel(),&#32;dbm_fetch(__VA_ARGS__))</emphasis>
494 <emphasis role="preprocessor">#define&#32;dbm_nextkey(...)&#32;(pthread_testcancel(),&#32;dbm_nextkey(__VA_ARGS__))</emphasis>
495 <emphasis role="preprocessor">#define&#32;dbm_open(...)&#32;(pthread_testcancel(),&#32;dbm_open(__VA_ARGS__))</emphasis>
496 <emphasis role="preprocessor">#define&#32;dbm_store(...)&#32;(pthread_testcancel(),&#32;dbm_store(__VA_ARGS__))</emphasis>
497 <emphasis role="preprocessor">#define&#32;dlclose(...)&#32;(pthread_testcancel(),&#32;dlclose(__VA_ARGS__))</emphasis>
498 <emphasis role="preprocessor">#define&#32;dlopen(...)&#32;(pthread_testcancel(),&#32;dlopen(__VA_ARGS__))</emphasis>
499 <emphasis role="preprocessor">#define&#32;endgrent(...)&#32;(pthread_testcancel(),&#32;endgrent(__VA_ARGS__))</emphasis>
500 <emphasis role="preprocessor">#define&#32;endhostent(...)&#32;(pthread_testcancel(),&#32;endhostent(__VA_ARGS__))</emphasis>
501 <emphasis role="preprocessor">#define&#32;endnetent(...)&#32;(pthread_testcancel(),&#32;endnetent(__VA_ARGS__))</emphasis>
502 <emphasis role="preprocessor">#define&#32;endprotoent(...)&#32;(pthread_testcancel(),&#32;endprotoend(__VA_ARGS__))</emphasis>
503 <emphasis role="preprocessor">#define&#32;endpwent(...)&#32;(pthread_testcancel(),&#32;endpwent(__VA_ARGS__))</emphasis>
504 <emphasis role="preprocessor">#define&#32;endservent(...)&#32;(pthread_testcancel(),&#32;endservent(__VA_ARGS__))</emphasis>
505 <emphasis role="preprocessor">#define&#32;endutxent(...)&#32;(pthread_testcancel(),&#32;endutxent(__VA_ARGS__))</emphasis>
506 <emphasis role="preprocessor">#define&#32;fclose(...)&#32;(pthread_testcancel(),&#32;fclose(__VA_ARGS__))</emphasis>
507 <emphasis role="preprocessor">#define&#32;fflush(...)&#32;(pthread_testcancel(),&#32;fflush(__VA_ARGS__))</emphasis>
508 <emphasis role="preprocessor">#define&#32;fgetc(...)&#32;(pthread_testcancel(),&#32;fgetc(__VA_ARGS__))</emphasis>
509 <emphasis role="preprocessor">#define&#32;fgetpos(...)&#32;(pthread_testcancel(),&#32;fgetpos(__VA_ARGS__))</emphasis>
510 <emphasis role="preprocessor">#define&#32;fgets(...)&#32;(pthread_testcancel(),&#32;fgets(__VA_ARGS__))</emphasis>
511 <emphasis role="preprocessor">#define&#32;fgetwc(...)&#32;(pthread_testcancel(),&#32;fgetwc(__VA_ARGS__))</emphasis>
512 <emphasis role="preprocessor">#define&#32;fgetws(...)&#32;(pthread_testcancel(),&#32;fgetws(__VA_ARGS__))</emphasis>
513 <emphasis role="preprocessor">#define&#32;fmtmsg(...)&#32;(pthread_testcancel(),&#32;fmtmsg(__VA_ARGS__))</emphasis>
514 <emphasis role="preprocessor">#define&#32;fopen(...)&#32;(pthread_testcancel(),&#32;fopen(__VA_ARGS__))</emphasis>
515 <emphasis role="preprocessor">#define&#32;fpathconf(...)&#32;(pthread_testcancel(),&#32;fpathconf(__VA_ARGS__))</emphasis>
516 <emphasis role="preprocessor">#define&#32;fprintf(...)&#32;(pthread_testcancel(),&#32;fprintf(__VA_ARGS__))</emphasis>
517 <emphasis role="preprocessor">#define&#32;fputc(...)&#32;(pthread_testcancel(),&#32;fputc(__VA_ARGS__))</emphasis>
518 <emphasis role="preprocessor">#define&#32;fputs(...)&#32;(pthread_testcancel(),&#32;fputs(__VA_ARGS__))</emphasis>
519 <emphasis role="preprocessor">#define&#32;fputwc(...)&#32;(pthread_testcancel(),&#32;fputwc(__VA_ARGS__))</emphasis>
520 <emphasis role="preprocessor">#define&#32;fputws(...)&#32;(pthread_testcancel(),&#32;fputws(__VA_ARGS__))</emphasis>
521 <emphasis role="preprocessor">#define&#32;fread(...)&#32;(pthread_testcancel(),&#32;fread(__VA_ARGS__))</emphasis>
522 <emphasis role="preprocessor">#define&#32;freopen(...)&#32;(pthread_testcancel(),&#32;freopen(__VA_ARGS__))</emphasis>
523 <emphasis role="preprocessor">#define&#32;fscanf(...)&#32;(pthread_testcancel(),&#32;fscanf(__VA_ARGS__))</emphasis>
524 <emphasis role="preprocessor">#define&#32;fseek(...)&#32;(pthread_testcancel(),&#32;fseek(__VA_ARGS__))</emphasis>
525 <emphasis role="preprocessor">#define&#32;fseeko(...)&#32;(pthread_testcancel(),&#32;fseeko(__VA_ARGS__))</emphasis>
526 <emphasis role="preprocessor">#define&#32;fsetpos(...)&#32;(pthread_testcancel(),&#32;fsetpos(__VA_ARGS__))</emphasis>
527 <emphasis role="preprocessor">#define&#32;fstat(...)&#32;(pthread_testcancel(),&#32;fstat(__VA_ARGS__))</emphasis>
528 <emphasis role="preprocessor">#define&#32;ftell(...)&#32;(pthread_testcancel(),&#32;ftell(__VA_ARGS__))</emphasis>
529 <emphasis role="preprocessor">#define&#32;ftello(...)&#32;(pthread_testcancel(),&#32;ftello(__VA_ARGS__))</emphasis>
530 <emphasis role="preprocessor">#define&#32;ftw(...)&#32;(pthread_testcancel(),&#32;ftw(__VA_ARGS__))</emphasis>
531 <emphasis role="preprocessor">#define&#32;fwprintf(...)&#32;(pthread_testcancel(),&#32;fwprintf(__VA_ARGS__))</emphasis>
532 <emphasis role="preprocessor">#define&#32;fwrite(...)&#32;(pthread_testcancel(),&#32;fwrite(__VA_ARGS__))</emphasis>
533 <emphasis role="preprocessor">#define&#32;fwscanf(...)&#32;(pthread_testcancel(),&#32;fwscanf(__VA_ARGS__))</emphasis>
534 <emphasis role="preprocessor">#define&#32;getaddrinfo(...)&#32;(pthread_testcancel(),&#32;getaddrinfo(__VA_ARGS__))</emphasis>
535 <emphasis role="preprocessor">#define&#32;getc(...)&#32;(pthread_testcancel(),&#32;getc(__VA_ARGS__))</emphasis>
536 <emphasis role="preprocessor">#define&#32;getc_unlocked(...)&#32;(pthread_testcancel(),&#32;getc_unlocked(__VA_ARGS__))</emphasis>
537 <emphasis role="preprocessor">#define&#32;getchar(...)&#32;(pthread_testcancel(),&#32;getchar(__VA_ARGS__))</emphasis>
538 <emphasis role="preprocessor">#define&#32;getchar_unlocked(...)&#32;(pthread_testcancel(),&#32;getchar_unlocked(__VA_ARGS__))</emphasis>
539 <emphasis role="preprocessor">#define&#32;getcwd(...)&#32;(pthread_testcancel(),&#32;getcwd(__VA_ARGS__))</emphasis>
540 <emphasis role="preprocessor">#define&#32;getdate(...)&#32;(pthread_testcancel(),&#32;getdate(__VA_ARGS__))</emphasis>
541 <emphasis role="preprocessor">#define&#32;getgrent(...)&#32;(pthread_testcancel(),&#32;getgrent(__VA_ARGS__))</emphasis>
542 <emphasis role="preprocessor">#define&#32;getgrgid(...)&#32;(pthread_testcancel(),&#32;getgrgid(__VA_ARGS__))</emphasis>
543 <emphasis role="preprocessor">#define&#32;getgrgid_r(...)&#32;(pthread_testcancel(),&#32;getgrgid_r(__VA_ARGS__))</emphasis>
544 <emphasis role="preprocessor">#define&#32;gergrnam(...)&#32;(pthread_testcancel(),&#32;getgrnam(__VA_ARGS__))</emphasis>
545 <emphasis role="preprocessor">#define&#32;getgrnam_r(...)&#32;(pthread_testcancel(),&#32;getgrnam_r(__VA_ARGS__))</emphasis>
546 <emphasis role="preprocessor">#define&#32;gethostbyaddr(...)&#32;(pthread_testcancel(),&#32;gethostbyaddr(__VA_ARGS__))</emphasis>
547 <emphasis role="preprocessor">#define&#32;gethostbyname(...)&#32;(pthread_testcancel(),&#32;gethostbyname(__VA_ARGS__))</emphasis>
548 <emphasis role="preprocessor">#define&#32;gethostent(...)&#32;(pthread_testcancel(),&#32;gethostent(__VA_ARGS__))</emphasis>
549 <emphasis role="preprocessor">#define&#32;gethostid(...)&#32;(pthread_testcancel(),&#32;gethostid(__VA_ARGS__))</emphasis>
550 <emphasis role="preprocessor">#define&#32;gethostname(...)&#32;(pthread_testcancel(),&#32;gethostname(__VA_ARGS__))</emphasis>
551 <emphasis role="preprocessor">#define&#32;getlogin(...)&#32;(pthread_testcancel(),&#32;getlogin(__VA_ARGS__))</emphasis>
552 <emphasis role="preprocessor">#define&#32;getlogin_r(...)&#32;(pthread_testcancel(),&#32;getlogin_r(__VA_ARGS__))</emphasis>
553 <emphasis role="preprocessor">#define&#32;getnameinfo(...)&#32;(pthread_testcancel(),&#32;getnameinfo(__VA_ARGS__))</emphasis>
554 <emphasis role="preprocessor">#define&#32;getnetbyaddr(...)&#32;(pthread_testcancel(),&#32;getnetbyaddr(__VA_ARGS__))</emphasis>
555 <emphasis role="preprocessor">#define&#32;getnetbyname(...)&#32;(pthread_testcancel(),&#32;getnetbyname(__VA_ARGS__))</emphasis>
556 <emphasis role="preprocessor">#define&#32;getnetent(...)&#32;(pthread_testcancel(),&#32;getnetent(__VA_ARGS__))</emphasis>
557 <emphasis role="preprocessor">#define&#32;getopt(...)&#32;(pthread_testcancel(),&#32;getopt(__VA_ARGS__))</emphasis>
558 <emphasis role="preprocessor">#define&#32;getprotobyname(...)&#32;(pthread_testcancel(),&#32;getprotobyname(__VA_ARGS__))</emphasis>
559 <emphasis role="preprocessor">#define&#32;getprotobynumber(...)&#32;(pthread_testcancel(),&#32;getprotobynumber(__VA_ARGS__))</emphasis>
560 <emphasis role="preprocessor">#define&#32;getprotoent(...)&#32;(pthread_testcancel(),&#32;getprotoent(__VA_ARGS__))</emphasis>
561 <emphasis role="preprocessor">#define&#32;getpwent(...)&#32;(pthread_testcancel(),&#32;getpwent(__VA_ARGS__))</emphasis>
562 <emphasis role="preprocessor">#define&#32;getpwnam(...)&#32;(pthread_testcancel(),&#32;getpwnam(__VA_ARGS__))</emphasis>
563 <emphasis role="preprocessor">#define&#32;getpwnam_r(...)&#32;(pthread_testcancel(),&#32;getpwnam_r(__VA_ARGS__))</emphasis>
564 <emphasis role="preprocessor">#define&#32;getpwuid(...)&#32;(pthread_testcancel(),&#32;getpwuid(__VA_ARGS__))</emphasis>
565 <emphasis role="preprocessor">#define&#32;getpwuid_r(...)&#32;(pthread_testcancel(),&#32;getpwuid_r(__VA_ARGS__))</emphasis>
566 <emphasis role="preprocessor">#define&#32;gets(...)&#32;(pthread_testcancel(),&#32;gets(__VA_ARGS__))</emphasis>
567 <emphasis role="preprocessor">#define&#32;getservbyname(...)&#32;(pthread_testcancel(),&#32;getservbyname(__VA_ARGS__))</emphasis>
568 <emphasis role="preprocessor">#define&#32;getservbyport(...)&#32;(pthread_testcancel(),&#32;getservbyport(__VA_ARGS__))</emphasis>
569 <emphasis role="preprocessor">#define&#32;getservent(...)&#32;(pthread_testcancel(),&#32;getservent(__VA_ARGS__))</emphasis>
570 <emphasis role="preprocessor">#define&#32;getutxent(...)&#32;(pthread_testcancel(),&#32;getutxent(__VA_ARGS__))</emphasis>
571 <emphasis role="preprocessor">#define&#32;getutxid(...)&#32;(pthread_testcancel(),&#32;getutxid(__VA_ARGS__))</emphasis>
572 <emphasis role="preprocessor">#define&#32;getutxline(...)&#32;(pthread_testcancel(),&#32;getutxline(__VA_ARGS__))</emphasis>
573 <emphasis role="preprocessor">#undef&#32;getwc</emphasis>
574 <emphasis role="preprocessor">#define&#32;getwc(...)&#32;(pthread_testcancel(),&#32;getwc(__VA_ARGS__))</emphasis>
575 <emphasis role="preprocessor">#undef&#32;getwchar</emphasis>
576 <emphasis role="preprocessor">#define&#32;getwchar(...)&#32;(pthread_testcancel(),&#32;getwchar(__VA_ARGS__))</emphasis>
577 <emphasis role="preprocessor">#define&#32;getwd(...)&#32;(pthread_testcancel(),&#32;getwd(__VA_ARGS__))</emphasis>
578 <emphasis role="preprocessor">#define&#32;glob(...)&#32;(pthread_testcancel(),&#32;glob(__VA_ARGS__))</emphasis>
579 <emphasis role="preprocessor">#define&#32;iconv_close(...)&#32;(pthread_testcancel(),&#32;iconv_close(__VA_ARGS__))</emphasis>
580 <emphasis role="preprocessor">#define&#32;iconv_open(...)&#32;(pthread_testcancel(),&#32;iconv_open(__VA_ARGS__))</emphasis>
581 <emphasis role="preprocessor">#define&#32;ioctl(...)&#32;(pthread_testcancel(),&#32;ioctl(__VA_ARGS__))</emphasis>
582 <emphasis role="preprocessor">#define&#32;link(...)&#32;(pthread_testcancel(),&#32;link(__VA_ARGS__))</emphasis>
583 <emphasis role="preprocessor">#define&#32;localtime(...)&#32;(pthread_testcancel(),&#32;localtime(__VA_ARGS__))</emphasis>
584 <emphasis role="preprocessor">#define&#32;lseek(...)&#32;(pthread_testcancel(),&#32;lseek(__VA_ARGS__))</emphasis>
585 <emphasis role="preprocessor">#define&#32;lstat(...)&#32;(pthread_testcancel(),&#32;lstat(__VA_ARGS__))</emphasis>
586 <emphasis role="preprocessor">#define&#32;mkstemp(...)&#32;(pthread_testcancel(),&#32;mkstemp(__VA_ARGS__))</emphasis>
587 <emphasis role="preprocessor">#define&#32;nftw(...)&#32;(pthread_testcancel(),&#32;nftw(__VA_ARGS__))</emphasis>
588 <emphasis role="preprocessor">#define&#32;opendir(...)&#32;(pthread_testcancel(),&#32;opendir(__VA_ARGS__))</emphasis>
589 <emphasis role="preprocessor">#define&#32;openlog(...)&#32;(pthread_testcancel(),&#32;openlog(__VA_ARGS__))</emphasis>
590 <emphasis role="preprocessor">#define&#32;pathconf(...)&#32;(pthread_testcancel(),&#32;pathconf(__VA_ARGS__))</emphasis>
591 <emphasis role="preprocessor">#define&#32;pclose(...)&#32;(pthread_testcancel(),&#32;pclose(__VA_ARGS__))</emphasis>
592 <emphasis role="preprocessor">#define&#32;perror(...)&#32;(pthread_testcancel(),&#32;perror(__VA_ARGS__))</emphasis>
593 <emphasis role="preprocessor">#define&#32;popen(...)&#32;(pthread_testcancel(),&#32;popen(__VA_ARGS__))</emphasis>
594 <emphasis role="preprocessor">#define&#32;posix_fadvise(...)&#32;(pthread_testcancel(),&#32;posix_fadvise(__VA_ARGS__))</emphasis>
595 <emphasis role="preprocessor">#define&#32;posix_fallocate(...)&#32;(pthread_testcancel(),&#32;posix_fallocate(__VA_ARGS__))</emphasis>
596 <emphasis role="preprocessor">#define&#32;posix_madvise(...)&#32;(pthread_testcancel(),&#32;posix_madvise(__VA_ARGS__))</emphasis>
597 <emphasis role="preprocessor">#define&#32;posix_openpt(...)&#32;(pthread_testcancel(),&#32;posix_openpt(__VA_ARGS__))</emphasis>
598 <emphasis role="preprocessor">#define&#32;posix_spawn(...)&#32;(pthread_testcancel(),&#32;posix_spawn(__VA_ARGS__))</emphasis>
599 <emphasis role="preprocessor">#define&#32;posix_spawnp(...)&#32;(pthread_testcancel(),&#32;posix_spawnp(__VA_ARGS__))</emphasis>
600 <emphasis role="preprocessor">#define&#32;posix_trace_clear(...)&#32;(pthread_testcancel(),&#32;posix_trace_clear(__VA_ARGS__))</emphasis>
601 <emphasis role="preprocessor">#define&#32;posix_trace_close(...)&#32;(pthread_testcancel(),&#32;posix_trace_close(__VA_ARGS__))</emphasis>
602 <emphasis role="preprocessor">#define&#32;posix_trace_create(...)&#32;(pthread_testcancel(),&#32;posix_trace_create(__VA_ARGS__))</emphasis>
603 <emphasis role="preprocessor">#define&#32;posix_trace_create_withlog(...)&#32;(pthread_testcancel(),&#32;posix_trace_create_withlog(__VA_ARGS__))</emphasis>
604 <emphasis role="preprocessor">#define&#32;posix_trace_eventtypelist_getne(...)&#32;(pthread_testcancel(),&#32;posix_trace_eventtypelist_getne(__VA_ARGS__))</emphasis>
605 <emphasis role="preprocessor">#define&#32;posix_trace_eventtypelist_rewin(...)&#32;(pthread_testcancel(),&#32;posix_trace_eventtypelist_rewin(__VA_ARGS__))</emphasis>
606 <emphasis role="preprocessor">#define&#32;posix_trace_flush(...)&#32;(pthread_testcancel(),&#32;posix_trace_flush(__VA_ARGS__))</emphasis>
607 <emphasis role="preprocessor">#define&#32;posix_trace_get_attr(...)&#32;(pthread_testcancel(),&#32;posix_trace_get_attr(__VA_ARGS__))</emphasis>
608 <emphasis role="preprocessor">#define&#32;posix_trace_get_filter(...)&#32;(pthread_testcancel(),&#32;posix_trace_get_filter(__VA_ARGS__))</emphasis>
609 <emphasis role="preprocessor">#define&#32;posix_trace_get_status(...)&#32;(pthread_testcancel(),&#32;posix_trace_get_status(__VA_ARGS__))</emphasis>
610 <emphasis role="preprocessor">#define&#32;posix_trace_getnext_event(...)&#32;(pthread_testcancel(),&#32;posix_trace_getnext_event(__VA_ARGS__))</emphasis>
611 <emphasis role="preprocessor">#define&#32;posix_trace_open(...)&#32;(pthread_testcancel(),&#32;posix_trace_open(__VA_ARGS__))</emphasis>
612 <emphasis role="preprocessor">#define&#32;posix_trace_rewind(...)&#32;(pthread_testcancel(),&#32;posix_trace_rewind(__VA_ARGS__))</emphasis>
613 <emphasis role="preprocessor">#define&#32;posix_trace_setfilter(...)&#32;(pthread_testcancel(),&#32;posix_trace_setfilter(__VA_ARGS__))</emphasis>
614 <emphasis role="preprocessor">#define&#32;posix_trace_shutdown(...)&#32;(pthread_testcancel(),&#32;posix_trace_shutdown(__VA_ARGS__))</emphasis>
615 <emphasis role="preprocessor">#define&#32;posix_trace_timedgetnext_event(...)&#32;(pthread_testcancel(),&#32;posix_trace_timedgetnext_event(__VA_ARGS__))</emphasis>
616 <emphasis role="preprocessor">#define&#32;posix_typed_mem_open(...)&#32;(pthread_testcancel(),&#32;posix_typed_mem_open(__VA_ARGS__))</emphasis>
617 <emphasis role="preprocessor">#define&#32;printf(...)&#32;(pthread_testcancel(),&#32;printf(__VA_ARGS__))</emphasis>
618 <emphasis role="preprocessor">#define&#32;putc(...)&#32;(pthread_testcancel(),&#32;putc(__VA_ARGS__))</emphasis>
619 <emphasis role="preprocessor">#define&#32;putc_unlocked(...)&#32;(pthread_testcancel(),&#32;putc_unlocked(__VA_ARGS__))</emphasis>
620 <emphasis role="preprocessor">#define&#32;putchar(...)&#32;(pthread_testcancel(),&#32;putchar(__VA_ARGS__))</emphasis>
621 <emphasis role="preprocessor">#define&#32;putchar_unlocked(...)&#32;(pthread_testcancel(),&#32;putchar_unlocked(__VA_ARGS__))</emphasis>
622 <emphasis role="preprocessor">#define&#32;puts(...)&#32;(pthread_testcancel(),&#32;puts(__VA_ARGS__))</emphasis>
623 <emphasis role="preprocessor">#define&#32;pututxline(...)&#32;(pthread_testcancel(),&#32;pututxline(__VA_ARGS__))</emphasis>
624 <emphasis role="preprocessor">#undef&#32;putwc</emphasis>
625 <emphasis role="preprocessor">#define&#32;putwc(...)&#32;(pthread_testcancel(),&#32;putwc(__VA_ARGS__))</emphasis>
626 <emphasis role="preprocessor">#undef&#32;putwchar</emphasis>
627 <emphasis role="preprocessor">#define&#32;putwchar(...)&#32;(pthread_testcancel(),&#32;putwchar(__VA_ARGS__))</emphasis>
628 <emphasis role="preprocessor">#define&#32;readdir(...)&#32;(pthread_testcancel(),&#32;readdir(__VA_ARSG__))</emphasis>
629 <emphasis role="preprocessor">#define&#32;readdir_r(...)&#32;(pthread_testcancel(),&#32;readdir_r(__VA_ARGS__))</emphasis>
630 <emphasis role="preprocessor">#define&#32;remove(...)&#32;(pthread_testcancel(),&#32;remove(__VA_ARGS__))</emphasis>
631 <emphasis role="preprocessor">#define&#32;rename(...)&#32;(pthread_testcancel(),&#32;rename(__VA_ARGS__))</emphasis>
632 <emphasis role="preprocessor">#define&#32;rewind(...)&#32;(pthread_testcancel(),&#32;rewind(__VA_ARGS__))</emphasis>
633 <emphasis role="preprocessor">#define&#32;rewinddir(...)&#32;(pthread_testcancel(),&#32;rewinddir(__VA_ARGS__))</emphasis>
634 <emphasis role="preprocessor">#define&#32;scanf(...)&#32;(pthread_testcancel(),&#32;scanf(__VA_ARGS__))</emphasis>
635 <emphasis role="preprocessor">#define&#32;seekdir(...)&#32;(pthread_testcancel(),&#32;seekdir(__VA_ARGS__))</emphasis>
636 <emphasis role="preprocessor">#define&#32;semop(...)&#32;(pthread_testcancel(),&#32;semop(__VA_ARGS__))</emphasis>
637 <emphasis role="preprocessor">#define&#32;setgrent(...)&#32;(pthread_testcancel(),&#32;setgrent(__VA_ARGS__))</emphasis>
638 <emphasis role="preprocessor">#define&#32;sethostent(...)&#32;(pthread_testcancel(),&#32;sethostemt(__VA_ARGS__))</emphasis>
639 <emphasis role="preprocessor">#define&#32;setnetent(...)&#32;(pthread_testcancel(),&#32;setnetent(__VA_ARGS__))</emphasis>
640 <emphasis role="preprocessor">#define&#32;setprotoent(...)&#32;(pthread_testcancel(),&#32;setprotoent(__VA_ARGS__))</emphasis>
641 <emphasis role="preprocessor">#define&#32;setpwent(...)&#32;(pthread_testcancel(),&#32;setpwent(__VA_ARGS__))</emphasis>
642 <emphasis role="preprocessor">#define&#32;setservent(...)&#32;(pthread_testcancel(),&#32;setservent(__VA_ARGS__))</emphasis>
643 <emphasis role="preprocessor">#define&#32;setutxent(...)&#32;(pthread_testcancel(),&#32;setutxent(__VA_ARGS__))</emphasis>
644 <emphasis role="preprocessor">#define&#32;stat(...)&#32;(pthread_testcancel(),&#32;stat(__VA_ARGS__))</emphasis>
645 <emphasis role="preprocessor">#define&#32;strerror(...)&#32;(pthread_testcancel(),&#32;strerror(__VA_ARGS__))</emphasis>
646 <emphasis role="preprocessor">#define&#32;strerror_r(...)&#32;(pthread_testcancel(),&#32;strerror_r(__VA_ARGS__))</emphasis>
647 <emphasis role="preprocessor">#define&#32;strftime(...)&#32;(pthread_testcancel(),&#32;strftime(__VA_ARGS__))</emphasis>
648 <emphasis role="preprocessor">#define&#32;symlink(...)&#32;(pthread_testcancel(),&#32;symlink(__VA_ARGS__))</emphasis>
649 <emphasis role="preprocessor">#define&#32;sync(...)&#32;(pthread_testcancel(),&#32;sync(__VA_ARGS__))</emphasis>
650 <emphasis role="preprocessor">#define&#32;syslog(...)&#32;(pthread_testcancel(),&#32;syslog(__VA_ARGS__))</emphasis>
651 <emphasis role="preprocessor">#define&#32;tmpfile(...)&#32;(pthread_testcancel(),&#32;tmpfile(__VA_ARGS__))</emphasis>
652 <emphasis role="preprocessor">#define&#32;tmpnam(...)&#32;(pthread_testcancel(),&#32;tmpnam(__VA_ARGS__))</emphasis>
653 <emphasis role="preprocessor">#define&#32;ttyname(...)&#32;(pthread_testcancel(),&#32;ttyname(__VA_ARGS__))</emphasis>
654 <emphasis role="preprocessor">#define&#32;ttyname_r(...)&#32;(pthread_testcancel(),&#32;ttyname_r(__VA_ARGS__))</emphasis>
655 <emphasis role="preprocessor">#define&#32;tzset(...)&#32;(pthread_testcancel(),&#32;tzset(__VA_ARGS__))</emphasis>
656 <emphasis role="preprocessor">#define&#32;ungetc(...)&#32;(pthread_testcancel(),&#32;ungetc(__VA_ARGS__))</emphasis>
657 <emphasis role="preprocessor">#define&#32;ungetwc(...)&#32;(pthread_testcancel(),&#32;ungetwc(__VA_ARGS__))</emphasis>
658 <emphasis role="preprocessor">#define&#32;unlink(...)&#32;(pthread_testcancel(),&#32;unlink(__VA_ARGS__))</emphasis>
659 <emphasis role="preprocessor">#define&#32;vfprintf(...)&#32;(pthread_testcancel(),&#32;vfprintf(__VA_ARGS__))</emphasis>
660 <emphasis role="preprocessor">#define&#32;vfwprintf(...)&#32;(pthread_testcancel(),&#32;vfwprintf(__VA_ARGS__))</emphasis>
661 <emphasis role="preprocessor">#define&#32;vprintf(...)&#32;(pthread_testcancel(),&#32;vprintf(__VA_ARGS__))</emphasis>
662 <emphasis role="preprocessor">#define&#32;vwprintf(...)&#32;(pthread_testcancel(),&#32;vwprintf(__VA_ARGS__))</emphasis>
663 <emphasis role="preprocessor">#define&#32;wcsftime(...)&#32;(pthread_testcancel(),&#32;wcsftime(__VA_ARGS__))</emphasis>
664 <emphasis role="preprocessor">#define&#32;wordexp(...)&#32;(pthread_testcancel(),&#32;wordexp(__VA_ARGS__))</emphasis>
665 <emphasis role="preprocessor">#define&#32;wprintf(...)&#32;(pthread_testcancel(),&#32;wprintf(__VA_ARGS__))</emphasis>
666 <emphasis role="preprocessor">#define&#32;wscanf(...)&#32;(pthread_testcancel(),&#32;wscanf(__VA_ARGS__))</emphasis>
667 <emphasis role="preprocessor">#endif</emphasis>
668 
669 <emphasis role="comment">/*&#32;We&#32;deal&#32;here&#32;with&#32;a&#32;gcc&#32;issue&#32;for&#32;posix&#32;threading&#32;on&#32;Windows.</emphasis>
670 <emphasis role="comment">&#32;&#32;&#32;We&#32;would&#32;need&#32;to&#32;change&#32;here&#32;gcc&apos;s&#32;gthr-posix.h&#32;header,&#32;but&#32;this</emphasis>
671 <emphasis role="comment">&#32;&#32;&#32;got&#32;rejected.&#32;&#32;So&#32;we&#32;deal&#32;it&#32;within&#32;this&#32;header.&#32;&#32;*/</emphasis>
672 <emphasis role="preprocessor">#ifdef&#32;_GTHREAD_USE_MUTEX_INIT_FUNC</emphasis>
673 <emphasis role="preprocessor">#undef&#32;_GTHREAD_USE_MUTEX_INIT_FUNC</emphasis>
674 <emphasis role="preprocessor">#endif</emphasis>
675 <emphasis role="preprocessor">#define&#32;_GTHREAD_USE_MUTEX_INIT_FUNC&#32;1</emphasis>
676 
677 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
678 }
679 <emphasis role="preprocessor">#endif</emphasis>
680 
681 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;WIN_PTHREADS_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
