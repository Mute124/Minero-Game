<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2fs__ops_8h_source" xml:lang="en-US">
<title>fs_ops.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/fs_ops.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Filesystem&#32;operational&#32;functions&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;__option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_FS_OPS_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_FS_OPS_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;cstdint&gt;</emphasis>
36 
37 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
38 {
39 _GLIBCXX_BEGIN_NAMESPACE_VERSION
40 
41 <emphasis role="keyword">namespace&#32;</emphasis>filesystem
42 {
47 &#32;&#32;[[nodiscard]]
48 &#32;&#32;<link linkend="_classpath">path</link>&#32;absolute(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
49 
50 &#32;&#32;[[nodiscard]]
51 &#32;&#32;<link linkend="_classpath">path</link>&#32;absolute(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
52 
53 &#32;&#32;[[nodiscard]]
54 &#32;&#32;<link linkend="_classpath">path</link>&#32;canonical(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
55 
56 &#32;&#32;[[nodiscard]]
57 &#32;&#32;<link linkend="_classpath">path</link>&#32;canonical(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
58 
59 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
60 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to)
61 &#32;&#32;{&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(__from,&#32;__to,&#32;copy_options::none);&#32;}
62 
63 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
64 &#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;error_code&amp;&#32;__ec)
65 &#32;&#32;{&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(__from,&#32;__to,&#32;copy_options::none,&#32;__ec);&#32;}
66 
67 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options);
68 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__options,
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec);
70 
71 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
72 &#32;&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to)
73 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;copy_file(__from,&#32;__to,&#32;copy_options::none);&#32;}
74 
75 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
76 &#32;&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;error_code&amp;&#32;__ec)
77 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;copy_file(__from,&#32;__to,&#32;copy_options::none,&#32;__ec);&#32;}
78 
79 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option);
80 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;copy_options&#32;__option,
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec);
82 
83 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;copy_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__existing_symlink,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink);
84 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;copy_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__existing_symlink,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink,
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
86 
87 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directories(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
88 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directories(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
89 
90 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
91 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
92 
93 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;attributes);
94 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;create_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;attributes,
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
96 
97 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_directory_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink);
98 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_directory_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink,
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
100 
101 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_hard_link(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_hard_link);
102 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_hard_link(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_hard_link,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
104 
105 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink);
106 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;create_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__new_symlink,
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
108 
109 &#32;&#32;[[nodiscard]]
110 &#32;&#32;<link linkend="_classpath">path</link>&#32;current_path();
111 
112 &#32;&#32;[[nodiscard]]
113 &#32;&#32;<link linkend="_classpath">path</link>&#32;current_path(error_code&amp;&#32;__ec);
114 
115 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;current_path(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
116 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;current_path(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
117 
118 &#32;&#32;[[nodiscard]]
119 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>
120 &#32;&#32;equivalent(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p2);
121 
122 &#32;&#32;[[nodiscard]]
123 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>
124 &#32;&#32;equivalent(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p2,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
125 
126 &#32;&#32;[[nodiscard]]
127 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
128 &#32;&#32;exists(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
129 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;status_known(__s)&#32;&amp;&amp;&#32;__s.type()&#32;!=&#32;file_type::not_found;&#32;}
130 
131 &#32;&#32;[[nodiscard]]
132 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
133 &#32;&#32;exists(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
134 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;exists(status(__p));&#32;}
135 
136 &#32;&#32;[[nodiscard]]
137 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
138 &#32;&#32;exists(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
139 &#32;&#32;{
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__s&#32;=&#32;status(__p,&#32;__ec);
141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status_known(__s))
142 &#32;&#32;&#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;__ec.clear();
144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;!=&#32;file_type::not_found;
145 &#32;&#32;&#32;&#32;&#32;&#32;}
146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
147 &#32;&#32;}
148 
149 &#32;&#32;[[nodiscard]]
150 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;file_size(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
151 
152 &#32;&#32;[[nodiscard]]
153 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;file_size(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
154 
155 &#32;&#32;[[nodiscard]]
156 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;hard_link_count(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
157 
158 &#32;&#32;[[nodiscard]]
159 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;hard_link_count(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
160 
161 &#32;&#32;[[nodiscard]]
162 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
163 &#32;&#32;is_block_file(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
164 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::block;&#32;}
165 
166 &#32;&#32;[[nodiscard]]
167 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
168 &#32;&#32;is_block_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
169 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_block_file(status(__p));&#32;}
170 
171 &#32;&#32;[[nodiscard]]
172 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
173 &#32;&#32;is_block_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
174 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_block_file(status(__p,&#32;__ec));&#32;}
175 
176 &#32;&#32;[[nodiscard]]
177 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
178 &#32;&#32;is_character_file(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
179 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::character;&#32;}
180 
181 &#32;&#32;[[nodiscard]]
182 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
183 &#32;&#32;is_character_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
184 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_character_file(status(__p));&#32;}
185 
186 &#32;&#32;[[nodiscard]]
187 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
188 &#32;&#32;is_character_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
189 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_character_file(status(__p,&#32;__ec));&#32;}
190 
191 &#32;&#32;[[nodiscard]]
192 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
193 &#32;&#32;is_directory(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
194 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::directory;&#32;}
195 
196 &#32;&#32;[[nodiscard]]
197 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
198 &#32;&#32;is_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
199 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_directory(status(__p));&#32;}
200 
201 &#32;&#32;[[nodiscard]]
202 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
203 &#32;&#32;is_directory(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
204 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_directory(status(__p,&#32;__ec));&#32;}
205 
206 &#32;&#32;[[nodiscard]]
207 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_empty(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
208 
209 &#32;&#32;[[nodiscard]]
210 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_empty(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
211 
212 &#32;&#32;[[nodiscard]]
213 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
214 &#32;&#32;is_fifo(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
215 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::fifo;&#32;}
216 
217 &#32;&#32;[[nodiscard]]
218 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
219 &#32;&#32;is_fifo(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
220 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_fifo(status(__p));&#32;}
221 
222 &#32;&#32;[[nodiscard]]
223 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
224 &#32;&#32;is_fifo(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
225 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_fifo(status(__p,&#32;__ec));&#32;}
226 
227 &#32;&#32;[[nodiscard]]
228 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
229 &#32;&#32;is_other(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
230 &#32;&#32;{
231 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;exists(__s)&#32;&amp;&amp;&#32;!is_regular_file(__s)&#32;&amp;&amp;&#32;!is_directory(__s)
232 &#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!is_symlink(__s);
233 &#32;&#32;}
234 
235 &#32;&#32;[[nodiscard]]
236 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
237 &#32;&#32;is_other(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
238 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_other(status(__p));&#32;}
239 
240 &#32;&#32;[[nodiscard]]
241 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
242 &#32;&#32;is_other(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
243 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_other(status(__p,&#32;__ec));&#32;}
244 
245 &#32;&#32;[[nodiscard]]
246 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
247 &#32;&#32;is_regular_file(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
248 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::regular;&#32;}
249 
250 &#32;&#32;[[nodiscard]]
251 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
252 &#32;&#32;is_regular_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
253 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_regular_file(status(__p));&#32;}
254 
255 &#32;&#32;[[nodiscard]]
256 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
257 &#32;&#32;is_regular_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
258 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_regular_file(status(__p,&#32;__ec));&#32;}
259 
260 &#32;&#32;[[nodiscard]]
261 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
262 &#32;&#32;is_socket(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
263 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::socket;&#32;}
264 
265 &#32;&#32;[[nodiscard]]
266 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
267 &#32;&#32;is_socket(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
268 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_socket(status(__p));&#32;}
269 
270 &#32;&#32;[[nodiscard]]
271 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
272 &#32;&#32;is_socket(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
273 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_socket(status(__p,&#32;__ec));&#32;}
274 
275 &#32;&#32;[[nodiscard]]
276 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
277 &#32;&#32;is_symlink(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
278 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;==&#32;file_type::symlink;&#32;}
279 
280 &#32;&#32;[[nodiscard]]
281 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
282 &#32;&#32;is_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p)
283 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_symlink(symlink_status(__p));&#32;}
284 
285 &#32;&#32;[[nodiscard]]
286 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
287 &#32;&#32;is_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
288 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is_symlink(symlink_status(__p,&#32;__ec));&#32;}
289 
290 &#32;&#32;[[nodiscard]]
291 &#32;&#32;file_time_type&#32;&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
292 
293 &#32;&#32;[[nodiscard]]
294 &#32;&#32;file_time_type&#32;&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
295 
296 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;file_time_type&#32;__new_time);
297 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;last_write_time(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;file_time_type&#32;__new_time,
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
299 
300 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
301 &#32;&#32;permissions(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;perms&#32;__prms,
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perm_options&#32;__opts&#32;=&#32;perm_options::replace);
303 
304 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
305 &#32;&#32;permissions(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;perms&#32;__prms,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>
306 &#32;&#32;{&#32;permissions(__p,&#32;__prms,&#32;perm_options::replace,&#32;__ec);&#32;}
307 
308 &#32;&#32;<emphasis role="keywordtype">void</emphasis>
309 &#32;&#32;permissions(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;perms&#32;__prms,&#32;perm_options&#32;__opts,
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
311 
312 &#32;&#32;[[nodiscard]]
313 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&#32;proximate(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)
314 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;proximate(__p,&#32;current_path(),&#32;__ec);&#32;}
315 
316 &#32;&#32;[[nodiscard]]
317 &#32;&#32;<link linkend="_classpath">path</link>&#32;proximate(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base&#32;=&#32;current_path());
318 
319 &#32;&#32;[[nodiscard]]
320 &#32;&#32;<link linkend="_classpath">path</link>&#32;proximate(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base,&#32;error_code&amp;&#32;__ec);
321 
322 &#32;&#32;[[nodiscard]]
323 &#32;&#32;<link linkend="_classpath">path</link>&#32;read_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
324 
325 &#32;&#32;[[nodiscard]]
326 &#32;&#32;<link linkend="_classpath">path</link>&#32;read_symlink(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
327 
328 &#32;&#32;[[nodiscard]]
329 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classpath">path</link>&#32;relative(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)
330 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;relative(__p,&#32;current_path(),&#32;__ec);&#32;}
331 
332 &#32;&#32;[[nodiscard]]
333 &#32;&#32;<link linkend="_classpath">path</link>&#32;relative(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base&#32;=&#32;current_path());
334 
335 &#32;&#32;[[nodiscard]]
336 &#32;&#32;<link linkend="_classpath">path</link>&#32;relative(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__base,&#32;error_code&amp;&#32;__ec);
337 
338 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
339 &#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacestd_1a4e25a1e93784cb07fd8a6e9a00be03a7">remove</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
340 
341 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
342 &#32;&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;remove_all(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
343 
344 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;rename(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to);
345 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;rename(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__to,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
346 
347 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resize_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;__size);
348 &#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;resize_file(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;<link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1a2ba5f6c0633401558d277b2c0e4f758d">uintmax_t</link>&#32;__size,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
349 
350 &#32;&#32;[[nodiscard]]
351 &#32;&#32;space_info&#32;space(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
352 
353 &#32;&#32;[[nodiscard]]
354 &#32;&#32;space_info&#32;space(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
355 
356 &#32;&#32;[[nodiscard]]
357 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
358 
359 &#32;&#32;[[nodiscard]]
360 &#32;&#32;file_status&#32;status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
361 
362 &#32;&#32;[[nodiscard]]
363 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;status_known(file_status&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
364 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__s.type()&#32;!=&#32;file_type::none;&#32;}
365 
366 &#32;&#32;[[nodiscard]]
367 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
368 
369 &#32;&#32;[[nodiscard]]
370 &#32;&#32;file_status&#32;symlink_status(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec)&#32;<emphasis role="keyword">noexcept</emphasis>;
371 
372 &#32;&#32;[[nodiscard]]
373 &#32;&#32;<link linkend="_classpath">path</link>&#32;temp_directory_path();
374 
375 &#32;&#32;[[nodiscard]]
376 &#32;&#32;<link linkend="_classpath">path</link>&#32;temp_directory_path(error_code&amp;&#32;__ec);
377 
378 &#32;&#32;[[nodiscard]]
379 &#32;&#32;<link linkend="_classpath">path</link>&#32;weakly_canonical(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p);
380 
381 &#32;&#32;[[nodiscard]]
382 &#32;&#32;<link linkend="_classpath">path</link>&#32;weakly_canonical(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classpath">path</link>&amp;&#32;__p,&#32;error_code&amp;&#32;__ec);
383 
385 }&#32;<emphasis role="comment">//&#32;namespace&#32;filesystem</emphasis>
386 
387 _GLIBCXX_END_NAMESPACE_VERSION
388 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
389 
390 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
391 
392 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_FS_OPS_H</emphasis>
</programlisting></section>
