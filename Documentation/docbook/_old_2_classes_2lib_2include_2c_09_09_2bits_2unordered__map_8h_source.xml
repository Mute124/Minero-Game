<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2unordered__map_8h_source" xml:lang="en-US">
<title>unordered_map.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/unordered_map.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;unordered_map&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2010-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_UNORDERED_MAP_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_UNORDERED_MAP_H</emphasis>
32 
33 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
34 {
35 _GLIBCXX_BEGIN_NAMESPACE_VERSION
36 _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
37 
39 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Cache&gt;
40 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__umap_traits&#32;=&#32;__detail::_Hashtable_traits&lt;_Cache,&#32;false,&#32;true&gt;;
41 
42 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Key&gt;,
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;std::equal_to&lt;_Key&gt;,
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&gt;,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&#32;=&#32;__umap_traits&lt;__cache_default&lt;_Key,&#32;_Hash&gt;::value&gt;&gt;
48 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__umap_hashtable&#32;=&#32;_Hashtable&lt;_Key,&#32;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;,
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc,&#32;__detail::_Select1st,
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Hash,
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Mod_range_hashing,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,&#32;_Tr&gt;;
54 
56 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Cache&gt;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ummap_traits&#32;=&#32;__detail::_Hashtable_traits&lt;_Cache,&#32;false,&#32;false&gt;;
58 
59 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Key&gt;,
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;std::equal_to&lt;_Key&gt;,
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;std::allocator&lt;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&#32;&gt;,
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&#32;=&#32;__ummap_traits&lt;__cache_default&lt;_Key,&#32;_Hash&gt;::value&gt;&gt;
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ummap_hashtable&#32;=&#32;_Hashtable&lt;_Key,&#32;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;,
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc,&#32;__detail::_Select1st,
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Pred,&#32;_Hash,
68 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Mod_range_hashing,
69 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Default_ranged_hash,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_Prime_rehash_policy,&#32;_Tr&gt;;
71 
72 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
73 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_multimap;
74 
98 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Key&gt;,
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Key&gt;,
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;allocator&lt;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;&gt;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_map
103 &#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__umap_hashtable&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&#32;&#32;_Hashtable;
105 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable&#32;_M_h;
106 
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typedefs:</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_type&#32;key_type;
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::value_type&#32;&#32;&#32;value_type;
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::mapped_type&#32;&#32;mapped_type;
114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::hasher&#32;&#32;&#32;hasher;
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_equal&#32;&#32;&#32;&#32;key_equal;
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::allocator_type&#32;allocator_type;
118 
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::pointer&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_pointer&#32;&#32;&#32;&#32;const_pointer;
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_reference&#32;&#32;const_reference;
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::iterator&#32;&#32;&#32;&#32;&#32;iterator;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_iterator&#32;&#32;&#32;const_iterator;
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::local_iterator&#32;&#32;&#32;local_iterator;
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_local_iterator&#32;const_local_iterator;
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::difference_type&#32;&#32;difference_type;
132 
133 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::node_type;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>insert_return_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::insert_return_type;
136 <emphasis role="preprocessor">#endif</emphasis>
137 
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//construct/destroy/copy</emphasis>
139 
141 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
142 
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(size_type&#32;__n,
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
155 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__n,&#32;__hf,&#32;__eql,&#32;__a)
156 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
157 
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
172 &#32;&#32;&#32;&#32;unordered_map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
177 &#32;&#32;&#32;&#32;:&#32;_M_h(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
178 &#32;&#32;&#32;&#32;{&#32;}
179 
181 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(<emphasis role="keyword">const</emphasis>&#32;unordered_map&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
182 
184 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(unordered_map&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
185 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
191 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
192 &#32;&#32;&#32;&#32;:&#32;_M_h(__a)
193 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
194 
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
196 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;Copy&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
197 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__uset&#32;&#32;Input&#32;%unordered_map&#32;to&#32;copy.</emphasis>
198 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__a&#32;&#32;An&#32;allocator&#32;object.</emphasis>
199 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(<emphasis role="keyword">const</emphasis>&#32;unordered_map&amp;&#32;__umap,
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
202 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__umap._M_h,&#32;__a)
203 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
206 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Move&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
207 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__uset&#32;Input&#32;%unordered_map&#32;to&#32;move.</emphasis>
208 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__a&#32;&#32;&#32;&#32;An&#32;allocator&#32;object.</emphasis>
209 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(unordered_map&amp;&amp;&#32;__umap,
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
212 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_Hashtable(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__umap._M_h),&#32;__a))&#32;)
213 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__umap._M_h),&#32;__a)
214 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
215 
227 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(initializer_list&lt;value_type&gt;&#32;__l,
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
232 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__l,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
233 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
234 
235 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
236 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_map(__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
237 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
241 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_map(__n,&#32;__hf,&#32;key_equal(),&#32;__a)
242 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
243 
244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
245 &#32;&#32;&#32;&#32;unordered_map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
248 &#32;&#32;&#32;&#32;:&#32;unordered_map(__first,&#32;__last,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
249 &#32;&#32;&#32;&#32;{&#32;}
250 
251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
252 &#32;&#32;&#32;&#32;unordered_map(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
255 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_map(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
256 &#32;&#32;&#32;&#32;{&#32;}
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(initializer_list&lt;value_type&gt;&#32;__l,
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
261 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_map(__l,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
262 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
263 
264 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map(initializer_list&lt;value_type&gt;&#32;__l,
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
267 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_map(__l,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
268 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
269 
271 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map&amp;
272 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;unordered_map&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
273 
275 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map&amp;
276 &#32;&#32;&#32;&#32;&#32;&#32;operator=(unordered_map&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
277 
289 &#32;&#32;&#32;&#32;&#32;&#32;unordered_map&amp;
290 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
291 &#32;&#32;&#32;&#32;&#32;&#32;{
292 &#32;&#32;&#32;&#32;_M_h&#32;=&#32;__l;
293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
294 &#32;&#32;&#32;&#32;&#32;&#32;}
295 
297 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
298 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.get_allocator();&#32;}
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;and&#32;capacity:</emphasis>
302 
304 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
305 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.empty();&#32;}
307 
309 &#32;&#32;&#32;&#32;&#32;&#32;size_type
310 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.size();&#32;}
312 
314 &#32;&#32;&#32;&#32;&#32;&#32;size_type
315 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_size();&#32;}
317 
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators.</emphasis>
319 
324 &#32;&#32;&#32;&#32;&#32;&#32;iterator
325 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">noexcept</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
327 
329 
333 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
334 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
338 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
341 
346 &#32;&#32;&#32;&#32;&#32;&#32;iterator
347 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
349 
351 
355 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
356 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
357 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
358 
359 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
360 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
361 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
363 
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers.</emphasis>
365 
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
387 &#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
388 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
389 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace(std::forward&lt;_Args&gt;(__args)...);&#32;}
390 
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
418 &#32;&#32;&#32;&#32;iterator
419 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
420 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace_hint(__pos,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
421 
422 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
424 &#32;&#32;&#32;&#32;&#32;&#32;node_type
425 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
426 &#32;&#32;&#32;&#32;&#32;&#32;{
427 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__pos);
429 &#32;&#32;&#32;&#32;&#32;&#32;}
430 
432 &#32;&#32;&#32;&#32;&#32;&#32;node_type
433 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
434 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__key);&#32;}
435 
437 &#32;&#32;&#32;&#32;&#32;&#32;insert_return_type
438 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
439 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
440 
442 &#32;&#32;&#32;&#32;&#32;&#32;iterator
443 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator,&#32;node_type&amp;&amp;&#32;__nh)
444 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh)).position;&#32;}
445 
446 <emphasis role="preprocessor">#define&#32;__cpp_lib_unordered_map_try_emplace&#32;201411L</emphasis>
469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
470 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
471 &#32;&#32;&#32;&#32;try_emplace(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
472 &#32;&#32;&#32;&#32;{
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.try_emplace(cend(),&#32;__k,&#32;std::forward&lt;_Args&gt;(__args)...);
474 &#32;&#32;&#32;&#32;}
475 
476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
478 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
479 &#32;&#32;&#32;&#32;try_emplace(key_type&amp;&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
480 &#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.try_emplace(cend(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
483 &#32;&#32;&#32;&#32;}
484 
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
514 &#32;&#32;&#32;&#32;iterator
515 &#32;&#32;&#32;&#32;try_emplace(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
517 &#32;&#32;&#32;&#32;{
518 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.try_emplace(__hint,&#32;__k,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...).first;
520 &#32;&#32;&#32;&#32;}
521 
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
524 &#32;&#32;&#32;&#32;iterator
525 &#32;&#32;&#32;&#32;try_emplace(const_iterator&#32;__hint,&#32;key_type&amp;&amp;&#32;__k,&#32;_Args&amp;&amp;...&#32;__args)
526 &#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.try_emplace(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...).first;
529 &#32;&#32;&#32;&#32;}
530 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
531 
533 
550 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
551 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
552 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__x);&#32;}
553 
554 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
556 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;bool&gt;
557 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
558 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
559 
560 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
561 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&amp;&amp;&gt;::value,
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;&gt;
563 &#32;&#32;&#32;&#32;insert(_Pair&amp;&amp;&#32;__x)
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace(std::forward&lt;_Pair&gt;(__x));&#32;}
566 
568 
589 &#32;&#32;&#32;&#32;&#32;&#32;iterator
590 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
591 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;__x);&#32;}
592 
593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
595 &#32;&#32;&#32;&#32;&#32;&#32;iterator
596 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;value_type&amp;&amp;&#32;__x)
597 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
598 
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
600 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&amp;&amp;&gt;::value,&#32;iterator&gt;
601 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;_Pair&amp;&amp;&#32;__x)
602 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace_hint(__hint,&#32;std::forward&lt;_Pair&gt;(__x));&#32;}
604 
614 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
615 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
616 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
617 &#32;&#32;&#32;&#32;{&#32;_M_h.insert(__first,&#32;__last);&#32;}
618 
626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
628 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.insert(__l);&#32;}
629 
630 
631 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
653 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
654 &#32;&#32;&#32;&#32;insert_or_assign(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
655 &#32;&#32;&#32;&#32;{
656 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;_M_h.try_emplace(cend(),&#32;__k,
657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj));
658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ret.second)
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.first-&gt;second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
661 &#32;&#32;&#32;&#32;}
662 
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
664 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
665 &#32;&#32;&#32;&#32;pair&lt;iterator,&#32;bool&gt;
666 &#32;&#32;&#32;&#32;insert_or_assign(key_type&amp;&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
667 &#32;&#32;&#32;&#32;{
668 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;_M_h.try_emplace(cend(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj));
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ret.second)
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.first-&gt;second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
673 &#32;&#32;&#32;&#32;}
674 
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
702 &#32;&#32;&#32;&#32;iterator
703 &#32;&#32;&#32;&#32;insert_or_assign(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k,
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Obj&amp;&amp;&#32;__obj)
705 &#32;&#32;&#32;&#32;{
706 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;_M_h.try_emplace(__hint,&#32;__k,&#32;std::forward&lt;_Obj&gt;(__obj));
707 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ret.second)
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.first-&gt;second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret.first;
710 &#32;&#32;&#32;&#32;}
711 
712 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move-capable&#32;overload</emphasis>
713 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Obj&gt;
714 &#32;&#32;&#32;&#32;iterator
715 &#32;&#32;&#32;&#32;insert_or_assign(const_iterator&#32;__hint,&#32;key_type&amp;&amp;&#32;__k,&#32;_Obj&amp;&amp;&#32;__obj)
716 &#32;&#32;&#32;&#32;{
717 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ret&#32;=&#32;_M_h.try_emplace(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k),
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Obj&gt;(__obj));
719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__ret.second)
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ret.first-&gt;second&#32;=&#32;std::forward&lt;_Obj&gt;(__obj);
721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret.first;
722 &#32;&#32;&#32;&#32;}
723 <emphasis role="preprocessor">#endif</emphasis>
724 
726 
739 &#32;&#32;&#32;&#32;&#32;&#32;iterator
740 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
741 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
742 
743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;2059.</emphasis>
744 &#32;&#32;&#32;&#32;&#32;&#32;iterator
745 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
746 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
748 
761 &#32;&#32;&#32;&#32;&#32;&#32;size_type
762 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
763 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__x);&#32;}
764 
779 &#32;&#32;&#32;&#32;&#32;&#32;iterator
780 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
781 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__first,&#32;__last);&#32;}
782 
789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
790 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;<emphasis role="keyword">noexcept</emphasis>
791 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.clear();&#32;}
792 
803 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
804 &#32;&#32;&#32;&#32;&#32;&#32;swap(unordered_map&amp;&#32;__x)
805 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_M_h.swap(__x._M_h))&#32;)
806 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.swap(__x._M_h);&#32;}
807 
808 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
810 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>std::_Hash_merge_helper;
811 
812 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
813 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
814 &#32;&#32;&#32;&#32;merge(unordered_map&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
815 &#32;&#32;&#32;&#32;{
816 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Hash_merge_helper&lt;unordered_map,&#32;_H2,&#32;_P2&gt;;
817 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
818 &#32;&#32;&#32;&#32;}
819 
820 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
821 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
822 &#32;&#32;&#32;&#32;merge(unordered_map&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
823 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
824 
825 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
826 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
827 &#32;&#32;&#32;&#32;merge(unordered_multimap&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
828 &#32;&#32;&#32;&#32;{
829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper&#32;=&#32;_Hash_merge_helper&lt;unordered_map,&#32;_H2,&#32;_P2&gt;;
830 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
831 &#32;&#32;&#32;&#32;}
832 
833 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
834 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
835 &#32;&#32;&#32;&#32;merge(unordered_multimap&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
836 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
837 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
838 
839 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers.</emphasis>
840 
843 &#32;&#32;&#32;&#32;&#32;&#32;hasher
844 &#32;&#32;&#32;&#32;&#32;&#32;hash_function()<emphasis role="keyword">&#32;const</emphasis>
845 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.hash_function();&#32;}
846 
849 &#32;&#32;&#32;&#32;&#32;&#32;key_equal
850 &#32;&#32;&#32;&#32;&#32;&#32;key_eq()<emphasis role="keyword">&#32;const</emphasis>
851 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.key_eq();&#32;}
852 
853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lookup.</emphasis>
854 
856 
867 &#32;&#32;&#32;&#32;&#32;&#32;iterator
868 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
869 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
870 
871 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
872 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
873 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
874 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x))
875 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x);&#32;}
876 <emphasis role="preprocessor">#endif</emphasis>
877 
878 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
879 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
880 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
881 
882 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
883 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
884 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
885 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x))
886 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x);&#32;}
887 <emphasis role="preprocessor">#endif</emphasis>
889 
891 
900 &#32;&#32;&#32;&#32;&#32;&#32;size_type
901 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
902 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.count(__x);&#32;}
903 
904 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
905 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
906 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
907 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_count_tr(__x))
908 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_count_tr(__x);&#32;}
909 <emphasis role="preprocessor">#endif</emphasis>
911 
912 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
914 
919 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
920 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
921 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x)&#32;!=&#32;_M_h.end();&#32;}
922 
923 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
924 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
925 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
926 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
927 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x)&#32;!=&#32;_M_h.end();&#32;}
929 <emphasis role="preprocessor">#endif</emphasis>
930 
932 
940 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
941 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
942 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
943 
944 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
945 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
946 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
947 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
948 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__x))
949 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__x);&#32;}
950 <emphasis role="preprocessor">#endif</emphasis>
951 
952 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
953 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
954 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
955 
956 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
958 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
959 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
960 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__x))
961 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__x);&#32;}
962 <emphasis role="preprocessor">#endif</emphasis>
964 
966 
978 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
979 &#32;&#32;&#32;&#32;&#32;&#32;operator[](<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
980 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h[__k];&#32;}
981 
982 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
983 &#32;&#32;&#32;&#32;&#32;&#32;operator[](key_type&amp;&amp;&#32;__k)
984 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h[<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__k)];&#32;}
986 
988 
995 &#32;&#32;&#32;&#32;&#32;&#32;mapped_type&amp;
996 &#32;&#32;&#32;&#32;&#32;&#32;at(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)
997 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.at(__k);&#32;}
998 
999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;mapped_type&amp;
1000 &#32;&#32;&#32;&#32;&#32;&#32;at(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__k)<emphasis role="keyword">&#32;const</emphasis>
1001 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.at(__k);&#32;}
1003 
1004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bucket&#32;interface.</emphasis>
1005 
1007 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1008 &#32;&#32;&#32;&#32;&#32;&#32;bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1009 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_count();&#32;}
1010 
1012 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1013 &#32;&#32;&#32;&#32;&#32;&#32;max_bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1014 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_bucket_count();&#32;}
1015 
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1017 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;number&#32;of&#32;elements&#32;in&#32;a&#32;given&#32;bucket.</emphasis>
1018 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__n&#32;&#32;A&#32;bucket&#32;index.</emphasis>
1019 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;number&#32;of&#32;elements&#32;in&#32;the&#32;bucket.</emphasis>
1020 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1021 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1022 &#32;&#32;&#32;&#32;&#32;&#32;bucket_size(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1023 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_size(__n);&#32;}
1024 
1025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1026 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;bucket&#32;index&#32;of&#32;a&#32;given&#32;element.</emphasis>
1027 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__key&#32;&#32;A&#32;key&#32;instance.</emphasis>
1028 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;key&#32;bucket&#32;index.</emphasis>
1029 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1030 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1031 &#32;&#32;&#32;&#32;&#32;&#32;bucket(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
1032 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket(__key);&#32;}
1033 &#32;&#32;&#32;&#32;&#32;&#32;
1040 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
1041 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)
1042 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
1043 
1045 
1051 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1052 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1053 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
1054 
1055 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1056 &#32;&#32;&#32;&#32;&#32;&#32;cbegin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1057 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cbegin(__n);&#32;}
1059 
1066 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
1067 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)
1068 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
1069 
1071 
1077 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1078 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1079 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
1080 
1081 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1082 &#32;&#32;&#32;&#32;&#32;&#32;cend(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1083 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cend(__n);&#32;}
1085 
1086 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hash&#32;policy.</emphasis>
1087 
1089 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
1090 &#32;&#32;&#32;&#32;&#32;&#32;load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1091 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.load_factor();&#32;}
1092 
1095 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
1096 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1097 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_load_factor();&#32;}
1098 
1103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1104 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor(<emphasis role="keywordtype">float</emphasis>&#32;__z)
1105 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.max_load_factor(__z);&#32;}
1106 
1114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1115 &#32;&#32;&#32;&#32;&#32;&#32;rehash(size_type&#32;__n)
1116 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.rehash(__n);&#32;}
1117 
1125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1126 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__n)
1127 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.reserve(__n);&#32;}
1128 
1129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred1,
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc1&gt;
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1132 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_map&lt;_Key1,&#32;_Tp1,&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;,
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_map&lt;_Key1,&#32;_Tp1,&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;);
1134 &#32;&#32;&#32;&#32;};
1135 
1136 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
1137 
1138 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;__iter_to_alloc_t&lt;_InputIterator&gt;&gt;,
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1146 &#32;&#32;&#32;&#32;unordered_map(_InputIterator,&#32;_InputIterator,
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;unordered_map&lt;int,&#32;int&gt;::size_type&#32;=&#32;{},
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),&#32;_Allocator&#32;=&#32;_Allocator())
1149 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;__iter_key_t&lt;_InputIterator&gt;,
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Pred,&#32;_Allocator&gt;;
1152 
1153 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Key&gt;,
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Key&gt;,
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;,
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1159 &#32;&#32;&#32;&#32;unordered_map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;unordered_map&lt;int,&#32;int&gt;::size_type&#32;=&#32;{},
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),&#32;_Allocator&#32;=&#32;_Allocator())
1162 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Allocator&gt;;
1163 
1164 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1167 &#32;&#32;&#32;&#32;unordered_map(_InputIterator,&#32;_InputIterator,
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;unordered_map&lt;int,&#32;int&gt;::size_type,&#32;_Allocator)
1169 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;__iter_key_t&lt;_InputIterator&gt;,
1170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
1174 
1175 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1178 &#32;&#32;&#32;&#32;unordered_map(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
1179 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;__iter_key_t&lt;_InputIterator&gt;,
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
1183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
1184 
1185 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
1187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1189 &#32;&#32;&#32;&#32;unordered_map(_InputIterator,&#32;_InputIterator,
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;unordered_map&lt;int,&#32;int&gt;::size_type,
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Allocator)
1192 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;__iter_key_t&lt;_InputIterator&gt;,
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,&#32;_Hash,
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,&#32;_Allocator&gt;;
1195 
1196 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1198 &#32;&#32;&#32;&#32;unordered_map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;unordered_map&lt;int,&#32;int&gt;::size_type,
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator)
1201 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;hash&lt;_Key&gt;,&#32;equal_to&lt;_Key&gt;,&#32;_Allocator&gt;;
1202 
1203 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1205 &#32;&#32;&#32;&#32;unordered_map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,&#32;_Allocator)
1206 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;hash&lt;_Key&gt;,&#32;equal_to&lt;_Key&gt;,&#32;_Allocator&gt;;
1207 
1208 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
1211 &#32;&#32;&#32;&#32;unordered_map(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;unordered_map&lt;int,&#32;int&gt;::size_type,
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Allocator)
1214 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;equal_to&lt;_Key&gt;,&#32;_Allocator&gt;;
1215 
1216 <emphasis role="preprocessor">#endif</emphasis>
1217 
1241 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Key&gt;,
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Key&gt;,
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;allocator&lt;std::pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;&gt;
1245 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>unordered_multimap
1246 &#32;&#32;&#32;&#32;{
1247 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__ummap_hashtable&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&#32;&#32;_Hashtable;
1248 &#32;&#32;&#32;&#32;&#32;&#32;_Hashtable&#32;_M_h;
1249 
1250 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1251 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;typedefs:</emphasis>
1254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_type&#32;key_type;
1255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::value_type&#32;&#32;&#32;value_type;
1256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::mapped_type&#32;&#32;mapped_type;
1257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::hasher&#32;&#32;&#32;hasher;
1258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::key_equal&#32;&#32;&#32;&#32;key_equal;
1259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::allocator_type&#32;allocator_type;
1261 
1264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::pointer&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
1265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_pointer&#32;&#32;&#32;&#32;const_pointer;
1266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
1267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_reference&#32;&#32;const_reference;
1268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::iterator&#32;&#32;&#32;&#32;&#32;iterator;
1269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_iterator&#32;&#32;&#32;const_iterator;
1270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::local_iterator&#32;&#32;&#32;local_iterator;
1271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::const_local_iterator&#32;const_local_iterator;
1272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
1273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::difference_type&#32;&#32;difference_type;
1275 
1276 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>node_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hashtable::node_type;
1278 <emphasis role="preprocessor">#endif</emphasis>
1279 
1280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//construct/destroy/copy</emphasis>
1281 
1283 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1284 
1292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1293 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(size_type&#32;__n,
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1297 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__n,&#32;__hf,&#32;__eql,&#32;__a)
1298 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1299 
1313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1314 &#32;&#32;&#32;&#32;unordered_multimap(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1319 &#32;&#32;&#32;&#32;:&#32;_M_h(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
1320 &#32;&#32;&#32;&#32;{&#32;}
1321 
1323 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1324 
1326 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(unordered_multimap&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1327 
1332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1333 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1334 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__a)
1335 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1336 
1337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1338 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;Copy&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
1339 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__uset&#32;&#32;Input&#32;%unordered_multimap&#32;to&#32;copy.</emphasis>
1340 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__a&#32;&#32;An&#32;allocator&#32;object.</emphasis>
1341 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1342 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&amp;&#32;__ummap,
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1344 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__ummap._M_h,&#32;__a)
1345 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1346 
1347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1348 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@brief&#32;&#32;Move&#32;constructor&#32;with&#32;allocator&#32;argument.</emphasis>
1349 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__uset&#32;Input&#32;%unordered_multimap&#32;to&#32;move.</emphasis>
1350 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;@param&#32;&#32;__a&#32;&#32;&#32;&#32;An&#32;allocator&#32;object.</emphasis>
1351 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1352 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(unordered_multimap&amp;&amp;&#32;__ummap,
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1354 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_Hashtable(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ummap._M_h),&#32;__a))&#32;)
1355 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__ummap._M_h),&#32;__a)
1356 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1357 
1369 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(initializer_list&lt;value_type&gt;&#32;__l,
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n&#32;=&#32;0,
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf&#32;=&#32;hasher(),
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;key_equal&amp;&#32;__eql&#32;=&#32;key_equal(),
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a&#32;=&#32;allocator_type())
1374 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_h(__l,&#32;__n,&#32;__hf,&#32;__eql,&#32;__a)
1375 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1376 
1377 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1378 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multimap(__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
1379 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1380 
1381 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1383 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multimap(__n,&#32;__hf,&#32;key_equal(),&#32;__a)
1384 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1385 
1386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1387 &#32;&#32;&#32;&#32;unordered_multimap(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1390 &#32;&#32;&#32;&#32;:&#32;unordered_multimap(__first,&#32;__last,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
1391 &#32;&#32;&#32;&#32;{&#32;}
1392 
1393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1394 &#32;&#32;&#32;&#32;unordered_multimap(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1397 &#32;&#32;&#32;&#32;:&#32;unordered_multimap(__first,&#32;__last,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
1398 &#32;&#32;&#32;&#32;{&#32;}
1399 
1400 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(initializer_list&lt;value_type&gt;&#32;__l,
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1403 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multimap(__l,&#32;__n,&#32;hasher(),&#32;key_equal(),&#32;__a)
1404 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1405 
1406 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap(initializer_list&lt;value_type&gt;&#32;__l,
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;hasher&amp;&#32;__hf,
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;&#32;__a)
1409 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;unordered_multimap(__l,&#32;__n,&#32;__hf,&#32;key_equal(),&#32;__a)
1410 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1411 
1413 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&amp;
1414 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1415 
1417 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&amp;
1418 &#32;&#32;&#32;&#32;&#32;&#32;operator=(unordered_multimap&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1419 
1431 &#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&amp;
1432 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;value_type&gt;&#32;__l)
1433 &#32;&#32;&#32;&#32;&#32;&#32;{
1434 &#32;&#32;&#32;&#32;_M_h&#32;=&#32;__l;
1435 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1436 &#32;&#32;&#32;&#32;&#32;&#32;}
1437 
1439 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
1440 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1441 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.get_allocator();&#32;}
1442 
1443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;size&#32;and&#32;capacity:</emphasis>
1444 
1446 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
1447 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1448 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.empty();&#32;}
1449 
1451 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1452 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1453 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.size();&#32;}
1454 
1456 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1457 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1458 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_size();&#32;}
1459 
1460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;iterators.</emphasis>
1461 
1466 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1467 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">noexcept</emphasis>
1468 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
1469 
1471 
1475 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1476 &#32;&#32;&#32;&#32;&#32;&#32;begin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1477 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
1478 
1479 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1480 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1481 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin();&#32;}
1483 
1488 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1489 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">noexcept</emphasis>
1490 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
1491 
1493 
1497 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1498 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1499 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
1500 
1501 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1502 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1503 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end();&#32;}
1505 
1506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modifiers.</emphasis>
1507 
1523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1524 &#32;&#32;&#32;&#32;iterator
1525 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
1526 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace(std::forward&lt;_Args&gt;(__args)...);&#32;}
1527 
1550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1551 &#32;&#32;&#32;&#32;iterator
1552 &#32;&#32;&#32;&#32;emplace_hint(const_iterator&#32;__pos,&#32;_Args&amp;&amp;...&#32;__args)
1553 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace_hint(__pos,&#32;std::forward&lt;_Args&gt;(__args)...);&#32;}
1554 
1556 
1565 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1566 &#32;&#32;&#32;&#32;&#32;&#32;insert(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1567 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__x);&#32;}
1568 
1569 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1570 &#32;&#32;&#32;&#32;&#32;&#32;insert(value_type&amp;&amp;&#32;__x)
1571 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1572 
1573 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
1574 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&amp;&amp;&gt;::value,&#32;iterator&gt;
1575 &#32;&#32;&#32;&#32;insert(_Pair&amp;&amp;&#32;__x)
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace(std::forward&lt;_Pair&gt;(__x));&#32;}
1578 
1580 
1599 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1600 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
1601 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;__x);&#32;}
1602 
1603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2354.&#32;Unnecessary&#32;copying&#32;when&#32;inserting&#32;into&#32;maps&#32;with&#32;braced-init</emphasis>
1605 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1606 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;value_type&amp;&amp;&#32;__x)
1607 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.insert(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
1608 
1609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Pair&gt;
1610 &#32;&#32;&#32;&#32;__enable_if_t&lt;is_constructible&lt;value_type,&#32;_Pair&amp;&amp;&gt;::value,&#32;iterator&gt;
1611 &#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;_Pair&amp;&amp;&#32;__x)
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.emplace_hint(__hint,&#32;std::forward&lt;_Pair&gt;(__x));&#32;}
1614 
1624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
1625 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1626 &#32;&#32;&#32;&#32;insert(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1627 &#32;&#32;&#32;&#32;{&#32;_M_h.insert(__first,&#32;__last);&#32;}
1628 
1637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1638 &#32;&#32;&#32;&#32;&#32;&#32;insert(initializer_list&lt;value_type&gt;&#32;__l)
1639 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.insert(__l);&#32;}
1640 
1641 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1643 &#32;&#32;&#32;&#32;&#32;&#32;node_type
1644 &#32;&#32;&#32;&#32;&#32;&#32;extract(const_iterator&#32;__pos)
1645 &#32;&#32;&#32;&#32;&#32;&#32;{
1646 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;!=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__pos);
1648 &#32;&#32;&#32;&#32;&#32;&#32;}
1649 
1651 &#32;&#32;&#32;&#32;&#32;&#32;node_type
1652 &#32;&#32;&#32;&#32;&#32;&#32;extract(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)
1653 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.extract(__key);&#32;}
1654 
1656 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1657 &#32;&#32;&#32;&#32;&#32;&#32;insert(node_type&amp;&amp;&#32;__nh)
1658 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node_multi(cend(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
1659 
1661 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1662 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__hint,&#32;node_type&amp;&amp;&#32;__nh)
1663 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_reinsert_node_multi(__hint,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__nh));&#32;}
1664 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1665 
1667 
1680 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1681 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__position)
1682 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
1683 
1684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LWG&#32;2059.</emphasis>
1685 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1686 &#32;&#32;&#32;&#32;&#32;&#32;erase(iterator&#32;__position)
1687 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__position);&#32;}
1689 
1701 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1702 &#32;&#32;&#32;&#32;&#32;&#32;erase(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1703 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__x);&#32;}
1704 
1720 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1721 &#32;&#32;&#32;&#32;&#32;&#32;erase(const_iterator&#32;__first,&#32;const_iterator&#32;__last)
1722 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.erase(__first,&#32;__last);&#32;}
1723 
1730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1731 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;<emphasis role="keyword">noexcept</emphasis>
1732 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.clear();&#32;}
1733 
1744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1745 &#32;&#32;&#32;&#32;&#32;&#32;swap(unordered_multimap&amp;&#32;__x)
1746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(&#32;<emphasis role="keyword">noexcept</emphasis>(_M_h.swap(__x._M_h))&#32;)
1747 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.swap(__x._M_h);&#32;}
1748 
1749 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1750 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1751 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>std::_Hash_merge_helper;
1752 
1753 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1754 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1755 &#32;&#32;&#32;&#32;merge(unordered_multimap&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
1756 &#32;&#32;&#32;&#32;{
1757 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Hash_merge_helper&lt;unordered_multimap,&#32;_H2,&#32;_P2&gt;;
1759 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
1760 &#32;&#32;&#32;&#32;}
1761 
1762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1763 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1764 &#32;&#32;&#32;&#32;merge(unordered_multimap&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
1765 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
1766 
1767 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1768 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1769 &#32;&#32;&#32;&#32;merge(unordered_map&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&#32;__source)
1770 &#32;&#32;&#32;&#32;{
1771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Merge_helper
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Hash_merge_helper&lt;unordered_multimap,&#32;_H2,&#32;_P2&gt;;
1773 &#32;&#32;&#32;&#32;&#32;&#32;_M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
1774 &#32;&#32;&#32;&#32;}
1775 
1776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_H2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_P2&gt;
1777 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1778 &#32;&#32;&#32;&#32;merge(unordered_map&lt;_Key,&#32;_Tp,&#32;_H2,&#32;_P2,&#32;_Alloc&gt;&amp;&amp;&#32;__source)
1779 &#32;&#32;&#32;&#32;{&#32;merge(__source);&#32;}
1780 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1781 
1782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;observers.</emphasis>
1783 
1786 &#32;&#32;&#32;&#32;&#32;&#32;hasher
1787 &#32;&#32;&#32;&#32;&#32;&#32;hash_function()<emphasis role="keyword">&#32;const</emphasis>
1788 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.hash_function();&#32;}
1789 
1792 &#32;&#32;&#32;&#32;&#32;&#32;key_equal
1793 &#32;&#32;&#32;&#32;&#32;&#32;key_eq()<emphasis role="keyword">&#32;const</emphasis>
1794 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.key_eq();&#32;}
1795 
1796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;lookup.</emphasis>
1797 
1799 
1810 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1811 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1812 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
1813 
1814 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1815 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1816 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1817 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x))
1818 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x);&#32;}
1819 <emphasis role="preprocessor">#endif</emphasis>
1820 
1821 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1822 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1823 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x);&#32;}
1824 
1825 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1826 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1827 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1828 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x))
1829 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x);&#32;}
1830 <emphasis role="preprocessor">#endif</emphasis>
1832 
1834 
1839 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1840 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1841 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.count(__x);&#32;}
1842 
1843 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1845 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1846 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a22486c0c8d9f7d79a07bf22ecffeeb2f">count</link>(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_count_tr(__x))
1847 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_count_tr(__x);&#32;}
1848 <emphasis role="preprocessor">#endif</emphasis>
1850 
1851 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1853 
1858 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1859 &#32;&#32;&#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1860 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.find(__x)&#32;!=&#32;_M_h.end();&#32;}
1861 
1862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1863 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1864 &#32;&#32;&#32;&#32;contains(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1865 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_find_tr(__x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>(),&#32;<emphasis role="keyword">true</emphasis>)
1866 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_find_tr(__x)&#32;!=&#32;_M_h.end();&#32;}
1868 <emphasis role="preprocessor">#endif</emphasis>
1869 
1871 
1877 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;iterator,&#32;iterator&gt;
1878 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)
1879 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
1880 
1881 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1882 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1883 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1884 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)
1885 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__x))
1886 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__x);&#32;}
1887 <emphasis role="preprocessor">#endif</emphasis>
1888 
1889 &#32;&#32;&#32;&#32;&#32;&#32;std::pair&lt;const_iterator,&#32;const_iterator&gt;
1890 &#32;&#32;&#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__x)<emphasis role="keyword">&#32;const</emphasis>
1891 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.equal_range(__x);&#32;}
1892 
1893 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1894 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Kt&gt;
1895 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
1896 &#32;&#32;&#32;&#32;equal_range(<emphasis role="keyword">const</emphasis>&#32;_Kt&amp;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>
1897 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(_M_h._M_equal_range_tr(__x))
1898 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h._M_equal_range_tr(__x);&#32;}
1899 <emphasis role="preprocessor">#endif</emphasis>
1901 
1902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bucket&#32;interface.</emphasis>
1903 
1905 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1906 &#32;&#32;&#32;&#32;&#32;&#32;bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1907 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_count();&#32;}
1908 
1910 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1911 &#32;&#32;&#32;&#32;&#32;&#32;max_bucket_count()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1912 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_bucket_count();&#32;}
1913 
1914 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1915 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;number&#32;of&#32;elements&#32;in&#32;a&#32;given&#32;bucket.</emphasis>
1916 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__n&#32;&#32;A&#32;bucket&#32;index.</emphasis>
1917 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;number&#32;of&#32;elements&#32;in&#32;the&#32;bucket.</emphasis>
1918 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1919 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1920 &#32;&#32;&#32;&#32;&#32;&#32;bucket_size(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1921 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket_size(__n);&#32;}
1922 
1923 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1924 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@brief&#32;&#32;Returns&#32;the&#32;bucket&#32;index&#32;of&#32;a&#32;given&#32;element.</emphasis>
1925 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@param&#32;&#32;__key&#32;&#32;A&#32;key&#32;instance.</emphasis>
1926 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;@return&#32;&#32;The&#32;key&#32;bucket&#32;index.</emphasis>
1927 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1928 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1929 &#32;&#32;&#32;&#32;&#32;&#32;bucket(<emphasis role="keyword">const</emphasis>&#32;key_type&amp;&#32;__key)<emphasis role="keyword">&#32;const</emphasis>
1930 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.bucket(__key);&#32;}
1931 &#32;&#32;&#32;&#32;&#32;&#32;
1938 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
1939 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)
1940 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
1941 
1943 
1949 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1950 &#32;&#32;&#32;&#32;&#32;&#32;begin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1951 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.begin(__n);&#32;}
1952 
1953 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1954 &#32;&#32;&#32;&#32;&#32;&#32;cbegin(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1955 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cbegin(__n);&#32;}
1957 
1964 &#32;&#32;&#32;&#32;&#32;&#32;local_iterator
1965 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)
1966 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
1967 
1969 
1975 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1976 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1977 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.end(__n);&#32;}
1978 
1979 &#32;&#32;&#32;&#32;&#32;&#32;const_local_iterator
1980 &#32;&#32;&#32;&#32;&#32;&#32;cend(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1981 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.cend(__n);&#32;}
1983 
1984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;hash&#32;policy.</emphasis>
1985 
1987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
1988 &#32;&#32;&#32;&#32;&#32;&#32;load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1989 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.load_factor();&#32;}
1990 
1993 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>
1994 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor()&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1995 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_h.max_load_factor();&#32;}
1996 
2001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2002 &#32;&#32;&#32;&#32;&#32;&#32;max_load_factor(<emphasis role="keywordtype">float</emphasis>&#32;__z)
2003 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.max_load_factor(__z);&#32;}
2004 
2012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2013 &#32;&#32;&#32;&#32;&#32;&#32;rehash(size_type&#32;__n)
2014 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.rehash(__n);&#32;}
2015 
2023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2024 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__n)
2025 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_h.reserve(__n);&#32;}
2026 
2027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred1,
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc1&gt;
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2030 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&lt;_Key1,&#32;_Tp1,
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;,
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&lt;_Key1,&#32;_Tp1,
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash1,&#32;_Pred1,&#32;_Alloc1&gt;&amp;);
2034 &#32;&#32;&#32;&#32;};
2035 
2036 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
2037 
2038 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;__iter_to_alloc_t&lt;_InputIterator&gt;&gt;,
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
2044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
2045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2046 &#32;&#32;&#32;&#32;unordered_multimap(_InputIterator,&#32;_InputIterator,
2047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&lt;int,&#32;int&gt;::size_type&#32;=&#32;{},
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&#32;=&#32;_Allocator())
2050 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;__iter_key_t&lt;_InputIterator&gt;,
2051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,&#32;_Hash,&#32;_Pred,
2052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&gt;;
2053 
2054 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash&#32;=&#32;hash&lt;_Key&gt;,
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Pred&#32;=&#32;equal_to&lt;_Key&gt;,
2056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;pair&lt;const&#32;_Key,&#32;_Tp&gt;&gt;,
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Pred&gt;,
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2060 &#32;&#32;&#32;&#32;unordered_multimap(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
2061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&lt;int,&#32;int&gt;::size_type&#32;=&#32;{},
2062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash&#32;=&#32;_Hash(),&#32;_Pred&#32;=&#32;_Pred(),
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator&#32;=&#32;_Allocator())
2064 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Allocator&gt;;
2065 
2066 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
2067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
2068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2069 &#32;&#32;&#32;&#32;unordered_multimap(_InputIterator,&#32;_InputIterator,
2070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&lt;int,&#32;int&gt;::size_type,&#32;_Allocator)
2071 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;__iter_key_t&lt;_InputIterator&gt;,
2072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,
2073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
2074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,&#32;_Allocator&gt;;
2075 
2076 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
2077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
2078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2079 &#32;&#32;&#32;&#32;unordered_multimap(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
2080 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;__iter_key_t&lt;_InputIterator&gt;,
2081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hash&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,
2083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,&#32;_Allocator&gt;;
2084 
2085 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
2087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2089 &#32;&#32;&#32;&#32;unordered_multimap(_InputIterator,&#32;_InputIterator,
2090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&lt;int,&#32;int&gt;::size_type,&#32;_Hash,
2091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator)
2092 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;__iter_key_t&lt;_InputIterator&gt;,
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_val_t&lt;_InputIterator&gt;,&#32;_Hash,
2094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;equal_to&lt;__iter_key_t&lt;_InputIterator&gt;&gt;,&#32;_Allocator&gt;;
2095 
2096 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2098 &#32;&#32;&#32;&#32;unordered_multimap(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&lt;int,&#32;int&gt;::size_type,
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Allocator)
2101 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;hash&lt;_Key&gt;,&#32;equal_to&lt;_Key&gt;,&#32;_Allocator&gt;;
2102 
2103 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2105 &#32;&#32;&#32;&#32;unordered_multimap(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,&#32;_Allocator)
2106 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;hash&lt;_Key&gt;,&#32;equal_to&lt;_Key&gt;,&#32;_Allocator&gt;;
2107 
2108 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
2109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocatorOrIntegral&lt;_Hash&gt;,
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
2111 &#32;&#32;&#32;&#32;unordered_multimap(initializer_list&lt;pair&lt;_Key,&#32;_Tp&gt;&gt;,
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unordered_multimap&lt;int,&#32;int&gt;::size_type,
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Hash,&#32;_Allocator)
2114 &#32;&#32;&#32;&#32;-&gt;&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;equal_to&lt;_Key&gt;,&#32;_Allocator&gt;;
2115 
2116 <emphasis role="preprocessor">#endif</emphasis>
2117 
2118 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
2119 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2120 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
2121 &#32;&#32;&#32;&#32;&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
2122 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
2123 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
2124 
2125 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
2126 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2127 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
2128 &#32;&#32;&#32;&#32;&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
2129 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
2130 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
2131 
2132 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
2133 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2134 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
2135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
2136 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_h._M_equal(__y._M_h);&#32;}
2137 
2138 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
2139 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
2140 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2141 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_map&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
2143 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
2144 <emphasis role="preprocessor">#endif</emphasis>
2145 
2146 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
2147 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2148 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
2150 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_h._M_equal(__y._M_h);&#32;}
2151 
2152 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
2153 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Key,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">class</emphasis>&#32;_Hash,&#32;<emphasis role="keyword">class</emphasis>&#32;_Pred,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
2154 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2155 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__x,
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;unordered_multimap&lt;_Key,&#32;_Tp,&#32;_Hash,&#32;_Pred,&#32;_Alloc&gt;&amp;&#32;__y)
2157 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
2158 <emphasis role="preprocessor">#endif</emphasis>
2159 
2160 _GLIBCXX_END_NAMESPACE_CONTAINER
2161 
2162 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
2163 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::unordered_map&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;maps.</emphasis>
2164 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq1,
2165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq2&gt;
2166 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_merge_helper&lt;
2167 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::unordered_map&lt;_Key,&#32;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;,
2168 &#32;&#32;&#32;&#32;&#32;&#32;_Hash2,&#32;_Eq2&gt;
2169 &#32;&#32;&#32;&#32;{
2170 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
2172 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_map&#32;=&#32;_GLIBCXX_STD_C::unordered_map&lt;_Tp...&gt;;
2173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
2174 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_multimap&#32;=&#32;_GLIBCXX_STD_C::unordered_multimap&lt;_Tp...&gt;;
2175 
2176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;unordered_map&lt;_Key,&#32;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;;
2177 
2178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
2179 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_map&lt;_Key,&#32;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__map)
2180 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_h;&#32;}
2181 
2182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
2183 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_multimap&lt;_Key,&#32;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__map)
2184 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_h;&#32;}
2185 &#32;&#32;&#32;&#32;};
2186 
2187 &#32;&#32;<emphasis role="comment">//&#32;Allow&#32;std::unordered_multimap&#32;access&#32;to&#32;internals&#32;of&#32;compatible&#32;maps.</emphasis>
2188 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Key,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Val,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq1,
2189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Hash2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Eq2&gt;
2190 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Hash_merge_helper&lt;
2191 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::unordered_multimap&lt;_Key,&#32;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;,
2192 &#32;&#32;&#32;&#32;&#32;&#32;_Hash2,&#32;_Eq2&gt;
2193 &#32;&#32;&#32;&#32;{
2194 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
2196 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_map&#32;=&#32;_GLIBCXX_STD_C::unordered_map&lt;_Tp...&gt;;
2197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Tp&gt;
2198 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>unordered_multimap&#32;=&#32;_GLIBCXX_STD_C::unordered_multimap&lt;_Tp...&gt;;
2199 
2200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;unordered_multimap&lt;_Key,&#32;_Val,&#32;_Hash1,&#32;_Eq1,&#32;_Alloc&gt;;
2201 
2202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
2203 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_map&lt;_Key,&#32;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__map)
2204 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_h;&#32;}
2205 
2206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
2207 &#32;&#32;&#32;&#32;&#32;&#32;_S_get_table(unordered_multimap&lt;_Key,&#32;_Val,&#32;_Hash2,&#32;_Eq2,&#32;_Alloc&gt;&amp;&#32;__map)
2208 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__map._M_h;&#32;}
2209 &#32;&#32;&#32;&#32;};
2210 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2211 
2212 _GLIBCXX_END_NAMESPACE_VERSION
2213 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
2214 
2215 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_UNORDERED_MAP_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
