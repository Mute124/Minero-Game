<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2basic__string_8h_source" xml:lang="en-US">
<title>basic_string.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/basic_string.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Components&#32;for&#32;manipulating&#32;sequences&#32;of&#32;characters&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;1997-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//</emphasis>
31 <emphasis role="comment">//&#32;ISO&#32;C++&#32;14882:&#32;21&#32;Strings&#32;library</emphasis>
32 <emphasis role="comment">//</emphasis>
33 
34 <emphasis role="preprocessor">#ifndef&#32;_BASIC_STRING_H</emphasis>
35 <emphasis role="preprocessor">#define&#32;_BASIC_STRING_H&#32;1</emphasis>
36 
37 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;ext/alloc_traits.h&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
41 
42 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
43 <emphasis role="preprocessor">#include&#32;&lt;initializer_list&gt;</emphasis>
44 <emphasis role="preprocessor">#endif</emphasis>
45 
46 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
47 <emphasis role="preprocessor">#&#32;include&#32;&lt;string_view&gt;</emphasis>
48 <emphasis role="preprocessor">#endif</emphasis>
49 
50 <emphasis role="preprocessor">#if&#32;!&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
51 <emphasis role="preprocessor">#&#32;include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2bits_2cow__string_8h">cow_string.h</link>&quot;</emphasis>
52 <emphasis role="preprocessor">#else</emphasis>
53 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
54 {
55 _GLIBCXX_BEGIN_NAMESPACE_VERSION
56 _GLIBCXX_BEGIN_NAMESPACE_CXX11
57 
58 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_is_constant_evaluated</emphasis>
59 <emphasis role="comment">//&#32;Support&#32;P0980R1&#32;in&#32;C++20.</emphasis>
60 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_string&#32;201907L</emphasis>
61 <emphasis role="preprocessor">#elif&#32;__cplusplus&#32;&gt;=&#32;201703L&#32;&amp;&amp;&#32;_GLIBCXX_HAVE_IS_CONSTANT_EVALUATED</emphasis>
62 <emphasis role="comment">//&#32;Support&#32;P0426R1&#32;changes&#32;to&#32;char_traits&#32;in&#32;C++17.</emphasis>
63 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_constexpr_string&#32;201611L</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 
84 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classbasic__string">basic_string</link>
86 &#32;&#32;&#32;&#32;{
87 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template
88 &#32;&#32;&#32;&#32;rebind&lt;_CharT&gt;::other&#32;_Char_alloc_type;
89 
90 <emphasis role="preprocessor">#if&#32;__cpp_lib_constexpr_string&#32;&lt;&#32;201907L</emphasis>
91 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Char_alloc_type&gt;&#32;_Alloc_traits;
92 <emphasis role="preprocessor">#else</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Traits2,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Dummy_for_PR85282&gt;
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Alloc_traits_impl&#32;:&#32;__gnu_cxx::__alloc_traits&lt;_Char_alloc_type&gt;
95 &#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__alloc_traits&lt;_Char_alloc_type&gt;&#32;_Base;
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;[[__gnu__::__always_inline__]]
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::pointer
100 &#32;&#32;&#32;&#32;&#32;&#32;allocate(_Char_alloc_type&amp;&#32;__a,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::size_type&#32;__n)
101 &#32;&#32;&#32;&#32;&#32;&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p&#32;=&#32;_Base::allocate(__a,&#32;__n);
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Begin&#32;the&#32;lifetime&#32;of&#32;characters&#32;in&#32;allocated&#32;storage.</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(size_type&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;__n;&#32;++__i)
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::construct_at(__builtin_addressof(__p[__i]));
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;
108 &#32;&#32;&#32;&#32;&#32;&#32;}
109 &#32;&#32;&#32;&#32;};
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Dummy_for_PR85282&gt;
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Alloc_traits_impl&lt;char_traits&lt;_CharT&gt;,&#32;_Dummy_for_PR85282&gt;
113 &#32;&#32;&#32;&#32;:&#32;__gnu_cxx::__alloc_traits&lt;_Char_alloc_type&gt;
114 &#32;&#32;&#32;&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::char_traits&#32;begins&#32;the&#32;lifetime&#32;of&#32;characters.</emphasis>
116 &#32;&#32;&#32;&#32;};
117 
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Alloc_traits&#32;=&#32;_Alloc_traits_impl&lt;_Traits,&#32;void&gt;;
119 <emphasis role="preprocessor">#endif</emphasis>
120 
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Types:</emphasis>
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::char_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Char_alloc_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::size_type&#32;&#32;&#32;&#32;&#32;size_type;
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::difference_type&#32;&#32;&#32;difference_type;
128 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::reference&#32;&#32;&#32;&#32;&#32;reference;
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_reference&#32;&#32;&#32;const_reference;
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::pointer&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::const_pointer&#32;const_pointer;
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__normal_iterator&lt;pointer,&#32;basic_string&gt;&#32;&#32;iterator;
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__gnu_cxx::__normal_iterator&lt;const_pointer,&#32;basic_string&gt;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;const_iterator&gt;&#32;const_reverse_iterator;
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::reverse_iterator&lt;iterator&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator;
137 
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;&#32;&#32;&#32;npos&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(-1);
140 
141 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type&#32;used&#32;for&#32;positions&#32;in&#32;insert,&#32;erase&#32;etc.</emphasis>
143 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator&#32;__const_iterator;
145 <emphasis role="preprocessor">#else</emphasis>
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;const_iterator&#32;__const_iterator;
147 <emphasis role="preprocessor">#endif</emphasis>
148 
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
150 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;A&#32;helper&#32;type&#32;for&#32;avoiding&#32;boiler-plate.</emphasis>
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__sv_type;
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Res&gt;
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_If_sv&#32;=&#32;<link linkend="_namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c">enable_if_t</link>&lt;
156 &#32;&#32;&#32;&#32;&#32;&#32;__and_&lt;is_convertible&lt;const&#32;_Tp&amp;,&#32;__sv_type&gt;,
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_convertible&lt;const&#32;_Tp*,&#32;const&#32;basic_string*&gt;&gt;,
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_convertible&lt;const&#32;_Tp&amp;,&#32;const&#32;_CharT*&gt;&gt;&gt;<link linkend="_classvalue">::value</link>,
159 &#32;&#32;&#32;&#32;&#32;&#32;_Res&gt;;
160 
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allows&#32;an&#32;implicit&#32;conversion&#32;to&#32;__sv_type.</emphasis>
162 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;__sv_type
164 &#32;&#32;&#32;&#32;&#32;&#32;_S_to_string_view(__sv_type&#32;__svt)&#32;<emphasis role="keyword">noexcept</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__svt;&#32;}
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Wraps&#32;a&#32;string_view&#32;by&#32;explicit&#32;conversion&#32;and&#32;thus</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allows&#32;to&#32;add&#32;an&#32;internal&#32;constructor&#32;that&#32;does&#32;not</emphasis>
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;participate&#32;in&#32;overload&#32;resolution&#32;when&#32;a&#32;string_view</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;is&#32;provided.</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sv_wrapper
172 &#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR&#32;<emphasis role="keyword">explicit</emphasis>
174 &#32;&#32;&#32;&#32;__sv_wrapper(__sv_type&#32;__sv)&#32;noexcept&#32;:&#32;_M_sv(__sv)&#32;{&#32;}
175 
176 &#32;&#32;&#32;&#32;__sv_type&#32;_M_sv;
177 &#32;&#32;&#32;&#32;&#32;&#32;};
178 
185 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(__sv_wrapper&#32;__svw,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
188 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_classbasic__string">basic_string</link>(__svw._M_sv.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;__svw._M_sv.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__a)&#32;{&#32;}
189 <emphasis role="preprocessor">#endif</emphasis>
190 
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;empty-base&#32;optimization:&#32;http://www.cantrip.org/emptyopt.html</emphasis>
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Alloc_hider&#32;:&#32;allocator_type&#32;<emphasis role="comment">//&#32;TODO&#32;check&#32;__is_final</emphasis>
193 &#32;&#32;&#32;&#32;&#32;&#32;{
194 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
195 &#32;&#32;&#32;&#32;_Alloc_hider(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__dat,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
196 &#32;&#32;&#32;&#32;:&#32;allocator_type(__a),&#32;_M_p(__dat)&#32;{&#32;}
197 <emphasis role="preprocessor">#else</emphasis>
198 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
199 &#32;&#32;&#32;&#32;_Alloc_hider(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__dat,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
200 &#32;&#32;&#32;&#32;:&#32;allocator_type(__a),&#32;_M_p(__dat)&#32;{&#32;}
201 
202 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
203 &#32;&#32;&#32;&#32;_Alloc_hider(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__dat,&#32;_Alloc&amp;&amp;&#32;__a&#32;=&#32;_Alloc())
204 &#32;&#32;&#32;&#32;:&#32;allocator_type(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__a)),&#32;_M_p(__dat)&#32;{&#32;}
205 <emphasis role="preprocessor">#endif</emphasis>
206 
207 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_p;&#32;<emphasis role="comment">//&#32;The&#32;actual&#32;data.</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;};
209 
210 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_hider&#32;&#32;_M_dataplus;
211 &#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;_M_string_length;
212 
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_local_capacity&#32;=&#32;15&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_CharT)&#32;};
214 
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union</emphasis>
216 &#32;&#32;&#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_local_buf[_S_local_capacity&#32;+&#32;1];
218 &#32;&#32;&#32;&#32;size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_allocated_capacity;
219 &#32;&#32;&#32;&#32;&#32;&#32;};
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
222 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;_M_data(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)
224 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_dataplus._M_p&#32;=&#32;__p;&#32;}
225 
226 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
228 &#32;&#32;&#32;&#32;&#32;&#32;_M_length(size_type&#32;__length)
229 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_string_length&#32;=&#32;__length;&#32;}
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
232 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
233 &#32;&#32;&#32;&#32;&#32;&#32;_M_data()<emphasis role="keyword">&#32;const</emphasis>
234 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus._M_p;&#32;}
235 
236 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
238 &#32;&#32;&#32;&#32;&#32;&#32;_M_local_data()
239 &#32;&#32;&#32;&#32;&#32;&#32;{
240 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pointer_traits&lt;pointer&gt;::pointer_to(*_M_local_buf);
242 <emphasis role="preprocessor">#else</emphasis>
243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>(_M_local_buf);
244 <emphasis role="preprocessor">#endif</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;}
246 
247 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
248 &#32;&#32;&#32;&#32;&#32;&#32;const_pointer
249 &#32;&#32;&#32;&#32;&#32;&#32;_M_local_data()<emphasis role="keyword">&#32;const</emphasis>
250 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
251 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pointer_traits&lt;const_pointer&gt;::pointer_to(*_M_local_buf);
253 <emphasis role="preprocessor">#else</emphasis>
254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_pointer(_M_local_buf);
255 <emphasis role="preprocessor">#endif</emphasis>
256 &#32;&#32;&#32;&#32;&#32;&#32;}
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(size_type&#32;__capacity)
261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_allocated_capacity&#32;=&#32;__capacity;&#32;}
262 
263 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
265 &#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(size_type&#32;__n)
266 &#32;&#32;&#32;&#32;&#32;&#32;{
267 &#32;&#32;&#32;&#32;_M_length(__n);
268 &#32;&#32;&#32;&#32;traits_type::assign(_M_data()[__n],&#32;_CharT());
269 &#32;&#32;&#32;&#32;&#32;&#32;}
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
272 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
273 &#32;&#32;&#32;&#32;&#32;&#32;_M_is_local()<emphasis role="keyword">&#32;const</emphasis>
274 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()&#32;==&#32;_M_local_data();&#32;}
275 
276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;&amp;&#32;Destroy</emphasis>
277 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
278 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
279 &#32;&#32;&#32;&#32;&#32;&#32;_M_create(size_type&amp;,&#32;size_type);
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
282 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()
284 &#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_is_local())
286 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(_M_allocated_capacity);
287 &#32;&#32;&#32;&#32;&#32;&#32;}
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(size_type&#32;__size)&#32;<emphasis role="keywordflow">throw</emphasis>()
292 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Alloc_traits::deallocate(_M_get_allocator(),&#32;_M_data(),&#32;__size&#32;+&#32;1);&#32;}
293 
294 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L&#32;||&#32;defined&#32;_GLIBCXX_DEFINING_STRING_INSTANTIATIONS</emphasis>
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_construct_aux&#32;is&#32;used&#32;to&#32;implement&#32;the&#32;21.3.1&#32;para&#32;15&#32;which</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;requires&#32;special&#32;behaviour&#32;if&#32;_InIterator&#32;is&#32;an&#32;integral&#32;type</emphasis>
297 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__false_type)
301 &#32;&#32;&#32;&#32;{
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InIterator&gt;::iterator_category&#32;_Tag;
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct(__beg,&#32;__end,&#32;_Tag());
304 &#32;&#32;&#32;&#32;}
305 
306 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;438.&#32;Ambiguity&#32;in&#32;the&#32;&quot;do&#32;the&#32;right&#32;thing&quot;&#32;clause</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Integer&gt;
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux(_Integer&#32;__beg,&#32;_Integer&#32;__end,&#32;std::__true_type)
311 &#32;&#32;&#32;&#32;{&#32;_M_construct_aux_2(<emphasis role="keyword">static_cast&lt;</emphasis>size_type<emphasis role="keyword">&gt;</emphasis>(__beg),&#32;__end);&#32;}
312 
313 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
314 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux_2(size_type&#32;__req,&#32;_CharT&#32;__c)
315 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_construct(__req,&#32;__c);&#32;}
316 <emphasis role="preprocessor">#endif</emphasis>
317 
318 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;Input&#32;Iterators,&#32;used&#32;in&#32;istreambuf_iterators,&#32;etc.</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InIterator&gt;
320 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct(_InIterator&#32;__beg,&#32;_InIterator&#32;__end,
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::input_iterator_tag);
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;forward_iterators&#32;up&#32;to&#32;random_access_iterators,&#32;used&#32;for</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;string::iterator,&#32;_CharT*,&#32;etc.</emphasis>
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FwdIterator&gt;
328 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_construct(_FwdIterator&#32;__beg,&#32;_FwdIterator&#32;__end,
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag);
332 
333 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
335 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct(size_type&#32;__req,&#32;_CharT&#32;__c);
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
338 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type&amp;
339 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_allocator()
340 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus;&#32;}
341 
342 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;allocator_type&amp;
344 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_allocator()<emphasis role="keyword">&#32;const</emphasis>
345 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_dataplus;&#32;}
346 
347 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;that&#32;_M_local_buf&#32;is&#32;the&#32;active&#32;member&#32;of&#32;the&#32;union.</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__always_inline__))
349 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX14_CONSTEXPR
350 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
351 &#32;&#32;&#32;&#32;&#32;&#32;_M_use_local_data()&#32;_GLIBCXX_NOEXCEPT
352 &#32;&#32;&#32;&#32;&#32;&#32;{
353 <emphasis role="preprocessor">#if&#32;__cpp_lib_is_constant_evaluated</emphasis>
354 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(std::is_constant_evaluated())
355 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_CharT&amp;&#32;__c&#32;:&#32;_M_local_buf)
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c&#32;=&#32;_CharT();
357 <emphasis role="preprocessor">#endif</emphasis>
358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_local_data();
359 &#32;&#32;&#32;&#32;&#32;&#32;}
360 
361 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
362 
363 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DISAMBIGUATE_REPLACE_INST</emphasis>
364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;explicit&#32;instantiations&#32;in&#32;misc-inst.cc&#32;require&#32;this&#32;due&#32;to</emphasis>
365 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063</emphasis>
366 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Requires&#32;=
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!__are_same&lt;_Tp,&#32;_CharT*&gt;::__value
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__are_same&lt;_Tp,&#32;const&#32;_CharT*&gt;::__value
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__are_same&lt;_Tp,&#32;iterator&gt;::__value
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!__are_same&lt;_Tp,&#32;const_iterator&gt;::__value&gt;
371 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__enable_if_not_native_iterator
372 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__type;&#32;};
373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__enable_if_not_native_iterator&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;&#32;{&#32;};
375 <emphasis role="preprocessor">#endif</emphasis>
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
378 &#32;&#32;&#32;&#32;&#32;&#32;size_type
379 &#32;&#32;&#32;&#32;&#32;&#32;_M_check(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
380 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__pos&#32;&gt;&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
382 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;%s:&#32;__pos&#32;(which&#32;is&#32;%zu)&#32;&gt;&#32;&quot;</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;this-&gt;size()&#32;(which&#32;is&#32;%zu)&quot;</emphasis>),
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s,&#32;__pos,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__pos;
386 &#32;&#32;&#32;&#32;&#32;&#32;}
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
389 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
390 &#32;&#32;&#32;&#32;&#32;&#32;_M_check_length(size_type&#32;__n1,&#32;size_type&#32;__n2,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
391 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;max_size()&#32;-&#32;(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;__n1)&#32;&lt;&#32;__n2)
393 &#32;&#32;&#32;&#32;&#32;&#32;__throw_length_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(__s));
394 &#32;&#32;&#32;&#32;&#32;&#32;}
395 
396 
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;_M_limit&#32;doesn&apos;t&#32;check&#32;for&#32;a&#32;bad&#32;__pos&#32;value.</emphasis>
398 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
399 &#32;&#32;&#32;&#32;&#32;&#32;size_type
400 &#32;&#32;&#32;&#32;&#32;&#32;_M_limit(size_type&#32;__pos,&#32;size_type&#32;__off)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
401 &#32;&#32;&#32;&#32;&#32;&#32;{
402 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__testoff&#32;=&#32;&#32;__off&#32;&lt;&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;__pos;
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__testoff&#32;?&#32;__off&#32;:&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;__pos;
404 &#32;&#32;&#32;&#32;&#32;&#32;}
405 
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True&#32;if&#32;_Rep&#32;and&#32;source&#32;do&#32;not&#32;overlap.</emphasis>
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;_M_disjunct(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
409 &#32;&#32;&#32;&#32;&#32;&#32;{
410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(less&lt;const&#32;_CharT*&gt;()(__s,&#32;_M_data())
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;less&lt;const&#32;_CharT*&gt;()(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__s));
412 &#32;&#32;&#32;&#32;&#32;&#32;}
413 
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;__n&#32;=&#32;1&#32;way&#32;faster&#32;than&#32;the&#32;general&#32;multichar</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;traits_type::copy/move/assign.</emphasis>
416 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
418 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy(_CharT*&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
419 &#32;&#32;&#32;&#32;&#32;&#32;{
420 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
421 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__d,&#32;*__s);
422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(__d,&#32;__s,&#32;__n);
424 &#32;&#32;&#32;&#32;&#32;&#32;}
425 
426 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
428 &#32;&#32;&#32;&#32;&#32;&#32;_S_move(_CharT*&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
429 &#32;&#32;&#32;&#32;&#32;&#32;{
430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
431 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__d,&#32;*__s);
432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::move(__d,&#32;__s,&#32;__n);
434 &#32;&#32;&#32;&#32;&#32;&#32;}
435 
436 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
438 &#32;&#32;&#32;&#32;&#32;&#32;_S_assign(_CharT*&#32;__d,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)
439 &#32;&#32;&#32;&#32;&#32;&#32;{
440 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;1)
441 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__d,&#32;__c);
442 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
443 &#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(__d,&#32;__n,&#32;__c);
444 &#32;&#32;&#32;&#32;&#32;&#32;}
445 
446 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_copy_chars&#32;is&#32;a&#32;separate&#32;template&#32;to&#32;permit&#32;specialization</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;optimize&#32;for&#32;the&#32;common&#32;case&#32;of&#32;pointers&#32;as&#32;iterators.</emphasis>
448 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Iterator&gt;
449 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;_Iterator&#32;__k1,&#32;_Iterator&#32;__k2)
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;__k1&#32;!=&#32;__k2;&#32;++__k1,&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>)++__p)
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::assign(*__p,&#32;*__k1);&#32;<emphasis role="comment">//&#32;These&#32;types&#32;are&#32;off.</emphasis>
455 &#32;&#32;&#32;&#32;}
456 
457 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
458 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
459 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;iterator&#32;__k1,&#32;iterator&#32;__k2)&#32;_GLIBCXX_NOEXCEPT
460 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_copy_chars(__p,&#32;__k1.base(),&#32;__k2.base());&#32;}
461 
462 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
463 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;const_iterator&#32;__k1,&#32;const_iterator&#32;__k2)
465 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
466 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_copy_chars(__p,&#32;__k1.base(),&#32;__k2.base());&#32;}
467 
468 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
469 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
470 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;_CharT*&#32;__k1,&#32;_CharT*&#32;__k2)&#32;_GLIBCXX_NOEXCEPT
471 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_copy(__p,&#32;__k1,&#32;__k2&#32;-&#32;__k1);&#32;}
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;_S_copy_chars(_CharT*&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k2)
476 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
477 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_S_copy(__p,&#32;__k1,&#32;__k2&#32;-&#32;__k1);&#32;}
478 
479 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
481 &#32;&#32;&#32;&#32;&#32;&#32;_S_compare(size_type&#32;__n1,&#32;size_type&#32;__n2)&#32;_GLIBCXX_NOEXCEPT
482 &#32;&#32;&#32;&#32;&#32;&#32;{
483 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;difference_type&#32;__d&#32;=&#32;difference_type(__n1&#32;-&#32;__n2);
484 
485 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d&#32;&gt;&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__max)
486 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__max;
487 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__d&#32;&lt;&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__min)
488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__numeric_traits&lt;int&gt;::__min;
489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;int(__d);
491 &#32;&#32;&#32;&#32;&#32;&#32;}
492 
493 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
494 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
495 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;);
496 
497 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;_M_mutate(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__len2);
501 
502 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
503 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
504 &#32;&#32;&#32;&#32;&#32;&#32;_M_erase(size_type&#32;__pos,&#32;size_type&#32;__n);
505 
506 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
507 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Construct/copy/destroy:</emphasis>
508 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;We&#32;overload&#32;ctors&#32;in&#32;some&#32;cases&#32;instead&#32;of&#32;using&#32;default</emphasis>
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arguments,&#32;per&#32;17.4.4.4&#32;para.&#32;2&#32;item&#32;2.</emphasis>
510 
514 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
515 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>()
516 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible&lt;_Alloc&gt;::<link linkend="_classvalue">value</link>)
517 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data())
518 &#32;&#32;&#32;&#32;&#32;&#32;{
519 &#32;&#32;&#32;&#32;_M_use_local_data();
520 &#32;&#32;&#32;&#32;_M_set_length(0);
521 &#32;&#32;&#32;&#32;&#32;&#32;}
522 
526 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
528 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;_GLIBCXX_NOEXCEPT
529 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
530 &#32;&#32;&#32;&#32;&#32;&#32;{
531 &#32;&#32;&#32;&#32;_M_use_local_data();
532 &#32;&#32;&#32;&#32;_M_set_length(0);
533 &#32;&#32;&#32;&#32;&#32;&#32;}
534 
539 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
540 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
541 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
543 &#32;&#32;&#32;&#32;&#32;&#32;{
544 &#32;&#32;&#32;&#32;_M_construct(__str._M_data(),&#32;__str._M_data()&#32;+&#32;__str.length(),
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag());
546 &#32;&#32;&#32;&#32;&#32;&#32;}
547 
548 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2583.&#32;no&#32;way&#32;to&#32;supply&#32;an&#32;allocator&#32;for&#32;basic_string(str,&#32;pos)</emphasis>
556 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
557 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
559 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
560 &#32;&#32;&#32;&#32;&#32;&#32;{
561 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__start&#32;=&#32;__str._M_data()
562 &#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::basic_string&quot;</emphasis>);
563 &#32;&#32;&#32;&#32;_M_construct(__start,&#32;__start&#32;+&#32;__str._M_limit(__pos,&#32;npos),
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag());
565 &#32;&#32;&#32;&#32;&#32;&#32;}
566 
573 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
574 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n)
576 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data())
577 &#32;&#32;&#32;&#32;&#32;&#32;{
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__start&#32;=&#32;__str._M_data()
579 &#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::basic_string&quot;</emphasis>);
580 &#32;&#32;&#32;&#32;_M_construct(__start,&#32;__start&#32;+&#32;__str._M_limit(__pos,&#32;__n),
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag());
582 &#32;&#32;&#32;&#32;&#32;&#32;}
583 
591 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
592 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
594 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
595 &#32;&#32;&#32;&#32;&#32;&#32;{
596 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__start
597 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__str._M_data()&#32;+&#32;__str._M_check(__pos,&#32;<emphasis role="stringliteral">&quot;string::string&quot;</emphasis>);
598 &#32;&#32;&#32;&#32;_M_construct(__start,&#32;__start&#32;+&#32;__str._M_limit(__pos,&#32;__n),
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward_iterator_tag());
600 &#32;&#32;&#32;&#32;&#32;&#32;}
601 
611 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
612 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n,
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
614 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
615 &#32;&#32;&#32;&#32;&#32;&#32;{
616 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Not&#32;required,&#32;but&#32;considered&#32;best&#32;practice.</emphasis>
617 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s&#32;==&#32;0&#32;&amp;&amp;&#32;__n&#32;&gt;&#32;0)
618 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string:&#32;&quot;</emphasis>
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;construction&#32;from&#32;null&#32;is&#32;not&#32;valid&quot;</emphasis>));
620 &#32;&#32;&#32;&#32;_M_construct(__s,&#32;__s&#32;+&#32;__n,&#32;std::forward_iterator_tag());
621 &#32;&#32;&#32;&#32;&#32;&#32;}
622 
628 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&amp;&amp;&#32;!&#32;defined&#32;_GLIBCXX_DEFINING_STRING_INSTANTIATIONS</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3076.&#32;basic_string&#32;CTAD&#32;ambiguity</emphasis>
631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Alloc&gt;&gt;
632 <emphasis role="preprocessor">#endif</emphasis>
633 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
634 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
635 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
636 &#32;&#32;&#32;&#32;&#32;&#32;{
637 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NB:&#32;Not&#32;required,&#32;but&#32;considered&#32;best&#32;practice.</emphasis>
638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__s&#32;==&#32;0)
639 &#32;&#32;&#32;&#32;&#32;&#32;std::__throw_logic_error(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string:&#32;&quot;</emphasis>
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;construction&#32;from&#32;null&#32;is&#32;not&#32;valid&quot;</emphasis>));
641 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__end&#32;=&#32;__s&#32;+&#32;traits_type::length(__s);
642 &#32;&#32;&#32;&#32;_M_construct(__s,&#32;__end,&#32;forward_iterator_tag());
643 &#32;&#32;&#32;&#32;&#32;&#32;}
644 
651 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&amp;&amp;&#32;!&#32;defined&#32;_GLIBCXX_DEFINING_STRING_INSTANTIATIONS</emphasis>
652 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3076.&#32;basic_string&#32;CTAD&#32;ambiguity</emphasis>
654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Alloc&gt;&gt;
655 <emphasis role="preprocessor">#endif</emphasis>
656 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
657 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(size_type&#32;__n,&#32;_CharT&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
658 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
659 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_construct(__n,&#32;__c);&#32;}
660 
661 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
669 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
670 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str)&#32;noexcept
671 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__str._M_get_allocator()))
672 &#32;&#32;&#32;&#32;&#32;&#32;{
673 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str._M_is_local())
674 &#32;&#32;&#32;&#32;&#32;&#32;{
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(_M_local_buf,&#32;__str._M_local_buf,
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str.length()&#32;+&#32;1);
677 &#32;&#32;&#32;&#32;&#32;&#32;}
678 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
679 &#32;&#32;&#32;&#32;&#32;&#32;{
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(__str._M_data());
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__str._M_allocated_capacity);
682 &#32;&#32;&#32;&#32;&#32;&#32;}
683 
684 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;use&#32;_M_length()&#32;here&#32;not&#32;_M_set_length()&#32;because</emphasis>
685 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;basic_stringbuf&#32;relies&#32;on&#32;writing&#32;into&#32;unallocated&#32;capacity&#32;so</emphasis>
686 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;mess&#32;up&#32;the&#32;contents&#32;if&#32;we&#32;put&#32;a&#32;&apos;\0&apos;&#32;in&#32;the&#32;string.</emphasis>
687 &#32;&#32;&#32;&#32;_M_length(__str.length());
688 &#32;&#32;&#32;&#32;__str._M_data(__str._M_local_data());
689 &#32;&#32;&#32;&#32;__str._M_set_length(0);
690 &#32;&#32;&#32;&#32;&#32;&#32;}
691 
697 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
698 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(initializer_list&lt;_CharT&gt;&#32;__l,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
699 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
700 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_construct(__l.begin(),&#32;__l.end(),&#32;std::forward_iterator_tag());&#32;}
701 
702 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
703 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
704 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
705 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_construct(__str.begin(),&#32;__str.end(),&#32;std::forward_iterator_tag());&#32;}
706 
707 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
708 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Alloc_traits::_S_always_equal())
710 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
711 &#32;&#32;&#32;&#32;&#32;&#32;{
712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str._M_is_local())
713 &#32;&#32;&#32;&#32;&#32;&#32;{
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::copy(_M_local_buf,&#32;__str._M_local_buf,
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str.length()&#32;+&#32;1);
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_length(__str.length());
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_set_length(0);
718 &#32;&#32;&#32;&#32;&#32;&#32;}
719 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Alloc_traits::_S_always_equal()
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;__str.get_allocator()&#32;==&#32;__a)
721 &#32;&#32;&#32;&#32;&#32;&#32;{
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(__str._M_data());
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_length(__str.length());
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__str._M_allocated_capacity);
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data(__str._M_local_buf);
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_set_length(0);
727 &#32;&#32;&#32;&#32;&#32;&#32;}
728 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
729 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct(__str.begin(),&#32;__str.end(),&#32;std::forward_iterator_tag());
730 &#32;&#32;&#32;&#32;&#32;&#32;}
731 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
732 
733 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202100L</emphasis>
734 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(nullptr_t)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
735 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;operator=(nullptr_t)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
736 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++23</emphasis>
737 
744 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
747 <emphasis role="preprocessor">#else</emphasis>
748 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
749 <emphasis role="preprocessor">#endif</emphasis>
750 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end,
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
753 &#32;&#32;&#32;&#32;:&#32;_M_dataplus(_M_local_data(),&#32;__a)
754 &#32;&#32;&#32;&#32;{
755 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
756 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct(__beg,&#32;__end,&#32;std::__iterator_category(__beg));
757 <emphasis role="preprocessor">#else</emphasis>
758 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
759 &#32;&#32;&#32;&#32;&#32;&#32;_M_construct_aux(__beg,&#32;__end,&#32;_Integral());
760 <emphasis role="preprocessor">#endif</emphasis>
761 &#32;&#32;&#32;&#32;}
762 
763 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
771 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;enable_if_t&lt;is_convertible_v&lt;const&#32;_Tp&amp;,&#32;__sv_type&gt;&gt;&gt;
773 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
774 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t,&#32;size_type&#32;__pos,&#32;size_type&#32;__n,
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
776 &#32;&#32;&#32;&#32;:&#32;<link linkend="_classbasic__string">basic_string</link>(_S_to_string_view(__t).substr(__pos,&#32;__n),&#32;__a)&#32;{&#32;}
777 
783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_If_sv&lt;_Tp,&#32;<emphasis role="keywordtype">void</emphasis>&gt;&gt;
784 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
785 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
786 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__t,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a&#32;=&#32;_Alloc())
787 &#32;&#32;&#32;&#32;:&#32;<link linkend="_classbasic__string">basic_string</link>(__sv_wrapper(_S_to_string_view(__t)),&#32;__a)&#32;{&#32;}
788 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
789 
793 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
794 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">~basic_string</link>()
795 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_dispose();&#32;}
796 
801 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
802 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
803 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
804 &#32;&#32;&#32;&#32;&#32;&#32;{
805 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__str);
806 &#32;&#32;&#32;&#32;&#32;&#32;}
807 
812 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
813 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
814 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
815 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__s);&#32;}
816 
824 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
825 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
826 &#32;&#32;&#32;&#32;&#32;&#32;operator=(_CharT&#32;__c)
827 &#32;&#32;&#32;&#32;&#32;&#32;{
828 &#32;&#32;&#32;&#32;this-&gt;assign(1,&#32;__c);
829 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
830 &#32;&#32;&#32;&#32;&#32;&#32;}
831 
832 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
840 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2063.&#32;Contradictory&#32;requirements&#32;for&#32;string&#32;move&#32;assignment</emphasis>
842 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
843 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
844 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str)
845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Alloc_traits::_S_nothrow_move())
846 &#32;&#32;&#32;&#32;&#32;&#32;{
847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_is_local()&#32;&amp;&amp;&#32;_Alloc_traits::_S_propagate_on_move_assign()
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!_Alloc_traits::_S_always_equal()
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_M_get_allocator()&#32;!=&#32;__str._M_get_allocator())
850 &#32;&#32;&#32;&#32;&#32;&#32;{
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destroy&#32;existing&#32;storage&#32;before&#32;replacing&#32;allocator.</emphasis>
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(_M_allocated_capacity);
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(_M_local_data());
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(0);
855 &#32;&#32;&#32;&#32;&#32;&#32;}
856 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Replace&#32;allocator&#32;if&#32;POCMA&#32;is&#32;true.</emphasis>
857 &#32;&#32;&#32;&#32;std::__alloc_on_move(_M_get_allocator(),&#32;__str._M_get_allocator());
858 
859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str._M_is_local())
860 &#32;&#32;&#32;&#32;&#32;&#32;{
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&apos;ve&#32;always&#32;got&#32;room&#32;for&#32;a&#32;short&#32;string,&#32;just&#32;copy&#32;it</emphasis>
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(unless&#32;this&#32;is&#32;a&#32;self-move,&#32;because&#32;that&#32;would&#32;violate&#32;the</emphasis>
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;char_traits::copy&#32;precondition&#32;that&#32;the&#32;ranges&#32;don&apos;t&#32;overlap).</emphasis>
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_expect(std::__addressof(__str)&#32;!=&#32;<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">true</emphasis>))
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str.size())
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_S_copy(_M_data(),&#32;__str._M_data(),&#32;__str.size());
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(__str.size());
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
870 &#32;&#32;&#32;&#32;&#32;&#32;}
871 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Alloc_traits::_S_propagate_on_move_assign()
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_Alloc_traits::_S_always_equal()
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_M_get_allocator()&#32;==&#32;__str._M_get_allocator())
874 &#32;&#32;&#32;&#32;&#32;&#32;{
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Just&#32;move&#32;the&#32;allocated&#32;pointer,&#32;our&#32;allocator&#32;can&#32;free&#32;it.</emphasis>
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__data&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__capacity;
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_is_local())
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Alloc_traits::_S_always_equal())
881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__str&#32;can&#32;reuse&#32;our&#32;existing&#32;storage.</emphasis>
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__data&#32;=&#32;_M_data();
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__capacity&#32;=&#32;_M_allocated_capacity;
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;__str&#32;can&apos;t&#32;use&#32;it,&#32;so&#32;free&#32;it.</emphasis>
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(_M_allocated_capacity);
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
889 
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(__str._M_data());
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_length(__str.length());
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__str._M_allocated_capacity);
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__data)
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data(__data);
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_capacity(__capacity);
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data(__str._M_local_buf);
900 &#32;&#32;&#32;&#32;&#32;&#32;}
901 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;Need&#32;to&#32;do&#32;a&#32;deep&#32;copy</emphasis>
902 &#32;&#32;&#32;&#32;&#32;&#32;assign(__str);
903 &#32;&#32;&#32;&#32;__str.clear();
904 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
905 &#32;&#32;&#32;&#32;&#32;&#32;}
906 
911 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
912 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
913 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;_CharT&gt;&#32;__l)
914 &#32;&#32;&#32;&#32;&#32;&#32;{
915 &#32;&#32;&#32;&#32;this-&gt;assign(__l.begin(),&#32;__l.size());
916 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
917 &#32;&#32;&#32;&#32;&#32;&#32;}
918 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
919 
920 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
925 &#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__svt);&#32;}
930 
935 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;__sv_type()&#32;const&#32;noexcept
937 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
938 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
939 
940 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterators:</emphasis>
945 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
946 &#32;&#32;&#32;&#32;&#32;&#32;iterator
947 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;_GLIBCXX_NOEXCEPT
948 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data());&#32;}
949 
954 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
955 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
956 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
957 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_data());&#32;}
958 
963 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
964 &#32;&#32;&#32;&#32;&#32;&#32;iterator
965 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;_GLIBCXX_NOEXCEPT
966 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
967 
972 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
973 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
974 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
975 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
976 
982 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
983 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
984 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;_GLIBCXX_NOEXCEPT
985 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
986 
992 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
993 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
994 &#32;&#32;&#32;&#32;&#32;&#32;rbegin()&#32;const&#32;_GLIBCXX_NOEXCEPT
995 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
996 
1002 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1003 &#32;&#32;&#32;&#32;&#32;&#32;reverse_iterator
1004 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;_GLIBCXX_NOEXCEPT
1005 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;reverse_iterator(this-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>());&#32;}
1006 
1012 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1013 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1014 &#32;&#32;&#32;&#32;&#32;&#32;rend()&#32;const&#32;_GLIBCXX_NOEXCEPT
1015 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>());&#32;}
1016 
1017 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1022 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1023 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1024 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;const&#32;noexcept
1025 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_data());&#32;}
1026 
1031 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1032 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1033 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;const&#32;noexcept
1034 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_iterator(this-&gt;_M_data()&#32;+&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());&#32;}
1035 
1041 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1042 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1043 &#32;&#32;&#32;&#32;&#32;&#32;crbegin()&#32;const&#32;noexcept
1044 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());&#32;}
1045 
1051 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1052 &#32;&#32;&#32;&#32;&#32;&#32;const_reverse_iterator
1053 &#32;&#32;&#32;&#32;&#32;&#32;crend()&#32;const&#32;noexcept
1054 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;const_reverse_iterator(this-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>());&#32;}
1055 <emphasis role="preprocessor">#endif</emphasis>
1056 
1057 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Capacity:</emphasis>
1061 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1062 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1063 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
1064 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_string_length;&#32;}
1065 
1068 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1069 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1070 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
1071 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_string_length;&#32;}
1072 
1074 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1075 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1076 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;const&#32;_GLIBCXX_NOEXCEPT
1077 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_Alloc_traits::max_size(_M_get_allocator())&#32;-&#32;1)&#32;/&#32;2;&#32;}
1078 
1089 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1091 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__n,&#32;_CharT&#32;__c);
1092 
1103 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1105 &#32;&#32;&#32;&#32;&#32;&#32;resize(size_type&#32;__n)
1106 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;resize(__n,&#32;_CharT());&#32;}
1107 
1108 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1109 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
1110 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;shrink_to_fit()&#32;noexcept
1115 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;reserve();&#32;}
1116 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1117 <emphasis role="preprocessor">#endif</emphasis>
1118 
1119 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;202002L</emphasis>
1120 <emphasis role="preprocessor">#define&#32;__cpp_lib_string_resize_and_overwrite&#32;202110L</emphasis>
1121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Operation&gt;
1122 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1123 &#32;&#32;&#32;&#32;resize_and_overwrite(size_type&#32;__n,&#32;_Operation&#32;__op);
1124 <emphasis role="preprocessor">#endif</emphasis>
1125 
1130 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1131 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1132 &#32;&#32;&#32;&#32;&#32;&#32;capacity()&#32;const&#32;_GLIBCXX_NOEXCEPT
1133 &#32;&#32;&#32;&#32;&#32;&#32;{
1134 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_is_local()&#32;?&#32;size_type(_S_local_capacity)
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_allocated_capacity;
1136 &#32;&#32;&#32;&#32;&#32;&#32;}
1137 
1155 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1157 &#32;&#32;&#32;&#32;&#32;&#32;reserve(size_type&#32;__res_arg);
1158 
1162 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
1163 &#32;&#32;&#32;&#32;&#32;&#32;[[deprecated(<emphasis role="stringliteral">&quot;use&#32;shrink_to_fit()&#32;instead&quot;</emphasis>)]]
1164 <emphasis role="preprocessor">#endif</emphasis>
1165 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1167 &#32;&#32;&#32;&#32;&#32;&#32;reserve();
1168 
1172 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1174 &#32;&#32;&#32;&#32;&#32;&#32;clear()&#32;_GLIBCXX_NOEXCEPT
1175 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_set_length(0);&#32;}
1176 
1181 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_GLIBCXX20_CONSTEXPR
1182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1183 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;const&#32;_GLIBCXX_NOEXCEPT
1184 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;==&#32;0;&#32;}
1185 
1186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Element&#32;access:</emphasis>
1197 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1198 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1199 &#32;&#32;&#32;&#32;&#32;&#32;operator[]&#32;(size_type&#32;__pos)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
1200 &#32;&#32;&#32;&#32;&#32;&#32;{
1201 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__pos];
1203 &#32;&#32;&#32;&#32;&#32;&#32;}
1204 
1215 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1216 &#32;&#32;&#32;&#32;&#32;&#32;reference
1217 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__pos)
1218 &#32;&#32;&#32;&#32;&#32;&#32;{
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;pos&#32;==&#32;size()&#32;both&#32;in&#32;C++98&#32;mode,&#32;as&#32;v3&#32;extension,</emphasis>
1220 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;and&#32;in&#32;C++11&#32;mode.</emphasis>
1221 &#32;&#32;&#32;&#32;__glibcxx_assert(__pos&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;pedantic&#32;mode&#32;be&#32;strict&#32;in&#32;C++98&#32;mode.</emphasis>
1223 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__cplusplus&#32;&gt;=&#32;201103L&#32;||&#32;__pos&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__pos];
1225 &#32;&#32;&#32;&#32;&#32;&#32;}
1226 
1237 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1238 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1239 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
1240 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1241 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1242 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string::at:&#32;__n&#32;&quot;</emphasis>
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&#32;&gt;=&#32;this-&gt;size()&#32;&quot;</emphasis>
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&quot;</emphasis>),
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1246 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__n];
1247 &#32;&#32;&#32;&#32;&#32;&#32;}
1248 
1259 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1260 &#32;&#32;&#32;&#32;&#32;&#32;reference
1261 &#32;&#32;&#32;&#32;&#32;&#32;at(size_type&#32;__n)
1262 &#32;&#32;&#32;&#32;&#32;&#32;{
1263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&gt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
1264 &#32;&#32;&#32;&#32;&#32;&#32;__throw_out_of_range_fmt(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1ad90b1fa000da1666f104c4dd9c0d7f9b">__N</link>(<emphasis role="stringliteral">&quot;basic_string::at:&#32;__n&#32;&quot;</emphasis>
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&#32;&gt;=&#32;this-&gt;size()&#32;&quot;</emphasis>
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;(which&#32;is&#32;%zu)&quot;</emphasis>),
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__n,&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>());
1268 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data()[__n];
1269 &#32;&#32;&#32;&#32;&#32;&#32;}
1270 
1271 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1276 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1277 &#32;&#32;&#32;&#32;&#32;&#32;reference
1278 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;noexcept
1279 &#32;&#32;&#32;&#32;&#32;&#32;{
1280 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](0);
1282 &#32;&#32;&#32;&#32;&#32;&#32;}
1283 
1288 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1289 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1290 &#32;&#32;&#32;&#32;&#32;&#32;front()&#32;const&#32;noexcept
1291 &#32;&#32;&#32;&#32;&#32;&#32;{
1292 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1293 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](0);
1294 &#32;&#32;&#32;&#32;&#32;&#32;}
1295 
1300 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1301 &#32;&#32;&#32;&#32;&#32;&#32;reference
1302 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;noexcept
1303 &#32;&#32;&#32;&#32;&#32;&#32;{
1304 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1);
1306 &#32;&#32;&#32;&#32;&#32;&#32;}
1307 
1312 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1313 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1314 &#32;&#32;&#32;&#32;&#32;&#32;back()&#32;const&#32;noexcept
1315 &#32;&#32;&#32;&#32;&#32;&#32;{
1316 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
1317 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;operator[](this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1);
1318 &#32;&#32;&#32;&#32;&#32;&#32;}
1319 <emphasis role="preprocessor">#endif</emphasis>
1320 
1321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Modifiers:</emphasis>
1327 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1328 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1329 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1330 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__str);&#32;}
1331 
1337 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1338 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1339 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1340 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__s);&#32;}
1341 
1347 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1348 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1349 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(_CharT&#32;__c)
1350 &#32;&#32;&#32;&#32;&#32;&#32;{
1351 &#32;&#32;&#32;&#32;this-&gt;push_back(__c);
1352 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1353 &#32;&#32;&#32;&#32;&#32;&#32;}
1354 
1355 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1361 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1362 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1363 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(initializer_list&lt;_CharT&gt;&#32;__l)
1364 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__l.begin(),&#32;__l.size());&#32;}
1365 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1366 
1367 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1373 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1374 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1375 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1376 &#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1a61711bc909f8dc76d8b3deccc1440f46">operator+=</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1377 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__svt);&#32;}
1378 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1379 
1385 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1387 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1388 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__str._M_data(),&#32;__str.size());&#32;}
1389 
1403 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1404 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1405 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos)
1406 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__str._M_data()
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>),
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_limit(__pos,&#32;__n));&#32;}
1409 
1416 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1417 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1418 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
1419 &#32;&#32;&#32;&#32;&#32;&#32;{
1420 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n);
1421 &#32;&#32;&#32;&#32;_M_check_length(size_type(0),&#32;__n,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>);
1422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_append(__s,&#32;__n);
1423 &#32;&#32;&#32;&#32;&#32;&#32;}
1424 
1430 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1431 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1432 &#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1433 &#32;&#32;&#32;&#32;&#32;&#32;{
1434 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1435 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__n&#32;=&#32;traits_type::length(__s);
1436 &#32;&#32;&#32;&#32;_M_check_length(size_type(0),&#32;__n,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>);
1437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_append(__s,&#32;__n);
1438 &#32;&#32;&#32;&#32;&#32;&#32;}
1439 
1448 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1449 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1450 &#32;&#32;&#32;&#32;&#32;&#32;append(size_type&#32;__n,&#32;_CharT&#32;__c)
1451 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;size_type(0),&#32;__n,&#32;__c);&#32;}
1452 
1453 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1459 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1460 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1461 &#32;&#32;&#32;&#32;&#32;&#32;append(initializer_list&lt;_CharT&gt;&#32;__l)
1462 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__l.begin(),&#32;__l.size());&#32;}
1463 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1464 
1473 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_InputIterator,
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1476 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1477 <emphasis role="preprocessor">#else</emphasis>
1478 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1479 <emphasis role="preprocessor">#endif</emphasis>
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;append(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__first,&#32;__last);&#32;}
1483 
1484 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1491 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;append(__sv.data(),&#32;__sv.size());
1497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1498 
1506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1507 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1509 &#32;&#32;&#32;&#32;append(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos)
1510 &#32;&#32;&#32;&#32;{
1511 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_append(__sv.data()
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::append&quot;</emphasis>),
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos,&#32;__n));
1515 &#32;&#32;&#32;&#32;}
1516 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1517 
1522 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1524 &#32;&#32;&#32;&#32;&#32;&#32;push_back(_CharT&#32;__c)
1525 &#32;&#32;&#32;&#32;&#32;&#32;{
1526 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
1527 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size&#32;+&#32;1&#32;&gt;&#32;this-&gt;capacity())
1528 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_mutate(__size,&#32;size_type(0),&#32;0,&#32;size_type(1));
1529 &#32;&#32;&#32;&#32;traits_type::assign(this-&gt;_M_data()[__size],&#32;__c);
1530 &#32;&#32;&#32;&#32;this-&gt;_M_set_length(__size&#32;+&#32;1);
1531 &#32;&#32;&#32;&#32;&#32;&#32;}
1532 
1538 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1539 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1540 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1541 &#32;&#32;&#32;&#32;&#32;&#32;{
1542 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Alloc_traits::_S_propagate_on_copy_assign())
1544 &#32;&#32;&#32;&#32;&#32;&#32;{
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_Alloc_traits::_S_always_equal()&#32;&amp;&amp;&#32;!_M_is_local()
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_M_get_allocator()&#32;!=&#32;__str._M_get_allocator())
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Propagating&#32;allocator&#32;cannot&#32;free&#32;existing&#32;storage&#32;so&#32;must</emphasis>
1549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;deallocate&#32;it&#32;before&#32;replacing&#32;current&#32;allocator.</emphasis>
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__str.size()&#32;&lt;=&#32;_S_local_capacity)
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(_M_allocated_capacity);
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(_M_use_local_data());
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(0);
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;__str.size();
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__alloc&#32;=&#32;__str._M_get_allocator();
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;this&#32;allocation&#32;throws&#32;there&#32;are&#32;no&#32;effects:</emphasis>
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;_Alloc_traits::allocate(__alloc,&#32;__len&#32;+&#32;1);
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy(_M_allocated_capacity);
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_data(__ptr);
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_capacity(__len);
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_set_length(__len);
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__alloc_on_copy(_M_get_allocator(),&#32;__str._M_get_allocator());
1569 &#32;&#32;&#32;&#32;&#32;&#32;}
1570 <emphasis role="preprocessor">#endif</emphasis>
1571 &#32;&#32;&#32;&#32;this-&gt;_M_assign(__str);
1572 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1573 &#32;&#32;&#32;&#32;&#32;&#32;}
1574 
1575 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1584 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1585 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1586 &#32;&#32;&#32;&#32;&#32;&#32;assign(<link linkend="_classbasic__string">basic_string</link>&amp;&amp;&#32;__str)
1587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(_Alloc_traits::_S_nothrow_move())
1588 &#32;&#32;&#32;&#32;&#32;&#32;{
1589 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1590 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2063.&#32;Contradictory&#32;requirements&#32;for&#32;string&#32;move&#32;assignment</emphasis>
1591 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__str);
1592 &#32;&#32;&#32;&#32;&#32;&#32;}
1593 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1594 
1608 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1609 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1610 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos)
1611 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace(size_type(0),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__str._M_data()
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::assign&quot;</emphasis>),
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_limit(__pos,&#32;__n));&#32;}
1614 
1625 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1626 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1627 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
1628 &#32;&#32;&#32;&#32;&#32;&#32;{
1629 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n);
1630 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace(size_type(0),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__s,&#32;__n);
1631 &#32;&#32;&#32;&#32;&#32;&#32;}
1632 
1642 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1643 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1644 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1645 &#32;&#32;&#32;&#32;&#32;&#32;{
1646 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace(size_type(0),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__s,
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::length(__s));
1649 &#32;&#32;&#32;&#32;&#32;&#32;}
1650 
1660 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1661 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1662 &#32;&#32;&#32;&#32;&#32;&#32;assign(size_type&#32;__n,&#32;_CharT&#32;__c)
1663 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(size_type(0),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),&#32;__n,&#32;__c);&#32;}
1664 
1673 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_InputIterator,
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1676 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1677 <emphasis role="preprocessor">#else</emphasis>
1678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1679 <emphasis role="preprocessor">#endif</emphasis>
1680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>(),&#32;__first,&#32;__last);&#32;}
1683 
1684 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1690 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1691 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1692 &#32;&#32;&#32;&#32;&#32;&#32;assign(initializer_list&lt;_CharT&gt;&#32;__l)
1693 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__l.begin(),&#32;__l.size());&#32;}
1694 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1695 
1696 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1703 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1704 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1705 &#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1706 &#32;&#32;&#32;&#32;{
1707 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__sv.data(),&#32;__sv.size());
1709 &#32;&#32;&#32;&#32;}
1710 
1718 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1719 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1720 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1721 &#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos,&#32;size_type&#32;__n&#32;=&#32;npos)
1722 &#32;&#32;&#32;&#32;{
1723 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace(size_type(0),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>(),
1725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sv.data()
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::assign&quot;</emphasis>),
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos,&#32;__n));
1728 &#32;&#32;&#32;&#32;}
1729 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
1730 
1731 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1747 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1748 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1749 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__p,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)
1750 &#32;&#32;&#32;&#32;&#32;&#32;{
1751 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__p&#32;&gt;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&amp;&amp;&#32;__p&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1752 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__p&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
1753 &#32;&#32;&#32;&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__p,&#32;__p,&#32;__n,&#32;__c);
1754 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_data()&#32;+&#32;__pos);
1755 &#32;&#32;&#32;&#32;&#32;&#32;}
1756 <emphasis role="preprocessor">#else</emphasis>
1770 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1771 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__p,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)
1772 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__p,&#32;__p,&#32;__n,&#32;__c);&#32;&#32;}
1773 <emphasis role="preprocessor">#endif</emphasis>
1774 
1775 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_InputIterator,
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
1792 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1793 &#32;&#32;&#32;&#32;iterator
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__p,&#32;_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end)
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1796 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__p&#32;&gt;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&amp;&amp;&#32;__p&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__p&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
1798 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__p,&#32;__p,&#32;__beg,&#32;__end);
1799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_data()&#32;+&#32;__pos);
1800 &#32;&#32;&#32;&#32;}
1801 <emphasis role="preprocessor">#else</emphasis>
1814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__p,&#32;_InputIterator&#32;__beg,&#32;_InputIterator&#32;__end)
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__p,&#32;__p,&#32;__beg,&#32;__end);&#32;}
1818 <emphasis role="preprocessor">#endif</emphasis>
1819 
1820 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
1827 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1828 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1829 &#32;&#32;&#32;&#32;&#32;&#32;insert(const_iterator&#32;__p,&#32;initializer_list&lt;_CharT&gt;&#32;__l)
1830 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__p,&#32;__l.begin(),&#32;__l.end());&#32;}
1831 
1832 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEFINING_STRING_INSTANTIATIONS</emphasis>
1833 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;PR&#32;libstdc++/83328</emphasis>
1834 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1835 &#32;&#32;&#32;&#32;&#32;&#32;insert(iterator&#32;__p,&#32;initializer_list&lt;_CharT&gt;&#32;__l)
1836 &#32;&#32;&#32;&#32;&#32;&#32;{
1837 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__p&#32;&gt;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&amp;&amp;&#32;__p&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1838 &#32;&#32;&#32;&#32;this-&gt;insert(__p&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__l.begin(),&#32;__l.size());
1839 &#32;&#32;&#32;&#32;&#32;&#32;}
1840 <emphasis role="preprocessor">#endif</emphasis>
1841 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
1842 
1855 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1856 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1857 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
1858 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;size_type(0),
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_data(),&#32;__str.size());&#32;}
1860 
1879 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1880 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1881 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n&#32;=&#32;npos)
1883 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;size_type(0),&#32;__str._M_data()
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>),
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_limit(__pos2,&#32;__n));&#32;}
1886 
1903 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1904 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1905 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
1906 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;size_type(0),&#32;__s,&#32;__n);&#32;}
1907 
1923 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1924 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1925 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
1926 &#32;&#32;&#32;&#32;&#32;&#32;{
1927 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
1928 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;size_type(0),&#32;__s,
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::length(__s));
1930 &#32;&#32;&#32;&#32;&#32;&#32;}
1931 
1948 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1949 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
1950 &#32;&#32;&#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;_CharT&#32;__c)
1951 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>),
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type(0),&#32;__n,&#32;__c);&#32;}
1953 
1967 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1968 &#32;&#32;&#32;&#32;&#32;&#32;iterator
1969 &#32;&#32;&#32;&#32;&#32;&#32;insert(__const_iterator&#32;__p,&#32;_CharT&#32;__c)
1970 &#32;&#32;&#32;&#32;&#32;&#32;{
1971 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__p&#32;&gt;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&amp;&amp;&#32;__p&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
1972 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__p&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
1973 &#32;&#32;&#32;&#32;_M_replace_aux(__pos,&#32;size_type(0),&#32;size_type(1),&#32;__c);
1974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;__pos);
1975 &#32;&#32;&#32;&#32;&#32;&#32;}
1976 
1977 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
1984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1985 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
1986 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
1987 &#32;&#32;&#32;&#32;insert(size_type&#32;__pos,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
1988 &#32;&#32;&#32;&#32;{
1989 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
1990 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;insert(__pos,&#32;__sv.data(),&#32;__sv.size());
1991 &#32;&#32;&#32;&#32;}
1992 
2001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2002 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2003 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
2004 &#32;&#32;&#32;&#32;insert(size_type&#32;__pos1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,
2005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n&#32;=&#32;npos)
2006 &#32;&#32;&#32;&#32;{
2007 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;size_type(0),
2009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sv.data()
2010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::insert&quot;</emphasis>),
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos2,&#32;__n));
2012 &#32;&#32;&#32;&#32;}
2013 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2014 
2030 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2031 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2032 &#32;&#32;&#32;&#32;&#32;&#32;erase(size_type&#32;__pos&#32;=&#32;0,&#32;size_type&#32;__n&#32;=&#32;npos)
2033 &#32;&#32;&#32;&#32;&#32;&#32;{
2034 &#32;&#32;&#32;&#32;_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::erase&quot;</emphasis>);
2035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;==&#32;npos)
2036 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_set_length(__pos);
2037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;!=&#32;0)
2038 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_erase(__pos,&#32;_M_limit(__pos,&#32;__n));
2039 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2040 &#32;&#32;&#32;&#32;&#32;&#32;}
2041 
2050 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2051 &#32;&#32;&#32;&#32;&#32;&#32;iterator
2052 &#32;&#32;&#32;&#32;&#32;&#32;erase(__const_iterator&#32;__position)
2053 &#32;&#32;&#32;&#32;&#32;&#32;{
2054 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__position&#32;&gt;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__position&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2056 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__position&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
2057 &#32;&#32;&#32;&#32;this-&gt;_M_erase(__pos,&#32;size_type(1));
2058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(_M_data()&#32;+&#32;__pos);
2059 &#32;&#32;&#32;&#32;&#32;&#32;}
2060 
2070 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2071 &#32;&#32;&#32;&#32;&#32;&#32;iterator
2072 &#32;&#32;&#32;&#32;&#32;&#32;erase(__const_iterator&#32;__first,&#32;__const_iterator&#32;__last)
2073 &#32;&#32;&#32;&#32;&#32;&#32;{
2074 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__first&#32;&gt;=&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&amp;&amp;&#32;__first&#32;&lt;=&#32;__last
2075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__last&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__pos&#32;=&#32;__first&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();
2077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__last&#32;==&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>())
2078 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_set_length(__pos);
2079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2080 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_erase(__pos,&#32;__last&#32;-&#32;__first);
2081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iterator(this-&gt;_M_data()&#32;+&#32;__pos);
2082 &#32;&#32;&#32;&#32;&#32;&#32;}
2083 
2084 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2090 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2091 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2092 &#32;&#32;&#32;&#32;&#32;&#32;pop_back()&#32;noexcept
2093 &#32;&#32;&#32;&#32;&#32;&#32;{
2094 &#32;&#32;&#32;&#32;__glibcxx_assert(!empty());
2095 &#32;&#32;&#32;&#32;_M_erase(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;-&#32;1,&#32;1);
2096 &#32;&#32;&#32;&#32;&#32;&#32;}
2097 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
2098 
2116 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2117 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
2119 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;__n,&#32;__str._M_data(),&#32;__str.size());&#32;}
2120 
2139 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2140 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2141 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)
2143 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;__n1,&#32;__str._M_data()
2144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;__str._M_check(__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>),
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__str._M_limit(__pos2,&#32;__n2));&#32;}
2146 
2165 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2166 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2167 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
2168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n2)
2169 &#32;&#32;&#32;&#32;&#32;&#32;{
2170 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__s,&#32;__n2);
2171 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace(_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>),
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_limit(__pos,&#32;__n1),&#32;__s,&#32;__n2);
2173 &#32;&#32;&#32;&#32;&#32;&#32;}
2174 
2191 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2192 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2193 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
2194 &#32;&#32;&#32;&#32;&#32;&#32;{
2195 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2196 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;__n1,&#32;__s,&#32;traits_type::length(__s));
2197 &#32;&#32;&#32;&#32;&#32;&#32;}
2198 
2216 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2217 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2218 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;size_type&#32;__n2,&#32;_CharT&#32;__c)
2219 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>),
2220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_limit(__pos,&#32;__n1),&#32;__n2,&#32;__c);&#32;}
2221 
2235 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2236 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,
2238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)
2239 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__str._M_data(),&#32;__str.size());&#32;}
2240 
2256 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2257 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2258 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n)
2260 &#32;&#32;&#32;&#32;&#32;&#32;{
2261 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__s,&#32;__n);
2264 &#32;&#32;&#32;&#32;&#32;&#32;}
2265 
2279 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2280 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2281 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)
2282 &#32;&#32;&#32;&#32;&#32;&#32;{
2283 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2284 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__s,&#32;traits_type::length(__s));
2285 &#32;&#32;&#32;&#32;&#32;&#32;}
2286 
2301 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2302 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2303 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,&#32;size_type&#32;__n,
2304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;__c)
2305 &#32;&#32;&#32;&#32;&#32;&#32;{
2306 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__n,&#32;__c);
2309 &#32;&#32;&#32;&#32;&#32;&#32;}
2310 
2326 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class&#32;</emphasis>_InputIterator,
2328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
2329 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;const_iterator&#32;__i2,
2332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__k1,&#32;_InputIterator&#32;__k2)
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2334 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2336 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_replace_dispatch(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__k1,&#32;__k2,
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__false_type());
2339 &#32;&#32;&#32;&#32;}
2340 <emphasis role="preprocessor">#else</emphasis>
2341 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
2342 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DISAMBIGUATE_REPLACE_INST</emphasis>
2343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__enable_if_not_native_iterator&lt;_InputIterator&gt;::__type
2344 <emphasis role="preprocessor">#else</emphasis>
2345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2346 <emphasis role="preprocessor">#endif</emphasis>
2347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;iterator&#32;__i2,
2348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__k1,&#32;_InputIterator&#32;__k2)
2349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2350 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2352 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2353 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::__is_integer&lt;_InputIterator&gt;::__type&#32;_Integral;
2354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_dispatch(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__k1,&#32;__k2,&#32;_Integral());
2355 &#32;&#32;&#32;&#32;}
2356 <emphasis role="preprocessor">#endif</emphasis>
2357 
2358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Specializations&#32;for&#32;the&#32;common&#32;case&#32;of&#32;pointer&#32;and&#32;iterator:</emphasis>
2359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;useful&#32;to&#32;avoid&#32;the&#32;overhead&#32;of&#32;temporary&#32;buffering&#32;in&#32;_M_replace.</emphasis>
2360 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2361 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2362 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,
2363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT*&#32;__k1,&#32;_CharT*&#32;__k2)
2364 &#32;&#32;&#32;&#32;&#32;&#32;{
2365 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2367 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
2369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1,&#32;__k2&#32;-&#32;__k1);
2370 &#32;&#32;&#32;&#32;&#32;&#32;}
2371 
2372 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2373 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2374 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,
2375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__k2)
2376 &#32;&#32;&#32;&#32;&#32;&#32;{
2377 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2379 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2380 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
2381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1,&#32;__k2&#32;-&#32;__k1);
2382 &#32;&#32;&#32;&#32;&#32;&#32;}
2383 
2384 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2385 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2386 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,
2387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator&#32;__k1,&#32;iterator&#32;__k2)
2388 &#32;&#32;&#32;&#32;&#32;&#32;{
2389 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2391 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2392 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
2393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1.base(),&#32;__k2&#32;-&#32;__k1);
2394 &#32;&#32;&#32;&#32;&#32;&#32;}
2395 
2396 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2397 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2398 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__const_iterator&#32;__i2,
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_iterator&#32;__k1,&#32;const_iterator&#32;__k2)
2400 &#32;&#32;&#32;&#32;&#32;&#32;{
2401 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;&lt;=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&amp;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;&lt;=&#32;__i2
2402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__i2&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>());
2403 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__k1,&#32;__k2);
2404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,
2405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__k1.base(),&#32;__k2&#32;-&#32;__k1);
2406 &#32;&#32;&#32;&#32;&#32;&#32;}
2407 
2408 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
2423 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2424 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;const_iterator&#32;__i2,
2425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initializer_list&lt;_CharT&gt;&#32;__l)
2426 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__i2,&#32;__l.begin(),&#32;__l.size());&#32;}
2427 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
2428 
2429 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2438 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2439 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
2440 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
2441 &#32;&#32;&#32;&#32;{
2442 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos,&#32;__n,&#32;__sv.data(),&#32;__sv.size());
2444 &#32;&#32;&#32;&#32;}
2445 
2455 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2456 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2457 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
2458 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,
2459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)
2460 &#32;&#32;&#32;&#32;{
2461 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(__pos1,&#32;__n1,
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__sv.data()
2464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;std::__sv_check(__sv.size(),&#32;__pos2,&#32;<emphasis role="stringliteral">&quot;basic_string::replace&quot;</emphasis>),
2465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__sv_limit(__sv.size(),&#32;__pos2,&#32;__n2));
2466 &#32;&#32;&#32;&#32;}
2467 
2477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2478 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2479 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;basic_string&amp;&gt;
2480 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;const_iterator&#32;__i2,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)
2481 &#32;&#32;&#32;&#32;{
2482 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2483 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1ac844ba281c4c66f83f6aebc21498fc97">replace</link>(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__sv);
2484 &#32;&#32;&#32;&#32;}
2485 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2486 
2487 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2488 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Integer&gt;
2489 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2490 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2491 &#32;&#32;&#32;&#32;_M_replace_dispatch(const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;const_iterator&#32;__i2,
2492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Integer&#32;__n,&#32;_Integer&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>,&#32;__true_type)
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_replace_aux(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>&#32;-&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>(),&#32;__i2&#32;-&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;__n,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
2494 
2495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_InputIterator&gt;
2496 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2497 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2498 &#32;&#32;&#32;&#32;_M_replace_dispatch(const_iterator&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a4e638bfa96fc52e781092793588e7d41">__i1</link>,&#32;const_iterator&#32;__i2,
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_InputIterator&#32;__k1,&#32;_InputIterator&#32;__k2,
2500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__false_type);
2501 
2502 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2503 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2504 &#32;&#32;&#32;&#32;&#32;&#32;_M_replace_aux(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;size_type&#32;__n2,
2505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;__c);
2506 
2507 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2508 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2509 &#32;&#32;&#32;&#32;&#32;&#32;_M_replace(size_type&#32;__pos,&#32;size_type&#32;__len1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
2510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len2);
2511 
2512 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2513 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>&amp;
2514 &#32;&#32;&#32;&#32;&#32;&#32;_M_append(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__n);
2515 
2516 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2517 
2530 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2531 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2532 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a4e3366cc5ea1e47fac759952b877ed0d">copy</link>(_CharT*&#32;__s,&#32;size_type&#32;__n,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;<emphasis role="keyword">const</emphasis>;
2533 
2541 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2542 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2543 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__s)&#32;_GLIBCXX_NOEXCEPT;
2544 
2545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String&#32;operations:</emphasis>
2552 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
2554 &#32;&#32;&#32;&#32;&#32;&#32;c_str()&#32;const&#32;_GLIBCXX_NOEXCEPT
2555 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data();&#32;}
2556 
2565 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*
2567 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;const&#32;_GLIBCXX_NOEXCEPT
2568 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data();&#32;}
2569 
2570 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2577 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2578 &#32;&#32;&#32;&#32;&#32;&#32;_CharT*
2579 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>()&#32;noexcept
2580 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data();&#32;}
2581 <emphasis role="preprocessor">#endif</emphasis>
2582 
2586 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2587 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
2588 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;const&#32;_GLIBCXX_NOEXCEPT
2589 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get_allocator();&#32;}
2590 
2603 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2604 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2605 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2606 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2607 
2618 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2619 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2620 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2621 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2622 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2623 
2624 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2631 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2632 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2633 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2634 &#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2635 &#32;&#32;&#32;&#32;noexcept(is_same&lt;_Tp,&#32;__sv_type&gt;::<link linkend="_classvalue">value</link>)
2636 &#32;&#32;&#32;&#32;{
2637 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__sv.data(),&#32;__pos,&#32;__sv.size());
2639 &#32;&#32;&#32;&#32;}
2640 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2641 
2652 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2653 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2654 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const&#32;_GLIBCXX_NOEXCEPT
2655 &#32;&#32;&#32;&#32;&#32;&#32;{
2656 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__s,&#32;__pos,&#32;traits_type::length(__s));
2658 &#32;&#32;&#32;&#32;&#32;&#32;}
2659 
2670 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2671 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2672 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const&#32;_GLIBCXX_NOEXCEPT;
2673 
2684 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2685 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2686 &#32;&#32;&#32;&#32;&#32;&#32;rfind(const&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;const
2687 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2688 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2689 
2690 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2698 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2699 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2700 &#32;&#32;&#32;&#32;rfind(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2701 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2702 &#32;&#32;&#32;&#32;{
2703 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2704 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__sv.data(),&#32;__pos,&#32;__sv.size());
2705 &#32;&#32;&#32;&#32;}
2706 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2707 
2720 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2721 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2722 &#32;&#32;&#32;&#32;&#32;&#32;rfind(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2723 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2724 
2735 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2736 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2737 &#32;&#32;&#32;&#32;&#32;&#32;rfind(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;npos)<emphasis role="keyword">&#32;const</emphasis>
2738 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2739 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__s,&#32;__pos,&#32;traits_type::length(__s));
2741 &#32;&#32;&#32;&#32;&#32;&#32;}
2742 
2753 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2754 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2755 &#32;&#32;&#32;&#32;&#32;&#32;rfind(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
2756 
2768 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2769 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2770 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2771 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2772 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2773 
2774 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2783 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2784 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2785 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2786 &#32;&#32;&#32;&#32;noexcept(is_same&lt;_Tp,&#32;__sv_type&gt;::<link linkend="_classvalue">value</link>)
2787 &#32;&#32;&#32;&#32;{
2788 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__sv.data(),&#32;__pos,&#32;__sv.size());
2790 &#32;&#32;&#32;&#32;}
2791 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2792 
2805 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2806 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2807 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2808 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2809 
2820 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2821 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2822 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2823 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2824 &#32;&#32;&#32;&#32;&#32;&#32;{
2825 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(__s,&#32;__pos,&#32;traits_type::length(__s));
2827 &#32;&#32;&#32;&#32;&#32;&#32;}
2828 
2841 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2842 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2843 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1af918ddff6ab7ea6140872b65660e9b16">find_first_of</link>(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const&#32;_GLIBCXX_NOEXCEPT
2844 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_toml_8hpp_1a334e40fb57f310a5de10f332f1914bf4">find</link>(__c,&#32;__pos);&#32;}
2845 
2857 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2858 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2859 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2860 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2861 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_of(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2862 
2863 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2871 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2872 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2873 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2874 &#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2875 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
2876 &#32;&#32;&#32;&#32;{
2877 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2878 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_of(__sv.data(),&#32;__pos,&#32;__sv.size());
2879 &#32;&#32;&#32;&#32;}
2880 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2881 
2894 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2895 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2896 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>
2897 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
2898 
2909 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2910 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2911 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
2912 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2913 &#32;&#32;&#32;&#32;&#32;&#32;{
2914 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
2915 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_of(__s,&#32;__pos,&#32;traits_type::length(__s));
2916 &#32;&#32;&#32;&#32;&#32;&#32;}
2917 
2930 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2931 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2932 &#32;&#32;&#32;&#32;&#32;&#32;find_last_of(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT
2933 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;rfind(__c,&#32;__pos);&#32;}
2934 
2945 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2946 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2947 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2948 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
2949 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_first_not_of(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
2950 
2951 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2959 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2960 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
2961 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2962 &#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
2963 &#32;&#32;&#32;&#32;noexcept(is_same&lt;_Tp,&#32;__sv_type&gt;::<link linkend="_classvalue">value</link>)
2964 &#32;&#32;&#32;&#32;{
2965 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
2966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_first_not_of(__sv.data(),&#32;__pos,&#32;__sv.size());
2967 &#32;&#32;&#32;&#32;}
2968 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
2969 
2982 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2983 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2984 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,
2985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
2986 
2997 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
2998 &#32;&#32;&#32;&#32;&#32;&#32;size_type
2999 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
3000 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3001 &#32;&#32;&#32;&#32;&#32;&#32;{
3002 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
3003 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_first_not_of(__s,&#32;__pos,&#32;traits_type::length(__s));
3004 &#32;&#32;&#32;&#32;&#32;&#32;}
3005 
3016 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3017 &#32;&#32;&#32;&#32;&#32;&#32;size_type
3018 &#32;&#32;&#32;&#32;&#32;&#32;find_first_not_of(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;0)&#32;const
3019 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
3020 
3032 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3033 &#32;&#32;&#32;&#32;&#32;&#32;size_type
3034 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(const&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;const
3035 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3036 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_not_of(__str.data(),&#32;__pos,&#32;__str.size());&#32;}
3037 
3038 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
3046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3047 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3048 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;size_type&gt;
3049 &#32;&#32;&#32;&#32;find_last_not_of(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
3050 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
3051 &#32;&#32;&#32;&#32;{
3052 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
3053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_not_of(__sv.data(),&#32;__pos,&#32;__sv.size());
3054 &#32;&#32;&#32;&#32;}
3055 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
3056 
3069 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3070 &#32;&#32;&#32;&#32;&#32;&#32;size_type
3071 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos,
3072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
3084 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3085 &#32;&#32;&#32;&#32;&#32;&#32;size_type
3086 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
3087 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3088 &#32;&#32;&#32;&#32;&#32;&#32;{
3089 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a1cbaa8fb8f312c4e1a134758fff21231">__glibcxx_requires_string</link>(__s);
3090 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;find_last_not_of(__s,&#32;__pos,&#32;traits_type::length(__s));
3091 &#32;&#32;&#32;&#32;&#32;&#32;}
3092 
3103 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3104 &#32;&#32;&#32;&#32;&#32;&#32;size_type
3105 &#32;&#32;&#32;&#32;&#32;&#32;find_last_not_of(_CharT&#32;__c,&#32;size_type&#32;__pos&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
3106 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT;
3107 
3120 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3121 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>
3122 &#32;&#32;&#32;&#32;&#32;&#32;substr(size_type&#32;__pos&#32;=&#32;0,&#32;size_type&#32;__n&#32;=&#32;npos)<emphasis role="keyword">&#32;const</emphasis>
3123 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>(*<emphasis role="keyword">this</emphasis>,
3124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_check(__pos,&#32;<emphasis role="stringliteral">&quot;basic_string::substr&quot;</emphasis>),&#32;__n);&#32;}
3125 
3140 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
3142 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)<emphasis role="keyword">&#32;const</emphasis>
3143 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
3144 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3145 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__osize&#32;=&#32;__str.size();
3146 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;std::min(__size,&#32;__osize);
3147 
3148 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__r&#32;=&#32;traits_type::compare(_M_data(),&#32;__str.data(),&#32;__len);
3149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__r)
3150 &#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;_S_compare(__size,&#32;__osize);
3151 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3152 &#32;&#32;&#32;&#32;&#32;&#32;}
3153 
3154 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
3160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3161 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3162 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;int&gt;
3163 &#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)&#32;<emphasis role="keyword">const</emphasis>
3164 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
3165 &#32;&#32;&#32;&#32;{
3166 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
3167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__size&#32;=&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>();
3168 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__osize&#32;=&#32;__sv.size();
3169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;size_type&#32;__len&#32;=&#32;std::min(__size,&#32;__osize);
3170 
3171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__r&#32;=&#32;traits_type::compare(_M_data(),&#32;__sv.data(),&#32;__len);
3172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__r)
3173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r&#32;=&#32;_S_compare(__size,&#32;__osize);
3174 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
3175 &#32;&#32;&#32;&#32;}
3176 
3185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3186 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3187 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;int&gt;
3188 &#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt)&#32;<emphasis role="keyword">const</emphasis>
3189 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
3190 &#32;&#32;&#32;&#32;{
3191 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
3192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(*this).substr(__pos,&#32;__n).compare(__sv);
3193 &#32;&#32;&#32;&#32;}
3194 
3205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
3206 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3207 &#32;&#32;&#32;&#32;_If_sv&lt;_Tp,&#32;int&gt;
3208 &#32;&#32;&#32;&#32;compare(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__svt,
3209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>
3210 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(is_same&lt;_Tp,&#32;__sv_type&gt;::value)
3211 &#32;&#32;&#32;&#32;{
3212 &#32;&#32;&#32;&#32;&#32;&#32;__sv_type&#32;__sv&#32;=&#32;__svt;
3213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(*<emphasis role="keyword">this</emphasis>)
3214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.substr(__pos1,&#32;__n1).compare(__sv.substr(__pos2,&#32;__n2));
3215 &#32;&#32;&#32;&#32;}
3216 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
3217 
3237 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
3239 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str)&#32;<emphasis role="keyword">const</emphasis>;
3240 
3264 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
3266 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos1,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&amp;&#32;__str,
3267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__pos2,&#32;size_type&#32;__n2&#32;=&#32;npos)&#32;<emphasis role="keyword">const</emphasis>;
3268 
3283 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
3285 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;_GLIBCXX_NOEXCEPT;
3286 
3287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
3288 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;5&#32;String::compare&#32;specification&#32;questionable</emphasis>
3308 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
3310 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s)&#32;<emphasis role="keyword">const</emphasis>;
3311 
3336 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
3338 &#32;&#32;&#32;&#32;&#32;&#32;compare(size_type&#32;__pos,&#32;size_type&#32;__n1,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__s,
3339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type&#32;__n2)&#32;<emphasis role="keyword">const</emphasis>;
3340 
3341 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
3342 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3343 &#32;&#32;&#32;&#32;&#32;&#32;starts_with(basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3344 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).starts_with(__x);&#32;}
3345 
3346 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3347 &#32;&#32;&#32;&#32;&#32;&#32;starts_with(_CharT&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3348 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).starts_with(__x);&#32;}
3349 
3350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3351 &#32;&#32;&#32;&#32;&#32;&#32;starts_with(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3352 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).starts_with(__x);&#32;}
3353 
3354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3355 &#32;&#32;&#32;&#32;&#32;&#32;ends_with(basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3356 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).ends_with(__x);&#32;}
3357 
3358 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3359 &#32;&#32;&#32;&#32;&#32;&#32;ends_with(_CharT&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3360 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).ends_with(__x);&#32;}
3361 
3362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3363 &#32;&#32;&#32;&#32;&#32;&#32;ends_with(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3364 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).ends_with(__x);&#32;}
3365 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
3366 
3367 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;202002L</emphasis>
3368 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3369 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(basic_string_view&lt;_CharT,&#32;_Traits&gt;&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3370 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).contains(__x);&#32;}
3371 
3372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3373 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(_CharT&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3374 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).contains(__x);&#32;}
3375 
3376 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3377 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1aa52974b0e426e7e2fbd725a900e9c36e">contains</link>(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__x)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
3378 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sv_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a89ce72163394e6aef63b551a8806e93f">data</link>(),&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()).contains(__x);&#32;}
3379 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++23</emphasis>
3380 
3381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allow&#32;basic_stringbuf::__xfer_bufptrs&#32;to&#32;call&#32;_M_length:</emphasis>
3382 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>basic_stringbuf;
3383 &#32;&#32;&#32;&#32;};
3384 _GLIBCXX_END_NAMESPACE_CXX11
3385 _GLIBCXX_END_NAMESPACE_VERSION
3386 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
3387 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
3388 
3389 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
3390 {
3391 _GLIBCXX_BEGIN_NAMESPACE_VERSION
3392 
3393 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
3394 _GLIBCXX_BEGIN_NAMESPACE_CXX11
3395 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT
3396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
3397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_CharT&gt;,
3398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
3399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
3400 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(_InputIterator,&#32;_InputIterator,&#32;_Allocator&#32;=&#32;_Allocator())
3401 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, char_traits&lt;_CharT&gt;</link>,&#32;_Allocator&gt;;
3402 
3403 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
3404 &#32;&#32;<emphasis role="comment">//&#32;3075.&#32;basic_string&#32;needs&#32;deduction&#32;guides&#32;from&#32;basic_string_view</emphasis>
3405 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,
3406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_CharT&gt;,
3407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
3408 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(basic_string_view&lt;_CharT,&#32;_Traits&gt;,&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;=&#32;_Allocator())
3409 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;</link>;
3410 
3411 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,
3412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator&#32;=&#32;allocator&lt;_CharT&gt;,
3413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
3414 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string</link>(basic_string_view&lt;_CharT,&#32;_Traits&gt;,
3415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;::size_type</link>,
3416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;::size_type</link>,
3417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Allocator&amp;&#32;=&#32;_Allocator())
3418 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Allocator&gt;</link>;
3419 _GLIBCXX_END_NAMESPACE_CXX11
3420 <emphasis role="preprocessor">#endif</emphasis>
3421 
3422 &#32;&#32;<emphasis role="comment">//&#32;operator+</emphasis>
3429 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3430 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3431 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3432 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3434 &#32;&#32;&#32;&#32;{
3435 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&#32;__str(__lhs);
3436 &#32;&#32;&#32;&#32;&#32;&#32;__str.append(__rhs);
3437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
3438 &#32;&#32;&#32;&#32;}
3439 
3446 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3447 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3448 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT,_Traits,_Alloc&gt;</link>
3449 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT,_Traits,_Alloc&gt;</link>&amp;&#32;__rhs);
3451 
3458 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3459 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3460 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT,_Traits,_Alloc&gt;</link>
3461 &#32;&#32;&#32;&#32;operator+(_CharT&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT,_Traits,_Alloc&gt;</link>&amp;&#32;__rhs);
3462 
3469 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3470 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3471 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3472 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3474 &#32;&#32;&#32;&#32;{
3475 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&#32;__str(__lhs);
3476 &#32;&#32;&#32;&#32;&#32;&#32;__str.append(__rhs);
3477 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
3478 &#32;&#32;&#32;&#32;}
3479 
3486 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3487 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3488 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3489 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,&#32;_CharT&#32;__rhs)
3490 &#32;&#32;&#32;&#32;{
3491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&#32;__string_type;
3492 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__string_type::size_type&#32;&#32;&#32;&#32;&#32;__size_type;
3493 &#32;&#32;&#32;&#32;&#32;&#32;__string_type&#32;__str(__lhs);
3494 &#32;&#32;&#32;&#32;&#32;&#32;__str.append(__size_type(1),&#32;__rhs);
3495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
3496 &#32;&#32;&#32;&#32;}
3497 
3498 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
3499 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3500 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3501 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3502 &#32;&#32;&#32;&#32;operator+(<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__lhs,
3503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3504 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lhs.append(__rhs));&#32;}
3505 
3506 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3507 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3508 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3509 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__rhs)
3511 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rhs.insert(0,&#32;__lhs));&#32;}
3512 
3513 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3514 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3515 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3516 &#32;&#32;&#32;&#32;operator+(<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__lhs,
3517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__rhs)
3518 &#32;&#32;&#32;&#32;{
3519 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI</emphasis>
3520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Alloc_traits&#32;=&#32;allocator_traits&lt;_Alloc&gt;;
3521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__use_rhs&#32;=&#32;<emphasis role="keyword">false</emphasis>;
3522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(<emphasis role="keyword">typename</emphasis>&#32;_Alloc_traits::is_always_equal{})
3523 &#32;&#32;&#32;&#32;__use_rhs&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3524 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__lhs.get_allocator()&#32;==&#32;__rhs.get_allocator())
3525 &#32;&#32;&#32;&#32;__use_rhs&#32;=&#32;<emphasis role="keyword">true</emphasis>;
3526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__use_rhs)
3527 <emphasis role="preprocessor">#endif</emphasis>
3528 &#32;&#32;&#32;&#32;{
3529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__size&#32;=&#32;__lhs.size()&#32;+&#32;__rhs.size();
3530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__size&#32;&gt;&#32;__lhs.capacity()&#32;&amp;&amp;&#32;__size&#32;&lt;=&#32;__rhs.capacity())
3531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rhs.insert(0,&#32;__lhs));
3532 &#32;&#32;&#32;&#32;}
3533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lhs.append(__rhs));
3534 &#32;&#32;&#32;&#32;}
3535 
3536 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3537 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3538 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3539 &#32;&#32;&#32;&#32;operator+(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__rhs)
3541 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rhs.insert(0,&#32;__lhs));&#32;}
3542 
3543 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3544 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3545 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3546 &#32;&#32;&#32;&#32;operator+(_CharT&#32;__lhs,
3547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__rhs)
3548 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rhs.insert(0,&#32;1,&#32;__lhs));&#32;}
3549 
3550 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3551 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3552 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3553 &#32;&#32;&#32;&#32;operator+(<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__lhs,
3554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3555 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lhs.append(__rhs));&#32;}
3556 
3557 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3558 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3559 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>
3560 &#32;&#32;&#32;&#32;operator+(<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&amp;&#32;__lhs,
3561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;__rhs)
3562 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__lhs.append(1,&#32;__rhs));&#32;}
3563 <emphasis role="preprocessor">#endif</emphasis>
3564 
3565 &#32;&#32;<emphasis role="comment">//&#32;operator&#32;==</emphasis>
3572 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3573 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3574 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3575 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3577 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3578 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;==&#32;0;&#32;}
3579 
3580 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT&gt;
3581 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3582 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
3583 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__gnu_cxx::__enable_if&lt;__is_char&lt;_CharT&gt;::__value,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;::__type
3584 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&amp;&#32;__lhs,
3585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT&gt;</link>&amp;&#32;__rhs)&#32;_GLIBCXX_NOEXCEPT
3586 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__lhs.size()&#32;==&#32;__rhs.size()
3587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!std::char_traits&lt;_CharT&gt;::compare(__lhs.data(),&#32;__rhs.data(),
3588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__lhs.size()));&#32;}
3589 
3596 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3597 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3598 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3599 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3601 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;==&#32;0;&#32;}
3602 
3603 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
3611 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3612 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
3613 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
3615 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__detail::__char_traits_cmp_cat&lt;_Traits&gt;(0))
3616 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__char_traits_cmp_cat&lt;_Traits&gt;(__lhs.compare(__rhs));&#32;}
3617 
3625 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3626 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
3627 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
3629 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__detail::__char_traits_cmp_cat&lt;_Traits&gt;(0))
3630 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__char_traits_cmp_cat&lt;_Traits&gt;(__lhs.compare(__rhs));&#32;}
3631 <emphasis role="preprocessor">#else</emphasis>
3638 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3639 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3640 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3642 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.compare(__lhs)&#32;==&#32;0;&#32;}
3643 
3644 &#32;&#32;<emphasis role="comment">//&#32;operator&#32;!=</emphasis>
3651 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3652 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3653 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3655 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3656 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
3657 
3664 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3665 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3666 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3668 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
3669 
3676 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3677 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3678 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3680 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
3681 
3682 &#32;&#32;<emphasis role="comment">//&#32;operator&#32;&lt;</emphasis>
3689 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3690 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3691 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3693 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3694 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;&#32;0;&#32;}
3695 
3702 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3703 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3704 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3706 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;&#32;0;&#32;}
3707 
3714 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3715 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3716 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3718 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.compare(__lhs)&#32;&gt;&#32;0;&#32;}
3719 
3720 &#32;&#32;<emphasis role="comment">//&#32;operator&#32;&gt;</emphasis>
3727 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3728 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3729 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3731 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3732 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&gt;&#32;0;&#32;}
3733 
3740 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3741 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3742 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3744 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&gt;&#32;0;&#32;}
3745 
3752 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3753 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3754 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3756 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.compare(__lhs)&#32;&lt;&#32;0;&#32;}
3757 
3758 &#32;&#32;<emphasis role="comment">//&#32;operator&#32;&lt;=</emphasis>
3765 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3766 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3767 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3769 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3770 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;=&#32;0;&#32;}
3771 
3778 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3779 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3780 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3782 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;=&#32;0;&#32;}
3783 
3790 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3791 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3792 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3794 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.compare(__lhs)&#32;&gt;=&#32;0;&#32;}
3795 
3796 &#32;&#32;<emphasis role="comment">//&#32;operator&#32;&gt;=</emphasis>
3803 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3804 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3805 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3807 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT
3808 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&gt;=&#32;0;&#32;}
3809 
3816 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3817 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3818 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__rhs)
3820 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&gt;=&#32;0;&#32;}
3821 
3828 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3829 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
3830 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__lhs,
3831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3832 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.compare(__lhs)&#32;&lt;=&#32;0;&#32;}
3833 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
3834 
3842 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3843 &#32;&#32;&#32;&#32;_GLIBCXX20_CONSTEXPR
3844 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
3845 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__lhs,
3846 &#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__rhs)
3847 &#32;&#32;&#32;&#32;_GLIBCXX_NOEXCEPT_IF(<emphasis role="keyword">noexcept</emphasis>(__lhs.swap(__rhs)))
3848 &#32;&#32;&#32;&#32;{&#32;__lhs.swap(__rhs);&#32;}
3849 
3850 
3863 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3864 &#32;&#32;&#32;&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3865 &#32;&#32;&#32;&#32;operator&gt;&gt;(basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str);
3867 
3868 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
3869 &#32;&#32;&#32;&#32;basic_istream&lt;char&gt;&amp;
3870 &#32;&#32;&#32;&#32;operator&gt;&gt;(basic_istream&lt;char&gt;&amp;&#32;__is,&#32;<link linkend="_classbasic__string">basic_string&lt;char&gt;</link>&amp;&#32;__str);
3871 
3881 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3882 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;
3883 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(basic_ostream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__os,
3884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str)
3885 &#32;&#32;&#32;&#32;{
3886 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
3887 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;586.&#32;string&#32;inserter&#32;not&#32;a&#32;formatted&#32;function</emphasis>
3888 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ostream_insert(__os,&#32;__str.data(),&#32;__str.size());
3889 &#32;&#32;&#32;&#32;}
3890 
3904 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3905 &#32;&#32;&#32;&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3906 &#32;&#32;&#32;&#32;getline(basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str,&#32;_CharT&#32;__delim);
3908 
3921 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3922 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3923 &#32;&#32;&#32;&#32;getline(basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&#32;__is,
3924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str)
3925 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::getline(__is,&#32;__str,&#32;__is.widen(<emphasis role="charliteral">&apos;\n&apos;</emphasis>));&#32;}
3926 
3927 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
3929 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3930 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3931 &#32;&#32;&#32;&#32;getline(basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&amp;&#32;__is,
3932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str,&#32;_CharT&#32;__delim)
3933 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::getline(__is,&#32;__str,&#32;__delim);&#32;}
3934 
3936 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
3937 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;
3938 &#32;&#32;&#32;&#32;getline(basic_istream&lt;_CharT,&#32;_Traits&gt;&amp;&amp;&#32;__is,
3939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_CharT, _Traits, _Alloc&gt;</link>&amp;&#32;__str)
3940 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::getline(__is,&#32;__str);&#32;}
3941 <emphasis role="preprocessor">#endif</emphasis>
3942 
3943 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
3944 &#32;&#32;&#32;&#32;basic_istream&lt;char&gt;&amp;
3945 &#32;&#32;&#32;&#32;getline(basic_istream&lt;char&gt;&amp;&#32;__in,&#32;<link linkend="_classbasic__string">basic_string&lt;char&gt;</link>&amp;&#32;__str,
3946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;__delim);
3947 
3948 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
3949 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
3950 &#32;&#32;&#32;&#32;basic_istream&lt;wchar_t&gt;&amp;
3951 &#32;&#32;&#32;&#32;getline(basic_istream&lt;wchar_t&gt;&amp;&#32;__in,&#32;<link linkend="_classbasic__string">basic_string&lt;wchar_t&gt;</link>&amp;&#32;__str,
3952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">wchar_t</emphasis>&#32;__delim);
3953 <emphasis role="preprocessor">#endif&#32;&#32;</emphasis>
3954 
3955 _GLIBCXX_END_NAMESPACE_VERSION
3956 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
3957 
3958 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
3959 
3960 <emphasis role="preprocessor">#include&#32;&lt;ext/string_conversions.h&gt;</emphasis>
3961 <emphasis role="preprocessor">#include&#32;&lt;bits/charconv.h&gt;</emphasis>
3962 
3963 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
3964 {
3965 _GLIBCXX_BEGIN_NAMESPACE_VERSION
3966 _GLIBCXX_BEGIN_NAMESPACE_CXX11
3967 
3968 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_C99_STDLIB</emphasis>
3969 &#32;&#32;<emphasis role="comment">//&#32;21.4&#32;Numeric&#32;Conversions&#32;[string.conversions].</emphasis>
3970 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
3971 &#32;&#32;<link linkend="_namespacelest_1aa8f139b4d4ae346e4caa755ec5af3798">stoi</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
3972 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa&lt;long,&#32;int&gt;(&amp;std::strtol,&#32;<emphasis role="stringliteral">&quot;stoi&quot;</emphasis>,&#32;__str.c_str(),
3973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
3974 
3975 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
3976 &#32;&#32;stol(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
3977 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::strtol,&#32;<emphasis role="stringliteral">&quot;stol&quot;</emphasis>,&#32;__str.c_str(),
3978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
3979 
3980 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
3981 &#32;&#32;stoul(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
3982 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::strtoul,&#32;<emphasis role="stringliteral">&quot;stoul&quot;</emphasis>,&#32;__str.c_str(),
3983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
3984 
3985 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
3986 &#32;&#32;stoll(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
3987 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::strtoll,&#32;<emphasis role="stringliteral">&quot;stoll&quot;</emphasis>,&#32;__str.c_str(),
3988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
3989 
3990 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
3991 &#32;&#32;stoull(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
3992 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::strtoull,&#32;<emphasis role="stringliteral">&quot;stoull&quot;</emphasis>,&#32;__str.c_str(),
3993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
3994 
3995 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;strtof&#32;vs&#32;strtod.</emphasis>
3996 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>
3997 &#32;&#32;stof(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0)
3998 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::strtof,&#32;<emphasis role="stringliteral">&quot;stof&quot;</emphasis>,&#32;__str.c_str(),&#32;__idx);&#32;}
3999 
4000 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>
4001 &#32;&#32;stod(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0)
4002 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::strtod,&#32;<emphasis role="stringliteral">&quot;stod&quot;</emphasis>,&#32;__str.c_str(),&#32;__idx);&#32;}
4003 
4004 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>
4005 &#32;&#32;stold(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0)
4006 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::strtold,&#32;<emphasis role="stringliteral">&quot;stold&quot;</emphasis>,&#32;__str.c_str(),&#32;__idx);&#32;}
4007 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_C99_STDLIB</emphasis>
4008 
4009 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;1261.&#32;Insufficent&#32;overloads&#32;for&#32;to_string&#32;/&#32;to_wstring</emphasis>
4010 
4011 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4012 &#32;&#32;to_string(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4013 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI&#32;&amp;&amp;&#32;(__CHAR_BIT__&#32;*&#32;__SIZEOF_INT__)&#32;&lt;=&#32;32</emphasis>
4014 &#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;any&#32;32-bit&#32;value&#32;fits&#32;in&#32;the&#32;SSO&#32;buffer</emphasis>
4015 <emphasis role="preprocessor">#endif</emphasis>
4016 &#32;&#32;{
4017 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;&lt;&#32;0;
4018 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__uval&#32;=&#32;__neg&#32;?&#32;(unsigned)~<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;+&#32;1u&#32;:&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
4019 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;__detail::__to_chars_len(__uval);
4020 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;__str(__neg&#32;+&#32;__len,&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>);
4021 &#32;&#32;&#32;&#32;__detail::__to_chars_10_impl(&amp;__str[__neg],&#32;__len,&#32;__uval);
4022 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
4023 &#32;&#32;}
4024 
4025 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4026 &#32;&#32;to_string(<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4027 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI&#32;&amp;&amp;&#32;(__CHAR_BIT__&#32;*&#32;__SIZEOF_INT__)&#32;&lt;=&#32;32</emphasis>
4028 &#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;any&#32;32-bit&#32;value&#32;fits&#32;in&#32;the&#32;SSO&#32;buffer</emphasis>
4029 <emphasis role="preprocessor">#endif</emphasis>
4030 &#32;&#32;{
4031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;__str(__detail::__to_chars_len(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
4032 &#32;&#32;&#32;&#32;__detail::__to_chars_10_impl(&amp;__str[0],&#32;__str.size(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4033 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
4034 &#32;&#32;}
4035 
4036 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4037 &#32;&#32;to_string(<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4038 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI&#32;&amp;&amp;&#32;(__CHAR_BIT__&#32;*&#32;__SIZEOF_LONG__)&#32;&lt;=&#32;32</emphasis>
4039 &#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;any&#32;32-bit&#32;value&#32;fits&#32;in&#32;the&#32;SSO&#32;buffer</emphasis>
4040 <emphasis role="preprocessor">#endif</emphasis>
4041 &#32;&#32;{
4042 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;&lt;&#32;0;
4043 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__uval&#32;=&#32;__neg&#32;?&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;long)~<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;+&#32;1ul&#32;:&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
4044 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;__detail::__to_chars_len(__uval);
4045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;__str(__neg&#32;+&#32;__len,&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>);
4046 &#32;&#32;&#32;&#32;__detail::__to_chars_10_impl(&amp;__str[__neg],&#32;__len,&#32;__uval);
4047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
4048 &#32;&#32;}
4049 
4050 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4051 &#32;&#32;to_string(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4052 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_CXX11_ABI&#32;&amp;&amp;&#32;(__CHAR_BIT__&#32;*&#32;__SIZEOF_LONG__)&#32;&lt;=&#32;32</emphasis>
4053 &#32;&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//&#32;any&#32;32-bit&#32;value&#32;fits&#32;in&#32;the&#32;SSO&#32;buffer</emphasis>
4054 <emphasis role="preprocessor">#endif</emphasis>
4055 &#32;&#32;{
4056 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;__str(__detail::__to_chars_len(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
4057 &#32;&#32;&#32;&#32;__detail::__to_chars_10_impl(&amp;__str[0],&#32;__str.size(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4058 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
4059 &#32;&#32;}
4060 
4061 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4062 &#32;&#32;to_string(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4063 &#32;&#32;{
4064 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;&lt;&#32;0;
4065 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__uval
4066 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__neg&#32;?&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;long)~<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>&#32;+&#32;1ull&#32;:&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
4067 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__len&#32;=&#32;__detail::__to_chars_len(__uval);
4068 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;__str(__neg&#32;+&#32;__len,&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>);
4069 &#32;&#32;&#32;&#32;__detail::__to_chars_10_impl(&amp;__str[__neg],&#32;__len,&#32;__uval);
4070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
4071 &#32;&#32;}
4072 
4073 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4074 &#32;&#32;to_string(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4075 &#32;&#32;{
4076 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">string</emphasis>&#32;__str(__detail::__to_chars_len(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>),&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
4077 &#32;&#32;&#32;&#32;__detail::__to_chars_10_impl(&amp;__str[0],&#32;__str.size(),&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__str;
4079 &#32;&#32;}
4080 
4081 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_C99_STDIO</emphasis>
4082 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;(v)snprintf&#32;vs&#32;sprintf.</emphasis>
4083 
4084 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4085 &#32;&#32;to_string(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4086 &#32;&#32;{
4087 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__n&#32;=&#32;
4088 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;float&gt;::__max_exponent10&#32;+&#32;20;
4089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;string&gt;(&amp;std::vsnprintf,&#32;__n,
4090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%f&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4091 &#32;&#32;}
4092 
4093 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4094 &#32;&#32;to_string(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4095 &#32;&#32;{
4096 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__n&#32;=&#32;
4097 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;double&gt;::__max_exponent10&#32;+&#32;20;
4098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;string&gt;(&amp;std::vsnprintf,&#32;__n,
4099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%f&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4100 &#32;&#32;}
4101 
4102 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>
4103 &#32;&#32;to_string(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4104 &#32;&#32;{
4105 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__n&#32;=&#32;
4106 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;long&#32;double&gt;::__max_exponent10&#32;+&#32;20;
4107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;string&gt;(&amp;std::vsnprintf,&#32;__n,
4108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;%Lf&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4109 &#32;&#32;}
4110 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_C99_STDIO</emphasis>
4111 
4112 <emphasis role="preprocessor">#if&#32;defined(_GLIBCXX_USE_WCHAR_T)&#32;&amp;&amp;&#32;_GLIBCXX_USE_C99_WCHAR</emphasis>
4113 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;
4114 &#32;&#32;<link linkend="_namespacelest_1aa8f139b4d4ae346e4caa755ec5af3798">stoi</link>(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
4115 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa&lt;long,&#32;int&gt;(&amp;std::wcstol,&#32;<emphasis role="stringliteral">&quot;stoi&quot;</emphasis>,&#32;__str.c_str(),
4116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
4117 
4118 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;
4119 &#32;&#32;stol(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
4120 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::wcstol,&#32;<emphasis role="stringliteral">&quot;stol&quot;</emphasis>,&#32;__str.c_str(),
4121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
4122 
4123 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
4124 &#32;&#32;stoul(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
4125 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::wcstoul,&#32;<emphasis role="stringliteral">&quot;stoul&quot;</emphasis>,&#32;__str.c_str(),
4126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
4127 
4128 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
4129 &#32;&#32;stoll(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
4130 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::wcstoll,&#32;<emphasis role="stringliteral">&quot;stoll&quot;</emphasis>,&#32;__str.c_str(),
4131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
4132 
4133 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
4134 &#32;&#32;stoull(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__base&#32;=&#32;10)
4135 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::wcstoull,&#32;<emphasis role="stringliteral">&quot;stoull&quot;</emphasis>,&#32;__str.c_str(),
4136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__idx,&#32;__base);&#32;}
4137 
4138 &#32;&#32;<emphasis role="comment">//&#32;NB:&#32;wcstof&#32;vs&#32;wcstod.</emphasis>
4139 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>
4140 &#32;&#32;stof(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0)
4141 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::wcstof,&#32;<emphasis role="stringliteral">&quot;stof&quot;</emphasis>,&#32;__str.c_str(),&#32;__idx);&#32;}
4142 
4143 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>
4144 &#32;&#32;stod(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0)
4145 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::wcstod,&#32;<emphasis role="stringliteral">&quot;stod&quot;</emphasis>,&#32;__str.c_str(),&#32;__idx);&#32;}
4146 
4147 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>
4148 &#32;&#32;stold(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;__idx&#32;=&#32;0)
4149 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__stoa(&amp;std::wcstold,&#32;<emphasis role="stringliteral">&quot;stold&quot;</emphasis>,&#32;__str.c_str(),&#32;__idx);&#32;}
4150 
4151 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_HAVE_BROKEN_VSWPRINTF</emphasis>
4152 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;1261.</emphasis>
4153 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4154 &#32;&#32;to_wstring(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4155 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">int</emphasis>),
4156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%d&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
4157 
4158 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4159 &#32;&#32;to_wstring(<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4160 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,
4161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>),
4162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%u&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
4163 
4164 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4165 &#32;&#32;to_wstring(<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4166 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>),
4167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%ld&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
4168 
4169 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4170 &#32;&#32;to_wstring(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4171 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,
4172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>),
4173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%lu&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
4174 
4175 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4176 &#32;&#32;to_wstring(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4177 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,
4178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>),
4179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%lld&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
4180 
4181 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4182 &#32;&#32;to_wstring(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4183 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,
4184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>),
4185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%llu&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);&#32;}
4186 
4187 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4188 &#32;&#32;to_wstring(<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4189 &#32;&#32;{
4190 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__n&#32;=
4191 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;float&gt;::__max_exponent10&#32;+&#32;20;
4192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,&#32;__n,
4193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%f&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4194 &#32;&#32;}
4195 
4196 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4197 &#32;&#32;to_wstring(<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4198 &#32;&#32;{
4199 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__n&#32;=
4200 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;double&gt;::__max_exponent10&#32;+&#32;20;
4201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,&#32;__n,
4202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%f&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4203 &#32;&#32;}
4204 
4205 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;wstring
4206 &#32;&#32;to_wstring(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)
4207 &#32;&#32;{
4208 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__n&#32;=
4209 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__numeric_traits&lt;long&#32;double&gt;::__max_exponent10&#32;+&#32;20;
4210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__gnu_cxx::__to_xstring&lt;wstring&gt;(&amp;std::vswprintf,&#32;__n,
4211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link><emphasis role="stringliteral">&quot;%Lf&quot;</emphasis>,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
4212 &#32;&#32;}
4213 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_HAVE_BROKEN_VSWPRINTF</emphasis>
4214 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_USE_WCHAR_T&#32;&amp;&amp;&#32;_GLIBCXX_USE_C99_WCHAR</emphasis>
4215 
4216 _GLIBCXX_END_NAMESPACE_CXX11
4217 _GLIBCXX_END_NAMESPACE_VERSION
4218 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
4219 
4220 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;C++11&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
4221 
4222 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
4223 
4224 <emphasis role="preprocessor">#include&#32;&lt;bits/functional_hash.h&gt;</emphasis>
4225 
4226 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
4227 {
4228 _GLIBCXX_BEGIN_NAMESPACE_VERSION
4229 
4230 &#32;&#32;<emphasis role="comment">//&#32;DR&#32;1182.</emphasis>
4231 
4232 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_COMPATIBILITY_CXX0X</emphasis>
4234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4235 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>&gt;
4236 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;string&gt;
4237 &#32;&#32;&#32;&#32;{
4238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
4239 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">string</emphasis>&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4240 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Hash_impl::hash(__s.data(),&#32;__s.length());&#32;}
4241 &#32;&#32;&#32;&#32;};
4242 
4243 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4244 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fast_hash&lt;hash&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a5ef8ce60531c971745798ebb9f61a5d8">string</link>&gt;&gt;&#32;:&#32;std::false_type
4245 &#32;&#32;&#32;&#32;{&#32;};
4246 
4248 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4249 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;wstring&gt;
4250 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;wstring&gt;
4251 &#32;&#32;&#32;&#32;{
4252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
4253 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;wstring&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4254 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Hash_impl::hash(__s.data(),
4255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.length()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">wchar_t</emphasis>));&#32;}
4256 &#32;&#32;&#32;&#32;};
4257 
4258 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4259 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fast_hash&lt;hash&lt;wstring&gt;&gt;&#32;:&#32;std::false_type
4260 &#32;&#32;&#32;&#32;{&#32;};
4261 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_COMPATIBILITY_CXX0X&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
4262 
4263 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
4265 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4266 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;u8string&gt;
4267 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;u8string&gt;
4268 &#32;&#32;&#32;&#32;{
4269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
4270 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;u8string&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4271 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Hash_impl::hash(__s.data(),
4272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.length()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char8_t</emphasis>));&#32;}
4273 &#32;&#32;&#32;&#32;};
4274 
4275 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4276 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fast_hash&lt;hash&lt;u8string&gt;&gt;&#32;:&#32;std::false_type
4277 &#32;&#32;&#32;&#32;{&#32;};
4278 <emphasis role="preprocessor">#endif</emphasis>
4279 
4281 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4282 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;u16string&gt;
4283 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;u16string&gt;
4284 &#32;&#32;&#32;&#32;{
4285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
4286 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;u16string&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4287 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Hash_impl::hash(__s.data(),
4288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.length()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char16_t</emphasis>));&#32;}
4289 &#32;&#32;&#32;&#32;};
4290 
4291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4292 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fast_hash&lt;hash&lt;u16string&gt;&gt;&#32;:&#32;std::false_type
4293 &#32;&#32;&#32;&#32;{&#32;};
4294 
4296 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4297 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;u32string&gt;
4298 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;u32string&gt;
4299 &#32;&#32;&#32;&#32;{
4300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
4301 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;u32string&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
4302 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::_Hash_impl::hash(__s.data(),
4303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.length()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">char32_t</emphasis>));&#32;}
4304 &#32;&#32;&#32;&#32;};
4305 
4306 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
4307 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_fast_hash&lt;hash&lt;u32string&gt;&gt;&#32;:&#32;std::false_type
4308 &#32;&#32;&#32;&#32;{&#32;};
4309 
4310 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201402L</emphasis>
4311 
4312 <emphasis role="preprocessor">#define&#32;__cpp_lib_string_udls&#32;201304L</emphasis>
4313 
4314 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceliterals">literals</link>
4315 &#32;&#32;{
4316 &#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">namespace&#32;</emphasis>string_literals
4317 &#32;&#32;{
4318 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
4319 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wliteral-suffix&quot;</emphasis>
4320 
4321 <emphasis role="preprocessor">#if&#32;__cpp_lib_constexpr_string&#32;&gt;=&#32;201907L</emphasis>
4322 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_STRING_CONSTEXPR&#32;constexpr</emphasis>
4323 <emphasis role="preprocessor">#else</emphasis>
4324 <emphasis role="preprocessor">#&#32;define&#32;_GLIBCXX_STRING_CONSTEXPR</emphasis>
4325 <emphasis role="preprocessor">#endif</emphasis>
4326 
4327 &#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG&#32;_GLIBCXX_STRING_CONSTEXPR
4328 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char&gt;</link>
4329 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>s(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
4330 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char&gt;</link>{__str,&#32;__len};&#32;}
4331 
4332 &#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG&#32;_GLIBCXX_STRING_CONSTEXPR
4333 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;wchar_t&gt;</link>
4334 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>s(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
4335 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;wchar_t&gt;</link>{__str,&#32;__len};&#32;}
4336 
4337 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_CHAR8_T</emphasis>
4338 &#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG&#32;_GLIBCXX_STRING_CONSTEXPR
4339 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char8_t&gt;</link>
4340 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>s(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char8_t</emphasis>*&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
4341 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char8_t&gt;</link>{__str,&#32;__len};&#32;}
4342 <emphasis role="preprocessor">#endif</emphasis>
4343 
4344 &#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG&#32;_GLIBCXX_STRING_CONSTEXPR
4345 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char16_t&gt;</link>
4346 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>s(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char16_t</emphasis>*&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
4347 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char16_t&gt;</link>{__str,&#32;__len};&#32;}
4348 
4349 &#32;&#32;&#32;&#32;_GLIBCXX_DEFAULT_ABI_TAG&#32;_GLIBCXX_STRING_CONSTEXPR
4350 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char32_t&gt;</link>
4351 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis><emphasis role="stringliteral">&quot;&quot;</emphasis>s(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char32_t</emphasis>*&#32;__str,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len)
4352 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char32_t&gt;</link>{__str,&#32;__len};&#32;}
4353 
4354 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_STRING_CONSTEXPR</emphasis>
4355 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
4356 &#32;&#32;}&#32;<emphasis role="comment">//&#32;inline&#32;namespace&#32;string_literals</emphasis>
4357 &#32;&#32;}&#32;<emphasis role="comment">//&#32;inline&#32;namespace&#32;literals</emphasis>
4358 
4359 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
4360 &#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis>__detail::__variant
4361 &#32;&#32;{
4362 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Never_valueless_alt;&#32;<emphasis role="comment">//&#32;see&#32;&lt;variant&gt;</emphasis>
4363 
4364 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Provide&#32;the&#32;strong&#32;exception-safety&#32;guarantee&#32;when&#32;emplacing&#32;a</emphasis>
4365 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;basic_string&#32;into&#32;a&#32;variant,&#32;but&#32;only&#32;if&#32;moving&#32;the&#32;string&#32;cannot&#32;throw.</emphasis>
4366 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
4367 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Never_valueless_alt&lt;<link linkend="_namespacestd">std</link>::<link linkend="_classbasic__string">basic_string</link>&lt;_Tp,&#32;_Traits,&#32;_Alloc&gt;&gt;
4368 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__and_&lt;
4369 &#32;&#32;&#32;&#32;is_nothrow_move_constructible&lt;std::basic_string&lt;_Tp,&#32;_Traits,&#32;_Alloc&gt;&gt;,
4370 &#32;&#32;&#32;&#32;is_nothrow_move_assignable&lt;std::basic_string&lt;_Tp,&#32;_Traits,&#32;_Alloc&gt;&gt;
4371 &#32;&#32;&#32;&#32;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
4372 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;};
4373 &#32;&#32;}&#32;&#32;<emphasis role="comment">//&#32;namespace&#32;__detail::__variant</emphasis>
4374 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
4375 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++14</emphasis>
4376 
4377 _GLIBCXX_END_NAMESPACE_VERSION
4378 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
4379 
4380 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
4381 
4382 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_BASIC_STRING_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
