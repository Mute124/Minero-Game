<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2external_2sinfl_8h_source" xml:lang="en-US">
<title>sinfl.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/external/sinfl.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*</emphasis>
2 <emphasis role="comment">#&#32;Small&#32;Deflate</emphasis>
3 <emphasis role="comment">`sdefl`&#32;is&#32;a&#32;small&#32;bare&#32;bone&#32;lossless&#32;compression&#32;library&#32;in&#32;ANSI&#32;C&#32;(ISO&#32;C90)</emphasis>
4 <emphasis role="comment">which&#32;implements&#32;the&#32;Deflate&#32;(RFC&#32;1951)&#32;compressed&#32;data&#32;format&#32;specification&#32;standard.</emphasis>
5 <emphasis role="comment">It&#32;is&#32;mainly&#32;tuned&#32;to&#32;get&#32;as&#32;much&#32;speed&#32;and&#32;compression&#32;ratio&#32;from&#32;as&#32;little&#32;code</emphasis>
6 <emphasis role="comment">as&#32;needed&#32;to&#32;keep&#32;the&#32;implementation&#32;as&#32;concise&#32;as&#32;possible.</emphasis>
7 <emphasis role="comment"></emphasis>
8 <emphasis role="comment">##&#32;Features</emphasis>
9 <emphasis role="comment">-&#32;Portable&#32;single&#32;header&#32;and&#32;source&#32;file&#32;duo&#32;written&#32;in&#32;ANSI&#32;C&#32;(ISO&#32;C90)</emphasis>
10 <emphasis role="comment">-&#32;Dual&#32;license&#32;with&#32;either&#32;MIT&#32;or&#32;public&#32;domain</emphasis>
11 <emphasis role="comment">-&#32;Small&#32;implementation</emphasis>
12 <emphasis role="comment">&#32;&#32;&#32;&#32;-&#32;Deflate:&#32;525&#32;LoC</emphasis>
13 <emphasis role="comment">&#32;&#32;&#32;&#32;-&#32;Inflate:&#32;320&#32;LoC</emphasis>
14 <emphasis role="comment">-&#32;Webassembly:</emphasis>
15 <emphasis role="comment">&#32;&#32;&#32;&#32;-&#32;Deflate&#32;~3.7&#32;KB&#32;(~2.2KB&#32;compressed)</emphasis>
16 <emphasis role="comment">&#32;&#32;&#32;&#32;-&#32;Inflate&#32;~3.6&#32;KB&#32;(~2.2KB&#32;compressed)</emphasis>
17 <emphasis role="comment"></emphasis>
18 <emphasis role="comment">##&#32;Usage:</emphasis>
19 <emphasis role="comment">This&#32;file&#32;behaves&#32;differently&#32;depending&#32;on&#32;what&#32;symbols&#32;you&#32;define</emphasis>
20 <emphasis role="comment">before&#32;including&#32;it.</emphasis>
21 <emphasis role="comment"></emphasis>
22 <emphasis role="comment">Header-File&#32;mode:</emphasis>
23 <emphasis role="comment">If&#32;you&#32;do&#32;not&#32;define&#32;`SINFL_IMPLEMENTATION`&#32;before&#32;including&#32;this&#32;file,&#32;it</emphasis>
24 <emphasis role="comment">will&#32;operate&#32;in&#32;header&#32;only&#32;mode.&#32;In&#32;this&#32;mode&#32;it&#32;declares&#32;all&#32;used&#32;structs</emphasis>
25 <emphasis role="comment">and&#32;the&#32;API&#32;of&#32;the&#32;library&#32;without&#32;including&#32;the&#32;implementation&#32;of&#32;the&#32;library.</emphasis>
26 <emphasis role="comment"></emphasis>
27 <emphasis role="comment">Implementation&#32;mode:</emphasis>
28 <emphasis role="comment">If&#32;you&#32;define&#32;`SINFL_IMPLEMENTATION`&#32;before&#32;including&#32;this&#32;file,&#32;it&#32;will</emphasis>
29 <emphasis role="comment">compile&#32;the&#32;implementation.&#32;Make&#32;sure&#32;that&#32;you&#32;only&#32;include</emphasis>
30 <emphasis role="comment">this&#32;file&#32;implementation&#32;in&#32;*one*&#32;C&#32;or&#32;C++&#32;file&#32;to&#32;prevent&#32;collisions.</emphasis>
31 <emphasis role="comment"></emphasis>
32 <emphasis role="comment">###&#32;Benchmark</emphasis>
33 <emphasis role="comment"></emphasis>
34 <emphasis role="comment">|&#32;Compressor&#32;name&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;Compression|&#32;Decompress.|&#32;Compr.&#32;size&#32;|&#32;Ratio&#32;|</emphasis>
35 <emphasis role="comment">|&#32;------------------------|&#32;-----------|&#32;-----------|&#32;-----------&#32;|&#32;-----&#32;|</emphasis>
36 <emphasis role="comment">|&#32;miniz&#32;1.0&#32;-1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;122&#32;MB/s&#32;|&#32;&#32;&#32;208&#32;MB/s&#32;|&#32;&#32;&#32;&#32;48510028&#32;|&#32;48.51&#32;|</emphasis>
37 <emphasis role="comment">|&#32;miniz&#32;1.0&#32;-6&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;27&#32;MB/s&#32;|&#32;&#32;&#32;260&#32;MB/s&#32;|&#32;&#32;&#32;&#32;36513697&#32;|&#32;36.51&#32;|</emphasis>
38 <emphasis role="comment">|&#32;miniz&#32;1.0&#32;-9&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;23&#32;MB/s&#32;|&#32;&#32;&#32;261&#32;MB/s&#32;|&#32;&#32;&#32;&#32;36460101&#32;|&#32;36.46&#32;|</emphasis>
39 <emphasis role="comment">|&#32;zlib&#32;1.2.11&#32;-1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;72&#32;MB/s&#32;|&#32;&#32;&#32;307&#32;MB/s&#32;|&#32;&#32;&#32;&#32;42298774&#32;|&#32;42.30&#32;|</emphasis>
40 <emphasis role="comment">|&#32;zlib&#32;1.2.11&#32;-6&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;24&#32;MB/s&#32;|&#32;&#32;&#32;313&#32;MB/s&#32;|&#32;&#32;&#32;&#32;36548921&#32;|&#32;36.55&#32;|</emphasis>
41 <emphasis role="comment">|&#32;zlib&#32;1.2.11&#32;-9&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;20&#32;MB/s&#32;|&#32;&#32;&#32;314&#32;MB/s&#32;|&#32;&#32;&#32;&#32;36475792&#32;|&#32;36.48&#32;|</emphasis>
42 <emphasis role="comment">|&#32;sdefl&#32;1.0&#32;-0&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;127&#32;MB/s&#32;|&#32;&#32;&#32;371&#32;MB/s&#32;|&#32;&#32;&#32;&#32;40004116&#32;|&#32;39.88&#32;|</emphasis>
43 <emphasis role="comment">|&#32;sdefl&#32;1.0&#32;-1&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;111&#32;MB/s&#32;|&#32;&#32;&#32;398&#32;MB/s&#32;|&#32;&#32;&#32;&#32;38940674&#32;|&#32;38.82&#32;|</emphasis>
44 <emphasis role="comment">|&#32;sdefl&#32;1.0&#32;-5&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;45&#32;MB/s&#32;|&#32;&#32;&#32;420&#32;MB/s&#32;|&#32;&#32;&#32;&#32;36577183&#32;|&#32;36.46&#32;|</emphasis>
45 <emphasis role="comment">|&#32;sdefl&#32;1.0&#32;-7&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;38&#32;MB/s&#32;|&#32;&#32;&#32;423&#32;MB/s&#32;|&#32;&#32;&#32;&#32;36523781&#32;|&#32;36.41&#32;|</emphasis>
46 <emphasis role="comment">|&#32;libdeflate&#32;1.3&#32;-1&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;147&#32;MB/s&#32;|&#32;&#32;&#32;667&#32;MB/s&#32;|&#32;&#32;&#32;&#32;39597378&#32;|&#32;39.60&#32;|</emphasis>
47 <emphasis role="comment">|&#32;libdeflate&#32;1.3&#32;-6&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;69&#32;MB/s&#32;|&#32;&#32;&#32;689&#32;MB/s&#32;|&#32;&#32;&#32;&#32;36648318&#32;|&#32;36.65&#32;|</emphasis>
48 <emphasis role="comment">|&#32;libdeflate&#32;1.3&#32;-9&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;&#32;&#32;13&#32;MB/s&#32;|&#32;&#32;&#32;672&#32;MB/s&#32;|&#32;&#32;&#32;&#32;35197141&#32;|&#32;35.20&#32;|</emphasis>
49 <emphasis role="comment">|&#32;libdeflate&#32;1.3&#32;-12&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;8.13&#32;MB/s&#32;|&#32;&#32;&#32;670&#32;MB/s&#32;|&#32;&#32;&#32;&#32;35100568&#32;|&#32;35.10&#32;|</emphasis>
50 <emphasis role="comment"></emphasis>
51 <emphasis role="comment">###&#32;Compression</emphasis>
52 <emphasis role="comment">Results&#32;on&#32;the&#32;[Silesia&#32;compression&#32;corpus](http://sun.aei.polsl.pl/~sdeor/index.php?page=silesia):</emphasis>
53 <emphasis role="comment"></emphasis>
54 <emphasis role="comment">|&#32;File&#32;&#32;&#32;&#32;|&#32;&#32;&#32;Original&#32;|&#32;`sdefl&#32;0`&#32;&#32;&#32;&#32;|&#32;`sdefl&#32;5`&#32;&#32;&#32;|&#32;`sdefl&#32;7`&#32;|</emphasis>
55 <emphasis role="comment">|&#32;:------&#32;|&#32;---------:&#32;|&#32;-----------------:&#32;|&#32;---------:&#32;|&#32;----------:&#32;|</emphasis>
56 <emphasis role="comment">|&#32;dickens&#32;|&#32;10.192.446&#32;|&#32;&#32;4,260,187|&#32;&#32;3,845,261|&#32;&#32;&#32;3,833,657&#32;|</emphasis>
57 <emphasis role="comment">|&#32;mozilla&#32;|&#32;51.220.480&#32;|&#32;20,774,706&#32;|&#32;19,607,009&#32;|&#32;&#32;19,565,867&#32;|</emphasis>
58 <emphasis role="comment">|&#32;mr&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;9.970.564&#32;|&#32;3,860,531&#32;|&#32;&#32;3,673,460&#32;|&#32;&#32;&#32;3,665,627&#32;|</emphasis>
59 <emphasis role="comment">|&#32;nci&#32;&#32;&#32;&#32;&#32;|&#32;33.553.445&#32;|&#32;4,030,283&#32;|&#32;&#32;3,094,526&#32;|&#32;&#32;&#32;3,006,075&#32;|</emphasis>
60 <emphasis role="comment">|&#32;ooffice&#32;|&#32;&#32;6.152.192&#32;|&#32;3,320,063&#32;|&#32;&#32;3,186,373&#32;|&#32;&#32;&#32;3,183,815&#32;|</emphasis>
61 <emphasis role="comment">|&#32;osdb&#32;&#32;&#32;&#32;|&#32;10.085.684&#32;|&#32;3,919,646&#32;|&#32;&#32;3,649,510&#32;|&#32;&#32;&#32;3,649,477&#32;|</emphasis>
62 <emphasis role="comment">|&#32;reymont&#32;|&#32;&#32;6.627.202&#32;|&#32;2,263,378&#32;|&#32;&#32;1,857,588&#32;|&#32;&#32;&#32;1,827,237&#32;|</emphasis>
63 <emphasis role="comment">|&#32;samba&#32;&#32;&#32;|&#32;21.606.400&#32;|&#32;6,121,797&#32;|&#32;&#32;5,462,670&#32;|&#32;&#32;&#32;5,450,762&#32;|</emphasis>
64 <emphasis role="comment">|&#32;sao&#32;&#32;&#32;&#32;&#32;|&#32;&#32;7.251.944&#32;|&#32;5,612,421&#32;|&#32;&#32;5,485,380&#32;|&#32;&#32;&#32;5,481,765&#32;|</emphasis>
65 <emphasis role="comment">|&#32;webster&#32;|&#32;41.458.703&#32;|&#32;13,972,648&#32;|&#32;12,059,432&#32;|&#32;&#32;11,991,421&#32;|</emphasis>
66 <emphasis role="comment">|&#32;xml&#32;&#32;&#32;&#32;&#32;|&#32;&#32;5.345.280&#32;|&#32;886,620|&#32;&#32;&#32;&#32;674,009&#32;|&#32;&#32;&#32;&#32;&#32;662,141&#32;|</emphasis>
67 <emphasis role="comment">|&#32;x-ray&#32;&#32;&#32;|&#32;&#32;8.474.240&#32;|&#32;6,304,655&#32;|&#32;&#32;6,244,779&#32;|&#32;&#32;&#32;6,244,779&#32;|</emphasis>
68 <emphasis role="comment"></emphasis>
69 <emphasis role="comment">##&#32;License</emphasis>
70 <emphasis role="comment">```</emphasis>
71 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
72 <emphasis role="comment">This&#32;software&#32;is&#32;available&#32;under&#32;2&#32;licenses&#32;--&#32;choose&#32;whichever&#32;you&#32;prefer.</emphasis>
73 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
74 <emphasis role="comment">ALTERNATIVE&#32;A&#32;-&#32;MIT&#32;License</emphasis>
75 <emphasis role="comment">Copyright&#32;(c)&#32;2020&#32;Micha&#32;Mettke</emphasis>
76 <emphasis role="comment">Permission&#32;is&#32;hereby&#32;granted,&#32;free&#32;of&#32;charge,&#32;to&#32;any&#32;person&#32;obtaining&#32;a&#32;copy&#32;of</emphasis>
77 <emphasis role="comment">this&#32;software&#32;and&#32;associated&#32;documentation&#32;files&#32;(the&#32;&quot;Software&quot;),&#32;to&#32;deal&#32;in</emphasis>
78 <emphasis role="comment">the&#32;Software&#32;without&#32;restriction,&#32;including&#32;without&#32;limitation&#32;the&#32;rights&#32;to</emphasis>
79 <emphasis role="comment">use,&#32;copy,&#32;modify,&#32;merge,&#32;publish,&#32;distribute,&#32;sublicense,&#32;and/or&#32;sell&#32;copies</emphasis>
80 <emphasis role="comment">of&#32;the&#32;Software,&#32;and&#32;to&#32;permit&#32;persons&#32;to&#32;whom&#32;the&#32;Software&#32;is&#32;furnished&#32;to&#32;do</emphasis>
81 <emphasis role="comment">so,&#32;subject&#32;to&#32;the&#32;following&#32;conditions:</emphasis>
82 <emphasis role="comment">The&#32;above&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;shall&#32;be&#32;included&#32;in&#32;all</emphasis>
83 <emphasis role="comment">copies&#32;or&#32;substantial&#32;portions&#32;of&#32;the&#32;Software.</emphasis>
84 <emphasis role="comment">THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
85 <emphasis role="comment">IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
86 <emphasis role="comment">FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
87 <emphasis role="comment">AUTHORS&#32;OR&#32;COPYRIGHT&#32;HOLDERS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER</emphasis>
88 <emphasis role="comment">LIABILITY,&#32;WHETHER&#32;IN&#32;AN&#32;ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,</emphasis>
89 <emphasis role="comment">OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION&#32;WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN&#32;THE</emphasis>
90 <emphasis role="comment">SOFTWARE.</emphasis>
91 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
92 <emphasis role="comment">ALTERNATIVE&#32;B&#32;-&#32;Public&#32;Domain&#32;(www.unlicense.org)</emphasis>
93 <emphasis role="comment">This&#32;is&#32;free&#32;and&#32;unencumbered&#32;software&#32;released&#32;into&#32;the&#32;public&#32;domain.</emphasis>
94 <emphasis role="comment">Anyone&#32;is&#32;free&#32;to&#32;copy,&#32;modify,&#32;publish,&#32;use,&#32;compile,&#32;sell,&#32;or&#32;distribute&#32;this</emphasis>
95 <emphasis role="comment">software,&#32;either&#32;in&#32;source&#32;code&#32;form&#32;or&#32;as&#32;a&#32;compiled&#32;binary,&#32;for&#32;any&#32;purpose,</emphasis>
96 <emphasis role="comment">commercial&#32;or&#32;non-commercial,&#32;and&#32;by&#32;any&#32;means.</emphasis>
97 <emphasis role="comment">In&#32;jurisdictions&#32;that&#32;recognize&#32;copyright&#32;laws,&#32;the&#32;author&#32;or&#32;authors&#32;of&#32;this</emphasis>
98 <emphasis role="comment">software&#32;dedicate&#32;any&#32;and&#32;all&#32;copyright&#32;interest&#32;in&#32;the&#32;software&#32;to&#32;the&#32;public</emphasis>
99 <emphasis role="comment">domain.&#32;We&#32;make&#32;this&#32;dedication&#32;for&#32;the&#32;benefit&#32;of&#32;the&#32;public&#32;at&#32;large&#32;and&#32;to</emphasis>
100 <emphasis role="comment">the&#32;detriment&#32;of&#32;our&#32;heirs&#32;and&#32;successors.&#32;We&#32;intend&#32;this&#32;dedication&#32;to&#32;be&#32;an</emphasis>
101 <emphasis role="comment">overt&#32;act&#32;of&#32;relinquishment&#32;in&#32;perpetuity&#32;of&#32;all&#32;present&#32;and&#32;future&#32;rights&#32;to</emphasis>
102 <emphasis role="comment">this&#32;software&#32;under&#32;copyright&#32;law.</emphasis>
103 <emphasis role="comment">THE&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;&quot;AS&#32;IS&quot;,&#32;WITHOUT&#32;WARRANTY&#32;OF&#32;ANY&#32;KIND,&#32;EXPRESS&#32;OR</emphasis>
104 <emphasis role="comment">IMPLIED,&#32;INCLUDING&#32;BUT&#32;NOT&#32;LIMITED&#32;TO&#32;THE&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY,</emphasis>
105 <emphasis role="comment">FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE&#32;AND&#32;NONINFRINGEMENT.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE</emphasis>
106 <emphasis role="comment">AUTHORS&#32;BE&#32;LIABLE&#32;FOR&#32;ANY&#32;CLAIM,&#32;DAMAGES&#32;OR&#32;OTHER&#32;LIABILITY,&#32;WHETHER&#32;IN&#32;AN</emphasis>
107 <emphasis role="comment">ACTION&#32;OF&#32;CONTRACT,&#32;TORT&#32;OR&#32;OTHERWISE,&#32;ARISING&#32;FROM,&#32;OUT&#32;OF&#32;OR&#32;IN&#32;CONNECTION</emphasis>
108 <emphasis role="comment">WITH&#32;THE&#32;SOFTWARE&#32;OR&#32;THE&#32;USE&#32;OR&#32;OTHER&#32;DEALINGS&#32;IN&#32;THE&#32;SOFTWARE.</emphasis>
109 <emphasis role="comment">------------------------------------------------------------------------------</emphasis>
110 <emphasis role="comment">```</emphasis>
111 <emphasis role="comment">*/</emphasis>
112 <emphasis role="preprocessor">#ifndef&#32;SINFL_H_INCLUDED</emphasis>
113 <emphasis role="preprocessor">#define&#32;SINFL_H_INCLUDED</emphasis>
114 
115 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
116 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{
117 <emphasis role="preprocessor">#endif</emphasis>
118 
119 <emphasis role="preprocessor">#define&#32;SINFL_PRE_TBL_SIZE&#32;128</emphasis>
120 <emphasis role="preprocessor">#define&#32;SINFL_LIT_TBL_SIZE&#32;1334</emphasis>
121 <emphasis role="preprocessor">#define&#32;SINFL_OFF_TBL_SIZE&#32;402</emphasis>
122 
123 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsinfl">sinfl</link>&#32;{
124 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_structsinfl_1a4304c31c635b905a1d5959f3418a6287">bitptr</link>;
125 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_structsinfl_1a8784cf95f4ee06bb753bd8d53bf1a073">bitbuf</link>;
126 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_structsinfl_1a88b2e26a14aef4dea22a6d823081cd02">bitcnt</link>;
127 
128 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structsinfl_1a23a239450a883f50b6f2c08b8a391ae8">lits</link>[<link linkend="_lib_2external_2sinfl_8h_1ae2bed988aacd4dbda3b57e75dd30fe64">SINFL_LIT_TBL_SIZE</link>];
129 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_structsinfl_1aacdebf641471815a88cb8dd5cd807b77">dsts</link>[<link linkend="_lib_2external_2sinfl_8h_1ab4484de385828b17ad64f415fc3111f8">SINFL_OFF_TBL_SIZE</link>];
130 };
131 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2sinfl_8h_1a72e6c7d594057426c6d9f0a1a985d0a5">sinflate</link>(<emphasis role="keywordtype">void</emphasis>&#32;*out,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
132 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2external_2sinfl_8h_1a6e052211411aa0a148daf2343aeb1cb9">zsinflate</link>(<emphasis role="keywordtype">void</emphasis>&#32;*out,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
133 
134 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
135 }
136 <emphasis role="preprocessor">#endif</emphasis>
137 
138 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;SINFL_H_INCLUDED&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
139 
140 <emphasis role="preprocessor">#ifdef&#32;SINFL_IMPLEMENTATION</emphasis>
141 
142 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>&#32;<emphasis role="comment">/*&#32;memcpy,&#32;memset&#32;*/</emphasis>
143 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>&#32;<emphasis role="comment">/*&#32;assert&#32;*/</emphasis>
144 
145 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)&#32;||&#32;defined(__clang__)</emphasis>
146 <emphasis role="preprocessor">#define&#32;sinfl_likely(x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_expect((x),1)</emphasis>
147 <emphasis role="preprocessor">#define&#32;sinfl_unlikely(x)&#32;&#32;&#32;&#32;&#32;__builtin_expect((x),0)</emphasis>
148 <emphasis role="preprocessor">#else</emphasis>
149 <emphasis role="preprocessor">#define&#32;sinfl_likely(x)&#32;&#32;&#32;&#32;&#32;&#32;&#32;(x)</emphasis>
150 <emphasis role="preprocessor">#define&#32;sinfl_unlikely(x)&#32;&#32;&#32;&#32;&#32;(x)</emphasis>
151 <emphasis role="preprocessor">#endif</emphasis>
152 
153 <emphasis role="preprocessor">#ifndef&#32;SINFL_NO_SIMD</emphasis>
154 <emphasis role="preprocessor">#if&#32;__x86_64__&#32;||&#32;defined(_WIN32)&#32;||&#32;defined(_WIN64)</emphasis>
155 <emphasis role="preprocessor">&#32;&#32;#include&#32;&lt;emmintrin.h&gt;</emphasis>
156 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16&#32;__m128i</emphasis>
157 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16_ld(p)&#32;_mm_loadu_si128((const&#32;__m128i&#32;*)(void*)(p))</emphasis>
158 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16_str(d,v)&#32;&#32;_mm_storeu_si128((__m128i*)(void*)(d),&#32;v)</emphasis>
159 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16_char(c)&#32;_mm_set1_epi8(c)</emphasis>
160 <emphasis role="preprocessor">#elif&#32;defined(__arm__)&#32;||&#32;defined(__aarch64__)</emphasis>
161 <emphasis role="preprocessor">&#32;&#32;#include&#32;&lt;arm_neon.h&gt;</emphasis>
162 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16&#32;uint8x16_t</emphasis>
163 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16_ld(p)&#32;vld1q_u8((const&#32;unsigned&#32;char*)(p))</emphasis>
164 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16_str(d,v)&#32;vst1q_u8((unsigned&#32;char*)(d),&#32;v)</emphasis>
165 <emphasis role="preprocessor">&#32;&#32;#define&#32;sinfl_char16_char(c)&#32;vdupq_n_u8(c)</emphasis>
166 <emphasis role="preprocessor">#else</emphasis>
167 <emphasis role="preprocessor">&#32;&#32;#define&#32;SINFL_NO_SIMD</emphasis>
168 <emphasis role="preprocessor">#endif</emphasis>
169 <emphasis role="preprocessor">#endif</emphasis>
170 
171 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
172 sinfl_bsr(<emphasis role="keywordtype">unsigned</emphasis>&#32;n)&#32;{
173 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER</emphasis>
174 &#32;&#32;_BitScanReverse(&amp;n,&#32;n);
175 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
176 <emphasis role="preprocessor">#elif&#32;defined(__GNUC__)&#32;||&#32;defined(__clang__)</emphasis>
177 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;31&#32;-&#32;__builtin_clz(n);
178 <emphasis role="preprocessor">#endif</emphasis>
179 }
180 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
181 sinfl_read64(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*p)&#32;{
182 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;n;
183 &#32;&#32;memcpy(&amp;n,&#32;p,&#32;8);
184 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
185 }
186 <emphasis role="preprocessor">#ifndef&#32;SINFL_NO_SIMD</emphasis>
187 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
188 sinfl_write128(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;sinfl_char16&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>)&#32;{
189 &#32;&#32;sinfl_char16_str(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>);
190 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;+&#32;8;
191 }
192 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
193 sinfl_copy128(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;{
194 &#32;&#32;sinfl_char16&#32;n&#32;=&#32;sinfl_char16_ld(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>);
195 &#32;&#32;sinfl_char16_str(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;n);
196 &#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;+=&#32;16,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;+=&#32;16;
197 }
198 <emphasis role="preprocessor">#else</emphasis>
199 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*
200 sinfl_write64(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>)&#32;{
201 &#32;&#32;memcpy(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>,&#32;8);
202 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;+&#32;8;
203 }
204 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
205 sinfl_copy64(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;**<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>)&#32;{
206 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;n;
207 &#32;&#32;memcpy(&amp;n,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>,&#32;8);
208 &#32;&#32;memcpy(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;n,&#32;8);
209 &#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;+=&#32;8,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;+=&#32;8;
210 }
211 <emphasis role="preprocessor">#endif</emphasis>
212 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
213 sinfl_refill(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsinfl">sinfl</link>&#32;*s)&#32;{
214 &#32;&#32;s-&gt;<link linkend="_structsinfl_1a8784cf95f4ee06bb753bd8d53bf1a073">bitbuf</link>&#32;|=&#32;sinfl_read64(s-&gt;<link linkend="_structsinfl_1a4304c31c635b905a1d5959f3418a6287">bitptr</link>)&#32;&lt;&lt;&#32;s-&gt;<link linkend="_structsinfl_1a88b2e26a14aef4dea22a6d823081cd02">bitcnt</link>;
215 &#32;&#32;s-&gt;<link linkend="_structsinfl_1a4304c31c635b905a1d5959f3418a6287">bitptr</link>&#32;+=&#32;(63&#32;-&#32;s-&gt;<link linkend="_structsinfl_1a88b2e26a14aef4dea22a6d823081cd02">bitcnt</link>)&#32;&gt;&gt;&#32;3;
216 &#32;&#32;s-&gt;<link linkend="_structsinfl_1a88b2e26a14aef4dea22a6d823081cd02">bitcnt</link>&#32;|=&#32;56;&#32;<emphasis role="comment">/*&#32;bitcount&#32;is&#32;in&#32;range&#32;[56,63]&#32;*/</emphasis>
217 }
218 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
219 sinfl_peek(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsinfl">sinfl</link>&#32;*s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt)&#32;{
220 &#32;&#32;assert(cnt&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;cnt&#32;&lt;=&#32;56);
221 &#32;&#32;assert(cnt&#32;&lt;=&#32;s-&gt;bitcnt);
222 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s-&gt;<link linkend="_structsinfl_1a8784cf95f4ee06bb753bd8d53bf1a073">bitbuf</link>&#32;&amp;&#32;((1ull&#32;&lt;&lt;&#32;cnt)&#32;-&#32;1);
223 }
224 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
225 sinfl_consume(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsinfl">sinfl</link>&#32;*s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt)&#32;{
226 &#32;&#32;assert(cnt&#32;&lt;=&#32;s-&gt;bitcnt);
227 &#32;&#32;s-&gt;<link linkend="_structsinfl_1a8784cf95f4ee06bb753bd8d53bf1a073">bitbuf</link>&#32;&gt;&gt;=&#32;cnt;
228 &#32;&#32;s-&gt;<link linkend="_structsinfl_1a88b2e26a14aef4dea22a6d823081cd02">bitcnt</link>&#32;-=&#32;cnt;
229 }
230 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
231 sinfl__get(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsinfl">sinfl</link>&#32;*s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt)&#32;{
232 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>&#32;=&#32;sinfl_peek(s,&#32;cnt);
233 &#32;&#32;sinfl_consume(s,&#32;cnt);
234 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a1dbb21208b9047cc8031ca9c840d3c2f">res</link>;
235 }
236 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
237 sinfl_get(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsinfl">sinfl</link>&#32;*s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt)&#32;{
238 &#32;&#32;sinfl_refill(s);
239 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sinfl__get(s,&#32;cnt);
240 }
241 <emphasis role="keyword">struct&#32;</emphasis>sinfl_gen&#32;{
242 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
243 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt;
244 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group__gtx__raw__data_1ga5617a479d471021b5c773c5e969ba46d">word</link>;
245 &#32;&#32;<emphasis role="keywordtype">short</emphasis>*&#32;sorted;
246 };
247 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
248 sinfl_build_tbl(<emphasis role="keyword">struct</emphasis>&#32;sinfl_gen&#32;*gen,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*tbl,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tbl_bits,
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*cnt)&#32;{
250 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tbl_end&#32;=&#32;0;
251 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!(gen-&gt;cnt&#32;=&#32;cnt[gen-&gt;len]))&#32;{
252 &#32;&#32;&#32;&#32;++gen-&gt;len;
253 &#32;&#32;}
254 &#32;&#32;tbl_end&#32;=&#32;1&#32;&lt;&lt;&#32;gen-&gt;len;
255 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(gen-&gt;len&#32;&lt;=&#32;tbl_bits)&#32;{
256 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{<emphasis role="keywordtype">unsigned</emphasis>&#32;bit&#32;=&#32;0;
257 &#32;&#32;&#32;&#32;&#32;&#32;tbl[gen-&gt;word]&#32;=&#32;(*gen-&gt;sorted++&#32;&lt;&lt;&#32;16)&#32;|&#32;gen-&gt;len;
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(gen-&gt;word&#32;==&#32;tbl_end&#32;-&#32;1)&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;gen-&gt;len&#32;&lt;&#32;tbl_bits;&#32;gen-&gt;len++)&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;tbl[tbl_end],&#32;tbl,&#32;(<emphasis role="keywordtype">size_t</emphasis>)tbl_end&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(tbl[0]));
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl_end&#32;&lt;&lt;=&#32;1;
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
264 &#32;&#32;&#32;&#32;&#32;&#32;}
265 &#32;&#32;&#32;&#32;&#32;&#32;bit&#32;=&#32;1&#32;&lt;&lt;&#32;sinfl_bsr((<emphasis role="keywordtype">unsigned</emphasis>)(gen-&gt;word&#32;^&#32;(tbl_end&#32;-&#32;1)));
266 &#32;&#32;&#32;&#32;&#32;&#32;gen-&gt;word&#32;&amp;=&#32;bit&#32;-&#32;1;
267 &#32;&#32;&#32;&#32;&#32;&#32;gen-&gt;word&#32;|=&#32;bit;
268 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(--gen-&gt;cnt);
269 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(++gen-&gt;len&#32;&lt;=&#32;tbl_bits)&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(&amp;tbl[tbl_end],&#32;tbl,&#32;(<emphasis role="keywordtype">size_t</emphasis>)tbl_end&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(tbl[0]));
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tbl_end&#32;&lt;&lt;=&#32;1;
273 &#32;&#32;&#32;&#32;&#32;&#32;}
274 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!(gen-&gt;cnt&#32;=&#32;cnt[gen-&gt;len]));
275 &#32;&#32;}
276 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
277 }
278 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
279 sinfl_build_subtbl(<emphasis role="keyword">struct</emphasis>&#32;sinfl_gen&#32;*gen,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*tbl,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tbl_bits,
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*cnt)&#32;{
281 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sub_bits&#32;=&#32;0;
282 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sub_start&#32;=&#32;0;
283 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sub_prefix&#32;=&#32;-1;
284 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tbl_end&#32;=&#32;1&#32;&lt;&lt;&#32;tbl_bits;
285 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(1)&#32;{
286 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_namespacefind_l_s_b_1a9f3e2ce1c42e4e79e3976f44c44b77f9">entry</link>;
287 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bit,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af167f0227db62527e3f6b3685385aa8e">stride</link>,&#32;i;
288 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;start&#32;new&#32;subtable&#32;*/</emphasis>
289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((gen-&gt;word&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;tbl_bits)-1))&#32;!=&#32;sub_prefix)&#32;{
290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;used&#32;=&#32;0;
291 &#32;&#32;&#32;&#32;&#32;&#32;sub_prefix&#32;=&#32;gen-&gt;word&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;tbl_bits)-1);
292 &#32;&#32;&#32;&#32;&#32;&#32;sub_start&#32;=&#32;tbl_end;
293 &#32;&#32;&#32;&#32;&#32;&#32;sub_bits&#32;=&#32;gen-&gt;len&#32;-&#32;tbl_bits;
294 &#32;&#32;&#32;&#32;&#32;&#32;used&#32;=&#32;gen-&gt;cnt;
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(used&#32;&lt;&#32;(1&#32;&lt;&lt;&#32;sub_bits))&#32;{
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sub_bits++;
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;used&#32;=&#32;(used&#32;&lt;&lt;&#32;1)&#32;+&#32;cnt[tbl_bits&#32;+&#32;sub_bits];
298 &#32;&#32;&#32;&#32;&#32;&#32;}
299 &#32;&#32;&#32;&#32;&#32;&#32;tbl_end&#32;=&#32;sub_start&#32;+&#32;(1&#32;&lt;&lt;&#32;sub_bits);
300 &#32;&#32;&#32;&#32;&#32;&#32;tbl[sub_prefix]&#32;=&#32;(sub_start&#32;&lt;&lt;&#32;16)&#32;|&#32;0x10&#32;|&#32;(sub_bits&#32;&amp;&#32;0xf);
301 &#32;&#32;&#32;&#32;}
302 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;fill&#32;subtable&#32;*/</emphasis>
303 &#32;&#32;&#32;&#32;<link linkend="_namespacefind_l_s_b_1a9f3e2ce1c42e4e79e3976f44c44b77f9">entry</link>&#32;=&#32;(*gen-&gt;sorted&#32;&lt;&lt;&#32;16)&#32;|&#32;((gen-&gt;len&#32;-&#32;tbl_bits)&#32;&amp;&#32;0xf);
304 &#32;&#32;&#32;&#32;gen-&gt;sorted++;
305 &#32;&#32;&#32;&#32;i&#32;=&#32;sub_start&#32;+&#32;(gen-&gt;word&#32;&gt;&gt;&#32;tbl_bits);
306 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af167f0227db62527e3f6b3685385aa8e">stride</link>&#32;=&#32;1&#32;&lt;&lt;&#32;(gen-&gt;len&#32;-&#32;tbl_bits);
307 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;{
308 &#32;&#32;&#32;&#32;&#32;&#32;tbl[i]&#32;=&#32;<link linkend="_namespacefind_l_s_b_1a9f3e2ce1c42e4e79e3976f44c44b77f9">entry</link>;
309 &#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1af167f0227db62527e3f6b3685385aa8e">stride</link>;
310 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;tbl_end);
311 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(gen-&gt;word&#32;==&#32;(1&#32;&lt;&lt;&#32;gen-&gt;len)-1)&#32;{
312 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
313 &#32;&#32;&#32;&#32;}
314 &#32;&#32;&#32;&#32;bit&#32;=&#32;1&#32;&lt;&lt;&#32;sinfl_bsr(gen-&gt;word&#32;^&#32;((1&#32;&lt;&lt;&#32;gen-&gt;len)&#32;-&#32;1));
315 &#32;&#32;&#32;&#32;gen-&gt;word&#32;&amp;=&#32;bit&#32;-&#32;1;
316 &#32;&#32;&#32;&#32;gen-&gt;word&#32;|=&#32;bit;
317 &#32;&#32;&#32;&#32;gen-&gt;cnt--;
318 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!gen-&gt;cnt)&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;gen-&gt;cnt&#32;=&#32;cnt[++gen-&gt;len];
320 &#32;&#32;&#32;&#32;}
321 &#32;&#32;}
322 }
323 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
324 sinfl_build(<emphasis role="keywordtype">unsigned</emphasis>&#32;*tbl,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*lens,&#32;<emphasis role="keywordtype">int</emphasis>&#32;tbl_bits,&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxlen,
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;symcnt)&#32;{
326 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i,&#32;used&#32;=&#32;0;
327 &#32;&#32;<emphasis role="keywordtype">short</emphasis>&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>[288];
328 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt[16]&#32;=&#32;{0},&#32;off[16]=&#32;{0};
329 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>sinfl_gen&#32;gen&#32;=&#32;{0};
330 &#32;&#32;gen.sorted&#32;=&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">sort</link>;
331 &#32;&#32;gen.len&#32;=&#32;1;
332 
333 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;symcnt;&#32;++i)
334 &#32;&#32;&#32;&#32;cnt[lens[i]]++;
335 &#32;&#32;off[1]&#32;=&#32;cnt[0];
336 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;1;&#32;i&#32;&lt;&#32;maxlen;&#32;++i)&#32;{
337 &#32;&#32;&#32;&#32;off[i&#32;+&#32;1]&#32;=&#32;off[i]&#32;+&#32;cnt[i];
338 &#32;&#32;&#32;&#32;used&#32;=&#32;(used&#32;&lt;&lt;&#32;1)&#32;+&#32;cnt[i];
339 &#32;&#32;}
340 &#32;&#32;used&#32;=&#32;(used&#32;&lt;&lt;&#32;1)&#32;+&#32;cnt[i];
341 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;symcnt;&#32;++i)
342 &#32;&#32;&#32;&#32;gen.sorted[off[lens[i]]++]&#32;=&#32;(<emphasis role="keywordtype">short</emphasis>)i;
343 &#32;&#32;gen.sorted&#32;+=&#32;off[0];
344 
345 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(used&#32;&lt;&#32;(1&#32;&lt;&lt;&#32;maxlen)){
346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i&#32;=&#32;0;&#32;i&#32;&lt;&#32;1&#32;&lt;&lt;&#32;tbl_bits;&#32;++i)
347 &#32;&#32;&#32;&#32;&#32;&#32;tbl[i]&#32;=&#32;(0&#32;&lt;&lt;&#32;16u)&#32;|&#32;1;
348 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
349 &#32;&#32;}
350 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!sinfl_build_tbl(&amp;gen,&#32;tbl,&#32;tbl_bits,&#32;cnt)){
351 &#32;&#32;&#32;&#32;sinfl_build_subtbl(&amp;gen,&#32;tbl,&#32;tbl_bits,&#32;cnt);
352 &#32;&#32;}
353 }
354 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
355 sinfl_decode(<emphasis role="keyword">struct</emphasis>&#32;<link linkend="_structsinfl">sinfl</link>&#32;*s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;*tbl,&#32;<emphasis role="keywordtype">int</emphasis>&#32;bit_len)&#32;{
356 &#32;&#32;sinfl_refill(s);
357 &#32;&#32;{<emphasis role="keywordtype">int</emphasis>&#32;idx&#32;=&#32;sinfl_peek(s,&#32;bit_len);
358 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;key&#32;=&#32;tbl[idx];
359 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(key&#32;&amp;&#32;0x10)&#32;{
360 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;sub-table&#32;lookup&#32;*/</emphasis>
361 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;key&#32;&amp;&#32;0x0f;
362 &#32;&#32;&#32;&#32;sinfl_consume(s,&#32;bit_len);
363 &#32;&#32;&#32;&#32;idx&#32;=&#32;sinfl_peek(s,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
364 &#32;&#32;&#32;&#32;key&#32;=&#32;tbl[((key&#32;&gt;&gt;&#32;16)&#32;&amp;&#32;0xffff)&#32;+&#32;(unsigned)idx];
365 &#32;&#32;}
366 &#32;&#32;sinfl_consume(s,&#32;key&#32;&amp;&#32;0x0f);
367 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(key&#32;&gt;&gt;&#32;16)&#32;&amp;&#32;0x0fff;}
368 }
369 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
370 sinfl_decompress(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*out,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)&#32;{
371 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;order[]&#32;=&#32;{16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15};
372 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;dbase[30+2]&#32;=&#32;{1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,
373 &#32;&#32;&#32;&#32;&#32;&#32;257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577};
374 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;dbits[30+2]&#32;=&#32;{0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,
375 &#32;&#32;&#32;&#32;&#32;&#32;10,10,11,11,12,12,13,13,0,0};
376 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;lbase[29+2]&#32;=&#32;{3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,
377 &#32;&#32;&#32;&#32;&#32;&#32;43,51,59,67,83,99,115,131,163,195,227,258,0,0};
378 &#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;lbits[29+2]&#32;=&#32;{0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,
379 &#32;&#32;&#32;&#32;&#32;&#32;4,4,4,5,5,5,5,0,0,0};
380 
381 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*oe&#32;=&#32;out&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>;
382 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139">e</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>,&#32;*o&#32;=&#32;out;
383 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;sinfl_states&#32;{hdr,stored,fixed,dyn,blk};
384 &#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;sinfl_states&#32;state&#32;=&#32;hdr;
385 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structsinfl">sinfl</link>&#32;s&#32;=&#32;{0};
386 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;last&#32;=&#32;0;
387 
388 &#32;&#32;s.<link linkend="_structsinfl_1a4304c31c635b905a1d5959f3418a6287">bitptr</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>;
389 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(1)&#32;{
390 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(state)&#32;{
391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;hdr:&#32;{
392 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;block&#32;header&#32;*/</emphasis>
393 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;0;
394 &#32;&#32;&#32;&#32;&#32;&#32;sinfl_refill(&amp;s);
395 &#32;&#32;&#32;&#32;&#32;&#32;last&#32;=&#32;sinfl__get(&amp;s,1);
396 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;sinfl__get(&amp;s,2);
397 
398 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)&#32;{<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)(out-o);
399 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x00:&#32;state&#32;=&#32;stored;&#32;<emphasis role="keywordflow">break</emphasis>;
400 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x01:&#32;state&#32;=&#32;fixed;&#32;<emphasis role="keywordflow">break</emphasis>;
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0x02:&#32;state&#32;=&#32;dyn;&#32;<emphasis role="keywordflow">break</emphasis>;}
402 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;stored:&#32;{
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;uncompressed&#32;block&#32;*/</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
406 &#32;&#32;&#32;&#32;&#32;&#32;sinfl_refill(&amp;s);
407 &#32;&#32;&#32;&#32;&#32;&#32;sinfl__get(&amp;s,s.<link linkend="_structsinfl_1a88b2e26a14aef4dea22a6d823081cd02">bitcnt</link>&#32;&amp;&#32;7);
408 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;sinfl__get(&amp;s,16);
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//int&#32;nlen&#32;=&#32;sinfl__get(&amp;s,16);&#32;&#32;&#32;//&#32;@raysan5:&#32;Unused&#32;variable?</emphasis>
410 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;-=&#32;2;&#32;s.<link linkend="_structsinfl_1a88b2e26a14aef4dea22a6d823081cd02">bitcnt</link>&#32;=&#32;0;
411 
412 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;&gt;&#32;(e-<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>)&#32;||&#32;!<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>)
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)(out-o);
414 &#32;&#32;&#32;&#32;&#32;&#32;memcpy(out,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;(<emphasis role="keywordtype">size_t</emphasis>)<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>);
415 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>,&#32;out&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
416 &#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;hdr;
417 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
418 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fixed:&#32;{
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;fixed&#32;huffman&#32;codes&#32;*/</emphasis>
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;lens[288+32];
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;=&#32;143;&#32;n++)&#32;lens[n]&#32;=&#32;8;
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;144;&#32;n&#32;&lt;=&#32;255;&#32;n++)&#32;lens[n]&#32;=&#32;9;
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;256;&#32;n&#32;&lt;=&#32;279;&#32;n++)&#32;lens[n]&#32;=&#32;7;
424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;280;&#32;n&#32;&lt;=&#32;287;&#32;n++)&#32;lens[n]&#32;=&#32;8;
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;32;&#32;n++)&#32;lens[288+n]&#32;=&#32;5;
426 
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;build&#32;lit/dist&#32;tables&#32;*/</emphasis>
428 &#32;&#32;&#32;&#32;&#32;&#32;sinfl_build(s.<link linkend="_structsinfl_1a23a239450a883f50b6f2c08b8a391ae8">lits</link>,&#32;lens,&#32;10,&#32;15,&#32;288);
429 &#32;&#32;&#32;&#32;&#32;&#32;sinfl_build(s.<link linkend="_structsinfl_1aacdebf641471815a88cb8dd5cd807b77">dsts</link>,&#32;lens&#32;+&#32;288,&#32;8,&#32;15,&#32;32);
430 &#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;blk;
431 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
432 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;dyn:&#32;{
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;dynamic&#32;huffman&#32;codes&#32;*/</emphasis>
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n,&#32;i;
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;hlens[<link linkend="__classes_2lib_2external_2sinfl_8h_1ae41be08bdab0b9909c8401279545ca69">SINFL_PRE_TBL_SIZE</link>];
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;nlens[19]&#32;=&#32;{0},&#32;lens[288+32];
437 
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_refill(&amp;s);
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordtype">int</emphasis>&#32;nlit&#32;=&#32;257&#32;+&#32;sinfl__get(&amp;s,5);
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ndist&#32;=&#32;1&#32;+&#32;sinfl__get(&amp;s,5);
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nlen&#32;=&#32;4&#32;+&#32;sinfl__get(&amp;s,4);
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;nlen;&#32;n++)
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nlens[order[n]]&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>)sinfl_get(&amp;s,3);
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_build(hlens,&#32;nlens,&#32;7,&#32;7,&#32;19);
445 
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;decode&#32;code&#32;lengths&#32;*/</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(n&#32;=&#32;0;&#32;n&#32;&lt;&#32;nlit&#32;+&#32;ndist;)&#32;{
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sym&#32;=&#32;sinfl_decode(&amp;s,&#32;hlens,&#32;7);
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(sym)&#32;{<emphasis role="keywordflow">default</emphasis>:&#32;lens[n++]&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;char)sym;&#32;<emphasis role="keywordflow">break</emphasis>;
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;16:&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=3+sinfl_get(&amp;s,2);i;i--,n++)&#32;lens[n]=lens[n-1];&#32;<emphasis role="keywordflow">break</emphasis>;
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;17:&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=3+sinfl_get(&amp;s,3);i;i--,n++)&#32;lens[n]=0;&#32;<emphasis role="keywordflow">break</emphasis>;
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;18:&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=11+sinfl_get(&amp;s,7);i;i--,n++)&#32;lens[n]=0;&#32;<emphasis role="keywordflow">break</emphasis>;}
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;build&#32;lit/dist&#32;tables&#32;*/</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_build(s.<link linkend="_structsinfl_1a23a239450a883f50b6f2c08b8a391ae8">lits</link>,&#32;lens,&#32;10,&#32;15,&#32;nlit);
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_build(s.<link linkend="_structsinfl_1aacdebf641471815a88cb8dd5cd807b77">dsts</link>,&#32;lens&#32;+&#32;nlit,&#32;8,&#32;15,&#32;ndist);
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;blk;}
458 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;
459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;blk:&#32;{
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;decompress&#32;block&#32;*/</emphasis>
461 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sym&#32;=&#32;sinfl_decode(&amp;s,&#32;s.<link linkend="_structsinfl_1a23a239450a883f50b6f2c08b8a391ae8">lits</link>,&#32;10);
462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sym&#32;&lt;&#32;256)&#32;{
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;literal&#32;*/</emphasis>
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*out++&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;char)sym;
465 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sym&#32;&gt;&#32;256)&#32;{sym&#32;-=&#32;257;&#32;<emphasis role="comment">/*&#32;match&#32;symbol&#32;*/</emphasis>
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_refill(&amp;s);
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>&#32;=&#32;sinfl__get(&amp;s,&#32;lbits[sym])&#32;+&#32;lbase[sym];
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;dsym&#32;=&#32;sinfl_decode(&amp;s,&#32;s.<link linkend="_structsinfl_1aacdebf641471815a88cb8dd5cd807b77">dsts</link>,&#32;8);
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;offs&#32;=&#32;sinfl__get(&amp;s,&#32;dbits[dsym])&#32;+&#32;dbase[dsym];
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;=&#32;out,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>&#32;=&#32;out&#32;-&#32;offs;
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sinfl_unlikely(offs&#32;&gt;&#32;(<emphasis role="keywordtype">int</emphasis>)(out-o)))&#32;{
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)(out-o);
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;out&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a30ee67aa502329a88f4a203775adfa1a">len</link>;
475 
476 <emphasis role="preprocessor">#ifndef&#32;SINFL_NO_SIMD</emphasis>
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sinfl_likely(oe&#32;-&#32;out&#32;&gt;=&#32;16&#32;*&#32;3))&#32;{
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offs&#32;&gt;=&#32;16)&#32;{
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;copy&#32;match&#32;*/</emphasis>
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_copy128(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>);
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_copy128(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>);
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;sinfl_copy128(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>);
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;&lt;&#32;out);
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offs&#32;==&#32;1)&#32;{
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;rle&#32;match&#32;copying&#32;*/</emphasis>
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_char16&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;sinfl_char16_char(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>[0]);
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;=&#32;sinfl_write128(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>);
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;=&#32;sinfl_write128(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>);
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;=&#32;sinfl_write128(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>);
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;&lt;&#32;out);
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;&lt;&#32;out);
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
498 <emphasis role="preprocessor">#else</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sinfl_likely(oe&#32;-&#32;out&#32;&gt;=&#32;3&#32;*&#32;8&#32;-&#32;3))&#32;{
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offs&#32;&gt;=&#32;8)&#32;{
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;copy&#32;match&#32;*/</emphasis>
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_copy64(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>);
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sinfl_copy64(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>);
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;sinfl_copy64(&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>);
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;&lt;&#32;out);
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(offs&#32;==&#32;1)&#32;{
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;rle&#32;match&#32;copying&#32;*/</emphasis>
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;c&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>[0];
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;hw&#32;=&#32;(c&#32;&lt;&lt;&#32;24u)&#32;|&#32;(c&#32;&lt;&lt;&#32;16u)&#32;|&#32;(c&#32;&lt;&lt;&#32;8u)&#32;|&#32;(<emphasis role="keywordtype">unsigned</emphasis>)c;
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;long)hw&#32;&lt;&lt;&#32;32ll<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link>&#32;|&#32;hw;
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;=&#32;sinfl_write64(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>);
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;=&#32;sinfl_write64(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>);
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;=&#32;sinfl_write64(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a1ad83f255afd4038129297b57ef91603">w</link>);
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;&lt;&#32;out);
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;&lt;&#32;out);
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
522 <emphasis role="preprocessor">#endif</emphasis>
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>++&#32;=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a72e0fdf0f845ded60b1fada9e9195cd7">src</link>++;
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a92034251bfd455d524a9b5610cddba00">dst</link>&#32;&lt;&#32;out);}
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
529 &#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;end&#32;of&#32;block&#32;*/</emphasis>
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(last)&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)(out-o);
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;hdr;
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
534 &#32;&#32;&#32;&#32;&#32;&#32;}
535 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">break</emphasis>;}
536 &#32;&#32;}
537 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>)(out-o);
538 }
539 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
540 <link linkend="__classes_2lib_2external_2sinfl_8h_1a72e6c7d594057426c6d9f0a1a985d0a5">sinflate</link>(<emphasis role="keywordtype">void</emphasis>&#32;*out,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)&#32;{
541 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sinfl_decompress((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)out,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
542 }
543 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>
544 sinfl_adler32(<emphasis role="keywordtype">unsigned</emphasis>&#32;adler32,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;in_len)&#32;{
545 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ADLER_MOD&#32;=&#32;65521;
546 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;s1&#32;=&#32;adler32&#32;&amp;&#32;0xffff;
547 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;s2&#32;=&#32;adler32&#32;&gt;&gt;&#32;16;
548 &#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;blk_len,&#32;i;
549 
550 &#32;&#32;blk_len&#32;=&#32;in_len&#32;%&#32;5552;
551 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(in_len)&#32;{
552 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(i=0;&#32;i&#32;+&#32;7&#32;&lt;&#32;blk_len;&#32;i&#32;+=&#32;8)&#32;{
553 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[0];&#32;s2&#32;+=&#32;s1;
554 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[1];&#32;s2&#32;+=&#32;s1;
555 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[2];&#32;s2&#32;+=&#32;s1;
556 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[3];&#32;s2&#32;+=&#32;s1;
557 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[4];&#32;s2&#32;+=&#32;s1;
558 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[5];&#32;s2&#32;+=&#32;s1;
559 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[6];&#32;s2&#32;+=&#32;s1;
560 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>[7];&#32;s2&#32;+=&#32;s1;
561 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;+=&#32;8;
562 &#32;&#32;&#32;&#32;}
563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;i&#32;&lt;&#32;blk_len;&#32;++i)
564 &#32;&#32;&#32;&#32;&#32;&#32;s1&#32;+=&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>++,&#32;s2&#32;+=&#32;s1;
565 &#32;&#32;&#32;&#32;s1&#32;%=&#32;ADLER_MOD;&#32;s2&#32;%=&#32;ADLER_MOD;
566 &#32;&#32;&#32;&#32;in_len&#32;-=&#32;blk_len;
567 &#32;&#32;&#32;&#32;blk_len&#32;=&#32;5552;
568 &#32;&#32;}&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>)(s2&#32;&lt;&lt;&#32;16)&#32;+&#32;(<emphasis role="keywordtype">unsigned</emphasis>)s1;
569 }
570 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
571 <link linkend="__classes_2lib_2external_2sinfl_8h_1a6e052211411aa0a148daf2343aeb1cb9">zsinflate</link>(<emphasis role="keywordtype">void</emphasis>&#32;*out,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*mem,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)&#32;{
572 &#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;=&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)mem;
573 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;&gt;=&#32;6)&#32;{
574 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*eob&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;+&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>&#32;-&#32;4;
575 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;sinfl_decompress((<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)out,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ae22de5a430ce81d57d8140824a3e10dc">cap</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a83ad0ee7f1e06b59c90271716e689080">in</link>&#32;+&#32;2u,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>);
576 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;=&#32;sinfl_adler32(1u,&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*)out,&#32;n);
577 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;h&#32;=&#32;eob[0]&#32;&lt;&lt;&#32;24&#32;|&#32;eob[1]&#32;&lt;&lt;&#32;16&#32;|&#32;eob[2]&#32;&lt;&lt;&#32;8&#32;|&#32;eob[3]&#32;&lt;&lt;&#32;0;
578 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac8729153468b5dcf13f971b21d84d4e5">a</link>&#32;==&#32;h&#32;?&#32;n&#32;:&#32;-1;
579 &#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
580 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
581 &#32;&#32;}
582 }
583 <emphasis role="preprocessor">#endif</emphasis>
584 
</programlisting></section>
