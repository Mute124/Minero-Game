<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2regex__compiler_8h_source" xml:lang="en-US">
<title>regex_compiler.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/regex_compiler.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;class&#32;template&#32;regex&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2010-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
32 {
33 _GLIBCXX_BEGIN_NAMESPACE_VERSION
34 _GLIBCXX_BEGIN_NAMESPACE_CXX11
35 
36 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
37 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>regex_traits;
38 
39 _GLIBCXX_END_NAMESPACE_CXX11
40 
41 <emphasis role="keyword">namespace&#32;</emphasis>__detail
42 {
48 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
49 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BracketMatcher;
50 
56 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT&gt;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Compiler
58 &#32;&#32;&#32;&#32;{
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::char_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT;
61 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_NFA&lt;_TraitsT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RegexT;
62 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_constants::syntax_option_type&#32;_FlagT;
63 
64 &#32;&#32;&#32;&#32;&#32;&#32;_Compiler(<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__b,&#32;<emphasis role="keyword">const</emphasis>&#32;_CharT*&#32;__e,
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::locale_type&amp;&#32;__traits,&#32;_FlagT&#32;__flags);
66 
67 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;const&#32;_RegexT&gt;
68 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_nfa()&#32;noexcept
69 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(_M_nfa);&#32;}
70 
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
72 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Scanner&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ScannerT;
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::string_type&#32;_StringT;
74 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_ScannerT::_TokenT&#32;&#32;&#32;&#32;_TokenT;
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_StateSeq&lt;_TraitsT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StateSeqT;
76 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::stack&lt;_StateSeqT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StackT;
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ctype&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CtypeT;
78 
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;accepts&#32;a&#32;specific&#32;token&#32;or&#32;returns&#32;false.</emphasis>
80 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;_M_match_token(_TokenT&#32;__token);
82 
83 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;_M_disjunction();
85 
86 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;_M_alternative();
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
90 &#32;&#32;&#32;&#32;&#32;&#32;_M_term();
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
93 &#32;&#32;&#32;&#32;&#32;&#32;_M_assertion();
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
96 &#32;&#32;&#32;&#32;&#32;&#32;_M_quantifier();
97 
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;_M_atom();
100 
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;_M_bracket_expression();
103 
104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
106 &#32;&#32;&#32;&#32;_M_insert_any_matcher_ecma();
107 
108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
110 &#32;&#32;&#32;&#32;_M_insert_any_matcher_posix();
111 
112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
113 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
114 &#32;&#32;&#32;&#32;_M_insert_char_matcher();
115 
116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
117 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
118 &#32;&#32;&#32;&#32;_M_insert_character_class_matcher();
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
122 &#32;&#32;&#32;&#32;_M_insert_bracket_matcher(<emphasis role="keywordtype">bool</emphasis>&#32;__neg);
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cache&#32;of&#32;the&#32;last&#32;atom&#32;seen&#32;in&#32;a&#32;bracketed&#32;range&#32;expression.</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BracketState
126 &#32;&#32;&#32;&#32;&#32;&#32;{
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;_Type&#32;:&#32;<emphasis role="keywordtype">char</emphasis>&#32;{&#32;_None,&#32;_Char,&#32;_Class&#32;}&#32;_M_type&#32;=&#32;_Type::_None;
128 &#32;&#32;&#32;&#32;_CharT&#32;_M_char&#32;=&#32;_CharT();
129 
130 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
131 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1aeff0e04220766bdd67e3a38ffa302e1c">set</link>(_CharT&#32;__c)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;_M_type&#32;=&#32;_Type::_Char;&#32;_M_char&#32;=&#32;__c;&#32;}
132 
133 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;_CharT
134 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_char;&#32;}
135 
136 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
137 &#32;&#32;&#32;&#32;reset(_Type&#32;__t&#32;=&#32;_Type::_None)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;_M_type&#32;=&#32;__t;&#32;}
138 
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
140 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type&#32;!=&#32;_Type::_None;&#32;}
141 
142 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Previous&#32;token&#32;was&#32;a&#32;single&#32;character.</emphasis>
143 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
144 &#32;&#32;&#32;&#32;_M_is_char()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type&#32;==&#32;_Type::_Char;&#32;}
145 
146 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Previous&#32;token&#32;was&#32;a&#32;character&#32;class,&#32;equivalent&#32;class,</emphasis>
147 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;collating&#32;symbol&#32;etc.</emphasis>
148 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
149 &#32;&#32;&#32;&#32;_M_is_class()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_type&#32;==&#32;_Type::_Class;&#32;}
150 &#32;&#32;&#32;&#32;&#32;&#32;};
151 
152 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_BracketMatcher
154 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__detail::_BracketMatcher&lt;_TraitsT,&#32;__icase,&#32;__collate&gt;;
155 
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;true&#32;if&#32;successfully&#32;parsed&#32;one&#32;term&#32;and&#32;should&#32;continue</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compiling&#32;a&#32;bracket&#32;expression.</emphasis>
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;false&#32;if&#32;the&#32;compiler&#32;should&#32;move&#32;on.</emphasis>
159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
160 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
161 &#32;&#32;&#32;&#32;_M_expression_term(_BracketState&amp;&#32;__last_char,
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BracketMatcher&lt;__icase,&#32;__collate&gt;&amp;&#32;__matcher);
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;_M_cur_int_value(<emphasis role="keywordtype">int</emphasis>&#32;__radix);
166 
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;_M_try_char();
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;_StateSeqT
171 &#32;&#32;&#32;&#32;&#32;&#32;_M_pop()
172 &#32;&#32;&#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ret&#32;=&#32;_M_stack.top();
174 &#32;&#32;&#32;&#32;_M_stack.pop();
175 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
176 &#32;&#32;&#32;&#32;&#32;&#32;}
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_FlagT
179 &#32;&#32;&#32;&#32;&#32;&#32;_S_validate(_FlagT&#32;__f)
180 &#32;&#32;&#32;&#32;&#32;&#32;{
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;namespace&#32;</emphasis>regex_constants;
182 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(__f&#32;&amp;&#32;(ECMAScript|basic|extended|awk|grep|egrep))
183 &#32;&#32;&#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;ECMAScript:
185 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;basic:
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;extended:
187 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;awk:
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;grep:
189 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;egrep:
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__f;
191 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;_FlagT(0):
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;__f&#32;|&#32;ECMAScript;
193 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__throw_regex_error(_S_grammar,&#32;<emphasis role="stringliteral">&quot;conflicting&#32;grammar&#32;options&quot;</emphasis>);
195 &#32;&#32;&#32;&#32;&#32;&#32;}
196 &#32;&#32;&#32;&#32;&#32;&#32;}
197 
198 &#32;&#32;&#32;&#32;&#32;&#32;_FlagT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_flags;
199 &#32;&#32;&#32;&#32;&#32;&#32;_ScannerT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_scanner;
200 &#32;&#32;&#32;&#32;&#32;&#32;shared_ptr&lt;_RegexT&gt;&#32;_M_nfa;
201 &#32;&#32;&#32;&#32;&#32;&#32;_StringT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_value;
202 &#32;&#32;&#32;&#32;&#32;&#32;_StackT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_stack;
203 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;&#32;&#32;&#32;&#32;_M_traits;
204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_CtypeT&amp;&#32;&#32;&#32;&#32;&#32;&#32;_M_ctype;
205 &#32;&#32;&#32;&#32;};
206 
207 &#32;&#32;<emphasis role="comment">//&#32;[28.13.14]</emphasis>
208 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_RegexTranslatorBase
210 &#32;&#32;&#32;&#32;{
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::char_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT;
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::string_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StringT;
214 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_StringT&#32;_StrTransT;
215 
216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;_RegexTranslatorBase(<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;__traits)
218 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_traits(__traits)
219 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;_CharT
222 &#32;&#32;&#32;&#32;&#32;&#32;_M_translate(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
223 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
224 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(__icase)
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_traits.translate_nocase(__ch);
226 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(__collate)
227 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_traits.translate(__ch);
228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ch;
230 &#32;&#32;&#32;&#32;&#32;&#32;}
231 
232 &#32;&#32;&#32;&#32;&#32;&#32;_StrTransT
233 &#32;&#32;&#32;&#32;&#32;&#32;_M_transform(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
234 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
235 &#32;&#32;&#32;&#32;_StrTransT&#32;__str(1,&#32;__ch);
236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_traits.transform(__str.begin(),&#32;__str.end());
237 &#32;&#32;&#32;&#32;&#32;&#32;}
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;LWG&#32;523.&#32;It&apos;s&#32;not&#32;efficiently&#32;implementable&#32;when&#32;_TraitsT&#32;is&#32;not</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::regex_traits&lt;&gt;,&#32;and&#32;__collate&#32;is&#32;true.&#32;See&#32;specializations&#32;for</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;implementations&#32;of&#32;other&#32;cases.</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
243 &#32;&#32;&#32;&#32;&#32;&#32;_M_match_range(<emphasis role="keyword">const</emphasis>&#32;_StrTransT&amp;&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_StrTransT&amp;&#32;__last,
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_StrTransT&amp;&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
245 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;&lt;=&#32;__s&#32;&amp;&amp;&#32;__s&#32;&lt;=&#32;__last;&#32;}
246 
247 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
248 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_in_range_icase(_CharT&#32;__first,&#32;_CharT&#32;__last,&#32;_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
249 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
250 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ctype&lt;_CharT&gt;&#32;__ctype_type;
251 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__fctyp&#32;=&#32;use_facet&lt;__ctype_type&gt;(this-&gt;_M_traits.getloc());
252 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__lower&#32;=&#32;__fctyp.tolower(__ch);
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__upper&#32;=&#32;__fctyp.toupper(__ch);
254 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__first&#32;&lt;=&#32;__lower&#32;&amp;&amp;&#32;__lower&#32;&lt;=&#32;__last)
255 &#32;&#32;&#32;&#32;&#32;&#32;||&#32;(__first&#32;&lt;=&#32;__upper&#32;&amp;&amp;&#32;__upper&#32;&lt;=&#32;__last);
256 &#32;&#32;&#32;&#32;&#32;&#32;}
257 
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;_M_traits;
259 &#32;&#32;&#32;&#32;};
260 
261 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
262 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_RegexTranslator
263 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_RegexTranslatorBase&lt;_TraitsT,&#32;__icase,&#32;__collate&gt;
264 &#32;&#32;&#32;&#32;{
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexTranslatorBase&lt;_TraitsT,&#32;__icase,&#32;__collate&gt;&#32;_Base;
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_Base;
268 &#32;&#32;&#32;&#32;};
269 
270 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase&gt;
271 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_RegexTranslator&lt;_TraitsT,&#32;__icase,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
272 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_RegexTranslatorBase&lt;_TraitsT,&#32;__icase,&#32;false&gt;
273 &#32;&#32;&#32;&#32;{
274 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexTranslatorBase&lt;_TraitsT,&#32;__icase,&#32;false&gt;&#32;_Base;
276 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_CharT&#32;_CharT;
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;_StrTransT;
278 
279 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_Base;
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;_StrTransT
282 &#32;&#32;&#32;&#32;&#32;&#32;_M_transform(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
283 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ch;&#32;}
284 
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
286 &#32;&#32;&#32;&#32;&#32;&#32;_M_match_range(_CharT&#32;__first,&#32;_CharT&#32;__last,&#32;_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
287 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(!__icase)
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;&lt;=&#32;__ch&#32;&amp;&amp;&#32;__ch&#32;&lt;=&#32;__last;
290 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
291 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_in_range_icase(__first,&#32;__last,&#32;__ch);
292 &#32;&#32;&#32;&#32;&#32;&#32;}
293 &#32;&#32;&#32;&#32;};
294 
295 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_CharType&gt;
296 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_RegexTranslator&lt;<link linkend="_namespacestd">std</link>::regex_traits&lt;_CharType&gt;,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
297 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_RegexTranslatorBase&lt;std::regex_traits&lt;_CharType&gt;,&#32;true,&#32;true&gt;
298 &#32;&#32;&#32;&#32;{
299 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexTranslatorBase&lt;std::regex_traits&lt;_CharType&gt;,&#32;<emphasis role="keyword">true</emphasis>,&#32;<emphasis role="keyword">true</emphasis>&gt;
301 &#32;&#32;&#32;&#32;_Base;
302 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_CharT&#32;_CharT;
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base::_StrTransT&#32;_StrTransT;
304 
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::_Base;
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;_M_match_range(<emphasis role="keyword">const</emphasis>&#32;_StrTransT&amp;&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_StrTransT&amp;&#32;__last,
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_StrTransT&amp;&#32;__str)<emphasis role="keyword">&#32;const</emphasis>
310 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
311 &#32;&#32;&#32;&#32;__glibcxx_assert(__first.size()&#32;==&#32;1);
312 &#32;&#32;&#32;&#32;__glibcxx_assert(__last.size()&#32;==&#32;1);
313 &#32;&#32;&#32;&#32;__glibcxx_assert(__str.size()&#32;==&#32;1);
314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_in_range_icase(__first[0],&#32;__last[0],&#32;__str[0]);
315 &#32;&#32;&#32;&#32;&#32;&#32;}
316 &#32;&#32;&#32;&#32;};
317 
318 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT&gt;
319 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_RegexTranslator&lt;_TraitsT,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
320 &#32;&#32;&#32;&#32;{
321 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
322 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::char_type&#32;_CharT;
323 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StrTransT;
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;_RegexTranslator(<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;)
327 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
328 
329 &#32;&#32;&#32;&#32;&#32;&#32;_CharT
330 &#32;&#32;&#32;&#32;&#32;&#32;_M_translate(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
331 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ch;&#32;}
332 
333 &#32;&#32;&#32;&#32;&#32;&#32;_StrTransT
334 &#32;&#32;&#32;&#32;&#32;&#32;_M_transform(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
335 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ch;&#32;}
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
338 &#32;&#32;&#32;&#32;&#32;&#32;_M_match_range(_CharT&#32;__first,&#32;_CharT&#32;__last,&#32;_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
339 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first&#32;&lt;=&#32;__ch&#32;&amp;&amp;&#32;__ch&#32;&lt;=&#32;__last;&#32;}
340 &#32;&#32;&#32;&#32;};
341 
342 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__is_ecma,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
343 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_AnyMatcher;
344 
345 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
346 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_AnyMatcher&lt;_TraitsT,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;__icase,&#32;__collate&gt;
347 &#32;&#32;&#32;&#32;{
348 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexTranslator&lt;_TraitsT,&#32;__icase,&#32;__collate&gt;&#32;_TransT;
349 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TransT::_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT;
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;_AnyMatcher(<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;__traits)
353 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_translator(__traits)
354 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
355 
356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
357 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
358 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__nul&#32;=&#32;_M_translator._M_translate(<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
360 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_translator._M_translate(__ch)&#32;!=&#32;__nul;
361 &#32;&#32;&#32;&#32;&#32;&#32;}
362 
363 &#32;&#32;&#32;&#32;&#32;&#32;_TransT&#32;_M_translator;
364 &#32;&#32;&#32;&#32;};
365 
366 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
367 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_AnyMatcher&lt;_TraitsT,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;__icase,&#32;__collate&gt;
368 &#32;&#32;&#32;&#32;{
369 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexTranslator&lt;_TraitsT,&#32;__icase,&#32;__collate&gt;&#32;_TransT;
370 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TransT::_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT;
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
373 &#32;&#32;&#32;&#32;&#32;&#32;_AnyMatcher(<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;__traits)
374 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_translator(__traits)
375 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
376 
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
378 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
379 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_apply(__ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;is_same&lt;_CharT,&#32;char&gt;::type());&#32;}
380 
381 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
382 &#32;&#32;&#32;&#32;&#32;&#32;_M_apply(_CharT&#32;__ch,&#32;true_type)<emphasis role="keyword">&#32;const</emphasis>
383 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
384 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_M_translator._M_translate(__ch);
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;_M_translator._M_translate(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
386 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;_M_translator._M_translate(<emphasis role="charliteral">&apos;\r&apos;</emphasis>);
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c&#32;!=&#32;__n&#32;&amp;&amp;&#32;__c&#32;!=&#32;__r;
388 &#32;&#32;&#32;&#32;&#32;&#32;}
389 
390 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
391 &#32;&#32;&#32;&#32;&#32;&#32;_M_apply(_CharT&#32;__ch,&#32;false_type)<emphasis role="keyword">&#32;const</emphasis>
392 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
393 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__c&#32;=&#32;_M_translator._M_translate(__ch);
394 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__n&#32;=&#32;_M_translator._M_translate(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
395 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;_M_translator._M_translate(<emphasis role="charliteral">&apos;\r&apos;</emphasis>);
396 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__u2028&#32;=&#32;_M_translator._M_translate(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link><emphasis role="stringliteral">&apos;\u2028&apos;</emphasis>);
397 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__u2029&#32;=&#32;_M_translator._M_translate(<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea">u</link><emphasis role="stringliteral">&apos;\u2029&apos;</emphasis>);
398 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c&#32;!=&#32;__n&#32;&amp;&amp;&#32;__c&#32;!=&#32;__r&#32;&amp;&amp;&#32;__c&#32;!=&#32;__u2028&#32;&amp;&amp;&#32;__c&#32;!=&#32;__u2029;
399 &#32;&#32;&#32;&#32;&#32;&#32;}
400 
401 &#32;&#32;&#32;&#32;&#32;&#32;_TransT&#32;_M_translator;
402 &#32;&#32;&#32;&#32;};
403 
404 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
405 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_CharMatcher
406 &#32;&#32;&#32;&#32;{
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexTranslator&lt;_TraitsT,&#32;__icase,&#32;__collate&gt;&#32;_TransT;
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TransT::_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT;
409 
410 &#32;&#32;&#32;&#32;&#32;&#32;_CharMatcher(_CharT&#32;__ch,&#32;<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;__traits)
411 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_translator(__traits),&#32;_M_ch(_M_translator._M_translate(__ch))
412 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
413 
414 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
415 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
416 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ch&#32;==&#32;_M_translator._M_translate(__ch);&#32;}
417 
418 &#32;&#32;&#32;&#32;&#32;&#32;_TransT&#32;_M_translator;
419 &#32;&#32;&#32;&#32;&#32;&#32;_CharT&#32;&#32;_M_ch;
420 &#32;&#32;&#32;&#32;};
421 
423 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__collate&gt;
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_BracketMatcher
425 &#32;&#32;&#32;&#32;{
426 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexTranslator&lt;_TraitsT,&#32;__icase,&#32;__collate&gt;&#32;_TransT;
428 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TransT::_CharT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharT;
429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TransT::_StrTransT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StrTransT;
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::string_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_StringT;
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT::char_class_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_CharClassT;
432 
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
434 &#32;&#32;&#32;&#32;&#32;&#32;_BracketMatcher(<emphasis role="keywordtype">bool</emphasis>&#32;__is_non_matching,
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;__traits)
436 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_class_set(0),&#32;_M_translator(__traits),&#32;_M_traits(__traits),
437 &#32;&#32;&#32;&#32;&#32;&#32;_M_is_non_matching(__is_non_matching)
438 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
439 
440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
441 &#32;&#32;&#32;&#32;&#32;&#32;operator()(_CharT&#32;__ch)<emphasis role="keyword">&#32;const</emphasis>
442 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
443 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(_M_is_ready);
444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_apply(__ch,&#32;_UseCache());
445 &#32;&#32;&#32;&#32;&#32;&#32;}
446 
447 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
448 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_char(_CharT&#32;__c)
449 &#32;&#32;&#32;&#32;&#32;&#32;{
450 &#32;&#32;&#32;&#32;_M_char_set.push_back(_M_translator._M_translate(__c));
451 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(_M_is_ready&#32;=&#32;<emphasis role="keyword">false</emphasis>);
452 &#32;&#32;&#32;&#32;&#32;&#32;}
453 
454 &#32;&#32;&#32;&#32;&#32;&#32;_StringT
455 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_collate_element(<emphasis role="keyword">const</emphasis>&#32;_StringT&amp;&#32;__s)
456 &#32;&#32;&#32;&#32;&#32;&#32;{
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__st&#32;=&#32;_M_traits.lookup_collatename(__s.data(),
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.data()&#32;+&#32;__s.size());
459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__st.empty())
460 &#32;&#32;&#32;&#32;&#32;&#32;__throw_regex_error(regex_constants::error_collate,
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;collate&#32;element.&quot;</emphasis>);
462 &#32;&#32;&#32;&#32;_M_char_set.push_back(_M_translator._M_translate(__st[0]));
463 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(_M_is_ready&#32;=&#32;<emphasis role="keyword">false</emphasis>);
464 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__st;
465 &#32;&#32;&#32;&#32;&#32;&#32;}
466 
467 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
468 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_equivalence_class(<emphasis role="keyword">const</emphasis>&#32;_StringT&amp;&#32;__s)
469 &#32;&#32;&#32;&#32;&#32;&#32;{
470 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__st&#32;=&#32;_M_traits.lookup_collatename(__s.data(),
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.data()&#32;+&#32;__s.size());
472 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__st.empty())
473 &#32;&#32;&#32;&#32;&#32;&#32;__throw_regex_error(regex_constants::error_collate,
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;equivalence&#32;class.&quot;</emphasis>);
475 &#32;&#32;&#32;&#32;__st&#32;=&#32;_M_traits.transform_primary(__st.data(),
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__st.data()&#32;+&#32;__st.size());
477 &#32;&#32;&#32;&#32;_M_equiv_set.push_back(__st);
478 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(_M_is_ready&#32;=&#32;<emphasis role="keyword">false</emphasis>);
479 &#32;&#32;&#32;&#32;&#32;&#32;}
480 
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__neg&#32;should&#32;be&#32;true&#32;for&#32;\D,&#32;\S&#32;and&#32;\W&#32;only.</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_character_class(<emphasis role="keyword">const</emphasis>&#32;_StringT&amp;&#32;__s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__neg)
484 &#32;&#32;&#32;&#32;&#32;&#32;{
485 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__mask&#32;=&#32;_M_traits.lookup_classname(__s.data(),
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.data()&#32;+&#32;__s.size(),
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__icase);
488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__mask&#32;==&#32;0)
489 &#32;&#32;&#32;&#32;&#32;&#32;__throw_regex_error(regex_constants::error_collate,
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;character&#32;class.&quot;</emphasis>);
491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__neg)
492 &#32;&#32;&#32;&#32;&#32;&#32;_M_class_set&#32;|=&#32;__mask;
493 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
494 &#32;&#32;&#32;&#32;&#32;&#32;_M_neg_class_set.push_back(__mask);
495 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(_M_is_ready&#32;=&#32;<emphasis role="keyword">false</emphasis>);
496 &#32;&#32;&#32;&#32;&#32;&#32;}
497 
498 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;_M_make_range(_CharT&#32;__l,&#32;_CharT&#32;__r)
500 &#32;&#32;&#32;&#32;&#32;&#32;{
501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__l&#32;&gt;&#32;__r)
502 &#32;&#32;&#32;&#32;&#32;&#32;__throw_regex_error(regex_constants::error_range,
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;Invalid&#32;range&#32;in&#32;bracket&#32;expression.&quot;</emphasis>);
504 &#32;&#32;&#32;&#32;_M_range_set.push_back(make_pair(_M_translator._M_transform(__l),
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_translator._M_transform(__r)));
506 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(_M_is_ready&#32;=&#32;<emphasis role="keyword">false</emphasis>);
507 &#32;&#32;&#32;&#32;&#32;&#32;}
508 
509 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
510 &#32;&#32;&#32;&#32;&#32;&#32;_M_ready()
511 &#32;&#32;&#32;&#32;&#32;&#32;{
512 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">std::sort</link>(_M_char_set.begin(),&#32;_M_char_set.end());
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__end&#32;=&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">std::unique</link>(_M_char_set.begin(),&#32;_M_char_set.end());
514 &#32;&#32;&#32;&#32;_M_char_set.erase(__end,&#32;_M_char_set.end());
515 &#32;&#32;&#32;&#32;_M_make_cache(_UseCache());
516 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a784d392bfeacfb0e3e6e0d2719489fb6">_GLIBCXX_DEBUG_ONLY</link>(_M_is_ready&#32;=&#32;<emphasis role="keyword">true</emphasis>);
517 &#32;&#32;&#32;&#32;&#32;&#32;}
518 
519 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Currently&#32;we&#32;only&#32;use&#32;the&#32;cache&#32;for&#32;char</emphasis>
521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UseCache&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::is_same&lt;_CharT,&#32;char&gt;::type;
522 
523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
524 &#32;&#32;&#32;&#32;&#32;&#32;_S_cache_size&#32;=
525 &#32;&#32;&#32;&#32;1ul&#32;&lt;&lt;&#32;(<emphasis role="keyword">sizeof</emphasis>(_CharT)&#32;*&#32;__CHAR_BIT__&#32;*&#32;<emphasis role="keywordtype">int</emphasis>(_UseCache::value));
526 
527 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Dummy&#32;{&#32;};
528 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_CacheT&#32;=&#32;std::__conditional_t&lt;_UseCache::value,
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::bitset&lt;_S_cache_size&gt;,
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Dummy&gt;;
531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UnsignedCharT&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;std::make_unsigned&lt;_CharT&gt;::type;
532 
533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
534 &#32;&#32;&#32;&#32;&#32;&#32;_M_apply(_CharT&#32;__ch,&#32;false_type)&#32;<emphasis role="keyword">const</emphasis>;
535 
536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
537 &#32;&#32;&#32;&#32;&#32;&#32;_M_apply(_CharT&#32;__ch,&#32;true_type)<emphasis role="keyword">&#32;const</emphasis>
538 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_cache[<emphasis role="keyword">static_cast&lt;</emphasis>_UnsignedCharT<emphasis role="keyword">&gt;</emphasis>(__ch)];&#32;}
539 
540 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
541 &#32;&#32;&#32;&#32;&#32;&#32;_M_make_cache(true_type)
542 &#32;&#32;&#32;&#32;&#32;&#32;{
543 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;__i&#32;=&#32;0;&#32;__i&#32;&lt;&#32;_M_cache.size();&#32;__i++)
544 &#32;&#32;&#32;&#32;&#32;&#32;_M_cache[__i]&#32;=&#32;_M_apply(<emphasis role="keyword">static_cast&lt;</emphasis>_CharT<emphasis role="keyword">&gt;</emphasis>(__i),&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>());
545 &#32;&#32;&#32;&#32;&#32;&#32;}
546 
547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;_M_make_cache(false_type)
549 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
550 
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
552 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::vector&lt;_CharT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_char_set;
553 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::vector&lt;_StringT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_equiv_set;
554 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::vector&lt;pair&lt;_StrTransT,&#32;_StrTransT&gt;&gt;&#32;_M_range_set;
555 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::vector&lt;_CharClassT&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_neg_class_set;
556 &#32;&#32;&#32;&#32;&#32;&#32;_CharClassT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_class_set;
557 &#32;&#32;&#32;&#32;&#32;&#32;_TransT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_translator;
558 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_TraitsT&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_traits;
559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_is_non_matching;
560 &#32;&#32;&#32;&#32;&#32;&#32;_CacheT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_cache;
561 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_is_ready&#32;=&#32;<emphasis role="keyword">false</emphasis>;
563 <emphasis role="preprocessor">#endif</emphasis>
564 &#32;&#32;&#32;&#32;};
565 
567 }&#32;<emphasis role="comment">//&#32;namespace&#32;__detail</emphasis>
568 _GLIBCXX_END_NAMESPACE_VERSION
569 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
570 
571 <emphasis role="preprocessor">#include&#32;&lt;bits/regex_compiler.tcc&gt;</emphasis>
</programlisting></section>
