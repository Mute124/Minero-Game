<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2allocated__ptr_8h_source" xml:lang="en-US">
<title>allocated_ptr.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/allocated_ptr.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Guarded&#32;Allocation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2014-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_ALLOCATED_PTR_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_ALLOCATED_PTR_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
34 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0xwarning.h&gt;</emphasis>
35 <emphasis role="preprocessor">#else</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;type_traits&gt;</emphasis>
37 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/ptr_traits.h&gt;</emphasis>
38 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/alloc_traits.h&gt;</emphasis>
39 
40 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
41 {
42 _GLIBCXX_BEGIN_NAMESPACE_VERSION
44 
46 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
47 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__allocated_ptr
48 &#32;&#32;&#32;&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::pointer;
50 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::value_type;
51 
53 &#32;&#32;&#32;&#32;&#32;&#32;__allocated_ptr(_Alloc&amp;&#32;__a,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__ptr)&#32;noexcept
54 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_alloc(std::__addressof(__a)),&#32;_M_ptr(__ptr)
55 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
56 
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Req&#32;=&#32;_Require&lt;is_same&lt;_Ptr,&#32;value_type*&gt;&gt;&gt;
60 &#32;&#32;&#32;&#32;&#32;&#32;__allocated_ptr(_Alloc&amp;&#32;__a,&#32;_Ptr&#32;__ptr)
61 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_alloc(<link linkend="_namespacestd">std</link>::__addressof(__a)),
62 &#32;&#32;&#32;&#32;_M_ptr(pointer_traits&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&gt;::pointer_to(*__ptr))
63 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
64 
66 &#32;&#32;&#32;&#32;&#32;&#32;__allocated_ptr(__allocated_ptr&amp;&amp;&#32;__gd)&#32;noexcept
67 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_alloc(__gd._M_alloc),&#32;_M_ptr(__gd._M_ptr)
68 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__gd._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
69 
71 &#32;&#32;&#32;&#32;&#32;&#32;~__allocated_ptr()
72 &#32;&#32;&#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ptr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
74 &#32;&#32;&#32;&#32;&#32;&#32;std::allocator_traits&lt;_Alloc&gt;::deallocate(*_M_alloc,&#32;_M_ptr,&#32;1);
75 &#32;&#32;&#32;&#32;&#32;&#32;}
76 
78 &#32;&#32;&#32;&#32;&#32;&#32;__allocated_ptr&amp;
79 &#32;&#32;&#32;&#32;&#32;&#32;operator=(std::nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
80 &#32;&#32;&#32;&#32;&#32;&#32;{
81 &#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
82 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
83 &#32;&#32;&#32;&#32;&#32;&#32;}
84 
86 &#32;&#32;&#32;&#32;&#32;&#32;value_type*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(_M_ptr);&#32;}
87 
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
89 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc*&#32;_M_alloc;
90 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_ptr;
91 &#32;&#32;&#32;&#32;};
92 
94 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
95 &#32;&#32;&#32;&#32;__allocated_ptr&lt;_Alloc&gt;
96 &#32;&#32;&#32;&#32;__allocate_guarded(_Alloc&amp;&#32;__a)
97 &#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;__a,&#32;std::allocator_traits&lt;_Alloc&gt;::allocate(__a,&#32;1)&#32;};
99 &#32;&#32;&#32;&#32;}
100 
102 _GLIBCXX_END_NAMESPACE_VERSION
103 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
104 
105 <emphasis role="preprocessor">#endif</emphasis>
106 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
