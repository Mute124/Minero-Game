<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2experimental_2bits_2simd__fixed__size_8h_source" xml:lang="en-US">
<title>simd_fixed_size.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/experimental/bits/simd_fixed_size.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Simd&#32;fixed_size&#32;ABI&#32;specific&#32;implementations&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2020-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*&#32;The&#32;fixed_size&#32;ABI&#32;gives&#32;the&#32;following&#32;guarantees:</emphasis>
27 <emphasis role="comment">&#32;*&#32;&#32;-&#32;simd&#32;objects&#32;are&#32;passed&#32;via&#32;the&#32;stack</emphasis>
28 <emphasis role="comment">&#32;*&#32;&#32;-&#32;memory&#32;layout&#32;of&#32;`simd&lt;_Tp,&#32;_Np&gt;`&#32;is&#32;equivalent&#32;to&#32;`array&lt;_Tp,&#32;_Np&gt;`</emphasis>
29 <emphasis role="comment">&#32;*&#32;&#32;-&#32;alignment&#32;of&#32;`simd&lt;_Tp,&#32;_Np&gt;`&#32;is&#32;`_Np&#32;*&#32;sizeof(_Tp)`&#32;if&#32;_Np&#32;is&#32;__a</emphasis>
30 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;power-of-2&#32;value,&#32;otherwise&#32;`std::__bit_ceil(_Np&#32;*&#32;sizeof(_Tp))`&#32;(Note:</emphasis>
31 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;if&#32;the&#32;alignment&#32;were&#32;to&#32;exceed&#32;the&#32;system/compiler&#32;maximum,&#32;it&#32;is&#32;bounded</emphasis>
32 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;to&#32;that&#32;maximum)</emphasis>
33 <emphasis role="comment">&#32;*&#32;&#32;-&#32;simd_mask&#32;objects&#32;are&#32;passed&#32;like&#32;bitset&lt;_Np&gt;</emphasis>
34 <emphasis role="comment">&#32;*&#32;&#32;-&#32;memory&#32;layout&#32;of&#32;`simd_mask&lt;_Tp,&#32;_Np&gt;`&#32;is&#32;equivalent&#32;to&#32;`bitset&lt;_Np&gt;`</emphasis>
35 <emphasis role="comment">&#32;*&#32;&#32;-&#32;alignment&#32;of&#32;`simd_mask&lt;_Tp,&#32;_Np&gt;`&#32;is&#32;equal&#32;to&#32;the&#32;alignment&#32;of</emphasis>
36 <emphasis role="comment">&#32;*&#32;&#32;&#32;&#32;`bitset&lt;_Np&gt;`</emphasis>
37 <emphasis role="comment">&#32;*/</emphasis>
38 
39 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_EXPERIMENTAL_SIMD_FIXED_SIZE_H_</emphasis>
40 <emphasis role="preprocessor">#define&#32;_GLIBCXX_EXPERIMENTAL_SIMD_FIXED_SIZE_H_</emphasis>
41 
42 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
43 
44 <emphasis role="preprocessor">#include&#32;&lt;array&gt;</emphasis>
45 
46 _GLIBCXX_SIMD_BEGIN_NAMESPACE
47 
48 <emphasis role="comment">//&#32;__simd_tuple_element&#32;{{{</emphasis>
49 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_I,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
50 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__simd_tuple_element;
51 
52 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
53 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__simd_tuple_element&lt;0,&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;&gt;
54 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;simd&lt;_Tp,&#32;_A0&gt;;&#32;};
55 
56 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_I,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
57 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__simd_tuple_element&lt;_I,&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;&gt;
58 &#32;&#32;{
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;__simd_tuple_element&lt;_I&#32;-&#32;1,&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
61 &#32;&#32;};
62 
63 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_I,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
64 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__simd_tuple_element_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__simd_tuple_element&lt;_I,&#32;_Tp&gt;::type;
65 
66 <emphasis role="comment">//&#32;}}}</emphasis>
67 <emphasis role="comment">//&#32;__simd_tuple_concat&#32;{{{</emphasis>
68 
69 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_A0s,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_A1s&gt;
70 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0s...,&#32;_A1s...&gt;
71 &#32;&#32;__simd_tuple_concat(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0s...&gt;&amp;&#32;__left,
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A1s...&gt;&amp;&#32;__right)
73 &#32;&#32;{
74 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(_A0s)&#32;==&#32;0)
75 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__right;
76 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(_A1s)&#32;==&#32;0)
77 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__left;
78 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
79 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__left.first,&#32;__simd_tuple_concat(__left.second,&#32;__right)};
80 &#32;&#32;}
81 
82 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A10,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_A1s&gt;
83 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;simd_abi::scalar,&#32;_A10,
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_A1s...&gt;
85 &#32;&#32;__simd_tuple_concat(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__left,
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A10,&#32;_A1s...&gt;&amp;&#32;__right)
87 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__left,&#32;__right};&#32;}
88 
89 <emphasis role="comment">//&#32;}}}</emphasis>
90 <emphasis role="comment">//&#32;__simd_tuple_pop_front&#32;{{{</emphasis>
91 <emphasis role="comment">//&#32;Returns&#32;the&#32;next&#32;_SimdTuple&#32;in&#32;__x&#32;that&#32;has&#32;_Np&#32;elements&#32;less.</emphasis>
92 <emphasis role="comment">//&#32;Precondition:&#32;_Np&#32;must&#32;match&#32;the&#32;number&#32;of&#32;elements&#32;in&#32;__first&#32;(recursively)</emphasis>
93 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
94 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
95 &#32;&#32;__simd_tuple_pop_front(_Tp&amp;&amp;&#32;__x)
96 &#32;&#32;{
97 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;0)
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x);
99 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;{
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;__remove_cvref_t&lt;_Tp&gt;;
102 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;=&#32;_Up::_S_first_size);
103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_pop_front&lt;_Np&#32;-&#32;_Up::_S_first_size&gt;(__x.second);
104 &#32;&#32;&#32;&#32;&#32;&#32;}
105 &#32;&#32;}
106 
107 <emphasis role="comment">//&#32;}}}</emphasis>
108 <emphasis role="comment">//&#32;__get_simd_at&lt;_Np&gt;&#32;{{{1</emphasis>
109 <emphasis role="keyword">struct&#32;</emphasis>__as_simd&#32;{};
110 
111 <emphasis role="keyword">struct&#32;</emphasis>__as_simd_tuple&#32;{};
112 
113 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
114 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;simd&lt;_Tp,&#32;_A0&gt;
115 &#32;&#32;__simd_tuple_get_impl(__as_simd,&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_Abis...&gt;&amp;&#32;__t,
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;0&gt;)
117 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;__t.first};&#32;}
118 
119 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
120 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
121 &#32;&#32;__simd_tuple_get_impl(__as_simd_tuple,
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_Abis...&gt;&amp;&#32;__t,
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;0&gt;)
124 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t.first;&#32;}
125 
126 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
127 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
128 &#32;&#32;__simd_tuple_get_impl(__as_simd_tuple,&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_Abis...&gt;&amp;&#32;__t,
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;0&gt;)
130 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__t.first;&#32;}
131 
132 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_R,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
133 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
134 &#32;&#32;__simd_tuple_get_impl(_R,&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&amp;&#32;__t,
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;_Np&gt;)
136 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_get_impl(_R(),&#32;__t.second,&#32;_SizeConstant&lt;_Np&#32;-&#32;1&gt;());&#32;}
137 
138 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
139 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
140 &#32;&#32;__simd_tuple_get_impl(__as_simd_tuple,&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&amp;&#32;__t,
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;_Np&gt;)
142 &#32;&#32;{
143 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_get_impl(__as_simd_tuple(),&#32;__t.second,
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;_Np&#32;-&#32;1&gt;());
145 &#32;&#32;}
146 
147 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
148 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
149 &#32;&#32;__get_simd_at(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&amp;&#32;__t)
150 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_get_impl(__as_simd(),&#32;__t,&#32;_SizeConstant&lt;_Np&gt;());&#32;}
151 
152 <emphasis role="comment">//&#32;}}}</emphasis>
153 <emphasis role="comment">//&#32;__get_tuple_at&lt;_Np&gt;&#32;{{{</emphasis>
154 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
155 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
156 &#32;&#32;__get_tuple_at(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&amp;&#32;__t)
157 &#32;&#32;{
158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_get_impl(__as_simd_tuple(),&#32;__t,&#32;_SizeConstant&lt;_Np&gt;());
159 &#32;&#32;}
160 
161 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
162 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
163 &#32;&#32;__get_tuple_at(_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&amp;&#32;__t)
164 &#32;&#32;{
165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_get_impl(__as_simd_tuple(),&#32;__t,&#32;_SizeConstant&lt;_Np&gt;());
166 &#32;&#32;}
167 
168 <emphasis role="comment">//&#32;__tuple_element_meta&#32;{{{1</emphasis>
169 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&gt;
170 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__tuple_element_meta&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Abi::_SimdImpl
171 &#32;&#32;{
172 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_SimdImpl::abi_type,
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Abi&gt;);&#32;<emphasis role="comment">//&#32;this&#32;fails&#32;e.g.&#32;when&#32;_SimdImpl&#32;is&#32;an</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;alias&#32;for&#32;_SimdImplBuiltin&lt;_DifferentAbi&gt;</emphasis>
175 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>abi_type&#32;=&#32;_Abi;
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Traits&#32;=&#32;_SimdTraits&lt;_Tp,&#32;_Abi&gt;;
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskImpl&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi::_MaskImpl;
179 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Traits::_MaskMember;
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>simd_type&#32;=&#32;simd&lt;_Tp,&#32;_Abi&gt;;
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_offset&#32;=&#32;_Offset;
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd_size&lt;_Tp,&#32;_Abi&gt;::value;&#32;}
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskImpl&#32;_S_mask_impl&#32;=&#32;{};
184 
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
186 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
187 &#32;&#32;&#32;&#32;&#32;&#32;_S_submask(_BitMask&lt;_Np,&#32;_Sanitized&gt;&#32;__bits)
188 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bits.template&#32;_M_extract&lt;_Offset,&#32;_S_size()&gt;();&#32;}
189 
190 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
191 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember
192 &#32;&#32;&#32;&#32;&#32;&#32;_S_make_mask(_BitMask&lt;_Np,&#32;_Sanitized&gt;&#32;__bits)
193 &#32;&#32;&#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskImpl::template&#32;_S_convert&lt;_Tp&gt;(
195 &#32;&#32;&#32;&#32;&#32;&#32;__bits.template&#32;_M_extract&lt;_Offset,&#32;_S_size()&gt;()._M_sanitized());
196 &#32;&#32;&#32;&#32;&#32;&#32;}
197 
198 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_ULLong
199 &#32;&#32;&#32;&#32;_S_mask_to_shifted_ullong(_MaskMember&#32;__k)
200 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_MaskImpl::_S_to_bits(__k).to_ullong()&#32;&lt;&lt;&#32;_Offset;&#32;}
201 &#32;&#32;};
202 
203 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
204 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
205 &#32;&#32;__tuple_element_meta&lt;_Tp,&#32;_Abi,&#32;_Offset&gt;
206 &#32;&#32;__make_meta(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abi,&#32;_As...&gt;&amp;)
207 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;}
208 
209 <emphasis role="comment">//&#32;}}}1</emphasis>
210 <emphasis role="comment">//&#32;_WithOffset&#32;wrapper&#32;class&#32;{{{</emphasis>
211 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base&gt;
212 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_WithOffset&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Base
213 &#32;&#32;{
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_offset&#32;=&#32;_Offset;
215 
216 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_as_charptr()
217 &#32;&#32;&#32;&#32;{
218 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_S_offset&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type);
220 &#32;&#32;&#32;&#32;}
221 
222 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_as_charptr()<emphasis role="keyword">&#32;const</emphasis>
223 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;_S_offset&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">typename</emphasis>&#32;_Base::value_type);
226 &#32;&#32;&#32;&#32;}
227 &#32;&#32;};
228 
229 <emphasis role="comment">//&#32;make&#32;_WithOffset&lt;_WithOffset&gt;&#32;ill-formed&#32;to&#32;use:</emphasis>
230 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_O0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_O1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base&gt;
231 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_WithOffset&lt;_O0,&#32;_WithOffset&lt;_O1,&#32;_Base&gt;&gt;&#32;{};
232 
233 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
234 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
235 &#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
236 &#32;&#32;__add_offset(_Tp&amp;&#32;__base)
237 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_WithOffset&lt;_Offset,&#32;__remove_cvref_t&lt;_Tp&gt;<emphasis role="keyword">&gt;</emphasis>&amp;&gt;(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>);&#32;}
238 
239 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
240 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
241 &#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
242 &#32;&#32;__add_offset(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__base)
243 &#32;&#32;{
244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_WithOffset&lt;_Offset,&#32;__remove_cvref_t&lt;_Tp&gt;<emphasis role="keyword">&gt;</emphasis>&amp;&gt;(
245 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>);
246 &#32;&#32;}
247 
248 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ExistingOffset,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
249 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
250 &#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
251 &#32;&#32;__add_offset(_WithOffset&lt;_ExistingOffset,&#32;_Tp&gt;&amp;&#32;__base)
252 &#32;&#32;{
253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_WithOffset&lt;_Offset&#32;+&#32;_ExistingOffset,&#32;_Tp&gt;&amp;<emphasis role="keyword">&gt;</emphasis>(
254 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>));
255 &#32;&#32;}
256 
257 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_ExistingOffset,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
258 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC
259 &#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
260 &#32;&#32;__add_offset(<emphasis role="keyword">const</emphasis>&#32;_WithOffset&lt;_ExistingOffset,&#32;_Tp&gt;&amp;&#32;__base)
261 &#32;&#32;{
262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_WithOffset&lt;_Offset&#32;+&#32;_ExistingOffset,&#32;_Tp&gt;&amp;<emphasis role="keyword">&gt;</emphasis>(
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_Tp&amp;<emphasis role="keyword">&gt;</emphasis>(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>));
264 &#32;&#32;}
265 
266 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
267 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&#32;=&#32;0;
268 
269 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
270 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&lt;_WithOffset&lt;_Offset,&#32;_Tp&gt;&gt;
271 &#32;&#32;&#32;&#32;=&#32;_WithOffset&lt;_Offset,&#32;_Tp&gt;::_S_offset;
272 
273 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
274 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&lt;const&#32;_Tp&gt;&#32;=&#32;__offset&lt;_Tp&gt;;
275 
276 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
277 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&lt;_Tp&amp;&gt;&#32;=&#32;__offset&lt;_Tp&gt;;
278 
279 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
280 &#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&lt;_Tp&amp;&amp;&gt;&#32;=&#32;__offset&lt;_Tp&gt;;
281 
282 <emphasis role="comment">//&#32;}}}</emphasis>
283 <emphasis role="comment">//&#32;_SimdTuple&#32;specializations&#32;{{{1</emphasis>
284 <emphasis role="comment">//&#32;empty&#32;{{{2</emphasis>
285 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
286 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdTuple&lt;_Tp&gt;
287 &#32;&#32;{
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
289 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_tuple_size&#32;=&#32;0;
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
291 &#32;&#32;};
292 
293 <emphasis role="comment">//&#32;_SimdTupleData&#32;{{{2</emphasis>
294 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_FirstType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_SecondType&gt;
295 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdTupleData
296 &#32;&#32;{
297 &#32;&#32;&#32;&#32;_FirstType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
298 &#32;&#32;&#32;&#32;_SecondType&#32;second;
299 
300 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
301 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop()<emphasis role="keyword">&#32;const</emphasis>
302 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_class_v&lt;_FirstType&gt;)
304 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>._M_is_constprop()&#32;&amp;&amp;&#32;second._M_is_constprop();
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
306 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_constant_p(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)&#32;&amp;&amp;&#32;second._M_is_constprop();
307 &#32;&#32;&#32;&#32;}
308 &#32;&#32;};
309 
310 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_FirstType,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
311 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdTupleData&lt;_FirstType,&#32;_SimdTuple&lt;_Tp&gt;&gt;
312 &#32;&#32;{
313 &#32;&#32;&#32;&#32;_FirstType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
314 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp&gt;&#32;second&#32;=&#32;{};
315 
316 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
317 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_is_constprop()<emphasis role="keyword">&#32;const</emphasis>
318 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
319 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_class_v&lt;_FirstType&gt;)
320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>._M_is_constprop();
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
322 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__builtin_constant_p(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>);
323 &#32;&#32;&#32;&#32;}
324 &#32;&#32;};
325 
326 <emphasis role="comment">//&#32;1&#32;or&#32;more&#32;{{{2</emphasis>
327 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Abi0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
328 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdTuple&lt;_Tp,&#32;_Abi0,&#32;_Abis...&gt;
329 &#32;&#32;&#32;&#32;:&#32;_SimdTupleData&lt;typename&#32;_SimdTraits&lt;_Tp,&#32;_Abi0&gt;::_SimdMember,
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&gt;
331 &#32;&#32;{
332 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!__is_fixed_size_abi_v&lt;_Abi0&gt;);
333 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Tp;
334 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FirstType&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_Abi0&gt;::_SimdMember;
335 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FirstAbi&#32;=&#32;_Abi0;
336 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SecondType&#32;=&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;;
337 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_tuple_size&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>...(_Abis)&#32;+&#32;1;
338 
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size()
340 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;&#32;+&#32;_SecondType::_S_size();&#32;}
341 
342 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_first_size&#32;=&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;;
343 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_is_homogeneous&#32;=&#32;(is_same_v&lt;_Abi0,&#32;_Abis&gt;&#32;&amp;&amp;&#32;...);
344 
345 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base&#32;=&#32;_SimdTupleData&lt;typename&#32;_SimdTraits&lt;_Tp,&#32;_Abi0&gt;::_SimdMember,
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&gt;;
347 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::first;
348 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Base::second;
349 
350 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
351 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
352 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&amp;)
353 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
354 
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
356 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple(_Up&amp;&amp;&#32;__x)
357 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base{static_cast&lt;_Up&amp;&amp;&gt;(__x)}&#32;{}
358 
359 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up2&gt;
360 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple(_Up&amp;&amp;&#32;__x,&#32;_Up2&amp;&amp;&#32;__y)
361 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base{static_cast&lt;_Up&amp;&amp;&gt;(__x),&#32;static_cast&lt;_Up2&amp;&amp;&gt;(__y)}&#32;{}
362 
363 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
364 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple(_Up&amp;&amp;&#32;__x,&#32;_SimdTuple&lt;_Tp&gt;)
365 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base{static_cast&lt;_Up&amp;&amp;&gt;(__x)}&#32;{}
366 
367 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_as_charptr()
368 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);&#32;}
369 
370 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;_M_as_charptr()<emphasis role="keyword">&#32;const</emphasis>
371 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>);&#32;}
372 
373 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
374 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;_M_at()
375 &#32;&#32;&#32;&#32;&#32;&#32;{
376 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;0)
377 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
379 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;second.template&#32;_M_at&lt;_Np&#32;-&#32;1&gt;();
380 &#32;&#32;&#32;&#32;&#32;&#32;}
381 
382 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
383 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;_M_at()<emphasis role="keyword">&#32;const</emphasis>
384 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
385 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;0)
386 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;second.template&#32;_M_at&lt;_Np&#32;-&#32;1&gt;();
389 &#32;&#32;&#32;&#32;&#32;&#32;}
390 
391 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&gt;
392 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;_M_simd_at()<emphasis role="keyword">&#32;const</emphasis>
393 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
394 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;0)
395 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;simd&lt;_Tp,&#32;_Abi0&gt;(__private_init,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>);
396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;second.template&#32;_M_simd_at&lt;_Np&#32;-&#32;1&gt;();
398 &#32;&#32;&#32;&#32;&#32;&#32;}
399 
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
401 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple
402 &#32;&#32;&#32;&#32;&#32;&#32;_S_generate(_Fp&amp;&amp;&#32;__gen,&#32;_SizeConstant&lt;_Offset&gt;&#32;=&#32;{})
403 &#32;&#32;&#32;&#32;&#32;&#32;{
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__first&#32;=&#32;__gen(__tuple_element_meta&lt;_Tp,&#32;_Abi0,&#32;_Offset&gt;());
405 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first};
407 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SecondType::_S_generate(
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__gen),
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;_Offset&#32;+&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;&gt;())};
412 &#32;&#32;&#32;&#32;&#32;&#32;}
413 
414 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
415 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SimdTuple
416 &#32;&#32;&#32;&#32;&#32;&#32;_M_apply_wrapped(_Fp&amp;&amp;&#32;__fun,&#32;<emphasis role="keyword">const</emphasis>&#32;_More&amp;...&#32;__more)<emphasis role="keyword">&#32;const</emphasis>
417 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
418 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__first
419 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;__fun(__make_meta&lt;_Offset&gt;(*<emphasis role="keyword">this</emphasis>),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;__more.first...);
420 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first};
422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second.template&#32;_M_apply_wrapped&lt;_Offset&#32;+&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;&gt;(
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun),&#32;__more.second...)};
427 &#32;&#32;&#32;&#32;&#32;&#32;}
428 
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tup&gt;
430 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
431 &#32;&#32;&#32;&#32;&#32;&#32;_M_extract_argument(_Tup&amp;&amp;&#32;__tup)<emphasis role="keyword">&#32;const</emphasis>
432 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TupT&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__remove_cvref_t&lt;_Tup&gt;::value_type;
434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_SimdTuple,&#32;__remove_cvref_t&lt;_Tup&gt;&gt;)
435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__tup.first;
436 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__builtin_is_constant_evaluated())
437 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fixed_size_storage_t&lt;_TupT,&#32;_S_first_size&gt;::_S_generate([&amp;](
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__meta)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__meta._S_generator(
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__tup[__i];&#32;},
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_TupT*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>));
442 &#32;&#32;&#32;&#32;&#32;&#32;});
443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;[&amp;]()&#32;{
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fixed_size_storage_t&lt;_TupT,&#32;_S_first_size&gt;&#32;__r;
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__r._M_as_charptr(),&#32;__tup._M_as_charptr(),
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(__r));
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
449 &#32;&#32;&#32;&#32;&#32;&#32;}();
450 &#32;&#32;&#32;&#32;&#32;&#32;}
451 
452 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tup&gt;
453 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;
454 &#32;&#32;&#32;&#32;&#32;&#32;_M_skip_argument(_Tup&amp;&amp;&#32;__tup)<emphasis role="keyword">&#32;const</emphasis>
455 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
456 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_S_tuple_size&#32;&gt;&#32;1);
457 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;__remove_cvref_t&lt;_Tup&gt;;
458 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__off&#32;=&#32;__offset&lt;_Up&gt;;
459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_first_size&#32;==&#32;_Up::_S_first_size&#32;&amp;&amp;&#32;__off&#32;==&#32;0)
460 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__tup.second;
461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_first_size&#32;&gt;&#32;_Up::_S_first_size
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_S_first_size&#32;%&#32;_Up::_S_first_size&#32;==&#32;0
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;__off&#32;==&#32;0)
464 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_pop_front&lt;_S_first_size&gt;(__tup);
465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_first_size&#32;+&#32;__off&#32;&lt;&#32;_Up::_S_first_size)
466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__add_offset&lt;_S_first_size&gt;(__tup);
467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_first_size&#32;+&#32;__off&#32;==&#32;_Up::_S_first_size)
468 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__tup.second;
469 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
470 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tup&gt;();
471 &#32;&#32;&#32;&#32;&#32;&#32;}
472 
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
474 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
475 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_front(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abi0,&#32;_More...&gt;&amp;&#32;__x)&#32;&amp;
476 &#32;&#32;&#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Offset&#32;==&#32;0);
478 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;__x.first;
479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(_More)&#32;&gt;&#32;0)
480 &#32;&#32;&#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>...(_Abis)&#32;&gt;=&#32;<emphasis role="keyword">sizeof</emphasis>...(_More));
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second.template&#32;_M_assign_front&lt;0&gt;(__x.second);
483 &#32;&#32;&#32;&#32;&#32;&#32;}
484 &#32;&#32;&#32;&#32;&#32;&#32;}
485 
486 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&gt;
487 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
488 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_front(<emphasis role="keyword">const</emphasis>&#32;_FirstType&amp;&#32;__x)&#32;&amp;
489 &#32;&#32;&#32;&#32;&#32;&#32;{
490 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Offset&#32;==&#32;0);
491 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;__x;
492 &#32;&#32;&#32;&#32;&#32;&#32;}
493 
494 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
495 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
496 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign_front(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x)&#32;&amp;
497 &#32;&#32;&#32;&#32;&#32;&#32;{
498 &#32;&#32;&#32;&#32;__builtin_memcpy(_M_as_charptr()&#32;+&#32;_Offset&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(value_type),
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x._M_as_charptr(),
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;::_S_size());
501 &#32;&#32;&#32;&#32;&#32;&#32;}
502 
503 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
504 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Iterate&#32;over&#32;the&#32;first&#32;objects&#32;in&#32;this&#32;_SimdTuple&#32;and&#32;call&#32;__fun&#32;for&#32;each</emphasis>
505 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;of&#32;them.&#32;If&#32;additional&#32;arguments&#32;are&#32;passed&#32;via&#32;__more,&#32;chunk&#32;them&#32;into</emphasis>
506 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;_SimdTuple&#32;or&#32;__vector_type_t&#32;objects&#32;of&#32;the&#32;same&#32;number&#32;of&#32;values.</emphasis>
507 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*/</emphasis>
508 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
509 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple
510 &#32;&#32;&#32;&#32;&#32;&#32;_M_apply_per_chunk(_Fp&amp;&amp;&#32;__fun,&#32;_More&amp;&amp;...&#32;__more)<emphasis role="keyword">&#32;const</emphasis>
511 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
512 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;((...
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;conjunction_v&lt;
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_lvalue_reference&lt;_More&gt;,
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;negation&lt;is_const&lt;remove_reference_t&lt;_More&gt;&gt;&gt;&gt;)&#32;)
516 &#32;&#32;&#32;&#32;&#32;&#32;{
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;need&#32;to&#32;write&#32;back&#32;at&#32;least&#32;one&#32;of&#32;__more&#32;after&#32;calling&#32;__fun</emphasis>
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__first&#32;=&#32;[&amp;](<emphasis role="keyword">auto</emphasis>...&#32;__args)&#32;<emphasis role="keyword">constexpr</emphasis>
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__r&#32;=&#32;__fun(__tuple_element_meta&lt;_Tp,&#32;_Abi0,&#32;0&gt;(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__args...);
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__ignore_me&#32;=&#32;{(
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__dst,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__src)&#32;{
524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_assignable_v&lt;<emphasis role="keyword">decltype</emphasis>(__dst),
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(__dst)&gt;)
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__dst.template&#32;_M_assign_front&lt;__offset&lt;<emphasis role="keyword">decltype</emphasis>(__dst)&gt;&gt;(
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__src);
529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}(<emphasis role="keyword">static_cast&lt;</emphasis>_More&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__more),&#32;__args),
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0)...};
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_M_extract_argument(__more)...);
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first};
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second._M_apply_per_chunk(<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun),
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_skip_argument(__more)...)};
541 &#32;&#32;&#32;&#32;&#32;&#32;}
542 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
543 &#32;&#32;&#32;&#32;&#32;&#32;{
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__first&#32;=&#32;__fun(__tuple_element_meta&lt;_Tp,&#32;_Abi0,&#32;0&gt;(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_extract_argument(__more)...);
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first};
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__first,
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second._M_apply_per_chunk(<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun),
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_skip_argument(__more)...)};
552 &#32;&#32;&#32;&#32;&#32;&#32;}
553 &#32;&#32;&#32;&#32;&#32;&#32;}
554 
555 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
556 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>&#32;_M_apply_r(_Fp&amp;&amp;&#32;__fun,
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_More&amp;...&#32;__more)<emphasis role="keyword">&#32;const</emphasis>
558 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
559 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&amp;&amp;&#32;__first&#32;=&#32;__fun(__tuple_element_meta&lt;_Tp,&#32;_Abi0,&#32;0&gt;(),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__more.first...);
561 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
562 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
563 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_concat&lt;_R&gt;(
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__first,&#32;second.template&#32;_M_apply_r&lt;_R&gt;(<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun),
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__more.second...));
567 &#32;&#32;&#32;&#32;&#32;&#32;}
568 
569 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_More&gt;
570 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">friend</emphasis>&#32;_SanitizedBitMask&lt;_S_size()&gt;
571 &#32;&#32;&#32;&#32;&#32;&#32;_M_test(<emphasis role="keyword">const</emphasis>&#32;_Fp&amp;&#32;__fun,&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_More&amp;...&#32;__more)
572 &#32;&#32;&#32;&#32;&#32;&#32;{
573 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SanitizedBitMask&lt;_S_first_size&gt;&#32;__first
574 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Abi0::_MaskImpl::_S_to_bits(
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fun(__tuple_element_meta&lt;_Tp,&#32;_Abi0,&#32;0&gt;(),&#32;__x.first,
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__more.first...));
577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first;
579 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_test(__fun,&#32;__x.second,&#32;__more.second...)
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;._M_prepend(__first);
582 &#32;&#32;&#32;&#32;&#32;&#32;}
583 
584 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;_Up&#32;_I&gt;
585 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp
586 &#32;&#32;&#32;&#32;&#32;&#32;operator[](integral_constant&lt;_Up,&#32;_I&gt;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
587 &#32;&#32;&#32;&#32;&#32;&#32;{
588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_I&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;)
589 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_subscript_read(_I);
590 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;second[integral_constant&lt;_Up,&#32;_I&#32;-&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;&gt;()];
592 &#32;&#32;&#32;&#32;&#32;&#32;}
593 
594 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
595 &#32;&#32;&#32;&#32;_Tp&#32;operator[](<emphasis role="keywordtype">size_t</emphasis>&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
596 &#32;&#32;&#32;&#32;{
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_subscript_read(__i);
599 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
600 &#32;&#32;&#32;&#32;{
601 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_USE_ALIASING_LOADS</emphasis>
602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__may_alias&lt;_Tp&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)[__i];
603 <emphasis role="preprocessor">#else</emphasis>
604 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_Abi0&gt;())
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp*&#32;ptr&#32;=&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ptr[__i];
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
609 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_M_subscript_read(__i)
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;second[__i&#32;-&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;];
613 <emphasis role="preprocessor">#endif</emphasis>
614 &#32;&#32;&#32;&#32;}
615 &#32;&#32;&#32;&#32;}
616 
617 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
618 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_set(<emphasis role="keywordtype">size_t</emphasis>&#32;__i,&#32;_Tp&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
619 &#32;&#32;&#32;&#32;{
620 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_S_tuple_size&#32;==&#32;1)
621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_subscript_write(__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
622 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
623 &#32;&#32;&#32;&#32;{
624 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_USE_ALIASING_LOADS</emphasis>
625 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__may_alias&lt;_Tp&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)[__i]&#32;=&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>;
626 <emphasis role="preprocessor">#else</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__i&#32;&lt;&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;)
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_subscript_write(__i,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;second._M_set(__i&#32;-&#32;simd_size_v&lt;_Tp,&#32;_Abi0&gt;,&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>);
631 <emphasis role="preprocessor">#endif</emphasis>
632 &#32;&#32;&#32;&#32;}
633 &#32;&#32;&#32;&#32;}
634 
635 &#32;&#32;<emphasis role="keyword">private</emphasis>:
636 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_subscript_read/_write&#32;{{{</emphasis>
637 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
638 &#32;&#32;&#32;&#32;_Tp&#32;_M_subscript_read([[maybe_unused]]&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
639 &#32;&#32;&#32;&#32;{
640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vectorizable_v&lt;_FirstType&gt;)
641 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>;
642 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>[__i];
644 &#32;&#32;&#32;&#32;}
645 
646 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
647 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;_M_subscript_write([[maybe_unused]]&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__i,&#32;_Tp&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
648 &#32;&#32;&#32;&#32;{
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_vectorizable_v&lt;_FirstType&gt;)
650 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>&#32;=&#32;__y;
651 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
652 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>._M_set(__i,&#32;__y);
653 &#32;&#32;&#32;&#32;}
654 
655 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
656 &#32;&#32;};
657 
658 <emphasis role="comment">//&#32;__make_simd_tuple&#32;{{{1</emphasis>
659 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0&gt;
660 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SimdTuple&lt;_Tp,&#32;_A0&gt;
661 &#32;&#32;__make_simd_tuple(simd&lt;_Tp,&#32;_A0&gt;&#32;__x0)
662 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__data(__x0)};&#32;}
663 
664 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
665 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;
666 &#32;&#32;__make_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_A0&gt;&amp;&#32;__x0,&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Tp,&#32;_As&gt;&amp;...&#32;__xs)
667 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__data(__x0),&#32;__make_simd_tuple(__xs...)};&#32;}
668 
669 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0&gt;
670 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SimdTuple&lt;_Tp,&#32;_A0&gt;
671 &#32;&#32;__make_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_A0&gt;::_SimdMember&amp;&#32;__arg0)
672 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__arg0};&#32;}
673 
674 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
675 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_Abis...&gt;
676 &#32;&#32;__make_simd_tuple(
677 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_A0&gt;::_SimdMember&amp;&#32;__arg0,
678 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_A1&gt;::_SimdMember&amp;&#32;__arg1,
679 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_SimdTraits&lt;_Tp,&#32;_Abis&gt;::_SimdMember&amp;...&#32;__args)
680 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__arg0,&#32;__make_simd_tuple&lt;_Tp,&#32;_A1,&#32;_Abis...&gt;(__arg1,&#32;__args...)};&#32;}
681 
682 <emphasis role="comment">//&#32;__to_simd_tuple&#32;{{{1</emphasis>
683 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NV,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_VX&gt;
684 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;
685 &#32;&#32;__to_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array&lt;_V, _NV&gt;</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;_VX...&#32;__fromX);
686 
687 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,
688 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="comment">//&#32;skip&#32;this&#32;many&#32;elements&#32;in&#32;__from0</emphasis>
689 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V0,
690 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_V0VT&#32;=&#32;_VectorTraits&lt;_V0&gt;,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_VX&gt;
691 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_R&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__to_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;_V0&#32;__from0,
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_VX...&#32;__fromX)
693 &#32;&#32;{
694 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;typename&#32;_V0VT::value_type,&#32;_Tp&gt;);
695 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Offset&#32;&lt;&#32;_V0VT::_S_full_size);
696 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_R0&#32;=&#32;__vector_type_t&lt;_Tp,&#32;_R::_S_first_size&gt;;
697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_R::_S_tuple_size&#32;==&#32;1)
698 &#32;&#32;&#32;&#32;&#32;&#32;{
699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__from0[_Offset]};
701 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;==&#32;0&#32;&amp;&amp;&#32;_V0VT::_S_full_size&#32;&gt;=&#32;_Np)
702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_R0&gt;(__from0)};
703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;*&#32;2&#32;==&#32;_V0VT::_S_full_size
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_V0VT::_S_full_size&#32;/&#32;2&#32;&gt;=&#32;_Np)
705 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_R0&gt;(__extract_part&lt;1,&#32;2&gt;(__from0))};
706 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;*&#32;4&#32;==&#32;_V0VT::_S_full_size
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_V0VT::_S_full_size&#32;/&#32;4&#32;&gt;=&#32;_Np)
708 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_R0&gt;(__extract_part&lt;1,&#32;4&gt;(__from0))};
709 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
710 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
711 &#32;&#32;&#32;&#32;&#32;&#32;}
712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
713 &#32;&#32;&#32;&#32;&#32;&#32;{
714 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(1&#32;==&#32;_R::_S_first_size)
715 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;extract&#32;one&#32;scalar&#32;and&#32;recurse</emphasis>
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;+&#32;1&#32;&lt;&#32;_V0VT::_S_full_size)
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__from0[_Offset],
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&#32;-&#32;1,&#32;_Offset&#32;+&#32;1&gt;(__from0,
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fromX...)};
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__from0[_Offset],
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&#32;-&#32;1,&#32;0&gt;(__fromX...)};
723 &#32;&#32;&#32;&#32;&#32;&#32;}
724 
725 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;place&#32;__from0&#32;into&#32;_R::first&#32;and&#32;recurse&#32;for&#32;__fromX&#32;-&gt;&#32;_R::second</emphasis>
726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_V0VT::_S_full_size&#32;==&#32;_R::_S_first_size
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Offset&#32;==&#32;0)
728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__from0,
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&#32;-&#32;_R::_S_first_size&gt;(__fromX...)};
730 
731 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;place&#32;lower&#32;part&#32;of&#32;__from0&#32;into&#32;_R::first&#32;and&#32;recurse&#32;with&#32;_Offset</emphasis>
732 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_V0VT::_S_full_size&#32;&gt;&#32;_R::_S_first_size
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Offset&#32;==&#32;0)
734 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_R0&gt;(__from0),
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&#32;-&#32;_R::_S_first_size,
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_R::_S_first_size&gt;(__from0,&#32;__fromX...)};
737 
738 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;place&#32;lower&#32;part&#32;of&#32;second&#32;quarter&#32;of&#32;__from0&#32;into&#32;_R::first&#32;and</emphasis>
739 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recurse&#32;with&#32;_Offset</emphasis>
740 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;*&#32;4&#32;==&#32;_V0VT::_S_full_size
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_V0VT::_S_full_size&#32;&gt;=&#32;4&#32;*&#32;_R::_S_first_size)
742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_R0&gt;(__extract_part&lt;2,&#32;4&gt;(__from0)),
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&#32;-&#32;_R::_S_first_size,
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Offset&#32;+&#32;_R::_S_first_size&gt;(__from0,
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fromX...)};
746 
747 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;place&#32;lower&#32;half&#32;of&#32;high&#32;half&#32;of&#32;__from0&#32;into&#32;_R::first&#32;and&#32;recurse</emphasis>
748 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;_Offset</emphasis>
749 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;*&#32;2&#32;==&#32;_V0VT::_S_full_size
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_V0VT::_S_full_size&#32;&gt;=&#32;4&#32;*&#32;_R::_S_first_size)
751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_R0&gt;(__extract_part&lt;2,&#32;4&gt;(__from0)),
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&#32;-&#32;_R::_S_first_size,
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Offset&#32;+&#32;_R::_S_first_size&gt;(__from0,
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fromX...)};
755 
756 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;place&#32;high&#32;half&#32;of&#32;__from0&#32;into&#32;_R::first&#32;and&#32;recurse&#32;with&#32;__fromX</emphasis>
757 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Offset&#32;*&#32;2&#32;==&#32;_V0VT::_S_full_size
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_V0VT::_S_full_size&#32;/&#32;2&#32;&gt;=&#32;_R::_S_first_size)
759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_R{__intrin_bitcast&lt;_R0&gt;(__extract_part&lt;1,&#32;2&gt;(__from0)),
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&#32;-&#32;_R::_S_first_size,&#32;0&gt;(
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fromX...)};
762 
763 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ill-formed&#32;if&#32;some&#32;unforseen&#32;pattern&#32;is&#32;needed</emphasis>
764 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
765 &#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();
766 &#32;&#32;&#32;&#32;&#32;&#32;}
767 &#32;&#32;}
768 
769 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_V,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NV,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_VX&gt;
770 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;
771 &#32;&#32;__to_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array&lt;_V, _NV&gt;</link>&amp;&#32;__from,&#32;<emphasis role="keyword">const</emphasis>&#32;_VX...&#32;__fromX)
772 &#32;&#32;{
773 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Tp,&#32;_V&gt;)
774 &#32;&#32;&#32;&#32;&#32;&#32;{
775 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
776 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>...(_VX)&#32;==&#32;0,
777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;An&#32;array&#32;of&#32;scalars&#32;must&#32;be&#32;the&#32;last&#32;argument&#32;to&#32;__to_simd_tuple&quot;</emphasis>);
778 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts(
779 &#32;&#32;&#32;&#32;&#32;&#32;__from,
780 &#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_NV&gt;(),&#32;[&amp;](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>...&#32;__args)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__simd_tuple_concat(
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdTuple&lt;_Tp,&#32;simd_abi::scalar&gt;{__args}...,&#32;_SimdTuple&lt;_Tp&gt;());
783 &#32;&#32;&#32;&#32;&#32;&#32;});
784 &#32;&#32;&#32;&#32;&#32;&#32;}
785 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
786 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__call_with_subscripts(
787 &#32;&#32;&#32;&#32;__from,
788 &#32;&#32;&#32;&#32;make_index_sequence&lt;_NV&gt;(),&#32;[&amp;](<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>...&#32;__args)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_simd_tuple&lt;_Tp,&#32;_Np&gt;(__args...,&#32;__fromX...);
790 &#32;&#32;&#32;&#32;});
791 &#32;&#32;}
792 
793 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
794 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__to_tuple_helper&#32;=&#32;_Tp;
795 
796 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NOut,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,
797 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>...&#32;_Indexes&gt;
798 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;__fixed_size_storage_t&lt;_Tp,&#32;_NOut&gt;
799 &#32;&#32;__to_simd_tuple_impl(index_sequence&lt;_Indexes...&gt;,
800 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&lt;__vector_type_t&lt;_Tp,&#32;simd_size_v&lt;_Tp,&#32;_A0&gt;&gt;,&#32;_Np&gt;&amp;&#32;__args)
801 &#32;&#32;{
802 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__make_simd_tuple&lt;_Tp,&#32;__to_tuple_helper&lt;_Indexes,&#32;_A0&gt;...&gt;(
803 &#32;&#32;&#32;&#32;&#32;&#32;__args[_Indexes]...);
804 &#32;&#32;}
805 
806 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_NOut,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np,
807 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;__fixed_size_storage_t&lt;_Tp,&#32;_NOut&gt;&gt;
808 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_R
809 &#32;&#32;__to_simd_tuple_sized(
810 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array</link>&lt;__vector_type_t&lt;_Tp,&#32;simd_size_v&lt;_Tp,&#32;_A0&gt;&gt;,&#32;_Np&gt;&amp;&#32;__args)
811 &#32;&#32;{
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;*&#32;simd_size_v&lt;_Tp,&#32;_A0&gt;&#32;&gt;=&#32;_NOut);
813 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__to_simd_tuple_impl&lt;_Tp,&#32;_A0,&#32;_NOut&gt;(
814 &#32;&#32;&#32;&#32;&#32;&#32;make_index_sequence&lt;_R::_S_tuple_size&gt;(),&#32;__args);
815 &#32;&#32;}
816 
817 <emphasis role="comment">//&#32;__optimize_simd_tuple&#32;{{{1</emphasis>
818 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
819 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_SimdTuple&lt;_Tp&gt;
820 &#32;&#32;__optimize_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp&gt;)
821 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};&#32;}
822 
823 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap&gt;
824 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Ap&gt;&amp;
825 &#32;&#32;__optimize_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Ap&gt;&amp;&#32;__x)
826 &#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;&#32;}
827 
828 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis,
829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R&#32;=&#32;__fixed_size_storage_t&lt;
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_Abis...&gt;::_S_size()&gt;&gt;
831 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;_R
832 &#32;&#32;__optimize_simd_tuple(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_Abis...&gt;&amp;&#32;__x)
833 &#32;&#32;{
834 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tup&#32;=&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_Abis...&gt;;
835 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_R,&#32;_Tup&gt;)
836 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
837 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;<emphasis role="keyword">typename</emphasis>&#32;_R::_FirstType,
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tup::_FirstType&gt;)
839 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__x.first,&#32;__optimize_simd_tuple(__x.second)};
840 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__is_scalar_abi&lt;_A0&gt;()
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;_A0::template&#32;_S_is_partial&lt;_Tp&gt;)
842 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__generate_from_n_evaluations&lt;_R::_S_first_size,
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_R::_FirstType&gt;(
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__i];&#32;}),
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__optimize_simd_tuple(
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__simd_tuple_pop_front&lt;_R::_S_first_size&gt;(__x))};
847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_A0,&#32;_A1&gt;
848 &#32;&#32;&#32;&#32;&amp;&amp;&#32;_R::_S_first_size&#32;==&#32;simd_size_v&lt;_Tp,&#32;_A0&gt;&#32;+&#32;simd_size_v&lt;_Tp,&#32;_A1&gt;)
849 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__concat(__x.template&#32;_M_at&lt;0&gt;(),&#32;__x.template&#32;_M_at&lt;1&gt;()),
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__optimize_simd_tuple(__x.second.second)};
851 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(_Abis)&#32;&gt;=&#32;2
852 &#32;&#32;&#32;&#32;&amp;&amp;&#32;_R::_S_first_size&#32;==&#32;(4&#32;*&#32;simd_size_v&lt;_Tp,&#32;_A0&gt;)
853 &#32;&#32;&#32;&#32;&amp;&amp;&#32;simd_size_v&lt;_Tp,&#32;_A0&gt;&#32;==&#32;__simd_tuple_element_t&lt;
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keyword">sizeof</emphasis>...(_Abis)&#32;&gt;=&#32;2&#32;?&#32;3&#32;:&#32;0),&#32;_Tup&gt;::<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>())
855 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>&#32;{
856 &#32;&#32;&#32;&#32;__concat(__concat(__x.template&#32;_M_at&lt;0&gt;(),&#32;__x.template&#32;_M_at&lt;1&gt;()),
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__concat(__x.template&#32;_M_at&lt;2&gt;(),&#32;__x.template&#32;_M_at&lt;3&gt;())),
858 &#32;&#32;&#32;&#32;__optimize_simd_tuple(__x.second.second.second.second)};
859 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
860 &#32;&#32;&#32;&#32;&#32;&#32;{
861 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(_R)&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(__x));
862 &#32;&#32;&#32;&#32;_R&#32;__r;
863 &#32;&#32;&#32;&#32;__builtin_memcpy(__r._M_as_charptr(),&#32;__x._M_as_charptr(),
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;*&#32;_R::_S_size());
865 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
866 &#32;&#32;&#32;&#32;&#32;&#32;}
867 &#32;&#32;}
868 
869 <emphasis role="comment">//&#32;__for_each(const&#32;_SimdTuple&#32;&amp;,&#32;Fun)&#32;{{{1</emphasis>
870 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
871 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
872 &#32;&#32;__for_each(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0&gt;&amp;&#32;__t,&#32;_Fp&amp;&amp;&#32;__fun)
873 &#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun)(__make_meta&lt;_Offset&gt;(__t),&#32;__t.first);&#32;}
874 
875 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1,
876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
877 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
878 &#32;&#32;__for_each(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_As...&gt;&amp;&#32;__t,&#32;_Fp&amp;&amp;&#32;__fun)
879 &#32;&#32;{
880 &#32;&#32;&#32;&#32;__fun(__make_meta&lt;_Offset&gt;(__t),&#32;__t.first);
881 &#32;&#32;&#32;&#32;__for_each&lt;_Offset&#32;+&#32;simd_size&lt;_Tp,&#32;_A0&gt;::value&gt;(__t.second,
882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun));
883 &#32;&#32;}
884 
885 <emphasis role="comment">//&#32;__for_each(_SimdTuple&#32;&amp;,&#32;Fun)&#32;{{{1</emphasis>
886 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
887 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
888 &#32;&#32;__for_each(_SimdTuple&lt;_Tp,&#32;_A0&gt;&amp;&#32;__t,&#32;_Fp&amp;&amp;&#32;__fun)
889 &#32;&#32;{&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun)(__make_meta&lt;_Offset&gt;(__t),&#32;__t.first);&#32;}
890 
891 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1,
892 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
893 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
894 &#32;&#32;__for_each(_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_As...&gt;&amp;&#32;__t,&#32;_Fp&amp;&amp;&#32;__fun)
895 &#32;&#32;{
896 &#32;&#32;&#32;&#32;__fun(__make_meta&lt;_Offset&gt;(__t),&#32;__t.first);
897 &#32;&#32;&#32;&#32;__for_each&lt;_Offset&#32;+&#32;simd_size&lt;_Tp,&#32;_A0&gt;::value&gt;(__t.second,
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun));
899 &#32;&#32;}
900 
901 <emphasis role="comment">//&#32;__for_each(_SimdTuple&#32;&amp;,&#32;const&#32;_SimdTuple&#32;&amp;,&#32;Fun)&#32;{{{1</emphasis>
902 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
903 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
904 &#32;&#32;__for_each(_SimdTuple&lt;_Tp,&#32;_A0&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0&gt;&amp;&#32;__b,
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fp&amp;&amp;&#32;__fun)
906 &#32;&#32;{
907 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun)(__make_meta&lt;_Offset&gt;(__a),&#32;__a.first,&#32;__b.first);
908 &#32;&#32;}
909 
910 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1,
911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
912 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
913 &#32;&#32;__for_each(_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_As...&gt;&amp;&#32;__a,
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_As...&gt;&amp;&#32;__b,&#32;_Fp&amp;&amp;&#32;__fun)
915 &#32;&#32;{
916 &#32;&#32;&#32;&#32;__fun(__make_meta&lt;_Offset&gt;(__a),&#32;__a.first,&#32;__b.first);
917 &#32;&#32;&#32;&#32;__for_each&lt;_Offset&#32;+&#32;simd_size&lt;_Tp,&#32;_A0&gt;::value&gt;(__a.second,&#32;__b.second,
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun));
919 &#32;&#32;}
920 
921 <emphasis role="comment">//&#32;__for_each(const&#32;_SimdTuple&#32;&amp;,&#32;const&#32;_SimdTuple&#32;&amp;,&#32;Fun)&#32;{{{1</emphasis>
922 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
923 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
924 &#32;&#32;__for_each(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0&gt;&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0&gt;&amp;&#32;__b,
925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Fp&amp;&amp;&#32;__fun)
926 &#32;&#32;{
927 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun)(__make_meta&lt;_Offset&gt;(__a),&#32;__a.first,&#32;__b.first);
928 &#32;&#32;}
929 
930 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">size_t</emphasis>&#32;_Offset&#32;=&#32;0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A1,
931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fp&gt;
932 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
933 &#32;&#32;__for_each(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_As...&gt;&amp;&#32;__a,
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_A1,&#32;_As...&gt;&amp;&#32;__b,&#32;_Fp&amp;&amp;&#32;__fun)
935 &#32;&#32;{
936 &#32;&#32;&#32;&#32;__fun(__make_meta&lt;_Offset&gt;(__a),&#32;__a.first,&#32;__b.first);
937 &#32;&#32;&#32;&#32;__for_each&lt;_Offset&#32;+&#32;simd_size&lt;_Tp,&#32;_A0&gt;::value&gt;(__a.second,&#32;__b.second,
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Fp&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__fun));
939 &#32;&#32;}
940 
941 <emphasis role="comment">//&#32;}}}1</emphasis>
942 <emphasis role="comment">//&#32;__extract_part(_SimdTuple)&#32;{{{</emphasis>
943 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Index,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Total,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Combine,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_A0,
944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
945 &#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">auto</emphasis>&#32;<emphasis role="comment">//&#32;__vector_type_t&#32;or&#32;_SimdTuple</emphasis>
946 &#32;&#32;__extract_part(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;&amp;&#32;__x)
947 &#32;&#32;{
948 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;worst&#32;cases:</emphasis>
949 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(a)&#32;4,&#32;4,&#32;4&#32;=&gt;&#32;3,&#32;3,&#32;3,&#32;3&#32;(_Total&#32;=&#32;4)</emphasis>
950 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(b)&#32;2,&#32;2,&#32;2&#32;=&gt;&#32;3,&#32;3&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_Total&#32;=&#32;2)</emphasis>
951 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(c)&#32;4,&#32;2&#32;=&gt;&#32;2,&#32;2,&#32;2&#32;&#32;&#32;&#32;&#32;&#32;&#32;(_Total&#32;=&#32;3)</emphasis>
952 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tuple&#32;=&#32;_SimdTuple&lt;_Tp,&#32;_A0,&#32;_As...&gt;;
953 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Index&#32;+&#32;_Combine&#32;&lt;=&#32;_Total&#32;&amp;&amp;&#32;_Index&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;_Total&#32;&gt;=&#32;1);
954 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_Tuple::_S_size();
955 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(_Np&#32;&gt;=&#32;_Total&#32;&amp;&amp;&#32;_Np&#32;%&#32;_Total&#32;==&#32;0);
956 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__values_per_part&#32;=&#32;_Np&#32;/&#32;_Total;
957 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__values_to_skip
958 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Index&#32;*&#32;__values_per_part;
959 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__return_size&#32;=&#32;__values_per_part&#32;*&#32;_Combine;
960 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RetAbi&#32;=&#32;simd_abi::deduce_t&lt;_Tp,&#32;__return_size&gt;;
961 
962 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;handle&#32;(optimize)&#32;the&#32;simple&#32;cases</emphasis>
963 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Index&#32;==&#32;0&#32;&amp;&amp;&#32;_Tuple::_S_first_size&#32;==&#32;__return_size)
964 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.first._M_data;
965 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Index&#32;==&#32;0&#32;&amp;&amp;&#32;_Total&#32;==&#32;_Combine)
966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
967 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Index&#32;==&#32;0&#32;&amp;&amp;&#32;_Tuple::_S_first_size&#32;&gt;=&#32;__return_size)
968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__intrin_bitcast&lt;__vector_type_t&lt;_Tp,&#32;__return_size&gt;&gt;(
969 &#32;&#32;&#32;&#32;__as_vector(__x.first));
970 
971 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recurse&#32;to&#32;skip&#32;unused&#32;data&#32;members&#32;at&#32;the&#32;beginning&#32;of&#32;_SimdTuple</emphasis>
972 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__values_to_skip&#32;&gt;=&#32;_Tuple::_S_first_size)
973 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;recurse</emphasis>
974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Tuple::_S_first_size&#32;%&#32;__values_per_part&#32;==&#32;0)
975 &#32;&#32;&#32;&#32;&#32;&#32;{
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__parts_in_first
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Tuple::_S_first_size&#32;/&#32;__values_per_part;
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract_part&lt;_Index&#32;-&#32;__parts_in_first,
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Total&#32;-&#32;__parts_in_first,&#32;_Combine&gt;(
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.second);
981 &#32;&#32;&#32;&#32;&#32;&#32;}
982 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract_part&lt;__values_to_skip&#32;-&#32;_Tuple::_S_first_size,
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Np&#32;-&#32;_Tuple::_S_first_size,&#32;__return_size&gt;(
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.second);
986 &#32;&#32;&#32;&#32;&#32;&#32;}
987 
988 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;extract&#32;from&#32;multiple&#32;_SimdTuple&#32;data&#32;members</emphasis>
989 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__return_size&#32;&gt;&#32;_Tuple::_S_first_size&#32;-&#32;__values_to_skip)
990 &#32;&#32;&#32;&#32;&#32;&#32;{
991 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_SIMD_USE_ALIASING_LOADS</emphasis>
992 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__may_alias&lt;_Tp&gt;*&#32;<emphasis role="keyword">const</emphasis>&#32;element_ptr
993 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__may_alias&lt;_Tp&gt;*<emphasis role="keyword">&gt;</emphasis>(&amp;__x)&#32;+&#32;__values_to_skip;
994 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__as_vector(simd&lt;_Tp,&#32;_RetAbi&gt;(element_ptr,&#32;element_aligned));
995 <emphasis role="preprocessor">#else</emphasis>
996 &#32;&#32;&#32;&#32;[[maybe_unused]]&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__offset&#32;=&#32;__values_to_skip;
997 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__as_vector(simd&lt;_Tp,&#32;_RetAbi&gt;([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SizeConstant&lt;__i&#32;+&#32;__offset&gt;&#32;__k;
999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x[__k];
1000 &#32;&#32;&#32;&#32;}));
1001 <emphasis role="preprocessor">#endif</emphasis>
1002 &#32;&#32;&#32;&#32;&#32;&#32;}
1003 
1004 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;all&#32;of&#32;the&#32;return&#32;values&#32;are&#32;in&#32;__x.first</emphasis>
1005 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Tuple::_S_first_size&#32;%&#32;__values_per_part&#32;==&#32;0)
1006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract_part&lt;_Index,&#32;_Tuple::_S_first_size&#32;/&#32;__values_per_part,
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Combine&gt;(__x.first);
1008 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__extract_part&lt;__values_to_skip,&#32;_Tuple::_S_first_size,
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Combine&#32;*&#32;__values_per_part&gt;(__x.first);
1011 &#32;&#32;}
1012 
1013 <emphasis role="comment">//&#32;}}}</emphasis>
1014 <emphasis role="comment">//&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;{{{</emphasis>
1015 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tuple,
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Next&#32;=&#32;simd&lt;_Tp,&#32;_AllNativeAbis::_BestAbi&lt;_Tp,&#32;_Np&gt;&gt;,
1017 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Remain&#32;=&#32;_Np&#32;-&#32;int(_Next::size())&gt;
1018 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fixed_size_storage_builder;
1019 
1020 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
1021 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fixed_size_storage
1022 &#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__fixed_size_storage_builder&lt;_Tp,&#32;_Np,&#32;_SimdTuple&lt;_Tp&gt;&gt;&#32;{};
1023 
1024 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Next&gt;
1025 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fixed_size_storage_builder&lt;_Tp,&#32;_Np,&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;,&#32;_Next,
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0&gt;
1027 &#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_SimdTuple&lt;_Tp,&#32;_As...,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Next::abi_type&gt;;&#32;};
1028 
1029 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Next,&#32;<emphasis role="keywordtype">int</emphasis>&#32;_Remain&gt;
1030 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__fixed_size_storage_builder&lt;_Tp,&#32;_Np,&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;,&#32;_Next,
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Remain&gt;
1032 &#32;&#32;{
1033 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__fixed_size_storage_builder&lt;
1034 &#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;_Remain,&#32;_SimdTuple&lt;_Tp,&#32;_As...,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Next::abi_type&gt;&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1035 &#32;&#32;};
1036 
1037 <emphasis role="comment">//&#32;}}}</emphasis>
1038 <emphasis role="comment">//&#32;__autocvt_to_simd&#32;{{{</emphasis>
1039 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_arithmetic_v&lt;__remove_cvref_t&lt;_Tp&gt;&gt;&gt;
1040 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__autocvt_to_simd
1041 &#32;&#32;{
1042 &#32;&#32;&#32;&#32;_Tp&#32;_M_data;
1043 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TT&#32;=&#32;__remove_cvref_t&lt;_Tp&gt;;
1044 
1045 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1046 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_TT()
1047 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
1048 
1049 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1050 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_TT&amp;()
1051 &#32;&#32;&#32;&#32;{
1052 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_lvalue_reference&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_const&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1054 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;
1055 &#32;&#32;&#32;&#32;}
1056 
1057 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1058 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;_TT*()
1059 &#32;&#32;&#32;&#32;{
1060 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_lvalue_reference&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_const&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_M_data;
1063 &#32;&#32;&#32;&#32;}
1064 
1065 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1066 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__autocvt_to_simd(_Tp&#32;dd)&#32;:&#32;_M_data(dd)&#32;{}
1067 
1068 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
1069 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1070 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;simd&lt;typename&#32;_TT::value_type,&#32;_Abi&gt;()
1071 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;{__private_init,&#32;_M_data};&#32;}
1072 
1073 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
1074 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1075 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;simd&lt;typename&#32;_TT::value_type,&#32;_Abi&gt;&amp;()
1076 &#32;&#32;&#32;&#32;&#32;&#32;{
1077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">reinterpret_cast&lt;</emphasis>simd&lt;typename&#32;_TT::value_type,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(
1078 &#32;&#32;&#32;&#32;&#32;&#32;&amp;_M_data);
1079 &#32;&#32;&#32;&#32;&#32;&#32;}
1080 
1081 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Abi&gt;
1082 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1083 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;simd&lt;typename&#32;_TT::value_type,&#32;_Abi&gt;*()
1084 &#32;&#32;&#32;&#32;&#32;&#32;{
1085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>simd&lt;typename&#32;_TT::value_type,&#32;_Abi&gt;*<emphasis role="keyword">&gt;</emphasis>(
1086 &#32;&#32;&#32;&#32;&#32;&#32;&amp;_M_data);
1087 &#32;&#32;&#32;&#32;&#32;&#32;}
1088 &#32;&#32;};
1089 
1090 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1091 &#32;&#32;__autocvt_to_simd(_Tp&#32;&amp;&amp;)&#32;-&gt;&#32;__autocvt_to_simd&lt;_Tp&gt;;
1092 
1093 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1094 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__autocvt_to_simd&lt;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
1095 &#32;&#32;{
1096 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TT&#32;=&#32;__remove_cvref_t&lt;_Tp&gt;;
1097 &#32;&#32;&#32;&#32;_Tp&#32;_M_data;
1098 &#32;&#32;&#32;&#32;fixed_size_simd&lt;_TT,&#32;1&gt;&#32;_M_fd;
1099 
1100 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1101 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__autocvt_to_simd(_Tp&#32;dd)&#32;:&#32;_M_data(dd),&#32;_M_fd(_M_data)&#32;{}
1102 
1103 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1104 &#32;&#32;&#32;&#32;~__autocvt_to_simd()
1105 &#32;&#32;&#32;&#32;{&#32;_M_data&#32;=&#32;__data(_M_fd).first;&#32;}
1106 
1107 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1108 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;fixed_size_simd&lt;_TT,&#32;1&gt;()
1109 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_fd;&#32;}
1110 
1111 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1112 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;fixed_size_simd&lt;_TT,&#32;1&gt;&#32;&amp;()
1113 &#32;&#32;&#32;&#32;{
1114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_lvalue_reference&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_const&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_fd;
1117 &#32;&#32;&#32;&#32;}
1118 
1119 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC
1120 &#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;fixed_size_simd&lt;_TT,&#32;1&gt;&#32;*()
1121 &#32;&#32;&#32;&#32;{
1122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_lvalue_reference&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1123 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_const&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_M_fd;
1125 &#32;&#32;&#32;&#32;}
1126 &#32;&#32;};
1127 
1128 <emphasis role="comment">//&#32;}}}</emphasis>
1129 
1130 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplFixedSize;
1131 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplFixedSize;
1132 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;__detail::__odr_helper&gt;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplFixedSize;
1133 <emphasis role="comment">//&#32;simd_abi::_Fixed&#32;{{{</emphasis>
1134 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np&gt;
1135 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>simd_abi::_Fixed
1136 &#32;&#32;{
1137 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_size&#32;=&#32;_Np;
1138 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_full_size&#32;=&#32;_Np;
1139 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;validity&#32;traits&#32;{{{</emphasis>
1140 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IsValidAbiTag&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__bool_constant&lt;(_Np&#32;&gt;&#32;0)&gt;&#32;{};
1141 
1142 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_IsValidSizeFor
1144 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;__bool_constant&lt;(_Np&#32;&lt;=&#32;simd_abi::max_fixed_size&lt;_Tp&gt;)&gt;&#32;{};
1145 
1146 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1147 &#32;&#32;&#32;&#32;&#32;&#32;struct&#32;_IsValid&#32;:&#32;conjunction&lt;_IsValidAbiTag,&#32;__is_vectorizable&lt;_Tp&gt;,
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_IsValidSizeFor&lt;_Tp&gt;&gt;&#32;{};
1149 
1150 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1151 &#32;&#32;&#32;&#32;&#32;&#32;static&#32;constexpr&#32;bool&#32;_S_is_valid_v&#32;=&#32;_IsValid&lt;_Tp&gt;::value;
1152 
1153 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1154 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked&#32;{{{</emphasis>
1155 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;static&#32;constexpr&#32;_SanitizedBitMask&lt;_Np&gt;
1156 &#32;&#32;&#32;&#32;_S_masked(_BitMask&lt;_Np&gt;&#32;__x)
1157 &#32;&#32;&#32;&#32;{&#32;return&#32;__x._M_sanitized();&#32;}
1158 
1159 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;static&#32;constexpr&#32;_SanitizedBitMask&lt;_Np&gt;
1160 &#32;&#32;&#32;&#32;_S_masked(_SanitizedBitMask&lt;_Np&gt;&#32;__x)
1161 &#32;&#32;&#32;&#32;{&#32;return&#32;__x;&#32;}
1162 
1163 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1164 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_*Impl&#32;{{{</emphasis>
1165 &#32;&#32;&#32;&#32;using&#32;_CommonImpl&#32;=&#32;_CommonImplFixedSize;
1166 &#32;&#32;&#32;&#32;using&#32;_SimdImpl&#32;=&#32;_SimdImplFixedSize&lt;_Np&gt;;
1167 &#32;&#32;&#32;&#32;using&#32;_MaskImpl&#32;=&#32;_MaskImplFixedSize&lt;_Np&gt;;
1168 
1169 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1170 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__traits&#32;{{{</emphasis>
1171 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;bool&#32;=&#32;_S_is_valid_v&lt;_Tp&gt;&gt;
1172 &#32;&#32;&#32;&#32;&#32;&#32;struct&#32;__traits&#32;:&#32;_InvalidTraits&#32;{};
1173 
1174 &#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp&gt;
1175 &#32;&#32;&#32;&#32;&#32;&#32;struct&#32;__traits&lt;_Tp,&#32;true&gt;
1176 &#32;&#32;&#32;&#32;&#32;&#32;{
1177 &#32;&#32;&#32;&#32;using&#32;_IsValid&#32;=&#32;true_type;
1178 &#32;&#32;&#32;&#32;using&#32;_SimdImpl&#32;=&#32;_SimdImplFixedSize&lt;_Np&gt;;
1179 &#32;&#32;&#32;&#32;using&#32;_MaskImpl&#32;=&#32;_MaskImplFixedSize&lt;_Np&gt;;
1180 
1181 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;simd&#32;and&#32;simd_mask&#32;member&#32;types&#32;{{{</emphasis>
1182 &#32;&#32;&#32;&#32;using&#32;_SimdMember&#32;=&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;;
1183 &#32;&#32;&#32;&#32;using&#32;_MaskMember&#32;=&#32;_SanitizedBitMask&lt;_Np&gt;;
1184 
1185 &#32;&#32;&#32;&#32;static&#32;constexpr&#32;size_t&#32;_S_simd_align
1186 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;std::__bit_ceil(_Np&#32;*&#32;sizeof(_Tp));
1187 
1188 &#32;&#32;&#32;&#32;static&#32;constexpr&#32;size_t&#32;_S_mask_align&#32;=&#32;alignof(_MaskMember);
1189 
1190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1191 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_SimdBase&#32;/&#32;base&#32;class&#32;for&#32;simd,&#32;providing&#32;extra&#32;conversions&#32;{{{</emphasis>
1192 &#32;&#32;&#32;&#32;struct&#32;_SimdBase
1193 &#32;&#32;&#32;&#32;{
1194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;following&#32;ensures,&#32;function&#32;arguments&#32;are&#32;passed&#32;via&#32;the&#32;stack.</emphasis>
1195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;important&#32;for&#32;ABI&#32;compatibility&#32;across&#32;TU&#32;boundaries</emphasis>
1196 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1197 &#32;&#32;&#32;&#32;&#32;&#32;_SimdBase(const&#32;_SimdBase&amp;)&#32;{}
1198 &#32;&#32;&#32;&#32;&#32;&#32;_SimdBase()&#32;=&#32;default;
1199 
1200 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1201 &#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;operator&#32;const&#32;_SimdMember&#32;&amp;()&#32;const
1202 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;return&#32;static_cast&lt;const&#32;simd&lt;_Tp,&#32;_Fixed&gt;*&gt;(this)-&gt;_M_data;&#32;}
1203 
1204 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1205 &#32;&#32;&#32;&#32;&#32;&#32;explicit&#32;operator&#32;<link linkend="_classarray">array</link>&lt;_Tp,&#32;_Np&gt;()&#32;const
1206 &#32;&#32;&#32;&#32;&#32;&#32;{
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classarray">array&lt;_Tp, _Np&gt;</link>&#32;__r;
1208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_SimdMember&#32;can&#32;be&#32;larger&#32;because&#32;of&#32;higher&#32;alignment</emphasis>
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(<emphasis role="keyword">sizeof</emphasis>(__r)&#32;&lt;=&#32;<emphasis role="keyword">sizeof</emphasis>(_SimdMember),&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>);
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__r.data(),&#32;&amp;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>_SimdMember&amp;<emphasis role="keyword">&gt;</emphasis>(*<emphasis role="keyword">this</emphasis>),
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(__r));
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1213 &#32;&#32;&#32;&#32;&#32;&#32;}
1214 &#32;&#32;&#32;&#32;};
1215 
1216 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1217 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_MaskBase&#32;{{{</emphasis>
1218 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;empty.&#32;The&#32;bitset&#32;interface&#32;suffices</emphasis>
1219 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskBase&#32;{};
1220 
1221 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1222 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_SimdCastType&#32;{{{</emphasis>
1223 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdCastType
1224 &#32;&#32;&#32;&#32;{
1225 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1226 &#32;&#32;&#32;&#32;&#32;&#32;_SimdCastType(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classarray">array&lt;_Tp, _Np&gt;</link>&amp;);
1227 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1228 &#32;&#32;&#32;&#32;&#32;&#32;_SimdCastType(<emphasis role="keyword">const</emphasis>&#32;_SimdMember&amp;&#32;dd)&#32;:&#32;_M_data(dd)&#32;{}
1229 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_ALWAYS_INLINE
1230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdMember&#32;&amp;()&#32;<emphasis role="keyword">const</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_data;&#32;}
1231 
1232 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdMember&amp;&#32;_M_data;
1234 &#32;&#32;&#32;&#32;};
1235 
1236 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1237 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_MaskCastType&#32;{{{</emphasis>
1238 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_MaskCastType
1239 &#32;&#32;&#32;&#32;{
1240 &#32;&#32;&#32;&#32;&#32;&#32;_MaskCastType()&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
1241 &#32;&#32;&#32;&#32;};
1242 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1243 &#32;&#32;&#32;&#32;&#32;&#32;};
1244 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1245 &#32;&#32;};
1246 
1247 <emphasis role="comment">//&#32;}}}</emphasis>
1248 <emphasis role="comment">//&#32;_CommonImplFixedSize&#32;{{{</emphasis>
1249 <emphasis role="keyword">struct&#32;</emphasis>_CommonImplFixedSize
1250 {
1251 &#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{</emphasis>
1252 &#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1253 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1254 &#32;&#32;&#32;&#32;_S_store(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x,&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__addr)
1255 &#32;&#32;&#32;&#32;{
1256 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Np&#32;=&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;::_S_size();
1257 &#32;&#32;&#32;&#32;&#32;&#32;__builtin_memcpy(__addr,&#32;&amp;__x,&#32;_Np&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp));
1258 &#32;&#32;&#32;&#32;}
1259 
1260 &#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1261 };
1262 
1263 <emphasis role="comment">//&#32;}}}</emphasis>
1264 <emphasis role="comment">//&#32;_SimdImplFixedSize&#32;{{{1</emphasis>
1265 <emphasis role="comment">//&#32;fixed_size&#32;should&#32;not&#32;inherit&#32;from&#32;_SimdMathFallback&#32;in&#32;order&#32;for</emphasis>
1266 <emphasis role="comment">//&#32;specializations&#32;in&#32;the&#32;used&#32;_SimdTuple&#32;Abis&#32;to&#32;get&#32;used</emphasis>
1267 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1268 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_SimdImplFixedSize
1269 &#32;&#32;{
1270 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;member&#32;types&#32;{{{2</emphasis>
1271 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;_SanitizedBitMask&lt;_Np&gt;;
1272 
1273 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SimdMember&#32;=&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;;
1275 
1276 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_S_tuple_size&#32;=&#32;_SimdMember&lt;_Tp&gt;::_S_tuple_size;
1278 
1279 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Simd&#32;=&#32;simd&lt;_Tp,&#32;simd_abi::fixed_size&lt;_Np&gt;&gt;;
1281 
1282 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TypeTag&#32;=&#32;_Tp*;
1284 
1285 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;broadcast&#32;{{{2</emphasis>
1286 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1287 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdMember&lt;_Tp&gt;&#32;_S_broadcast(_Tp&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1288 &#32;&#32;&#32;&#32;&#32;&#32;{
1289 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdMember&lt;_Tp&gt;::_S_generate([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1290 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__meta._S_broadcast(__x);
1291 &#32;&#32;&#32;&#32;});
1292 &#32;&#32;&#32;&#32;&#32;&#32;}
1293 
1294 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_generator&#32;{{{2</emphasis>
1295 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1296 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdMember&lt;_Tp&gt;&#32;_S_generator(_Fp&amp;&amp;&#32;__gen,
1297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TypeTag&lt;_Tp&gt;)
1298 &#32;&#32;&#32;&#32;&#32;&#32;{
1299 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdMember&lt;_Tp&gt;::_S_generate([&amp;__gen](<emphasis role="keyword">auto</emphasis>&#32;__meta)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__meta._S_generator(
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i&#32;&lt;&#32;_Np&#32;?&#32;__gen(_SizeConstant&lt;__meta._S_offset&#32;+&#32;__i&gt;())
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;0;
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TypeTag&lt;_Tp&gt;());
1306 &#32;&#32;&#32;&#32;});
1307 &#32;&#32;&#32;&#32;&#32;&#32;}
1308 
1309 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_load&#32;{{{2</emphasis>
1310 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1311 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdMember&lt;_Tp&gt;&#32;_S_load(<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__mem,
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TypeTag&lt;_Tp&gt;)&#32;<emphasis role="keyword">noexcept</emphasis>
1313 &#32;&#32;&#32;&#32;&#32;&#32;{
1314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_SimdMember&lt;_Tp&gt;::_S_generate([&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta)&#32;{
1315 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__meta._S_load(&amp;__mem[__meta._S_offset],&#32;_TypeTag&lt;_Tp&gt;());
1316 &#32;&#32;&#32;&#32;});
1317 &#32;&#32;&#32;&#32;&#32;&#32;}
1318 
1319 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_load&#32;{{{2</emphasis>
1320 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1322 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_load(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__old,
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bits,&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
1324 &#32;&#32;&#32;&#32;&#32;&#32;{
1325 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__merge&#32;=&#32;__old;
1326 &#32;&#32;&#32;&#32;__for_each(__merge,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__native)&#32;{
1327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__meta._S_submask(__bits).any())
1328 #pragma&#32;GCC&#32;diagnostic&#32;push
1329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__mem&#32;+&#32;__mem._S_offset&#32;could&#32;be&#32;UB&#32;([expr.add]/4.3,&#32;but&#32;it&#32;punts</emphasis>
1330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;responsibility&#32;for&#32;avoiding&#32;UB&#32;to&#32;the&#32;caller&#32;of&#32;the&#32;masked&#32;load</emphasis>
1331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;via&#32;the&#32;mask.&#32;Consequently,&#32;the&#32;compiler&#32;may&#32;assume&#32;this&#32;branch&#32;is</emphasis>
1332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unreachable,&#32;if&#32;the&#32;pointer&#32;arithmetic&#32;is&#32;UB.</emphasis>
1333 #pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;<emphasis role="stringliteral">&quot;-Warray-bounds&quot;</emphasis>
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__meta._S_masked_load(__native,&#32;__meta._S_make_mask(__bits),
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem&#32;+&#32;__meta._S_offset);
1337 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1338 &#32;&#32;&#32;&#32;});
1339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
1340 &#32;&#32;&#32;&#32;&#32;&#32;}
1341 
1342 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{2</emphasis>
1343 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_store(<emphasis role="keyword">const</emphasis>&#32;_SimdMember&lt;_Tp&gt;&amp;&#32;__v,&#32;_Up*&#32;__mem,
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_TypeTag&lt;_Tp&gt;)&#32;<emphasis role="keyword">noexcept</emphasis>
1346 &#32;&#32;&#32;&#32;&#32;&#32;{
1347 &#32;&#32;&#32;&#32;__for_each(__v,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&#32;__native)&#32;{
1348 &#32;&#32;&#32;&#32;&#32;&#32;__meta._S_store(__native,&#32;&amp;__mem[__meta._S_offset],&#32;_TypeTag&lt;_Tp&gt;());
1349 &#32;&#32;&#32;&#32;});
1350 &#32;&#32;&#32;&#32;&#32;&#32;}
1351 
1352 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store&#32;{{{2</emphasis>
1353 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1354 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_masked_store(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__v,
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Up*&#32;__mem,
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bits)&#32;<emphasis role="keyword">noexcept</emphasis>
1357 &#32;&#32;&#32;&#32;&#32;&#32;{
1358 &#32;&#32;&#32;&#32;__for_each(__v,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&#32;__native)&#32;{
1359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__meta._S_submask(__bits).any())
1360 #pragma&#32;GCC&#32;diagnostic&#32;push
1361 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__mem&#32;+&#32;__mem._S_offset&#32;could&#32;be&#32;UB&#32;([expr.add]/4.3,&#32;but&#32;it&#32;punts</emphasis>
1362 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;responsibility&#32;for&#32;avoiding&#32;UB&#32;to&#32;the&#32;caller&#32;of&#32;the&#32;masked</emphasis>
1363 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;store&#32;via&#32;the&#32;mask.&#32;Consequently,&#32;the&#32;compiler&#32;may&#32;assume&#32;this</emphasis>
1364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;branch&#32;is&#32;unreachable,&#32;if&#32;the&#32;pointer&#32;arithmetic&#32;is&#32;UB.</emphasis>
1365 #pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;<emphasis role="stringliteral">&quot;-Warray-bounds&quot;</emphasis>
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta._S_masked_store(__native,&#32;__mem&#32;+&#32;__meta._S_offset,
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta._S_make_mask(__bits));
1368 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1369 &#32;&#32;&#32;&#32;});
1370 &#32;&#32;&#32;&#32;&#32;&#32;}
1371 
1372 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;negation&#32;{{{2</emphasis>
1373 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_MaskMember
1375 &#32;&#32;&#32;&#32;&#32;&#32;_S_negate(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1376 &#32;&#32;&#32;&#32;&#32;&#32;{
1377 &#32;&#32;&#32;&#32;_MaskMember&#32;__bits&#32;=&#32;0;
1378 &#32;&#32;&#32;&#32;__for_each(
1379 &#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;[&amp;__bits](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&#32;__native)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bits
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|=&#32;__meta._S_mask_to_shifted_ullong(__meta._S_negate(__native));
1382 &#32;&#32;&#32;&#32;&#32;&#32;});
1383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bits;
1384 &#32;&#32;&#32;&#32;&#32;&#32;}
1385 
1386 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reductions&#32;{{{2</emphasis>
1387 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_BinaryOperation&gt;
1388 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_Tp&#32;_S_reduce(<emphasis role="keyword">const</emphasis>&#32;_Simd&lt;_Tp&gt;&amp;&#32;__x,
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_BinaryOperation&amp;&#32;__binary_op)
1390 &#32;&#32;&#32;&#32;&#32;&#32;{
1391 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tup&#32;=&#32;_SimdMember&lt;_Tp&gt;;
1392 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tup&amp;&#32;__tup&#32;=&#32;__data(__x);
1393 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Tup::_S_tuple_size&#32;==&#32;1)
1394 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Tup::_FirstAbi::_SimdImpl::_S_reduce(
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tup.template&#32;_M_simd_at&lt;0&gt;(),&#32;__binary_op);
1396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Tup::_S_tuple_size&#32;==&#32;2&#32;&amp;&amp;&#32;_Tup::_S_size()&#32;&gt;&#32;2
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Tup::_SecondType::_S_size()&#32;==&#32;1)
1398 &#32;&#32;&#32;&#32;&#32;&#32;{
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op(simd&lt;_Tp,&#32;simd_abi::scalar&gt;(
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__tup.template&#32;_M_simd_at&lt;0&gt;(),
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__binary_op)),
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__tup.template&#32;_M_simd_at&lt;1&gt;())[0];
1403 &#32;&#32;&#32;&#32;&#32;&#32;}
1404 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Tup::_S_tuple_size&#32;==&#32;2&#32;&amp;&amp;&#32;_Tup::_S_size()&#32;&gt;&#32;4
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_Tup::_SecondType::_S_size()&#32;==&#32;2)
1406 &#32;&#32;&#32;&#32;&#32;&#32;{
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op(
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;(
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__tup.template&#32;_M_simd_at&lt;0&gt;(),&#32;__binary_op)),
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;simd&lt;_Tp,&#32;simd_abi::scalar&gt;(
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__tup.template&#32;_M_simd_at&lt;1&gt;(),&#32;__binary_op)))[0];
1412 &#32;&#32;&#32;&#32;&#32;&#32;}
1413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1414 &#32;&#32;&#32;&#32;&#32;&#32;{
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__x2&#32;=&#32;__call_with_n_evaluations&lt;
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__div_roundup(_Tup::_S_tuple_size,&#32;2)&gt;(
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__first_simd,&#32;<emphasis role="keyword">auto</emphasis>...&#32;__remaining)&#32;{
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>...(__remaining)&#32;==&#32;0)
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__first_simd;
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tup2
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_SimdTuple&lt;_Tp,
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(__first_simd)::abi_type,
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(__remaining)::abi_type...&gt;;
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fixed_size_simd&lt;_Tp,&#32;_Tup2::_S_size()&gt;(
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__private_init,
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__make_simd_tuple(__first_simd,&#32;__remaining...));
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__left&#32;=&#32;__tup.template&#32;_M_simd_at&lt;2&#32;*&#32;__i&gt;();
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(2&#32;*&#32;__i&#32;+&#32;1&#32;==&#32;_Tup::_S_tuple_size)
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__left;
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__right&#32;=&#32;__tup.template&#32;_M_simd_at&lt;2&#32;*&#32;__i&#32;+&#32;1&gt;();
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_LT&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__left);
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_RT&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__right);
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_LT::size()&#32;==&#32;_RT::size())
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__binary_op(__left,&#32;__right);
1442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_USE_CONSTEXPR_API
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_LT::mask_type&#32;__k(
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__private_init,
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__j)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__j&#32;&lt;&#32;_RT::size();&#32;});
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_LT&#32;__ext_right&#32;=&#32;__left;
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__k,&#32;__ext_right)
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;__proposed::resizing_simd_cast&lt;_LT&gt;(__right);
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;where(__k,&#32;__left)&#32;=&#32;__binary_op(__left,&#32;__ext_right);
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__left;
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
1456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespacestd_1a8b8d511ebd97a4d4753e9bf015f7d44d">reduce</link>(__x2,&#32;__binary_op);
1457 &#32;&#32;&#32;&#32;&#32;&#32;}
1458 &#32;&#32;&#32;&#32;&#32;&#32;}
1459 
1460 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_min,&#32;_S_max&#32;{{{2</emphasis>
1461 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1463 &#32;&#32;&#32;&#32;&#32;&#32;_S_min(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__a,
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__b)
1465 &#32;&#32;&#32;&#32;&#32;&#32;{
1466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_apply_per_chunk(
1467 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">auto</emphasis>&#32;__aa,&#32;<emphasis role="keyword">auto</emphasis>&#32;__bb)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl._S_min(__aa,&#32;__bb);
1469 &#32;&#32;&#32;&#32;&#32;&#32;},
1470 &#32;&#32;&#32;&#32;&#32;&#32;__b);
1471 &#32;&#32;&#32;&#32;&#32;&#32;}
1472 
1473 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1474 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1475 &#32;&#32;&#32;&#32;&#32;&#32;_S_max(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__a,
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__b)
1477 &#32;&#32;&#32;&#32;&#32;&#32;{
1478 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_apply_per_chunk(
1479 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">auto</emphasis>&#32;__aa,&#32;<emphasis role="keyword">auto</emphasis>&#32;__bb)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl._S_max(__aa,&#32;__bb);
1481 &#32;&#32;&#32;&#32;&#32;&#32;},
1482 &#32;&#32;&#32;&#32;&#32;&#32;__b);
1483 &#32;&#32;&#32;&#32;&#32;&#32;}
1484 
1485 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_complement&#32;{{{2</emphasis>
1486 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1487 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1488 &#32;&#32;&#32;&#32;&#32;&#32;_S_complement(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1489 &#32;&#32;&#32;&#32;&#32;&#32;{
1490 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_apply_per_chunk([](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">auto</emphasis>&#32;__xx)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1491 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl._S_complement(__xx);
1492 &#32;&#32;&#32;&#32;});
1493 &#32;&#32;&#32;&#32;&#32;&#32;}
1494 
1495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_unary_minus&#32;{{{2</emphasis>
1496 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1498 &#32;&#32;&#32;&#32;&#32;&#32;_S_unary_minus(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1499 &#32;&#32;&#32;&#32;&#32;&#32;{
1500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_apply_per_chunk([](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">auto</emphasis>&#32;__xx)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl._S_unary_minus(__xx);
1502 &#32;&#32;&#32;&#32;});
1503 &#32;&#32;&#32;&#32;&#32;&#32;}
1504 
1505 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;arithmetic&#32;operators&#32;{{{2</emphasis>
1506 
1507 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_FIXED_OP(name_,&#32;op_)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1508 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;typename...&#32;_As&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1509 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;static&#32;inline&#32;constexpr&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&#32;name_(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1510 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;const&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x,&#32;const&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__y)\</emphasis>
1511 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1512 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;__x._M_apply_per_chunk(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1513 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;[](auto&#32;__impl,&#32;auto&#32;__xx,&#32;auto&#32;__yy)&#32;constexpr&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1514 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__impl.name_(__xx,&#32;__yy);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1515 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1516 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__y);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1517 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1518 
1519 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_plus,&#32;+)
1520 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_minus,&#32;-)
1521 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_multiplies,&#32;*)
1522 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_divides,&#32;/)
1523 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_modulus,&#32;%)
1524 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_bit_and,&#32;&amp;)
1525 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_bit_or,&#32;|)
1526 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_bit_xor,&#32;^)
1527 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_bit_shift_left,&#32;&lt;&lt;)
1528 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_FIXED_OP(_S_bit_shift_right,&#32;&gt;&gt;)
1529 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_FIXED_OP</emphasis>
1530 
1531 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1533 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_left(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
1534 &#32;&#32;&#32;&#32;&#32;&#32;{
1535 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_apply_per_chunk([__y](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">auto</emphasis>&#32;__xx)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1536 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl._S_bit_shift_left(__xx,&#32;__y);
1537 &#32;&#32;&#32;&#32;});
1538 &#32;&#32;&#32;&#32;&#32;&#32;}
1539 
1540 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1541 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1542 &#32;&#32;&#32;&#32;&#32;&#32;_S_bit_shift_right(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__y)
1543 &#32;&#32;&#32;&#32;&#32;&#32;{
1544 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_apply_per_chunk([__y](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">auto</emphasis>&#32;__xx)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1545 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl._S_bit_shift_right(__xx,&#32;__y);
1546 &#32;&#32;&#32;&#32;});
1547 &#32;&#32;&#32;&#32;&#32;&#32;}
1548 
1549 &#32;&#32;<emphasis role="comment">//&#32;math&#32;{{{2</emphasis>
1550 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_RetTp,&#32;__name)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1551 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;typename...&#32;_As,&#32;typename...&#32;_More&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1552 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;static&#32;inline&#32;__fixed_size_storage_t&lt;_RetTp,&#32;_Np&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1553 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_S_##__name(const&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1554 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_More&amp;...&#32;__more)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1555 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1556 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(sizeof...(_More)&#32;==&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1557 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1558 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;constexpr&#32;(is_same_v&lt;_Tp,&#32;_RetTp&gt;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1559 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__x._M_apply_per_chunk(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1560 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](auto&#32;__impl,&#32;auto&#32;__xx)&#32;constexpr&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1561 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;_V&#32;=&#32;typename&#32;decltype(__impl)::simd_type;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1562 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__data(__name(_V(__private_init,&#32;__xx)));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1563 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1564 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1565 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__optimize_simd_tuple(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1566 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x.template&#32;_M_apply_r&lt;_RetTp&gt;([](auto&#32;__impl,&#32;auto&#32;__xx)&#32;{&#32;&#32;&#32;\</emphasis>
1567 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__impl._S_##__name(__xx);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1568 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1569 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1570 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1571 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;is_same_v&lt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1572 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Tp,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1573 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RetTp&gt;&#32;&amp;&amp;&#32;(...&#32;&amp;&amp;&#32;is_same_v&lt;_SimdTuple&lt;_Tp,&#32;_As...&gt;,&#32;_More&gt;)&#32;)&#32;&#32;&#32;&#32;\</emphasis>
1574 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__x._M_apply_per_chunk(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1575 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](auto&#32;__impl,&#32;auto&#32;__xx,&#32;auto...&#32;__pack)&#32;constexpr&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1576 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;_V&#32;=&#32;typename&#32;decltype(__impl)::simd_type;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1577 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__data(__name(_V(__private_init,&#32;__xx),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1578 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_V(__private_init,&#32;__pack)...));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1579 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1580 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__more...);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1581 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;else&#32;if&#32;constexpr&#32;(is_same_v&lt;_Tp,&#32;_RetTp&gt;)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1582 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__x._M_apply_per_chunk(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1583 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](auto&#32;__impl,&#32;auto&#32;__xx,&#32;auto...&#32;__pack)&#32;constexpr&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1584 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;using&#32;_V&#32;=&#32;typename&#32;decltype(__impl)::simd_type;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1585 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__data(__name(_V(__private_init,&#32;__xx),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1586 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__autocvt_to_simd(__pack)...));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1587 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1588 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__more...);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1589 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;else&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1590 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__assert_unreachable&lt;_Tp&gt;();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1591 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1592 
1593 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6826a8b8db695e1c1cddea666254e56f">acos</link>)
1594 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1aa2375efebaed504113d91f1822bafa38">asin</link>)
1595 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af59f8735da7eee127c6807d114e82a3a">atan</link>)
1596 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a525d483aa59186e25ad8a1b5b8428536">atan2</link>)
1597 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ad5430427f9814a92459a8880f4a11bd6">cos</link>)
1598 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a428aa2da5120f109315e38b59ac2fbe7">sin</link>)
1599 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a58fbdc949853bd2d1f0a8dbf9f89fe32">tan</link>)
1600 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a9f39bf49b902489c4e2a12973645c325">acosh</link>)
1601 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a043f706d7beb6980b1b5ca2bcb665475">asinh</link>)
1602 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a4cc4b9783a42af3a24583515a7ac0c1d">atanh</link>)
1603 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ac2ac5e2dccf59bf3393c5e24b168f3c6">cosh</link>)
1604 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a2579de64a076b1183bbf48cbed658d12">sinh</link>)
1605 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a4a926ffaf78a83aca2ae45be46fa7571">tanh</link>)
1606 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a15078bfb380de3cfbb83117d459a475b">exp</link>)
1607 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a81df8f8ac36a83137eb6e6451c55f1ab">exp2</link>)
1608 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1aaefafe3f57183bef8acd2b49c680ea12">expm1</link>)
1609 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(<emphasis role="keywordtype">int</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a56d9ee07e4d286eb2faac2e2336a0dce">ilogb</link>)
1610 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a25a8d722e743f3a219e5f0bf0bb867c7">log</link>)
1611 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af26c25cec2b892904654e4068b199882">log10</link>)
1612 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1aef0f23babcbccbb1e66cd549a64f72c9">log1p</link>)
1613 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a18af743c2cec4baeee9ffb27999ddaad">log2</link>)
1614 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a438bad4f46b608b173f382b5bc36edae">logb</link>)
1615 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;modf&#32;implemented&#32;in&#32;simd_math.h</emphasis>
1616 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,
1617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ab9cb73896372f1d851b1dd69abed17ae">scalbn</link>)&#32;<emphasis role="comment">//&#32;double&#32;scalbn(double&#32;x,&#32;int&#32;exp);</emphasis>
1618 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a17d09c2fa2ec2c6ae91caf76e5d0a8c9">scalbln</link>)
1619 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ab95ebf7d48afa4fe99e6f59163a6ddbb">cbrt</link>)
1620 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;abs)
1621 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a4c7267c07bf08c667c579af6a9e73db5">fabs</link>)
1622 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a490c36eca6590103f32eb0520a4c11f6">pow</link>)
1623 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>)
1624 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a4165b919297d605e13a90107432f82bc">erf</link>)
1625 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6055417e172fa9376e96426c8fb4ffbb">erfc</link>)
1626 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1abb805ac761f948a92378a8e615f381a4">lgamma</link>)
1627 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ade3a678daf949cf694c82981b5359c6c">tgamma</link>)
1628 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a1bf4c48c09dda9ec4a0b1b4aa8cd8920">trunc</link>)
1629 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1adb9d5300e335a2898597780e7db7158d">ceil</link>)
1630 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af856cb49514ce62a1b07883867f6f255">floor</link>)
1631 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a283df788ac3ead918eb16a6d3936f4ef">nearbyint</link>)
1632 
1633 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ae13e880889aa452c9adec0a0d1690a50">rint</link>)
1634 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a14657bf794350193b021ea8a968129b6">lrint</link>)
1635 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a220c7fd7006446ff6f373833bdc847ba">llrint</link>)
1636 
1637 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6ea10f4260b54a61665ead26cb995ba3">round</link>)
1638 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a9e8c2b3b0cb90c46e6a5ac345322282c">lround</link>)
1639 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1af7f976f7b98d000fef56b6be1550b31b">llround</link>)
1640 
1641 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ac39e838c245bd16537685b14924d7a6d">ldexp</link>)
1642 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a2947d0248e7d12258dba930ed0a52678">fmod</link>)
1643 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a6580b4a83cd7c960cda8c6ce1df26871">remainder</link>)
1644 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1ae1df9e2567ff4293e3b52172f5f16d9b">copysign</link>)
1645 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a1b027edfeb81f764c9e07df1452652a8">nextafter</link>)
1646 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a7ef36eaba7ad1b1fbd09698d7c7befa8">fdim</link>)
1647 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a1c3600f02664f2255b85d9d85d3cf418">fmax</link>)
1648 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a731ba685a68fdea7f9545398055e8bb7">fmin</link>)
1649 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(_Tp,&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a601e3e26bceb442ef97674f161dee8f3">fma</link>)
1650 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE(<emphasis role="keywordtype">int</emphasis>,&#32;<link linkend="_toml_8hpp_1a2c39cdb56141a8d5637c9933c53e8bb6">fpclassify</link>)
1651 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_APPLY_ON_TUPLE</emphasis>
1652 
1653 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Abis&gt;
1654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&#32;_S_remquo(
1655 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&amp;&#32;__x,
1656 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;&amp;&#32;__y,
1657 &#32;&#32;&#32;&#32;__fixed_size_storage_t&lt;<emphasis role="keywordtype">int</emphasis>,&#32;_SimdTuple&lt;_Tp,&#32;_Abis...&gt;::_S_size()&gt;*&#32;__z)
1658 &#32;&#32;&#32;&#32;&#32;&#32;{
1659 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_apply_per_chunk(
1660 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__xx,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__yy,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__zz)&#32;{
1661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__impl._S_remquo(__xx,&#32;__yy,&#32;&amp;__zz);
1662 &#32;&#32;&#32;&#32;&#32;&#32;},
1663 &#32;&#32;&#32;&#32;&#32;&#32;__y,&#32;*__z);
1664 &#32;&#32;&#32;&#32;&#32;&#32;}
1665 
1666 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1667 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1668 &#32;&#32;&#32;&#32;&#32;&#32;_S_frexp(<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x,
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fixed_size_storage_t&lt;int,&#32;_Np&gt;&amp;&#32;__exp)&#32;<emphasis role="keyword">noexcept</emphasis>
1670 &#32;&#32;&#32;&#32;&#32;&#32;{
1671 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_apply_per_chunk(
1672 &#32;&#32;&#32;&#32;&#32;&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__impl,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__a,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__b)&#32;{
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2tgmath_8h_1a1a63fc454f1959d87924b7cbec3a65e5">frexp</link>(<emphasis role="keyword">typename</emphasis>&#32;<emphasis role="keyword">decltype</emphasis>(__impl)::simd_type(__private_init,&#32;__a),
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__autocvt_to_simd(__b)));
1676 &#32;&#32;&#32;&#32;&#32;&#32;},
1677 &#32;&#32;&#32;&#32;&#32;&#32;__exp);
1678 &#32;&#32;&#32;&#32;&#32;&#32;}
1679 
1680 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_TEST_ON_TUPLE_(name_)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1681 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;typename...&#32;_As&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1682 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;static&#32;inline&#32;_MaskMember&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1683 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;_S_##name_(const&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x)&#32;noexcept&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1684 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1685 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_M_test([](auto&#32;__impl,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1686 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auto&#32;__xx)&#32;{&#32;return&#32;__impl._S_##name_(__xx);&#32;},&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1687 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1688 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1689 
1690 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_TEST_ON_TUPLE_(isinf)
1691 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_TEST_ON_TUPLE_(isfinite)
1692 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_TEST_ON_TUPLE_(isnan)
1693 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_TEST_ON_TUPLE_(isnormal)
1694 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_TEST_ON_TUPLE_(signbit)
1695 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_TEST_ON_TUPLE_</emphasis>
1696 
1697 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_increment&#32;&amp;&#32;_S_decrement{{{2</emphasis>
1698 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Ts&gt;
1699 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1700 &#32;&#32;&#32;&#32;&#32;&#32;_S_increment(_SimdTuple&lt;_Ts...&gt;&amp;&#32;__x)
1701 &#32;&#32;&#32;&#32;&#32;&#32;{
1702 &#32;&#32;&#32;&#32;__for_each(
1703 &#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;native)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta._S_increment(native);
1705 &#32;&#32;&#32;&#32;&#32;&#32;});
1706 &#32;&#32;&#32;&#32;&#32;&#32;}
1707 
1708 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Ts&gt;
1709 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1710 &#32;&#32;&#32;&#32;&#32;&#32;_S_decrement(_SimdTuple&lt;_Ts...&gt;&amp;&#32;__x)
1711 &#32;&#32;&#32;&#32;&#32;&#32;{
1712 &#32;&#32;&#32;&#32;__for_each(
1713 &#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;[](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;native)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta._S_decrement(native);
1715 &#32;&#32;&#32;&#32;&#32;&#32;});
1716 &#32;&#32;&#32;&#32;&#32;&#32;}
1717 
1718 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;compares&#32;{{{2</emphasis>
1719 <emphasis role="preprocessor">#define&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(__cmp)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1720 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;template&#32;&lt;typename&#32;_Tp,&#32;typename...&#32;_As&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1721 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;constexpr&#32;static&#32;_MaskMember&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1722 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__cmp(const&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__x,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1723 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__y)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1724 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1725 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;_M_test(&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1726 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;[](auto&#32;__impl,&#32;auto&#32;__xx,&#32;auto&#32;__yy)&#32;constexpr&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1727 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;__impl.__cmp(__xx,&#32;__yy);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1728 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;},&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1729 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;__x,&#32;__y);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;\</emphasis>
1730 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
1731 
1732 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_equal_to)
1733 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_not_equal_to)
1734 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_less)
1735 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_less_equal)
1736 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_isless)
1737 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_islessequal)
1738 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_isgreater)
1739 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_isgreaterequal)
1740 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_islessgreater)
1741 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_CMP_OPERATIONS(_S_isunordered)
1742 <emphasis role="preprocessor">#undef&#32;_GLIBCXX_SIMD_CMP_OPERATIONS</emphasis>
1743 
1744 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;smart_reference&#32;access&#32;{{{2</emphasis>
1745 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
1746 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_set(_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__v,
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__i,&#32;_Up&amp;&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1748 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__v._M_set(__i,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Up&amp;&amp;<emphasis role="keyword">&gt;</emphasis>(__x));&#32;}
1749 
1750 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_assign&#32;{{{2</emphasis>
1751 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1752 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1753 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bits,&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__lhs,
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;_SimdTuple&lt;_Tp,&#32;_As...&gt;&gt;&amp;&#32;__rhs)
1755 &#32;&#32;&#32;&#32;&#32;&#32;{
1756 &#32;&#32;&#32;&#32;__for_each(
1757 &#32;&#32;&#32;&#32;&#32;&#32;__lhs,&#32;__rhs,
1758 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__native_lhs,&#32;<emphasis role="keyword">auto</emphasis>&#32;__native_rhs)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta._S_masked_assign(__meta._S_make_mask(__bits),&#32;__native_lhs,
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native_rhs);
1761 &#32;&#32;&#32;&#32;&#32;&#32;});
1762 &#32;&#32;&#32;&#32;&#32;&#32;}
1763 
1764 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optimization&#32;for&#32;the&#32;case&#32;where&#32;the&#32;RHS&#32;is&#32;a&#32;scalar.&#32;No&#32;need&#32;to&#32;broadcast</emphasis>
1765 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;scalar&#32;to&#32;a&#32;simd&#32;first.</emphasis>
1766 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1767 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1768 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_assign(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bits,&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__lhs,
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__type_identity_t&lt;_Tp&gt;&#32;__rhs)
1770 &#32;&#32;&#32;&#32;&#32;&#32;{
1771 &#32;&#32;&#32;&#32;__for_each(
1772 &#32;&#32;&#32;&#32;&#32;&#32;__lhs,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__native_lhs)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta._S_masked_assign(__meta._S_make_mask(__bits),&#32;__native_lhs,
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__rhs);
1775 &#32;&#32;&#32;&#32;&#32;&#32;});
1776 &#32;&#32;&#32;&#32;&#32;&#32;}
1777 
1778 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_cassign&#32;{{{2</emphasis>
1779 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1780 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_masked_cassign(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bits,
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__lhs,
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__rhs,
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Op&#32;__op)
1784 &#32;&#32;&#32;&#32;&#32;&#32;{
1785 &#32;&#32;&#32;&#32;__for_each(
1786 &#32;&#32;&#32;&#32;&#32;&#32;__lhs,&#32;__rhs,
1787 &#32;&#32;&#32;&#32;&#32;&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__native_lhs,&#32;<emphasis role="keyword">auto</emphasis>&#32;__native_rhs)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta.template&#32;_S_masked_cassign(__meta._S_make_mask(__bits),
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native_lhs,&#32;__native_rhs,&#32;__op);
1790 &#32;&#32;&#32;&#32;&#32;&#32;});
1791 &#32;&#32;&#32;&#32;&#32;&#32;}
1792 
1793 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optimization&#32;for&#32;the&#32;case&#32;where&#32;the&#32;RHS&#32;is&#32;a&#32;scalar.&#32;No&#32;need&#32;to&#32;broadcast</emphasis>
1794 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;scalar&#32;to&#32;a&#32;simd&#32;first.</emphasis>
1795 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Op,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1796 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_masked_cassign(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bits,
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__lhs,
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__rhs,&#32;_Op&#32;__op)
1799 &#32;&#32;&#32;&#32;&#32;&#32;{
1800 &#32;&#32;&#32;&#32;__for_each(
1801 &#32;&#32;&#32;&#32;&#32;&#32;__lhs,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;__native_lhs)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__meta.template&#32;_S_masked_cassign(__meta._S_make_mask(__bits),
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native_lhs,&#32;__rhs,&#32;__op);
1804 &#32;&#32;&#32;&#32;&#32;&#32;});
1805 &#32;&#32;&#32;&#32;&#32;&#32;}
1806 
1807 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_unary&#32;{{{2</emphasis>
1808 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_Op,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_As&gt;
1809 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;
1810 &#32;&#32;&#32;&#32;&#32;&#32;_S_masked_unary(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bits,&#32;<emphasis role="keyword">const</emphasis>&#32;_SimdTuple&lt;_Tp,&#32;_As...&gt;&amp;&#32;__v)
1811 &#32;&#32;&#32;&#32;&#32;&#32;{
1812 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__v._M_apply_wrapped([&amp;__bits](<emphasis role="keyword">auto</emphasis>&#32;__meta,
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__native)&#32;<emphasis role="keyword">constexpr</emphasis>&#32;{
1814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__meta.template&#32;_S_masked_unary&lt;_Op&gt;(__meta._S_make_mask(
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__bits),
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native);
1817 &#32;&#32;&#32;&#32;});
1818 &#32;&#32;&#32;&#32;&#32;&#32;}
1819 
1820 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}2</emphasis>
1821 &#32;&#32;};
1822 
1823 <emphasis role="comment">//&#32;_MaskImplFixedSize&#32;{{{1</emphasis>
1824 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Np,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1825 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_MaskImplFixedSize
1826 &#32;&#32;{
1827 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(
1828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">sizeof</emphasis>(_ULLong)&#32;*&#32;__CHAR_BIT__&#32;&gt;=&#32;_Np,
1829 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;The&#32;fixed_size&#32;implementation&#32;relies&#32;on&#32;one&#32;_ULLong&#32;being&#32;able&#32;to&#32;store&#32;&quot;</emphasis>
1830 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;all&#32;boolean&#32;elements.&quot;</emphasis>);&#32;<emphasis role="comment">//&#32;required&#32;in&#32;load&#32;&amp;&#32;store</emphasis>
1831 
1832 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;member&#32;types&#32;{{{</emphasis>
1833 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Abi&#32;=&#32;simd_abi::fixed_size&lt;_Np&gt;;
1834 
1835 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_MaskMember&#32;=&#32;_SanitizedBitMask&lt;_Np&gt;;
1836 
1837 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1838 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_FirstAbi&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__fixed_size_storage_t&lt;_Tp,&#32;_Np&gt;::_FirstAbi;
1839 
1840 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1841 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_TypeTag&#32;=&#32;_Tp*;
1842 
1843 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1844 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_broadcast&#32;{{{</emphasis>
1845 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;
1846 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember
1847 &#32;&#32;&#32;&#32;&#32;&#32;_S_broadcast(<emphasis role="keywordtype">bool</emphasis>&#32;__x)
1848 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;?&#32;~_MaskMember()&#32;:&#32;_MaskMember();&#32;}
1849 
1850 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1851 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_load&#32;{{{</emphasis>
1852 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&gt;
1853 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember
1854 &#32;&#32;&#32;&#32;&#32;&#32;_S_load(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)
1855 &#32;&#32;&#32;&#32;&#32;&#32;{
1856 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ip&#32;=&#32;__int_for_sizeof_t&lt;bool&gt;;
1857 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;the&#32;following&#32;load&#32;uses&#32;element_aligned&#32;and&#32;relies&#32;on&#32;__mem&#32;already</emphasis>
1858 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;carrying&#32;alignment&#32;information&#32;from&#32;when&#32;this&#32;load&#32;function&#32;was</emphasis>
1859 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;called.</emphasis>
1860 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;simd&lt;_Ip,&#32;_Abi&gt;&#32;__bools(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__may_alias&lt;_Ip&gt;*<emphasis role="keyword">&gt;</emphasis>(
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__mem),
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element_aligned);
1863 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__bools&#32;!=&#32;0);
1864 &#32;&#32;&#32;&#32;&#32;&#32;}
1865 
1866 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1867 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_to_bits&#32;{{{</emphasis>
1868 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">bool</emphasis>&#32;_Sanitized&gt;
1869 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_SanitizedBitMask&lt;_Np&gt;
1870 &#32;&#32;&#32;&#32;&#32;&#32;_S_to_bits(_BitMask&lt;_Np,&#32;_Sanitized&gt;&#32;__x)
1871 &#32;&#32;&#32;&#32;&#32;&#32;{
1872 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Sanitized)
1873 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x;
1874 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1875 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x._M_sanitized();
1876 &#32;&#32;&#32;&#32;&#32;&#32;}
1877 
1878 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1879 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_convert&#32;{{{</emphasis>
1880 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_UAbi&gt;
1881 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember
1882 &#32;&#32;&#32;&#32;&#32;&#32;_S_convert(simd_mask&lt;_Up,&#32;_UAbi&gt;&#32;__x)
1883 &#32;&#32;&#32;&#32;&#32;&#32;{
1884 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_UAbi::_MaskImpl::_S_to_bits(__data(__x))
1885 &#32;&#32;&#32;&#32;&#32;&#32;.template&#32;_M_extract&lt;0,&#32;_Np&gt;();
1886 &#32;&#32;&#32;&#32;&#32;&#32;}
1887 
1888 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1889 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_from_bitmask&#32;{{{2</emphasis>
1890 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1891 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember
1892 &#32;&#32;&#32;&#32;&#32;&#32;_S_from_bitmask(_MaskMember&#32;__bits,&#32;_TypeTag&lt;_Tp&gt;)&#32;<emphasis role="keyword">noexcept</emphasis>
1893 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__bits;&#32;}
1894 
1895 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_load&#32;{{{2</emphasis>
1896 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_MaskMember&#32;_S_load(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
1897 &#32;&#32;&#32;&#32;{
1898 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;_UChar&#32;is&#32;not&#32;necessarily&#32;the&#32;best&#32;type&#32;to&#32;use&#32;here.&#32;For&#32;smaller</emphasis>
1899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_Np&#32;_UShort,&#32;_UInt,&#32;_ULLong,&#32;float,&#32;and&#32;double&#32;can&#32;be&#32;more&#32;efficient.</emphasis>
1900 &#32;&#32;&#32;&#32;&#32;&#32;_ULLong&#32;__r&#32;=&#32;0;
1901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vs&#32;=&#32;__fixed_size_storage_t&lt;_UChar,&#32;_Np&gt;;
1902 &#32;&#32;&#32;&#32;&#32;&#32;__for_each(_Vs{},&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__meta,&#32;<emphasis role="keyword">auto</emphasis>)&#32;{
1903 &#32;&#32;&#32;&#32;__r&#32;|=&#32;__meta._S_mask_to_shifted_ullong(
1904 &#32;&#32;&#32;&#32;&#32;&#32;__meta._S_mask_impl._S_load(&amp;__mem[__meta._S_offset],
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_SizeConstant&lt;__meta._S_size()&gt;()));
1906 &#32;&#32;&#32;&#32;&#32;&#32;});
1907 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__r;
1908 &#32;&#32;&#32;&#32;}
1909 
1910 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_load&#32;{{{2</emphasis>
1911 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;_MaskMember&#32;_S_masked_load(_MaskMember&#32;__merge,
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&#32;__mask,
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
1914 &#32;&#32;&#32;&#32;{
1915 &#32;&#32;&#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(__mask.to_ullong(),&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{
1916 &#32;&#32;&#32;&#32;__merge.set(__i,&#32;__mem[__i]);
1917 &#32;&#32;&#32;&#32;&#32;&#32;});
1918 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__merge;
1919 &#32;&#32;&#32;&#32;}
1920 
1921 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_store&#32;{{{2</emphasis>
1922 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_store(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__bitmask,
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem)&#32;<emphasis role="keyword">noexcept</emphasis>
1924 &#32;&#32;&#32;&#32;{
1925 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
1926 &#32;&#32;&#32;&#32;__mem[0]&#32;=&#32;__bitmask[0];
1927 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1928 &#32;&#32;&#32;&#32;_FirstAbi&lt;_UChar&gt;::_CommonImpl::_S_store_bool_array(__bitmask,&#32;__mem);
1929 &#32;&#32;&#32;&#32;}
1930 
1931 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_store&#32;{{{2</emphasis>
1932 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_masked_store(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__v,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;__mem,
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__k)&#32;<emphasis role="keyword">noexcept</emphasis>
1934 &#32;&#32;&#32;&#32;{
1935 &#32;&#32;&#32;&#32;&#32;&#32;_BitOps::_S_bit_iteration(__k,&#32;[&amp;](<emphasis role="keyword">auto</emphasis>&#32;__i)&#32;{&#32;__mem[__i]&#32;=&#32;__v[__i];&#32;});
1936 &#32;&#32;&#32;&#32;}
1937 
1938 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;logical&#32;and&#32;bitwise&#32;operators&#32;{{{2</emphasis>
1939 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember
1940 &#32;&#32;&#32;&#32;_S_logical_and(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
1941 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&amp;&#32;__y;&#32;}
1942 
1943 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember
1944 &#32;&#32;&#32;&#32;_S_logical_or(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
1945 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;|&#32;__y;&#32;}
1946 
1947 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_MaskMember
1948 &#32;&#32;&#32;&#32;_S_bit_not(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1949 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;~__x;&#32;}
1950 
1951 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember
1952 &#32;&#32;&#32;&#32;_S_bit_and(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
1953 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;&amp;&#32;__y;&#32;}
1954 
1955 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember
1956 &#32;&#32;&#32;&#32;_S_bit_or(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
1957 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;|&#32;__y;&#32;}
1958 
1959 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;_MaskMember
1960 &#32;&#32;&#32;&#32;_S_bit_xor(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&amp;&#32;__y)&#32;<emphasis role="keyword">noexcept</emphasis>
1961 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x&#32;^&#32;__y;&#32;}
1962 
1963 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;smart_reference&#32;access&#32;{{{2</emphasis>
1964 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_set(_MaskMember&amp;&#32;__k,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__i,
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__x)&#32;<emphasis role="keyword">noexcept</emphasis>
1966 &#32;&#32;&#32;&#32;{&#32;__k.set(__i,&#32;__x);&#32;}
1967 
1968 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_masked_assign&#32;{{{2</emphasis>
1969 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1970 &#32;&#32;&#32;&#32;_S_masked_assign(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__k,&#32;_MaskMember&amp;&#32;__lhs,
1971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__rhs)
1972 &#32;&#32;&#32;&#32;{&#32;__lhs&#32;=&#32;(__lhs&#32;&amp;&#32;~__k)&#32;|&#32;(__rhs&#32;&amp;&#32;__k);&#32;}
1973 
1974 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Optimization&#32;for&#32;the&#32;case&#32;where&#32;the&#32;RHS&#32;is&#32;a&#32;scalar.</emphasis>
1975 &#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;_S_masked_assign(<emphasis role="keyword">const</emphasis>&#32;_MaskMember&#32;__k,
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_MaskMember&amp;&#32;__lhs,
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__rhs)
1978 &#32;&#32;&#32;&#32;{
1979 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__rhs)
1980 &#32;&#32;&#32;&#32;__lhs&#32;|=&#32;__k;
1981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1982 &#32;&#32;&#32;&#32;__lhs&#32;&amp;=&#32;~__k;
1983 &#32;&#32;&#32;&#32;}
1984 
1985 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}2</emphasis>
1986 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_all_of&#32;{{{</emphasis>
1987 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1988 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_all_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
1989 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__k).all();&#32;}
1990 
1991 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1992 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_any_of&#32;{{{</emphasis>
1993 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1994 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_any_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
1995 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__k).any();&#32;}
1996 
1997 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
1998 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_none_of&#32;{{{</emphasis>
1999 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2000 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_none_of(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2001 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__k).none();&#32;}
2002 
2003 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2004 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_some_of&#32;{{{</emphasis>
2005 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2006 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2007 &#32;&#32;&#32;&#32;&#32;&#32;_S_some_of([[maybe_unused]]&#32;simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2008 &#32;&#32;&#32;&#32;&#32;&#32;{
2009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(_Np&#32;==&#32;1)
2010 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2011 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2012 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__k).any()&#32;&amp;&amp;&#32;!__data(__k).all();
2013 &#32;&#32;&#32;&#32;&#32;&#32;}
2014 
2015 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2016 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_popcount&#32;{{{</emphasis>
2017 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2018 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_S_popcount(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2019 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__data(__k).count();&#32;}
2020 
2021 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_first_set&#32;{{{</emphasis>
2023 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2024 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
2025 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_first_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2026 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__countr_zero(__data(__k).to_ullong());&#32;}
2027 
2028 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2029 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_S_find_last_set&#32;{{{</emphasis>
2030 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
2031 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SIMD_INTRINSIC&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
2032 &#32;&#32;&#32;&#32;&#32;&#32;_S_find_last_set(simd_mask&lt;_Tp,&#32;_Abi&gt;&#32;__k)
2033 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__bit_width(__data(__k).to_ullong())&#32;-&#32;1;&#32;}
2034 
2035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}}}</emphasis>
2036 &#32;&#32;};
2037 <emphasis role="comment">//&#32;}}}1</emphasis>
2038 
2039 _GLIBCXX_SIMD_END_NAMESPACE
2040 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
2041 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_EXPERIMENTAL_SIMD_FIXED_SIZE_H_</emphasis>
2042 
2043 <emphasis role="comment">//&#32;vim:&#32;foldmethod=marker&#32;sw=2&#32;noet&#32;ts=8&#32;sts=2&#32;tw=80</emphasis>
</programlisting></section>
