<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2stl__queue_8h_source" xml:lang="en-US">
<title>stl_queue.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/stl_queue.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Queue&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_QUEUE_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_QUEUE_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
61 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
62 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/uses_allocator.h&gt;</emphasis>
63 <emphasis role="preprocessor">#endif</emphasis>
64 
65 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
66 {
67 _GLIBCXX_BEGIN_NAMESPACE_VERSION
68 
95 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&#32;=&#32;deque&lt;_Tp&gt;&#32;&gt;
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>queue
97 &#32;&#32;&#32;&#32;{
98 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::value_type&#32;_Sequence_value_type;
101 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
103 <emphasis role="preprocessor">#&#32;endif</emphasis>
104 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Sequence,&#32;_FrontInsertionSequenceConcept)
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Sequence,&#32;_BackInsertionSequenceConcept)
106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Tp,&#32;_Sequence_value_type,&#32;_SameTypeConcept)
107 <emphasis role="preprocessor">#endif</emphasis>
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1&gt;
110 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
111 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp1,&#32;_Seq1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp1,&#32;_Seq1&gt;&amp;);
112 
113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
115 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp1,&#32;_Seq1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp1,&#32;_Seq1&gt;&amp;);
116 
117 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;three_way_comparable&#32;_Seq1&gt;
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;compare_three_way_result_t&lt;_Seq1&gt;
120 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp1,&#32;_Seq1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp1,&#32;_Seq1&gt;&amp;);
121 <emphasis role="preprocessor">#endif</emphasis>
122 
123 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Uses&#32;=&#32;<emphasis role="keyword">typename</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;uses_allocator&lt;_Sequence,&#32;_Alloc&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
127 
128 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
129 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2566.&#32;Requirements&#32;on&#32;the&#32;first&#32;template&#32;parameter&#32;of&#32;container</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adaptors</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;_Tp,&#32;typename&#32;_Sequence::value_type&gt;::value,
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;value_type&#32;must&#32;be&#32;the&#32;same&#32;as&#32;the&#32;underlying&#32;container&quot;</emphasis>);
134 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
135 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
136 
137 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
139 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::const_reference&#32;&#32;const_reference;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sequence&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;container_type;
143 
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;&#32;Maintainers&#32;wondering&#32;why&#32;this&#32;isn&apos;t&#32;uglified&#32;as&#32;per&#32;style</emphasis>
146 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;guidelines&#32;should&#32;note&#32;that&#32;this&#32;name&#32;is&#32;specified&#32;in&#32;the&#32;standard,</emphasis>
147 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;C++98&#32;[23.2.3.1].</emphasis>
148 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;(Why?&#32;Presumably&#32;for&#32;the&#32;same&#32;reason&#32;that&#32;it&apos;s&#32;protected&#32;instead</emphasis>
149 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;of&#32;private:&#32;to&#32;allow&#32;derivation.&#32;&#32;But&#32;none&#32;of&#32;the&#32;other</emphasis>
150 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;&#32;containers&#32;allow&#32;for&#32;derivation.&#32;&#32;Odd.)</emphasis>
151 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
153 &#32;&#32;&#32;&#32;&#32;&#32;_Sequence&#32;c;
154 
155 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
159 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;queue(<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c&#32;=&#32;_Sequence())
162 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(__c)&#32;{&#32;}
163 <emphasis role="preprocessor">#else</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Seq&#32;=&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;<emphasis role="keyword">typename</emphasis>
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;is_default_constructible&lt;_Seq&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
166 &#32;&#32;&#32;&#32;queue()
167 &#32;&#32;&#32;&#32;:&#32;c()&#32;{&#32;}
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;queue(<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c)
171 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(__c)&#32;{&#32;}
172 
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;queue(_Sequence&amp;&amp;&#32;__c)
175 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__c))&#32;{&#32;}
176 
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
179 &#32;&#32;&#32;&#32;queue(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
180 &#32;&#32;&#32;&#32;:&#32;c(__a)&#32;{&#32;}
181 
182 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
183 &#32;&#32;&#32;&#32;queue(<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
184 &#32;&#32;&#32;&#32;:&#32;c(__c,&#32;__a)&#32;{&#32;}
185 
186 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
187 &#32;&#32;&#32;&#32;queue(_Sequence&amp;&amp;&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
188 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__c),&#32;__a)&#32;{&#32;}
189 
190 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
191 &#32;&#32;&#32;&#32;queue(<emphasis role="keyword">const</emphasis>&#32;queue&amp;&#32;__q,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
192 &#32;&#32;&#32;&#32;:&#32;c(__q.c,&#32;__a)&#32;{&#32;}
193 
194 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
195 &#32;&#32;&#32;&#32;queue(queue&amp;&amp;&#32;__q,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
196 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__q.c),&#32;__a)&#32;{&#32;}
197 
198 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;202002L</emphasis>
199 <emphasis role="preprocessor">#define&#32;__cpp_lib_adaptor_iterator_pair_constructor&#32;202106L</emphasis>
200 
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;&gt;
203 &#32;&#32;&#32;&#32;queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
204 &#32;&#32;&#32;&#32;:&#32;c(__first,&#32;__last)&#32;{&#32;}
205 
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
209 &#32;&#32;&#32;&#32;queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
210 &#32;&#32;&#32;&#32;:&#32;c(__first,&#32;__last,&#32;__a)&#32;{&#32;}
211 <emphasis role="preprocessor">#endif</emphasis>
212 <emphasis role="preprocessor">#endif</emphasis>
213 
217 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
218 &#32;&#32;&#32;&#32;&#32;&#32;empty()<emphasis role="keyword">&#32;const</emphasis>
219 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.empty();&#32;}
220 
222 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
223 &#32;&#32;&#32;&#32;&#32;&#32;size_type
224 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const</emphasis>
225 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.size();&#32;}
226 
231 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
232 &#32;&#32;&#32;&#32;&#32;&#32;reference
233 &#32;&#32;&#32;&#32;&#32;&#32;front()
234 &#32;&#32;&#32;&#32;&#32;&#32;{
235 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
236 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.front();
237 &#32;&#32;&#32;&#32;&#32;&#32;}
238 
243 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
244 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
245 &#32;&#32;&#32;&#32;&#32;&#32;front()<emphasis role="keyword">&#32;const</emphasis>
246 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
247 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
248 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.front();
249 &#32;&#32;&#32;&#32;&#32;&#32;}
250 
255 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
256 &#32;&#32;&#32;&#32;&#32;&#32;reference
257 &#32;&#32;&#32;&#32;&#32;&#32;back()
258 &#32;&#32;&#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.back();
261 &#32;&#32;&#32;&#32;&#32;&#32;}
262 
267 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
268 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
269 &#32;&#32;&#32;&#32;&#32;&#32;back()<emphasis role="keyword">&#32;const</emphasis>
270 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
271 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.back();
273 &#32;&#32;&#32;&#32;&#32;&#32;}
274 
284 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
285 &#32;&#32;&#32;&#32;&#32;&#32;push(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
286 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;c.push_back(__x);&#32;}
287 
288 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
289 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
290 &#32;&#32;&#32;&#32;&#32;&#32;push(value_type&amp;&amp;&#32;__x)
291 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;c.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
292 
293 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
295 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
296 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
297 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.emplace_back(std::forward&lt;_Args&gt;(__args)...);&#32;}
298 <emphasis role="preprocessor">#else</emphasis>
299 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
300 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
301 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
302 &#32;&#32;&#32;&#32;{&#32;c.emplace_back(std::forward&lt;_Args&gt;(__args)...);&#32;}
303 <emphasis role="preprocessor">#endif</emphasis>
304 <emphasis role="preprocessor">#endif</emphasis>
305 
317 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop</link>()
319 &#32;&#32;&#32;&#32;&#32;&#32;{
320 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
321 &#32;&#32;&#32;&#32;c.pop_front();
322 &#32;&#32;&#32;&#32;&#32;&#32;}
323 
324 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
326 &#32;&#32;&#32;&#32;&#32;&#32;swap(queue&amp;&#32;__q)
327 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__is_nothrow_swappable&lt;_Sequence&gt;::value)
329 #<emphasis role="keywordflow">else</emphasis>
330 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__is_nothrow_swappable&lt;_Tp&gt;::value)
331 <emphasis role="preprocessor">#endif</emphasis>
332 &#32;&#32;&#32;&#32;&#32;&#32;{
333 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
334 &#32;&#32;&#32;&#32;swap(c,&#32;__q.c);
335 &#32;&#32;&#32;&#32;&#32;&#32;}
336 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
337 &#32;&#32;&#32;&#32;};
338 
339 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
340 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container,
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Container&gt;&gt;
342 &#32;&#32;&#32;&#32;queue(_Container)&#32;-&gt;&#32;queue&lt;typename&#32;_Container::value_type,&#32;_Container&gt;;
343 
344 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Container&gt;&gt;
346 &#32;&#32;&#32;&#32;queue(_Container,&#32;_Allocator)
347 &#32;&#32;&#32;&#32;-&gt;&#32;queue&lt;typename&#32;_Container::value_type,&#32;_Container&gt;;
348 
349 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_adaptor_iterator_pair_constructor</emphasis>
350 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;&gt;
354 &#32;&#32;&#32;&#32;queue(_InputIterator,&#32;_InputIterator)&#32;-&gt;&#32;queue&lt;_ValT&gt;;
355 
356 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
361 &#32;&#32;&#32;&#32;queue(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
362 &#32;&#32;&#32;&#32;-&gt;&#32;queue&lt;_ValT,&#32;deque&lt;_ValT,&#32;_Allocator&gt;&gt;;
363 <emphasis role="preprocessor">#endif</emphasis>
364 <emphasis role="preprocessor">#endif</emphasis>
365 
377 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
378 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
379 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
380 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
381 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.c&#32;==&#32;__y.c;&#32;}
382 
396 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
397 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
399 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
400 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.c&#32;&lt;&#32;__y.c;&#32;}
401 
403 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
404 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
405 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
406 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
407 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
408 
410 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
411 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
412 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
413 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
414 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
415 
417 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
418 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
420 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
421 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
422 
424 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
425 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
426 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
427 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
428 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
429 
430 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
431 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;three_way_comparable&#32;_Seq&gt;
432 &#32;&#32;&#32;&#32;[[nodiscard]]
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;compare_three_way_result_t&lt;_Seq&gt;
434 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
435 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.c&#32;&lt;=&gt;&#32;__y.c;&#32;}
436 <emphasis role="preprocessor">#endif</emphasis>
437 
438 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
439 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
440 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
441 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
442 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constrained&#32;free&#32;swap&#32;overload,&#32;see&#32;p0185r1</emphasis>
443 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__is_swappable&lt;_Seq&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
444 <emphasis role="preprocessor">#else</emphasis>
445 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
446 <emphasis role="preprocessor">#endif</emphasis>
447 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;queue&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
448 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
449 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
450 
451 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
452 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>uses_allocator&lt;queue&lt;_Tp,&#32;_Seq&gt;,&#32;_Alloc&gt;
453 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;uses_allocator&lt;_Seq,&#32;_Alloc&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;{&#32;};
454 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
455 
496 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&#32;=&#32;vector&lt;_Tp&gt;,
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;&#32;=&#32;less&lt;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::value_type&gt;&#32;&gt;
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>priority_queue
499 &#32;&#32;&#32;&#32;{
500 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
502 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::value_type&#32;_Sequence_value_type;
503 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
504 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
505 <emphasis role="preprocessor">#&#32;endif</emphasis>
506 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Sequence,&#32;_SequenceConcept)
507 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Sequence,&#32;_RandomAccessContainerConcept)
508 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Tp,&#32;_Sequence_value_type,&#32;_SameTypeConcept)
509 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1a0efeda71d183434752b2df77dde3e72c">__glibcxx_class_requires4</link>(_Compare,&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;_Tp,&#32;_Tp,
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BinaryFunctionConcept)
511 <emphasis role="preprocessor">#endif</emphasis>
512 
513 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
514 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
515 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Uses&#32;=&#32;<emphasis role="keyword">typename</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;uses_allocator&lt;_Sequence,&#32;_Alloc&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
517 
518 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2566.&#32;Requirements&#32;on&#32;the&#32;first&#32;template&#32;parameter&#32;of&#32;container</emphasis>
521 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adaptors</emphasis>
522 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;_Tp,&#32;typename&#32;_Sequence::value_type&gt;::value,
523 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;value_type&#32;must&#32;be&#32;the&#32;same&#32;as&#32;the&#32;underlying&#32;container&quot;</emphasis>);
524 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
525 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
526 
527 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
528 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
530 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::const_reference&#32;&#32;const_reference;
531 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;&#32;_Sequence::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size_type;
532 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sequence&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;container_type;
533 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
534 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DR&#32;2684.&#32;priority_queue&#32;lacking&#32;comparator&#32;typedef</emphasis>
535 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_compare;
536 
537 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;See&#32;queue::c&#32;for&#32;notes&#32;on&#32;these&#32;names.</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;_Sequence&#32;&#32;c;
540 &#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>;
541 
542 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
546 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
547 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
548 &#32;&#32;&#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x&#32;=&#32;_Compare(),
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__s&#32;=&#32;_Sequence())
550 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(__s),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
551 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
552 <emphasis role="preprocessor">#else</emphasis>
553 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Seq&#32;=&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;<emphasis role="keyword">typename</emphasis>
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;__and_&lt;is_default_constructible&lt;_Compare&gt;,
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_default_constructible&lt;_Seq&gt;&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
556 &#32;&#32;&#32;&#32;priority_queue()
557 &#32;&#32;&#32;&#32;:&#32;c(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>()&#32;{&#32;}
558 
559 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
560 &#32;&#32;&#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__s)
561 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(__s),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
562 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
565 &#32;&#32;&#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;_Sequence&amp;&amp;&#32;__s&#32;=&#32;_Sequence())
566 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__s)),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
567 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
568 
569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
570 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
571 &#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
572 &#32;&#32;&#32;&#32;:&#32;c(__a),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>()&#32;{&#32;}
573 
574 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
575 &#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
576 &#32;&#32;&#32;&#32;:&#32;c(__a),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)&#32;{&#32;}
577 
578 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
579 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2537.&#32;Constructors&#32;[...]&#32;taking&#32;allocators&#32;should&#32;call&#32;make_heap</emphasis>
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
581 &#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c,
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
583 &#32;&#32;&#32;&#32;:&#32;c(__c,&#32;__a),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
584 &#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
585 
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
587 &#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;_Sequence&amp;&amp;&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
588 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__c),&#32;__a),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
589 &#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
590 
591 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
592 &#32;&#32;&#32;&#32;priority_queue(<emphasis role="keyword">const</emphasis>&#32;priority_queue&amp;&#32;__q,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
593 &#32;&#32;&#32;&#32;:&#32;c(__q.c,&#32;__a),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__q.comp)&#32;{&#32;}
594 
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
596 &#32;&#32;&#32;&#32;priority_queue(priority_queue&amp;&amp;&#32;__q,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
597 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__q.c),&#32;__a),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__q.comp))&#32;{&#32;}
598 <emphasis role="preprocessor">#endif</emphasis>
599 
615 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
616 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
617 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x&#32;=&#32;_Compare(),
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__s&#32;=&#32;_Sequence())
620 &#32;&#32;&#32;&#32;:&#32;c(__s),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
621 &#32;&#32;&#32;&#32;{
622 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
623 &#32;&#32;&#32;&#32;&#32;&#32;c.insert(c.end(),&#32;__first,&#32;__last);
624 &#32;&#32;&#32;&#32;&#32;&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
625 &#32;&#32;&#32;&#32;}
626 <emphasis role="preprocessor">#else</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3529.&#32;priority_queue(first,&#32;last)&#32;should&#32;construct&#32;c&#32;with&#32;(first,&#32;last)</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
631 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x&#32;=&#32;_Compare())
633 &#32;&#32;&#32;&#32;:&#32;c(__first,&#32;__last),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
634 &#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
635 
636 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3522.&#32;Missing&#32;requirement&#32;on&#32;InputIterator&#32;template&#32;parameter</emphasis>
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
640 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__s)
642 &#32;&#32;&#32;&#32;:&#32;c(__s),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
643 &#32;&#32;&#32;&#32;{
644 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
645 &#32;&#32;&#32;&#32;&#32;&#32;c.insert(c.end(),&#32;__first,&#32;__last);
646 &#32;&#32;&#32;&#32;&#32;&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
647 &#32;&#32;&#32;&#32;}
648 
649 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;&gt;
651 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;_Sequence&amp;&amp;&#32;__s)
653 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__s)),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
654 &#32;&#32;&#32;&#32;{
655 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
656 &#32;&#32;&#32;&#32;&#32;&#32;c.insert(c.end(),&#32;__first,&#32;__last);
657 &#32;&#32;&#32;&#32;&#32;&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
658 &#32;&#32;&#32;&#32;}
659 
660 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
661 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3506.&#32;Missing&#32;allocator-extended&#32;constructors&#32;for&#32;priority_queue</emphasis>
662 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;,
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
665 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc)
667 &#32;&#32;&#32;&#32;:&#32;c(__first,&#32;__last,&#32;__alloc),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>()
668 &#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
669 
670 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;,
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
673 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc)
675 &#32;&#32;&#32;&#32;:&#32;c(__first,&#32;__last,&#32;__alloc),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
676 &#32;&#32;&#32;&#32;{&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);&#32;}
677 
678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;std::_RequireInputIter&lt;_InputIterator&gt;,
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
681 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__s,
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc)
684 &#32;&#32;&#32;&#32;:&#32;c(__s,&#32;__alloc),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
685 &#32;&#32;&#32;&#32;{
686 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
687 &#32;&#32;&#32;&#32;&#32;&#32;c.insert(c.end(),&#32;__first,&#32;__last);
688 &#32;&#32;&#32;&#32;&#32;&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
689 &#32;&#32;&#32;&#32;}
690 
691 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
693 &#32;&#32;&#32;&#32;priority_queue(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Compare&amp;&#32;__x,&#32;_Sequence&amp;&amp;&#32;__s,
695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__alloc)
696 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__s),&#32;__alloc),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>(__x)
697 &#32;&#32;&#32;&#32;{
698 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
699 &#32;&#32;&#32;&#32;&#32;&#32;c.insert(c.end(),&#32;__first,&#32;__last);
700 &#32;&#32;&#32;&#32;&#32;&#32;std::make_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
701 &#32;&#32;&#32;&#32;}
702 <emphasis role="preprocessor">#endif</emphasis>
703 
707 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
708 &#32;&#32;&#32;&#32;&#32;&#32;empty()<emphasis role="keyword">&#32;const</emphasis>
709 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.empty();&#32;}
710 
712 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
713 &#32;&#32;&#32;&#32;&#32;&#32;size_type
714 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const</emphasis>
715 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.size();&#32;}
716 
721 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
722 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
723 &#32;&#32;&#32;&#32;&#32;&#32;top()<emphasis role="keyword">&#32;const</emphasis>
724 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
725 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
726 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.front();
727 &#32;&#32;&#32;&#32;&#32;&#32;}
728 
737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
738 &#32;&#32;&#32;&#32;&#32;&#32;push(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
739 &#32;&#32;&#32;&#32;&#32;&#32;{
740 &#32;&#32;&#32;&#32;c.push_back(__x);
741 &#32;&#32;&#32;&#32;std::push_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
742 &#32;&#32;&#32;&#32;&#32;&#32;}
743 
744 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
746 &#32;&#32;&#32;&#32;&#32;&#32;push(value_type&amp;&amp;&#32;__x)
747 &#32;&#32;&#32;&#32;&#32;&#32;{
748 &#32;&#32;&#32;&#32;c.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));
749 &#32;&#32;&#32;&#32;std::push_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
750 &#32;&#32;&#32;&#32;&#32;&#32;}
751 
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
753 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
754 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
755 &#32;&#32;&#32;&#32;{
756 &#32;&#32;&#32;&#32;&#32;&#32;c.emplace_back(std::forward&lt;_Args&gt;(__args)...);
757 &#32;&#32;&#32;&#32;&#32;&#32;std::push_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
758 &#32;&#32;&#32;&#32;}
759 <emphasis role="preprocessor">#endif</emphasis>
760 
772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
773 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop</link>()
774 &#32;&#32;&#32;&#32;&#32;&#32;{
775 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
776 &#32;&#32;&#32;&#32;std::pop_heap(c.begin(),&#32;c.end(),&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>);
777 &#32;&#32;&#32;&#32;c.pop_back();
778 &#32;&#32;&#32;&#32;&#32;&#32;}
779 
780 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
781 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
782 &#32;&#32;&#32;&#32;&#32;&#32;swap(priority_queue&amp;&#32;__pq)
783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__and_&lt;
784 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_nothrow_swappable&lt;_Sequence&gt;,
786 <emphasis role="preprocessor">#else</emphasis>
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_nothrow_swappable&lt;_Tp&gt;,
788 <emphasis role="preprocessor">#endif</emphasis>
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_nothrow_swappable&lt;_Compare&gt;
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>)
791 &#32;&#32;&#32;&#32;&#32;&#32;{
792 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
793 &#32;&#32;&#32;&#32;swap(c,&#32;__pq.c);
794 &#32;&#32;&#32;&#32;swap(<link linkend="__classes_2lib_2glm_2test_2core_2core__type__vec4_8cpp_1a50b69e8e55167990c85f65e0a656e294">comp</link>,&#32;__pq.comp);
795 &#32;&#32;&#32;&#32;&#32;&#32;}
796 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
797 &#32;&#32;&#32;&#32;};
798 
799 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
800 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container,
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Container&gt;&gt;
803 &#32;&#32;&#32;&#32;priority_queue(_Compare,&#32;_Container)
804 &#32;&#32;&#32;&#32;-&gt;&#32;priority_queue&lt;typename&#32;_Container::value_type,&#32;_Container,&#32;_Compare&gt;;
805 
806 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&#32;=&#32;less&lt;_ValT&gt;,
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container&#32;=&#32;vector&lt;_ValT&gt;,
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Container&gt;&gt;
813 &#32;&#32;&#32;&#32;priority_queue(_InputIterator,&#32;_InputIterator,&#32;_Compare&#32;=&#32;_Compare(),
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Container&#32;=&#32;_Container())
815 &#32;&#32;&#32;&#32;-&gt;&#32;priority_queue&lt;_ValT,&#32;_Container,&#32;_Compare&gt;;
816 
817 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Compare,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Container,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Compare&gt;,
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Container&gt;&gt;
820 &#32;&#32;&#32;&#32;priority_queue(_Compare,&#32;_Container,&#32;_Allocator)
821 &#32;&#32;&#32;&#32;-&gt;&#32;priority_queue&lt;typename&#32;_Container::value_type,&#32;_Container,&#32;_Compare&gt;;
822 <emphasis role="preprocessor">#endif</emphasis>
823 
824 &#32;&#32;<emphasis role="comment">//&#32;No&#32;equality/comparison&#32;operators&#32;are&#32;provided&#32;for&#32;priority_queue.</emphasis>
825 
826 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
827 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
828 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
829 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
830 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constrained&#32;free&#32;swap&#32;overload,&#32;see&#32;p0185r1</emphasis>
831 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;__is_swappable&lt;_Sequence&gt;,
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_swappable&lt;_Compare&gt;&gt;<link linkend="_classvalue">::value</link>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
833 <emphasis role="preprocessor">#else</emphasis>
834 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
835 <emphasis role="preprocessor">#endif</emphasis>
836 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(priority_queue&lt;_Tp,&#32;_Sequence,&#32;_Compare&gt;&amp;&#32;__x,
837 &#32;&#32;&#32;&#32;&#32;priority_queue&lt;_Tp,&#32;_Sequence,&#32;_Compare&gt;&amp;&#32;__y)
838 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
839 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
840 
841 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare,
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
843 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>uses_allocator&lt;priority_queue&lt;_Tp,&#32;_Sequence,&#32;_Compare&gt;,&#32;_Alloc&gt;
844 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;uses_allocator&lt;_Sequence,&#32;_Alloc&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;{&#32;};
845 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
846 
847 _GLIBCXX_END_NAMESPACE_VERSION
848 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
849 
850 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_QUEUE_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
