<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2bits_2shared__ptr__base_8h_source" xml:lang="en-US">
<title>shared_ptr_base.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/bits/shared_ptr_base.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;shared_ptr&#32;and&#32;weak_ptr&#32;implementation&#32;details&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;GCC&#32;Note:&#32;Based&#32;on&#32;files&#32;from&#32;version&#32;1.32.0&#32;of&#32;the&#32;Boost&#32;library.</emphasis>
26 
27 <emphasis role="comment">//&#32;&#32;shared_count.hpp</emphasis>
28 <emphasis role="comment">//&#32;&#32;Copyright&#32;(c)&#32;2001,&#32;2002,&#32;2003&#32;Peter&#32;Dimov&#32;and&#32;Multi&#32;Media&#32;Ltd.</emphasis>
29 
30 <emphasis role="comment">//&#32;&#32;shared_ptr.hpp</emphasis>
31 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;1998,&#32;1999&#32;Greg&#32;Colvin&#32;and&#32;Beman&#32;Dawes.</emphasis>
32 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;2001,&#32;2002,&#32;2003&#32;Peter&#32;Dimov</emphasis>
33 
34 <emphasis role="comment">//&#32;&#32;weak_ptr.hpp</emphasis>
35 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;2001,&#32;2002,&#32;2003&#32;Peter&#32;Dimov</emphasis>
36 
37 <emphasis role="comment">//&#32;&#32;enable_shared_from_this.hpp</emphasis>
38 <emphasis role="comment">//&#32;&#32;Copyright&#32;(C)&#32;2002&#32;Peter&#32;Dimov</emphasis>
39 
40 <emphasis role="comment">//&#32;Distributed&#32;under&#32;the&#32;Boost&#32;Software&#32;License,&#32;Version&#32;1.0.&#32;(See</emphasis>
41 <emphasis role="comment">//&#32;accompanying&#32;file&#32;LICENSE_1_0.txt&#32;or&#32;copy&#32;at</emphasis>
42 <emphasis role="comment">//&#32;http://www.boost.org/LICENSE_1_0.txt)</emphasis>
43 
49 <emphasis role="preprocessor">#ifndef&#32;_SHARED_PTR_BASE_H</emphasis>
50 <emphasis role="preprocessor">#define&#32;_SHARED_PTR_BASE_H&#32;1</emphasis>
51 
52 <emphasis role="preprocessor">#include&#32;&lt;typeinfo&gt;</emphasis>
53 <emphasis role="preprocessor">#include&#32;&lt;bits/allocated_ptr.h&gt;</emphasis>
54 <emphasis role="preprocessor">#include&#32;&lt;bits/allocator.h&gt;</emphasis>
55 <emphasis role="preprocessor">#include&#32;&lt;bits/exception_defines.h&gt;</emphasis>
56 <emphasis role="preprocessor">#include&#32;&lt;bits/functional_hash.h&gt;</emphasis>
57 <emphasis role="preprocessor">#include&#32;&lt;bits/refwrap.h&gt;</emphasis>
58 <emphasis role="preprocessor">#include&#32;&lt;bits/stl_function.h&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;std::less</emphasis>
59 <emphasis role="preprocessor">#include&#32;&lt;bits/unique_ptr.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;ext/aligned_buffer.h&gt;</emphasis>
61 <emphasis role="preprocessor">#include&#32;&lt;ext/atomicity.h&gt;</emphasis>
62 <emphasis role="preprocessor">#include&#32;&lt;ext/concurrence.h&gt;</emphasis>
63 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
64 <emphasis role="preprocessor">#&#32;include&#32;&lt;bit&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__bit_floor</emphasis>
65 <emphasis role="preprocessor">#&#32;include&#32;&lt;compare&gt;</emphasis>
66 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/align.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;std::align</emphasis>
67 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/stl_uninitialized.h&gt;</emphasis>
68 <emphasis role="preprocessor">#endif</emphasis>
69 
70 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
71 {
72 _GLIBCXX_BEGIN_NAMESPACE_VERSION
73 
74 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
75 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
76 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
77 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>auto_ptr;
78 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
79 <emphasis role="preprocessor">#endif</emphasis>
80 
85 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>bad_weak_ptr&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classstd_1_1exception">std::exception</link>
86 &#32;&#32;{
87 &#32;&#32;<emphasis role="keyword">public</emphasis>:
88 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>*&#32;what()&#32;const&#32;noexcept;
89 
90 &#32;&#32;&#32;&#32;virtual&#32;~bad_weak_ptr()&#32;noexcept;
91 &#32;&#32;};
92 
93 &#32;&#32;<emphasis role="comment">//&#32;Substitute&#32;for&#32;bad_weak_ptr&#32;object&#32;in&#32;the&#32;case&#32;of&#32;-fno-exceptions.</emphasis>
94 &#32;&#32;inline&#32;<emphasis role="keywordtype">void</emphasis>
95 &#32;&#32;__throw_bad_weak_ptr()
96 &#32;&#32;{&#32;_GLIBCXX_THROW_OR_ABORT(bad_weak_ptr());&#32;}
97 
98 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_Lock_policy;
99 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::__default_lock_policy;
100 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_S_single;
101 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_S_mutex;
102 &#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__gnu_cxx::_S_atomic;
103 
104 &#32;&#32;<emphasis role="comment">//&#32;Empty&#32;helper&#32;class&#32;except&#32;when&#32;the&#32;template&#32;argument&#32;is&#32;_S_mutex.</emphasis>
105 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
106 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Mutex_base
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;atomic&#32;policy&#32;uses&#32;fully-fenced&#32;builtins,&#32;single&#32;doesn&apos;t&#32;care.</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_need_barriers&#32;=&#32;0&#32;};
111 &#32;&#32;&#32;&#32;};
112 
113 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Mutex_base&lt;_S_mutex&gt;
115 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__gnu_cxx::__mutex
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;policy&#32;is&#32;used&#32;when&#32;atomic&#32;builtins&#32;are&#32;not&#32;available.</emphasis>
119 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;replacement&#32;atomic&#32;operations&#32;might&#32;not&#32;have&#32;the&#32;necessary</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;memory&#32;barriers.</emphasis>
121 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;{&#32;_S_need_barriers&#32;=&#32;1&#32;};
122 &#32;&#32;&#32;&#32;};
123 
124 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_base
126 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Mutex_base&lt;_Lp&gt;
127 &#32;&#32;&#32;&#32;{
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
129 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base()&#32;noexcept
130 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_use_count(1),&#32;_M_weak_count(1)&#32;{&#32;}
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;~_Sp_counted_base()&#32;noexcept
134 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;when&#32;_M_use_count&#32;drops&#32;to&#32;zero,&#32;to&#32;release&#32;the&#32;resources</emphasis>
137 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;managed&#32;by&#32;*this.</emphasis>
138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;noexcept&#32;=&#32;0;
140 
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;when&#32;_M_weak_count&#32;drops&#32;to&#32;zero.</emphasis>
142 &#32;&#32;&#32;&#32;&#32;&#32;virtual&#32;<emphasis role="keywordtype">void</emphasis>
143 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy()&#32;noexcept
144 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
147 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;0;
148 
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Increment&#32;the&#32;use&#32;count&#32;(used&#32;when&#32;the&#32;count&#32;is&#32;greater&#32;than&#32;zero).</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
151 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_ref_copy()
152 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_use_count,&#32;1);&#32;}
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Increment&#32;the&#32;use&#32;count&#32;if&#32;it&#32;is&#32;non-zero,&#32;throw&#32;otherwise.</emphasis>
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_ref_lock()
157 &#32;&#32;&#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!_M_add_ref_lock_nothrow())
159 &#32;&#32;&#32;&#32;&#32;&#32;__throw_bad_weak_ptr();
160 &#32;&#32;&#32;&#32;&#32;&#32;}
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Increment&#32;the&#32;use&#32;count&#32;if&#32;it&#32;is&#32;non-zero.</emphasis>
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;_M_add_ref_lock_nothrow()&#32;noexcept;
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decrement&#32;the&#32;use&#32;count.</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;_M_release()&#32;noexcept;
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Called&#32;by&#32;_M_release()&#32;when&#32;the&#32;use&#32;count&#32;reaches&#32;zero.</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;_M_release_last_use()&#32;noexcept
173 &#32;&#32;&#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_use_count);
175 &#32;&#32;&#32;&#32;_M_dispose();
176 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;There&#32;must&#32;be&#32;a&#32;memory&#32;barrier&#32;between&#32;dispose()&#32;and&#32;destroy()</emphasis>
177 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;to&#32;ensure&#32;that&#32;the&#32;effects&#32;of&#32;dispose()&#32;are&#32;observed&#32;in&#32;the</emphasis>
178 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;thread&#32;that&#32;runs&#32;destroy().</emphasis>
179 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;http://gcc.gnu.org/ml/libstdc++/2005-11/msg00136.html</emphasis>
180 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Mutex_base&lt;_Lp&gt;::_S_need_barriers)
181 &#32;&#32;&#32;&#32;&#32;&#32;{
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_thread_fence&#32;(__ATOMIC_ACQ_REL);
183 &#32;&#32;&#32;&#32;&#32;&#32;}
184 
185 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
186 &#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_weak_count);
187 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_weak_count,
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-1)&#32;==&#32;1)
189 &#32;&#32;&#32;&#32;&#32;&#32;{
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_weak_count);
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy();
192 &#32;&#32;&#32;&#32;&#32;&#32;}
193 &#32;&#32;&#32;&#32;&#32;&#32;}
194 
195 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;As&#32;above,&#32;but&#32;&apos;noinline&apos;&#32;to&#32;reduce&#32;code&#32;size&#32;on&#32;the&#32;cold&#32;path.</emphasis>
196 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__noinline__))
197 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;_M_release_last_use_cold()&#32;noexcept
199 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_release_last_use();&#32;}
200 
201 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Increment&#32;the&#32;weak&#32;count.</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;_M_weak_add_ref()&#32;noexcept
204 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__gnu_cxx::__atomic_add_dispatch(&amp;_M_weak_count,&#32;1);&#32;}
205 
206 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decrement&#32;the&#32;weak&#32;count.</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;_M_weak_release()&#32;noexcept
209 &#32;&#32;&#32;&#32;&#32;&#32;{
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_weak_count);
212 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_weak_count,&#32;-1)&#32;==&#32;1)
213 &#32;&#32;&#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_weak_count);
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_Mutex_base&lt;_Lp&gt;::_S_need_barriers)
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;_M_release(),</emphasis>
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;destroy()&#32;must&#32;observe&#32;results&#32;of&#32;dispose()</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__atomic_thread_fence&#32;(__ATOMIC_ACQ_REL);
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy();
222 &#32;&#32;&#32;&#32;&#32;&#32;}
223 &#32;&#32;&#32;&#32;&#32;&#32;}
224 
225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_use_count()&#32;const&#32;noexcept
227 &#32;&#32;&#32;&#32;&#32;&#32;{
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;memory&#32;barrier&#32;is&#32;used&#32;here&#32;so&#32;there&#32;is&#32;no&#32;synchronization</emphasis>
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;with&#32;other&#32;threads.</emphasis>
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__atomic_load_n(&amp;_M_use_count,&#32;__ATOMIC_RELAXED);
231 &#32;&#32;&#32;&#32;&#32;&#32;}
232 
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
234 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base(_Sp_counted_base&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
235 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base&amp;&#32;operator=(_Sp_counted_base&#32;<emphasis role="keyword">const</emphasis>&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;_M_use_count;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#shared</emphasis>
238 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;&#32;_M_weak_count;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;#weak&#32;+&#32;(#shared&#32;!=&#32;0)</emphasis>
239 &#32;&#32;&#32;&#32;};
240 
241 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
242 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
243 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_single&gt;::
244 &#32;&#32;&#32;&#32;_M_add_ref_lock_nothrow()&#32;noexcept
245 &#32;&#32;&#32;&#32;{
246 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_use_count&#32;==&#32;0)
247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
248 &#32;&#32;&#32;&#32;&#32;&#32;++_M_use_count;
249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
250 &#32;&#32;&#32;&#32;}
251 
252 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
253 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
254 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_mutex&gt;::
255 &#32;&#32;&#32;&#32;_M_add_ref_lock_nothrow()&#32;noexcept
256 &#32;&#32;&#32;&#32;{
257 &#32;&#32;&#32;&#32;&#32;&#32;__gnu_cxx::__scoped_lock&#32;sentry(*<emphasis role="keyword">this</emphasis>);
258 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count,&#32;1)&#32;==&#32;0)
259 &#32;&#32;&#32;&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;_M_use_count&#32;=&#32;0;
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
262 &#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
264 &#32;&#32;&#32;&#32;}
265 
266 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
267 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
268 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_atomic&gt;::
269 &#32;&#32;&#32;&#32;_M_add_ref_lock_nothrow()&#32;noexcept
270 &#32;&#32;&#32;&#32;{
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Perform&#32;lock-free&#32;add-if-not-zero&#32;operation.</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;=&#32;_M_get_use_count();
273 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">do</emphasis>
274 &#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;==&#32;0)
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
277 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Replace&#32;the&#32;current&#32;counter&#32;value&#32;with&#32;the&#32;old&#32;value&#32;+&#32;1,&#32;as</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;long&#32;as&#32;it&apos;s&#32;not&#32;changed&#32;meanwhile.</emphasis>
279 &#32;&#32;&#32;&#32;}
280 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!__atomic_compare_exchange_n(&amp;_M_use_count,&#32;&amp;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>&#32;+&#32;1,
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">true</emphasis>,&#32;__ATOMIC_ACQ_REL,
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ATOMIC_RELAXED));
283 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
284 &#32;&#32;&#32;&#32;}
285 
286 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
288 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_single&gt;::_M_add_ref_copy()
289 &#32;&#32;&#32;&#32;{&#32;++_M_use_count;&#32;}
290 
291 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
293 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_single&gt;::_M_release()&#32;noexcept
294 &#32;&#32;&#32;&#32;{
295 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--_M_use_count&#32;==&#32;0)
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--_M_weak_count&#32;==&#32;0)
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy();
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
301 &#32;&#32;&#32;&#32;}
302 
303 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
304 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
305 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_mutex&gt;::_M_release()&#32;noexcept
306 &#32;&#32;&#32;&#32;{
307 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Be&#32;race-detector-friendly.&#32;&#32;For&#32;more&#32;info&#32;see&#32;bits/c++config.</emphasis>
308 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_use_count);
309 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count,&#32;-1)&#32;==&#32;1)
310 &#32;&#32;&#32;&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;_M_release_last_use();
312 &#32;&#32;&#32;&#32;}
313 &#32;&#32;&#32;&#32;}
314 
315 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
316 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
317 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_atomic&gt;::_M_release()&#32;noexcept
318 &#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_use_count);
320 <emphasis role="preprocessor">#if&#32;!&#32;_GLIBCXX_TSAN</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__lock_free
322 &#32;&#32;&#32;&#32;=&#32;__atomic_always_lock_free(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>),&#32;0)
323 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__atomic_always_lock_free(<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>),&#32;0);
324 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__double_word
325 &#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">long</emphasis>&#32;long)&#32;==&#32;2&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>);
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;ref-count&#32;members&#32;follow&#32;the&#32;vptr,&#32;so&#32;are&#32;aligned&#32;to</emphasis>
327 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;alignof(void*).</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__aligned&#32;=&#32;__alignof(<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>)&#32;&lt;=&#32;<emphasis role="keyword">alignof</emphasis>(<emphasis role="keywordtype">void</emphasis>*);
329 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;_GLIBCXX17_CONSTEXPR&#32;(__lock_free&#32;&amp;&amp;&#32;__double_word&#32;&amp;&amp;&#32;__aligned)
330 &#32;&#32;&#32;&#32;{
331 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__wordbits&#32;=&#32;__CHAR_BIT__&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2atomic__word_8h_1a0c6f0003af1fd2cb9e6926596bf158bc">_Atomic_word</link>);
332 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__shiftbits&#32;=&#32;__double_word&#32;?&#32;__wordbits&#32;:&#32;0;
333 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__unique_ref&#32;=&#32;1LL&#32;+&#32;(1LL&#32;&lt;&lt;&#32;__shiftbits);
334 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__both_counts&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;_M_use_count);
335 
336 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_weak_count);
337 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__atomic_load_n(__both_counts,&#32;__ATOMIC_ACQUIRE)&#32;==&#32;__unique_ref)
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Both&#32;counts&#32;are&#32;1,&#32;so&#32;there&#32;are&#32;no&#32;weak&#32;references&#32;and</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;we&#32;are&#32;releasing&#32;the&#32;last&#32;strong&#32;reference.&#32;No&#32;other</emphasis>
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;threads&#32;can&#32;observe&#32;the&#32;effects&#32;of&#32;this&#32;_M_release()</emphasis>
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;call&#32;(e.g.&#32;calling&#32;use_count())&#32;without&#32;a&#32;data&#32;race.</emphasis>
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_weak_count&#32;=&#32;_M_use_count&#32;=&#32;0;
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_use_count);
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_weak_count);
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_dispose();
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy();
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
350 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count,&#32;-1)&#32;==&#32;1)
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[[__unlikely__]]
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_release_last_use_cold();
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
356 &#32;&#32;&#32;&#32;}
357 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
358 <emphasis role="preprocessor">#endif</emphasis>
359 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__gnu_cxx::__exchange_and_add_dispatch(&amp;_M_use_count,&#32;-1)&#32;==&#32;1)
360 &#32;&#32;&#32;&#32;{
361 &#32;&#32;&#32;&#32;&#32;&#32;_M_release_last_use();
362 &#32;&#32;&#32;&#32;}
363 &#32;&#32;&#32;&#32;}
364 
365 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
366 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
367 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_single&gt;::_M_weak_add_ref()&#32;noexcept
368 &#32;&#32;&#32;&#32;{&#32;++_M_weak_count;&#32;}
369 
370 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
371 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
372 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_single&gt;::_M_weak_release()&#32;noexcept
373 &#32;&#32;&#32;&#32;{
374 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(--_M_weak_count&#32;==&#32;0)
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_destroy();
376 &#32;&#32;&#32;&#32;}
377 
378 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
379 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>
380 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_S_single&gt;::_M_get_use_count()&#32;const&#32;noexcept
381 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_use_count;&#32;}
382 
383 
384 &#32;&#32;<emphasis role="comment">//&#32;Forward&#32;declarations.</emphasis>
385 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
386 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr;
387 
388 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
389 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr;
390 
391 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__enable_shared_from_this;
393 
394 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
395 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>shared_ptr;
396 
397 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>weak_ptr;
399 
400 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
401 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>owner_less;
402 
403 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
404 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>enable_shared_from_this;
405 
406 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
407 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_count;
408 
409 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy&gt;
410 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count;
411 
412 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
413 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;
414 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_atomic;
415 <emphasis role="preprocessor">#endif</emphasis>
416 
417 &#32;&#32;<emphasis role="comment">//&#32;Counted&#32;ptr&#32;with&#32;no&#32;deleter&#32;or&#32;allocator&#32;support</emphasis>
418 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;_Lock_policy&#32;_Lp&gt;
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_ptr&#32;final&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_counted_base&lt;_Lp&gt;
420 &#32;&#32;&#32;&#32;{
421 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
423 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_ptr(_Ptr&#32;__p)&#32;noexcept
424 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__p)&#32;{&#32;}
425 
426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;noexcept
428 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;_M_ptr;&#32;}
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy()&#32;noexcept
432 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">delete</emphasis>&#32;<emphasis role="keyword">this</emphasis>;&#32;}
433 
434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
435 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
437 
438 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_ptr(<emphasis role="keyword">const</emphasis>&#32;_Sp_counted_ptr&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
439 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_ptr&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Sp_counted_ptr&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
440 
441 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
442 &#32;&#32;&#32;&#32;&#32;&#32;_Ptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr;
443 &#32;&#32;&#32;&#32;};
444 
445 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
446 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
447 &#32;&#32;&#32;&#32;_Sp_counted_ptr&lt;nullptr_t,&#32;_S_single&gt;::_M_dispose()&#32;noexcept&#32;{&#32;}
448 
449 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
450 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
451 &#32;&#32;&#32;&#32;_Sp_counted_ptr&lt;nullptr_t,&#32;_S_mutex&gt;::_M_dispose()&#32;noexcept&#32;{&#32;}
452 
453 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
454 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
455 &#32;&#32;&#32;&#32;_Sp_counted_ptr&lt;nullptr_t,&#32;_S_atomic&gt;::_M_dispose()&#32;noexcept&#32;{&#32;}
456 
457 &#32;&#32;<emphasis role="comment">//&#32;FIXME:&#32;once&#32;__has_cpp_attribute(__no_unique_address__))&#32;is&#32;true&#32;for</emphasis>
458 &#32;&#32;<emphasis role="comment">//&#32;all&#32;supported&#32;compilers&#32;we&#32;can&#32;greatly&#32;simplify&#32;_Sp_ebo_helper.</emphasis>
459 &#32;&#32;<emphasis role="comment">//&#32;N.B.&#32;unconditionally&#32;applying&#32;the&#32;attribute&#32;could&#32;change&#32;layout&#32;for</emphasis>
460 &#32;&#32;<emphasis role="comment">//&#32;final&#32;types,&#32;which&#32;currently&#32;cannot&#32;use&#32;EBO&#32;so&#32;have&#32;a&#32;unique&#32;address.</emphasis>
461 
462 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Nm,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__use_ebo&#32;=&#32;!__is_final(_Tp)&#32;&amp;&amp;&#32;__is_empty(_Tp)&gt;
464 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_ebo_helper;
465 
467 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Nm,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
468 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_ebo_helper&lt;_Nm,&#32;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;&#32;:&#32;<emphasis role="keyword">private</emphasis>&#32;_Tp
469 &#32;&#32;&#32;&#32;{
470 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Sp_ebo_helper(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__tp)&#32;:&#32;_Tp(__tp)&#32;{&#32;}
471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Sp_ebo_helper(_Tp&amp;&amp;&#32;__tp)&#32;:&#32;_Tp(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__tp))&#32;{&#32;}
472 
473 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&amp;
474 &#32;&#32;&#32;&#32;&#32;&#32;_S_get(_Sp_ebo_helper&amp;&#32;__eboh)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_Tp&amp;<emphasis role="keyword">&gt;</emphasis>(__eboh);&#32;}
475 &#32;&#32;&#32;&#32;};
476 
478 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">int</emphasis>&#32;_Nm,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
479 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_ebo_helper&lt;_Nm,&#32;_Tp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
480 &#32;&#32;&#32;&#32;{
481 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Sp_ebo_helper(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__tp)&#32;:&#32;_M_tp(__tp)&#32;{&#32;}
482 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Sp_ebo_helper(_Tp&amp;&amp;&#32;__tp)&#32;:&#32;_M_tp(<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__tp))&#32;{&#32;}
483 
484 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp&amp;
485 &#32;&#32;&#32;&#32;&#32;&#32;_S_get(_Sp_ebo_helper&amp;&#32;__eboh)
486 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__eboh._M_tp;&#32;}
487 
488 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
489 &#32;&#32;&#32;&#32;&#32;&#32;_Tp&#32;_M_tp;
490 &#32;&#32;&#32;&#32;};
491 
492 &#32;&#32;<emphasis role="comment">//&#32;Support&#32;for&#32;custom&#32;deleter&#32;and/or&#32;allocator</emphasis>
493 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;_Lock_policy&#32;_Lp&gt;
494 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_deleter&#32;final&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_counted_base&lt;_Lp&gt;
495 &#32;&#32;&#32;&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Impl&#32;:&#32;_Sp_ebo_helper&lt;0,&#32;_Deleter&gt;,&#32;_Sp_ebo_helper&lt;1,&#32;_Alloc&gt;
497 &#32;&#32;&#32;&#32;&#32;&#32;{
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Sp_ebo_helper&lt;0,&#32;_Deleter&gt;&#32;_Del_base;
499 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Sp_ebo_helper&lt;1,&#32;_Alloc&gt;&#32;&#32;&#32;_Alloc_base;
500 
501 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
502 &#32;&#32;&#32;&#32;_Impl(_Ptr&#32;__p,&#32;_Deleter&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;noexcept
503 &#32;&#32;&#32;&#32;:&#32;_Del_base(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__d)),&#32;_Alloc_base(__a),&#32;_M_ptr(__p)
504 &#32;&#32;&#32;&#32;{&#32;}
505 
506 &#32;&#32;&#32;&#32;_Deleter&amp;&#32;_M_del()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Del_base::_S_get(*<emphasis role="keyword">this</emphasis>);&#32;}
507 &#32;&#32;&#32;&#32;_Alloc&amp;&#32;_M_alloc()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Alloc_base::_S_get(*<emphasis role="keyword">this</emphasis>);&#32;}
508 
509 &#32;&#32;&#32;&#32;_Ptr&#32;_M_ptr;
510 &#32;&#32;&#32;&#32;&#32;&#32;};
511 
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__allocator_type&#32;=&#32;__alloc_rebind&lt;_Alloc,&#32;_Sp_counted_deleter&gt;;
514 
515 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__d(__p)&#32;must&#32;not&#32;throw.</emphasis>
516 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_deleter(_Ptr&#32;__p,&#32;_Deleter&#32;__d)&#32;noexcept
517 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__d),&#32;_Alloc())&#32;{&#32;}
518 
519 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__d(__p)&#32;must&#32;not&#32;throw.</emphasis>
520 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_deleter(_Ptr&#32;__p,&#32;_Deleter&#32;__d,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;noexcept
521 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_impl(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__d),&#32;__a)&#32;{&#32;}
522 
523 &#32;&#32;&#32;&#32;&#32;&#32;~_Sp_counted_deleter()&#32;noexcept&#32;{&#32;}
524 
525 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
526 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;noexcept
527 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_impl._M_del()(_M_impl._M_ptr);&#32;}
528 
529 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
530 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy()&#32;noexcept
531 &#32;&#32;&#32;&#32;&#32;&#32;{
532 &#32;&#32;&#32;&#32;__allocator_type&#32;__a(_M_impl._M_alloc());
533 &#32;&#32;&#32;&#32;__allocated_ptr&lt;__allocator_type&gt;&#32;__guard_ptr{&#32;__a,&#32;<emphasis role="keyword">this</emphasis>&#32;};
534 &#32;&#32;&#32;&#32;this-&gt;~_Sp_counted_deleter();
535 &#32;&#32;&#32;&#32;&#32;&#32;}
536 
537 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
538 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;type_info&amp;&#32;__ti&#32;[[__gnu__::__unused__]])&#32;<emphasis role="keyword">noexcept</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;{
540 <emphasis role="preprocessor">#if&#32;__cpp_rtti</emphasis>
541 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
542 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2400.&#32;shared_ptr&apos;s&#32;get_deleter()&#32;should&#32;use&#32;addressof()</emphasis>
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ti&#32;==&#32;<emphasis role="keyword">typeid</emphasis>(_Deleter)
544 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;std::__addressof(_M_impl._M_del())
545 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;nullptr;
546 <emphasis role="preprocessor">#else</emphasis>
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
548 <emphasis role="preprocessor">#endif</emphasis>
549 &#32;&#32;&#32;&#32;&#32;&#32;}
550 
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
552 &#32;&#32;&#32;&#32;&#32;&#32;_Impl&#32;_M_impl;
553 &#32;&#32;&#32;&#32;};
554 
555 &#32;&#32;<emphasis role="comment">//&#32;helpers&#32;for&#32;make_shared&#32;/&#32;allocate_shared</emphasis>
556 
557 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_make_shared_tag
558 &#32;&#32;{
559 &#32;&#32;<emphasis role="keyword">private</emphasis>:
560 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;_Lock_policy&#32;_Lp&gt;
561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_ptr_inplace;
562 
563 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;type_info&amp;
564 &#32;&#32;&#32;&#32;_S_ti()&#32;noexcept&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
565 &#32;&#32;&#32;&#32;{
566 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">alignas</emphasis>(type_info)&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__tag[<emphasis role="keyword">sizeof</emphasis>(type_info)]&#32;=&#32;{&#32;};
567 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>type_info&amp;<emphasis role="keyword">&gt;</emphasis>(__tag);
568 &#32;&#32;&#32;&#32;}
569 
570 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_S_eq(<emphasis role="keyword">const</emphasis>&#32;type_info&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
571 &#32;&#32;};
572 
573 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
574 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_alloc_shared_tag
575 &#32;&#32;&#32;&#32;{
576 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;_M_a;
577 &#32;&#32;&#32;&#32;};
578 
579 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;_Lock_policy&#32;_Lp&gt;
580 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_ptr_inplace&#32;final&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_counted_base&lt;_Lp&gt;
581 &#32;&#32;&#32;&#32;{
582 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Impl&#32;:&#32;_Sp_ebo_helper&lt;0,&#32;_Alloc&gt;
583 &#32;&#32;&#32;&#32;&#32;&#32;{
584 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Sp_ebo_helper&lt;0,&#32;_Alloc&gt;&#32;&#32;&#32;_A_base;
585 
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
587 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;_Impl(_Alloc&#32;__a)&#32;noexcept&#32;:&#32;_A_base(__a)&#32;{&#32;}
588 
589 &#32;&#32;&#32;&#32;_Alloc&amp;&#32;_M_alloc()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_A_base::_S_get(*<emphasis role="keyword">this</emphasis>);&#32;}
590 
591 &#32;&#32;&#32;&#32;<link linkend="_struct____gnu__cxx_1_1____aligned__buffer">__gnu_cxx::__aligned_buffer&lt;_Tp&gt;</link>&#32;_M_storage;
592 &#32;&#32;&#32;&#32;&#32;&#32;};
593 
594 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__allocator_type&#32;=&#32;__alloc_rebind&lt;_Alloc,&#32;_Sp_counted_ptr_inplace&gt;;
596 
597 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Alloc&#32;parameter&#32;is&#32;not&#32;a&#32;reference&#32;so&#32;doesn&apos;t&#32;alias&#32;anything&#32;in&#32;__args</emphasis>
598 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
599 &#32;&#32;&#32;&#32;_Sp_counted_ptr_inplace(_Alloc&#32;__a,&#32;_Args&amp;&amp;...&#32;__args)
600 &#32;&#32;&#32;&#32;:&#32;_M_impl(__a)
601 &#32;&#32;&#32;&#32;{
602 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
603 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2070.&#32;&#32;allocate_shared&#32;should&#32;use&#32;allocator_traits&lt;A&gt;::construct</emphasis>
604 &#32;&#32;&#32;&#32;&#32;&#32;allocator_traits&lt;_Alloc&gt;::construct(__a,&#32;_M_ptr(),
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);&#32;<emphasis role="comment">//&#32;might&#32;throw</emphasis>
606 &#32;&#32;&#32;&#32;}
607 
608 &#32;&#32;&#32;&#32;&#32;&#32;~_Sp_counted_ptr_inplace()&#32;noexcept&#32;{&#32;}
609 
610 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
611 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;noexcept
612 &#32;&#32;&#32;&#32;&#32;&#32;{
613 &#32;&#32;&#32;&#32;allocator_traits&lt;_Alloc&gt;::destroy(_M_impl._M_alloc(),&#32;_M_ptr());
614 &#32;&#32;&#32;&#32;&#32;&#32;}
615 
616 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Override&#32;because&#32;the&#32;allocator&#32;needs&#32;to&#32;know&#32;the&#32;dynamic&#32;type</emphasis>
617 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
618 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy()&#32;noexcept
619 &#32;&#32;&#32;&#32;&#32;&#32;{
620 &#32;&#32;&#32;&#32;__allocator_type&#32;__a(_M_impl._M_alloc());
621 &#32;&#32;&#32;&#32;__allocated_ptr&lt;__allocator_type&gt;&#32;__guard_ptr{&#32;__a,&#32;<emphasis role="keyword">this</emphasis>&#32;};
622 &#32;&#32;&#32;&#32;this-&gt;~_Sp_counted_ptr_inplace();
623 &#32;&#32;&#32;&#32;&#32;&#32;}
624 
625 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
626 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count&lt;_Lp&gt;;&#32;<emphasis role="comment">//&#32;To&#32;be&#32;able&#32;to&#32;call&#32;_M_ptr().</emphasis>
627 
628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;longer&#32;used,&#32;but&#32;code&#32;compiled&#32;against&#32;old&#32;libstdc++&#32;headers</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;might&#32;still&#32;call&#32;it&#32;from&#32;__shared_ptr&#32;ctor&#32;to&#32;get&#32;the&#32;pointer&#32;out.</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*
631 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;&#32;__ti)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">override</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;{
633 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis>typename&#32;remove_cv&lt;_Tp&gt;::type*<emphasis role="keyword">&gt;</emphasis>(_M_ptr());
634 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;the&#32;fake&#32;type_info&#32;first,&#32;so&#32;we&#32;don&apos;t&#32;try&#32;to&#32;access&#32;it</emphasis>
635 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;as&#32;a&#32;real&#32;type_info&#32;object.&#32;Otherwise,&#32;check&#32;if&#32;it&apos;s&#32;the&#32;real</emphasis>
636 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;type_info&#32;for&#32;this&#32;class.&#32;With&#32;RTTI&#32;enabled&#32;we&#32;can&#32;check&#32;directly,</emphasis>
637 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;or&#32;call&#32;a&#32;library&#32;function&#32;to&#32;do&#32;it.</emphasis>
638 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&amp;__ti&#32;==&#32;&amp;_Sp_make_shared_tag::_S_ti()
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||
640 <emphasis role="preprocessor">#if&#32;__cpp_rtti</emphasis>
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__ti&#32;==&#32;<emphasis role="keyword">typeid</emphasis>(_Sp_make_shared_tag)
642 #<emphasis role="keywordflow">else</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sp_make_shared_tag::_S_eq(__ti)
644 <emphasis role="preprocessor">#endif</emphasis>
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;)
646 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr;
647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
648 &#32;&#32;&#32;&#32;&#32;&#32;}
649 
650 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;_M_ptr()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_impl._M_storage._M_ptr();&#32;}
651 
652 &#32;&#32;&#32;&#32;&#32;&#32;_Impl&#32;_M_impl;
653 &#32;&#32;&#32;&#32;};
654 
655 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
656 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_smart_ptr_for_overwrite&#32;202002L</emphasis>
657 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_overwrite_tag&#32;{&#32;};
658 
659 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;used&#32;for&#32;make_shared_for_overwrite&lt;non-array&gt;().</emphasis>
660 &#32;&#32;<emphasis role="comment">//&#32;This&#32;partial&#32;specialization&#32;is&#32;used&#32;when&#32;the&#32;allocator&apos;s&#32;value&#32;type</emphasis>
661 &#32;&#32;<emphasis role="comment">//&#32;is&#32;the&#32;special&#32;_Sp_overwrite_tag&#32;type.</emphasis>
662 <emphasis role="preprocessor">#if&#32;__cpp_concepts</emphasis>
663 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;_Lock_policy&#32;_Lp&gt;
664 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;is_same_v&lt;typename&#32;_Alloc::value_type,&#32;_Sp_overwrite_tag&gt;
665 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_ptr_inplace&lt;_Tp,&#32;_Alloc,&#32;_Lp&gt;&#32;final
666 #else
667 &#32;&#32;template&lt;typename&#32;_Tp,&#32;template&lt;typename&gt;&#32;class&#32;_Alloc,&#32;_Lock_policy&#32;_Lp&gt;
668 &#32;&#32;&#32;&#32;class&#32;_Sp_counted_ptr_inplace&lt;_Tp,&#32;_Alloc&lt;_Sp_overwrite_tag&gt;,&#32;_Lp&gt;&#32;final
669 #endif
670 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_counted_base&lt;_Lp&gt;
671 &#32;&#32;&#32;&#32;{
672 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Alloc&#32;_M_alloc;
673 
674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>{
675 &#32;&#32;&#32;&#32;_Tp&#32;_M_obj;
676 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_unused;
677 &#32;&#32;&#32;&#32;&#32;&#32;};
678 
679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count&lt;_Lp&gt;;&#32;<emphasis role="comment">//&#32;To&#32;be&#32;able&#32;to&#32;call&#32;_M_ptr().</emphasis>
680 
681 &#32;&#32;&#32;&#32;&#32;&#32;_Tp*&#32;_M_ptr()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__addressof(_M_obj);&#32;}
682 
683 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
684 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__allocator_type&#32;=&#32;__alloc_rebind&lt;_Alloc,&#32;_Sp_counted_ptr_inplace&gt;;
685 
686 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_ptr_inplace(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
687 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_alloc(__a)
688 &#32;&#32;&#32;&#32;&#32;&#32;{
689 &#32;&#32;&#32;&#32;::new((<emphasis role="keywordtype">void</emphasis>*)_M_ptr())&#32;_Tp;&#32;<emphasis role="comment">//&#32;default-initialized,&#32;for&#32;overwrite.</emphasis>
690 &#32;&#32;&#32;&#32;&#32;&#32;}
691 
692 &#32;&#32;&#32;&#32;&#32;&#32;~_Sp_counted_ptr_inplace()&#32;noexcept&#32;{&#32;}
693 
694 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
695 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;noexcept
696 &#32;&#32;&#32;&#32;&#32;&#32;{
697 &#32;&#32;&#32;&#32;_M_obj.~_Tp();
698 &#32;&#32;&#32;&#32;&#32;&#32;}
699 
700 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Override&#32;because&#32;the&#32;allocator&#32;needs&#32;to&#32;know&#32;the&#32;dynamic&#32;type</emphasis>
701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
702 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy()&#32;noexcept
703 &#32;&#32;&#32;&#32;&#32;&#32;{
704 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;__allocator_type&gt;::pointer;
705 &#32;&#32;&#32;&#32;__allocator_type&#32;__a(_M_alloc);
706 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__p&#32;=&#32;pointer_traits&lt;pointer&gt;::pointer_to(*<emphasis role="keyword">this</emphasis>);
707 &#32;&#32;&#32;&#32;__allocated_ptr&lt;__allocator_type&gt;&#32;__guard_ptr{&#32;__a,&#32;__p&#32;};
708 &#32;&#32;&#32;&#32;this-&gt;~_Sp_counted_ptr_inplace();
709 &#32;&#32;&#32;&#32;&#32;&#32;}
710 
711 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
712 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">override</emphasis>
713 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
714 &#32;&#32;&#32;&#32;};
715 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
716 
717 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
718 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_shared_ptr_arrays&#32;201611L</emphasis>
719 <emphasis role="preprocessor">#else</emphasis>
720 <emphasis role="preprocessor">#&#32;define&#32;__cpp_lib_shared_ptr_arrays&#32;201707L</emphasis>
721 
722 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_overwrite_tag;
723 
724 &#32;&#32;<emphasis role="comment">//&#32;For&#32;make_shared&lt;T[]&gt;,&#32;make_shared&lt;T[N]&gt;,&#32;allocate_shared&lt;T[]&gt;&#32;etc.</emphasis>
725 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
726 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_counted_array_base
727 &#32;&#32;&#32;&#32;{
728 &#32;&#32;&#32;&#32;&#32;&#32;[[no_unique_address]]&#32;_Alloc&#32;_M_alloc{};
729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_n&#32;=&#32;0;
730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;_M_overwrite&#32;=&#32;<emphasis role="keyword">false</emphasis>;
731 
732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::pointer
733 &#32;&#32;&#32;&#32;&#32;&#32;_M_alloc_array(<emphasis role="keywordtype">size_t</emphasis>&#32;__tail)
734 &#32;&#32;&#32;&#32;&#32;&#32;{
735 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::allocate(_M_alloc,&#32;_M_n&#32;+&#32;__tail);
736 &#32;&#32;&#32;&#32;&#32;&#32;}
737 
738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
739 &#32;&#32;&#32;&#32;&#32;&#32;_M_dealloc_array(<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::pointer&#32;__p,
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__tail)
741 &#32;&#32;&#32;&#32;&#32;&#32;{
742 &#32;&#32;&#32;&#32;allocator_traits&lt;_Alloc&gt;::deallocate(_M_alloc,&#32;__p,&#32;_M_n&#32;+&#32;__tail);
743 &#32;&#32;&#32;&#32;&#32;&#32;}
744 
745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Init&#32;the&#32;array&#32;elements</emphasis>
746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Init&gt;
747 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
748 &#32;&#32;&#32;&#32;_M_init(<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::value_type*&#32;__p,
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Init&#32;__init)
750 &#32;&#32;&#32;&#32;{
751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;remove_pointer_t&lt;_Init&gt;;
752 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::value_type;
753 
754 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_same_v&lt;_Init,&#32;_Sp_overwrite_tag&gt;)
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1acf95338aa12ecf2e9d44b3195412bfac">std::uninitialized_default_construct_n</link>(__p,&#32;_M_n);
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_overwrite&#32;=&#32;<emphasis role="keyword">true</emphasis>;
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__init&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_default_n_a(__p,&#32;_M_n,&#32;_M_alloc);
761 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(!is_array_v&lt;_Tp&gt;)
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_fill_n_a(__p,&#32;_M_n,&#32;*__init,&#32;_M_alloc);
763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
765 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
766 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wunused-local-typedefs&quot;</emphasis>
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Iter
768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>value_type&#32;=&#32;_Up;
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*;
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>reference&#32;=&#32;<emphasis role="keyword">const</emphasis>&#32;_Up&amp;;
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>iterator_category&#32;=&#32;forward_iterator_tag;
774 
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Up*&#32;_M_p;
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_len;
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_pos;
778 
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter&amp;&#32;operator++()&#32;{&#32;++_M_pos;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter&#32;operator++(<emphasis role="keywordtype">int</emphasis>)&#32;{&#32;<emphasis role="keyword">auto</emphasis>&#32;__i(*<emphasis role="keyword">this</emphasis>);&#32;++_M_pos;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__i;&#32;}
781 
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_p[_M_pos&#32;%&#32;_M_len];&#32;}
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;operator-&gt;()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_p&#32;+&#32;(_M_pos&#32;%&#32;_M_len);&#32;}
784 
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;_Iter&amp;&#32;__i)<emphasis role="keyword">&#32;const</emphasis>
786 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pos&#32;==&#32;__i._M_pos;&#32;}
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
788 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
789 
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter&#32;__first{_S_first_elem(__init),&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)};
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Iter&#32;__last&#32;=&#32;__first;
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__last._M_pos&#32;=&#32;_M_n;
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::__uninitialized_copy_a(__first,&#32;__last,&#32;__p,&#32;_M_alloc);
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
795 &#32;&#32;&#32;&#32;}
796 
797 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Destroy&#32;the&#32;array&#32;elements</emphasis>
799 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
800 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose_array(<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::value_type*&#32;__p)
801 &#32;&#32;&#32;&#32;&#32;&#32;{
802 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_overwrite)
803 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a8f834ac1395ecb3ee484e6dcdbd8998c">std::destroy_n</link>(__p,&#32;_M_n);
804 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
805 &#32;&#32;&#32;&#32;&#32;&#32;{
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n&#32;=&#32;_M_n;
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(__n--)
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_traits&lt;_Alloc&gt;::destroy(_M_alloc,&#32;__p&#32;+&#32;__n);
809 &#32;&#32;&#32;&#32;&#32;&#32;}
810 &#32;&#32;&#32;&#32;&#32;&#32;}
811 
812 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
814 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_Tp*
815 &#32;&#32;&#32;&#32;_S_first_elem(_Tp*&#32;__p)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;&#32;}
816 
817 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
818 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
819 &#32;&#32;&#32;&#32;_S_first_elem(_Tp&#32;(*__p)[_Nm])&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_S_first_elem(*__p);&#32;}
820 &#32;&#32;&#32;&#32;};
821 
822 &#32;&#32;<emphasis role="comment">//&#32;Control&#32;block&#32;for&#32;make_shared&lt;T[]&gt;,&#32;make_shared&lt;T[N]&gt;&#32;etc.&#32;that&#32;will&#32;be</emphasis>
823 &#32;&#32;<emphasis role="comment">//&#32;placed&#32;into&#32;unused&#32;memory&#32;at&#32;the&#32;end&#32;of&#32;the&#32;array.</emphasis>
824 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;_Lock_policy&#32;_Lp&gt;
825 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_counted_array&#32;final
826 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_counted_base&lt;_Lp&gt;,&#32;_Sp_counted_array_base&lt;_Alloc&gt;
827 &#32;&#32;&#32;&#32;{
828 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::pointer;
829 
830 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;_M_alloc_ptr;
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;_M_ptr()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::to_address(_M_alloc_ptr);&#32;}
833 
834 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count&lt;_Lp&gt;;&#32;<emphasis role="comment">//&#32;To&#32;be&#32;able&#32;to&#32;call&#32;_M_ptr().</emphasis>
835 
836 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
837 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_array(<emphasis role="keyword">const</emphasis>&#32;_Sp_counted_array_base&lt;_Alloc&gt;&amp;&#32;__a,
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p)&#32;noexcept
839 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Sp_counted_array_base&lt;_Alloc&gt;(__a),&#32;_M_alloc_ptr(__p)
840 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
841 
842 &#32;&#32;&#32;&#32;&#32;&#32;~_Sp_counted_array()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
843 
844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
845 &#32;&#32;&#32;&#32;&#32;&#32;_M_dispose()&#32;noexcept
846 &#32;&#32;&#32;&#32;&#32;&#32;{
847 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;_M_n)
848 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_dispose_array(_M_ptr());
849 &#32;&#32;&#32;&#32;&#32;&#32;}
850 
851 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Override&#32;because&#32;the&#32;allocator&#32;needs&#32;to&#32;know&#32;the&#32;dynamic&#32;type</emphasis>
852 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
853 &#32;&#32;&#32;&#32;&#32;&#32;_M_destroy()&#32;noexcept
854 &#32;&#32;&#32;&#32;&#32;&#32;{
855 &#32;&#32;&#32;&#32;_Sp_counted_array_base&lt;_Alloc&gt;&#32;__a&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
856 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;__p&#32;=&#32;_M_alloc_ptr;
857 &#32;&#32;&#32;&#32;this-&gt;~_Sp_counted_array();
858 &#32;&#32;&#32;&#32;__a._M_dealloc_array(__p,&#32;_S_tail());
859 &#32;&#32;&#32;&#32;&#32;&#32;}
860 
861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;the&#32;number&#32;of&#32;additional&#32;array&#32;elements&#32;that&#32;must&#32;be</emphasis>
862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;allocated&#32;in&#32;order&#32;to&#32;store&#32;a&#32;_Sp_counted_array&#32;at&#32;the&#32;end.</emphasis>
863 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>
864 &#32;&#32;&#32;&#32;&#32;&#32;_S_tail()
865 &#32;&#32;&#32;&#32;&#32;&#32;{
866 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;array&#32;elemenent&#32;type.</emphasis>
867 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::value_type;
868 
869 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;space&#32;needed&#32;to&#32;store&#32;a&#32;_Sp_counted_array&#32;object.</emphasis>
870 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__bytes&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Sp_counted_array);
871 
872 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;any&#32;padding&#32;needed&#32;for&#32;manual&#32;alignment&#32;within&#32;the&#32;buffer.</emphasis>
873 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">alignof</emphasis>(_Tp)&#32;&lt;&#32;<emphasis role="keyword">alignof</emphasis>(_Sp_counted_array))
874 &#32;&#32;&#32;&#32;&#32;&#32;__bytes&#32;+=&#32;<emphasis role="keyword">alignof</emphasis>(_Sp_counted_array)&#32;-&#32;<emphasis role="keyword">alignof</emphasis>(_Tp);
875 
876 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__bytes&#32;+&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp)&#32;-&#32;1)&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(_Tp);
877 &#32;&#32;&#32;&#32;&#32;&#32;}
878 
879 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
880 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="keyword">override</emphasis>
881 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
882 &#32;&#32;&#32;&#32;};
883 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++20</emphasis>
884 
885 &#32;&#32;<emphasis role="comment">//&#32;The&#32;default&#32;deleter&#32;for&#32;shared_ptr&lt;T[]&gt;&#32;and&#32;shared_ptr&lt;T[N]&gt;.</emphasis>
886 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_array_delete
887 &#32;&#32;{
888 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
889 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;operator()(_Yp*&#32;__p)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keyword">delete</emphasis>[]&#32;__p;&#32;}
890 &#32;&#32;};
891 
892 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
893 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count
894 &#32;&#32;&#32;&#32;{
895 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prevent&#32;_Sp_alloc_shared_tag&#32;from&#32;matching&#32;the&#32;shared_ptr(P,&#32;D)&#32;ctor.</emphasis>
896 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
897 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_alloc_shared_tag&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;&#32;};
898 
899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
900 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_alloc_shared_tag&lt;_Sp_alloc_shared_tag&lt;_Tp&gt;&gt;&#32;{&#32;};
901 
902 <emphasis role="preprocessor">#if&#32;__cpp_lib_shared_ptr_arrays&#32;&gt;=&#32;201707L</emphasis>
903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
904 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__not_alloc_shared_tag&lt;_Sp_counted_array_base&lt;_Alloc&gt;&gt;&#32;{&#32;};
905 <emphasis role="preprocessor">#endif</emphasis>
906 
907 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
908 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__shared_count()&#32;noexcept&#32;:&#32;_M_pi(0)
909 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
910 
911 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
913 &#32;&#32;&#32;&#32;__shared_count(_Ptr&#32;__p)&#32;:&#32;_M_pi(0)
914 &#32;&#32;&#32;&#32;{
915 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;_Sp_counted_ptr&lt;_Ptr,&#32;_Lp&gt;(__p);
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
919 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;__p;
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
924 &#32;&#32;&#32;&#32;}
925 
926 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
927 &#32;&#32;&#32;&#32;__shared_count(_Ptr&#32;__p,&#32;<emphasis role="comment">/*&#32;is_array&#32;=&#32;*/</emphasis>&#32;false_type)
928 &#32;&#32;&#32;&#32;:&#32;__shared_count(__p)
929 &#32;&#32;&#32;&#32;{&#32;}
930 
931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
932 &#32;&#32;&#32;&#32;__shared_count(_Ptr&#32;__p,&#32;<emphasis role="comment">/*&#32;is_array&#32;=&#32;*/</emphasis>&#32;true_type)
933 &#32;&#32;&#32;&#32;:&#32;__shared_count(__p,&#32;__sp_array_delete{},&#32;allocator&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;())
934 &#32;&#32;&#32;&#32;{&#32;}
935 
936 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__not_alloc_shared_tag&lt;_Deleter&gt;::type&gt;
938 &#32;&#32;&#32;&#32;__shared_count(_Ptr&#32;__p,&#32;_Deleter&#32;__d)
939 &#32;&#32;&#32;&#32;:&#32;__shared_count(__p,&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__d),&#32;allocator&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;())
940 &#32;&#32;&#32;&#32;{&#32;}
941 
942 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__not_alloc_shared_tag&lt;_Deleter&gt;::type&gt;
944 &#32;&#32;&#32;&#32;__shared_count(_Ptr&#32;__p,&#32;_Deleter&#32;__d,&#32;_Alloc&#32;__a)&#32;:&#32;_M_pi(0)
945 &#32;&#32;&#32;&#32;{
946 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Sp_counted_deleter&lt;_Ptr,&#32;_Deleter,&#32;_Alloc,&#32;_Lp&gt;&#32;_Sp_cd_type;
947 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a130bf0cd31a0783cd03563f46b46915b">__try</link>
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sp_cd_type::__allocator_type&#32;__a2(__a);
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__guard&#32;=&#32;std::__allocate_guarded(__a2);
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sp_cd_type*&#32;__mem&#32;=&#32;__guard.get();
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(__mem)&#32;_Sp_cd_type(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__d),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a));
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;__mem;
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__guard&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
956 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a9e51d2f324c18a996a3e4f9a6ba0f6c2">__catch</link>(...)
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__d(__p);&#32;<emphasis role="comment">//&#32;Call&#32;_Deleter&#32;on&#32;__p.</emphasis>
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2exception__defines_8h_1a92ef03a5310b10a4243a6ec8f43494b5">__throw_exception_again</link>;
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
961 &#32;&#32;&#32;&#32;}
962 
963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
964 &#32;&#32;&#32;&#32;__shared_count(_Tp*&amp;&#32;__p,&#32;_Sp_alloc_shared_tag&lt;_Alloc&gt;&#32;__a,
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Args&amp;&amp;...&#32;__args)
966 &#32;&#32;&#32;&#32;{
967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Sp_counted_ptr_inplace&lt;_Tp,&#32;_Alloc,&#32;_Lp&gt;&#32;_Sp_cp_type;
968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sp_cp_type::__allocator_type&#32;__a2(__a._M_a);
969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__guard&#32;=&#32;std::__allocate_guarded(__a2);
970 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_cp_type*&#32;__mem&#32;=&#32;__guard.get();
971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi&#32;=&#32;::new&#32;(__mem)
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sp_cp_type(__a._M_a,&#32;std::forward&lt;_Args&gt;(__args)...);
973 &#32;&#32;&#32;&#32;&#32;&#32;__guard&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
974 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;__pi;
975 &#32;&#32;&#32;&#32;&#32;&#32;__p&#32;=&#32;__pi-&gt;_M_ptr();
976 &#32;&#32;&#32;&#32;}
977 
978 <emphasis role="preprocessor">#if&#32;__cpp_lib_shared_ptr_arrays&#32;&gt;=&#32;201707L</emphasis>
979 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Init&gt;
980 &#32;&#32;&#32;&#32;__shared_count(_Tp*&amp;&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;_Sp_counted_array_base&lt;_Alloc&gt;&amp;&#32;__a,
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Init&#32;__init)
982 &#32;&#32;&#32;&#32;{
983 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up&#32;=&#32;remove_all_extents_t&lt;_Tp&gt;;
984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same_v&lt;_Up,&#32;typename&#32;_Alloc::value_type&gt;);
985 
986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp_ca_type&#32;=&#32;_Sp_counted_array&lt;_Alloc,&#32;_Lp&gt;;
987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__tail&#32;=&#32;_Sp_ca_type::_S_tail();
988 
989 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Guarded_ptr&#32;:&#32;_Sp_counted_array_base&lt;_Alloc&gt;
990 &#32;&#32;&#32;&#32;&#32;&#32;{
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::pointer&#32;_M_ptr;
992 
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Guarded_ptr(_Sp_counted_array_base&lt;_Alloc&gt;&#32;__a)
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Sp_counted_array_base&lt;_Alloc&gt;(__a),
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr(this-&gt;_M_alloc_array(_Sp_ca_type::_S_tail()))
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
997 
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~_Guarded_ptr()
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_ptr)
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;_M_dealloc_array(_M_ptr,&#32;_Sp_ca_type::_S_tail());
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1003 &#32;&#32;&#32;&#32;&#32;&#32;};
1004 
1005 &#32;&#32;&#32;&#32;&#32;&#32;_Guarded_ptr&#32;__guard{__a};
1006 &#32;&#32;&#32;&#32;&#32;&#32;_Up*&#32;<emphasis role="keyword">const</emphasis>&#32;__raw&#32;=&#32;std::to_address(__guard._M_ptr);
1007 &#32;&#32;&#32;&#32;&#32;&#32;__guard._M_init(__raw,&#32;__init);&#32;<emphasis role="comment">//&#32;might&#32;throw</emphasis>
1008 
1009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;__c&#32;=&#32;__raw&#32;+&#32;__a._M_n;
1010 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(<emphasis role="keyword">alignof</emphasis>(_Up)&#32;&lt;&#32;<emphasis role="keyword">alignof</emphasis>(_Sp_ca_type))
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__space&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(_Up)&#32;*&#32;__tail;
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c&#32;=&#32;std::align(<emphasis role="keyword">alignof</emphasis>(_Sp_ca_type),&#32;<emphasis role="keyword">sizeof</emphasis>(_Sp_ca_type),
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__c,&#32;__space);
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__pi&#32;=&#32;::new(__c)&#32;_Sp_ca_type(__guard,&#32;__guard._M_ptr);
1017 &#32;&#32;&#32;&#32;&#32;&#32;__guard._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1018 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;__pi;
1019 &#32;&#32;&#32;&#32;&#32;&#32;__p&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>_Tp*<emphasis role="keyword">&gt;</emphasis>(__raw);
1020 &#32;&#32;&#32;&#32;}
1021 <emphasis role="preprocessor">#endif</emphasis>
1022 
1023 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1024 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
1025 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
1026 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Special&#32;case&#32;for&#32;auto_ptr&lt;_Tp&gt;&#32;to&#32;provide&#32;the&#32;strong&#32;guarantee.</emphasis>
1027 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1029 &#32;&#32;&#32;&#32;__shared_count(std::auto_ptr&lt;_Tp&gt;&amp;&amp;&#32;__r);
1030 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1031 <emphasis role="preprocessor">#endif</emphasis>
1032 
1033 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Special&#32;case&#32;for&#32;unique_ptr&lt;_Tp,_Del&gt;&#32;to&#32;provide&#32;the&#32;strong&#32;guarantee.</emphasis>
1034 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Del&gt;
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1036 &#32;&#32;&#32;&#32;__shared_count(std::unique_ptr&lt;_Tp,&#32;_Del&gt;&amp;&amp;&#32;__r)&#32;:&#32;_M_pi(0)
1037 &#32;&#32;&#32;&#32;{
1038 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1039 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2415.&#32;Inconsistency&#32;between&#32;unique_ptr&#32;and&#32;shared_ptr</emphasis>
1040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__r.get()&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1042 
1043 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Ptr&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;unique_ptr&lt;_Tp,&#32;_Del&gt;::pointer;
1044 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Del2&#32;=&#32;__conditional_t&lt;is_reference&lt;_Del&gt;::value,
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference_wrapper&lt;typename&#32;remove_reference&lt;_Del&gt;::type&gt;,
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Del&gt;;
1047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp_cd_type
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;_Sp_counted_deleter&lt;_Ptr,&#32;_Del2,&#32;allocator&lt;void&gt;,&#32;_Lp&gt;;
1049 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Alloc&#32;=&#32;allocator&lt;_Sp_cd_type&gt;;
1050 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Alloc_traits&#32;=&#32;allocator_traits&lt;_Alloc&gt;;
1051 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc&#32;__a;
1052 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_cd_type*&#32;__mem&#32;=&#32;_Alloc_traits::allocate(__a,&#32;1);
1053 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
1054 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3548.&#32;shared_ptr&#32;construction&#32;from&#32;unique_ptr&#32;should&#32;move</emphasis>
1055 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(not&#32;copy)&#32;the&#32;deleter</emphasis>
1056 &#32;&#32;&#32;&#32;&#32;&#32;_Alloc_traits::construct(__a,&#32;__mem,&#32;__r.release(),
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Del&gt;(__r.get_deleter()));
1058 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;__mem;
1059 &#32;&#32;&#32;&#32;}
1060 
1061 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Throw&#32;bad_weak_ptr&#32;when&#32;__r._M_get_use_count()&#32;==&#32;0.</emphasis>
1062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;__shared_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r);
1063 
1064 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Does&#32;not&#32;throw&#32;if&#32;__r._M_get_use_count()&#32;==&#32;0,&#32;caller&#32;must&#32;check.</emphasis>
1065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1066 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r,&#32;std::nothrow_t)&#32;<emphasis role="keyword">noexcept</emphasis>;
1067 
1068 &#32;&#32;&#32;&#32;&#32;&#32;~__shared_count()&#32;noexcept
1069 &#32;&#32;&#32;&#32;&#32;&#32;{
1070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1071 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_release();
1072 &#32;&#32;&#32;&#32;&#32;&#32;}
1073 
1074 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__r)&#32;noexcept
1075 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)
1076 &#32;&#32;&#32;&#32;&#32;&#32;{
1077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1078 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_add_ref_copy();
1079 &#32;&#32;&#32;&#32;&#32;&#32;}
1080 
1081 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count&amp;
1082 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1083 &#32;&#32;&#32;&#32;&#32;&#32;{
1084 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
1085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;_M_pi)
1086 &#32;&#32;&#32;&#32;&#32;&#32;{
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_add_ref_copy();
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_release();
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1092 &#32;&#32;&#32;&#32;&#32;&#32;}
1093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1094 &#32;&#32;&#32;&#32;&#32;&#32;}
1095 
1096 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1097 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(__shared_count&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1098 &#32;&#32;&#32;&#32;&#32;&#32;{
1099 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
1100 &#32;&#32;&#32;&#32;__r._M_pi&#32;=&#32;_M_pi;
1101 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1102 &#32;&#32;&#32;&#32;&#32;&#32;}
1103 
1104 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
1105 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_use_count()&#32;const&#32;noexcept
1106 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pi&#32;?&#32;_M_pi-&gt;_M_get_use_count()&#32;:&#32;0;&#32;}
1107 
1108 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1109 &#32;&#32;&#32;&#32;&#32;&#32;_M_unique()&#32;const&#32;noexcept
1110 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_get_use_count()&#32;==&#32;1;&#32;}
1111 
1112 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
1113 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;&#32;__ti)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pi&#32;?&#32;_M_pi-&gt;_M_get_deleter(__ti)&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
1115 
1116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1117 &#32;&#32;&#32;&#32;&#32;&#32;_M_less(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1118 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::less&lt;_Sp_counted_base&lt;_Lp&gt;*&gt;()(this-&gt;_M_pi,&#32;__rhs._M_pi);&#32;}
1119 
1120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1121 &#32;&#32;&#32;&#32;&#32;&#32;_M_less(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1122 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::less&lt;_Sp_counted_base&lt;_Lp&gt;*&gt;()(this-&gt;_M_pi,&#32;__rhs._M_pi);&#32;}
1123 
1124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Friend&#32;function&#32;injected&#32;into&#32;enclosing&#32;namespace&#32;and&#32;found&#32;by&#32;ADL</emphasis>
1125 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1126 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1127 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_pi&#32;==&#32;__b._M_pi;&#32;}
1128 
1129 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1130 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_count&lt;_Lp&gt;;
1131 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
1132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_atomic;
1133 <emphasis role="preprocessor">#endif</emphasis>
1134 
1135 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;&#32;_M_pi;
1136 &#32;&#32;&#32;&#32;};
1137 
1138 
1139 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
1140 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_count
1141 &#32;&#32;&#32;&#32;{
1142 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__weak_count()&#32;noexcept&#32;:&#32;_M_pi(<emphasis role="keywordtype">nullptr</emphasis>)
1144 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1145 
1146 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__r)&#32;noexcept
1147 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)
1148 &#32;&#32;&#32;&#32;&#32;&#32;{
1149 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1150 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_add_ref();
1151 &#32;&#32;&#32;&#32;&#32;&#32;}
1152 
1153 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&amp;&#32;__r)&#32;noexcept
1154 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)
1155 &#32;&#32;&#32;&#32;&#32;&#32;{
1156 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1157 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_add_ref();
1158 &#32;&#32;&#32;&#32;&#32;&#32;}
1159 
1160 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count(__weak_count&amp;&amp;&#32;__r)&#32;noexcept
1161 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)
1162 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__r._M_pi&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
1163 
1164 &#32;&#32;&#32;&#32;&#32;&#32;~__weak_count()&#32;noexcept
1165 &#32;&#32;&#32;&#32;&#32;&#32;{
1166 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1167 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_release();
1168 &#32;&#32;&#32;&#32;&#32;&#32;}
1169 
1170 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count&amp;
1171 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1172 &#32;&#32;&#32;&#32;&#32;&#32;{
1173 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
1174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1175 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_weak_add_ref();
1176 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1177 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_release();
1178 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1179 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1180 &#32;&#32;&#32;&#32;&#32;&#32;}
1181 
1182 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count&amp;
1183 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__weak_count&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1184 &#32;&#32;&#32;&#32;&#32;&#32;{
1185 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
1186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1187 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>-&gt;_M_weak_add_ref();
1188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1189 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_release();
1190 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1192 &#32;&#32;&#32;&#32;&#32;&#32;}
1193 
1194 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count&amp;
1195 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__weak_count&amp;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1196 &#32;&#32;&#32;&#32;&#32;&#32;{
1197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
1198 &#32;&#32;&#32;&#32;&#32;&#32;_M_pi-&gt;_M_weak_release();
1199 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;__r._M_pi;
1200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__r._M_pi&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1202 &#32;&#32;&#32;&#32;&#32;&#32;}
1203 
1204 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1205 &#32;&#32;&#32;&#32;&#32;&#32;_M_swap(__weak_count&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1206 &#32;&#32;&#32;&#32;&#32;&#32;{
1207 &#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;__r._M_pi;
1208 &#32;&#32;&#32;&#32;__r._M_pi&#32;=&#32;_M_pi;
1209 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
1210 &#32;&#32;&#32;&#32;&#32;&#32;}
1211 
1212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
1213 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_use_count()&#32;const&#32;noexcept
1214 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_pi&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>&#32;?&#32;_M_pi-&gt;_M_get_use_count()&#32;:&#32;0;&#32;}
1215 
1216 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;_M_less(<emphasis role="keyword">const</emphasis>&#32;__weak_count&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1218 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::less&lt;_Sp_counted_base&lt;_Lp&gt;*&gt;()(this-&gt;_M_pi,&#32;__rhs._M_pi);&#32;}
1219 
1220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1221 &#32;&#32;&#32;&#32;&#32;&#32;_M_less(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1222 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::less&lt;_Sp_counted_base&lt;_Lp&gt;*&gt;()(this-&gt;_M_pi,&#32;__rhs._M_pi);&#32;}
1223 
1224 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Friend&#32;function&#32;injected&#32;into&#32;enclosing&#32;namespace&#32;and&#32;found&#32;by&#32;ADL</emphasis>
1225 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1226 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__weak_count&amp;&#32;__a,&#32;<emphasis role="keyword">const</emphasis>&#32;__weak_count&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1227 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a._M_pi&#32;==&#32;__b._M_pi;&#32;}
1228 
1229 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_count&lt;_Lp&gt;;
1231 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
1232 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>_Sp_atomic;
1233 <emphasis role="preprocessor">#endif</emphasis>
1234 
1235 &#32;&#32;&#32;&#32;&#32;&#32;_Sp_counted_base&lt;_Lp&gt;*&#32;&#32;_M_pi;
1236 &#32;&#32;&#32;&#32;};
1237 
1238 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;that&#32;__weak_count&#32;is&#32;defined&#32;we&#32;can&#32;define&#32;this&#32;constructor:</emphasis>
1239 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
1240 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
1241 &#32;&#32;&#32;&#32;__shared_count&lt;_Lp&gt;::__shared_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r)
1242 &#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)
1243 &#32;&#32;&#32;&#32;{
1244 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;!_M_pi-&gt;_M_add_ref_lock_nothrow())
1245 &#32;&#32;&#32;&#32;__throw_bad_weak_ptr();
1246 &#32;&#32;&#32;&#32;}
1247 
1248 &#32;&#32;<emphasis role="comment">//&#32;Now&#32;that&#32;__weak_count&#32;is&#32;defined&#32;we&#32;can&#32;define&#32;this&#32;constructor:</emphasis>
1249 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;_Lock_policy&#32;_Lp&gt;
1250 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
1251 &#32;&#32;&#32;&#32;__shared_count&lt;_Lp&gt;::
1252 &#32;&#32;&#32;&#32;__shared_count(<emphasis role="keyword">const</emphasis>&#32;__weak_count&lt;_Lp&gt;&amp;&#32;__r,&#32;std::nothrow_t)&#32;noexcept
1253 &#32;&#32;&#32;&#32;:&#32;_M_pi(__r._M_pi)
1254 &#32;&#32;&#32;&#32;{
1255 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_pi&#32;&amp;&amp;&#32;!_M_pi-&gt;_M_add_ref_lock_nothrow())
1256 &#32;&#32;&#32;&#32;_M_pi&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1257 &#32;&#32;&#32;&#32;}
1258 
1259 &#32;&#32;<emphasis role="comment">//&#32;Helper&#32;traits&#32;for&#32;shared_ptr&#32;of&#32;array:</emphasis>
1260 
1261 &#32;&#32;<emphasis role="comment">//&#32;A&#32;pointer&#32;type&#32;Y*&#32;is&#32;said&#32;to&#32;be&#32;compatible&#32;with&#32;a&#32;pointer&#32;type&#32;T*&#32;when</emphasis>
1262 &#32;&#32;<emphasis role="comment">//&#32;either&#32;Y*&#32;is&#32;convertible&#32;to&#32;T*&#32;or&#32;Y&#32;is&#32;U[N]&#32;and&#32;T&#32;is&#32;U&#32;cv&#32;[].</emphasis>
1263 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp_ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp_ptr&gt;
1264 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_compatible_with
1265 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>
1266 &#32;&#32;&#32;&#32;{&#32;};
1267 
1268 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
1269 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_compatible_with&lt;_Yp*,&#32;_Tp*&gt;
1270 &#32;&#32;&#32;&#32;:&#32;is_convertible&lt;_Yp*,&#32;_Tp*&gt;::type
1271 &#32;&#32;&#32;&#32;{&#32;};
1272 
1273 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
1274 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_compatible_with&lt;_Up(*)[_Nm],&#32;_Up(*)[]&gt;
1275 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
1276 &#32;&#32;&#32;&#32;{&#32;};
1277 
1278 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
1279 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_compatible_with&lt;_Up(*)[_Nm],&#32;<emphasis role="keyword">const</emphasis>&#32;_Up(*)[]&gt;
1280 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
1281 &#32;&#32;&#32;&#32;{&#32;};
1282 
1283 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
1284 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_compatible_with&lt;_Up(*)[_Nm],&#32;<emphasis role="keyword">volatile</emphasis>&#32;_Up(*)[]&gt;
1285 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
1286 &#32;&#32;&#32;&#32;{&#32;};
1287 
1288 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
1289 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_compatible_with&lt;_Up(*)[_Nm],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">volatile</emphasis>&#32;_Up(*)[]&gt;
1290 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>
1291 &#32;&#32;&#32;&#32;{&#32;};
1292 
1293 &#32;&#32;<emphasis role="comment">//&#32;Test&#32;conversion&#32;from&#32;Y(*)[N]&#32;to&#32;U(*)[N]&#32;without&#32;forming&#32;invalid&#32;type&#32;Y[N].</emphasis>
1294 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1295 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible_arrN
1296 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>
1297 &#32;&#32;&#32;&#32;{&#32;};
1298 
1299 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1300 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible_arrN&lt;_Up,&#32;_Nm,&#32;_Yp,&#32;__void_t&lt;_Yp[_Nm]&gt;&gt;
1301 &#32;&#32;&#32;&#32;:&#32;is_convertible&lt;_Yp(*)[_Nm],&#32;_Up(*)[_Nm]&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
1302 &#32;&#32;&#32;&#32;{&#32;};
1303 
1304 &#32;&#32;<emphasis role="comment">//&#32;Test&#32;conversion&#32;from&#32;Y(*)[]&#32;to&#32;U(*)[]&#32;without&#32;forming&#32;invalid&#32;type&#32;Y[].</emphasis>
1305 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1306 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible_arr
1307 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>
1308 &#32;&#32;&#32;&#32;{&#32;};
1309 
1310 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1311 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible_arr&lt;_Up,&#32;_Yp,&#32;__void_t&lt;_Yp[]&gt;&gt;
1312 &#32;&#32;&#32;&#32;:&#32;is_convertible&lt;_Yp(*)[],&#32;_Up(*)[]&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
1313 &#32;&#32;&#32;&#32;{&#32;};
1314 
1315 &#32;&#32;<emphasis role="comment">//&#32;Trait&#32;to&#32;check&#32;if&#32;shared_ptr&lt;T&gt;&#32;can&#32;be&#32;constructed&#32;from&#32;Y*.</emphasis>
1316 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1317 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible;
1318 
1319 &#32;&#32;<emphasis role="comment">//&#32;When&#32;T&#32;is&#32;U[N],&#32;Y(*)[N]&#32;shall&#32;be&#32;convertible&#32;to&#32;T*;</emphasis>
1320 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1321 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible&lt;_Up[_Nm],&#32;_Yp&gt;
1322 &#32;&#32;&#32;&#32;:&#32;__sp_is_constructible_arrN&lt;_Up,&#32;_Nm,&#32;_Yp&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
1323 &#32;&#32;&#32;&#32;{&#32;};
1324 
1325 &#32;&#32;<emphasis role="comment">//&#32;when&#32;T&#32;is&#32;U[],&#32;Y(*)[]&#32;shall&#32;be&#32;convertible&#32;to&#32;T*;</emphasis>
1326 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1327 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible&lt;_Up[],&#32;_Yp&gt;
1328 &#32;&#32;&#32;&#32;:&#32;__sp_is_constructible_arr&lt;_Up,&#32;_Yp&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
1329 &#32;&#32;&#32;&#32;{&#32;};
1330 
1331 &#32;&#32;<emphasis role="comment">//&#32;otherwise,&#32;Y*&#32;shall&#32;be&#32;convertible&#32;to&#32;T*.</emphasis>
1332 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1333 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__sp_is_constructible
1334 &#32;&#32;&#32;&#32;:&#32;is_convertible&lt;_Yp*,&#32;_Tp*&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
1335 &#32;&#32;&#32;&#32;{&#32;};
1336 
1337 
1338 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;operator*&#32;and&#32;operator-&gt;&#32;for&#32;shared_ptr&lt;T&gt;.</emphasis>
1339 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp,
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_array&lt;_Tp&gt;::value,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;=&#32;is_void&lt;_Tp&gt;::value&gt;
1341 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr_access
1342 &#32;&#32;&#32;&#32;{
1343 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1344 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;_Tp;
1345 
1346 &#32;&#32;&#32;&#32;&#32;&#32;element_type&amp;
1347 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept
1348 &#32;&#32;&#32;&#32;&#32;&#32;{
1349 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_get()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1350 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_get();
1351 &#32;&#32;&#32;&#32;&#32;&#32;}
1352 
1353 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
1354 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept
1355 &#32;&#32;&#32;&#32;&#32;&#32;{
1356 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_get()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1357 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get();
1358 &#32;&#32;&#32;&#32;&#32;&#32;}
1359 
1360 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1361 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
1362 &#32;&#32;&#32;&#32;&#32;&#32;_M_get()&#32;const&#32;noexcept
1363 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__shared_ptr&lt;_Tp,&#32;_Lp&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();&#32;}
1364 &#32;&#32;&#32;&#32;};
1365 
1366 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;operator-&gt;&#32;for&#32;shared_ptr&lt;cv&#32;void&gt;.</emphasis>
1367 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1368 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr_access&lt;_Tp,&#32;_Lp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
1369 &#32;&#32;&#32;&#32;{
1370 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1371 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;_Tp;
1372 
1373 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
1374 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept
1375 &#32;&#32;&#32;&#32;&#32;&#32;{
1376 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__ptr&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__shared_ptr&lt;_Tp,&#32;_Lp&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();
1377 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(__ptr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr;
1379 &#32;&#32;&#32;&#32;&#32;&#32;}
1380 &#32;&#32;&#32;&#32;};
1381 
1382 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;operator[]&#32;for&#32;shared_ptr&lt;T[]&gt;&#32;and&#32;shared_ptr&lt;T[N]&gt;.</emphasis>
1383 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1384 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr_access&lt;_Tp,&#32;_Lp,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
1385 &#32;&#32;&#32;&#32;{
1386 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_extent&lt;_Tp&gt;::type;
1388 
1389 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201402L</emphasis>
1390 &#32;&#32;&#32;&#32;&#32;&#32;[[__deprecated__(<emphasis role="stringliteral">&quot;shared_ptr&lt;T[]&gt;::operator*&#32;is&#32;absent&#32;from&#32;C++17&quot;</emphasis>)]]
1391 &#32;&#32;&#32;&#32;&#32;&#32;element_type&amp;
1392 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept
1393 &#32;&#32;&#32;&#32;&#32;&#32;{
1394 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_get()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_get();
1396 &#32;&#32;&#32;&#32;&#32;&#32;}
1397 
1398 &#32;&#32;&#32;&#32;&#32;&#32;[[__deprecated__(<emphasis role="stringliteral">&quot;shared_ptr&lt;T[]&gt;::operator-&gt;&#32;is&#32;absent&#32;from&#32;C++17&quot;</emphasis>)]]
1399 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
1400 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept
1401 &#32;&#32;&#32;&#32;&#32;&#32;{
1402 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a6f2ef543506606e8ea3dbf0c52e61c5d">_GLIBCXX_DEBUG_PEDASSERT</link>(_M_get()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1403 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get();
1404 &#32;&#32;&#32;&#32;&#32;&#32;}
1405 <emphasis role="preprocessor">#endif</emphasis>
1406 
1407 &#32;&#32;&#32;&#32;&#32;&#32;element_type&amp;
1408 &#32;&#32;&#32;&#32;&#32;&#32;operator[](<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;__i)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1409 &#32;&#32;&#32;&#32;&#32;&#32;{
1410 &#32;&#32;&#32;&#32;__glibcxx_assert(_M_get()&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>);
1411 &#32;&#32;&#32;&#32;__glibcxx_assert(!extent&lt;_Tp&gt;::value&#32;||&#32;__i&#32;&lt;&#32;extent&lt;_Tp&gt;::value);
1412 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_get()[__i];
1413 &#32;&#32;&#32;&#32;&#32;&#32;}
1414 
1415 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1416 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
1417 &#32;&#32;&#32;&#32;&#32;&#32;_M_get()&#32;const&#32;noexcept
1418 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__shared_ptr&lt;_Tp,&#32;_Lp&gt;*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">this</emphasis>)-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>();&#32;}
1419 &#32;&#32;&#32;&#32;};
1420 
1421 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1422 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr
1423 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__shared_ptr_access&lt;_Tp,&#32;_Lp&gt;
1424 &#32;&#32;&#32;&#32;{
1425 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1426 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_extent&lt;_Tp&gt;::type;
1427 
1428 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1429 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constraint&#32;for&#32;taking&#32;ownership&#32;of&#32;a&#32;pointer&#32;of&#32;type&#32;_Yp*:</emphasis>
1430 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1431 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_SafeConv
1432 &#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__sp_is_constructible&lt;_Tp,&#32;_Yp&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1433 
1434 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constraint&#32;for&#32;construction&#32;from&#32;shared_ptr&#32;and&#32;weak_ptr:</emphasis>
1435 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Res&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1436 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Compatible&#32;=&#32;<emphasis role="keyword">typename</emphasis>
1437 &#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;__sp_compatible_with&lt;_Yp*,&#32;_Tp*&gt;::value,&#32;_Res&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1438 
1439 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constraint&#32;for&#32;assignment&#32;from&#32;shared_ptr&#32;and&#32;weak_ptr:</emphasis>
1440 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1441 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Assignable&#32;=&#32;_Compatible&lt;_Yp,&#32;__shared_ptr&amp;&gt;;
1442 
1443 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constraint&#32;for&#32;construction&#32;from&#32;unique_ptr:</emphasis>
1444 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Del,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Res&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;unique_ptr&lt;_Yp,&#32;_Del&gt;::pointer&gt;
1446 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UniqCompatible&#32;=&#32;__enable_if_t&lt;__and_&lt;
1447 &#32;&#32;&#32;&#32;&#32;&#32;__sp_compatible_with&lt;_Yp*,&#32;_Tp*&gt;,
1448 &#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;_Ptr,&#32;element_type*&gt;,
1449 &#32;&#32;&#32;&#32;&#32;&#32;is_move_constructible&lt;_Del&gt;
1450 &#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>,&#32;_Res&gt;;
1451 
1452 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constraint&#32;for&#32;assignment&#32;from&#32;unique_ptr:</emphasis>
1453 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Del&gt;
1454 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_UniqAssignable&#32;=&#32;_UniqCompatible&lt;_Yp,&#32;_Del,&#32;__shared_ptr&amp;&gt;;
1455 
1456 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1457 
1458 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1459 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>weak_type&#32;=&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;;
1460 <emphasis role="preprocessor">#endif</emphasis>
1461 
1462 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__shared_ptr()&#32;noexcept
1463 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(0),&#32;_M_refcount()
1464 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1465 
1466 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_SafeConv&lt;_Yp&gt;&gt;
1467 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1468 &#32;&#32;&#32;&#32;__shared_ptr(_Yp*&#32;__p)
1469 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_refcount(__p,&#32;typename&#32;<link linkend="_forward__declarations_8h_1a70231801eb17e45cd17c7eb332b4d36f">is_array</link>&lt;_Tp&gt;::<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>())
1470 &#32;&#32;&#32;&#32;{
1471 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;!is_void&lt;_Yp&gt;::value,&#32;<emphasis role="stringliteral">&quot;incomplete&#32;type&quot;</emphasis>&#32;);
1472 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(&#32;<emphasis role="keyword">sizeof</emphasis>(_Yp)&#32;&gt;&#32;0,&#32;<emphasis role="stringliteral">&quot;incomplete&#32;type&quot;</emphasis>&#32;);
1473 &#32;&#32;&#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(__p);
1474 &#32;&#32;&#32;&#32;}
1475 
1476 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_SafeConv&lt;_Yp&gt;&gt;
1477 &#32;&#32;&#32;&#32;__shared_ptr(_Yp*&#32;__p,&#32;_Deleter&#32;__d)
1478 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_refcount(__p,&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__d))
1479 &#32;&#32;&#32;&#32;{
1480 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_invocable&lt;_Deleter&amp;,&#32;_Yp*&amp;&gt;::value,
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;deleter&#32;expression&#32;d(p)&#32;is&#32;well-formed&quot;</emphasis>);
1482 &#32;&#32;&#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(__p);
1483 &#32;&#32;&#32;&#32;}
1484 
1485 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_SafeConv&lt;_Yp&gt;&gt;
1487 &#32;&#32;&#32;&#32;__shared_ptr(_Yp*&#32;__p,&#32;_Deleter&#32;__d,&#32;_Alloc&#32;__a)
1488 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_refcount(__p,&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__d),&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__a))
1489 &#32;&#32;&#32;&#32;{
1490 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(__is_invocable&lt;_Deleter&amp;,&#32;_Yp*&amp;&gt;::value,
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;deleter&#32;expression&#32;d(p)&#32;is&#32;well-formed&quot;</emphasis>);
1492 &#32;&#32;&#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(__p);
1493 &#32;&#32;&#32;&#32;}
1494 
1495 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Deleter&gt;
1496 &#32;&#32;&#32;&#32;__shared_ptr(nullptr_t&#32;__p,&#32;_Deleter&#32;__d)
1497 &#32;&#32;&#32;&#32;:&#32;_M_ptr(0),&#32;_M_refcount(__p,&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__d))
1498 &#32;&#32;&#32;&#32;{&#32;}
1499 
1500 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(nullptr_t&#32;__p,&#32;_Deleter&#32;__d,&#32;_Alloc&#32;__a)
1502 &#32;&#32;&#32;&#32;:&#32;_M_ptr(0),&#32;_M_refcount(__p,&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__d),&#32;<link linkend="_namespacestd">std</link>::<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">move</link>(__a))
1503 &#32;&#32;&#32;&#32;{&#32;}
1504 
1505 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Aliasing&#32;constructor</emphasis>
1506 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1507 &#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r,
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element_type*&#32;__p)&#32;noexcept
1509 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_refcount(__r._M_refcount)&#32;<emphasis role="comment">//&#32;never&#32;throws</emphasis>
1510 &#32;&#32;&#32;&#32;{&#32;}
1511 
1512 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Aliasing&#32;constructor</emphasis>
1513 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1514 &#32;&#32;&#32;&#32;__shared_ptr(__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&amp;&#32;__r,
1515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;element_type*&#32;__p)&#32;noexcept
1516 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__p),&#32;_M_refcount()
1517 &#32;&#32;&#32;&#32;{
1518 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount._M_swap(__r._M_refcount);
1519 &#32;&#32;&#32;&#32;&#32;&#32;__r._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1520 &#32;&#32;&#32;&#32;}
1521 
1522 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1523 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1524 &#32;&#32;&#32;&#32;&#32;&#32;~__shared_ptr()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1525 
1526 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Compatible&lt;_Yp&gt;&gt;
1527 &#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r)&#32;noexcept
1528 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(__r._M_refcount)
1529 &#32;&#32;&#32;&#32;{&#32;}
1530 
1531 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(__shared_ptr&amp;&amp;&#32;__r)&#32;noexcept
1532 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount()
1533 &#32;&#32;&#32;&#32;&#32;&#32;{
1534 &#32;&#32;&#32;&#32;_M_refcount._M_swap(__r._M_refcount);
1535 &#32;&#32;&#32;&#32;__r._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1536 &#32;&#32;&#32;&#32;&#32;&#32;}
1537 
1538 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Compatible&lt;_Yp&gt;&gt;
1539 &#32;&#32;&#32;&#32;__shared_ptr(__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&amp;&#32;__r)&#32;noexcept
1540 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount()
1541 &#32;&#32;&#32;&#32;{
1542 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount._M_swap(__r._M_refcount);
1543 &#32;&#32;&#32;&#32;&#32;&#32;__r._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1544 &#32;&#32;&#32;&#32;}
1545 
1546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Compatible&lt;_Yp&gt;&gt;
1547 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r)
1548 &#32;&#32;&#32;&#32;:&#32;_M_refcount(__r._M_refcount)&#32;<emphasis role="comment">//&#32;may&#32;throw</emphasis>
1549 &#32;&#32;&#32;&#32;{
1550 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;now&#32;safe&#32;to&#32;copy&#32;__r._M_ptr,&#32;as</emphasis>
1551 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_M_refcount(__r._M_refcount)&#32;did&#32;not&#32;throw.</emphasis>
1552 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r._M_ptr;
1553 &#32;&#32;&#32;&#32;}
1554 
1555 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;an&#32;exception&#32;is&#32;thrown&#32;this&#32;constructor&#32;has&#32;no&#32;effect.</emphasis>
1556 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Del,
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_UniqCompatible&lt;_Yp,&#32;_Del&gt;&gt;
1558 &#32;&#32;&#32;&#32;__shared_ptr(unique_ptr&lt;_Yp,&#32;_Del&gt;&amp;&amp;&#32;__r)
1559 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()),&#32;_M_refcount()
1560 &#32;&#32;&#32;&#32;{
1561 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__raw&#32;=&#32;__to_address(__r.get());
1562 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__shared_count&lt;_Lp&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r));
1563 &#32;&#32;&#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(__raw);
1564 &#32;&#32;&#32;&#32;}
1565 
1566 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201402L&#32;&amp;&amp;&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1567 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1568 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;an&#32;exception&#32;is&#32;thrown&#32;this&#32;constructor&#32;has&#32;no&#32;effect.</emphasis>
1569 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Del,
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__and_&lt;
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__not_&lt;is_array&lt;_Tp&gt;&gt;,&#32;is_array&lt;_Tp1&gt;,
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is_convertible&lt;typename&#32;unique_ptr&lt;_Tp1,&#32;_Del&gt;::pointer,&#32;_Tp*&gt;
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&gt;<link linkend="_classvalue">::value</link>,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>&gt;
1574 &#32;&#32;&#32;&#32;__shared_ptr(unique_ptr&lt;_Tp1,&#32;_Del&gt;&amp;&amp;&#32;__r,&#32;__sp_array_delete)
1575 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r.<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()),&#32;_M_refcount()
1576 &#32;&#32;&#32;&#32;{
1577 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;__raw&#32;=&#32;__to_address(__r.get());
1578 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__shared_count&lt;_Lp&gt;(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r));
1579 &#32;&#32;&#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(__raw);
1580 &#32;&#32;&#32;&#32;}
1581 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1582 <emphasis role="preprocessor">#endif</emphasis>
1583 
1584 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1585 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
1586 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
1587 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Postcondition:&#32;use_count()&#32;==&#32;1&#32;and&#32;__r.get()&#32;==&#32;0</emphasis>
1588 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Compatible&lt;_Yp&gt;&gt;
1589 &#32;&#32;&#32;&#32;__shared_ptr(auto_ptr&lt;_Yp&gt;&amp;&amp;&#32;__r);
1590 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1591 <emphasis role="preprocessor">#endif</emphasis>
1592 
1593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__shared_ptr(nullptr_t)&#32;noexcept&#32;:&#32;__shared_ptr()&#32;{&#32;}
1594 
1595 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1596 &#32;&#32;&#32;&#32;_Assignable&lt;_Yp&gt;
1597 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1598 &#32;&#32;&#32;&#32;{
1599 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r._M_ptr;
1600 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__r._M_refcount;&#32;<emphasis role="comment">//&#32;__shared_count::op=&#32;doesn&apos;t&#32;throw</emphasis>
1601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1602 &#32;&#32;&#32;&#32;}
1603 
1604 <emphasis role="preprocessor">#if&#32;_GLIBCXX_USE_DEPRECATED</emphasis>
1605 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
1606 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
1607 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1608 &#32;&#32;&#32;&#32;_Assignable&lt;_Yp&gt;
1609 &#32;&#32;&#32;&#32;operator=(auto_ptr&lt;_Yp&gt;&amp;&amp;&#32;__r)
1610 &#32;&#32;&#32;&#32;{
1611 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r)).swap(*<emphasis role="keyword">this</emphasis>);
1612 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1613 &#32;&#32;&#32;&#32;}
1614 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
1615 <emphasis role="preprocessor">#endif</emphasis>
1616 
1617 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&amp;
1618 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__shared_ptr&amp;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1619 &#32;&#32;&#32;&#32;&#32;&#32;{
1620 &#32;&#32;&#32;&#32;__shared_ptr(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r)).swap(*<emphasis role="keyword">this</emphasis>);
1621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1622 &#32;&#32;&#32;&#32;&#32;&#32;}
1623 
1624 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">class</emphasis>&#32;_Yp&gt;
1625 &#32;&#32;&#32;&#32;_Assignable&lt;_Yp&gt;
1626 &#32;&#32;&#32;&#32;operator=(__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1627 &#32;&#32;&#32;&#32;{
1628 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r)).swap(*<emphasis role="keyword">this</emphasis>);
1629 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1630 &#32;&#32;&#32;&#32;}
1631 
1632 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Del&gt;
1633 &#32;&#32;&#32;&#32;_UniqAssignable&lt;_Yp,&#32;_Del&gt;
1634 &#32;&#32;&#32;&#32;operator=(unique_ptr&lt;_Yp,&#32;_Del&gt;&amp;&amp;&#32;__r)
1635 &#32;&#32;&#32;&#32;{
1636 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r)).swap(*<emphasis role="keyword">this</emphasis>);
1637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
1638 &#32;&#32;&#32;&#32;}
1639 
1640 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1641 &#32;&#32;&#32;&#32;&#32;&#32;reset()&#32;noexcept
1642 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__shared_ptr().swap(*<emphasis role="keyword">this</emphasis>);&#32;}
1643 
1644 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1645 &#32;&#32;&#32;&#32;_SafeConv&lt;_Yp&gt;
1646 &#32;&#32;&#32;&#32;reset(_Yp*&#32;__p)&#32;<emphasis role="comment">//&#32;_Yp&#32;must&#32;be&#32;complete.</emphasis>
1647 &#32;&#32;&#32;&#32;{
1648 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Catch&#32;self-reset&#32;errors.</emphasis>
1649 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__p&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>&#32;||&#32;__p&#32;!=&#32;_M_ptr);
1650 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(__p).swap(*<emphasis role="keyword">this</emphasis>);
1651 &#32;&#32;&#32;&#32;}
1652 
1653 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter&gt;
1654 &#32;&#32;&#32;&#32;_SafeConv&lt;_Yp&gt;
1655 &#32;&#32;&#32;&#32;reset(_Yp*&#32;__p,&#32;_Deleter&#32;__d)
1656 &#32;&#32;&#32;&#32;{&#32;__shared_ptr(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__d)).swap(*<emphasis role="keyword">this</emphasis>);&#32;}
1657 
1658 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Deleter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1659 &#32;&#32;&#32;&#32;_SafeConv&lt;_Yp&gt;
1660 &#32;&#32;&#32;&#32;reset(_Yp*&#32;__p,&#32;_Deleter&#32;__d,&#32;_Alloc&#32;__a)
1661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;__shared_ptr(__p,&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__d),&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__a)).swap(*<emphasis role="keyword">this</emphasis>);&#32;}
1662 
1664 &#32;&#32;&#32;&#32;&#32;&#32;element_type*
1665 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1afc5e04fa58feb228bb06199ff10caa22">get</link>()&#32;const&#32;noexcept
1666 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr;&#32;}
1667 
1669 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1abb452686968e48b67397da5f97445f5b">bool</link>()&#32;const&#32;noexcept
1670 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_ptr&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
1671 
1673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1674 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a1a02827fc3005a9ac8b6e3d39478529b">unique</link>()&#32;const&#32;noexcept
1675 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_unique();&#32;}
1676 
1678 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
1679 &#32;&#32;&#32;&#32;&#32;&#32;use_count()&#32;const&#32;noexcept
1680 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_use_count();&#32;}
1681 
1683 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
1684 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__other)&#32;<emphasis role="keyword">noexcept</emphasis>
1685 &#32;&#32;&#32;&#32;&#32;&#32;{
1686 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_ptr,&#32;__other._M_ptr);
1687 &#32;&#32;&#32;&#32;_M_refcount._M_swap(__other._M_refcount);
1688 &#32;&#32;&#32;&#32;&#32;&#32;}
1689 
1697 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1698 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1699 &#32;&#32;&#32;&#32;owner_before(__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1700 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_less(__rhs._M_refcount);&#32;}
1701 
1702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1703 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
1704 &#32;&#32;&#32;&#32;owner_before(__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1705 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_less(__rhs._M_refcount);&#32;}
1707 
1708 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;constructor&#32;is&#32;non-standard,&#32;it&#32;is&#32;used&#32;by&#32;allocate_shared.</emphasis>
1710 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1711 &#32;&#32;&#32;&#32;__shared_ptr(_Sp_alloc_shared_tag&lt;_Alloc&gt;&#32;__tag,&#32;_Args&amp;&amp;...&#32;__args)
1712 &#32;&#32;&#32;&#32;:&#32;_M_ptr(),&#32;_M_refcount(_M_ptr,&#32;__tag,&#32;<link linkend="_namespacestd">std</link>::forward&lt;_Args&gt;(__args)...)
1713 &#32;&#32;&#32;&#32;{&#32;_M_enable_shared_from_this_with(_M_ptr);&#32;}
1714 
1715 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
1717 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp1&gt;
1718 &#32;&#32;&#32;&#32;__allocate_shared(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;_Args&amp;&amp;...&#32;__args);
1719 
1720 <emphasis role="preprocessor">#if&#32;__cpp_lib_shared_ptr_arrays&#32;&gt;=&#32;201707L</emphasis>
1721 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;constructor&#32;is&#32;non-standard,&#32;it&#32;is&#32;used&#32;by&#32;allocate_shared&lt;T[]&gt;.</emphasis>
1722 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Init&#32;=&#32;const&#32;remove_extent_t&lt;_Tp&gt;*&gt;
1723 &#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;_Sp_counted_array_base&lt;_Alloc&gt;&amp;&#32;__a,
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Init&#32;__init&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>)
1725 &#32;&#32;&#32;&#32;:&#32;_M_ptr(),&#32;_M_refcount(_M_ptr,&#32;__a,&#32;__init)
1726 &#32;&#32;&#32;&#32;{&#32;}
1727 <emphasis role="preprocessor">#endif</emphasis>
1728 
1729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;constructor&#32;is&#32;used&#32;by&#32;__weak_ptr::lock()&#32;and</emphasis>
1730 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;shared_ptr::shared_ptr(const&#32;weak_ptr&amp;,&#32;std::nothrow_t).</emphasis>
1731 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__r,&#32;std::nothrow_t)&#32;noexcept
1732 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_refcount(__r._M_refcount,&#32;std::nothrow)
1733 &#32;&#32;&#32;&#32;&#32;&#32;{
1734 &#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;_M_refcount._M_get_use_count()&#32;?&#32;__r._M_ptr&#32;:&#32;<emphasis role="keyword">nullptr</emphasis>;
1735 &#32;&#32;&#32;&#32;&#32;&#32;}
1736 
1737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr&lt;_Tp,&#32;_Lp&gt;;
1738 
1739 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1740 
1741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1742 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__esft_base_t&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(__enable_shared_from_this_base(
1743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&gt;(),
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::declval&lt;_Yp*&gt;()));
1745 
1746 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;an&#32;accessible&#32;and&#32;unambiguous&#32;enable_shared_from_this&#32;base.</emphasis>
1747 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1748 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__has_esft_base
1749 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
1750 
1751 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1752 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__has_esft_base&lt;_Yp,&#32;__void_t&lt;__esft_base_t&lt;_Yp&gt;&gt;&gt;
1753 &#32;&#32;&#32;&#32;:&#32;__not_&lt;is_array&lt;_Tp&gt;&gt;&#32;{&#32;};&#32;<emphasis role="comment">//&#32;No&#32;enable&#32;shared_from_this&#32;for&#32;arrays</emphasis>
1754 
1755 &#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;_Yp,&#32;typename&#32;_Yp2&#32;=&#32;typename&#32;remove_cv&lt;_Yp&gt;::type&gt;
1756 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__has_esft_base&lt;_Yp2&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
1757 &#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(_Yp*&#32;__p)&#32;<emphasis role="keyword">noexcept</emphasis>
1758 &#32;&#32;&#32;&#32;{
1759 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;__base&#32;=&#32;__enable_shared_from_this_base(_M_refcount,&#32;__p))
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>-&gt;_M_weak_assign(<emphasis role="keyword">const_cast&lt;</emphasis>_Yp2*<emphasis role="keyword">&gt;</emphasis>(__p),&#32;_M_refcount);
1761 &#32;&#32;&#32;&#32;}
1762 
1763 &#32;&#32;&#32;&#32;&#32;&#32;template&lt;typename&#32;_Yp,&#32;typename&#32;_Yp2&#32;=&#32;typename&#32;remove_cv&lt;_Yp&gt;::type&gt;
1764 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;!__has_esft_base&lt;_Yp2&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
1765 &#32;&#32;&#32;&#32;_M_enable_shared_from_this_with(_Yp*)&#32;<emphasis role="keyword">noexcept</emphasis>
1766 &#32;&#32;&#32;&#32;{&#32;}
1767 
1768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*
1769 &#32;&#32;&#32;&#32;&#32;&#32;_M_get_deleter(<emphasis role="keyword">const</emphasis>&#32;std::type_info&amp;&#32;__ti)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
1770 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_deleter(__ti);&#32;}
1771 
1772 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr;
1773 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr;
1774 
1775 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Del,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;
1776 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Del*&#32;get_deleter(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp1&gt;&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
1777 
1778 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Del,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
1779 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Del*&#32;get_deleter(<emphasis role="keyword">const</emphasis>&#32;shared_ptr&lt;_Tp1&gt;&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>;
1780 
1781 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
1782 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Sp_atomic&lt;shared_ptr&lt;_Tp&gt;&gt;;
1783 <emphasis role="preprocessor">#endif</emphasis>
1784 
1785 &#32;&#32;&#32;&#32;&#32;&#32;element_type*&#32;&#32;&#32;&#32;_M_ptr;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contained&#32;pointer.</emphasis>
1786 &#32;&#32;&#32;&#32;&#32;&#32;__shared_count&lt;_Lp&gt;&#32;&#32;_M_refcount;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reference&#32;counter.</emphasis>
1787 &#32;&#32;&#32;&#32;};
1788 
1789 
1790 &#32;&#32;<emphasis role="comment">//&#32;20.7.2.2.7&#32;shared_ptr&#32;comparisons</emphasis>
1791 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;_Lock_policy&#32;_Lp&gt;
1792 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1793 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__a,
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp2,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1795 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.get()&#32;==&#32;__b.get();&#32;}
1796 
1797 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1798 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1799 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
1800 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__a;&#32;}
1801 
1802 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_three_way_comparison</emphasis>
1803 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;_Lock_policy&#32;_Lp&gt;
1804 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;strong_ordering
1805 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Up,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1807 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_three_way()(__a.get(),&#32;__b.get());&#32;}
1808 
1809 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1810 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;strong_ordering
1811 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
1812 &#32;&#32;&#32;&#32;{
1813 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;::element_type*;
1814 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;compare_three_way()(__a.get(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link><emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">nullptr</emphasis>));
1815 &#32;&#32;&#32;&#32;}
1816 <emphasis role="preprocessor">#else</emphasis>
1817 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1818 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1819 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(nullptr_t,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
1820 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__a;&#32;}
1821 
1822 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;_Lock_policy&#32;_Lp&gt;
1823 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1824 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__a,
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp2,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1826 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a.get()&#32;!=&#32;__b.get();&#32;}
1827 
1828 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1829 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1830 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
1831 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">bool</emphasis>)__a;&#32;}
1832 
1833 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1834 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1835 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(nullptr_t,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
1836 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">bool</emphasis>)__a;&#32;}
1837 
1838 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;_Lock_policy&#32;_Lp&gt;
1839 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1840 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Up,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1842 &#32;&#32;&#32;&#32;{
1843 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp_elt&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;::element_type;
1844 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Up_elt&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__shared_ptr&lt;_Up,&#32;_Lp&gt;::element_type;
1845 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Vp&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;common_type&lt;_Tp_elt*,&#32;_Up_elt*&gt;::type;
1846 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;less&lt;_Vp&gt;()(__a.get(),&#32;__b.get());
1847 &#32;&#32;&#32;&#32;}
1848 
1849 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1850 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1851 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
1852 &#32;&#32;&#32;&#32;{
1853 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp_elt&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;::element_type;
1854 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;less&lt;_Tp_elt*&gt;()(__a.get(),&#32;<emphasis role="keyword">nullptr</emphasis>);
1855 &#32;&#32;&#32;&#32;}
1856 
1857 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1858 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1859 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(nullptr_t,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
1860 &#32;&#32;&#32;&#32;{
1861 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tp_elt&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;::element_type;
1862 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;less&lt;_Tp_elt*&gt;()(<emphasis role="keyword">nullptr</emphasis>,&#32;__a.get());
1863 &#32;&#32;&#32;&#32;}
1864 
1865 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;_Lock_policy&#32;_Lp&gt;
1866 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1867 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__a,
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp2,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1869 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__b&#32;&lt;&#32;__a);&#32;}
1870 
1871 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1872 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1873 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
1874 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(<emphasis role="keyword">nullptr</emphasis>&#32;&lt;&#32;__a);&#32;}
1875 
1876 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1877 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1878 &#32;&#32;&#32;&#32;operator&lt;=(nullptr_t,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
1879 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__a&#32;&lt;&#32;<emphasis role="keyword">nullptr</emphasis>);&#32;}
1880 
1881 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;_Lock_policy&#32;_Lp&gt;
1882 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1883 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__a,
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp2,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1885 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(__b&#32;&lt;&#32;__a);&#32;}
1886 
1887 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1888 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1889 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
1890 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>&#32;&lt;&#32;__a;&#32;}
1891 
1892 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1893 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1894 &#32;&#32;&#32;&#32;operator&gt;(nullptr_t,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
1895 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__a&#32;&lt;&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
1896 
1897 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp2,&#32;_Lock_policy&#32;_Lp&gt;
1898 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1899 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__a,
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp2,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1901 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__a&#32;&lt;&#32;__b);&#32;}
1902 
1903 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1904 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1905 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;nullptr_t)&#32;<emphasis role="keyword">noexcept</emphasis>
1906 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__a&#32;&lt;&#32;<emphasis role="keyword">nullptr</emphasis>);&#32;}
1907 
1908 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1909 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1910 &#32;&#32;&#32;&#32;operator&gt;=(nullptr_t,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a)&#32;<emphasis role="keyword">noexcept</emphasis>
1911 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(<emphasis role="keyword">nullptr</emphasis>&#32;&lt;&#32;__a);&#32;}
1912 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1913 
1914 &#32;&#32;<emphasis role="comment">//&#32;20.7.2.2.8&#32;shared_ptr&#32;specialized&#32;algorithms.</emphasis>
1915 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1916 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
1917 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
1918 &#32;&#32;&#32;&#32;{&#32;__a.swap(__b);&#32;}
1919 
1920 &#32;&#32;<emphasis role="comment">//&#32;20.7.2.2.9&#32;shared_ptr&#32;casts</emphasis>
1921 
1922 &#32;&#32;<emphasis role="comment">//&#32;The&#32;seemingly&#32;equivalent&#32;code:</emphasis>
1923 &#32;&#32;<emphasis role="comment">//&#32;shared_ptr&lt;_Tp,&#32;_Lp&gt;(static_cast&lt;_Tp*&gt;(__r.get()))</emphasis>
1924 &#32;&#32;<emphasis role="comment">//&#32;will&#32;eventually&#32;result&#32;in&#32;undefined&#32;behaviour,&#32;attempting&#32;to</emphasis>
1925 &#32;&#32;<emphasis role="comment">//&#32;delete&#32;the&#32;same&#32;object&#32;twice.</emphasis>
1927 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp&gt;
1928 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
1929 &#32;&#32;&#32;&#32;static_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1930 &#32;&#32;&#32;&#32;{
1931 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp&#32;=&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;;
1932 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Sp(__r,&#32;<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;_Sp::element_type*<emphasis role="keyword">&gt;</emphasis>(__r.get()));
1933 &#32;&#32;&#32;&#32;}
1934 
1935 &#32;&#32;<emphasis role="comment">//&#32;The&#32;seemingly&#32;equivalent&#32;code:</emphasis>
1936 &#32;&#32;<emphasis role="comment">//&#32;shared_ptr&lt;_Tp,&#32;_Lp&gt;(const_cast&lt;_Tp*&gt;(__r.get()))</emphasis>
1937 &#32;&#32;<emphasis role="comment">//&#32;will&#32;eventually&#32;result&#32;in&#32;undefined&#32;behaviour,&#32;attempting&#32;to</emphasis>
1938 &#32;&#32;<emphasis role="comment">//&#32;delete&#32;the&#32;same&#32;object&#32;twice.</emphasis>
1940 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp&gt;
1941 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
1942 &#32;&#32;&#32;&#32;const_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1943 &#32;&#32;&#32;&#32;{
1944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp&#32;=&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;;
1945 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Sp(__r,&#32;<emphasis role="keyword">const_cast&lt;</emphasis>typename&#32;_Sp::element_type*<emphasis role="keyword">&gt;</emphasis>(__r.get()));
1946 &#32;&#32;&#32;&#32;}
1947 
1948 &#32;&#32;<emphasis role="comment">//&#32;The&#32;seemingly&#32;equivalent&#32;code:</emphasis>
1949 &#32;&#32;<emphasis role="comment">//&#32;shared_ptr&lt;_Tp,&#32;_Lp&gt;(dynamic_cast&lt;_Tp*&gt;(__r.get()))</emphasis>
1950 &#32;&#32;<emphasis role="comment">//&#32;will&#32;eventually&#32;result&#32;in&#32;undefined&#32;behaviour,&#32;attempting&#32;to</emphasis>
1951 &#32;&#32;<emphasis role="comment">//&#32;delete&#32;the&#32;same&#32;object&#32;twice.</emphasis>
1953 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp&gt;
1954 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
1955 &#32;&#32;&#32;&#32;dynamic_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1956 &#32;&#32;&#32;&#32;{
1957 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp&#32;=&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;;
1958 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>*&#32;__p&#32;=&#32;<emphasis role="keyword">dynamic_cast&lt;</emphasis>typename&#32;_Sp::element_type*<emphasis role="keyword">&gt;</emphasis>(__r.get()))
1959 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Sp(__r,&#32;__p);
1960 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Sp();
1961 &#32;&#32;&#32;&#32;}
1962 
1963 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
1964 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp&gt;
1965 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
1966 &#32;&#32;&#32;&#32;reinterpret_pointer_cast(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
1967 &#32;&#32;&#32;&#32;{
1968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Sp&#32;=&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;;
1969 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Sp(__r,&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;_Sp::element_type*<emphasis role="keyword">&gt;</emphasis>(__r.get()));
1970 &#32;&#32;&#32;&#32;}
1971 <emphasis role="preprocessor">#endif</emphasis>
1972 
1973 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
1974 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr
1975 &#32;&#32;&#32;&#32;{
1976 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Res&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
1977 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Compatible&#32;=&#32;<emphasis role="keyword">typename</emphasis>
1978 &#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;__sp_compatible_with&lt;_Yp*,&#32;_Tp*&gt;::value,&#32;_Res&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
1979 
1980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constraint&#32;for&#32;assignment&#32;from&#32;shared_ptr&#32;and&#32;weak_ptr:</emphasis>
1981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
1982 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Assignable&#32;=&#32;_Compatible&lt;_Yp,&#32;__weak_ptr&amp;&gt;;
1983 
1984 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;remove_extent&lt;_Tp&gt;::type;
1986 
1987 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__weak_ptr()&#32;noexcept
1988 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(<emphasis role="keywordtype">nullptr</emphasis>),&#32;_M_refcount()
1989 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1990 
1991 &#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1992 
1993 &#32;&#32;&#32;&#32;&#32;&#32;~__weak_ptr()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1994 
1995 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;&quot;obvious&quot;&#32;converting&#32;constructor&#32;implementation:</emphasis>
1996 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1997 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;template&lt;typename&#32;_Tp1&gt;</emphasis>
1998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;__weak_ptr(const&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__r)</emphasis>
1999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(__r._M_refcount)&#32;//&#32;never&#32;throws</emphasis>
2000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;{&#32;}</emphasis>
2001 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2002 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;has&#32;a&#32;serious&#32;problem.</emphasis>
2003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;__r._M_ptr&#32;may&#32;already&#32;have&#32;been&#32;invalidated.&#32;The&#32;_M_ptr(__r._M_ptr)</emphasis>
2005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;conversion&#32;may&#32;require&#32;access&#32;to&#32;*__r._M_ptr&#32;(virtual&#32;inheritance).</emphasis>
2006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
2007 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;not&#32;possible&#32;to&#32;avoid&#32;spurious&#32;access&#32;violations&#32;since</emphasis>
2008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;in&#32;multithreaded&#32;programs&#32;__r._M_ptr&#32;may&#32;be&#32;invalidated&#32;at&#32;any&#32;point.</emphasis>
2009 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Compatible&lt;_Yp&gt;&gt;
2010 &#32;&#32;&#32;&#32;__weak_ptr(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r)&#32;noexcept
2011 &#32;&#32;&#32;&#32;:&#32;_M_refcount(__r._M_refcount)
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_ptr&#32;=&#32;__r.lock().get();&#32;}
2013 
2014 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Compatible&lt;_Yp&gt;&gt;
2015 &#32;&#32;&#32;&#32;__weak_ptr(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r)&#32;noexcept
2016 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(__r._M_refcount)
2017 &#32;&#32;&#32;&#32;{&#32;}
2018 
2019 &#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr(__weak_ptr&amp;&amp;&#32;__r)&#32;noexcept
2020 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_ptr(__r._M_ptr),&#32;_M_refcount(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r._M_refcount))
2021 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__r._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
2022 
2023 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Compatible&lt;_Yp&gt;&gt;
2024 &#32;&#32;&#32;&#32;__weak_ptr(__weak_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&amp;&#32;__r)&#32;noexcept
2025 &#32;&#32;&#32;&#32;:&#32;_M_ptr(__r.lock().get()),&#32;_M_refcount(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r._M_refcount))
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;__r._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
2027 
2028 &#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr&amp;
2029 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2030 
2031 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
2032 &#32;&#32;&#32;&#32;_Assignable&lt;_Yp&gt;
2033 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
2034 &#32;&#32;&#32;&#32;{
2035 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r.lock().get();
2036 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__r._M_refcount;
2037 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2038 &#32;&#32;&#32;&#32;}
2039 
2040 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
2041 &#32;&#32;&#32;&#32;_Assignable&lt;_Yp&gt;
2042 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
2043 &#32;&#32;&#32;&#32;{
2044 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r._M_ptr;
2045 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__r._M_refcount;
2046 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2047 &#32;&#32;&#32;&#32;}
2048 
2049 &#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr&amp;
2050 &#32;&#32;&#32;&#32;&#32;&#32;operator=(__weak_ptr&amp;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
2051 &#32;&#32;&#32;&#32;&#32;&#32;{
2052 &#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r._M_ptr;
2053 &#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r._M_refcount);
2054 &#32;&#32;&#32;&#32;__r._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2056 &#32;&#32;&#32;&#32;&#32;&#32;}
2057 
2058 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Yp&gt;
2059 &#32;&#32;&#32;&#32;_Assignable&lt;_Yp&gt;
2060 &#32;&#32;&#32;&#32;operator=(__weak_ptr&lt;_Yp,&#32;_Lp&gt;&amp;&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
2061 &#32;&#32;&#32;&#32;{
2062 &#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__r.lock().get();
2063 &#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__r._M_refcount);
2064 &#32;&#32;&#32;&#32;&#32;&#32;__r._M_ptr&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
2066 &#32;&#32;&#32;&#32;}
2067 
2068 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
2069 &#32;&#32;&#32;&#32;&#32;&#32;lock()&#32;const&#32;noexcept
2070 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;element_type,&#32;_Lp&gt;(*<emphasis role="keyword">this</emphasis>,&#32;std::nothrow);&#32;}
2071 
2072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>
2073 &#32;&#32;&#32;&#32;&#32;&#32;use_count()&#32;const&#32;noexcept
2074 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_use_count();&#32;}
2075 
2076 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2077 &#32;&#32;&#32;&#32;&#32;&#32;expired()&#32;const&#32;noexcept
2078 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_get_use_count()&#32;==&#32;0;&#32;}
2079 
2080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
2081 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2082 &#32;&#32;&#32;&#32;owner_before(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2083 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_less(__rhs._M_refcount);&#32;}
2084 
2085 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
2086 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2087 &#32;&#32;&#32;&#32;owner_before(<emphasis role="keyword">const</emphasis>&#32;__weak_ptr&lt;_Tp1,&#32;_Lp&gt;&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2088 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_refcount._M_less(__rhs._M_refcount);&#32;}
2089 
2090 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2091 &#32;&#32;&#32;&#32;&#32;&#32;reset()&#32;noexcept
2092 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;__weak_ptr().swap(*<emphasis role="keyword">this</emphasis>);&#32;}
2093 
2094 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2095 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__weak_ptr&amp;&#32;__s)&#32;<emphasis role="keyword">noexcept</emphasis>
2096 &#32;&#32;&#32;&#32;&#32;&#32;{
2097 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_ptr,&#32;__s._M_ptr);
2098 &#32;&#32;&#32;&#32;_M_refcount._M_swap(__s._M_refcount);
2099 &#32;&#32;&#32;&#32;&#32;&#32;}
2100 
2101 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Used&#32;by&#32;__enable_shared_from_this.</emphasis>
2103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2104 &#32;&#32;&#32;&#32;&#32;&#32;_M_assign(_Tp*&#32;__ptr,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__refcount)&#32;<emphasis role="keyword">noexcept</emphasis>
2105 &#32;&#32;&#32;&#32;&#32;&#32;{
2106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use_count()&#32;==&#32;0)
2107 &#32;&#32;&#32;&#32;&#32;&#32;{
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_ptr&#32;=&#32;__ptr;
2109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_refcount&#32;=&#32;__refcount;
2110 &#32;&#32;&#32;&#32;&#32;&#32;}
2111 &#32;&#32;&#32;&#32;&#32;&#32;}
2112 
2113 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr;
2114 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;_Lock_policy&#32;_Lp1&gt;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__weak_ptr;
2115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__enable_shared_from_this&lt;_Tp,&#32;_Lp&gt;;
2116 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>enable_shared_from_this&lt;_Tp&gt;;
2117 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;202002L</emphasis>
2118 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;_Sp_atomic&lt;weak_ptr&lt;_Tp&gt;&gt;;
2119 <emphasis role="preprocessor">#endif</emphasis>
2120 
2121 &#32;&#32;&#32;&#32;&#32;&#32;element_type*&#32;&#32;_M_ptr;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Contained&#32;pointer.</emphasis>
2122 &#32;&#32;&#32;&#32;&#32;&#32;__weak_count&lt;_Lp&gt;&#32;&#32;_M_refcount;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reference&#32;counter.</emphasis>
2123 &#32;&#32;&#32;&#32;};
2124 
2125 &#32;&#32;<emphasis role="comment">//&#32;20.7.2.3.6&#32;weak_ptr&#32;specialized&#32;algorithms.</emphasis>
2126 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
2127 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2128 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(__weak_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__a,&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__b)&#32;<emphasis role="keyword">noexcept</emphasis>
2129 &#32;&#32;&#32;&#32;{&#32;__a.swap(__b);&#32;}
2130 
2131 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;push</emphasis>
2132 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;ignored&#32;&quot;-Wdeprecated-declarations&quot;</emphasis>
2133 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
2134 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_owner_less&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;binary_function&lt;_Tp,&#32;_Tp,&#32;bool&gt;
2135 &#32;&#32;&#32;&#32;{
2136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2137 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2138 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.owner_before(__rhs);&#32;}
2139 
2140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2141 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2142 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.owner_before(__rhs);&#32;}
2143 
2144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2145 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp1&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2146 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.owner_before(__rhs);&#32;}
2147 &#32;&#32;&#32;&#32;};
2148 <emphasis role="preprocessor">#pragma&#32;GCC&#32;diagnostic&#32;pop</emphasis>
2149 
2150 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
2151 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_Sp_owner_less&lt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>&gt;
2152 &#32;&#32;&#32;&#32;{
2153 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
2154 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>
2155 &#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;_Up&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2156 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(__lhs.owner_before(__rhs))
2157 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.owner_before(__rhs);&#32;}
2158 
2159 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>is_transparent&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link>;
2160 &#32;&#32;&#32;&#32;};
2161 
2162 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
2163 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>owner_less&lt;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&gt;
2164 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_owner_less&lt;__shared_ptr&lt;_Tp,&#32;_Lp&gt;,&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;&gt;
2165 &#32;&#32;&#32;&#32;{&#32;};
2166 
2167 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
2168 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>owner_less&lt;__weak_ptr&lt;_Tp,&#32;_Lp&gt;&gt;
2169 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;_Sp_owner_less&lt;__weak_ptr&lt;_Tp,&#32;_Lp&gt;,&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&gt;
2170 &#32;&#32;&#32;&#32;{&#32;};
2171 
2172 
2173 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
2174 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__enable_shared_from_this
2175 &#32;&#32;&#32;&#32;{
2176 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
2177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__enable_shared_from_this()&#32;noexcept&#32;{&#32;}
2178 
2179 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this(<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;{&#32;}
2180 
2181 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this&amp;
2182 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this&amp;)&#32;<emphasis role="keyword">noexcept</emphasis>
2183 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;}
2184 
2185 &#32;&#32;&#32;&#32;&#32;&#32;~__enable_shared_from_this()&#32;{&#32;}
2186 
2187 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2188 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
2189 &#32;&#32;&#32;&#32;&#32;&#32;shared_from_this()
2190 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;(this-&gt;_M_weak_this);&#32;}
2191 
2192 &#32;&#32;&#32;&#32;&#32;&#32;__shared_ptr&lt;const&#32;_Tp,&#32;_Lp&gt;
2193 &#32;&#32;&#32;&#32;&#32;&#32;shared_from_this()<emphasis role="keyword">&#32;const</emphasis>
2194 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;const&#32;_Tp,&#32;_Lp&gt;(this-&gt;_M_weak_this);&#32;}
2195 
2196 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
2197 &#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;
2198 &#32;&#32;&#32;&#32;&#32;&#32;weak_from_this()&#32;noexcept
2199 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_weak_this;&#32;}
2200 
2201 &#32;&#32;&#32;&#32;&#32;&#32;__weak_ptr&lt;const&#32;_Tp,&#32;_Lp&gt;
2202 &#32;&#32;&#32;&#32;&#32;&#32;weak_from_this()&#32;const&#32;noexcept
2203 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_weak_this;&#32;}
2204 <emphasis role="preprocessor">#endif</emphasis>
2205 
2206 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2207 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1&gt;
2208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2209 &#32;&#32;&#32;&#32;_M_weak_assign(_Tp1*&#32;__p,&#32;<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;&#32;__n)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2210 &#32;&#32;&#32;&#32;{&#32;_M_weak_this._M_assign(__p,&#32;__n);&#32;}
2211 
2212 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this*
2213 &#32;&#32;&#32;&#32;&#32;&#32;__enable_shared_from_this_base(<emphasis role="keyword">const</emphasis>&#32;__shared_count&lt;_Lp&gt;&amp;,
2214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__enable_shared_from_this*&#32;__p)
2215 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__p;&#32;}
2216 
2217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;_Lock_policy&gt;
2218 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__shared_ptr;
2219 
2220 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;__weak_ptr&lt;_Tp,&#32;_Lp&gt;&#32;&#32;_M_weak_this;
2221 &#32;&#32;&#32;&#32;};
2222 
2223 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy,
2224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2225 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
2226 &#32;&#32;&#32;&#32;__allocate_shared(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a,&#32;_Args&amp;&amp;...&#32;__args)
2227 &#32;&#32;&#32;&#32;{
2228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!is_array&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;make_shared&lt;T[]&gt;&#32;not&#32;supported&quot;</emphasis>);
2229 
2230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;(_Sp_alloc_shared_tag&lt;_Alloc&gt;{__a},
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
2232 &#32;&#32;&#32;&#32;}
2233 
2234 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&#32;=&#32;__default_lock_policy,
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
2236 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;
2237 &#32;&#32;&#32;&#32;__make_shared(_Args&amp;&amp;...&#32;__args)
2238 &#32;&#32;&#32;&#32;{
2239 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::remove_const&lt;_Tp&gt;::type&#32;_Tp_nc;
2240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__allocate_shared&lt;_Tp,&#32;_Lp&gt;(std::allocator&lt;_Tp_nc&gt;(),
2241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_Args&gt;(__args)...);
2242 &#32;&#32;&#32;&#32;}
2243 
2245 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;_Lock_policy&#32;_Lp&gt;
2246 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>hash&lt;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&gt;
2247 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;__hash_base&lt;size_t,&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&gt;
2248 &#32;&#32;&#32;&#32;{
2249 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>
2250 &#32;&#32;&#32;&#32;&#32;&#32;operator()(<emphasis role="keyword">const</emphasis>&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;&amp;&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2251 &#32;&#32;&#32;&#32;&#32;&#32;{
2252 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;hash&lt;typename&#32;__shared_ptr&lt;_Tp,&#32;_Lp&gt;::element_type*&gt;()(
2253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.get());
2254 &#32;&#32;&#32;&#32;&#32;&#32;}
2255 &#32;&#32;&#32;&#32;};
2256 
2257 _GLIBCXX_END_NAMESPACE_VERSION
2258 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
2259 
2260 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_SHARED_PTR_BASE_H</emphasis>
</programlisting></section>
