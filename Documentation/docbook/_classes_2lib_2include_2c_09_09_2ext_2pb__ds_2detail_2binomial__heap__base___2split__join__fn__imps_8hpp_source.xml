<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2split__join__fn__imps_8hpp_source" xml:lang="en-US">
<title>split_join_fn_imps.hpp</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/ext/pb_ds/detail/binomial_heap_base_/split_join_fn_imps.hpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2005-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2004&#32;Ami&#32;Tavory&#32;and&#32;Vladimir&#32;Dreizin,&#32;IBM-HRL.</emphasis>
26 
27 <emphasis role="comment">//&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;sell,&#32;and&#32;distribute&#32;this&#32;software</emphasis>
28 <emphasis role="comment">//&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,&#32;provided&#32;that&#32;the&#32;above&#32;copyright</emphasis>
29 <emphasis role="comment">//&#32;notice&#32;appears&#32;in&#32;all&#32;copies,&#32;and&#32;that&#32;both&#32;that&#32;copyright&#32;notice</emphasis>
30 <emphasis role="comment">//&#32;and&#32;this&#32;permission&#32;notice&#32;appear&#32;in&#32;supporting&#32;documentation.&#32;None</emphasis>
31 <emphasis role="comment">//&#32;of&#32;the&#32;above&#32;authors,&#32;nor&#32;IBM&#32;Haifa&#32;Research&#32;Laboratories,&#32;make&#32;any</emphasis>
32 <emphasis role="comment">//&#32;representation&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
33 <emphasis role="comment">//&#32;purpose.&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied</emphasis>
34 <emphasis role="comment">//&#32;warranty.</emphasis>
35 
41 <emphasis role="preprocessor">#ifdef&#32;PB_DS_CLASS_C_DEC</emphasis>
42 
43 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
44 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Pred&gt;
45 <emphasis role="keywordtype">void</emphasis>
46 PB_DS_CLASS_C_DEC::
47 split(Pred&#32;pred,&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
48 {
49 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>((*<emphasis role="keyword">this</emphasis>),<emphasis role="keyword">true</emphasis>)
50 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>(other,<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
51 
52 &#32;&#32;other.clear();
53 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(base_type::empty())
54 &#32;&#32;&#32;&#32;{
55 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>((*<emphasis role="keyword">this</emphasis>),<emphasis role="keyword">true</emphasis>)
56 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>(other,<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
57 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2avx512bwintrin_8h_1a43575ca181bb42c5fbdbe6c81c9b7cad">return</link>;
58 &#32;&#32;&#32;&#32;}
59 
60 &#32;&#32;base_type::to_linked_list();
61 &#32;&#32;node_pointer&#32;p_out&#32;=&#32;base_type::prune(pred);
62 &#32;&#32;while&#32;(p_out&#32;!=&#32;0)
63 &#32;&#32;&#32;&#32;{
64 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1aa2bfb4e74c7be93673913edf15f85504">_GLIBCXX_DEBUG_ASSERT</link>(base_type::m_size&#32;&gt;&#32;0);
65 &#32;&#32;&#32;&#32;&#32;&#32;--base_type::m_size;
66 &#32;&#32;&#32;&#32;&#32;&#32;++other.m_size;
67 
68 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next&#32;=&#32;p_out-&gt;m_p_next_sibling;
69 &#32;&#32;&#32;&#32;&#32;&#32;p_out-&gt;m_p_l_child&#32;=&#32;p_out-&gt;m_p_prev_or_parent&#32;=&#32;0;
70 &#32;&#32;&#32;&#32;&#32;&#32;p_out-&gt;m_metadata&#32;=&#32;0;
71 
72 &#32;&#32;&#32;&#32;&#32;&#32;p_out-&gt;m_p_next_sibling&#32;=&#32;other.m_p_root;
73 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(other.m_p_root&#32;!=&#32;0)
74 &#32;&#32;&#32;&#32;other.m_p_root-&gt;m_p_prev_or_parent&#32;=&#32;p_out;
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;other.m_p_root&#32;=&#32;p_out;
77 &#32;&#32;&#32;&#32;&#32;&#32;other.m_p_root&#32;=&#32;other.fix(other.m_p_root);
78 &#32;&#32;&#32;&#32;&#32;&#32;p_out&#32;=&#32;p_next;
79 &#32;&#32;&#32;&#32;}
80 
81 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>(other,<emphasis role="keyword">true</emphasis>)
82 &#32;&#32;node_pointer&#32;p_cur&#32;=&#32;base_type::m_p_root;
83 &#32;&#32;base_type::m_p_root&#32;=&#32;0;
84 
85 &#32;&#32;while&#32;(p_cur&#32;!=&#32;0)
86 &#32;&#32;&#32;&#32;{
87 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next&#32;=&#32;p_cur-&gt;m_p_next_sibling;
88 &#32;&#32;&#32;&#32;&#32;&#32;p_cur-&gt;m_p_l_child&#32;=&#32;p_cur-&gt;m_p_prev_or_parent&#32;=&#32;0;
89 &#32;&#32;&#32;&#32;&#32;&#32;p_cur-&gt;m_metadata&#32;=&#32;0;
90 &#32;&#32;&#32;&#32;&#32;&#32;p_cur-&gt;m_p_next_sibling&#32;=&#32;base_type::m_p_root;
91 
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(base_type::m_p_root&#32;!=&#32;0)
93 &#32;&#32;&#32;&#32;base_type::m_p_root-&gt;m_p_prev_or_parent&#32;=&#32;p_cur;
94 
95 &#32;&#32;&#32;&#32;&#32;&#32;base_type::m_p_root&#32;=&#32;p_cur;
96 &#32;&#32;&#32;&#32;&#32;&#32;base_type::m_p_root&#32;=&#32;fix(base_type::m_p_root);
97 &#32;&#32;&#32;&#32;&#32;&#32;p_cur&#32;=&#32;p_next;
98 &#32;&#32;&#32;&#32;}
99 
100 &#32;&#32;m_p_max&#32;=&#32;0;
101 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>((*<emphasis role="keyword">this</emphasis>),<emphasis role="keyword">true</emphasis>)
102 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>(other,<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
103 }
104 
105 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
106 inline&#32;<emphasis role="keywordtype">void</emphasis>
107 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
108 join(<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>&amp;&#32;other)
109 {
110 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>((*<emphasis role="keyword">this</emphasis>),<emphasis role="keyword">true</emphasis>)
111 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>(other,<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
112 
113 &#32;&#32;node_pointer&#32;p_other&#32;=&#32;other.m_p_root;
114 &#32;&#32;<link linkend="__classes_2lib_2include_2pconfigintrin_8h_1aaca4765a01b6f3cd5edb899a1159f303">if</link>&#32;(p_other&#32;!=&#32;0)
115 &#32;&#32;&#32;&#32;do
116 &#32;&#32;&#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;node_pointer&#32;p_next&#32;=&#32;p_other-&gt;m_p_next_sibling;
118 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(p_other-&gt;m_p_next_sibling,&#32;p_other-&gt;m_p_prev_or_parent);
119 &#32;&#32;&#32;&#32;p_other&#32;=&#32;p_next;
120 &#32;&#32;&#32;&#32;&#32;&#32;}
121 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_other&#32;!=&#32;0);
122 
123 &#32;&#32;base_type::m_p_root&#32;=&#32;join(base_type::m_p_root,&#32;other.m_p_root);
124 &#32;&#32;base_type::m_size&#32;+=&#32;other.m_size;
125 &#32;&#32;m_p_max&#32;=&#32;0;
126 
127 &#32;&#32;other.m_p_root&#32;=&#32;0;
128 &#32;&#32;other.m_size&#32;=&#32;0;
129 &#32;&#32;other.m_p_max&#32;=&#32;0;
130 
131 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>((*<emphasis role="keyword">this</emphasis>),<emphasis role="keyword">true</emphasis>)
132 &#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2binomial__heap__base___2binomial__heap__base___8hpp_1a93c6da2ea22e1d3384f83937a57633d3">PB_DS_ASSERT_VALID_COND</link>(other,<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>)
133 }
134 
135 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a6fa497162e8fb54f6d8e2259d4ebd8ff">PB_DS_CLASS_T_DEC</link>
136 inline&#32;typename&#32;<link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::node_pointer
137 <link linkend="__classes_2lib_2include_2c_09_09_2ext_2pb__ds_2detail_2bin__search__tree___2bin__search__tree___8hpp_1a304b8b73a11afe64bfca54576b91263b">PB_DS_CLASS_C_DEC</link>::
138 join(node_pointer&#32;p_lhs,&#32;node_pointer&#32;p_rhs)<emphasis role="keyword">&#32;const</emphasis>
139 <emphasis role="keyword"></emphasis>{
140 &#32;&#32;node_pointer&#32;p_ret&#32;=&#32;0;
141 &#32;&#32;node_pointer&#32;p_cur&#32;=&#32;0;
142 
143 &#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p_lhs&#32;!=&#32;0&#32;||&#32;p_rhs&#32;!=&#32;0)
144 &#32;&#32;&#32;&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_rhs&#32;==&#32;0)
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_cur&#32;==&#32;0)
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_ret&#32;=&#32;p_cur&#32;=&#32;p_lhs;
149 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_cur-&gt;m_p_next_sibling&#32;=&#32;p_lhs;
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_lhs-&gt;m_p_prev_or_parent&#32;=&#32;p_cur;
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
154 &#32;&#32;&#32;&#32;&#32;&#32;p_cur&#32;=&#32;p_lhs&#32;=&#32;0;
155 &#32;&#32;&#32;&#32;}
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_lhs&#32;==&#32;0&#32;||&#32;p_rhs-&gt;m_metadata&#32;&lt;&#32;p_lhs-&gt;m_metadata)
157 &#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_cur&#32;==&#32;0)
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_ret&#32;=&#32;p_cur&#32;=&#32;p_rhs;
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_rhs&#32;=&#32;p_rhs-&gt;m_p_prev_or_parent;
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_cur-&gt;m_p_next_sibling&#32;=&#32;p_rhs;
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_rhs&#32;=&#32;p_rhs-&gt;m_p_prev_or_parent;
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_cur-&gt;m_p_next_sibling-&gt;m_p_prev_or_parent&#32;=&#32;p_cur;
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_cur&#32;=&#32;p_cur-&gt;m_p_next_sibling;
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
170 &#32;&#32;&#32;&#32;}
171 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_lhs-&gt;m_metadata&#32;&lt;&#32;p_rhs-&gt;m_metadata)
172 &#32;&#32;&#32;&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_cur&#32;==&#32;0)
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_ret&#32;=&#32;p_cur&#32;=&#32;p_lhs;
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_cur-&gt;m_p_next_sibling&#32;=&#32;p_lhs;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_lhs-&gt;m_p_prev_or_parent&#32;=&#32;p_cur;
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p_cur&#32;=&#32;p_cur-&gt;m_p_next_sibling;
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
181 &#32;&#32;&#32;&#32;&#32;&#32;p_lhs&#32;=&#32;p_cur-&gt;m_p_next_sibling;
182 &#32;&#32;&#32;&#32;}
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
184 &#32;&#32;&#32;&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;node_pointer&#32;p_next_rhs&#32;=&#32;p_rhs-&gt;m_p_prev_or_parent;
186 &#32;&#32;&#32;&#32;&#32;&#32;p_rhs-&gt;m_p_next_sibling&#32;=&#32;p_lhs;
187 &#32;&#32;&#32;&#32;&#32;&#32;p_lhs&#32;=&#32;fix(p_rhs);
188 &#32;&#32;&#32;&#32;&#32;&#32;p_rhs&#32;=&#32;p_next_rhs;
189 &#32;&#32;&#32;&#32;}
190 &#32;&#32;&#32;&#32;}
191 
192 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_cur&#32;!=&#32;0)
193 &#32;&#32;&#32;&#32;p_cur-&gt;m_p_next_sibling&#32;=&#32;0;
194 
195 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p_ret&#32;!=&#32;0)
196 &#32;&#32;&#32;&#32;p_ret-&gt;m_p_prev_or_parent&#32;=&#32;0;
197 
198 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p_ret;
199 }
200 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
