<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4" xml:lang="en-US">
<title>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt; Class Template Reference</title>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;safe_iterator.h&gt;</computeroutput>
</para>
Inheritance diagram for __gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__ac3d43e4e3739da546ce7fdff7231905cf.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for __gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__ac13938858458fb3b65c3dbf55940c1bfe.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">_Safe_base::difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">_Safe_base::reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990">reference</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">_Safe_base::difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">_Safe_base::reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990">reference</link></para>
</listitem>
        </itemizedlist>
</simplesect>
Public Types inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__iterator_1a0bb334e63c3292865e9ff2f608eee3a8">iterator_type</link></para>
</listitem>
            <listitem><para>typedef _Iterator <link linkend="_class____gnu__debug_1_1___safe__iterator_1a0bb334e63c3292865e9ff2f608eee3a8">iterator_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link></para>
</listitem>
            <listitem><para>typedef _Traits::iterator_category <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link></para>
</listitem>
            <listitem><para>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3ca0810e8158c07034be3fe7326d7a12">value_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::value_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3ca0810e8158c07034be3fe7326d7a12">value_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::difference_type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link></para>
</listitem>
            <listitem><para>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link></para>
</listitem>
            <listitem><para>typedef _Traits::reference <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link></para>
</listitem>
            <listitem><para>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link></para>
</listitem>
            <listitem><para>typedef _Traits::pointer <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link> &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f230bfabecb6d267f489c4019ef6676">_Self</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, <link linkend="_class____gnu__debug_1_1___safe__iterator_1ab82f8e58d17b5a378922c33adbea9661">iterator_category</link> &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f230bfabecb6d267f489c4019ef6676">_Self</link></para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a549176be59266e4f428241e3daaead13">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8165016ceafe14d758de5ada4a3604b">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac9f1559f0cd73b5acf025e989e7975e5">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1af4044fce3a0f649e6d28f5fe0873617c">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, std::random_access_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac15c0f760f4b0ac52ff27e8355f2c077">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ab716c96baaaf2db36f3bb2d89518a011">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist) const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8ba924dfbb93c1d8dd3b7c4844d6e0b">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a61358f097d8d36a1ae2de73f37c4c607">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abbaeccd7c1872680dc7978421566cfd3">operator--</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator predecrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a544aad819b4c547a2c201e68038f80db">operator--</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postdecrement. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a876e67da480d687ecd0f1b4f9bb132d1">operator[]</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) const _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aea1eb386d7d39779cf371eb3fcfd2d2a">operator+=</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a3a0cba478fccc596d52e63b646858d4f">operator-=</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a549176be59266e4f428241e3daaead13">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8165016ceafe14d758de5ada4a3604b">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac9f1559f0cd73b5acf025e989e7975e5">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1af4044fce3a0f649e6d28f5fe0873617c">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, std::random_access_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac15c0f760f4b0ac52ff27e8355f2c077">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ab716c96baaaf2db36f3bb2d89518a011">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist) const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8ba924dfbb93c1d8dd3b7c4844d6e0b">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a61358f097d8d36a1ae2de73f37c4c607">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abbaeccd7c1872680dc7978421566cfd3">operator--</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator predecrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a544aad819b4c547a2c201e68038f80db">operator--</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postdecrement. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a876e67da480d687ecd0f1b4f9bb132d1">operator[]</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) const _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aea1eb386d7d39779cf371eb3fcfd2d2a">operator+=</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a3a0cba478fccc596d52e63b646858d4f">operator-=</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a3a3a5cc69b2e1e4c50e33daaa8689604">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a037d25edc49ed6168a1092d6b3157bdf">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a47d3374fdff94b8780c3b708fbc59b31">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a0d635b5b496022278e946dd102e1c334">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link> &gt;::__value, std::bidirectional_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a5c975e7983a98b3e0ce2573b79b08af7">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a251ba70c245471b93e1c440f093a9cd5">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa380eff611c872f236277e43e4eedf7b">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa071d99ce70ab4fa90ac8992489d2b88">operator--</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator predecrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a116df69aba5b5e6182942243df25b698">operator--</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postdecrement. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aee45ca57597d27fb0ebcaa342709efe5">_M_decrementable</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a3a3a5cc69b2e1e4c50e33daaa8689604">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a037d25edc49ed6168a1092d6b3157bdf">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a47d3374fdff94b8780c3b708fbc59b31">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para>template&lt;typename _MutableIterator &gt; </para><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a0d635b5b496022278e946dd102e1c334">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link> &gt;::__value, std::bidirectional_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a5c975e7983a98b3e0ce2573b79b08af7">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x)</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a251ba70c245471b93e1c440f093a9cd5">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa380eff611c872f236277e43e4eedf7b">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aa071d99ce70ab4fa90ac8992489d2b88">operator--</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator predecrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a116df69aba5b5e6182942243df25b698">operator--</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postdecrement. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1aee45ca57597d27fb0ebcaa342709efe5">_M_decrementable</link> () const</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a9c152e7a0e9b12c9bf6d9db309fff72b">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af80c8adce05a44a11776092f029b0645">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af7595c1b79ad6fd9c6330085e0b07cf9">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1aa19b46fc4451b021905e0e4f0d173b58">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link> &gt;::__value, std::forward_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a9c152e7a0e9b12c9bf6d9db309fff72b">_Safe_iterator</link> () _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af80c8adce05a44a11776092f029b0645">_Safe_iterator</link> (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) _GLIBCXX_NOEXCEPT</para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1af7595c1b79ad6fd9c6330085e0b07cf9">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy construction. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1aa19b46fc4451b021905e0e4f0d173b58">_Safe_iterator</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link> &gt;::__value, std::forward_iterator_tag &gt;::__type &gt; &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1acbd0220fdddeff06c0a1c8581a81c856">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1acbd0220fdddeff06c0a1c8581a81c856">operator=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>

<para>Copy assignment. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a49475214180c9591e286ba45636d2447">operator*</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a49475214180c9591e286ba45636d2447">operator*</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aaf4e403a90c0f4c19fa0d3386e541638">operator-&gt;</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1ced368ec0276fbb159f477e9d457fce">pointer</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aaf4e403a90c0f4c19fa0d3386e541638">operator-&gt;</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Iterator dereference. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a604aa250fdd3301544a77e49bd3021f0">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1afcab5e513c8f51d1603094b906f2a5b7">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a604aa250fdd3301544a77e49bd3021f0">operator++</link> () _GLIBCXX_NOEXCEPT</para>

<para>Iterator preincrement. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1afcab5e513c8f51d1603094b906f2a5b7">operator++</link> (int) _GLIBCXX_NOEXCEPT</para>

<para>Iterator postincrement. </para>
</listitem>
            <listitem><para>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8ab2bd3cab984cb85cd02f1d61ce9931">base</link> () _GLIBCXX_NOEXCEPT</para>

<para>Return the underlying iterator. </para>
</listitem>
            <listitem><para>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a512e3878e5fb2411995fcd86fe64a11b">base</link> () const _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para>_Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8ab2bd3cab984cb85cd02f1d61ce9931">base</link> () _GLIBCXX_NOEXCEPT</para>

<para>Return the underlying iterator. </para>
</listitem>
            <listitem><para>const _Iterator &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a512e3878e5fb2411995fcd86fe64a11b">base</link> () const _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a2f840fc0c5344d911e8fdbc73e9ca79e">operator _Iterator</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a2f840fc0c5344d911e8fdbc73e9ca79e">operator _Iterator</link> () const _GLIBCXX_NOEXCEPT</para>

<para>Conversion to underlying non-debug iterator to allow better interaction with non-debug containers. </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ad58fb2d0ddcf50022427bdee797690e9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ad58fb2d0ddcf50022427bdee797690e9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3b20ef089474f666775bd1f1a865c392">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a3b20ef089474f666775bd1f1a865c392">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1653d02083343be4ddbd662070eec301">_M_dereferenceable</link> () const</para>

<para>Is the iterator dereferenceable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a1653d02083343be4ddbd662070eec301">_M_dereferenceable</link> () const</para>

<para>Is the iterator dereferenceable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5fa0f26e5d046377ffccb409f2944833">_M_before_dereferenceable</link> () const</para>

<para>Is the iterator before a dereferenceable one? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5fa0f26e5d046377ffccb409f2944833">_M_before_dereferenceable</link> () const</para>

<para>Is the iterator before a dereferenceable one? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a046fd9f196da5476ba014a3ed33316f6">_M_incrementable</link> () const</para>

<para>Is the iterator incrementable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a046fd9f196da5476ba014a3ed33316f6">_M_incrementable</link> () const</para>

<para>Is the iterator incrementable? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a4c52f7fc0caab7e9923ae59d5353c05d">_M_can_advance</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link> __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a61b0d14c3b13f7a1989796596ef0e8c5">_M_can_advance</link> (const std::pair&lt; _Diff, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, int __way) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a4c52f7fc0caab7e9923ae59d5353c05d">_M_can_advance</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link> __n, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __strict=<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a61b0d14c3b13f7a1989796596ef0e8c5">_M_can_advance</link> (const std::pair&lt; _Diff, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, int __way) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5499070e50573f63e76f4333fa156166">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __check_dereferenceable=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a5499070e50573f63e76f4333fa156166">_M_valid_range</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp;__dist, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __check_dereferenceable=<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>) const</para>
</listitem>
            <listitem><para>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a11704a65f7bb3df9b8cf2e63745d8d66">_M_get_sequence</link> () const</para>
</listitem>
            <listitem><para>__gnu_cxx::__conditional_type&lt; _IsConstant::__value, const_Sequence *, _Sequence * &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a11704a65f7bb3df9b8cf2e63745d8d66">_M_get_sequence</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a130167f02144c108f212d17375b21e88">_M_get_distance_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs) const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a130167f02144c108f212d17375b21e88">_M_get_distance_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp;__rhs) const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f313f1664dac97493435fb4ebbdde49">_M_get_distance_from_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a9f313f1664dac97493435fb4ebbdde49">_M_get_distance_from_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a7e1d9cbcbb61e6410dc8054e1a52b3c4">_M_get_distance_to_end</link> () const</para>
</listitem>
            <listitem><para><link linkend="_struct____gnu__debug_1_1___distance__traits">_Distance_traits</link>&lt; _Iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1a7e1d9cbcbb61e6410dc8054e1a52b3c4">_M_get_distance_to_end</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8b74400462adbb5068c2df54871d10cb">_M_is_begin</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s begin() iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8b74400462adbb5068c2df54871d10cb">_M_is_begin</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s begin() iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ac5c54eb2babadef8f12760583730dd85">_M_is_end</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link> iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ac5c54eb2babadef8f12760583730dd85">_M_is_end</link> () const</para>

<para>Is this iterator equal to the sequence&apos;s <link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end()</link> iterator? </para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2340dafeccff234ffc0138e2aa23230">_M_is_before_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2340dafeccff234ffc0138e2aa23230">_M_is_before_begin</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8150f9d08a7b921758b2e1b59263c733">_M_is_beginnest</link> () const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1a8150f9d08a7b921758b2e1b59263c733">_M_is_beginnest</link> () const</para>
</listitem>
        </itemizedlist>
Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1af1899eb4a27c3de8a74e9bf24dc920b4">_M_detach_single</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a66a6d55e473c9ee51324b1bd3a4d087d">_M_attached_to</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq) const</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aefb17f520b7e88212cf86e552d440858">_M_singular</link> () const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a1cfdc101e86feb8a053ddc71bbef339b">_GLIBCXX_PURE</link> <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a180805af5a3c839c5d221660b0faae97">_M_can_compare</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x) const  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a231c2eca561476c79c326ae696512cd2">_M_invalidate</link> ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a1546bb95326eb29d175cb45140a128dd">_M_reset</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a15200550c9de14f693bd2fd9badbce2b">_M_unlink</link> ()  throw ()</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a8b4794a8ae5bdcb2c0127176f8b19ad0">operator&lt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1adc78fcce1adde56e97af72aadeb2941d">operator&lt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a7223d191ff28850d41036026b1e1c979">operator&lt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a36342d3cd4eeb1184f77d0e520d1135f">operator&lt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a224108d4ee45fc59721f7f9df090f545">operator&gt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a584c2a2c4c710ec497774f3fcb182ca6">operator&gt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aee22f5b74952f59a2ab3ecdc3d9ed2b4">operator&gt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a07898326047fad24919f9d7c6b16b268">operator&gt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abb3993a997b04a70622599bff30b91d3">operator-</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a01b5938a1e5b923f92d3118efa12bc06">operator-</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a789ac28c3a3fda811f5e511d7d796862">operator+</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a553fe8f8cd764e41fa520b0ac585df11">operator+</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a5e018cc5b7c7334f65302a555f2b7841">operator-</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a8b4794a8ae5bdcb2c0127176f8b19ad0">operator&lt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1adc78fcce1adde56e97af72aadeb2941d">operator&lt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a7223d191ff28850d41036026b1e1c979">operator&lt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a36342d3cd4eeb1184f77d0e520d1135f">operator&lt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a224108d4ee45fc59721f7f9df090f545">operator&gt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a584c2a2c4c710ec497774f3fcb182ca6">operator&gt;</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aee22f5b74952f59a2ab3ecdc3d9ed2b4">operator&gt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a07898326047fad24919f9d7c6b16b268">operator&gt;=</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abb3993a997b04a70622599bff30b91d3">operator-</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a01b5938a1e5b923f92d3118efa12bc06">operator-</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__rhs) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a789ac28c3a3fda811f5e511d7d796862">operator+</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a553fe8f8cd764e41fa520b0ac585df11">operator+</link> (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__x) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a5e018cc5b7c7334f65302a555f2b7841">operator-</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp;__x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) _GLIBCXX_NOEXCEPT</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
Static Public Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para>static _GLIBCXX_CONSTEXPR <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aebecd16df3b101fbb55d205714f5f74c">_S_constant</link> ()</para>

<para>Determine if this is a constant iterator. </para>
</listitem>
            <listitem><para>static _GLIBCXX_CONSTEXPR <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_1aebecd16df3b101fbb55d205714f5f74c">_S_constant</link> ()</para>

<para>Determine if this is a constant iterator. </para>
</listitem>
        </itemizedlist>
</simplesect>
Public Attributes inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad7ffe137fed29c851275dc5a9ddf06c1">_M_sequence</link></para>
</listitem>
            <listitem><para>unsigned int <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1ad07568d7660eb8b85493b548d10c637a">_M_version</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7f653b7476705d7d0445edac938ac78f">_M_prior</link></para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> * <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a7c9c250dea264463f74591429f8ba123">_M_next</link></para>
</listitem>
        </itemizedlist>
Protected Types inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_Safe_base::_OtherIterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link></para>
</listitem>
            <listitem><para>typedef _Safe_base::_Attach_single <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_Safe_base::_OtherIterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1abbc01844c825362c3ed7b45b36858211">_OtherIterator</link></para>
</listitem>
            <listitem><para>typedef _Safe_base::_Attach_single <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link></para>
</listitem>
        </itemizedlist>
Protected Types inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para>typedef std::__are_same&lt; typename _Sequence::_Base::const_iterator, _Iterator &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2141f1bd85bd010b1b132172ff49f49">_IsConstant</link></para>
</listitem>
            <listitem><para>typedef std::__are_same&lt; typename _Sequence::_Base::const_iterator, _Iterator &gt; <link linkend="_class____gnu__debug_1_1___safe__iterator_1ae2141f1bd85bd010b1b132172ff49f49">_IsConstant</link></para>
</listitem>
            <listitem><para>typedef __gnu_cxx::__conditional_type&lt; _IsConstant::__value, typename_Sequence::_Base::iterator, typename_Sequence::_Base::const_iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link></para>
</listitem>
            <listitem><para>typedef __gnu_cxx::__conditional_type&lt; _IsConstant::__value, typename_Sequence::_Base::iterator, typename_Sequence::_Base::const_iterator &gt;::__type <link linkend="_class____gnu__debug_1_1___safe__iterator_1aa2f8eddbb9601e97e3e4d2e75006fc98">_OtherIterator</link></para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::bidirectional_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1ad10eaf532f15db6889dd038f1c74dde7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link>) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1ad10eaf532f15db6889dd038f1c74dde7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1bidirectional__iterator__tag_01_4_1a91a686b2f0f6b3f1364e1d37b1a20b22">_Attach_single</link>) _GLIBCXX_NOEXCEPT</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::forward_iterator_tag &gt;</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a71ecf6d5f10f591b08be04bfdf5684f7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, _Attach_single) _GLIBCXX_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator_1a71ecf6d5f10f591b08be04bfdf5684f7">_Safe_iterator</link> (_Iterator __i, <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, _Attach_single) _GLIBCXX_NOEXCEPT</para>
</listitem>
        </itemizedlist>
Protected Member Functions inherited from <link linkend="_class____gnu__debug_1_1___safe__iterator__base">__gnu_debug::_Safe_iterator_base</link>        <itemizedlist>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a3e6e1cb37b5585e5ee3b254bbd7d5cbb">_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a74a667bf14e3feb71571c352430fcf12">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a0993fe5b5c385572b6261e2100f01191">_Safe_iterator_base</link> (const <link linkend="_class____gnu__debug_1_1___safe__iterator__base">_Safe_iterator_base</link> &amp;__x, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="_class____gnu__debug_1_1___safe__iterator__base_1aa04a365fa43696b90e0d490682639065">~_Safe_iterator_base</link> ()</para>
</listitem>
            <listitem><para>__gnu_cxx::__mutex &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a394cc3f97fe4fb1c7d4378faa0b02877">_M_get_mutex</link> ()  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a51809843192abdf6415ec0342fb0fdb9">_M_attach</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a45148b9f8f44371fedfd62f39827a18b">_M_attach_single</link> (<link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> *__seq, <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> __constant)  throw ()</para>
</listitem>
            <listitem><para><link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a0f7193911e632cd84da4082d5c628fe3">void</link> <link linkend="_class____gnu__debug_1_1___safe__iterator__base_1a8deb31273aaf1912a5540ae046581c54">_M_detach</link> ()</para>
</listitem>
        </itemizedlist>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3"/><section>
    <title>difference_type<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">_Safe_base::difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3"/><section>
    <title>difference_type<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>difference_type</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a30a9b5cb458330240b532d8a5f599c89">_Safe_base::difference_type</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990"/><section>
    <title>reference<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">_Safe_base::reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990"/><section>
    <title>reference<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>reference</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class____gnu__debug_1_1___safe__iterator_1a74c630f93b916c3300078eb55060b26c">_Safe_base::reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::reference</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a549176be59266e4f428241e3daaead13"/><section>
    <title>_Safe_iterator()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><formalpara><title>Postcondition</title>

<para>the iterator is singular and unattached </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8165016ceafe14d758de5ada4a3604b"/><section>
    <title>_Safe_iterator()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</para>

<para><formalpara><title>Precondition</title>

<para><computeroutput>seq</computeroutput> is not NULL </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>this is not singular </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac9f1559f0cd73b5acf025e989e7975e5"/><section>
    <title>_Safe_iterator()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy construction. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1af4044fce3a0f649e6d28f5fe0873617c"/><section>
    <title>_Safe_iterator()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _MutableIterator &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, std::random_access_iterator_tag &gt;::__type &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a549176be59266e4f428241e3daaead13"/><section>
    <title>_Safe_iterator()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para><formalpara><title>Postcondition</title>

<para>the iterator is singular and unattached </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8165016ceafe14d758de5ada4a3604b"/><section>
    <title>_Safe_iterator()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator (_Iterator __i, const <link linkend="_class____gnu__debug_1_1___safe__sequence__base">_Safe_sequence_base</link> * __seq)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Safe iterator construction from an unsafe iterator and its sequence. </para>
</para>

<para><formalpara><title>Precondition</title>

<para><computeroutput>seq</computeroutput> is not NULL </para>
</formalpara>
<formalpara><title>Postcondition</title>

<para>this is not singular </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac9f1559f0cd73b5acf025e989e7975e5"/><section>
    <title>_Safe_iterator()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy construction. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1af4044fce3a0f649e6d28f5fe0873617c"/><section>
    <title>_Safe_iterator()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>_Safe_iterator</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_Safe_iterator</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><computeroutput>template&lt;typename _MutableIterator &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_Safe_iterator (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _MutableIterator, _Sequence, typename __gnu_cxx::__enable_if&lt; _Safe_base::_IsConstant::__value &amp;&amp;std::__are_same&lt; _MutableIterator, _OtherIterator &gt;::__value, std::random_access_iterator_tag &gt;::__type &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Converting constructor from a mutable iterator to a constant iterator. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ab716c96baaaf2db36f3bb2d89518a011"/><section>
    <title>_M_valid_range()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>_M_valid_range</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_M_valid_range</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_M_valid_range (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt; &amp; __rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp; __dist) const</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ab716c96baaaf2db36f3bb2d89518a011"/><section>
    <title>_M_valid_range()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>_M_valid_range</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>_M_valid_range</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::_M_valid_range (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt; &amp; __rhs, std::pair&lt; <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link>, <link linkend="_namespace____gnu__debug_1a3817879cb58c2db9f22712a634ef0b92">_Distance_precision</link> &gt; &amp; __dist) const</computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8ba924dfbb93c1d8dd3b7c4844d6e0b"/><section>
    <title>operator++()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator preincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ae8ba924dfbb93c1d8dd3b7c4844d6e0b"/><section>
    <title>operator++()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator preincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a61358f097d8d36a1ae2de73f37c4c607"/><section>
    <title>operator++()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a61358f097d8d36a1ae2de73f37c4c607_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a61358f097d8d36a1ae2de73f37c4c607"/><section>
    <title>operator++()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postincrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is incrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a61358f097d8d36a1ae2de73f37c4c607_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aea1eb386d7d39779cf371eb3fcfd2d2a"/><section>
    <title>operator+=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator+= (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_aea1eb386d7d39779cf371eb3fcfd2d2a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aea1eb386d7d39779cf371eb3fcfd2d2a"/><section>
    <title>operator+=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator+= (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_aea1eb386d7d39779cf371eb3fcfd2d2a_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abbaeccd7c1872680dc7978421566cfd3"/><section>
    <title>operator--()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator predecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abbaeccd7c1872680dc7978421566cfd3"/><section>
    <title>operator--()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator predecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a544aad819b4c547a2c201e68038f80db"/><section>
    <title>operator--()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator-- (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postdecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a544aad819b4c547a2c201e68038f80db_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a544aad819b4c547a2c201e68038f80db"/><section>
    <title>operator--()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator-- (int )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator postdecrement. </para>
</para>

<para><formalpara><title>Precondition</title>

<para>iterator is decrementable </para>
</formalpara>
</para>
Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a544aad819b4c547a2c201e68038f80db_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a3a0cba478fccc596d52e63b646858d4f"/><section>
    <title>operator-=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator-= (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a3a0cba478fccc596d52e63b646858d4f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a3a0cba478fccc596d52e63b646858d4f"/><section>
    <title>operator-=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator-= (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a3a0cba478fccc596d52e63b646858d4f_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac15c0f760f4b0ac52ff27e8355f2c077"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy assignment. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1ac15c0f760f4b0ac52ff27e8355f2c077"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link> &amp; <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt; &amp; __x)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy assignment. </para>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a876e67da480d687ecd0f1b4f9bb132d1"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator[] (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a876e67da480d687ecd0f1b4f9bb132d1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a876e67da480d687ecd0f1b4f9bb132d1"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1acbf075b3079a43c375ac91c6072fa990">reference</link> <link linkend="_class____gnu__debug_1_1___safe__iterator">__gnu_debug::_Safe_iterator</link>&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;::operator[] (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n) const<computeroutput>[inline]</computeroutput></computeroutput></para>Here is the call graph for this function:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_a876e67da480d687ecd0f1b4f9bb132d1_cgraph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a789ac28c3a3fda811f5e511d7d796862"/><section>
    <title>operator+<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> operator+ (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a789ac28c3a3fda811f5e511d7d796862"/><section>
    <title>operator+<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> operator+ (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a553fe8f8cd764e41fa520b0ac585df11"/><section>
    <title>operator+<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> operator+ (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __x)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a553fe8f8cd764e41fa520b0ac585df11"/><section>
    <title>operator+<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> operator+ (<link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __x)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abb3993a997b04a70622599bff30b91d3"/><section>
    <title>operator-<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> operator- (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1abb3993a997b04a70622599bff30b91d3"/><section>
    <title>operator-<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> operator- (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a01b5938a1e5b923f92d3118efa12bc06"/><section>
    <title>operator-<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> operator- (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a01b5938a1e5b923f92d3118efa12bc06"/><section>
    <title>operator-<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> operator- (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a5e018cc5b7c7334f65302a555f2b7841"/><section>
    <title>operator-<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> operator- (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a5e018cc5b7c7334f65302a555f2b7841"/><section>
    <title>operator-<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> operator- (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __x, <link linkend="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aabad5d3da6b0d17e62fe496c2bf6deb3">difference_type</link> __n)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1adc78fcce1adde56e97af72aadeb2941d"/><section>
    <title>operator&lt;<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1adc78fcce1adde56e97af72aadeb2941d"/><section>
    <title>operator&lt;<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a8b4794a8ae5bdcb2c0127176f8b19ad0"/><section>
    <title>operator&lt;<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a8b4794a8ae5bdcb2c0127176f8b19ad0"/><section>
    <title>operator&lt;<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator&lt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a36342d3cd4eeb1184f77d0e520d1135f"/><section>
    <title>operator&lt;=<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a36342d3cd4eeb1184f77d0e520d1135f"/><section>
    <title>operator&lt;=<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a7223d191ff28850d41036026b1e1c979"/><section>
    <title>operator&lt;=<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a7223d191ff28850d41036026b1e1c979"/><section>
    <title>operator&lt;=<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a584c2a2c4c710ec497774f3fcb182ca6"/><section>
    <title>operator&gt;<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a584c2a2c4c710ec497774f3fcb182ca6"/><section>
    <title>operator&gt;<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a224108d4ee45fc59721f7f9df090f545"/><section>
    <title>operator&gt;<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a224108d4ee45fc59721f7f9df090f545"/><section>
    <title>operator&gt;<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator&gt;</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt; (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a07898326047fad24919f9d7c6b16b268"/><section>
    <title>operator&gt;=<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1a07898326047fad24919f9d7c6b16b268"/><section>
    <title>operator&gt;=<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_OtherSelf</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aee22f5b74952f59a2ab3ecdc3d9ed2b4"/><section>
    <title>operator&gt;=<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class____gnu__debug_1_1___safe__iterator_3_01___iterator_00_01___sequence_00_01std_1_1random__access__iterator__tag_01_4_1aee22f5b74952f59a2ab3ecdc3d9ed2b4"/><section>
    <title>operator&gt;=<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</secondary></indexterm>
<indexterm><primary>__gnu_debug::_Safe_iterator&lt; _Iterator, _Sequence, std::random_access_iterator_tag &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename _Iterator , typename _Sequence &gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link> friend <link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __lhs, const <link linkend="_class____gnu__debug_1_1___safe__iterator">_Self</link> &amp; __rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/debug/<link linkend="_lib_2include_2c_09_09_2debug_2safe__iterator_8h">safe_iterator.h</link>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/debug/<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2safe__iterator_8h">safe_iterator.h</link></section>
</section>
