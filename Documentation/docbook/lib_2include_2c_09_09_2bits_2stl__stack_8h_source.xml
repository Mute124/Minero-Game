<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2stl__stack_8h_source" xml:lang="en-US">
<title>stl_stack.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/stl_stack.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Stack&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2001-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
25 <emphasis role="comment">/*</emphasis>
26 <emphasis role="comment">&#32;*</emphasis>
27 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1994</emphasis>
28 <emphasis role="comment">&#32;*&#32;Hewlett-Packard&#32;Company</emphasis>
29 <emphasis role="comment">&#32;*</emphasis>
30 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
31 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
32 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
33 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
34 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Hewlett-Packard&#32;Company&#32;makes&#32;no</emphasis>
35 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
36 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
37 <emphasis role="comment">&#32;*</emphasis>
38 <emphasis role="comment">&#32;*</emphasis>
39 <emphasis role="comment">&#32;*&#32;Copyright&#32;(c)&#32;1996,1997</emphasis>
40 <emphasis role="comment">&#32;*&#32;Silicon&#32;Graphics&#32;Computer&#32;Systems,&#32;Inc.</emphasis>
41 <emphasis role="comment">&#32;*</emphasis>
42 <emphasis role="comment">&#32;*&#32;Permission&#32;to&#32;use,&#32;copy,&#32;modify,&#32;distribute&#32;and&#32;sell&#32;this&#32;software</emphasis>
43 <emphasis role="comment">&#32;*&#32;and&#32;its&#32;documentation&#32;for&#32;any&#32;purpose&#32;is&#32;hereby&#32;granted&#32;without&#32;fee,</emphasis>
44 <emphasis role="comment">&#32;*&#32;provided&#32;that&#32;the&#32;above&#32;copyright&#32;notice&#32;appear&#32;in&#32;all&#32;copies&#32;and</emphasis>
45 <emphasis role="comment">&#32;*&#32;that&#32;both&#32;that&#32;copyright&#32;notice&#32;and&#32;this&#32;permission&#32;notice&#32;appear</emphasis>
46 <emphasis role="comment">&#32;*&#32;in&#32;supporting&#32;documentation.&#32;&#32;Silicon&#32;Graphics&#32;makes&#32;no</emphasis>
47 <emphasis role="comment">&#32;*&#32;representations&#32;about&#32;the&#32;suitability&#32;of&#32;this&#32;software&#32;for&#32;any</emphasis>
48 <emphasis role="comment">&#32;*&#32;purpose.&#32;&#32;It&#32;is&#32;provided&#32;&quot;as&#32;is&quot;&#32;without&#32;express&#32;or&#32;implied&#32;warranty.</emphasis>
49 <emphasis role="comment">&#32;*/</emphasis>
50 
56 <emphasis role="preprocessor">#ifndef&#32;_STL_STACK_H</emphasis>
57 <emphasis role="preprocessor">#define&#32;_STL_STACK_H&#32;1</emphasis>
58 
59 <emphasis role="preprocessor">#include&#32;&lt;bits/concept_check.h&gt;</emphasis>
60 <emphasis role="preprocessor">#include&#32;&lt;debug/debug.h&gt;</emphasis>
61 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
62 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/uses_allocator.h&gt;</emphasis>
63 <emphasis role="preprocessor">#endif</emphasis>
64 
65 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
66 {
67 _GLIBCXX_BEGIN_NAMESPACE_VERSION
68 
98 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence&#32;=&#32;deque&lt;_Tp&gt;&#32;&gt;
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>stack
100 &#32;&#32;&#32;&#32;{
101 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_CONCEPT_CHECKS</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;concept&#32;requirements</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::value_type&#32;_Sequence_value_type;
104 <emphasis role="preprocessor">#&#32;if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Tp,&#32;_SGIAssignableConcept)
106 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae4dc1beb74b88e6b1215e05c397fc7a2">__glibcxx_class_requires</link>(_Sequence,&#32;_BackInsertionSequenceConcept)
107 <emphasis role="preprocessor">#&#32;endif</emphasis>
108 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2bits_2concept__check_8h_1ae97aa7f8b95f5fdb311dc98ff0c31c72">__glibcxx_class_requires2</link>(_Tp,&#32;_Sequence_value_type,&#32;_SameTypeConcept)
109 <emphasis role="preprocessor">#endif</emphasis>
110 
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1&gt;
112 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
113 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp1,&#32;_Seq1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp1,&#32;_Seq1&gt;&amp;);
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq1&gt;
116 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
117 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp1,&#32;_Seq1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp1,&#32;_Seq1&gt;&amp;);
118 
119 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
120 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp1,&#32;three_way_comparable&#32;_Seq1&gt;
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;compare_three_way_result_t&lt;_Seq1&gt;
122 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp1,&#32;_Seq1&gt;&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp1,&#32;_Seq1&gt;&amp;);
123 <emphasis role="preprocessor">#endif</emphasis>
124 
125 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
127 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Uses&#32;=&#32;<emphasis role="keyword">typename</emphasis>
128 &#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;uses_allocator&lt;_Sequence,&#32;_Alloc&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>;
129 
130 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L</emphasis>
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2566.&#32;Requirements&#32;on&#32;the&#32;first&#32;template&#32;parameter&#32;of&#32;container</emphasis>
133 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;adaptors</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;_Tp,&#32;typename&#32;_Sequence::value_type&gt;::value,
135 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;value_type&#32;must&#32;be&#32;the&#32;same&#32;as&#32;the&#32;underlying&#32;container&quot;</emphasis>);
136 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++17</emphasis>
137 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
138 
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::reference&#32;&#32;&#32;&#32;&#32;reference;
142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::const_reference&#32;&#32;&#32;const_reference;
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sequence::size_type&#32;&#32;&#32;&#32;&#32;size_type;
144 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Sequence&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;container_type;
145 
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;See&#32;queue::c&#32;for&#32;notes&#32;on&#32;this&#32;name.</emphasis>
148 &#32;&#32;&#32;&#32;&#32;&#32;_Sequence&#32;c;
149 
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
151 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;removed&#32;old&#32;def&#32;ctor,&#32;added&#32;def&#32;arg&#32;to&#32;this&#32;one&#32;to&#32;match&#32;14882</emphasis>
155 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;stack(<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c&#32;=&#32;_Sequence())
158 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(__c)&#32;{&#32;}
159 <emphasis role="preprocessor">#else</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Seq&#32;=&#32;_Sequence,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;<emphasis role="keyword">typename</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enable_if&lt;is_default_constructible&lt;_Seq&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&gt;
162 &#32;&#32;&#32;&#32;stack()
163 &#32;&#32;&#32;&#32;:&#32;c()&#32;{&#32;}
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;stack(<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c)
167 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(__c)&#32;{&#32;}
168 
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
170 &#32;&#32;&#32;&#32;&#32;&#32;stack(_Sequence&amp;&amp;&#32;__c)
171 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__c))&#32;{&#32;}
172 
173 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;202002L</emphasis>
174 <emphasis role="preprocessor">#define&#32;__cpp_lib_adaptor_iterator_pair_constructor&#32;202106L</emphasis>
175 
176 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;&gt;
178 &#32;&#32;&#32;&#32;stack(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last)
179 &#32;&#32;&#32;&#32;:&#32;c(__first,&#32;__last)&#32;{&#32;}
180 <emphasis role="preprocessor">#endif</emphasis>
181 
182 
183 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
184 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
185 &#32;&#32;&#32;&#32;stack(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
186 &#32;&#32;&#32;&#32;:&#32;c(__a)&#32;{&#32;}
187 
188 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
189 &#32;&#32;&#32;&#32;stack(<emphasis role="keyword">const</emphasis>&#32;_Sequence&amp;&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
190 &#32;&#32;&#32;&#32;:&#32;c(__c,&#32;__a)&#32;{&#32;}
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
193 &#32;&#32;&#32;&#32;stack(_Sequence&amp;&amp;&#32;__c,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
194 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__c),&#32;__a)&#32;{&#32;}
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
197 &#32;&#32;&#32;&#32;stack(<emphasis role="keyword">const</emphasis>&#32;stack&amp;&#32;__q,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
198 &#32;&#32;&#32;&#32;:&#32;c(__q.c,&#32;__a)&#32;{&#32;}
199 
200 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Requires&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
201 &#32;&#32;&#32;&#32;stack(stack&amp;&amp;&#32;__q,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
202 &#32;&#32;&#32;&#32;:&#32;c(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__q.c),&#32;__a)&#32;{&#32;}
203 
204 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;202002L</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_Uses&lt;_Alloc&gt;&gt;
208 &#32;&#32;&#32;&#32;stack(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)
209 &#32;&#32;&#32;&#32;:&#32;c(__first,&#32;__last,&#32;__a)&#32;{&#32;}
210 <emphasis role="preprocessor">#endif</emphasis>
211 <emphasis role="preprocessor">#endif</emphasis>
212 
216 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;empty()<emphasis role="keyword">&#32;const</emphasis>
218 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.empty();&#32;}
219 
221 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
222 &#32;&#32;&#32;&#32;&#32;&#32;size_type
223 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()<emphasis role="keyword">&#32;const</emphasis>
224 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.size();&#32;}
225 
230 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
231 &#32;&#32;&#32;&#32;&#32;&#32;reference
232 &#32;&#32;&#32;&#32;&#32;&#32;top()
233 &#32;&#32;&#32;&#32;&#32;&#32;{
234 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
235 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.back();
236 &#32;&#32;&#32;&#32;&#32;&#32;}
237 
242 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
243 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
244 &#32;&#32;&#32;&#32;&#32;&#32;top()<emphasis role="keyword">&#32;const</emphasis>
245 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
246 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.back();
248 &#32;&#32;&#32;&#32;&#32;&#32;}
249 
259 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;push(<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;__x)
261 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;c.push_back(__x);&#32;}
262 
263 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
265 &#32;&#32;&#32;&#32;&#32;&#32;push(value_type&amp;&amp;&#32;__x)
266 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;c.push_back(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__x));&#32;}
267 
268 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L</emphasis>
269 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">decltype</emphasis>(<emphasis role="keyword">auto</emphasis>)
271 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
272 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;c.emplace_back(std::forward&lt;_Args&gt;(__args)...);&#32;}
273 <emphasis role="preprocessor">#else</emphasis>
274 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>...&#32;_Args&gt;
275 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
276 &#32;&#32;&#32;&#32;emplace(_Args&amp;&amp;...&#32;__args)
277 &#32;&#32;&#32;&#32;{&#32;c.emplace_back(std::forward&lt;_Args&gt;(__args)...);&#32;}
278 <emphasis role="preprocessor">#endif</emphasis>
279 <emphasis role="preprocessor">#endif</emphasis>
280 
292 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
293 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer__find__lsb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf">pop</link>()
294 &#32;&#32;&#32;&#32;&#32;&#32;{
295 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2assertions_8h_1a208d3b3e6bd58e9f7f62942c3261fc9b">__glibcxx_requires_nonempty</link>();
296 &#32;&#32;&#32;&#32;c.pop_back();
297 &#32;&#32;&#32;&#32;&#32;&#32;}
298 
299 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
300 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
301 &#32;&#32;&#32;&#32;&#32;&#32;swap(stack&amp;&#32;__s)
302 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__is_nothrow_swappable&lt;_Sequence&gt;::value)
304 #<emphasis role="keywordflow">else</emphasis>
305 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__is_nothrow_swappable&lt;_Tp&gt;::value)
306 <emphasis role="preprocessor">#endif</emphasis>
307 &#32;&#32;&#32;&#32;&#32;&#32;{
308 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
309 &#32;&#32;&#32;&#32;swap(c,&#32;__s.c);
310 &#32;&#32;&#32;&#32;&#32;&#32;}
311 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
312 &#32;&#32;&#32;&#32;};
313 
314 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
315 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container,
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Container&gt;&gt;
317 &#32;&#32;&#32;&#32;stack(_Container)&#32;-&gt;&#32;stack&lt;typename&#32;_Container::value_type,&#32;_Container&gt;;
318 
319 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Container,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireNotAllocator&lt;_Container&gt;&gt;
321 &#32;&#32;&#32;&#32;stack(_Container,&#32;_Allocator)
322 &#32;&#32;&#32;&#32;-&gt;&#32;stack&lt;typename&#32;_Container::value_type,&#32;_Container&gt;;
323 
324 <emphasis role="preprocessor">#ifdef&#32;__cpp_lib_adaptor_iterator_pair_constructor</emphasis>
325 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;&gt;
329 &#32;&#32;&#32;&#32;stack(_InputIterator,&#32;_InputIterator)&#32;-&gt;&#32;stack&lt;_ValT&gt;;
330 
331 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Allocator,
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_ValT
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type,
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireInputIter&lt;_InputIterator&gt;,
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;_RequireAllocator&lt;_Allocator&gt;&gt;
336 &#32;&#32;&#32;&#32;stack(_InputIterator,&#32;_InputIterator,&#32;_Allocator)
337 &#32;&#32;&#32;&#32;-&gt;&#32;stack&lt;_ValT,&#32;deque&lt;_ValT,&#32;_Allocator&gt;&gt;;
338 <emphasis role="preprocessor">#endif</emphasis>
339 <emphasis role="preprocessor">#endif</emphasis>
340 
353 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
354 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
356 &#32;&#32;&#32;&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
357 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.c&#32;==&#32;__y.c;&#32;}
358 
372 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
373 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
374 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
375 &#32;&#32;&#32;&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
376 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.c&#32;&lt;&#32;__y.c;&#32;}
377 
379 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
380 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
381 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
382 &#32;&#32;&#32;&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
383 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;==&#32;__y);&#32;}
384 
386 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
387 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
388 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
389 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
390 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__y&#32;&lt;&#32;__x;&#32;}
391 
393 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
394 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
395 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
396 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
397 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__y&#32;&lt;&#32;__x);&#32;}
398 
400 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
401 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>
402 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
403 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
404 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__x&#32;&lt;&#32;__y);&#32;}
405 
406 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
407 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;three_way_comparable&#32;_Seq&gt;
408 &#32;&#32;&#32;&#32;[[nodiscard]]
409 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;compare_three_way_result_t&lt;_Seq&gt;
410 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;<emphasis role="keyword">const</emphasis>&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
411 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__x.c&#32;&lt;=&gt;&#32;__y.c;&#32;}
412 <emphasis role="preprocessor">#endif</emphasis>
413 
414 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
415 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq&gt;
416 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
417 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201402L&#32;||&#32;!defined(__STRICT_ANSI__)&#32;</emphasis><emphasis role="comment">//&#32;c++1z&#32;or&#32;gnu++11</emphasis>
418 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constrained&#32;free&#32;swap&#32;overload,&#32;see&#32;p0185r1</emphasis>
419 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;enable_if&lt;__is_swappable&lt;_Seq&gt;::value&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>
420 <emphasis role="preprocessor">#else</emphasis>
421 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
422 <emphasis role="preprocessor">#endif</emphasis>
423 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__x,&#32;stack&lt;_Tp,&#32;_Seq&gt;&amp;&#32;__y)
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(<emphasis role="keyword">noexcept</emphasis>(__x.swap(__y)))
425 &#32;&#32;&#32;&#32;{&#32;__x.swap(__y);&#32;}
426 
427 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Seq,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>uses_allocator&lt;stack&lt;_Tp,&#32;_Seq&gt;,&#32;_Alloc&gt;
429 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;uses_allocator&lt;_Seq,&#32;_Alloc&gt;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">::type</link>&#32;{&#32;};
430 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
431 
432 _GLIBCXX_END_NAMESPACE_VERSION
433 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
434 
435 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_STL_STACK_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
