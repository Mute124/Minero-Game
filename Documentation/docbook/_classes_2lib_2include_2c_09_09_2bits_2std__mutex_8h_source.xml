<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2bits_2std__mutex_8h_source" xml:lang="en-US">
<title>std_mutex.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/bits/std_mutex.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;std::mutex&#32;implementation&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2003-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_MUTEX_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_GLIBCXX_MUTEX_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#pragma&#32;GCC&#32;system_header</emphasis>
34 
35 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
36 <emphasis role="preprocessor">#&#32;include&#32;&lt;bits/c++0x_warning.h&gt;</emphasis>
37 <emphasis role="preprocessor">#else</emphasis>
38 
39 <emphasis role="preprocessor">#include&#32;&lt;system_error&gt;</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;bits/functexcept.h&gt;</emphasis>
41 <emphasis role="preprocessor">#include&#32;&lt;bits/gthr.h&gt;</emphasis>
42 
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
44 {
45 _GLIBCXX_BEGIN_NAMESPACE_VERSION
46 
55 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
56 &#32;&#32;<emphasis role="comment">//&#32;Common&#32;base&#32;class&#32;for&#32;std::mutex&#32;and&#32;std::timed_mutex</emphasis>
57 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__mutex_base
58 &#32;&#32;{
59 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1a97856e6b17fbc2936d96d8ea2962eda3">__gthread_mutex_t</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__native_type;
61 
62 <emphasis role="preprocessor">#ifdef&#32;__GTHREAD_MUTEX_INIT</emphasis>
63 &#32;&#32;&#32;&#32;__native_type&#32;&#32;_M_mutex&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1abb270f4094b49eb30073f9b92a3bf8a2">__GTHREAD_MUTEX_INIT</link>;
64 
65 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;__mutex_base()&#32;noexcept&#32;=&#32;default;
66 <emphasis role="preprocessor">#else</emphasis>
67 &#32;&#32;&#32;&#32;__native_type&#32;&#32;_M_mutex;
68 
69 &#32;&#32;&#32;&#32;__mutex_base()&#32;noexcept
70 &#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;EAGAIN,&#32;ENOMEM,&#32;EPERM,&#32;EBUSY(may),&#32;EINVAL(may)</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ad44274417fe2cdb160bdb57fa9405e17">__GTHREAD_MUTEX_INIT_FUNCTION</link>(&amp;_M_mutex);
73 &#32;&#32;&#32;&#32;}
74 
75 &#32;&#32;&#32;&#32;~__mutex_base()&#32;noexcept&#32;{&#32;__gthread_mutex_destroy(&amp;_M_mutex);&#32;}
76 <emphasis role="preprocessor">#endif</emphasis>
77 
78 &#32;&#32;&#32;&#32;__mutex_base(<emphasis role="keyword">const</emphasis>&#32;__mutex_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
79 &#32;&#32;&#32;&#32;__mutex_base&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__mutex_base&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
80 &#32;&#32;};
81 
83 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>mutex&#32;:&#32;<emphasis role="keyword">private</emphasis>&#32;__mutex_base
84 &#32;&#32;{
85 &#32;&#32;<emphasis role="keyword">public</emphasis>:
86 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;__native_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;native_handle_type;
87 
88 <emphasis role="preprocessor">#ifdef&#32;__GTHREAD_MUTEX_INIT</emphasis>
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>
90 <emphasis role="preprocessor">#endif</emphasis>
91 &#32;&#32;&#32;&#32;mutex()&#32;noexcept&#32;=&#32;default;
92 &#32;&#32;&#32;&#32;~mutex()&#32;=&#32;default;
93 
94 &#32;&#32;&#32;&#32;mutex(const&#32;mutex&amp;)&#32;=&#32;delete;
95 &#32;&#32;&#32;&#32;mutex&amp;&#32;operator=(const&#32;mutex&amp;)&#32;=&#32;delete;
96 
97 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
98 &#32;&#32;&#32;&#32;lock()
99 &#32;&#32;&#32;&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__e&#32;=&#32;__gthread_mutex_lock(&amp;_M_mutex);
101 
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EINVAL,&#32;EAGAIN,&#32;EBUSY,&#32;EINVAL,&#32;EDEADLK(may)</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__e)
104 &#32;&#32;&#32;&#32;__throw_system_error(__e);
105 &#32;&#32;&#32;&#32;}
106 
107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
108 &#32;&#32;&#32;&#32;try_lock()&#32;noexcept
109 &#32;&#32;&#32;&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;EINVAL,&#32;EAGAIN,&#32;EBUSY</emphasis>
111 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!__gthread_mutex_trylock(&amp;_M_mutex);
112 &#32;&#32;&#32;&#32;}
113 
114 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
115 &#32;&#32;&#32;&#32;unlock()
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;XXX&#32;EINVAL,&#32;EAGAIN,&#32;EPERM</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;__gthread_mutex_unlock(&amp;_M_mutex);
119 &#32;&#32;&#32;&#32;}
120 
121 &#32;&#32;&#32;&#32;native_handle_type
122 &#32;&#32;&#32;&#32;native_handle()&#32;noexcept
123 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_M_mutex;&#32;}
124 &#32;&#32;};
125 
126 &#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;details&#32;for&#32;std::condition_variable</emphasis>
127 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__condvar
128 &#32;&#32;{
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>timespec&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1af7819bed58b3ca9c8a995141339d8a3c">__gthread_time_t</link>;
130 
131 &#32;&#32;<emphasis role="keyword">public</emphasis>:
132 &#32;&#32;&#32;&#32;__condvar()&#32;noexcept
133 &#32;&#32;&#32;&#32;{
134 <emphasis role="preprocessor">#ifndef&#32;__GTHREAD_COND_INIT</emphasis>
135 &#32;&#32;&#32;&#32;&#32;&#32;__GTHREAD_COND_INIT_FUNCTION(&amp;_M_cond);
136 <emphasis role="preprocessor">#endif</emphasis>
137 &#32;&#32;&#32;&#32;}
138 
139 &#32;&#32;&#32;&#32;~__condvar()
140 &#32;&#32;&#32;&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__e&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__))&#32;=&#32;__gthread_cond_destroy(&amp;_M_cond);
142 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__e&#32;!=&#32;EBUSY);&#32;<emphasis role="comment">//&#32;threads&#32;are&#32;still&#32;blocked</emphasis>
143 &#32;&#32;&#32;&#32;}
144 
145 &#32;&#32;&#32;&#32;__condvar(<emphasis role="keyword">const</emphasis>&#32;__condvar&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
146 &#32;&#32;&#32;&#32;__condvar&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;__condvar&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
147 
148 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>*&#32;native_handle()&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_M_cond;&#32;}
149 
150 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Expects:&#32;Calling&#32;thread&#32;has&#32;locked&#32;__m.</emphasis>
151 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
152 &#32;&#32;&#32;&#32;wait(mutex&amp;&#32;__m)
153 &#32;&#32;&#32;&#32;{
154 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__e&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__))
155 &#32;&#32;&#32;&#32;=&#32;__gthread_cond_wait(&amp;_M_cond,&#32;__m.native_handle());
156 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__e&#32;==&#32;0);
157 &#32;&#32;&#32;&#32;}
158 
159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
160 &#32;&#32;&#32;&#32;wait_until(mutex&amp;&#32;__m,&#32;timespec&amp;&#32;__abs_time)
161 &#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;__gthread_cond_timedwait(&amp;_M_cond,&#32;__m.native_handle(),&#32;&amp;__abs_time);
163 &#32;&#32;&#32;&#32;}
164 
165 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT</emphasis>
166 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
167 &#32;&#32;&#32;&#32;wait_until(mutex&amp;&#32;__m,&#32;<link linkend="__classes_2lib_2pthread_8h_1a6dcac6a5cea7d9c842145e1444d91e22">clockid_t</link>&#32;__clock,&#32;timespec&amp;&#32;__abs_time)
168 &#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;pthread_cond_clockwait(&amp;_M_cond,&#32;__m.native_handle(),&#32;__clock,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;__abs_time);
171 &#32;&#32;&#32;&#32;}
172 <emphasis role="preprocessor">#endif</emphasis>
173 
174 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
175 &#32;&#32;&#32;&#32;notify_one()&#32;noexcept
176 &#32;&#32;&#32;&#32;{
177 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__e&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__))&#32;=&#32;__gthread_cond_signal(&amp;_M_cond);
178 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__e&#32;==&#32;0);
179 &#32;&#32;&#32;&#32;}
180 
181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
182 &#32;&#32;&#32;&#32;notify_all()&#32;noexcept
183 &#32;&#32;&#32;&#32;{
184 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__e&#32;<link linkend="__classes_2lib_2include_2avx512bf16intrin_8h_1a016eb0ea28cf676c28ca5fdd1709f105">__attribute__</link>((__unused__))&#32;=&#32;__gthread_cond_broadcast(&amp;_M_cond);
185 &#32;&#32;&#32;&#32;&#32;&#32;__glibcxx_assert(__e&#32;==&#32;0);
186 &#32;&#32;&#32;&#32;}
187 
188 &#32;&#32;<emphasis role="keyword">protected</emphasis>:
189 <emphasis role="preprocessor">#ifdef&#32;__GTHREAD_COND_INIT</emphasis>
190 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;_M_cond&#32;=&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ac8442c6588cdf543eb13d58d151ad7c0">__GTHREAD_COND_INIT</link>;
191 <emphasis role="preprocessor">#else</emphasis>
192 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2gthr-default_8h_1ae8dd15b5bc8c82f0d61fa4063122fdc8">__gthread_cond_t</link>&#32;_M_cond;
193 <emphasis role="preprocessor">#endif</emphasis>
194 &#32;&#32;};
195 
196 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_HAS_GTHREADS</emphasis>
197 
199 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>defer_lock_t&#32;{&#32;<emphasis role="keyword">explicit</emphasis>&#32;defer_lock_t()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;};
200 
202 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>try_to_lock_t&#32;{&#32;<emphasis role="keyword">explicit</emphasis>&#32;try_to_lock_t()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;};
203 
206 &#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>adopt_lock_t&#32;{&#32;<emphasis role="keyword">explicit</emphasis>&#32;adopt_lock_t()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;&#32;};
207 
209 &#32;&#32;_GLIBCXX17_INLINE&#32;<emphasis role="keyword">constexpr</emphasis>&#32;defer_lock_t&#32;&#32;defer_lock&#32;{&#32;};
210 
212 &#32;&#32;_GLIBCXX17_INLINE&#32;<emphasis role="keyword">constexpr</emphasis>&#32;try_to_lock_t&#32;try_to_lock&#32;{&#32;};
213 
215 &#32;&#32;_GLIBCXX17_INLINE&#32;<emphasis role="keyword">constexpr</emphasis>&#32;adopt_lock_t&#32;&#32;adopt_lock&#32;{&#32;};
216 
222 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Mutex&gt;
223 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>lock_guard
224 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
226 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Mutex&#32;mutex_type;
227 
228 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;lock_guard(mutex_type&amp;&#32;__m)&#32;:&#32;_M_device(__m)
229 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_device.lock();&#32;}
230 
231 &#32;&#32;&#32;&#32;&#32;&#32;lock_guard(mutex_type&amp;&#32;__m,&#32;adopt_lock_t)&#32;noexcept&#32;:&#32;_M_device(__m)
232 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}&#32;<emphasis role="comment">//&#32;calling&#32;thread&#32;owns&#32;mutex</emphasis>
233 
234 &#32;&#32;&#32;&#32;&#32;&#32;~lock_guard()
235 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_device.unlock();&#32;}
236 
237 &#32;&#32;&#32;&#32;&#32;&#32;lock_guard(<emphasis role="keyword">const</emphasis>&#32;lock_guard&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
238 &#32;&#32;&#32;&#32;&#32;&#32;lock_guard&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;lock_guard&amp;)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
239 
240 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
241 &#32;&#32;&#32;&#32;&#32;&#32;mutex_type&amp;&#32;&#32;_M_device;
242 &#32;&#32;&#32;&#32;};
243 
245 _GLIBCXX_END_NAMESPACE_VERSION
246 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
247 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++11</emphasis>
248 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_GLIBCXX_MUTEX_H</emphasis>
</programlisting></section>
