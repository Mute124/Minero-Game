<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2rgestures_8h_source" xml:lang="en-US">
<title>rgestures.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/rgestures.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/**********************************************************************************************</emphasis>
2 <emphasis role="comment">*</emphasis>
3 <emphasis role="comment">*&#32;&#32;&#32;rgestures&#32;-&#32;Gestures&#32;system,&#32;gestures&#32;processing&#32;based&#32;on&#32;input&#32;events&#32;(touch/mouse)</emphasis>
4 <emphasis role="comment">*</emphasis>
5 <emphasis role="comment">*&#32;&#32;&#32;NOTE:&#32;Memory&#32;footprint&#32;of&#32;this&#32;library&#32;is&#32;aproximately&#32;128&#32;bytes&#32;(global&#32;variables)</emphasis>
6 <emphasis role="comment">*</emphasis>
7 <emphasis role="comment">*&#32;&#32;&#32;CONFIGURATION:</emphasis>
8 <emphasis role="comment">*</emphasis>
9 <emphasis role="comment">*&#32;&#32;&#32;#define&#32;GESTURES_IMPLEMENTATION</emphasis>
10 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Generates&#32;the&#32;implementation&#32;of&#32;the&#32;library&#32;into&#32;the&#32;included&#32;file.</emphasis>
11 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;not&#32;defined,&#32;the&#32;library&#32;is&#32;in&#32;header&#32;only&#32;mode&#32;and&#32;can&#32;be&#32;included&#32;in&#32;other&#32;headers</emphasis>
12 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;or&#32;source&#32;files&#32;without&#32;problems.&#32;But&#32;only&#32;ONE&#32;file&#32;should&#32;hold&#32;the&#32;implementation.</emphasis>
13 <emphasis role="comment">*</emphasis>
14 <emphasis role="comment">*&#32;&#32;&#32;#define&#32;GESTURES_STANDALONE</emphasis>
15 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;If&#32;defined,&#32;the&#32;library&#32;can&#32;be&#32;used&#32;as&#32;standalone&#32;to&#32;process&#32;gesture&#32;events&#32;with</emphasis>
16 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;no&#32;external&#32;dependencies.</emphasis>
17 <emphasis role="comment">*</emphasis>
18 <emphasis role="comment">*&#32;&#32;&#32;CONTRIBUTORS:</emphasis>
19 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Marc&#32;Palau:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Initial&#32;implementation&#32;(2014)</emphasis>
20 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Albert&#32;Martos:&#32;&#32;&#32;&#32;&#32;&#32;Complete&#32;redesign&#32;and&#32;testing&#32;(2015)</emphasis>
21 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ian&#32;Eito:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Complete&#32;redesign&#32;and&#32;testing&#32;(2015)</emphasis>
22 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;&#32;&#32;Ramon&#32;Santamaria:&#32;&#32;&#32;Supervision,&#32;review,&#32;update&#32;and&#32;maintenance</emphasis>
23 <emphasis role="comment">*</emphasis>
24 <emphasis role="comment">*</emphasis>
25 <emphasis role="comment">*&#32;&#32;&#32;LICENSE:&#32;zlib/libpng</emphasis>
26 <emphasis role="comment">*</emphasis>
27 <emphasis role="comment">*&#32;&#32;&#32;Copyright&#32;(c)&#32;2014-2023&#32;Ramon&#32;Santamaria&#32;(@raysan5)</emphasis>
28 <emphasis role="comment">*</emphasis>
29 <emphasis role="comment">*&#32;&#32;&#32;This&#32;software&#32;is&#32;provided&#32;&quot;as-is&quot;,&#32;without&#32;any&#32;express&#32;or&#32;implied&#32;warranty.&#32;In&#32;no&#32;event</emphasis>
30 <emphasis role="comment">*&#32;&#32;&#32;will&#32;the&#32;authors&#32;be&#32;held&#32;liable&#32;for&#32;any&#32;damages&#32;arising&#32;from&#32;the&#32;use&#32;of&#32;this&#32;software.</emphasis>
31 <emphasis role="comment">*</emphasis>
32 <emphasis role="comment">*&#32;&#32;&#32;Permission&#32;is&#32;granted&#32;to&#32;anyone&#32;to&#32;use&#32;this&#32;software&#32;for&#32;any&#32;purpose,&#32;including&#32;commercial</emphasis>
33 <emphasis role="comment">*&#32;&#32;&#32;applications,&#32;and&#32;to&#32;alter&#32;it&#32;and&#32;redistribute&#32;it&#32;freely,&#32;subject&#32;to&#32;the&#32;following&#32;restrictions:</emphasis>
34 <emphasis role="comment">*</emphasis>
35 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;1.&#32;The&#32;origin&#32;of&#32;this&#32;software&#32;must&#32;not&#32;be&#32;misrepresented;&#32;you&#32;must&#32;not&#32;claim&#32;that&#32;you</emphasis>
36 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;wrote&#32;the&#32;original&#32;software.&#32;If&#32;you&#32;use&#32;this&#32;software&#32;in&#32;a&#32;product,&#32;an&#32;acknowledgment</emphasis>
37 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;in&#32;the&#32;product&#32;documentation&#32;would&#32;be&#32;appreciated&#32;but&#32;is&#32;not&#32;required.</emphasis>
38 <emphasis role="comment">*</emphasis>
39 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;2.&#32;Altered&#32;source&#32;versions&#32;must&#32;be&#32;plainly&#32;marked&#32;as&#32;such,&#32;and&#32;must&#32;not&#32;be&#32;misrepresented</emphasis>
40 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;as&#32;being&#32;the&#32;original&#32;software.</emphasis>
41 <emphasis role="comment">*</emphasis>
42 <emphasis role="comment">*&#32;&#32;&#32;&#32;&#32;3.&#32;This&#32;notice&#32;may&#32;not&#32;be&#32;removed&#32;or&#32;altered&#32;from&#32;any&#32;source&#32;distribution.</emphasis>
43 <emphasis role="comment">*</emphasis>
44 <emphasis role="comment">**********************************************************************************************/</emphasis>
45 
46 <emphasis role="preprocessor">#ifndef&#32;RGESTURES_H</emphasis>
47 <emphasis role="preprocessor">#define&#32;RGESTURES_H</emphasis>
48 
49 <emphasis role="preprocessor">#ifndef&#32;PI</emphasis>
50 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;PI&#32;3.14159265358979323846</emphasis>
51 <emphasis role="preprocessor">#endif</emphasis>
52 
53 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
54 <emphasis role="comment">//&#32;Defines&#32;and&#32;Macros</emphasis>
55 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
56 <emphasis role="preprocessor">#ifndef&#32;MAX_TOUCH_POINTS</emphasis>
57 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;MAX_TOUCH_POINTS&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Maximum&#32;number&#32;of&#32;touch&#32;points&#32;supported</emphasis>
58 <emphasis role="preprocessor">#endif</emphasis>
59 
60 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
61 <emphasis role="comment">//&#32;Types&#32;and&#32;Structures&#32;Definition</emphasis>
62 <emphasis role="comment">//&#32;NOTE:&#32;Below&#32;types&#32;are&#32;required&#32;for&#32;GESTURES_STANDALONE&#32;usage</emphasis>
63 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
64 <emphasis role="comment">//&#32;Boolean&#32;type</emphasis>
65 <emphasis role="preprocessor">#if&#32;(defined(__STDC__)&#32;&amp;&amp;&#32;__STDC_VERSION__&#32;&gt;=&#32;199901L)&#32;||&#32;(defined(_MSC_VER)&#32;&amp;&amp;&#32;_MSC_VER&#32;&gt;=&#32;1800)</emphasis>
66 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;stdbool.h&gt;</emphasis>
67 <emphasis role="preprocessor">#elif&#32;!defined(__cplusplus)&#32;&amp;&amp;&#32;!defined(bool)&#32;&amp;&amp;&#32;!defined(RL_BOOL_TYPE)</emphasis>
68 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;{&#32;<emphasis role="keyword">false</emphasis>&#32;=&#32;0,&#32;<emphasis role="keyword">true</emphasis>&#32;=&#32;!<emphasis role="keyword">false</emphasis>&#32;}&#32;<link linkend="__classes_2lib_2rgestures_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>;
69 <emphasis role="preprocessor">#endif</emphasis>
70 
71 <emphasis role="preprocessor">#if&#32;!defined(RL_VECTOR2_TYPE)</emphasis>
72 <emphasis role="comment">//&#32;Vector2&#32;type</emphasis>
73 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_vector2">Vector2</link>&#32;{
74 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_vector2_1a046bb8d17a876acc49415128dc0502f2">x</link>;
75 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_struct_vector2_1a0e07bad05f01ed811b909a2eef97f9e2">y</link>;
76 }&#32;<link linkend="__classes_2lib_2rgestures_8h_1a682e0907769244e5f75f92e91460878f">Vector2</link>;
77 <emphasis role="preprocessor">#endif</emphasis>
78 
79 <emphasis role="preprocessor">#if&#32;defined(GESTURES_STANDALONE)</emphasis>
80 <emphasis role="comment">//&#32;Gestures&#32;type</emphasis>
81 <emphasis role="comment">//&#32;NOTE:&#32;It&#32;could&#32;be&#32;used&#32;as&#32;flags&#32;to&#32;enable&#32;only&#32;some&#32;gestures</emphasis>
82 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{
83 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;0,
84 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12aa6ea36cd5cdb1a323cc2428937fb1692">GESTURE_TAP</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1,
85 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a8b5d655a878adcc18c6ef37367c75943">GESTURE_DOUBLETAP</link>&#32;&#32;&#32;=&#32;2,
86 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;4,
87 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;8,
88 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a337cfdf346943f1ba19c3b668234860e">GESTURE_SWIPE_RIGHT</link>&#32;=&#32;16,
89 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a6ce54903fd831fdc6364471eadaacb9c">GESTURE_SWIPE_LEFT</link>&#32;&#32;=&#32;32,
90 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a64bda7d6d0dc201f3f195297c0c45d70">GESTURE_SWIPE_UP</link>&#32;&#32;&#32;&#32;=&#32;64,
91 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12accf621e170b4d2e51966bd72ec053fc2">GESTURE_SWIPE_DOWN</link>&#32;&#32;=&#32;128,
92 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a4c029381b3757f0143cbcc687449bad6">GESTURE_PINCH_IN</link>&#32;&#32;&#32;&#32;=&#32;256,
93 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12adb71607a217fbb056bf654af46bc9384">GESTURE_PINCH_OUT</link>&#32;&#32;&#32;=&#32;512
94 }&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12">Gesture</link>;
95 <emphasis role="preprocessor">#endif</emphasis>
96 
97 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">enum</emphasis>&#32;{
98 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9afcf4d1ea3249738fb1137a3a8f264ac4">TOUCH_ACTION_UP</link>&#32;=&#32;0,
99 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9aba929f2c70a6b8a0a5531e88150ad3f9">TOUCH_ACTION_DOWN</link>,
100 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9ace571ba28cfd2afe8ec3ccb962a046bf">TOUCH_ACTION_MOVE</link>,
101 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9a418bc4c44ab448a7032c19dae422711d">TOUCH_ACTION_CANCEL</link>
102 }&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9">TouchAction</link>;
103 
104 <emphasis role="comment">//&#32;Gesture&#32;event</emphasis>
105 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;touchAction;
107 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pointCount;
108 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pointId[<link linkend="__classes_2lib_2rgestures_8h_1adcdfcc3bb82f37ddb60aa98b39464462">MAX_TOUCH_POINTS</link>];
109 &#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>[<link linkend="__classes_2lib_2rgestures_8h_1adcdfcc3bb82f37ddb60aa98b39464462">MAX_TOUCH_POINTS</link>];
110 }&#32;<link linkend="_struct_gesture_event">GestureEvent</link>;
111 
112 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
113 <emphasis role="comment">//&#32;Global&#32;Variables&#32;Definition</emphasis>
114 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
115 <emphasis role="comment">//...</emphasis>
116 
117 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
118 <emphasis role="comment">//&#32;Module&#32;Functions&#32;Declaration</emphasis>
119 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
120 
121 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
122 <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prevents&#32;name&#32;mangling&#32;of&#32;functions</emphasis>
123 <emphasis role="preprocessor">#endif</emphasis>
124 
125 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2rgestures_8h_1a5deba7e45ec5eb1bdb6da834d3a3ee09">ProcessGestureEvent</link>(<link linkend="_struct_gesture_event">GestureEvent</link>&#32;event);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Process&#32;gesture&#32;event&#32;and&#32;translate&#32;it&#32;into&#32;gestures</emphasis>
126 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2rgestures_8h_1a628850a03d5f85e55c0f067788badc24">UpdateGestures</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;gestures&#32;detected&#32;(must&#32;be&#32;called&#32;every&#32;frame)</emphasis>
127 
128 <emphasis role="preprocessor">#if&#32;defined(GESTURES_STANDALONE)</emphasis>
129 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa898903158e991388598c5579afbf8b4">SetGesturesEnabled</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enable&#32;a&#32;set&#32;of&#32;gestures&#32;using&#32;flags</emphasis>
130 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1ac651be90036f1680d9e5c9ef718dfe1d">IsGestureDetected</link>(<emphasis role="keywordtype">int</emphasis>&#32;gesture);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;if&#32;a&#32;gesture&#32;have&#32;been&#32;detected</emphasis>
131 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a0f070ca4a33f9e8bcadbe9ea8f1f09d7">GetGestureDetected</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;latest&#32;detected&#32;gesture</emphasis>
132 
133 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a6d1b4db504365dfb4b1e1f345075e7de">GetGestureHoldDuration</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;hold&#32;time&#32;in&#32;milliseconds</emphasis>
134 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8b647fad066d251cbe72cddc612f4ecd">GetGestureDragVector</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;drag&#32;vector</emphasis>
135 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa6d8169205c4f6e8cfbd6f39f98943d2">GetGestureDragAngle</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;drag&#32;angle</emphasis>
136 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a85b0053a8ccc10862b000aa2bc5404c9">GetGesturePinchVector</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;pinch&#32;delta</emphasis>
137 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8215af8efd6dc55081f44d13b99161bf">GetGesturePinchAngle</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;gesture&#32;pinch&#32;angle</emphasis>
138 <emphasis role="preprocessor">#endif</emphasis>
139 
140 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)</emphasis>
141 }
142 <emphasis role="preprocessor">#endif</emphasis>
143 
144 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;GESTURES_H</emphasis>
145 
146 <emphasis role="comment">/***********************************************************************************</emphasis>
147 <emphasis role="comment">*</emphasis>
148 <emphasis role="comment">*&#32;&#32;&#32;GESTURES&#32;IMPLEMENTATION</emphasis>
149 <emphasis role="comment">*</emphasis>
150 <emphasis role="comment">************************************************************************************/</emphasis>
151 
152 <emphasis role="preprocessor">#if&#32;defined(GESTURES_IMPLEMENTATION)</emphasis>
153 
154 <emphasis role="preprocessor">#if&#32;defined(GESTURES_STANDALONE)</emphasis>
155 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
156 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__cplusplus)</emphasis>
157 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="stringliteral">&quot;C&quot;</emphasis>&#32;{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prevents&#32;name&#32;mangling&#32;of&#32;functions</emphasis>
158 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
159 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Functions&#32;required&#32;to&#32;query&#32;time&#32;on&#32;Windows</emphasis>
160 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;QueryPerformanceCounter(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*lpPerformanceCount);
161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__stdcall&#32;QueryPerformanceFrequency(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;*lpFrequency);
162 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;defined(__cplusplus)</emphasis>
163 &#32;&#32;&#32;&#32;}
164 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
165 <emphasis role="preprocessor">#elif&#32;defined(__linux__)</emphasis>
166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#if&#32;_POSIX_C_SOURCE&#32;&lt;&#32;199309L</emphasis>
167 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#undef&#32;_POSIX_C_SOURCE</emphasis>
168 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#define&#32;_POSIX_C_SOURCE&#32;199309L&#32;</emphasis><emphasis role="comment">//&#32;Required&#32;for&#32;CLOCK_MONOTONIC&#32;if&#32;compiled&#32;with&#32;c99&#32;without&#32;gnu&#32;ext.</emphasis>
169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
170 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;sys/time.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;timespec</emphasis>
171 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;time.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;clock_gettime()</emphasis>
172 
173 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;math.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;sqrtf(),&#32;atan2f()</emphasis>
174 <emphasis role="preprocessor">#endif</emphasis>
175 <emphasis role="preprocessor">#if&#32;defined(__APPLE__)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;macOS&#32;also&#32;defines&#32;__MACH__</emphasis>
176 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;mach/clock.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;clock_get_time()</emphasis>
177 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;mach/mach.h&gt;</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;for:&#32;mach_timespec_t</emphasis>
178 <emphasis role="preprocessor">#endif</emphasis>
179 <emphasis role="preprocessor">#endif</emphasis>
180 
181 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
182 <emphasis role="comment">//&#32;Defines&#32;and&#32;Macros</emphasis>
183 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
184 <emphasis role="preprocessor">#define&#32;FORCE_TO_SWIPE&#32;&#32;&#32;&#32;&#32;&#32;0.0005f&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Swipe&#32;force,&#32;measured&#32;in&#32;normalized&#32;screen&#32;units/time</emphasis>
185 <emphasis role="preprocessor">#define&#32;MINIMUM_DRAG&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.015f&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Drag&#32;minimum&#32;force,&#32;measured&#32;in&#32;normalized&#32;screen&#32;units&#32;(0.0f&#32;to&#32;1.0f)</emphasis>
186 <emphasis role="preprocessor">#define&#32;MINIMUM_PINCH&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.005f&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Pinch&#32;minimum&#32;force,&#32;measured&#32;in&#32;normalized&#32;screen&#32;units&#32;(0.0f&#32;to&#32;1.0f)</emphasis>
187 <emphasis role="preprocessor">#define&#32;TAP_TIMEOUT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;300&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Tap&#32;minimum&#32;time,&#32;measured&#32;in&#32;milliseconds</emphasis>
188 <emphasis role="preprocessor">#define&#32;PINCH_TIMEOUT&#32;&#32;&#32;&#32;&#32;&#32;&#32;300&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Pinch&#32;minimum&#32;time,&#32;measured&#32;in&#32;milliseconds</emphasis>
189 <emphasis role="preprocessor">#define&#32;DOUBLETAP_RANGE&#32;&#32;&#32;&#32;&#32;0.03f&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;DoubleTap&#32;range,&#32;measured&#32;in&#32;normalized&#32;screen&#32;units&#32;(0.0f&#32;to&#32;1.0f)</emphasis>
190 
191 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
192 <emphasis role="comment">//&#32;Types&#32;and&#32;Structures&#32;Definition</emphasis>
193 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
194 
195 <emphasis role="comment">//&#32;Gestures&#32;module&#32;state&#32;context&#32;[136&#32;bytes]</emphasis>
196 <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
197 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;current;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Current&#32;detected&#32;gesture</emphasis>
198 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;enabledFlags;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enabled&#32;gestures&#32;flags</emphasis>
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;firstId;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;id&#32;for&#32;first&#32;touch&#32;point</emphasis>
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pointCount;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;points&#32;counter</emphasis>
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;eventTime;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;stamp&#32;when&#32;an&#32;event&#32;happened</emphasis>
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;upPosition;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;up&#32;position</emphasis>
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;downPositionA;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;touch&#32;down&#32;position</emphasis>
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;downPositionB;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second&#32;touch&#32;down&#32;position</emphasis>
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;downDragPosition;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Touch&#32;drag&#32;position</emphasis>
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;moveDownPositionA;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;touch&#32;down&#32;position&#32;on&#32;move</emphasis>
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;moveDownPositionB;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second&#32;touch&#32;down&#32;position&#32;on&#32;move</emphasis>
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;tapCounter;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TAP&#32;counter&#32;(one&#32;tap&#32;implies&#32;TOUCH_ACTION_DOWN&#32;and&#32;TOUCH_ACTION_UP&#32;actions)</emphasis>
210 &#32;&#32;&#32;&#32;}&#32;Touch;
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;resetRequired;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HOLD&#32;reset&#32;to&#32;get&#32;first&#32;touch&#32;point&#32;again</emphasis>
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeDuration;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;HOLD&#32;duration&#32;in&#32;milliseconds</emphasis>
214 &#32;&#32;&#32;&#32;}&#32;Hold;
215 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;vector;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;vector&#32;(between&#32;initial&#32;and&#32;current&#32;position)</emphasis>
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;angle&#32;(relative&#32;to&#32;x-axis)</emphasis>
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_namespacedistance">distance</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;distance&#32;(from&#32;initial&#32;touch&#32;point&#32;to&#32;final)&#32;(normalized&#32;[0..1])</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;intensity;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;DRAG&#32;intensity,&#32;how&#32;far&#32;why&#32;did&#32;the&#32;DRAG&#32;(pixels&#32;per&#32;frame)</emphasis>
220 &#32;&#32;&#32;&#32;}&#32;Drag;
221 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1ac55adc720a3098c1b454d2a4647f4361">start</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SWIPE&#32;used&#32;to&#32;define&#32;when&#32;start&#32;measuring&#32;GESTURES.Swipe.timeDuration</emphasis>
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;timeDuration;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SWIPE&#32;time&#32;to&#32;calculate&#32;drag&#32;intensity</emphasis>
224 &#32;&#32;&#32;&#32;}&#32;Swipe;
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>{
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_vector2">Vector2</link>&#32;vector;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PINCH&#32;vector&#32;(between&#32;first&#32;and&#32;second&#32;touch&#32;points)</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PINCH&#32;angle&#32;(relative&#32;to&#32;x-axis)</emphasis>
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_namespacedistance">distance</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PINCH&#32;displacement&#32;distance&#32;(normalized&#32;[0..1])</emphasis>
229 &#32;&#32;&#32;&#32;}&#32;Pinch;
230 }&#32;GesturesData;
231 
232 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
233 <emphasis role="comment">//&#32;Global&#32;Variables&#32;Definition</emphasis>
234 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
235 <emphasis role="keyword">static</emphasis>&#32;GesturesData&#32;GESTURES&#32;=&#32;{
236 &#32;&#32;&#32;&#32;.Touch.firstId&#32;=&#32;-1,
237 &#32;&#32;&#32;&#32;.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;current&#32;gesture&#32;detected</emphasis>
238 &#32;&#32;&#32;&#32;.enabledFlags&#32;=&#32;0b0000001111111111&#32;&#32;<emphasis role="comment">//&#32;All&#32;gestures&#32;supported&#32;by&#32;default</emphasis>
239 };
240 
241 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
242 <emphasis role="comment">//&#32;Module&#32;specific&#32;Functions&#32;Declaration</emphasis>
243 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
244 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;rgVector2Angle(<link linkend="_struct_vector2">Vector2</link>&#32;initialPosition,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;finalPosition);
245 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;rgVector2Distance(<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>);
246 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;rgGetCurrentTime(<emphasis role="keywordtype">void</emphasis>);
247 
248 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
249 <emphasis role="comment">//&#32;Module&#32;Functions&#32;Definition</emphasis>
250 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
251 
252 <emphasis role="comment">//&#32;Enable&#32;only&#32;desired&#32;gestures&#32;to&#32;be&#32;detected</emphasis>
253 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa898903158e991388598c5579afbf8b4">SetGesturesEnabled</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>)
254 {
255 &#32;&#32;&#32;&#32;GESTURES.enabledFlags&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>;
256 }
257 
258 <emphasis role="comment">//&#32;Check&#32;if&#32;a&#32;gesture&#32;have&#32;been&#32;detected</emphasis>
259 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1ac651be90036f1680d9e5c9ef718dfe1d">IsGestureDetected</link>(<emphasis role="keywordtype">int</emphasis>&#32;gesture)
260 {
261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.enabledFlags&#32;&amp;&#32;GESTURES.current)&#32;==&#32;gesture)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
262 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
263 }
264 
265 <emphasis role="comment">//&#32;Process&#32;gesture&#32;event&#32;and&#32;translate&#32;it&#32;into&#32;gestures</emphasis>
266 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2rgestures_8h_1a5deba7e45ec5eb1bdb6da834d3a3ee09">ProcessGestureEvent</link>(<link linkend="_struct_gesture_event">GestureEvent</link>&#32;event)
267 {
268 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;required&#32;variables</emphasis>
269 &#32;&#32;&#32;&#32;GESTURES.Touch.pointCount&#32;=&#32;<emphasis role="keyword">event</emphasis>.pointCount;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Required&#32;on&#32;UpdateGestures()</emphasis>
270 
271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.Touch.pointCount&#32;==&#32;1)&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;One&#32;touch&#32;point</emphasis>
272 &#32;&#32;&#32;&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9aba929f2c70a6b8a0a5531e88150ad3f9">TOUCH_ACTION_DOWN</link>)
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.tapCounter++;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tap&#32;counter</emphasis>
276 
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_DOUBLE_TAP</emphasis>
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>)&#32;&amp;&amp;&#32;(GESTURES.Touch.tapCounter&#32;&gt;=&#32;2)&#32;&amp;&amp;&#32;((rgGetCurrentTime()&#32;-&#32;GESTURES.Touch.eventTime)&#32;&lt;&#32;TAP_TIMEOUT)&#32;&amp;&amp;&#32;(rgVector2Distance(GESTURES.Touch.downPositionA,&#32;event.<link linkend="_struct_gesture_event_1a0671722c15eccf2fe2add25aab71b83c">position</link>[0])&#32;&lt;&#32;DOUBLETAP_RANGE))
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a8b5d655a878adcc18c6ef37367c75943">GESTURE_DOUBLETAP</link>;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.tapCounter&#32;=&#32;0;
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_TAP</emphasis>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.tapCounter&#32;=&#32;1;
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12aa6ea36cd5cdb1a323cc2428937fb1692">GESTURE_TAP</link>;
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
288 
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downDragPosition&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
291 
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.upPosition&#32;=&#32;GESTURES.Touch.downPositionA;
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.eventTime&#32;=&#32;rgGetCurrentTime();
294 
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.firstId&#32;=&#32;<emphasis role="keyword">event</emphasis>.pointId[0];
296 
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.vector&#32;=&#32;(<link linkend="__classes_2lib_2rgestures_8h_1a682e0907769244e5f75f92e91460878f">Vector2</link>){&#32;0.0f,&#32;0.0f&#32;};
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9afcf4d1ea3249738fb1137a3a8f264ac4">TOUCH_ACTION_UP</link>)
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>)&#32;GESTURES.Touch.upPosition&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
302 
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;GESTURES.Drag.intensity&#32;dependent&#32;on&#32;the&#32;resolution&#32;of&#32;the&#32;screen</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.distance&#32;=&#32;rgVector2Distance(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.upPosition);
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.intensity&#32;=&#32;GESTURES.Drag.distance/(float)((rgGetCurrentTime()&#32;-&#32;GESTURES.Swipe.timeDuration));
306 
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Swipe.start&#32;=&#32;<emphasis role="keyword">false</emphasis>;
308 
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_SWIPE</emphasis>
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.intensity&#32;&gt;&#32;FORCE_TO_SWIPE)&#32;&amp;&amp;&#32;(GESTURES.Touch.firstId&#32;==&#32;<emphasis role="keyword">event</emphasis>.pointId[0]))
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;should&#32;be&#32;inverted&#32;in&#32;Y</emphasis>
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.angle&#32;=&#32;360.0f&#32;-&#32;rgVector2Angle(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.upPosition);
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&lt;&#32;30)&#32;||&#32;(GESTURES.Drag.angle&#32;&gt;&#32;330))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a337cfdf346943f1ba19c3b668234860e">GESTURE_SWIPE_RIGHT</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&gt;&#32;30)&#32;&amp;&amp;&#32;(GESTURES.Drag.angle&#32;&lt;&#32;120))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a64bda7d6d0dc201f3f195297c0c45d70">GESTURE_SWIPE_UP</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Up</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&gt;&#32;120)&#32;&amp;&amp;&#32;(GESTURES.Drag.angle&#32;&lt;&#32;210))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a6ce54903fd831fdc6364471eadaacb9c">GESTURE_SWIPE_LEFT</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left</emphasis>
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.Drag.angle&#32;&gt;&#32;210)&#32;&amp;&amp;&#32;(GESTURES.Drag.angle&#32;&lt;&#32;300))&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12accf621e170b4d2e51966bd72ec053fc2">GESTURE_SWIPE_DOWN</link>;&#32;&#32;&#32;<emphasis role="comment">//&#32;Down</emphasis>
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.distance&#32;=&#32;0.0f;
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.intensity&#32;=&#32;0.0f;
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.angle&#32;=&#32;0.0f;
326 
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
329 
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downDragPosition&#32;=&#32;(<link linkend="__classes_2lib_2rgestures_8h_1a682e0907769244e5f75f92e91460878f">Vector2</link>){&#32;0.0f,&#32;0.0f&#32;};
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.pointCount&#32;=&#32;0;
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9ace571ba28cfd2afe8ec3ccb962a046bf">TOUCH_ACTION_MOVE</link>)
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>)&#32;GESTURES.Touch.eventTime&#32;=&#32;rgGetCurrentTime();
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!GESTURES.Swipe.start)
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Swipe.timeDuration&#32;=&#32;rgGetCurrentTime();
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Swipe.start&#32;=&#32;<emphasis role="keyword">true</emphasis>;
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.moveDownPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
344 
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>)
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.Hold.resetRequired)&#32;GESTURES.Touch.downPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
348 
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.resetRequired&#32;=&#32;<emphasis role="keyword">false</emphasis>;
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_DRAG</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rgVector2Distance(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.moveDownPositionA)&#32;&gt;=&#32;MINIMUM_DRAG)
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.eventTime&#32;=&#32;rgGetCurrentTime();
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>;
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
358 
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.vector.x&#32;=&#32;GESTURES.Touch.moveDownPositionA.x&#32;-&#32;GESTURES.Touch.downDragPosition.x;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Drag.vector.y&#32;=&#32;GESTURES.Touch.moveDownPositionA.y&#32;-&#32;GESTURES.Touch.downDragPosition.y;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
362 &#32;&#32;&#32;&#32;}
363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.Touch.pointCount&#32;==&#32;2)&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Two&#32;touch&#32;points</emphasis>
364 &#32;&#32;&#32;&#32;{
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9aba929f2c70a6b8a0a5531e88150ad3f9">TOUCH_ACTION_DOWN</link>)
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionB&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[1];
369 
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//GESTURES.Pinch.distance&#32;=&#32;rgVector2Distance(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.downPositionB);</emphasis>
371 
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.x&#32;=&#32;GESTURES.Touch.downPositionB.x&#32;-&#32;GESTURES.Touch.downPositionA.x;
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.y&#32;=&#32;GESTURES.Touch.downPositionB.y&#32;-&#32;GESTURES.Touch.downPositionA.y;
374 
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;rgGetCurrentTime();
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9ace571ba28cfd2afe8ec3ccb962a046bf">TOUCH_ACTION_MOVE</link>)
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.distance&#32;=&#32;rgVector2Distance(GESTURES.Touch.moveDownPositionA,&#32;GESTURES.Touch.moveDownPositionB);
381 
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionA&#32;=&#32;GESTURES.Touch.moveDownPositionA;
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.downPositionB&#32;=&#32;GESTURES.Touch.moveDownPositionB;
384 
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.moveDownPositionA&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[0];
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.moveDownPositionB&#32;=&#32;<emphasis role="keyword">event</emphasis>.position[1];
387 
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.x&#32;=&#32;GESTURES.Touch.moveDownPositionB.x&#32;-&#32;GESTURES.Touch.moveDownPositionA.x;
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector.y&#32;=&#32;GESTURES.Touch.moveDownPositionB.y&#32;-&#32;GESTURES.Touch.moveDownPositionA.y;
390 
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((rgVector2Distance(GESTURES.Touch.downPositionA,&#32;GESTURES.Touch.moveDownPositionA)&#32;&gt;=&#32;MINIMUM_PINCH)&#32;||&#32;(rgVector2Distance(GESTURES.Touch.downPositionB,&#32;GESTURES.Touch.moveDownPositionB)&#32;&gt;=&#32;MINIMUM_PINCH))
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((rgVector2Distance(GESTURES.Touch.moveDownPositionA,&#32;GESTURES.Touch.moveDownPositionB)&#32;-&#32;GESTURES.Pinch.distance)&#32;&lt;&#32;0)&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a4c029381b3757f0143cbcc687449bad6">GESTURE_PINCH_IN</link>;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12adb71607a217fbb056bf654af46bc9384">GESTURE_PINCH_OUT</link>;
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;rgGetCurrentTime();
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
401 
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;should&#32;be&#32;inverted&#32;in&#32;Y</emphasis>
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.angle&#32;=&#32;360.0f&#32;-&#32;rgVector2Angle(GESTURES.Touch.moveDownPositionA,&#32;GESTURES.Touch.moveDownPositionB);
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(event.<link linkend="_struct_gesture_event_1a2b74620f0afd9398d93b330e3ca958d9">touchAction</link>&#32;==&#32;<link linkend="__classes_2lib_2rgestures_8h_1aea0a0ccf904a1074665eaa7a71eee6e9afcf4d1ea3249738fb1137a3a8f264ac4">TOUCH_ACTION_UP</link>)
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.distance&#32;=&#32;0.0f;
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.angle&#32;=&#32;0.0f;
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Pinch.vector&#32;=&#32;(<link linkend="__classes_2lib_2rgestures_8h_1a682e0907769244e5f75f92e91460878f">Vector2</link>){&#32;0.0f,&#32;0.0f&#32;};
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Touch.pointCount&#32;=&#32;0;
411 
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
414 &#32;&#32;&#32;&#32;}
415 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.Touch.pointCount&#32;&gt;&#32;2)&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;More&#32;than&#32;two&#32;touch&#32;points</emphasis>
416 &#32;&#32;&#32;&#32;{
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Process&#32;gesture&#32;events&#32;for&#32;more&#32;than&#32;two&#32;points</emphasis>
418 &#32;&#32;&#32;&#32;}
419 }
420 
421 <emphasis role="comment">//&#32;Update&#32;gestures&#32;detected&#32;(must&#32;be&#32;called&#32;every&#32;frame)</emphasis>
422 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="__classes_2lib_2rgestures_8h_1a628850a03d5f85e55c0f067788badc24">UpdateGestures</link>(<emphasis role="keywordtype">void</emphasis>)
423 {
424 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Gestures&#32;are&#32;processed&#32;through&#32;system&#32;callbacks&#32;on&#32;touch&#32;events</emphasis>
425 
426 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_HOLD</emphasis>
427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12aa6ea36cd5cdb1a323cc2428937fb1692">GESTURE_TAP</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a8b5d655a878adcc18c6ef37367c75943">GESTURE_DOUBLETAP</link>))&#32;&amp;&amp;&#32;(GESTURES.Touch.pointCount&#32;&lt;&#32;2))
428 &#32;&#32;&#32;&#32;{
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;rgGetCurrentTime();
431 &#32;&#32;&#32;&#32;}
432 
433 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(((rgGetCurrentTime()&#32;-&#32;GESTURES.Touch.eventTime)&#32;&gt;&#32;TAP_TIMEOUT)&#32;&amp;&amp;&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a0870d36d1d24c36809fbe1320fd5ee5e">GESTURE_DRAG</link>)&#32;&amp;&amp;&#32;(GESTURES.Touch.pointCount&#32;&lt;&#32;2))
434 &#32;&#32;&#32;&#32;{
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>;
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.timeDuration&#32;=&#32;rgGetCurrentTime();
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.Hold.resetRequired&#32;=&#32;<emphasis role="keyword">true</emphasis>;
438 &#32;&#32;&#32;&#32;}
439 
440 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;GESTURE_NONE</emphasis>
441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a337cfdf346943f1ba19c3b668234860e">GESTURE_SWIPE_RIGHT</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a64bda7d6d0dc201f3f195297c0c45d70">GESTURE_SWIPE_UP</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a6ce54903fd831fdc6364471eadaacb9c">GESTURE_SWIPE_LEFT</link>)&#32;||&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12accf621e170b4d2e51966bd72ec053fc2">GESTURE_SWIPE_DOWN</link>))
442 &#32;&#32;&#32;&#32;{
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GESTURES.current&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12abc76c50ba9bf454600d15eb73e991b6b">GESTURE_NONE</link>;
444 &#32;&#32;&#32;&#32;}
445 }
446 
447 <emphasis role="comment">//&#32;Get&#32;latest&#32;detected&#32;gesture</emphasis>
448 <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a0f070ca4a33f9e8bcadbe9ea8f1f09d7">GetGestureDetected</link>(<emphasis role="keywordtype">void</emphasis>)
449 {
450 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;current&#32;gesture&#32;only&#32;if&#32;enabled</emphasis>
451 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(GESTURES.enabledFlags&#32;&amp;&#32;GESTURES.current);
452 }
453 
454 <emphasis role="comment">//&#32;Hold&#32;time&#32;measured&#32;in&#32;ms</emphasis>
455 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a6d1b4db504365dfb4b1e1f345075e7de">GetGestureHoldDuration</link>(<emphasis role="keywordtype">void</emphasis>)
456 {
457 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;time&#32;is&#32;calculated&#32;on&#32;current&#32;gesture&#32;HOLD</emphasis>
458 
459 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structtime">time</link>&#32;=&#32;0.0;
460 
461 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GESTURES.current&#32;==&#32;<link linkend="__classes_2lib_2raylib_8h_1a4c115a495b9dd6dfa20244e79f4fdc12a3cf4fecd9e89c7a8d5ff7e67c3a41898">GESTURE_HOLD</link>)&#32;<link linkend="_structtime">time</link>&#32;=&#32;rgGetCurrentTime()&#32;-&#32;GESTURES.Hold.timeDuration;
462 
463 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>)<link linkend="_structtime">time</link>;
464 }
465 
466 <emphasis role="comment">//&#32;Get&#32;drag&#32;vector&#32;(between&#32;initial&#32;touch&#32;point&#32;to&#32;current)</emphasis>
467 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8b647fad066d251cbe72cddc612f4ecd">GetGestureDragVector</link>(<emphasis role="keywordtype">void</emphasis>)
468 {
469 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;drag&#32;vector&#32;is&#32;calculated&#32;on&#32;one&#32;touch&#32;points&#32;TOUCH_ACTION_MOVE</emphasis>
470 
471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Drag.vector;
472 }
473 
474 <emphasis role="comment">//&#32;Get&#32;drag&#32;angle</emphasis>
475 <emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;in&#32;degrees,&#32;horizontal-right&#32;is&#32;0,&#32;counterclockwise</emphasis>
476 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1aa6d8169205c4f6e8cfbd6f39f98943d2">GetGestureDragAngle</link>(<emphasis role="keywordtype">void</emphasis>)
477 {
478 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;drag&#32;angle&#32;is&#32;calculated&#32;on&#32;one&#32;touch&#32;points&#32;TOUCH_ACTION_UP</emphasis>
479 
480 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Drag.angle;
481 }
482 
483 <emphasis role="comment">//&#32;Get&#32;distance&#32;between&#32;two&#32;pinch&#32;points</emphasis>
484 <link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_8h_1a85b0053a8ccc10862b000aa2bc5404c9">GetGesturePinchVector</link>(<emphasis role="keywordtype">void</emphasis>)
485 {
486 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Pinch&#32;distance&#32;is&#32;calculated&#32;on&#32;two&#32;touch&#32;points&#32;TOUCH_ACTION_MOVE</emphasis>
487 
488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Pinch.vector;
489 }
490 
491 <emphasis role="comment">//&#32;Get&#32;angle&#32;between&#32;two&#32;pinch&#32;points</emphasis>
492 <emphasis role="comment">//&#32;NOTE:&#32;Angle&#32;in&#32;degrees,&#32;horizontal-right&#32;is&#32;0,&#32;counterclockwise</emphasis>
493 <emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2raylib_8h_1a8215af8efd6dc55081f44d13b99161bf">GetGesturePinchAngle</link>(<emphasis role="keywordtype">void</emphasis>)
494 {
495 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;pinch&#32;angle&#32;is&#32;calculated&#32;on&#32;two&#32;touch&#32;points&#32;TOUCH_ACTION_MOVE</emphasis>
496 
497 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GESTURES.Pinch.angle;
498 }
499 
500 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
501 <emphasis role="comment">//&#32;Module&#32;specific&#32;Functions&#32;Definition</emphasis>
502 <emphasis role="comment">//----------------------------------------------------------------------------------</emphasis>
503 <emphasis role="comment">//&#32;Get&#32;angle&#32;from&#32;two-points&#32;vector&#32;with&#32;X-axis</emphasis>
504 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;rgVector2Angle(<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>)
505 {
506 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>&#32;=&#32;atan2f(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.y&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.y,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.x&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.x)*(180.0f/<link linkend="__classes_2lib_2rgestures_8h_1a598a3330b3c21701223ee0ca14316eca">PI</link>);
507 
508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(angle&#32;&lt;&#32;0)&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>&#32;+=&#32;360.0f;
509 
510 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__ext__quaternion__trigonometric_1ga8aa248b31d5ade470c87304df5eb7bd8">angle</link>;
511 }
512 
513 <emphasis role="comment">//&#32;Calculate&#32;distance&#32;between&#32;two&#32;Vector2</emphasis>
514 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;rgVector2Distance(<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>,&#32;<link linkend="_struct_vector2">Vector2</link>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>)
515 {
516 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
517 
518 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dx&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.x&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.x;
519 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dy&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a9a09a1837922b2b806f4589096a52049">v2</link>.y&#32;-&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a0779c3b73f9aa3a0ac5b0139b5d291d9">v1</link>.y;
520 
521 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>&#32;=&#32;(float)<link linkend="__classes_2lib_2include_2tgmath_8h_1a86ab780bf1de516c739da6893b2e303a">sqrt</link>(dx*dx&#32;+&#32;dy*dy);
522 
523 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2glm_2test_2core_2core__func__integer_8cpp_1a937d4dd628a8858b443a399410d2600b">result</link>;
524 }
525 
526 <emphasis role="comment">//&#32;Time&#32;measure&#32;returned&#32;are&#32;milliseconds</emphasis>
527 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;rgGetCurrentTime(<emphasis role="keywordtype">void</emphasis>)
528 {
529 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_structtime">time</link>&#32;=&#32;0;
530 
531 <emphasis role="preprocessor">#if&#32;!defined(GESTURES_STANDALONE)</emphasis>
532 &#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;=&#32;<link linkend="__classes_2lib_2raylib_8h_1ab05c0da19478ba35ee9a13a2a6ac07a7">GetTime</link>();
533 <emphasis role="preprocessor">#else</emphasis>
534 <emphasis role="preprocessor">#if&#32;defined(_WIN32)</emphasis>
535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;clockFrequency,&#32;currentTime;
536 
537 &#32;&#32;&#32;&#32;QueryPerformanceFrequency(&amp;clockFrequency);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;BE&#32;CAREFUL:&#32;Costly&#32;operation!</emphasis>
538 &#32;&#32;&#32;&#32;QueryPerformanceCounter(&amp;currentTime);
539 
540 &#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;=&#32;(double)currentTime/clockFrequency*1000.0f;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;miliseconds</emphasis>
541 <emphasis role="preprocessor">#endif</emphasis>
542 
543 <emphasis role="preprocessor">#if&#32;defined(__linux__)</emphasis>
544 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;Only&#32;for&#32;Linux-based&#32;systems</emphasis>
545 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>timespec&#32;now;
546 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2pthread__time_8h_1a907d36e3ac946c73f25cc3d4cbf44c7a">clock_gettime</link>(<link linkend="__classes_2lib_2pthread__time_8h_1a6fb83f5e91e704391ff796553d5e0f46">CLOCK_MONOTONIC</link>,&#32;&amp;now);
547 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nowTime&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;int)now.tv_sec*1000000000LLU&#32;+&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)now.tv_nsec;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;nanoseconds</emphasis>
548 
549 &#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;=&#32;((double)nowTime/1000000.0);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;miliseconds</emphasis>
550 <emphasis role="preprocessor">#endif</emphasis>
551 
552 <emphasis role="preprocessor">#if&#32;defined(__APPLE__)</emphasis>
553 &#32;&#32;&#32;&#32;<emphasis role="comment">//#define&#32;CLOCK_REALTIME&#32;&#32;CALENDAR_CLOCK&#32;&#32;&#32;&#32;//&#32;returns&#32;UTC&#32;time&#32;since&#32;1970-01-01</emphasis>
554 &#32;&#32;&#32;&#32;<emphasis role="comment">//#define&#32;CLOCK_MONOTONIC&#32;SYSTEM_CLOCK&#32;&#32;&#32;&#32;&#32;&#32;//&#32;returns&#32;the&#32;time&#32;since&#32;boot&#32;time</emphasis>
555 
556 &#32;&#32;&#32;&#32;clock_serv_t&#32;cclock;
557 &#32;&#32;&#32;&#32;mach_timespec_t&#32;now;
558 &#32;&#32;&#32;&#32;host_get_clock_service(mach_host_self(),&#32;SYSTEM_CLOCK,&#32;&amp;cclock);
559 
560 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;NOTE:&#32;OS&#32;X&#32;does&#32;not&#32;have&#32;clock_gettime(),&#32;using&#32;clock_get_time()</emphasis>
561 &#32;&#32;&#32;&#32;clock_get_time(cclock,&#32;&amp;now);
562 &#32;&#32;&#32;&#32;mach_port_deallocate(mach_task_self(),&#32;cclock);
563 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;nowTime&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;int)now.tv_sec*1000000000LLU&#32;+&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>)now.tv_nsec;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;nanoseconds</emphasis>
564 
565 &#32;&#32;&#32;&#32;<link linkend="_structtime">time</link>&#32;=&#32;((double)nowTime/1000000.0);&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Time&#32;in&#32;miliseconds</emphasis>
566 <emphasis role="preprocessor">#endif</emphasis>
567 <emphasis role="preprocessor">#endif</emphasis>
568 
569 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structtime">time</link>;
570 }
571 
572 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;GESTURES_IMPLEMENTATION</emphasis>
</programlisting></section>
