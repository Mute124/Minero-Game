<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2glm_2glm_2gtc_2round_8inl_source" xml:lang="en-US">
<title>round.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/glm/glm/gtc/round.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
2 
3 <emphasis role="preprocessor">#include&#32;&quot;../integer.hpp&quot;</emphasis>
4 <emphasis role="preprocessor">#include&#32;&quot;../ext/vector_integer.hpp&quot;</emphasis>
5 
6 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
7 <emphasis role="keyword">namespace&#32;</emphasis>detail
8 {
9 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;is_<emphasis role="keywordtype">float</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_<emphasis role="keywordtype">signed</emphasis>&gt;
10 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_roundMultiple&#32;{};
11 
12 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
13 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_roundMultiple&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
14 &#32;&#32;&#32;&#32;{
15 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
16 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;genType&#32;<link linkend="_structglm_1_1detail_1_1compute__round_multiple_3_01true_00_01true_01_4_1ad2ba30e3338e768e6119c957f44b2216">call</link>(genType&#32;Source,&#32;genType&#32;Multiple)
17 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Source&#32;&gt;=&#32;genType(0))
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Source&#32;-&#32;std::fmod(Source,&#32;Multiple);
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genType&#32;Tmp&#32;=&#32;Source&#32;+&#32;genType(1);
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tmp&#32;-&#32;std::fmod(Tmp,&#32;Multiple)&#32;-&#32;Multiple;
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
26 &#32;&#32;&#32;&#32;};
27 
28 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
29 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_roundMultiple&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>&gt;
30 &#32;&#32;&#32;&#32;{
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;genType&#32;<link linkend="_structglm_1_1detail_1_1compute__round_multiple_3_01false_00_01false_01_4_1a9242ffccd610779b8020ad382d47213a">call</link>(genType&#32;Source,&#32;genType&#32;Multiple)
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Source&#32;&gt;=&#32;genType(0))
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Source&#32;-&#32;Source&#32;%&#32;Multiple;
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genType&#32;Tmp&#32;=&#32;Source&#32;+&#32;genType(1);
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tmp&#32;-&#32;Tmp&#32;%&#32;Multiple&#32;-&#32;Multiple;
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
42 &#32;&#32;&#32;&#32;};
43 
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;&gt;
45 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_roundMultiple&lt;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
46 &#32;&#32;&#32;&#32;{
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;genType&#32;<link linkend="_structglm_1_1detail_1_1compute__round_multiple_3_01false_00_01true_01_4_1a9f9791732bf5427c856feac9fed810da">call</link>(genType&#32;Source,&#32;genType&#32;Multiple)
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Source&#32;&gt;=&#32;genType(0))
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Source&#32;-&#32;Source&#32;%&#32;Multiple;
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genType&#32;Tmp&#32;=&#32;Source&#32;+&#32;genType(1);
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Tmp&#32;-&#32;Tmp&#32;%&#32;Multiple&#32;-&#32;Multiple;
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
58 &#32;&#32;&#32;&#32;};
59 }<emphasis role="comment">//namespace&#32;detail</emphasis>
60 
62 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ceilPowerOfTwo</emphasis>
63 
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
65 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genType&#32;<link linkend="_namespaceceil_power_of_two">ceilPowerOfTwo</link>(genType&#32;<link linkend="_classvalue">value</link>)
66 &#32;&#32;&#32;&#32;{
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_ceilPowerOfTwo&lt;1,&#32;genType,&#32;defaultp,&#32;std::numeric_limits&lt;genType&gt;::is_signed&gt;::call(vec&lt;1,&#32;genType,&#32;defaultp&gt;(<link linkend="_classvalue">value</link>)).x;
68 &#32;&#32;&#32;&#32;}
69 
70 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
71 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespaceceil_power_of_two">ceilPowerOfTwo</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
72 &#32;&#32;&#32;&#32;{
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_ceilPowerOfTwo&lt;L,&#32;T,&#32;Q,&#32;std::numeric_limits&lt;T&gt;::is_signed&gt;::call(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
74 &#32;&#32;&#32;&#32;}
75 
77 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;floorPowerOfTwo</emphasis>
78 
79 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
80 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genType&#32;<link linkend="_namespacefloor_power_of_two">floorPowerOfTwo</link>(genType&#32;<link linkend="_classvalue">value</link>)
81 &#32;&#32;&#32;&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespaceis_power_of_two">isPowerOfTwo</link>(<link linkend="_classvalue">value</link>)&#32;?&#32;<link linkend="_classvalue">value</link>&#32;:&#32;<emphasis role="keyword">static_cast&lt;</emphasis>genType<emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;<link linkend="_namespacefind_m_s_b">findMSB</link>(<link linkend="_classvalue">value</link>);
83 &#32;&#32;&#32;&#32;}
84 
85 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
86 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespacefloor_power_of_two">floorPowerOfTwo</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
87 &#32;&#32;&#32;&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor1&lt;vec,&#32;L,&#32;T,&#32;T,&#32;Q&gt;::call(<link linkend="_namespacefloor_power_of_two">floorPowerOfTwo</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
89 &#32;&#32;&#32;&#32;}
90 
92 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;roundPowerOfTwo</emphasis>
93 
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genIUType&gt;
95 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genIUType&#32;<link linkend="_namespaceround_power_of_two">roundPowerOfTwo</link>(genIUType&#32;<link linkend="_classvalue">value</link>)
96 &#32;&#32;&#32;&#32;{
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(<link linkend="_namespaceis_power_of_two">isPowerOfTwo</link>(<link linkend="_classvalue">value</link>))
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classvalue">value</link>;
99 
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genIUType&#32;<emphasis role="keyword">const</emphasis>&#32;prev&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>genIUType<emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;<link linkend="_namespacefind_m_s_b">findMSB</link>(<link linkend="_classvalue">value</link>);
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;genIUType&#32;<emphasis role="keyword">const</emphasis>&#32;next&#32;=&#32;prev&#32;&lt;&lt;&#32;static_cast&lt;genIUType&gt;(1);
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(next&#32;-&#32;<link linkend="_classvalue">value</link>)&#32;&lt;&#32;(<link linkend="_classvalue">value</link>&#32;-&#32;prev)&#32;?&#32;next&#32;:&#32;prev;
103 &#32;&#32;&#32;&#32;}
104 
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
106 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespaceround_power_of_two">roundPowerOfTwo</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
107 &#32;&#32;&#32;&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor1&lt;vec,&#32;L,&#32;T,&#32;T,&#32;Q&gt;::call(<link linkend="_namespaceround_power_of_two">roundPowerOfTwo</link>,&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>);
109 &#32;&#32;&#32;&#32;}
110 
112 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ceilMultiple</emphasis>
113 
114 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
115 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genType&#32;<link linkend="_namespaceceil_multiple">ceilMultiple</link>(genType&#32;Source,&#32;genType&#32;Multiple)
116 &#32;&#32;&#32;&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_ceilMultiple&lt;std::numeric_limits&lt;genType&gt;::is_iec559,&#32;std::numeric_limits&lt;genType&gt;::is_signed&gt;::call(Source,&#32;Multiple);
118 &#32;&#32;&#32;&#32;}
119 
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
121 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespaceceil_multiple">ceilMultiple</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Multiple)
122 &#32;&#32;&#32;&#32;{
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor2&lt;vec,&#32;L,&#32;T,&#32;Q&gt;::call(<link linkend="_namespaceceil_multiple">ceilMultiple</link>,&#32;Source,&#32;Multiple);
124 &#32;&#32;&#32;&#32;}
125 
127 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;floorMultiple</emphasis>
128 
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
130 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genType&#32;<link linkend="_namespacefloor_multiple">floorMultiple</link>(genType&#32;Source,&#32;genType&#32;Multiple)
131 &#32;&#32;&#32;&#32;{
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_floorMultiple&lt;std::numeric_limits&lt;genType&gt;::is_iec559,&#32;std::numeric_limits&lt;genType&gt;::is_signed&gt;::call(Source,&#32;Multiple);
133 &#32;&#32;&#32;&#32;}
134 
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
136 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_namespacefloor_multiple">floorMultiple</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Multiple)
137 &#32;&#32;&#32;&#32;{
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor2&lt;vec,&#32;L,&#32;T,&#32;Q&gt;::call(<link linkend="_namespacefloor_multiple">floorMultiple</link>,&#32;Source,&#32;Multiple);
139 &#32;&#32;&#32;&#32;}
140 
142 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;roundMultiple</emphasis>
143 
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
145 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;genType&#32;<link linkend="_group__gtc__round_1gab892defcc9c0b0618df7251253dc0fbb">roundMultiple</link>(genType&#32;Source,&#32;genType&#32;Multiple)
146 &#32;&#32;&#32;&#32;{
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::compute_roundMultiple&lt;std::numeric_limits&lt;genType&gt;::is_iec559,&#32;std::numeric_limits&lt;genType&gt;::is_signed&gt;::call(Source,&#32;Multiple);
148 &#32;&#32;&#32;&#32;}
149 
150 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
151 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<link linkend="_group__gtc__round_1gab892defcc9c0b0618df7251253dc0fbb">roundMultiple</link>(vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Source,&#32;vec&lt;L,&#32;T,&#32;Q&gt;&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;Multiple)
152 &#32;&#32;&#32;&#32;{
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;detail::functor2&lt;vec,&#32;L,&#32;T,&#32;Q&gt;::call(<link linkend="_group__gtc__round_1gab892defcc9c0b0618df7251253dc0fbb">roundMultiple</link>,&#32;Source,&#32;Multiple);
154 &#32;&#32;&#32;&#32;}
155 }<emphasis role="comment">//namespace&#32;glm</emphasis>
</programlisting></section>
