<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_formatter_8inl_source" xml:lang="en-US">
<title>formatter.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/include/toml++/impl/formatter.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//#&#32;This&#32;file&#32;is&#32;a&#32;part&#32;of&#32;toml++&#32;and&#32;is&#32;subject&#32;to&#32;the&#32;the&#32;terms&#32;of&#32;the&#32;MIT&#32;license.</emphasis>
2 <emphasis role="comment">//#&#32;Copyright&#32;(c)&#32;Mark&#32;Gillard&#32;&lt;mark.gillard@outlook.com.au&gt;</emphasis>
3 <emphasis role="comment">//#&#32;See&#32;https://github.com/marzer/tomlplusplus/blob/master/LICENSE&#32;for&#32;the&#32;full&#32;license&#32;text.</emphasis>
4 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;MIT</emphasis>
5 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
6 
7 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_preprocessor_8h">preprocessor.h</link>&quot;</emphasis>
8 <emphasis role="comment">//#&#32;{{</emphasis>
9 <emphasis role="preprocessor">#if&#32;!TOML_IMPLEMENTATION</emphasis>
10 <emphasis role="preprocessor">#error&#32;This&#32;is&#32;an&#32;implementation-only&#32;header.</emphasis>
11 <emphasis role="preprocessor">#endif</emphasis>
12 <emphasis role="comment">//#&#32;}}</emphasis>
13 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_FORMATTERS</emphasis>
14 
15 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2debug_2formatter_8h">formatter.h</link>&quot;</emphasis>
16 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_print__to__stream_8h">print_to_stream.h</link>&quot;</emphasis>
17 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_value_8h">value.h</link>&quot;</emphasis>
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_table_8h">table.h</link>&quot;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_array_8h">array.h</link>&quot;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_unicode_8h">unicode.h</link>&quot;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_parse__result_8h">parse_result.h</link>&quot;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__start_8h">header_start.h</link>&quot;</emphasis>
23 
24 <link linkend="_formatter_8inl_1af62a64490c99e43956a0f41548262369">TOML_IMPL_NAMESPACE_START</link>
25 {
26 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;<link linkend="_preprocessor_8h_1ab0a3cf12ff4c3246e9815af23799e4dd">TOML_CLOSED_FLAGS_ENUM</link>&#32;formatted_string_traits&#32;:&#32;<emphasis role="keywordtype">unsigned</emphasis>
27 &#32;&#32;&#32;&#32;{
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;none,
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;line_breaks&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;0,&#32;<emphasis role="comment">//&#32;\n</emphasis>
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tabs&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;1,&#32;<emphasis role="comment">//&#32;\t</emphasis>
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;control_chars&#32;=&#32;1u&#32;&lt;&lt;&#32;2,&#32;<emphasis role="comment">//&#32;also&#32;includes&#32;non-ascii&#32;vertical&#32;whitespace</emphasis>
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;single_quotes&#32;=&#32;1u&#32;&lt;&lt;&#32;3,
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;non_bare&#32;&#32;&#32;&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;4,&#32;<emphasis role="comment">//&#32;anything&#32;not&#32;satisfying&#32;&quot;is&#32;bare&#32;key&#32;character&quot;</emphasis>
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;non_ascii&#32;&#32;&#32;&#32;&#32;=&#32;1u&#32;&lt;&lt;&#32;5,&#32;<emphasis role="comment">//&#32;any&#32;codepoint&#32;&gt;=&#32;128</emphasis>
35 
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;all&#32;=&#32;(non_ascii&#32;&lt;&lt;&#32;1u)&#32;-&#32;1u
37 &#32;&#32;&#32;&#32;};
38 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1af3268f6dd1413971826ff207adc92d49">TOML_MAKE_FLAGS</link>(formatted_string_traits);
39 
40 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
41 &#32;&#32;&#32;&#32;<link linkend="_classformatter_1af732ca5de2431badc30d819d30715860">formatter::formatter</link>(<emphasis role="keyword">const</emphasis>&#32;node*&#32;source_node,
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classparse__result">parse_result</link>*&#32;source_pr,
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;formatter_constants&amp;&#32;constants,
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structformatter__config">formatter_config</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;<emphasis role="comment">//</emphasis>
45 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;source_{&#32;source_pr&#32;&amp;&amp;&#32;*source_pr&#32;?&#32;&amp;source_pr-&gt;table()&#32;:&#32;source_node&#32;},
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result_{&#32;source_pr&#32;},
48 <emphasis role="preprocessor">#else</emphasis>
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;source_{&#32;source_pr&#32;?&#32;source_pr&#32;:&#32;source_node&#32;},
50 <emphasis role="preprocessor">#endif</emphasis>
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;constants_{&#32;&amp;constants&#32;},
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config_{&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a13b3686016f6a1889a75cd91a854514a">config</link>&#32;}
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__configuration_1ga989dd9b9610c274f1eb99e8e77997ee9">TOML_ASSERT_ASSUME</link>(source_);
55 
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;config_.flags&#32;=&#32;(config_.flags&#32;|&#32;constants_-&gt;mandatory_flags)&#32;&amp;&#32;~constants_-&gt;ignored_flags;
57 
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_columns_&#32;=&#32;{};
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;config_.indent)
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_columns_&#32;+=&#32;c&#32;==&#32;<emphasis role="stringliteral">&apos;\t&apos;</emphasis>&#32;?&#32;4u&#32;:&#32;1u;
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int_format_mask_&#32;=&#32;config_.flags
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&#32;(format_flags::allow_binary_integers&#32;|&#32;format_flags::allow_octal_integers
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;format_flags::allow_hexadecimal_integers);
65 &#32;&#32;&#32;&#32;}
66 
67 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
68 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a86257d60959a58cba61543ccafe17947">formatter::attach</link>(std::ostream&#32;&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>)&#32;<emphasis role="keyword">noexcept</emphasis>
69 &#32;&#32;&#32;&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;indent_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;{};
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream_&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;&amp;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a020a78e9ab6f08067423e5d76c0277d0">stream</link>;
73 &#32;&#32;&#32;&#32;}
74 
75 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
76 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a76c840552a46939086439bff7d487bae">formatter::detach</link>()&#32;noexcept
77 &#32;&#32;&#32;&#32;{
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stream_&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
79 &#32;&#32;&#32;&#32;}
80 
81 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
82 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aee9a4c087139738b82114836c20e37e4">formatter::print_newline</link>(<emphasis role="keywordtype">bool</emphasis>&#32;force)
83 &#32;&#32;&#32;&#32;{
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!naked_newline_&#32;||&#32;force)
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
89 &#32;&#32;&#32;&#32;}
90 
91 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
92 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a1d909df69a5ea677e6785a97ae78d34b">formatter::print_indent</link>()
93 &#32;&#32;&#32;&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;indent_;&#32;i++)
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;config_.<link linkend="_structformatter__config_1a1a2ae49c7de03d0014d24e9397455733">indent</link>);
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
99 &#32;&#32;&#32;&#32;}
100 
101 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
102 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">formatter::print_unformatted</link>(<emphasis role="keywordtype">char</emphasis>&#32;c)
103 &#32;&#32;&#32;&#32;{
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;c);
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
106 &#32;&#32;&#32;&#32;}
107 
108 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">formatter::print_unformatted</link>(std::string_view&#32;str)
110 &#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;str);
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
113 &#32;&#32;&#32;&#32;}
114 
115 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
116 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">formatter::print_string</link>(std::string_view&#32;str,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_multi_line,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;allow_bare)
117 &#32;&#32;&#32;&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str.empty())
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="stringliteral">&quot;&apos;&apos;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;<emphasis role="stringliteral">&quot;\&quot;\&quot;&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pre-scan&#32;the&#32;string&#32;to&#32;determine&#32;how&#32;we&#32;should&#32;output&#32;it</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatted_string_traits&#32;traits&#32;=&#32;{};
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!allow_bare)
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_bare;
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;unicode_allowed&#32;=&#32;<link linkend="_classformatter_1a8337456ce8d93a5b60fb3b3e4d467ef2">unicode_strings_allowed</link>();
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ascii&#32;fast&#32;path</emphasis>
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_toml_8hpp_1a59540c22f4b7e10864095f21c67e0c69">is_ascii</link>(str.data(),&#32;str.length()))
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::line_breaks;&#32;<emphasis role="keywordflow">break</emphasis>;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::tabs;&#32;<emphasis role="keywordflow">break</emphasis>;
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::single_quotes;&#32;<emphasis role="keywordflow">break</emphasis>;
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_control_character(c))
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::control_chars;
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_ascii_bare_key_character(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">char32_t</emphasis><emphasis role="keyword">&gt;</emphasis>(c)))
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_bare;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
151 
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;all_ascii_traits&#32;=
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;formatted_string_traits::all&#32;&amp;&#32;~formatted_string_traits::non_ascii;
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(traits&#32;==&#32;all_ascii_traits)
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
158 
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unicode&#32;slow&#32;path</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_ascii;
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_decoder&#32;decoder;
164 
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;unicode&#32;is&#32;malformed&#32;just&#32;treat&#32;the&#32;string&#32;as&#32;a&#32;single-line&#32;non-literal&#32;and</emphasis>
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escape&#32;all&#32;non-ascii&#32;characters&#32;(to&#32;ensure&#32;round-tripping&#32;and&#32;help&#32;with&#32;diagnostics)</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;bad_unicode&#32;=&#32;[&amp;]()&#32;<emphasis role="keyword">noexcept</emphasis>
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;&amp;=&#32;~formatted_string_traits::line_breaks;
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::control_chars&#32;|&#32;formatted_string_traits::non_bare;
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;unicode_allowed&#32;=&#32;<emphasis role="keyword">false</emphasis>;
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
173 
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder(c);
177 
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(decoder.error())
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bad_unicode();
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
183 
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!decoder.has_code_point())
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
186 
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(decoder.codepoint)
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::line_breaks;&#32;<emphasis role="keywordflow">break</emphasis>;
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::tabs;&#32;<emphasis role="keywordflow">break</emphasis>;
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>:&#32;traits&#32;|=&#32;formatted_string_traits::single_quotes;&#32;<emphasis role="keywordflow">break</emphasis>;
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(is_control_character(decoder.codepoint)
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;is_non_ascii_vertical_whitespace(decoder.codepoint))
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::control_chars;
197 
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_bare_key_character(decoder.codepoint))
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits&#32;|=&#32;formatted_string_traits::non_bare;
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
204 
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder.needs_more_input())
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bad_unicode();
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
208 
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;string&#32;meets&#32;the&#32;requirements&#32;of&#32;being&#32;&apos;bare&apos;&#32;we&#32;can&#32;emit&#32;a&#32;bare&#32;string</emphasis>
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(bare&#32;strings&#32;are&#32;composed&#32;of&#32;letters&#32;and&#32;numbers;&#32;no&#32;whitespace,&#32;control&#32;chars,&#32;quotes,&#32;etc)</emphasis>
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_bare)
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_ascii)&#32;||&#32;unicode_allowed))
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(str);
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
217 
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;determine&#32;if&#32;this&#32;should&#32;be&#32;a&#32;multi-line&#32;string&#32;(triple-quotes)</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;multi_line&#32;=&#32;allow_multi_line&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_classformatter_1a2c5c11209bcde97d39b08d2e1a159f04">multi_line_strings_allowed</link>()&#32;<emphasis role="comment">//</emphasis>
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!!(traits&#32;&amp;&#32;formatted_string_traits::line_breaks);
222 
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;determine&#32;if&#32;this&#32;should&#32;be&#32;a&#32;literal&#32;string&#32;(single-quotes&#32;with&#32;no&#32;escaping)</emphasis>
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;literal&#32;=&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;!(traits&#32;&amp;&#32;formatted_string_traits::control_chars)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::single_quotes)&#32;||&#32;multi_line)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::tabs)&#32;||&#32;<link linkend="_classformatter_1a70244c9a53ff8dcdda99788ff7048aed">real_tabs_in_strings_allowed</link>())&#32;<emphasis role="comment">//</emphasis>
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_ascii)&#32;||&#32;unicode_allowed);
229 
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;literal&#32;strings&#32;(single&#32;quotes,&#32;no&#32;escape&#32;codes)</emphasis>
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(literal)
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;quot&#32;=&#32;multi_line&#32;?&#32;R<emphasis role="stringliteral">&quot;(&apos;&apos;&apos;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R</emphasis><emphasis role="stringliteral">&quot;(&apos;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>;</emphasis>
234 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(quot);</emphasis>
235 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(str);</emphasis>
236 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(quot);</emphasis>
237 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>;
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
239 
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;anything&#32;from&#32;here&#32;down&#32;is&#32;a&#32;non-literal&#32;string,&#32;so&#32;requires&#32;iteration&#32;and&#32;escaping.</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(multi_line&#32;?&#32;R<emphasis role="stringliteral">&quot;(&quot;&quot;&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R</emphasis><emphasis role="stringliteral">&quot;(&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
242 <emphasis role="stringliteral"></emphasis>
243 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;real_tabs_allowed&#32;=&#32;<link linkend="_classformatter_1a70244c9a53ff8dcdda99788ff7048aed">real_tabs_in_strings_allowed</link>();
244 
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ascii&#32;fast&#32;path</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(traits&#32;&amp;&#32;formatted_string_traits::non_ascii))
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(c)
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\\)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u007F)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;real_tabs_allowed&#32;?&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\t)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;multi_line&#32;?&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\n)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;control&#32;characters&#32;from&#32;lookup&#32;table</emphasis>
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(c&#32;&gt;=&#32;<emphasis role="stringliteral">&apos;\x00&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="stringliteral">&apos;\x1F&apos;</emphasis>)
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<link linkend="_toml_8hpp_1a6b12f27cd2f2075ecfa8109f2149ebdf">control_char_escapes</link>[c]);
262 
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;regular&#32;characters</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;c);
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
270 
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unicode&#32;slow&#32;path</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;utf8_decoder&#32;decoder;
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;cp_start&#32;=&#32;str.data();
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;cp_end&#32;&#32;&#32;=&#32;cp_start;
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">auto</emphasis>&#32;c&#32;:&#32;str)
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder(c);
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_end++;
281 
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;decoder&#32;encounters&#32;malformed&#32;unicode&#32;just&#32;emit&#32;raw&#32;bytes&#32;and</emphasis>
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder.error())
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(cp_start&#32;!=&#32;cp_end)
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u00)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
288 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,</emphasis>
289 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link><emphasis role="keyword">&gt;</emphasis>(*cp_start),
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_hexadecimal,
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2);
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_start++;
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decoder.reset();
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
297 
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!decoder.has_code_point())
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
300 
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(decoder.codepoint)
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\\&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\\)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u007F)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\t&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;real_tabs_allowed&#32;?&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\t)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;U<emphasis role="charliteral">&apos;\n&apos;</emphasis>:&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;multi_line&#32;?&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R<emphasis role="stringliteral">&quot;(\n)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);&#32;</emphasis><emphasis role="keywordflow">break</emphasis>;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;control&#32;characters&#32;from&#32;lookup&#32;table</emphasis>
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_toml_8hpp_1a1ab9a36ec71d2037e14f1dfb0aa0e03c">TOML_UNLIKELY</link>(decoder.codepoint&#32;&lt;=&#32;U<emphasis role="stringliteral">&apos;\x1F&apos;</emphasis>)
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a6b12f27cd2f2075ecfa8109f2149ebdf">control_char_escapes</link>[<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint)]);
314 
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;escaped&#32;unicode&#32;characters</emphasis>
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(decoder.codepoint&#32;&gt;&#32;U<emphasis role="stringliteral">&apos;\x7F&apos;</emphasis>
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;(!unicode_allowed&#32;||&#32;is_non_ascii_vertical_whitespace(decoder.codepoint)))
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint)&#32;&gt;&#32;0xFFFFu)
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\U)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
322 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,</emphasis>
323 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint),
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_hexadecimal,
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;8);
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;R<emphasis role="stringliteral">&quot;(\u)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
330 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,</emphasis>
331 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">static_cast&lt;</emphasis><link linkend="__classes_2lib_2external_2glfw_2deps_2vs2008_2stdint_8h_1ac0af81082969e5e3f4d939b1de7002ac">uint_least32_t</link><emphasis role="keyword">&gt;</emphasis>(decoder.codepoint),
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_hexadecimal,
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;4);
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
336 
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;regular&#32;characters</emphasis>
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;cp_start,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(cp_end&#32;-&#32;cp_start));
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
342 
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cp_start&#32;=&#32;cp_end;
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
346 
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(multi_line&#32;?&#32;R<emphasis role="stringliteral">&quot;(&quot;&quot;&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>&#32;:&#32;R</emphasis><emphasis role="stringliteral">&quot;(&quot;)&quot;<link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);</emphasis>
348 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;}</emphasis>
349 <emphasis role="stringliteral"></emphasis>
350 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link></emphasis>
351 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;std::string&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
352 &#32;&#32;&#32;&#32;{
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1aa719ff784d52e86d7997982b3aa8908e">print_string</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.get());
354 &#32;&#32;&#32;&#32;}
355 
356 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
357 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;int64_t&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
358 &#32;&#32;&#32;&#32;{
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
360 
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;!!int_format_mask_)
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;value_flags_mask&#32;=
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::format_as_binary&#32;|&#32;value_flags::format_as_octal&#32;|&#32;value_flags::format_as_hexadecimal;
365 
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;fmt&#32;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>.flags()&#32;&amp;&#32;value_flags_mask;
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(fmt)
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_binary:
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(int_format_mask_&#32;&amp;&#32;format_flags::allow_binary_integers))
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="stringliteral">&quot;0b&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;fmt);
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
377 
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_octal:
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(int_format_mask_&#32;&amp;&#32;format_flags::allow_octal_integers))
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="stringliteral">&quot;0o&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;fmt);
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
386 
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;value_flags::format_as_hexadecimal:
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(int_format_mask_&#32;&amp;&#32;format_flags::allow_hexadecimal_integers))
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;<emphasis role="stringliteral">&quot;0x&quot;</emphasis><link linkend="_conformance__burntsushi__valid_8cpp_1a3a352c2235a269bac37d1a34a19cde48">sv</link>);
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;fmt);
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
395 
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">break</emphasis>;
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
399 
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fallback&#32;to&#32;decimal</emphasis>
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
402 &#32;&#32;&#32;&#32;}
403 
404 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
405 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;double&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
406 &#32;&#32;&#32;&#32;{
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::string_view*&#32;inf_nan&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="_toml_8hpp_1a2c39cdb56141a8d5637c9933c53e8bb6">fpclassify</link>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>))
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::neg_inf:&#32;inf_nan&#32;=&#32;&amp;constants_-&gt;float_neg_inf;&#32;<emphasis role="keywordflow">break</emphasis>;
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::pos_inf:&#32;inf_nan&#32;=&#32;&amp;constants_-&gt;float_pos_inf;&#32;<emphasis role="keywordflow">break</emphasis>;
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::nan:&#32;inf_nan&#32;=&#32;&amp;constants_-&gt;float_nan;&#32;<emphasis role="keywordflow">break</emphasis>;
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;fp_class::ok:
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,
415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_flags::none,
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::relaxed_float_precision));
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
421 
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inf_nan)
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_infinities_and_nans))
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*inf_nan,&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*inf_nan);
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
429 
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
431 &#32;&#32;&#32;&#32;}
432 
433 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
434 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;bool&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
435 &#32;&#32;&#32;&#32;{
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a58f997ca9e132ba8a0522be8d5709f17">print_unformatted</link>(*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>&#32;?&#32;constants_-&gt;bool_true&#32;:&#32;constants_-&gt;bool_false);
437 &#32;&#32;&#32;&#32;}
438 
439 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
441 &#32;&#32;&#32;&#32;{
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_dates_and_times))
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;:&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
447 &#32;&#32;&#32;&#32;}
448 
449 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
450 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;time&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
451 &#32;&#32;&#32;&#32;{
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_dates_and_times))
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;:&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
457 &#32;&#32;&#32;&#32;}
458 
459 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
460 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">formatter::print</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classvalue">value&lt;date_time&gt;</link>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>)
461 &#32;&#32;&#32;&#32;{
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!!(config_.<link linkend="_structformatter__config_1a2eeb91ebfb3aebb5f3fb12c66ed4b3ea">flags</link>&#32;&amp;&#32;format_flags::quote_dates_and_times))
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1aff367af5369aebb62f720b2827f37a5d">print_to_stream_bookended</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>,&#32;<link linkend="_classformatter_1ad01d4bbbcb6a7b7eea07028c8db41ece">literal_strings_allowed</link>()&#32;?&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>&#32;:&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a3ecc6f4250547523307312cbff28007e">print_to_stream</link>(*stream_,&#32;*<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aa857b95cc76669c2a9109239ef40a47c">val</link>);
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;naked_newline_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
467 &#32;&#32;&#32;&#32;}
468 
469 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
470 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classformatter_1a7881e736b09f9eca380d680f11b3e4f1">formatter::print_value</link>(<emphasis role="keyword">const</emphasis>&#32;node&amp;&#32;val_node,&#32;node_type&#32;<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
471 &#32;&#32;&#32;&#32;{
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_toml_8hpp_1a87bd3a07eee4ded6e9f8a97ac8fba3e8">TOML_ASSUME</link>(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;&gt;&#32;node_type::array);
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(<link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>)
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::string:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;std::string&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::integer:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;int64_t&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::floating_point:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;double&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::boolean:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;bool&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;date&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::time:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;time&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;node_type::date_time:&#32;<link linkend="_classformatter_1aa9da40a17556dcc315a96e24cb206856">print</link>(*<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classvalue">value&lt;date_time&gt;</link>*<emphasis role="keyword">&gt;</emphasis>(&amp;val_node));&#32;<emphasis role="keywordflow">break</emphasis>;
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_toml_8hpp_1a43a3ff9d3097bf4e929c9a73bd17b793">TOML_UNREACHABLE</link>;
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
484 &#32;&#32;&#32;&#32;}
485 
486 <emphasis role="preprocessor">#if&#32;TOML_ENABLE_PARSER&#32;&amp;&amp;&#32;!TOML_EXCEPTIONS</emphasis>
487 
488 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
489 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classformatter_1af51c8230b648501330350dd18ffef0a0">formatter::dump_failed_parse_result</link>()
490 &#32;&#32;&#32;&#32;{
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(result_&#32;&amp;&amp;&#32;!(*result_))
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classformatter_1a51257d7977f94a0c358aab545d5e2695">stream</link>()&#32;&lt;&lt;&#32;result_-&gt;<link linkend="_classparse__result_1aee9cab037d487c1ca09ad033400fd1f7">error</link>();
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
497 &#32;&#32;&#32;&#32;}
498 
499 <emphasis role="preprocessor">#else</emphasis>
500 
501 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1a4256b41e25e4aa04b70cf55fd56ce202">TOML_EXTERNAL_LINKAGE</link>
502 &#32;&#32;&#32;&#32;<link linkend="_preprocessor_8h_1ab61929848048873f2ffe3be0cfab436f">TOML_ATTR</link>(<emphasis role="keyword">const</emphasis>)
503 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link>&#32;<link linkend="_classformatter">formatter</link>::dump_failed_parse_result()
504 &#32;&#32;&#32;&#32;{
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
506 &#32;&#32;&#32;&#32;}
507 
508 <emphasis role="preprocessor">#endif</emphasis>
509 }
510 <link linkend="_formatter_8inl_1a66ea8ec36b215f9ccb1b419f52b89805">TOML_IMPL_NAMESPACE_END</link>;
511 
512 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_header__end_8h">header_end.h</link>&quot;</emphasis>
513 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;TOML_ENABLE_FORMATTERS</emphasis>
</programlisting></section>
