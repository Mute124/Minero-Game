<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2include_2c_09_09_2parallel_2quicksort_8h_source" xml:lang="en-US">
<title>quicksort.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/include/c++/parallel/quicksort.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2007-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the&#32;terms</emphasis>
7 <emphasis role="comment">//&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software</emphasis>
8 <emphasis role="comment">//&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)&#32;any&#32;later</emphasis>
9 <emphasis role="comment">//&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,&#32;but</emphasis>
12 <emphasis role="comment">//&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the&#32;GNU</emphasis>
14 <emphasis role="comment">//&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="comment">//&#32;Written&#32;by&#32;Johannes&#32;Singler.</emphasis>
31 
32 <emphasis role="preprocessor">#ifndef&#32;_GLIBCXX_PARALLEL_QUICKSORT_H</emphasis>
33 <emphasis role="preprocessor">#define&#32;_GLIBCXX_PARALLEL_QUICKSORT_H&#32;1</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;parallel/parallel.h&gt;</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;parallel/partition.h&gt;</emphasis>
37 
38 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__parallel">__gnu_parallel</link>
39 {
49 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
50 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;::difference_type
51 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a67cbf5b9027d7c9c4f80f80ba104cf99">__parallel_sort_qs_divide</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;_RAIter&gt;::difference_type&#32;__pivot_rank,
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;std::iterator_traits
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&lt;_RAIter&gt;::difference_type
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_samples,&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads)
57 &#32;&#32;&#32;&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
59 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
60 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
61 
62 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
63 &#32;&#32;&#32;&#32;&#32;&#32;__num_samples&#32;=&#32;std::min(__num_samples,&#32;__n);
64 
65 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;uninitialized,&#32;to&#32;avoid&#32;default&#32;constructor.</emphasis>
66 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType*&#32;__samples&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>_ValueType*<emphasis role="keyword">&gt;</emphasis>
67 &#32;&#32;&#32;&#32;(::operator&#32;<emphasis role="keyword">new</emphasis>(__num_samples&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(_ValueType)));
68 
69 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__num_samples;&#32;++__s)
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;__index&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis><emphasis role="keyword">&gt;</emphasis>
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(__s)&#32;*&#32;__n&#32;/&#32;__num_samples;
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new(&amp;(__samples[__s]))&#32;_ValueType(__begin[__index]);
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
75 
76 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">__gnu_sequential::sort</link>(__samples,&#32;__samples&#32;+&#32;__num_samples,&#32;__comp);
77 
78 &#32;&#32;&#32;&#32;&#32;&#32;_ValueType&amp;&#32;__pivot&#32;=&#32;__samples[__pivot_rank&#32;*&#32;__num_samples&#32;/&#32;__n];
79 
80 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class____gnu__parallel_1_1____binder2nd">__gnu_parallel::__binder2nd&lt;_Compare, _ValueType, _ValueType, bool&gt;</link>
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred(__comp,&#32;__pivot);
82 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__split&#32;=&#32;<link linkend="_namespace____gnu__parallel_1ac870af1d69405f2f53cd7a96e1d92348">__parallel_partition</link>(__begin,&#32;__end,
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pred,&#32;__num_threads);
84 
85 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(_DifferenceType&#32;__s&#32;=&#32;0;&#32;__s&#32;&lt;&#32;__num_samples;&#32;++__s)
86 &#32;&#32;&#32;&#32;__samples[__s].~_ValueType();
87 &#32;&#32;&#32;&#32;&#32;&#32;::operator&#32;<emphasis role="keyword">delete</emphasis>(__samples);
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__split;
90 &#32;&#32;&#32;&#32;}
91 
99 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
100 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
101 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a06c506308856b684737d24944a93a42e">__parallel_sort_qs_conquer</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads)
104 &#32;&#32;&#32;&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
106 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
108 
109 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_threads&#32;&lt;=&#32;1)
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a73a397864aa701b5bd48fae555f4f935">__gnu_sequential::sort</link>(__begin,&#32;__end,&#32;__comp);
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin,&#32;__pivot_rank;
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__n&#32;&lt;=&#32;1)
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
119 
120 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads_left;
121 
122 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((__num_threads&#32;%&#32;2)&#32;==&#32;1)
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_threads_left&#32;=&#32;__num_threads&#32;/&#32;2&#32;+&#32;1;
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_threads_left&#32;=&#32;__num_threads&#32;/&#32;2;
126 
127 &#32;&#32;&#32;&#32;&#32;&#32;__pivot_rank&#32;=&#32;__n&#32;*&#32;__num_threads_left&#32;/&#32;__num_threads;
128 
129 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__split&#32;=&#32;<link linkend="_namespace____gnu__parallel_1a67cbf5b9027d7c9c4f80f80ba104cf99">__parallel_sort_qs_divide</link>
130 &#32;&#32;&#32;&#32;(__begin,&#32;__end,&#32;__comp,&#32;__pivot_rank,
131 &#32;&#32;&#32;&#32;&#32;<link linkend="_struct____gnu__parallel_1_1___settings_1adf11d9453707f1145a9e221ab7630bd3">_Settings::get</link>().sort_qs_num_samples_preset,&#32;__num_threads);
132 
133 <emphasis role="preprocessor">#pragma&#32;omp&#32;parallel&#32;sections&#32;num_threads(2)</emphasis>
134 &#32;&#32;&#32;&#32;&#32;&#32;{
135 <emphasis role="preprocessor">#pragma&#32;omp&#32;section</emphasis>
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a06c506308856b684737d24944a93a42e">__parallel_sort_qs_conquer</link>(__begin,&#32;__begin&#32;+&#32;__split,
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__num_threads_left);
138 <emphasis role="preprocessor">#pragma&#32;omp&#32;section</emphasis>
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a06c506308856b684737d24944a93a42e">__parallel_sort_qs_conquer</link>(__begin&#32;+&#32;__split,&#32;__end,
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__comp,&#32;__num_threads&#32;-&#32;__num_threads_left);
141 &#32;&#32;&#32;&#32;&#32;&#32;}
142 &#32;&#32;&#32;&#32;}
143 
144 
152 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_RAIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Compare&gt;
153 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
154 &#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1ac416a1c7e347b429bbf7a8fb17e847b2">__parallel_sort_qs</link>(_RAIter&#32;__begin,&#32;_RAIter&#32;__end,
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Compare&#32;__comp,
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link>&#32;__num_threads)
157 &#32;&#32;&#32;&#32;{
158 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2parallel_2compiletime__settings_8h_1a77fb93c9cecec331ccee755972695128">_GLIBCXX_CALL</link>(__n)
159 
160 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_RAIter&gt;&#32;_TraitsType;
161 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::value_type&#32;_ValueType;
162 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsType::difference_type&#32;_DifferenceType;
163 
164 &#32;&#32;&#32;&#32;&#32;&#32;_DifferenceType&#32;__n&#32;=&#32;__end&#32;-&#32;__begin;
165 
166 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;At&#32;least&#32;one&#32;element&#32;per&#32;processor.</emphasis>
167 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__num_threads&#32;&gt;&#32;__n)
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__num_threads&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespace____gnu__parallel_1a05e502e51bfc3233671730f74a44dc6a">_ThreadIndex</link><emphasis role="keyword">&gt;</emphasis>(__n);
169 
170 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a06c506308856b684737d24944a93a42e">__parallel_sort_qs_conquer</link>(
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;__begin&#32;+&#32;__n,&#32;__comp,&#32;__num_threads);
172 &#32;&#32;&#32;&#32;}
173 
174 }&#32;<emphasis role="comment">//namespace&#32;__gnu_parallel</emphasis>
175 
176 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_GLIBCXX_PARALLEL_QUICKSORT_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
