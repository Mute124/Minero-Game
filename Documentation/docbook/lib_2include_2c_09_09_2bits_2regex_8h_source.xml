<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2regex_8h_source" xml:lang="en-US">
<title>regex.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/regex.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;class&#32;template&#32;regex&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2010-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
31 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
32 {
33 _GLIBCXX_BEGIN_NAMESPACE_VERSION
34 _GLIBCXX_BEGIN_NAMESPACE_CXX11
35 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
36 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>basic_regex;
37 
38 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
39 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>match_results;
40 
41 _GLIBCXX_END_NAMESPACE_CXX11
42 
43 <emphasis role="keyword">namespace&#32;</emphasis>__detail
44 {
45 &#32;&#32;<emphasis role="keyword">enum&#32;class</emphasis>&#32;_RegexExecutorPolicy&#32;:&#32;<emphasis role="keywordtype">int</emphasis>&#32;{&#32;_S_auto,&#32;_S_alternate&#32;};
46 
47 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_CharT,&#32;<emphasis role="keyword">typename</emphasis>&#32;_TraitsT&gt;
49 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
50 &#32;&#32;&#32;&#32;__regex_algo_impl(_BiIter&#32;__s,&#32;_BiIter&#32;__e,
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;_BiIter,&#32;_Alloc&gt;&amp;&#32;&#32;&#32;&#32;&#32;&#32;__m,
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_CharT,&#32;_TraitsT&gt;&amp;&#32;__re,
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;&#32;&#32;&#32;&#32;__flags,
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_RegexExecutorPolicy&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__policy,
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__match_mode);
56 
57 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
58 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>_Executor;
59 
60 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_contiguous_iter&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a05db727ae5396f8d8518969cd59fff55">false_type</link>&#32;{&#32;};
62 
63 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_contiguous_iter&lt;_Tp*&gt;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
65 
66 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cont&gt;
67 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__is_contiguous_iter&lt;<link linkend="_namespace____gnu__cxx">__gnu_cxx</link>::__normal_iterator&lt;_Tp*,&#32;_Cont&gt;&gt;
68 &#32;&#32;&#32;&#32;:&#32;<link linkend="_namespace____gnu__pbds_1_1detail_1a6bd7131856cf31c3caa443a674400ab1">true_type</link>&#32;{&#32;};
69 }
70 
71 _GLIBCXX_BEGIN_NAMESPACE_CXX11
72 
88 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type&gt;
89 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>regex_traits
90 &#32;&#32;&#32;&#32;{
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
92 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ch_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
93 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_string&lt;char_type&gt;&#32;&#32;string_type;
94 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::locale&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;locale_type;
95 
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
97 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>_RegexMask
98 &#32;&#32;&#32;&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ctype_base::mask&#32;_BaseType;
100 &#32;&#32;&#32;&#32;&#32;&#32;_BaseType&#32;_M_base;
101 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_M_extended;
102 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_S_under&#32;=&#32;1&#32;&lt;&lt;&#32;0;
103 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;_S_valid_mask&#32;=&#32;0x1;
104 
105 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_RegexMask(_BaseType&#32;__base&#32;=&#32;0,
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__extended&#32;=&#32;0)
107 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_base(<link linkend="_namespace____gnu__debug_1a462d3f2cc5cb94a7cb98e035cd61b763">__base</link>),&#32;_M_extended(__extended)
108 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
109 
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_RegexMask
111 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1aabdf68ef3b7be9c9b37d01227fa55a36">operator&amp;</link>(_RegexMask&#32;__other)<emphasis role="keyword">&#32;const</emphasis>
112 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RegexMask(_M_base&#32;&amp;&#32;__other._M_base,
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_extended&#32;&amp;&#32;__other._M_extended);
115 &#32;&#32;&#32;&#32;&#32;&#32;}
116 
117 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_RegexMask
118 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_catch_1ab32a083e442cc09f736327d2e2865999">operator|</link>(_RegexMask&#32;__other)<emphasis role="keyword">&#32;const</emphasis>
119 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RegexMask(_M_base&#32;|&#32;__other._M_base,
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_extended&#32;|&#32;__other._M_extended);
122 &#32;&#32;&#32;&#32;&#32;&#32;}
123 
124 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_RegexMask
125 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1a0bb25372483459213269be733f871e18">operator^</link>(_RegexMask&#32;__other)<emphasis role="keyword">&#32;const</emphasis>
126 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RegexMask(_M_base&#32;^&#32;__other._M_base,
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_extended&#32;^&#32;__other._M_extended);
129 &#32;&#32;&#32;&#32;&#32;&#32;}
130 
131 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_RegexMask
132 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1afdc1f70af7c16826e06fb41664f0808b">operator~</link>()<emphasis role="keyword">&#32;const</emphasis>
133 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_RegexMask(~_M_base,&#32;~_M_extended);&#32;}
134 
135 &#32;&#32;&#32;&#32;&#32;&#32;_RegexMask&amp;
136 &#32;&#32;&#32;&#32;&#32;&#32;operator&amp;=(_RegexMask&#32;__other)
137 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;(*this)&#32;&amp;&#32;__other;&#32;}
138 
139 &#32;&#32;&#32;&#32;&#32;&#32;_RegexMask&amp;
140 &#32;&#32;&#32;&#32;&#32;&#32;operator|=(_RegexMask&#32;__other)
141 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;(*this)&#32;|&#32;__other;&#32;}
142 
143 &#32;&#32;&#32;&#32;&#32;&#32;_RegexMask&amp;
144 &#32;&#32;&#32;&#32;&#32;&#32;operator^=(_RegexMask&#32;__other)
145 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;(*this)&#32;^&#32;__other;&#32;}
146 
147 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
148 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(_RegexMask&#32;__other)<emphasis role="keyword">&#32;const</emphasis>
149 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(_M_extended&#32;&amp;&#32;_S_valid_mask)
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;==&#32;(__other._M_extended&#32;&amp;&#32;_S_valid_mask)
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;_M_base&#32;==&#32;__other._M_base;
153 &#32;&#32;&#32;&#32;&#32;&#32;}
154 
155 <emphasis role="preprocessor">#if&#32;__cpp_impl_three_way_comparison&#32;&lt;&#32;201907L</emphasis>
156 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
157 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(_RegexMask&#32;__other)<emphasis role="keyword">&#32;const</emphasis>
158 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!((*this)&#32;==&#32;__other);&#32;}
159 <emphasis role="preprocessor">#endif</emphasis>
160 &#32;&#32;&#32;&#32;};
161 
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
163 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_RegexMask&#32;char_class_type;
164 
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
169 &#32;&#32;&#32;&#32;&#32;&#32;regex_traits()&#32;{&#32;}
170 
181 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;std::size_t
182 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__p)
183 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type::traits_type::length(__p);&#32;}
184 
192 &#32;&#32;&#32;&#32;&#32;&#32;char_type
193 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__ext__matrix__transform_1ga67d8473d6b293d1bb2b4eaf249795cab">translate</link>(char_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
194 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__c;&#32;}
195 
205 &#32;&#32;&#32;&#32;&#32;&#32;char_type
206 &#32;&#32;&#32;&#32;&#32;&#32;translate_nocase(char_type&#32;__c)<emphasis role="keyword">&#32;const</emphasis>
207 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ctype&lt;char_type&gt;&#32;__ctype_type;
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__ctype_type&amp;&#32;__fctyp(use_facet&lt;__ctype_type&gt;(_M_locale));
210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fctyp.tolower(__c);
211 &#32;&#32;&#32;&#32;&#32;&#32;}
212 
233 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fwd_iter&gt;
234 &#32;&#32;&#32;&#32;string_type
235 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(_Fwd_iter&#32;__first,&#32;_Fwd_iter&#32;__last)<emphasis role="keyword">&#32;const</emphasis>
236 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
237 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::collate&lt;char_type&gt;&#32;__collate_type;
238 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__collate_type&amp;&#32;__fclt(use_facet&lt;__collate_type&gt;(_M_locale));
239 &#32;&#32;&#32;&#32;&#32;&#32;string_type&#32;__s(__first,&#32;__last);
240 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__fclt.transform(__s.data(),&#32;__s.data()&#32;+&#32;__s.size());
241 &#32;&#32;&#32;&#32;}
242 
257 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fwd_iter&gt;
258 &#32;&#32;&#32;&#32;string_type
259 &#32;&#32;&#32;&#32;transform_primary(_Fwd_iter&#32;__first,&#32;_Fwd_iter&#32;__last)<emphasis role="keyword">&#32;const</emphasis>
260 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
261 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;:&#32;this&#32;is&#32;not&#32;entirely&#32;correct.</emphasis>
262 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;function&#32;requires&#32;extra&#32;support&#32;from&#32;the&#32;platform.</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
264 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;http://gcc.gnu.org/ml/libstdc++/2013-09/msg00117.html&#32;and</emphasis>
265 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;http://www.open-std.org/Jtc1/sc22/wg21/docs/papers/2003/n1429.htm</emphasis>
266 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;for&#32;details.</emphasis>
267 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ctype&lt;char_type&gt;&#32;__ctype_type;
268 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__ctype_type&amp;&#32;__fctyp(use_facet&lt;__ctype_type&gt;(_M_locale));
269 &#32;&#32;&#32;&#32;&#32;&#32;_GLIBCXX_STD_C::vector&lt;char_type&gt;&#32;__s(__first,&#32;__last);
270 &#32;&#32;&#32;&#32;&#32;&#32;__fctyp.tolower(__s.data(),&#32;__s.data()&#32;+&#32;__s.size());
271 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_namespacestd_1a83797c5677d80005911de218c819adab">transform</link>(__s.data(),&#32;__s.data()&#32;+&#32;__s.size());
272 &#32;&#32;&#32;&#32;}
273 
285 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fwd_iter&gt;
286 &#32;&#32;&#32;&#32;string_type
287 &#32;&#32;&#32;&#32;lookup_collatename(_Fwd_iter&#32;__first,&#32;_Fwd_iter&#32;__last)&#32;<emphasis role="keyword">const</emphasis>;
288 
326 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Fwd_iter&gt;
327 &#32;&#32;&#32;&#32;char_class_type
328 &#32;&#32;&#32;&#32;lookup_classname(_Fwd_iter&#32;__first,&#32;_Fwd_iter&#32;__last,
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;__icase&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;<emphasis role="keyword">const</emphasis>;
330 
343 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
344 &#32;&#32;&#32;&#32;&#32;&#32;isctype(_Ch_type&#32;__c,&#32;char_class_type&#32;__f)&#32;<emphasis role="keyword">const</emphasis>;
345 
356 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
357 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classvalue">value</link>(_Ch_type&#32;__ch,&#32;<emphasis role="keywordtype">int</emphasis>&#32;__radix)&#32;<emphasis role="keyword">const</emphasis>;
358 
370 &#32;&#32;&#32;&#32;&#32;&#32;locale_type
371 &#32;&#32;&#32;&#32;&#32;&#32;imbue(locale_type&#32;__loc)
372 &#32;&#32;&#32;&#32;&#32;&#32;{
373 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_locale,&#32;__loc);
374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__loc;
375 &#32;&#32;&#32;&#32;&#32;&#32;}
376 
381 &#32;&#32;&#32;&#32;&#32;&#32;locale_type
382 &#32;&#32;&#32;&#32;&#32;&#32;getloc()<emphasis role="keyword">&#32;const</emphasis>
383 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_locale;&#32;}
384 
385 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
386 &#32;&#32;&#32;&#32;&#32;&#32;locale_type&#32;_M_locale;
387 &#32;&#32;&#32;&#32;};
388 
389 &#32;&#32;<emphasis role="comment">//&#32;[7.8]&#32;Class&#32;basic_regex</emphasis>
397 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&#32;=&#32;regex_traits&lt;_Ch_type&gt;&gt;
398 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>basic_regex
399 &#32;&#32;&#32;&#32;{
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
401 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(is_same&lt;_Ch_type,&#32;typename&#32;_Rx_traits::char_type&gt;::value,
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;regex&#32;traits&#32;class&#32;must&#32;have&#32;the&#32;same&#32;char_type&quot;</emphasis>);
403 
404 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;types:</emphasis>
405 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Ch_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
406 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Rx_traits&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type;
407 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::string_type&#32;&#32;&#32;string_type;
408 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_constants::syntax_option_type&#32;flag_type;
409 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::locale_type&#32;&#32;&#32;locale_type;
410 
416 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;icase&#32;=&#32;regex_constants::icase;
417 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;nosubs&#32;=&#32;regex_constants::nosubs;
418 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;optimize&#32;=&#32;regex_constants::optimize;
419 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;collate&#32;=&#32;regex_constants::collate;
420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;ECMAScript&#32;=&#32;regex_constants::ECMAScript;
421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;basic&#32;=&#32;regex_constants::basic;
422 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;extended&#32;=&#32;regex_constants::extended;
423 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;awk&#32;=&#32;regex_constants::awk;
424 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;grep&#32;=&#32;regex_constants::grep;
425 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;egrep&#32;=&#32;regex_constants::egrep;
426 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201703L&#32;||&#32;!defined&#32;__STRICT_ANSI__</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;flag_type&#32;multiline&#32;=&#32;regex_constants::multiline;
428 <emphasis role="preprocessor">#endif</emphasis>
430 
431 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[7.8.2]&#32;construct/copy/destroy</emphasis>
436 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex()&#32;noexcept
437 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_flags(ECMAScript),&#32;_M_loc(),&#32;_M_automaton(<emphasis role="keywordtype">nullptr</emphasis>)
438 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
439 
451 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
452 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__p,&#32;flag_type&#32;__f&#32;=&#32;ECMAScript)
453 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_compile(__p,&#32;__p&#32;+&#32;_Rx_traits::length(__p),&#32;__f);&#32;}
454 
467 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__p,&#32;std::size_t&#32;__len,
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag_type&#32;__f&#32;=&#32;ECMAScript)
469 &#32;&#32;&#32;&#32;&#32;&#32;{
470 &#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1a91cfe307287e81114000d301d59830e0">__glibcxx_requires_string_len</link>(__p,&#32;__len);
471 &#32;&#32;&#32;&#32;_M_compile(__p,&#32;__p&#32;+&#32;__len,&#32;__f);
472 &#32;&#32;&#32;&#32;&#32;&#32;}
473 
479 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex(<emphasis role="keyword">const</emphasis>&#32;basic_regex&amp;&#32;__rhs)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
480 
486 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex(basic_regex&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
487 
497 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
498 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
499 &#32;&#32;&#32;&#32;basic_regex(<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;_Ch_type,&#32;_Ch_traits,
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ch_alloc&gt;&amp;&#32;__s,
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag_type&#32;__f&#32;=&#32;ECMAScript)
502 &#32;&#32;&#32;&#32;{&#32;_M_compile(__s.data(),&#32;__s.data()&#32;+&#32;__s.size(),&#32;__f);&#32;}
503 
517 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_FwdIter&gt;
518 &#32;&#32;&#32;&#32;basic_regex(_FwdIter&#32;__first,&#32;_FwdIter&#32;__last,
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag_type&#32;__f&#32;=&#32;ECMAScript)
520 &#32;&#32;&#32;&#32;{&#32;this-&gt;assign(__first,&#32;__last,&#32;__f);&#32;}
521 
530 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex(initializer_list&lt;_Ch_type&gt;&#32;__l,&#32;flag_type&#32;__f&#32;=&#32;ECMAScript)
531 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_compile(__l.begin(),&#32;__l.end(),&#32;__f);&#32;}
532 
536 &#32;&#32;&#32;&#32;&#32;&#32;~basic_regex()
537 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
538 
542 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
543 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;basic_regex&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
544 
548 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
549 &#32;&#32;&#32;&#32;&#32;&#32;operator=(basic_regex&amp;&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
550 
558 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
559 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__p)
560 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__p);&#32;}
561 
570 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
571 &#32;&#32;&#32;&#32;&#32;&#32;operator=(initializer_list&lt;_Ch_type&gt;&#32;__l)
572 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__l);&#32;}
573 
580 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
581 &#32;&#32;&#32;&#32;basic_regex&amp;
582 &#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Ch_traits, _Alloc&gt;</link>&amp;&#32;__s)
583 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;assign(__s);&#32;}
584 
585 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[7.8.3]&#32;assign</emphasis>
591 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
592 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;basic_regex&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
593 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;__rhs;&#32;}
594 
600 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
601 &#32;&#32;&#32;&#32;&#32;&#32;assign(basic_regex&amp;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
602 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__rhs);&#32;}
603 
617 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
618 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__p,&#32;flag_type&#32;__flags&#32;=&#32;ECMAScript)
619 &#32;&#32;&#32;&#32;&#32;&#32;{
620 &#32;&#32;&#32;&#32;_M_compile(__p,&#32;__p&#32;+&#32;_Rx_traits::length(__p),&#32;__flags);
621 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
622 &#32;&#32;&#32;&#32;&#32;&#32;}
623 
637 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
638 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;3296.&#32;Inconsistent&#32;default&#32;argument&#32;for&#32;basic_regex&lt;&gt;::assign</emphasis>
639 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
640 &#32;&#32;&#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len,&#32;flag_type&#32;__flags&#32;=&#32;ECMAScript)
641 &#32;&#32;&#32;&#32;&#32;&#32;{
642 &#32;&#32;&#32;&#32;_M_compile(__p,&#32;__p&#32;+&#32;__len,&#32;__flags);
643 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
644 &#32;&#32;&#32;&#32;&#32;&#32;}
645 
657 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
658 &#32;&#32;&#32;&#32;basic_regex&amp;
659 &#32;&#32;&#32;&#32;assign(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Ch_traits, _Alloc&gt;</link>&amp;&#32;__s,
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag_type&#32;__flags&#32;=&#32;ECMAScript)
661 &#32;&#32;&#32;&#32;{
662 &#32;&#32;&#32;&#32;&#32;&#32;_M_compile(__s.data(),&#32;__s.data()&#32;+&#32;__s.size(),&#32;__flags);
663 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
664 &#32;&#32;&#32;&#32;}
665 
679 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_InputIterator&gt;
680 &#32;&#32;&#32;&#32;basic_regex&amp;
681 &#32;&#32;&#32;&#32;assign(_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,
682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag_type&#32;__flags&#32;=&#32;ECMAScript)
683 &#32;&#32;&#32;&#32;{
684 <emphasis role="preprocessor">#if&#32;__cpp_if_constexpr&#32;&gt;=&#32;201606L</emphasis>
685 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_ValT&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type;
686 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(__detail::__is_contiguous_iter&lt;_InputIterator&gt;::value
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;is_same_v&lt;_ValT,&#32;value_type&gt;)
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_lib_2include_2c_09_09_2debug_2debug_8h_1aae1d39211742988183a3967dad069af6">__glibcxx_requires_valid_range</link>(__first,&#32;__last);
690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_pointer_v&lt;_InputIterator&gt;)
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_compile(__first,&#32;__last,&#32;__flags);
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="comment">//&#32;__normal_iterator&lt;_T*,&#32;C&gt;</emphasis>
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_compile(__first.base(),&#32;__last.base(),&#32;__flags);
694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
695 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
696 <emphasis role="preprocessor">#endif</emphasis>
697 &#32;&#32;&#32;&#32;&#32;&#32;this-&gt;assign(string_type(__first,&#32;__last),&#32;__flags);
698 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
699 &#32;&#32;&#32;&#32;}
700 
712 &#32;&#32;&#32;&#32;&#32;&#32;basic_regex&amp;
713 &#32;&#32;&#32;&#32;&#32;&#32;assign(initializer_list&lt;_Ch_type&gt;&#32;__l,&#32;flag_type&#32;__flags&#32;=&#32;ECMAScript)
714 &#32;&#32;&#32;&#32;&#32;&#32;{
715 &#32;&#32;&#32;&#32;_M_compile(__l.begin(),&#32;__l.end(),&#32;__flags);
716 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
717 &#32;&#32;&#32;&#32;&#32;&#32;}
718 
719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[7.8.4]&#32;const&#32;operations</emphasis>
724 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>
725 &#32;&#32;&#32;&#32;&#32;&#32;mark_count()&#32;const&#32;noexcept
726 &#32;&#32;&#32;&#32;&#32;&#32;{
727 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_automaton)
728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_automaton-&gt;_M_sub_count()&#32;-&#32;1;
729 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
730 &#32;&#32;&#32;&#32;&#32;&#32;}
731 
736 &#32;&#32;&#32;&#32;&#32;&#32;flag_type
737 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1a3d4f56e54693280c6d9b1177c12c867d">flags</link>()&#32;const&#32;noexcept
738 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_flags;&#32;}
739 
740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[7.8.5]&#32;locale</emphasis>
746 &#32;&#32;&#32;&#32;&#32;&#32;locale_type
747 &#32;&#32;&#32;&#32;&#32;&#32;imbue(locale_type&#32;__loc)
748 &#32;&#32;&#32;&#32;&#32;&#32;{
749 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(__loc,&#32;_M_loc);
750 &#32;&#32;&#32;&#32;_M_automaton.reset();
751 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__loc;
752 &#32;&#32;&#32;&#32;&#32;&#32;}
753 
758 &#32;&#32;&#32;&#32;&#32;&#32;locale_type
759 &#32;&#32;&#32;&#32;&#32;&#32;getloc()&#32;const&#32;noexcept
760 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_loc;&#32;}
761 
762 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[7.8.6]&#32;swap</emphasis>
768 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
769 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(basic_regex&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
770 &#32;&#32;&#32;&#32;&#32;&#32;{
771 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_flags,&#32;__rhs._M_flags);
772 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_loc,&#32;__rhs._M_loc);
773 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>(_M_automaton,&#32;__rhs._M_automaton);
774 &#32;&#32;&#32;&#32;&#32;&#32;}
775 
776 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_DEBUG</emphasis>
777 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
778 &#32;&#32;&#32;&#32;&#32;&#32;_M_dot(std::ostream&amp;&#32;__ostr)
779 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_automaton-&gt;_M_dot(__ostr);&#32;}
780 <emphasis role="preprocessor">#endif</emphasis>
781 
782 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
783 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::shared_ptr&lt;const&#32;__detail::_NFA&lt;_Rx_traits&gt;&gt;&#32;_AutomatonPtr;
784 
785 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
786 &#32;&#32;&#32;&#32;&#32;&#32;_M_compile(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__first,&#32;<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__last,
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flag_type&#32;__f)
788 &#32;&#32;&#32;&#32;&#32;&#32;{
789 &#32;&#32;&#32;&#32;__detail::_Compiler&lt;_Rx_traits&gt;&#32;__c(__first,&#32;__last,&#32;_M_loc,&#32;__f);
790 &#32;&#32;&#32;&#32;_M_automaton&#32;=&#32;__c._M_get_nfa();
791 &#32;&#32;&#32;&#32;_M_flags&#32;=&#32;__f;
792 &#32;&#32;&#32;&#32;&#32;&#32;}
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rp&gt;
795 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
796 &#32;&#32;&#32;&#32;__detail::__regex_algo_impl(_Bp,&#32;_Bp,&#32;match_results&lt;_Bp,&#32;_Ap&gt;&amp;,
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Cp,&#32;_Rp&gt;&amp;,
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type,
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_RegexExecutorPolicy,&#32;<emphasis role="keywordtype">bool</emphasis>);
800 
801 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
802 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__detail::_Executor;
803 
804 &#32;&#32;&#32;&#32;&#32;&#32;flag_type&#32;&#32;&#32;&#32;&#32;_M_flags;
805 &#32;&#32;&#32;&#32;&#32;&#32;locale_type&#32;&#32;&#32;_M_loc;
806 &#32;&#32;&#32;&#32;&#32;&#32;_AutomatonPtr&#32;_M_automaton;
807 &#32;&#32;&#32;&#32;};
808 
809 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_inline_variables</emphasis>
810 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
811 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
812 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::icase;
813 
814 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
815 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
816 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::nosubs;
817 
818 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
819 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
820 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::optimize;
821 
822 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
823 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
824 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::collate;
825 
826 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
827 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
828 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::ECMAScript;
829 
830 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
831 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
832 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::basic;
833 
834 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
835 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
836 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::extended;
837 
838 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
839 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
840 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::awk;
841 
842 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
843 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
844 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::grep;
845 
846 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tr&gt;
847 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;regex_constants::syntax_option_type
848 &#32;&#32;&#32;&#32;basic_regex&lt;_Ch,&#32;_Tr&gt;::egrep;
849 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!&#32;C++17</emphasis>
850 
851 <emphasis role="preprocessor">#if&#32;__cpp_deduction_guides&#32;&gt;=&#32;201606</emphasis>
852 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_ForwardIterator&gt;
853 &#32;&#32;&#32;&#32;basic_regex(_ForwardIterator,&#32;_ForwardIterator,
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::syntax_option_type&#32;=&#32;{})
855 &#32;&#32;&#32;&#32;&#32;&#32;-&gt;&#32;basic_regex&lt;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&gt;;
856 <emphasis role="preprocessor">#endif</emphasis>
857 
859 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_regex&lt;char&gt;&#32;&#32;&#32;&#32;regex;
860 
861 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
863 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_regex&lt;wchar_t&gt;&#32;wregex;
864 <emphasis role="preprocessor">#endif</emphasis>
865 
866 
867 &#32;&#32;<emphasis role="comment">//&#32;[7.8.6]&#32;basic_regex&#32;swap</emphasis>
874 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
875 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
876 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__lhs,
877 &#32;&#32;&#32;&#32;&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
878 &#32;&#32;&#32;&#32;{&#32;__lhs.swap(__rhs);&#32;}
879 
880 
881 &#32;&#32;<emphasis role="comment">//&#32;C++11&#32;28.9&#32;[re.submatch]&#32;Class&#32;template&#32;sub_match</emphasis>
894 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
895 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>sub_match&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;std::pair&lt;_BiIter,&#32;_BiIter&gt;
896 &#32;&#32;&#32;&#32;{
897 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;iterator_traits&lt;_BiIter&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_traits;
898 &#32;&#32;&#32;&#32;
899 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
900 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
901 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits::difference_type&#32;&#32;&#32;difference_type;
902 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_BiIter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
903 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;value_type&gt;</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_type;
904 
905 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matched;
906 
907 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;sub_match()&#32;noexcept&#32;:&#32;matched()&#32;{&#32;}
908 
910 &#32;&#32;&#32;&#32;&#32;&#32;difference_type
911 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>()&#32;const&#32;noexcept
912 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;matched&#32;?&#32;std::distance(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;this-&gt;second)&#32;:&#32;0;&#32;}
913 
924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">operator</emphasis>&#32;string_type()<emphasis role="keyword">&#32;const</emphasis>
925 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;str();&#32;}
926 
932 &#32;&#32;&#32;&#32;&#32;&#32;string_type
933 &#32;&#32;&#32;&#32;&#32;&#32;str()<emphasis role="keyword">&#32;const</emphasis>
934 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
935 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;matched
936 &#32;&#32;&#32;&#32;&#32;&#32;?&#32;string_type(this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>,&#32;this-&gt;second)
937 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;string_type();
938 &#32;&#32;&#32;&#32;&#32;&#32;}
939 
949 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
950 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;sub_match&amp;&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
951 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_str().compare(__s._M_str());&#32;}
952 
963 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
964 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
965 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_str().compare(__s);&#32;}
966 
967 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
968 &#32;&#32;&#32;&#32;&#32;&#32;compare(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s)<emphasis role="keyword">&#32;const</emphasis>
969 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_str().compare(__s);&#32;}
971 
973 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Non-standard,&#32;used&#32;by&#32;comparison&#32;operators</emphasis>
974 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
975 &#32;&#32;&#32;&#32;&#32;&#32;_M_compare(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)<emphasis role="keyword">&#32;const</emphasis>
976 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;_M_str().compare({__s,&#32;__n});&#32;}
978 
979 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simplified&#32;basic_string_view&#32;for&#32;C++11</emphasis>
981 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__string_view
982 &#32;&#32;&#32;&#32;&#32;&#32;{
983 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>traits_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;string_type::traits_type;
984 
985 &#32;&#32;&#32;&#32;__string_view()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
986 
987 &#32;&#32;&#32;&#32;__string_view(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n)&#32;noexcept
988 &#32;&#32;&#32;&#32;:&#32;_M_data(__s),&#32;_M_len(__n)&#32;{&#32;}
989 
990 &#32;&#32;&#32;&#32;__string_view(<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;__s)&#32;noexcept
991 &#32;&#32;&#32;&#32;:&#32;_M_data(__s),&#32;_M_len(traits_type::length(__s))&#32;{&#32;}
992 
993 &#32;&#32;&#32;&#32;__string_view(<emphasis role="keyword">const</emphasis>&#32;string_type&amp;&#32;__s)&#32;noexcept
994 &#32;&#32;&#32;&#32;:&#32;_M_data(__s.data()),&#32;_M_len(__s.length())&#32;{&#32;}
995 
996 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>
997 &#32;&#32;&#32;&#32;compare(__string_view&#32;__s)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
998 &#32;&#32;&#32;&#32;{
999 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__n&#32;=&#32;std::min(_M_len,&#32;__s._M_len))
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;__ret&#32;=&#32;traits_type::compare(_M_data,&#32;__s._M_data,&#32;__n))
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ret;
1002 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__limits&#32;=&#32;__gnu_cxx::__int_traits&lt;int&gt;;
1003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;difference_type&#32;__diff&#32;=&#32;_M_len&#32;-&#32;__s._M_len;
1004 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__diff&#32;&gt;&#32;__limits::__max)
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__limits::__max;
1006 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__diff&#32;&lt;&#32;__limits::__min)
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__limits::__min;
1008 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(__diff);
1009 &#32;&#32;&#32;&#32;}
1010 
1011 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1012 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;_M_data&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
1013 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;_M_len&#32;=&#32;0;
1014 &#32;&#32;&#32;&#32;&#32;&#32;};
1015 
1016 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;__string_view&#32;over&#32;the&#32;iterator&#32;range.</emphasis>
1017 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&#32;=&#32;_BiIter&gt;
1018 &#32;&#32;&#32;&#32;__enable_if_t&lt;__detail::__is_contiguous_iter&lt;_Iter&gt;::value,
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__string_view&gt;
1020 &#32;&#32;&#32;&#32;_M_str()&#32;const&#32;noexcept
1021 &#32;&#32;&#32;&#32;{
1022 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this-&gt;matched)
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;__len&#32;=&#32;this-&gt;second&#32;-&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>)
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;std::__addressof(*this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>),&#32;__len&#32;};
1025 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
1026 &#32;&#32;&#32;&#32;}
1027 
1028 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;temporary&#32;string&#32;that&#32;can&#32;be&#32;converted&#32;to&#32;__string_view.</emphasis>
1029 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Iter&#32;=&#32;_BiIter&gt;
1030 &#32;&#32;&#32;&#32;__enable_if_t&lt;!__detail::__is_contiguous_iter&lt;_Iter&gt;::value,
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_type&gt;
1032 &#32;&#32;&#32;&#32;_M_str()<emphasis role="keyword">&#32;const</emphasis>
1033 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;str();&#32;}
1034 &#32;&#32;&#32;&#32;};
1035 
1036 
1038 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;sub_match&lt;const&#32;char*&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;csub_match;
1039 
1041 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;sub_match&lt;string::const_iterator&gt;&#32;&#32;ssub_match;
1042 
1043 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
1045 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;sub_match&lt;const&#32;wchar_t*&gt;&#32;&#32;&#32;wcsub_match;
1046 
1048 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;sub_match&lt;wstring::const_iterator&gt;&#32;wssub_match;
1049 <emphasis role="preprocessor">#endif</emphasis>
1050 
1051 &#32;&#32;<emphasis role="comment">//&#32;[7.9.2]&#32;sub_match&#32;non-member&#32;operators</emphasis>
1052 
1054 
1061 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
1062 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1063 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__rhs)
1064 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;==&#32;0;&#32;}
1065 
1066 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1074 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
1075 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1076 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__lhs,
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__rhs)
1078 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__detail::__is_contiguous_iter&lt;_BiIter&gt;::value)
1079 &#32;&#32;&#32;&#32;{
1080 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tr&#32;=&#32;char_traits&lt;typename&#32;iterator_traits&lt;_BiIter&gt;::value_type&gt;;
1081 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__char_traits_cmp_cat&lt;_Tr&gt;(__lhs.compare(__rhs));
1082 &#32;&#32;&#32;&#32;}
1083 <emphasis role="preprocessor">#else</emphasis>
1090 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
1091 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1092 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__rhs)
1093 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;!=&#32;0;&#32;}
1094 
1101 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
1102 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1103 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__rhs)
1104 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;&#32;0;&#32;}
1105 
1112 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
1113 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1114 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__rhs)
1115 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;=&#32;0;&#32;}
1116 
1123 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
1124 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1125 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__rhs)
1126 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&gt;=&#32;0;&#32;}
1127 
1134 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_BiIter&gt;
1135 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1136 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__lhs,&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_BiIter&gt;&amp;&#32;__rhs)
1137 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&gt;&#32;0;&#32;}
1138 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1139 
1141 
1142 &#32;&#32;<emphasis role="comment">//&#32;Alias&#32;for&#32;a&#32;basic_string&#32;that&#32;can&#32;be&#32;compared&#32;to&#32;a&#32;sub_match.</emphasis>
1143 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1144 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__sub_match_string&#32;=&#32;<link linkend="_classbasic__string">basic_string</link>&lt;
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type,
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ch_traits,&#32;_Ch_alloc&gt;;
1148 
1149 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_lib_three_way_comparison</emphasis>
1157 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1158 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1159 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__lhs,
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1161 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs._M_compare(__lhs.data(),&#32;__lhs.size())&#32;==&#32;0;&#32;}
1162 
1170 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1171 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1172 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__lhs,
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1174 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1175 
1182 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1183 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1184 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__lhs,
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1186 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs._M_compare(__lhs.data(),&#32;__lhs.size())&#32;&gt;&#32;0;&#32;}
1187 
1194 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1195 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1196 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__lhs,
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1198 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
1199 
1206 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1207 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1208 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__lhs,
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1210 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
1211 
1218 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1219 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1220 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__lhs,
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1222 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
1223 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1224 
1232 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1233 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1234 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__rhs)
1236 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_compare(__rhs.data(),&#32;__rhs.size())&#32;==&#32;0;&#32;}
1237 
1238 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1246 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
1247 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1248 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Alloc&gt;&amp;&#32;__rhs)
1250 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__detail::__is_contiguous_iter&lt;_Bi_iter&gt;::value)
1251 &#32;&#32;&#32;&#32;{
1252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__char_traits_cmp_cat&lt;_Ch_traits&gt;(
1253 &#32;&#32;&#32;&#32;&#32;&#32;__lhs._M_compare(__rhs.data(),&#32;__rhs.size()));
1254 &#32;&#32;&#32;&#32;}
1255 <emphasis role="preprocessor">#else</emphasis>
1263 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1264 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1265 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__rhs)
1267 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1268 
1275 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1276 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1277 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__rhs)
1279 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_compare(__rhs.data(),&#32;__rhs.size())&#32;&lt;&#32;0;&#32;}
1280 
1287 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1288 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1289 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__rhs)
1291 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
1292 
1299 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1300 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1301 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__rhs)
1303 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
1304 
1311 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc&gt;
1312 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1313 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__sub_match_string&lt;_Bi_iter,&#32;_Ch_traits,&#32;_Ch_alloc&gt;&amp;&#32;__rhs)
1315 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
1316 
1324 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1325 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1326 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__lhs,
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1328 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.compare(__lhs)&#32;==&#32;0;&#32;}
1329 
1337 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1338 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1339 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__lhs,
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1341 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1342 
1349 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1350 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1351 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__lhs,
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1353 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs.compare(__lhs)&#32;&gt;&#32;0;&#32;}
1354 
1361 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1362 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1363 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__lhs,
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1365 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
1366 
1373 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1374 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1375 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__lhs,
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1377 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
1378 
1385 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1386 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1387 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__lhs,
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1389 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
1390 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1391 
1399 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1400 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1401 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__rhs)
1403 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;==&#32;0;&#32;}
1404 
1405 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1414 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1415 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1416 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__rhs)
1418 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__detail::__is_contiguous_iter&lt;_Bi_iter&gt;::value)
1419 &#32;&#32;&#32;&#32;{
1420 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tr&#32;=&#32;char_traits&lt;typename&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&gt;;
1421 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__char_traits_cmp_cat&lt;_Tr&gt;(__lhs.compare(__rhs));
1422 &#32;&#32;&#32;&#32;}
1423 <emphasis role="preprocessor">#else</emphasis>
1431 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1432 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1433 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__rhs)
1435 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1436 
1443 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1444 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1445 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__rhs)
1447 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs.compare(__rhs)&#32;&lt;&#32;0;&#32;}
1448 
1455 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1456 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1457 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__rhs)
1459 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
1460 
1467 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1468 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1469 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__rhs)
1471 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
1472 
1479 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1480 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1481 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>*&#32;__rhs)
1483 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
1484 
1492 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1493 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1494 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__lhs,
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1496 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs._M_compare(std::__addressof(__lhs),&#32;1)&#32;==&#32;0;&#32;}
1497 
1505 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1506 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1507 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__lhs,
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1509 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1510 
1518 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1519 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1520 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__lhs,
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1522 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs._M_compare(std::__addressof(__lhs),&#32;1)&#32;&gt;&#32;0;&#32;}
1523 
1531 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1532 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1533 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__lhs,
1534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1535 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
1536 
1544 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1545 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1546 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__lhs,
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1548 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
1549 
1557 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1558 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1559 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__lhs,
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__rhs)
1561 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
1562 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1563 
1571 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1572 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1573 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)
1575 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_compare(std::__addressof(__rhs),&#32;1)&#32;==&#32;0;&#32;}
1576 
1577 <emphasis role="preprocessor">#if&#32;__cpp_lib_three_way_comparison</emphasis>
1587 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1588 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
1589 &#32;&#32;&#32;&#32;operator&lt;=&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)
1591 &#32;&#32;&#32;&#32;<emphasis role="keyword">noexcept</emphasis>(__detail::__is_contiguous_iter&lt;_Bi_iter&gt;::value)
1592 &#32;&#32;&#32;&#32;{
1593 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>_Tr&#32;=&#32;char_traits&lt;typename&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&gt;;
1594 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__char_traits_cmp_cat&lt;_Tr&gt;(
1595 &#32;&#32;&#32;&#32;&#32;&#32;__lhs._M_compare(std::__addressof(__rhs),&#32;1));
1596 &#32;&#32;&#32;&#32;}
1597 <emphasis role="preprocessor">#else</emphasis>
1605 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1606 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1607 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)
1609 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;==&#32;__rhs);&#32;}
1610 
1618 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1619 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1620 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0">operator&lt;</link>(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)
1622 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__lhs._M_compare(std::__addressof(__rhs),&#32;1)&#32;&lt;&#32;0;&#32;}
1623 
1631 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1632 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1633 &#32;&#32;&#32;&#32;operator&gt;(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)
1635 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__rhs&#32;&lt;&#32;__lhs;&#32;}
1636 
1644 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1645 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1646 &#32;&#32;&#32;&#32;operator&gt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)
1648 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__lhs&#32;&lt;&#32;__rhs);&#32;}
1649 
1657 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1658 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
1659 &#32;&#32;&#32;&#32;operator&lt;=(<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__lhs,
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;__rhs)
1661 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__rhs&#32;&lt;&#32;__lhs);&#32;}
1662 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;three-way&#32;comparison</emphasis>
1663 
1672 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter&gt;
1673 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>
1674 &#32;&#32;&#32;&#32;basic_ostream&lt;_Ch_type,&#32;_Ch_traits&gt;&amp;
1675 &#32;&#32;&#32;&#32;<link linkend="_forward__declarations_8h_1ade7e3bc03b39cb3b5684a4c302832e3c">operator&lt;&lt;</link>(basic_ostream&lt;_Ch_type,&#32;_Ch_traits&gt;&amp;&#32;__os,
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&amp;&#32;__m)
1677 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;__os&#32;&lt;&lt;&#32;__m.str();&#32;}
1678 
1680 
1681 &#32;&#32;<emphasis role="comment">//&#32;[7.10]&#32;Class&#32;template&#32;match_results</emphasis>
1682 
1703 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&#32;=&#32;allocator&lt;sub_match&lt;_Bi_iter&gt;&#32;&gt;&#32;&gt;
1705 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>match_results
1706 &#32;&#32;&#32;&#32;:&#32;<emphasis role="keyword">private</emphasis>&#32;std::vector&lt;sub_match&lt;_Bi_iter&gt;,&#32;_Alloc&gt;
1707 &#32;&#32;&#32;&#32;{
1708 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1709 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
1710 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;The&#32;vector&#32;base&#32;is&#32;empty&#32;if&#32;this&#32;does&#32;not&#32;represent&#32;a&#32;match&#32;(!ready());</emphasis>
1711 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Otherwise&#32;if&#32;it&apos;s&#32;a&#32;match&#32;failure,&#32;it&#32;contains&#32;3&#32;elements:</emphasis>
1712 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[0]&#32;unmatched</emphasis>
1713 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[1]&#32;prefix</emphasis>
1714 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[2]&#32;suffix</emphasis>
1715 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;Otherwise&#32;it&#32;contains&#32;n+4&#32;elements&#32;where&#32;n&#32;is&#32;the&#32;number&#32;of&#32;marked</emphasis>
1716 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;sub-expressions:</emphasis>
1717 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[0]&#32;entire&#32;match</emphasis>
1718 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[1]&#32;1st&#32;marked&#32;subexpression</emphasis>
1719 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;...</emphasis>
1720 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[n]&#32;nth&#32;marked&#32;subexpression</emphasis>
1721 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[n+1]&#32;unmatched</emphasis>
1722 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[n+2]&#32;prefix</emphasis>
1723 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;[n+3]&#32;suffix</emphasis>
1724 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
1725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::vector&lt;sub_match&lt;_Bi_iter&gt;,&#32;_Alloc&gt;&#32;&#32;&#32;&#32;&#32;_Base_type;
1726 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;debug&#32;mode&#32;_Base_type&#32;is&#32;the&#32;debug&#32;vector,&#32;this&#32;is&#32;the&#32;unsafe&#32;one:</emphasis>
1727 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_GLIBCXX_STD_C::vector&lt;sub_match&lt;_Bi_iter&gt;,&#32;_Alloc&gt;&#32;_Unchecked;
1728 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::iterator_traits&lt;_Bi_iter&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__iter_traits;
1729 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_constants::match_flag_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_flag_type;
1730 
1731 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1736 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
1737 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;const_reference;
1738 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
1739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;_Base_type::const_iterator&#32;&#32;&#32;&#32;&#32;&#32;const_iterator;
1740 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;const_iterator&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;iterator;
1741 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits::difference_type&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
1742 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_traits&lt;_Alloc&gt;::size_type&#32;size_type;
1743 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Alloc&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type;
1744 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;__iter_traits::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_type;
1745 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_string&lt;char_type&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;string_type;
1747 
1748 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1753 
1758 &#32;&#32;&#32;&#32;&#32;&#32;match_results()&#32;:&#32;match_results(_Alloc())&#32;{&#32;}
1759 
1764 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
1765 &#32;&#32;&#32;&#32;&#32;&#32;match_results(<emphasis role="keyword">const</emphasis>&#32;_Alloc&amp;&#32;__a)&#32;noexcept
1766 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_Base_type(__a)
1767 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
1768 
1772 &#32;&#32;&#32;&#32;&#32;&#32;match_results(<emphasis role="keyword">const</emphasis>&#32;match_results&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
1773 
1777 &#32;&#32;&#32;&#32;&#32;&#32;match_results(match_results&amp;&amp;)&#32;noexcept&#32;=&#32;default;
1778 
1782 &#32;&#32;&#32;&#32;&#32;&#32;match_results&amp;
1783 &#32;&#32;&#32;&#32;&#32;&#32;operator=(const&#32;match_results&amp;)&#32;=&#32;default;
1784 
1788 &#32;&#32;&#32;&#32;&#32;&#32;match_results&amp;
1789 &#32;&#32;&#32;&#32;&#32;&#32;operator=(match_results&amp;&amp;)&#32;=&#32;default;
1790 
1794 &#32;&#32;&#32;&#32;&#32;&#32;~match_results()&#32;=&#32;default;
1795 
1797 
1798 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;28.10.2,&#32;state:</emphasis>
1804 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ready()&#32;const&#32;noexcept&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!_Unchecked::empty();&#32;}
1805 
1810 
1820 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1821 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()&#32;const&#32;noexcept
1822 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::empty()&#32;?&#32;0&#32;:&#32;_Unchecked::size()&#32;-&#32;3;&#32;}
1823 
1824 &#32;&#32;&#32;&#32;&#32;&#32;size_type
1825 &#32;&#32;&#32;&#32;&#32;&#32;max_size()&#32;const&#32;noexcept
1826 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::max_size()&#32;-&#32;3;&#32;}
1827 
1833 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a56bc959ca1311889bcd1c5abb178ab59">_GLIBCXX_NODISCARD</link>&#32;<emphasis role="keywordtype">bool</emphasis>
1834 &#32;&#32;&#32;&#32;&#32;&#32;empty()&#32;const&#32;noexcept
1835 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::size()&#32;&lt;=&#32;3;&#32;}
1836 
1838 
1843 
1852 &#32;&#32;&#32;&#32;&#32;&#32;difference_type
1853 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacelength">length</link>(size_type&#32;__sub&#32;=&#32;0)<emphasis role="keyword">&#32;const</emphasis>
1854 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>)[__sub].length();&#32;}
1855 
1867 &#32;&#32;&#32;&#32;&#32;&#32;difference_type
1868 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1a76777b356ab2a080225682528119c4fe">position</link>(size_type&#32;__sub&#32;=&#32;0)<emphasis role="keyword">&#32;const</emphasis>
1869 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::distance(_M_begin,&#32;(*<emphasis role="keyword">this</emphasis>)[__sub].<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1ada771a798be00a696d20928c9a3371e7">first</link>);&#32;}
1870 
1880 &#32;&#32;&#32;&#32;&#32;&#32;string_type
1881 &#32;&#32;&#32;&#32;&#32;&#32;str(size_type&#32;__sub&#32;=&#32;0)<emphasis role="keyword">&#32;const</emphasis>
1882 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;string_type((*<emphasis role="keyword">this</emphasis>)[__sub]);&#32;}
1883 
1895 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1896 &#32;&#32;&#32;&#32;&#32;&#32;operator[](size_type&#32;__sub)<emphasis role="keyword">&#32;const</emphasis>
1897 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1898 &#32;&#32;&#32;&#32;__glibcxx_assert(&#32;ready()&#32;);
1899 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__sub&#32;&lt;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>()
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;_Unchecked::operator[](__sub)
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_unmatched_sub();
1902 &#32;&#32;&#32;&#32;&#32;&#32;}
1903 
1912 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1913 &#32;&#32;&#32;&#32;&#32;&#32;prefix()<emphasis role="keyword">&#32;const</emphasis>
1914 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1915 &#32;&#32;&#32;&#32;__glibcxx_assert(&#32;ready()&#32;);
1916 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!empty()&#32;?&#32;_M_prefix()&#32;:&#32;_M_unmatched_sub();
1917 &#32;&#32;&#32;&#32;&#32;&#32;}
1918 
1927 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
1928 &#32;&#32;&#32;&#32;&#32;&#32;suffix()<emphasis role="keyword">&#32;const</emphasis>
1929 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
1930 &#32;&#32;&#32;&#32;__glibcxx_assert(&#32;ready()&#32;);
1931 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!empty()&#32;?&#32;_M_suffix()&#32;:&#32;_M_unmatched_sub();
1932 &#32;&#32;&#32;&#32;&#32;&#32;}
1933 
1937 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1938 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>()&#32;const&#32;noexcept
1939 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::begin();&#32;}
1940 
1944 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1945 &#32;&#32;&#32;&#32;&#32;&#32;cbegin()&#32;const&#32;noexcept
1946 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="_group__gtx__range_1gaa752bdfcbfda8d0593318c4bf8a7dc6e">begin</link>();&#32;}
1947 
1951 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1952 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>()&#32;const&#32;noexcept
1953 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::end()&#32;-&#32;(_Base_type::empty()&#32;?&#32;0&#32;:&#32;3);&#32;}
1954 
1958 &#32;&#32;&#32;&#32;&#32;&#32;const_iterator
1959 &#32;&#32;&#32;&#32;&#32;&#32;cend()&#32;const&#32;noexcept
1960 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;this-&gt;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a432111147038972f06e049e18a837002">end</link>();&#32;}
1961 
1963 
1973 
1977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Out_iter&gt;
1978 &#32;&#32;&#32;&#32;_Out_iter
1979 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(_Out_iter&#32;__out,&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__fmt_first,
1980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__fmt_last,
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_flag_type&#32;__flags&#32;=&#32;regex_constants::format_default)&#32;<emphasis role="keyword">const</emphasis>;
1982 
1986 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Out_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_St,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sa&gt;
1987 &#32;&#32;&#32;&#32;_Out_iter
1988 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(_Out_iter&#32;__out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char_type, _St, _Sa&gt;</link>&amp;&#32;__fmt,
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_flag_type&#32;__flags&#32;=&#32;regex_constants::format_default)<emphasis role="keyword">&#32;const</emphasis>
1990 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
1991 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(__out,&#32;__fmt.data(),&#32;__fmt.data()&#32;+&#32;__fmt.size(),
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__flags);
1993 &#32;&#32;&#32;&#32;}
1994 
1998 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_St,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sa&gt;
1999 &#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;char_type, _St, _Sa&gt;</link>
2000 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;char_type, _St, _Sa&gt;</link>&amp;&#32;__fmt,
2001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_flag_type&#32;__flags&#32;=&#32;regex_constants::format_default)<emphasis role="keyword">&#32;const</emphasis>
2002 <emphasis role="keyword">&#32;&#32;&#32;&#32;</emphasis>{
2003 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;char_type, _St, _Sa&gt;</link>&#32;__result;
2004 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(std::back_inserter(__result),&#32;__fmt,&#32;__flags);
2005 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2006 &#32;&#32;&#32;&#32;}
2007 
2011 &#32;&#32;&#32;&#32;&#32;&#32;string_type
2012 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(<emphasis role="keyword">const</emphasis>&#32;char_type*&#32;__fmt,
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_flag_type&#32;__flags&#32;=&#32;regex_constants::format_default)<emphasis role="keyword">&#32;const</emphasis>
2014 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2015 &#32;&#32;&#32;&#32;string_type&#32;__result;
2016 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_g_l_e_s2_2gl2ext_8h_1a3f8f226b5004bbc9a172e2bbf28ed102">format</link>(std::back_inserter(__result),
2017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fmt,
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fmt&#32;+&#32;char_traits&lt;char_type&gt;::length(__fmt),
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__flags);
2020 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2021 &#32;&#32;&#32;&#32;&#32;&#32;}
2022 
2024 
2029 
2033 &#32;&#32;&#32;&#32;&#32;&#32;allocator_type
2034 &#32;&#32;&#32;&#32;&#32;&#32;get_allocator()&#32;const&#32;noexcept
2035 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Base_type::get_allocator();&#32;}
2036 
2038 
2043 
2047 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2048 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(match_results&amp;&#32;__that)&#32;<emphasis role="keyword">noexcept</emphasis>
2049 &#32;&#32;&#32;&#32;&#32;&#32;{
2050 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">std::swap</link>;
2051 &#32;&#32;&#32;&#32;_Base_type::swap(__that);
2052 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(_M_begin,&#32;__that._M_begin);
2053 &#32;&#32;&#32;&#32;&#32;&#32;}
2055 
2056 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2057 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
2058 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>regex_iterator;
2059 
2061 
2062 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keywordtype">bool</emphasis>&gt;
2063 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>__detail::_Executor;
2064 
2065 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ap,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Cp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rp&gt;
2066 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2067 &#32;&#32;&#32;&#32;__detail::__regex_algo_impl(_Bp,&#32;_Bp,&#32;match_results&lt;_Bp,&#32;_Ap&gt;&amp;,
2068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Cp,&#32;_Rp&gt;&amp;,
2069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type,
2070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__detail::_RegexExecutorPolicy,&#32;<emphasis role="keywordtype">bool</emphasis>);
2071 
2072 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;contents&#32;to&#32;__size&#32;unmatched&#32;sub_match&#32;objects</emphasis>
2073 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(plus&#32;additional&#32;objects&#32;for&#32;prefix,&#32;suffix&#32;and&#32;unmatched&#32;sub).</emphasis>
2074 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2075 &#32;&#32;&#32;&#32;&#32;&#32;_M_resize(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;__size)
2076 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_Unchecked::assign(__size&#32;+&#32;3,&#32;sub_match&lt;_Bi_iter&gt;{});&#32;}
2077 
2078 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;state&#32;to&#32;a&#32;failed&#32;match&#32;for&#32;the&#32;given&#32;past-the-end&#32;iterator.</emphasis>
2079 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2080 &#32;&#32;&#32;&#32;&#32;&#32;_M_establish_failed_match(_Bi_iter&#32;__end)
2081 &#32;&#32;&#32;&#32;&#32;&#32;{
2082 &#32;&#32;&#32;&#32;sub_match&lt;_Bi_iter&gt;&#32;__sm;
2083 &#32;&#32;&#32;&#32;__sm.first&#32;=&#32;__sm.second&#32;=&#32;__end;
2084 &#32;&#32;&#32;&#32;_Unchecked::assign(3,&#32;__sm);
2085 &#32;&#32;&#32;&#32;&#32;&#32;}
2086 
2087 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
2088 &#32;&#32;&#32;&#32;&#32;&#32;_M_unmatched_sub()<emphasis role="keyword">&#32;const</emphasis>
2089 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::operator[](_Unchecked::size()&#32;-&#32;3);&#32;}
2090 
2091 &#32;&#32;&#32;&#32;&#32;&#32;sub_match&lt;_Bi_iter&gt;&amp;
2092 &#32;&#32;&#32;&#32;&#32;&#32;_M_unmatched_sub()
2093 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::operator[](_Unchecked::size()&#32;-&#32;3);&#32;}
2094 
2095 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
2096 &#32;&#32;&#32;&#32;&#32;&#32;_M_prefix()<emphasis role="keyword">&#32;const</emphasis>
2097 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::operator[](_Unchecked::size()&#32;-&#32;2);&#32;}
2098 
2099 &#32;&#32;&#32;&#32;&#32;&#32;sub_match&lt;_Bi_iter&gt;&amp;
2100 &#32;&#32;&#32;&#32;&#32;&#32;_M_prefix()
2101 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::operator[](_Unchecked::size()&#32;-&#32;2);&#32;}
2102 
2103 &#32;&#32;&#32;&#32;&#32;&#32;const_reference
2104 &#32;&#32;&#32;&#32;&#32;&#32;_M_suffix()<emphasis role="keyword">&#32;const</emphasis>
2105 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::operator[](_Unchecked::size()&#32;-&#32;1);&#32;}
2106 
2107 &#32;&#32;&#32;&#32;&#32;&#32;sub_match&lt;_Bi_iter&gt;&amp;
2108 &#32;&#32;&#32;&#32;&#32;&#32;_M_suffix()
2109 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_Unchecked::operator[](_Unchecked::size()&#32;-&#32;1);&#32;}
2110 
2111 &#32;&#32;&#32;&#32;&#32;&#32;_Bi_iter&#32;_M_begin&#32;{};
2113 &#32;&#32;&#32;&#32;};
2114 
2115 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;match_results&lt;const&#32;char*&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cmatch;
2116 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;match_results&lt;string::const_iterator&gt;&#32;&#32;smatch;
2117 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
2118 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;match_results&lt;const&#32;wchar_t*&gt;&#32;&#32;&#32;&#32;&#32;&#32;wcmatch;
2119 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;match_results&lt;wstring::const_iterator&gt;&#32;wsmatch;
2120 <emphasis role="preprocessor">#endif</emphasis>
2121 
2122 &#32;&#32;<emphasis role="comment">//&#32;match_results&#32;comparisons</emphasis>
2123 
2129 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2130 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2131 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;__m1,
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)
2133 &#32;&#32;&#32;&#32;{
2134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m1.ready()&#32;!=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>.ready())
2135 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2136 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!__m1.ready())&#32;&#32;<emphasis role="comment">//&#32;both&#32;are&#32;not&#32;ready</emphasis>
2137 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2138 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m1.empty()&#32;!=&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>.empty())
2139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2140 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__m1.empty())&#32;&#32;&#32;<emphasis role="comment">//&#32;both&#32;are&#32;empty</emphasis>
2141 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2142 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__m1.prefix()&#32;==&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>.prefix()
2143 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__m1.size()&#32;==&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>.size()
2144 &#32;&#32;&#32;&#32;&amp;&amp;&#32;<link linkend="_namespacestd_1a94ada91841cca21a2327b0235f9a82cd">std::equal</link>(__m1.begin(),&#32;__m1.end(),&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>.begin())
2145 &#32;&#32;&#32;&#32;&amp;&amp;&#32;__m1.suffix()&#32;==&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>.suffix();
2146 &#32;&#32;&#32;&#32;}
2147 
2148 <emphasis role="preprocessor">#if&#32;!&#32;__cpp_lib_three_way_comparison</emphasis>
2154 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc&gt;
2155 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2156 &#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;__m1,
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>)
2158 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(__m1&#32;==&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1aa998860df3b1c89b07030695f92ff398">__m2</link>);&#32;}
2159 <emphasis role="preprocessor">#endif</emphasis>
2160 
2161 &#32;&#32;<emphasis role="comment">//&#32;[7.10.6]&#32;match_results&#32;swap</emphasis>
2169 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc&gt;
2170 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>
2171 &#32;&#32;&#32;&#32;<link linkend="_namespacestd_1a3ece115a1c8ed9020a20f1d0b70efda8">swap</link>(match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;__lhs,
2172 &#32;&#32;&#32;&#32;&#32;match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;__rhs)&#32;<emphasis role="keyword">noexcept</emphasis>
2173 &#32;&#32;&#32;&#32;{&#32;__lhs.swap(__rhs);&#32;}
2174 
2175 _GLIBCXX_END_NAMESPACE_CXX11
2176 
2177 &#32;&#32;<emphasis role="comment">//&#32;[28.11.2]&#32;Function&#32;template&#32;regex_match</emphasis>
2181 
2182 
2198 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2200 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2201 &#32;&#32;&#32;&#32;regex_match(_Bi_iter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s,
2202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Bi_iter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__e,
2203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;&#32;&#32;&#32;&#32;__m,
2204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;&#32;&#32;&#32;&#32;__flags
2206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2207 &#32;&#32;&#32;&#32;{
2208 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__regex_algo_impl(__s,&#32;__e,&#32;__m,&#32;__re,&#32;__flags,
2209 &#32;&#32;&#32;&#32;__detail::_RegexExecutorPolicy::_S_auto,&#32;<emphasis role="keyword">true</emphasis>);
2210 &#32;&#32;&#32;&#32;}
2211 
2226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2227 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2228 &#32;&#32;&#32;&#32;regex_match(_Bi_iter&#32;__first,&#32;_Bi_iter&#32;__last,
2229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2232 &#32;&#32;&#32;&#32;{
2233 &#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;_Bi_iter&gt;&#32;__what;
2234 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_match(__first,&#32;__last,&#32;__what,&#32;__re,&#32;__flags);
2235 &#32;&#32;&#32;&#32;}
2236 
2251 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2252 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2253 &#32;&#32;&#32;&#32;regex_match(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__s,
2254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;const&#32;_Ch_type*,&#32;_Alloc&gt;&amp;&#32;__m,
2255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__f
2257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2258 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_match(__s,&#32;__s&#32;+&#32;_Rx_traits::length(__s),&#32;__m,&#32;__re,&#32;__f);&#32;}
2259 
2274 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc,
2275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2276 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2277 &#32;&#32;&#32;&#32;regex_match(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Ch_traits, _Ch_alloc&gt;</link>&amp;&#32;__s,
2278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&lt;_Ch_type,
2279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ch_traits,&#32;_Ch_alloc&gt;::const_iterator,&#32;_Alloc&gt;&amp;&#32;__m,
2280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2283 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_match(__s.begin(),&#32;__s.end(),&#32;__m,&#32;__re,&#32;__flags);&#32;}
2284 
2285 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
2286 &#32;&#32;<emphasis role="comment">//&#32;2329.&#32;regex_match()&#32;with&#32;match_results&#32;should&#32;forbid&#32;temporary&#32;strings</emphasis>
2288 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc,
2289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2290 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2291 &#32;&#32;&#32;&#32;regex_match(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Ch_traits, _Ch_alloc&gt;</link>&amp;&amp;,
2292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&lt;_Ch_type,
2293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ch_traits,&#32;_Ch_alloc&gt;::const_iterator,&#32;_Alloc&gt;&amp;,
2294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;,
2295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type
2296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2297 
2311 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">class</emphasis>&#32;_Rx_traits&gt;
2312 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2313 &#32;&#32;&#32;&#32;regex_match(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__s,
2314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__f
2316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2317 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_match(__s,&#32;__s&#32;+&#32;_Rx_traits::length(__s),&#32;__re,&#32;__f);&#32;}
2318 
2332 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Str_allocator,
2333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2334 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2335 &#32;&#32;&#32;&#32;regex_match(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Ch_traits, _Str_allocator&gt;</link>&amp;&#32;__s,
2336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2339 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_match(__s.begin(),&#32;__s.end(),&#32;__re,&#32;__flags);&#32;}
2340 
2341 &#32;&#32;<emphasis role="comment">//&#32;[7.11.3]&#32;Function&#32;template&#32;regex_search</emphasis>
2355 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,
2356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2357 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2358 &#32;&#32;&#32;&#32;regex_search(_Bi_iter&#32;__s,&#32;_Bi_iter&#32;__e,
2359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;_Bi_iter,&#32;_Alloc&gt;&amp;&#32;__m,
2360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2363 &#32;&#32;&#32;&#32;{
2364 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__detail::__regex_algo_impl(__s,&#32;__e,&#32;__m,&#32;__re,&#32;__flags,
2365 &#32;&#32;&#32;&#32;__detail::_RegexExecutorPolicy::_S_auto,&#32;<emphasis role="keyword">false</emphasis>);
2366 &#32;&#32;&#32;&#32;}
2367 
2379 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2380 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2381 &#32;&#32;&#32;&#32;regex_search(_Bi_iter&#32;__first,&#32;_Bi_iter&#32;__last,
2382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__re,
2383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2385 &#32;&#32;&#32;&#32;{
2386 &#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;_Bi_iter&gt;&#32;__what;
2387 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_search(__first,&#32;__last,&#32;__what,&#32;__re,&#32;__flags);
2388 &#32;&#32;&#32;&#32;}
2389 
2402 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">class</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">class</emphasis>&#32;_Rx_traits&gt;
2403 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2404 &#32;&#32;&#32;&#32;regex_search(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__s,
2405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;const&#32;_Ch_type*,&#32;_Alloc&gt;&amp;&#32;__m,
2406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__f
2408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2409 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_search(__s,&#32;__s&#32;+&#32;_Rx_traits::length(__s),&#32;__m,&#32;__e,&#32;__f);&#32;}
2410 
2421 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2422 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2423 &#32;&#32;&#32;&#32;regex_search(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__s,
2424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__f
2426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2427 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_search(__s,&#32;__s&#32;+&#32;_Rx_traits::length(__s),&#32;__e,&#32;__f);&#32;}
2428 
2439 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_String_allocator,
2440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2441 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2442 &#32;&#32;&#32;&#32;regex_search(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&lt;_Ch_type,&#32;_Ch_traits,
2443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_String_allocator&gt;&amp;&#32;__s,
2444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2447 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_search(__s.begin(),&#32;__s.end(),&#32;__e,&#32;__flags);&#32;}
2448 
2461 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc,
2462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2464 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2465 &#32;&#32;&#32;&#32;regex_search(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Ch_traits, _Ch_alloc&gt;</link>&amp;&#32;__s,
2466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&lt;_Ch_type,
2467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ch_traits,&#32;_Ch_alloc&gt;::const_iterator,&#32;_Alloc&gt;&amp;&#32;__m,
2468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__f
2470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2471 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;regex_search(__s.begin(),&#32;__s.end(),&#32;__m,&#32;__e,&#32;__f);&#32;}
2472 
2473 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
2474 &#32;&#32;<emphasis role="comment">//&#32;2329.&#32;regex_search()&#32;with&#32;match_results&#32;should&#32;forbid&#32;temporary&#32;strings</emphasis>
2476 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ch_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_alloc,
2477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Alloc,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,
2478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&gt;
2479 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2480 &#32;&#32;&#32;&#32;regex_search(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Ch_traits, _Ch_alloc&gt;</link>&amp;&amp;,
2481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classbasic__string">basic_string</link>&lt;_Ch_type,
2482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_Ch_traits,&#32;_Ch_alloc&gt;::const_iterator,&#32;_Alloc&gt;&amp;,
2483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;,
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type
2485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2486 
2487 &#32;&#32;<emphasis role="comment">//&#32;std&#32;[28.11.4]&#32;Function&#32;template&#32;regex_replace</emphasis>
2488 
2489 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Out_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type&gt;
2491 &#32;&#32;&#32;&#32;_Out_iter
2492 &#32;&#32;&#32;&#32;__regex_replace(_Out_iter&#32;__out,&#32;_Bi_iter&#32;__first,&#32;_Bi_iter&#32;__last,
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__fmt,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;__len,
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags);
2496 
2510 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Out_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,
2511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,
2512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_St,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sa&gt;
2513 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;_Out_iter
2514 &#32;&#32;&#32;&#32;regex_replace(_Out_iter&#32;__out,&#32;_Bi_iter&#32;__first,&#32;_Bi_iter&#32;__last,
2515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>&amp;&#32;__fmt,
2517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2519 &#32;&#32;&#32;&#32;{
2520 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__regex_replace(__out,&#32;__first,&#32;__last,&#32;__e,&#32;__fmt.c_str(),
2521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__fmt.length(),&#32;__flags);
2522 &#32;&#32;&#32;&#32;}
2523 
2537 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Out_iter,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type&gt;
2539 &#32;&#32;&#32;&#32;_Out_iter
2540 &#32;&#32;&#32;&#32;regex_replace(_Out_iter&#32;__out,&#32;_Bi_iter&#32;__first,&#32;_Bi_iter&#32;__last,
2541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__fmt,
2543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2545 &#32;&#32;&#32;&#32;{
2546 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__regex_replace(__out,&#32;__first,&#32;__last,&#32;__e,&#32;__fmt,
2547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;char_traits&lt;_Ch_type&gt;::length(__fmt),
2548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__flags);
2549 &#32;&#32;&#32;&#32;}
2550 
2551 
2563 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_St,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sa,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fst,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Fsa&gt;
2565 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>
2566 &#32;&#32;&#32;&#32;regex_replace(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>&amp;&#32;__s,
2567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _Fst, _Fsa&gt;</link>&amp;&#32;__fmt,
2569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2571 &#32;&#32;&#32;&#32;{
2572 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>&#32;__result;
2573 &#32;&#32;&#32;&#32;&#32;&#32;regex_replace(std::back_inserter(__result),
2574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.begin(),&#32;__s.end(),&#32;__e,&#32;__fmt,&#32;__flags);
2575 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2576 &#32;&#32;&#32;&#32;}
2577 
2589 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,
2590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_St,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sa&gt;
2591 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>
2592 &#32;&#32;&#32;&#32;regex_replace(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>&amp;&#32;__s,
2593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__fmt,
2595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2597 &#32;&#32;&#32;&#32;{
2598 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>&#32;__result;
2599 &#32;&#32;&#32;&#32;&#32;&#32;regex_replace(std::back_inserter(__result),
2600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s.begin(),&#32;__s.end(),&#32;__e,&#32;__fmt,&#32;__flags);
2601 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2602 &#32;&#32;&#32;&#32;}
2603 
2615 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type,
2616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_St,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Sa&gt;
2617 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type&gt;</link>
2618 &#32;&#32;&#32;&#32;regex_replace(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__s,
2619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type, _St, _Sa&gt;</link>&amp;&#32;__fmt,
2621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2623 &#32;&#32;&#32;&#32;{
2624 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type&gt;</link>&#32;__result;
2625 &#32;&#32;&#32;&#32;&#32;&#32;regex_replace(std::back_inserter(__result),&#32;__s,
2626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s&#32;+&#32;char_traits&lt;_Ch_type&gt;::length(__s),
2627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__e,&#32;__fmt,&#32;__flags);
2628 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2629 &#32;&#32;&#32;&#32;}
2630 
2642 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type&gt;
2643 &#32;&#32;&#32;&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type&gt;</link>
2644 &#32;&#32;&#32;&#32;regex_replace(<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__s,
2645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&amp;&#32;__e,
2646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;_Ch_type*&#32;__fmt,
2647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__flags
2648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2649 &#32;&#32;&#32;&#32;{
2650 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classbasic__string">basic_string&lt;_Ch_type&gt;</link>&#32;__result;
2651 &#32;&#32;&#32;&#32;&#32;&#32;regex_replace(std::back_inserter(__result),&#32;__s,
2652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__s&#32;+&#32;char_traits&lt;_Ch_type&gt;::length(__s),
2653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__e,&#32;__fmt,&#32;__flags);
2654 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__result;
2655 &#32;&#32;&#32;&#32;}
2656 
2658 
2659 _GLIBCXX_BEGIN_NAMESPACE_CXX11
2660 
2661 &#32;&#32;<emphasis role="comment">//&#32;std&#32;[28.12]&#32;Class&#32;template&#32;regex_iterator</emphasis>
2666 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,
2667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type,
2668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&#32;=&#32;regex_traits&lt;_Ch_type&gt;&#32;&gt;
2669 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>regex_iterator
2670 &#32;&#32;&#32;&#32;{
2671 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2672 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&#32;&#32;regex_type;
2673 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;match_results&lt;_Bi_iter&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
2674 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
2675 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
2676 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
2677 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;iterator_category;
2678 
2683 &#32;&#32;&#32;&#32;&#32;&#32;regex_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2684 
2692 &#32;&#32;&#32;&#32;&#32;&#32;regex_iterator(_Bi_iter&#32;__a,&#32;_Bi_iter&#32;__b,&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&#32;__re,
2693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__m
2694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2695 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_begin(__a),&#32;_M_end(__b),&#32;_M_pregex(&amp;__re),&#32;_M_flags(__m),&#32;_M_match()
2696 &#32;&#32;&#32;&#32;&#32;&#32;{
2697 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!regex_search(_M_begin,&#32;_M_end,&#32;_M_match,&#32;*_M_pregex,&#32;_M_flags))
2698 &#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;regex_iterator();
2699 &#32;&#32;&#32;&#32;&#32;&#32;}
2700 
2701 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
2702 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2332.&#32;regex_iterator&#32;should&#32;forbid&#32;temporary&#32;regexes</emphasis>
2703 &#32;&#32;&#32;&#32;&#32;&#32;regex_iterator(_Bi_iter,&#32;_Bi_iter,&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&amp;,
2704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type
2705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2706 
2708 &#32;&#32;&#32;&#32;&#32;&#32;regex_iterator(<emphasis role="keyword">const</emphasis>&#32;regex_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2709 
2711 &#32;&#32;&#32;&#32;&#32;&#32;regex_iterator&amp;
2712 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;regex_iterator&amp;)&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2713 
2714 &#32;&#32;&#32;&#32;&#32;&#32;~regex_iterator()&#32;=&#32;<emphasis role="keywordflow">default</emphasis>;
2715 
2719 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2720 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;regex_iterator&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>;
2721 
2725 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2726 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;regex_iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">noexcept</emphasis>
2727 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;__rhs);&#32;}
2728 
2732 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;
2733 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()&#32;const&#32;noexcept
2734 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_match;&#32;}
2735 
2739 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*
2740 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()&#32;const&#32;noexcept
2741 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_M_match;&#32;}
2742 
2746 &#32;&#32;&#32;&#32;&#32;&#32;regex_iterator&amp;
2747 &#32;&#32;&#32;&#32;&#32;&#32;operator++();
2748 
2752 &#32;&#32;&#32;&#32;&#32;&#32;regex_iterator
2753 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
2754 &#32;&#32;&#32;&#32;&#32;&#32;{
2755 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
2756 &#32;&#32;&#32;&#32;++(*this);
2757 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
2758 &#32;&#32;&#32;&#32;&#32;&#32;}
2759 
2760 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2761 &#32;&#32;&#32;&#32;&#32;&#32;_Bi_iter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_begin&#32;{};
2762 &#32;&#32;&#32;&#32;&#32;&#32;_Bi_iter&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_end&#32;{};
2763 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_pregex&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2764 &#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;&#32;_M_flags&#32;{};
2765 &#32;&#32;&#32;&#32;&#32;&#32;match_results&lt;_Bi_iter&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_M_match;
2766 &#32;&#32;&#32;&#32;};
2767 
2768 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_iterator&lt;const&#32;char*&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cregex_iterator;
2769 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_iterator&lt;string::const_iterator&gt;&#32;&#32;&#32;&#32;sregex_iterator;
2770 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
2771 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_iterator&lt;const&#32;wchar_t*&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wcregex_iterator;
2772 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_iterator&lt;wstring::const_iterator&gt;&#32;&#32;&#32;wsregex_iterator;
2773 <emphasis role="preprocessor">#endif</emphasis>
2774 
2775 &#32;&#32;<emphasis role="comment">//&#32;[7.12.2]&#32;Class&#32;template&#32;regex_token_iterator</emphasis>
2783 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Bi_iter,
2784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ch_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_Bi_iter&gt;::value_type,
2785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Rx_traits&#32;=&#32;regex_traits&lt;_Ch_type&gt;&#32;&gt;
2786 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>regex_token_iterator
2787 &#32;&#32;&#32;&#32;{
2788 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2789 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;basic_regex&lt;_Ch_type,&#32;_Rx_traits&gt;&#32;regex_type;
2790 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;sub_match&lt;_Bi_iter&gt;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value_type;
2791 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::ptrdiff_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;difference_type;
2792 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
2793 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reference;
2794 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::forward_iterator_tag&#32;&#32;&#32;&#32;&#32;iterator_category;
2795 
2796 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
2804 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator()
2805 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_position(),&#32;_M_subs(),&#32;_M_suffix(),&#32;_M_n(0),&#32;_M_result(nullptr),
2806 &#32;&#32;&#32;&#32;&#32;&#32;_M_has_m1(<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>)
2807 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;}
2808 
2826 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter&#32;__a,&#32;_Bi_iter&#32;__b,&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&#32;__re,
2827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;__submatch&#32;=&#32;0,
2828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__m
2829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2830 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_position(__a,&#32;__b,&#32;__re,&#32;__m),&#32;_M_subs(1,&#32;__submatch),&#32;_M_n(0)
2831 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_init(__a,&#32;__b);&#32;}
2832 
2842 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter&#32;__a,&#32;_Bi_iter&#32;__b,
2843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&#32;__re,
2844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;int&gt;&amp;&#32;__submatches,
2845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__m
2846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2847 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_position(__a,&#32;__b,&#32;__re,&#32;__m),&#32;_M_subs(__submatches),&#32;_M_n(0)
2848 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_init(__a,&#32;__b);&#32;}
2849 
2859 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter&#32;__a,&#32;_Bi_iter&#32;__b,
2860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&#32;__re,
2861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initializer_list&lt;int&gt;&#32;__submatches,
2862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__m
2863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2864 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_position(__a,&#32;__b,&#32;__re,&#32;__m),&#32;_M_subs(__submatches),&#32;_M_n(0)
2865 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_init(__a,&#32;__b);&#32;}
2866 
2876 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;std::<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
2877 &#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter&#32;__a,&#32;_Bi_iter&#32;__b,
2878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&#32;__re,
2879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;(&amp;__submatches)[_Nm],
2880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;__m
2881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;=&#32;regex_constants::match_default)
2882 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_position(__a,&#32;__b,&#32;__re,&#32;__m),
2883 &#32;&#32;&#32;&#32;&#32;&#32;_M_subs(__submatches,&#32;__submatches&#32;+&#32;_Nm),&#32;_M_n(0)
2884 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_init(__a,&#32;__b);&#32;}
2885 
2886 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
2887 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;2332.&#32;regex_token_iterator&#32;should&#32;forbid&#32;temporary&#32;regexes</emphasis>
2888 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter,&#32;_Bi_iter,&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&amp;,&#32;<emphasis role="keywordtype">int</emphasis>&#32;=&#32;0,
2889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;=
2890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_default)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2891 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter,&#32;_Bi_iter,&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&amp;,
2892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;std::vector&lt;int&gt;&amp;,
2893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;=
2894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_default)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2895 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter,&#32;_Bi_iter,&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&amp;,
2896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initializer_list&lt;int&gt;,
2897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;=
2898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_default)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2899 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;std::<emphasis role="keywordtype">size_t</emphasis>&#32;_Nm&gt;
2900 &#32;&#32;&#32;&#32;regex_token_iterator(_Bi_iter,&#32;_Bi_iter,&#32;<emphasis role="keyword">const</emphasis>&#32;regex_type&amp;&amp;,
2901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;(&amp;)[_Nm],
2902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_flag_type&#32;=
2903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;regex_constants::match_default)&#32;=&#32;<emphasis role="keyword">delete</emphasis>;
2904 
2909 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator(<emphasis role="keyword">const</emphasis>&#32;regex_token_iterator&amp;&#32;__rhs)
2910 &#32;&#32;&#32;&#32;&#32;&#32;:&#32;_M_position(__rhs._M_position),&#32;_M_subs(__rhs._M_subs),
2911 &#32;&#32;&#32;&#32;&#32;&#32;_M_suffix(__rhs._M_suffix),&#32;_M_n(__rhs._M_n),&#32;_M_has_m1(__rhs._M_has_m1)
2912 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;_M_normalize_result();&#32;}
2913 
2918 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator&amp;
2919 &#32;&#32;&#32;&#32;&#32;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;regex_token_iterator&amp;&#32;__rhs);
2920 
2924 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2925 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aaf11d1e42c5a671e7cd362ab0a182de1">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;regex_token_iterator&amp;&#32;__rhs)&#32;<emphasis role="keyword">const</emphasis>;
2926 
2930 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>
2931 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespacenlohmann_1aa9fe6e8e15f1b1b242d291e7703f1b8d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;regex_token_iterator&amp;&#32;__rhs)<emphasis role="keyword">&#32;const</emphasis>
2932 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;__rhs);&#32;}
2933 
2937 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;
2938 &#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceglm_1af22e465f8f6bc7d70648c93e05fb7247">operator*</link>()<emphasis role="keyword">&#32;const</emphasis>
2939 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*_M_result;&#32;}
2940 
2944 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*
2945 &#32;&#32;&#32;&#32;&#32;&#32;operator-&gt;()<emphasis role="keyword">&#32;const</emphasis>
2946 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_result;&#32;}
2947 
2951 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator&amp;
2952 &#32;&#32;&#32;&#32;&#32;&#32;operator++();
2953 
2957 &#32;&#32;&#32;&#32;&#32;&#32;regex_token_iterator
2958 &#32;&#32;&#32;&#32;&#32;&#32;operator++(<emphasis role="keywordtype">int</emphasis>)
2959 &#32;&#32;&#32;&#32;&#32;&#32;{
2960 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>&#32;=&#32;*<emphasis role="keyword">this</emphasis>;
2961 &#32;&#32;&#32;&#32;++(*this);
2962 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="__classes_2lib_2include_2xmmintrin_8h_1ad56bf6b8c22ee698e455f99196a1fe12">__tmp</link>;
2963 &#32;&#32;&#32;&#32;&#32;&#32;}
2964 
2965 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
2966 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_iterator&lt;_Bi_iter,&#32;_Ch_type,&#32;_Rx_traits&gt;&#32;_Position;
2967 
2968 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2969 &#32;&#32;&#32;&#32;&#32;&#32;_M_init(_Bi_iter&#32;__a,&#32;_Bi_iter&#32;__b);
2970 
2971 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type&amp;
2972 &#32;&#32;&#32;&#32;&#32;&#32;_M_current_match()<emphasis role="keyword">&#32;const</emphasis>
2973 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{
2974 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_subs[_M_n]&#32;==&#32;-1)
2975 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*_M_position).prefix();
2976 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2977 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(*_M_position)[_M_subs[_M_n]];
2978 &#32;&#32;&#32;&#32;&#32;&#32;}
2979 
2980 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>
2981 &#32;&#32;&#32;&#32;&#32;&#32;_M_end_of_seq()<emphasis role="keyword">&#32;const</emphasis>
2982 <emphasis role="keyword">&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;_M_result&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
2983 
2984 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;[28.12.2.2.4]</emphasis>
2985 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>
2986 &#32;&#32;&#32;&#32;&#32;&#32;_M_normalize_result()
2987 &#32;&#32;&#32;&#32;&#32;&#32;{
2988 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_position&#32;!=&#32;_Position())
2989 &#32;&#32;&#32;&#32;&#32;&#32;_M_result&#32;=&#32;&amp;_M_current_match();
2990 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_M_has_m1)
2991 &#32;&#32;&#32;&#32;&#32;&#32;_M_result&#32;=&#32;&amp;_M_suffix;
2992 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2993 &#32;&#32;&#32;&#32;&#32;&#32;_M_result&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
2994 &#32;&#32;&#32;&#32;&#32;&#32;}
2995 
2996 &#32;&#32;&#32;&#32;&#32;&#32;_Position&#32;&#32;&#32;&#32;&#32;_M_position;
2997 &#32;&#32;&#32;&#32;&#32;&#32;std::vector&lt;int&gt;&#32;&#32;_M_subs;
2998 &#32;&#32;&#32;&#32;&#32;&#32;value_type&#32;&#32;&#32;&#32;_M_suffix;
2999 &#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;&#32;&#32;_M_n;
3000 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;value_type*&#32;_M_result;
3001 
3002 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Show&#32;whether&#32;_M_subs&#32;contains&#32;-1</emphasis>
3003 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;_M_has_m1;
3004 &#32;&#32;&#32;&#32;};
3005 
3007 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_token_iterator&lt;const&#32;char*&gt;&#32;&#32;&#32;&#32;&#32;cregex_token_iterator;
3008 
3010 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_token_iterator&lt;string::const_iterator&gt;&#32;&#32;sregex_token_iterator;
3011 
3012 <emphasis role="preprocessor">#ifdef&#32;_GLIBCXX_USE_WCHAR_T</emphasis>
3014 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_token_iterator&lt;const&#32;wchar_t*&gt;&#32;&#32;&#32;&#32;&#32;&#32;wcregex_token_iterator;
3015 
3017 &#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;regex_token_iterator&lt;wstring::const_iterator&gt;&#32;wsregex_token_iterator;
3018 <emphasis role="preprocessor">#endif</emphasis>
3019 
3021 
3022 _GLIBCXX_END_NAMESPACE_CXX11
3023 _GLIBCXX_END_NAMESPACE_VERSION
3024 }&#32;<emphasis role="comment">//&#32;namespace</emphasis>
3025 
3026 <emphasis role="preprocessor">#include&#32;&lt;bits/regex.tcc&gt;</emphasis>
</programlisting></section>
