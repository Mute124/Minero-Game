<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__old_2_classes_2lib_2include_2c_09_09_2pstl_2glue__memory__impl_8h_source" xml:lang="en-US">
<title>glue_memory_impl.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Old/Classes/lib/include/c++/pstl/glue_memory_impl.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;-*-&#32;C++&#32;-*-</emphasis>
2 <emphasis role="comment">//===--&#32;glue_memory_impl.h&#32;------------------------------------------------===//</emphasis>
3 <emphasis role="comment">//</emphasis>
4 <emphasis role="comment">//&#32;Part&#32;of&#32;the&#32;LLVM&#32;Project,&#32;under&#32;the&#32;Apache&#32;License&#32;v2.0&#32;with&#32;LLVM&#32;Exceptions.</emphasis>
5 <emphasis role="comment">//&#32;See&#32;https://llvm.org/LICENSE.txt&#32;for&#32;license&#32;information.</emphasis>
6 <emphasis role="comment">//&#32;SPDX-License-Identifier:&#32;Apache-2.0&#32;WITH&#32;LLVM-exception</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//===----------------------------------------------------------------------===//</emphasis>
9 
10 <emphasis role="preprocessor">#ifndef&#32;_PSTL_GLUE_MEMORY_IMPL_H</emphasis>
11 <emphasis role="preprocessor">#define&#32;_PSTL_GLUE_MEMORY_IMPL_H</emphasis>
12 
13 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2utils_8h">utils.h</link>&quot;</emphasis>
14 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__old_2_classes_2lib_2include_2c_09_09_2pstl_2algorithm__fwd_8h">algorithm_fwd.h</link>&quot;</emphasis>
15 
16 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>
17 {
18 
19 <emphasis role="comment">//&#32;[uninitialized.copy]</emphasis>
20 
21 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
22 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
23 <link linkend="_namespacestd_1ae8f76360bfad6375b33b57235ca96d97">uninitialized_copy</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_ForwardIterator&#32;__result)
24 {
25 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&#32;_ValueType1;
26 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType2;
27 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::reference&#32;_ReferenceType1;
28 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType2;
29 
30 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
31 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
32 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
34 
35 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::integral_constant&#32;&lt;&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;std::is_trivial&lt;_ValueType1&gt;::value&amp;&amp;&#32;std::is_trivial&lt;_ValueType2&gt;::value&#32;&gt;&#32;(),
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pstl::__internal::__pattern_walk2_brick</link>(
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_InputIterator&#32;__begin,&#32;_InputIterator&#32;__end,&#32;_ForwardIterator&#32;__res)&#32;{
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__pstl::__internal::__brick_copy</link>(__begin,&#32;__end,&#32;__res,&#32;__is_vector);
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pstl::__internal::__pattern_walk2</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__result,
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType1&#32;__val1,&#32;_ReferenceType2&#32;__val2)&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(std::addressof(__val2))&#32;_ValueType2(__val1);
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
53 }
54 
55 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
56 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
57 <link linkend="_namespacestd_1a05e4bc318c0d5f2efb68a9ea6c55739b">uninitialized_copy_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_InputIterator&#32;__first,&#32;_Size&#32;__n,&#32;_ForwardIterator&#32;__result)
58 {
59 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&#32;_ValueType1;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType2;
61 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::reference&#32;_ReferenceType1;
62 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType2;
63 
64 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
67 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
68 
69 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::integral_constant&#32;&lt;&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;std::is_trivial&lt;_ValueType1&gt;::value&amp;&amp;&#32;std::is_trivial&lt;_ValueType2&gt;::value&#32;&gt;&#32;(),
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pstl::__internal::__pattern_walk2_brick_n</link>(
73 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,&#32;__result,
74 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_InputIterator&#32;__begin,&#32;_Size&#32;__sz,&#32;_ForwardIterator&#32;__res)&#32;{
75 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__pstl::__internal::__brick_copy_n</link>(__begin,&#32;__sz,&#32;__res,&#32;__is_vector);
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pstl::__internal::__pattern_walk2_n</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,&#32;__result,
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType1&#32;__val1,&#32;_ReferenceType2&#32;__val2)&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(std::addressof(__val2))&#32;_ValueType2(__val1);
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
86 }
87 
88 <emphasis role="comment">//&#32;[uninitialized.move]</emphasis>
89 
90 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
91 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
92 <link linkend="_namespacestd_1affe72b3822ef701f99b9ba1a6c953aed">uninitialized_move</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_InputIterator&#32;__first,&#32;_InputIterator&#32;__last,&#32;_ForwardIterator&#32;__result)
93 {
94 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&#32;_ValueType1;
95 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType2;
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::reference&#32;_ReferenceType1;
97 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType2;
98 
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
103 
104 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::integral_constant&#32;&lt;&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;std::is_trivial&lt;_ValueType1&gt;::value&amp;&amp;&#32;std::is_trivial&lt;_ValueType2&gt;::value&#32;&gt;&#32;(),
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a28e6956cf2cd3d8cfe4949d41a700cc5">__pstl::__internal::__pattern_walk2_brick</link>(
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_InputIterator&#32;__begin,&#32;_InputIterator&#32;__end,&#32;_ForwardIterator&#32;__res)&#32;{
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1afeb0a574201d45df430150e28155b9de">__pstl::__internal::__brick_copy</link>(__begin,&#32;__end,&#32;__res,&#32;__is_vector);
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a70065033fe2904641ef4cceafc92c7a0">__pstl::__internal::__pattern_walk2</link>(
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,&#32;__result,
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType1&#32;__val1,&#32;_ReferenceType2&#32;__val2)&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(std::addressof(__val2))&#32;_ValueType2(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__val1));
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
122 }
123 
124 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_InputIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
125 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
126 <link linkend="_namespacestd_1ab613a9e189675f990f49fa9de211d509">uninitialized_move_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_InputIterator&#32;__first,&#32;_Size&#32;__n,&#32;_ForwardIterator&#32;__result)
127 {
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::value_type&#32;_ValueType1;
129 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType2;
130 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_InputIterator&gt;::reference&#32;_ReferenceType1;
131 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType2;
132 
133 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
135 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_InputIterator,&#32;_ForwardIterator&gt;(__exec);
137 
138 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::integral_constant&#32;&lt;&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;std::is_trivial&lt;_ValueType1&gt;::value&amp;&amp;&#32;std::is_trivial&lt;_ValueType2&gt;::value&#32;&gt;&#32;(),
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1af9995ae7f7807a02b57d84a9053eb599">__pstl::__internal::__pattern_walk2_brick_n</link>(
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,&#32;__result,
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_InputIterator&#32;__begin,&#32;_Size&#32;__sz,&#32;_ForwardIterator&#32;__res)&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a1f4de244878be866aa77d89e4f80a941">__pstl::__internal::__brick_copy_n</link>(__begin,&#32;__sz,&#32;__res,&#32;__is_vector);
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1aaf0adc66e234afd1485fde5689041a63">__pstl::__internal::__pattern_walk2_n</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,&#32;__result,
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType1&#32;__val1,&#32;_ReferenceType2&#32;__val2)&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::new&#32;(std::addressof(__val2))
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_ValueType2(<link linkend="_namespacestd_1ac7095819f6a8da64d69b1ee3029c52be">std::move</link>(__val1));
153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
156 }
157 
158 <emphasis role="comment">//&#32;[uninitialized.fill]</emphasis>
159 
160 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
161 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, void&gt;</link>
162 <link linkend="_namespacestd_1a10e163c934df1d0793031027dd113f45">uninitialized_fill</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
163 {
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
166 
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
169 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
171 
172 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_arithmetic&lt;_ValueType&gt;(),
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pstl::__internal::__pattern_walk_brick</link>(
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__value,&#32;&amp;__is_vector](_ForwardIterator&#32;__begin,&#32;_ForwardIterator&#32;__end)&#32;{
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__pstl::__internal::__brick_fill</link>(__begin,&#32;__end,&#32;_ValueType(__value),&#32;__is_vector);
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pstl::__internal::__pattern_walk1</link>(
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__value](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;::new&#32;(std::addressof(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))&#32;_ValueType(__value);&#32;},&#32;__is_vector,
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
188 }
189 
190 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size,&#32;<emphasis role="keyword">class</emphasis>&#32;_Tp&gt;
191 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
192 <link linkend="_namespacestd_1a53c0988739169fa73adec7bc92953ee2">uninitialized_fill_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_Size&#32;__n,&#32;<emphasis role="keyword">const</emphasis>&#32;_Tp&amp;&#32;__value)
193 {
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
196 
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
201 
202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_arithmetic&lt;_ValueType&gt;(),
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pstl::__internal::__pattern_walk_brick_n</link>(
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__value,&#32;&amp;__is_vector](_ForwardIterator&#32;__begin,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)&#32;{
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__pstl::__internal::__brick_fill_n</link>(__begin,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_ValueType(__value),&#32;__is_vector);
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pstl::__internal::__pattern_walk1_n</link>(
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;__value](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;::new&#32;(std::addressof(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))&#32;_ValueType(__value);&#32;},&#32;__is_vector,
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
218 }
219 
220 <emphasis role="comment">//&#32;[specialized.destroy]</emphasis>
221 
222 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
223 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, void&gt;</link>
224 <link linkend="_namespacestd_1a9d87212966db1577458d10be75ce7131">destroy</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
225 {
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
228 
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
231 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
233 
234 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a99ffa966b0cf5f0b3687352c6b055f81">__pstl::__internal::__invoke_if_not</link>(std::is_trivially_destructible&lt;_ValueType&gt;(),&#32;[&amp;]()&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pstl::__internal::__pattern_walk1</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>.~_ValueType();&#32;},&#32;__is_vector,
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
238 &#32;&#32;&#32;&#32;});
239 }
240 
241 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size&gt;
242 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
243 <link linkend="_namespacestd_1a8f834ac1395ecb3ee484e6dcdbd8998c">destroy_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
244 {
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
246 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
247 
248 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
250 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
252 
253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_trivially_destructible&lt;_ValueType&gt;(),&#32;[&amp;]()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::next(__first,&#32;__n);&#32;},
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pstl::__internal::__pattern_walk1_n</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>.~_ValueType();&#32;},&#32;__is_vector,
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
260 }
261 
262 <emphasis role="comment">//&#32;[uninitialized.construct.default]</emphasis>
263 
264 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
265 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, void&gt;</link>
266 <link linkend="_namespacestd_1ad2a13bc06282fe96b24e2246025bc8a9">uninitialized_default_construct</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
267 {
268 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
269 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
270 
271 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
273 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
275 
276 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a99ffa966b0cf5f0b3687352c6b055f81">__pstl::__internal::__invoke_if_not</link>(std::is_trivial&lt;_ValueType&gt;(),&#32;[&amp;]()&#32;{
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pstl::__internal::__pattern_walk1</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;::new&#32;(std::addressof(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))&#32;_ValueType;&#32;},
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
280 &#32;&#32;&#32;&#32;});
281 }
282 
283 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size&gt;
284 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
285 <link linkend="_namespacestd_1acf95338aa12ecf2e9d44b3195412bfac">uninitialized_default_construct_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
286 {
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
289 
290 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
292 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
294 
295 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_trivial&lt;_ValueType&gt;(),&#32;[&amp;]()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::next(__first,&#32;__n);&#32;},
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pstl::__internal::__pattern_walk1_n</link>(
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;::new&#32;(std::addressof(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))&#32;_ValueType;&#32;},&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
302 }
303 
304 <emphasis role="comment">//&#32;[uninitialized.construct.value]</emphasis>
305 
306 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator&gt;
307 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, void&gt;</link>
308 <link linkend="_namespacestd_1a08ede7ab702bb5649a587b656f0e0c2c">uninitialized_value_construct</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_ForwardIterator&#32;__last)
309 {
310 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
311 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
312 
313 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
315 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
317 
318 &#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_trivial&lt;_ValueType&gt;(),
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a9f0cc9e31db8bdd25f6e8d7233ffba3e">__pstl::__internal::__pattern_walk_brick</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_ForwardIterator&#32;__begin,&#32;_ForwardIterator&#32;__end)&#32;{
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1a8609d730151cea711f5568745830001b">__pstl::__internal::__brick_fill</link>(__begin,&#32;__end,&#32;_ValueType(),
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__is_vector);
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____pstl_1_1____internal_1ab0763e7038c1a483b7905a47fb58f051">__pstl::__internal::__pattern_walk1</link>(
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__last,
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;::new&#32;(std::addressof(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))&#32;_ValueType();&#32;},&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
333 }
334 
335 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">class</emphasis>&#32;_ExecutionPolicy,&#32;<emphasis role="keyword">class</emphasis>&#32;_ForwardIterator,&#32;<emphasis role="keyword">class</emphasis>&#32;_Size&gt;
336 <link linkend="_namespace____pstl_1_1____internal_1a6955c3b3eeac7ccfa9a8ae5da85b9f2a">__pstl::__internal::__enable_if_execution_policy&lt;_ExecutionPolicy, _ForwardIterator&gt;</link>
337 <link linkend="_namespacestd_1ab737a726156b3474897e2283525b46aa">uninitialized_value_construct_n</link>(_ExecutionPolicy&amp;&amp;&#32;__exec,&#32;_ForwardIterator&#32;__first,&#32;_Size&#32;__n)
338 {
339 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::value_type&#32;_ValueType;
340 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;iterator_traits&lt;_ForwardIterator&gt;::reference&#32;_ReferenceType;
341 
342 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>&#32;=
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_parallelization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
344 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;__is_vector&#32;=
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__pstl::__internal::__is_vectorization_preferred&lt;_ExecutionPolicy,&#32;_ForwardIterator&gt;(__exec);
346 
347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a15436428a09d1f47fcfdebbebd4a19d6">__pstl::__internal::__invoke_if_else</link>(
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::is_trivial&lt;_ValueType&gt;(),
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a33569d9fe129889d08729fa3424ac32f">__pstl::__internal::__pattern_walk_brick_n</link>(std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[__is_vector](_ForwardIterator&#32;__begin,&#32;_Size&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>)&#32;{
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1abf6e7beca88698d7433bf8f0a4271a01">__pstl::__internal::__brick_fill_n</link>(
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__begin,&#32;<link linkend="__classes_2lib_2include_2mmintrin_8h_1a7cee916b88079d74fdaf7856046abea3">__count</link>,&#32;_ValueType(),&#32;__is_vector);
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[&amp;]()&#32;{
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_namespace____pstl_1_1____internal_1a11dfb059348e8a4ad07857209d99bc87">__pstl::__internal::__pattern_walk1_n</link>(
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::forward&lt;_ExecutionPolicy&gt;(__exec),&#32;__first,&#32;__n,
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[](_ReferenceType&#32;<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>)&#32;{&#32;::new&#32;(std::addressof(<link linkend="__classes_2lib_2include_2stdatomic_8h_1a15181bfd16829c92971879064b9d8dbb">__val</link>))&#32;_ValueType();&#32;},&#32;__is_vector,&#32;<link linkend="_namespace____gnu__parallel_1a8c63a760ea14f4f5c43aa39f36c0e8ea">__is_parallel</link>);
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;});
362 }
363 
364 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
365 
366 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*&#32;_PSTL_GLUE_MEMORY_IMPL_H&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
