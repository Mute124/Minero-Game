<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_catch_1_1_detail_1_1_approx" xml:lang="en-US">
<title>Catch::Detail::Approx Class Reference</title>
<indexterm><primary>Catch::Detail::Approx</primary></indexterm>
<para>
<computeroutput>#include &lt;catch.hpp&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_catch_1_1_detail_1_1_approx_1a1a8618ea8db08c66bd3d9fe8f74b957a">Approx</link> (double <link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1aa9adf5f05e641df770039543d5067d30">operator-</link> () const</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1a006f6f92cecf2b2e7d2c70329709f6e4">operator()</link> (T const &amp;<link linkend="_classvalue">value</link>) const</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="_class_catch_1_1_detail_1_1_approx_1ab14b979fa8a37f21d037157fabed4072">Approx</link> (T const &amp;<link linkend="_classvalue">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> &amp; <link linkend="_class_catch_1_1_detail_1_1_approx_1a1feb255ab2b116e126c1994ab6c250fd">epsilon</link> (T const &amp;newEpsilon)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> &amp; <link linkend="_class_catch_1_1_detail_1_1_approx_1a617c79e67f8a52df3918293a3a8066ef">margin</link> (T const &amp;newMargin)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> &amp; <link linkend="_class_catch_1_1_detail_1_1_approx_1a9504645876aabe1fe4a807b84e445bc2">scale</link> (T const &amp;newScale)</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_catch_1_1_detail_1_1_approx_1a972fd9ac60607483263f1b0f0f9955e6">toString</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1aaf86dc0ee92272ac2d9839197a07951d">custom</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1ab38782a37d09b527ca5e126dbf433dda">operator==</link> (const T &amp;lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1a0e5ef1957d4c38d7857005909c613743">operator==</link> (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;lhs, const T &amp;rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1a29696f14ebd51887c8c88e771d12ef54">operator!=</link> (T const &amp;lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1a31d62e3c35abb86cf25e02601966ca5d">operator!=</link> (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;lhs, T const &amp;rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1a0369de03e81bc2ceaf6c9d830476bd49">operator&lt;=</link> (T const &amp;lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1a6040b908588745570847d7ae8483b091">operator&lt;=</link> (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;lhs, T const &amp;rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1affd27efc62be386daeecb7a09e828d44">operator&gt;=</link> (T const &amp;lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;rhs)</para>
</listitem>
            <listitem><para>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </para><para><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> <link linkend="_class_catch_1_1_detail_1_1_approx_1a5899b8a36725406701e2ebded2971ee6">operator&gt;=</link> (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp;lhs, T const &amp;rhs)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a1a8618ea8db08c66bd3d9fe8f74b957a"/><section>
    <title>Approx()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Approx</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>Approx</secondary></indexterm>
<para><computeroutput>Catch::Detail::Approx::Approx (double value)<computeroutput>[explicit]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1ab14b979fa8a37f21d037157fabed4072"/><section>
    <title>Approx()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Approx</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>Approx</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput>Catch::Detail::Approx::Approx (T const &amp; value)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1aaf86dc0ee92272ac2d9839197a07951d"/><section>
    <title>custom()</title>
<indexterm><primary>custom</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>custom</secondary></indexterm>
<para><computeroutput>static <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> Catch::Detail::Approx::custom ( )<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a1feb255ab2b116e126c1994ab6c250fd"/><section>
    <title>epsilon()</title>
<indexterm><primary>epsilon</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>epsilon</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> &amp; Catch::Detail::Approx::epsilon (T const &amp; newEpsilon)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a617c79e67f8a52df3918293a3a8066ef"/><section>
    <title>margin()</title>
<indexterm><primary>margin</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>margin</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> &amp; Catch::Detail::Approx::margin (T const &amp; newMargin)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a006f6f92cecf2b2e7d2c70329709f6e4"/><section>
    <title>operator()()</title>
<indexterm><primary>operator()</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator()</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> Catch::Detail::Approx::operator() (T const &amp; value) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1aa9adf5f05e641df770039543d5067d30"/><section>
    <title>operator-()</title>
<indexterm><primary>operator-</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> Catch::Detail::Approx::operator- ( ) const</computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a9504645876aabe1fe4a807b84e445bc2"/><section>
    <title>scale()</title>
<indexterm><primary>scale</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>scale</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> &amp; Catch::Detail::Approx::scale (T const &amp; newScale)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a972fd9ac60607483263f1b0f0f9955e6"/><section>
    <title>toString()</title>
<indexterm><primary>toString</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>toString</secondary></indexterm>
<para><computeroutput>std::string Catch::Detail::Approx::toString ( ) const</computeroutput></para></section>
</section>
<section>
<title>Friends And Related Symbol Documentation</title>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a31d62e3c35abb86cf25e02601966ca5d"/><section>
    <title>operator!=<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; lhs, T const &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a29696f14ebd51887c8c88e771d12ef54"/><section>
    <title>operator!=<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator!= (T const &amp; lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a6040b908588745570847d7ae8483b091"/><section>
    <title>operator&lt;=<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; lhs, T const &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a0369de03e81bc2ceaf6c9d830476bd49"/><section>
    <title>operator&lt;=<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&lt;=</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&lt;= (T const &amp; lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a0e5ef1957d4c38d7857005909c613743"/><section>
    <title>operator==<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; lhs, const T &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1ab38782a37d09b527ca5e126dbf433dda"/><section>
    <title>operator==<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator== (const T &amp; lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1a5899b8a36725406701e2ebded2971ee6"/><section>
    <title>operator&gt;=<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (<link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; lhs, T const &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_catch_1_1_detail_1_1_approx_1affd27efc62be386daeecb7a09e828d44"/><section>
    <title>operator&gt;=<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator&gt;=</primary><secondary>Catch::Detail::Approx</secondary></indexterm>
<indexterm><primary>Catch::Detail::Approx</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;typename T , typename  = typename std::enable_if&lt;std::is_constructible&lt;double, T&gt;::value&gt;::type&gt; </computeroutput><para><computeroutput><link linkend="__classes_2lib_2raylib_8h_1af6a258d8f3ee5206d682d799316314b1">bool</link> operator&gt;= (T const &amp; lhs, <link linkend="_class_catch_1_1_detail_1_1_approx">Approx</link> const &amp; rhs)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
C:/Users/HP/Documents/GitHub/Minero-Game/Classes/ConfigMan/lib/tomlplusplus-3.3.0/tomlplusplus-3.3.0/vendor/<link linkend="_catch_8hpp">catch.hpp</link></section>
</section>
