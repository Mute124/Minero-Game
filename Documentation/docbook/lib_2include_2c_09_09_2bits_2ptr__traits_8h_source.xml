<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_lib_2include_2c_09_09_2bits_2ptr__traits_8h_source" xml:lang="en-US">
<title>ptr_traits.h</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/lib/include/c++/bits/ptr_traits.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Pointer&#32;Traits&#32;-*-&#32;C++&#32;-*-</emphasis>
2 
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2011-2022&#32;Free&#32;Software&#32;Foundation,&#32;Inc.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;This&#32;file&#32;is&#32;part&#32;of&#32;the&#32;GNU&#32;ISO&#32;C++&#32;Library.&#32;&#32;This&#32;library&#32;is&#32;free</emphasis>
6 <emphasis role="comment">//&#32;software;&#32;you&#32;can&#32;redistribute&#32;it&#32;and/or&#32;modify&#32;it&#32;under&#32;the</emphasis>
7 <emphasis role="comment">//&#32;terms&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;as&#32;published&#32;by&#32;the</emphasis>
8 <emphasis role="comment">//&#32;Free&#32;Software&#32;Foundation;&#32;either&#32;version&#32;3,&#32;or&#32;(at&#32;your&#32;option)</emphasis>
9 <emphasis role="comment">//&#32;any&#32;later&#32;version.</emphasis>
10 
11 <emphasis role="comment">//&#32;This&#32;library&#32;is&#32;distributed&#32;in&#32;the&#32;hope&#32;that&#32;it&#32;will&#32;be&#32;useful,</emphasis>
12 <emphasis role="comment">//&#32;but&#32;WITHOUT&#32;ANY&#32;WARRANTY;&#32;without&#32;even&#32;the&#32;implied&#32;warranty&#32;of</emphasis>
13 <emphasis role="comment">//&#32;MERCHANTABILITY&#32;or&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE.&#32;&#32;See&#32;the</emphasis>
14 <emphasis role="comment">//&#32;GNU&#32;General&#32;Public&#32;License&#32;for&#32;more&#32;details.</emphasis>
15 
16 <emphasis role="comment">//&#32;Under&#32;Section&#32;7&#32;of&#32;GPL&#32;version&#32;3,&#32;you&#32;are&#32;granted&#32;additional</emphasis>
17 <emphasis role="comment">//&#32;permissions&#32;described&#32;in&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception,&#32;version</emphasis>
18 <emphasis role="comment">//&#32;3.1,&#32;as&#32;published&#32;by&#32;the&#32;Free&#32;Software&#32;Foundation.</emphasis>
19 
20 <emphasis role="comment">//&#32;You&#32;should&#32;have&#32;received&#32;a&#32;copy&#32;of&#32;the&#32;GNU&#32;General&#32;Public&#32;License&#32;and</emphasis>
21 <emphasis role="comment">//&#32;a&#32;copy&#32;of&#32;the&#32;GCC&#32;Runtime&#32;Library&#32;Exception&#32;along&#32;with&#32;this&#32;program;</emphasis>
22 <emphasis role="comment">//&#32;see&#32;the&#32;files&#32;COPYING3&#32;and&#32;COPYING.RUNTIME&#32;respectively.&#32;&#32;If&#32;not,&#32;see</emphasis>
23 <emphasis role="comment">//&#32;&lt;http://www.gnu.org/licenses/&gt;.</emphasis>
24 
30 <emphasis role="preprocessor">#ifndef&#32;_PTR_TRAITS_H</emphasis>
31 <emphasis role="preprocessor">#define&#32;_PTR_TRAITS_H&#32;1</emphasis>
32 
33 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;=&#32;201103L</emphasis>
34 
35 <emphasis role="preprocessor">#include&#32;&lt;bits/move.h&gt;</emphasis>
36 
37 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&gt;&#32;201703L</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;concepts&gt;</emphasis>
39 <emphasis role="preprocessor">#&#32;ifndef&#32;__cpp_lib_constexpr_memory</emphasis>
40 <emphasis role="comment">//&#32;Defined&#32;to&#32;a&#32;newer&#32;value&#32;in&#32;bits/unique_ptr.h&#32;for&#32;C++23</emphasis>
41 <emphasis role="preprocessor">#&#32;&#32;define&#32;__cpp_lib_constexpr_memory&#32;201811L</emphasis>
42 <emphasis role="preprocessor">#&#32;endif</emphasis>
43 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace____gnu__debug">__gnu_debug</link>&#32;{&#32;<emphasis role="keyword">struct&#32;</emphasis>_Safe_iterator_base;&#32;}
44 <emphasis role="preprocessor">#endif</emphasis>
45 
46 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespacestd">std</link>&#32;<link linkend="__classes_2lib_2include_2c_09_09_2x86__64-w64-mingw32_2bits_2c_09_09config_8h_1a44377df0d3503f0b3d9ab316dd8ddf8b">_GLIBCXX_VISIBILITY</link>(default)
47 {
48 _GLIBCXX_BEGIN_NAMESPACE_VERSION
49 
50 &#32;&#32;<emphasis role="keyword">class&#32;</emphasis>__undefined;
51 
52 &#32;&#32;<emphasis role="comment">//&#32;For&#32;a&#32;specialization&#32;`SomeTemplate&lt;T,&#32;Types...&gt;`&#32;the&#32;member&#32;`type`&#32;is&#32;T,</emphasis>
53 &#32;&#32;<emphasis role="comment">//&#32;otherwise&#32;`type`&#32;is&#32;`__undefined`.</emphasis>
54 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
55 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__get_first_arg
56 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;__undefined;&#32;};
57 
58 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_SomeTemplate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Types&gt;
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__get_first_arg&lt;_SomeTemplate&lt;_Tp,&#32;_Types...&gt;&gt;
61 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_Tp;&#32;};
62 
63 &#32;&#32;<emphasis role="comment">//&#32;For&#32;a&#32;specialization&#32;`SomeTemplate&lt;T,&#32;Args...&gt;`&#32;and&#32;a&#32;type&#32;`U`&#32;the&#32;member</emphasis>
64 &#32;&#32;<emphasis role="comment">//&#32;`type`&#32;is&#32;`SomeTemplate&lt;U,&#32;Args...&gt;`,&#32;otherwise&#32;there&#32;is&#32;no&#32;member&#32;`type`.</emphasis>
65 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
66 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_first_arg
67 &#32;&#32;&#32;&#32;{&#32;};
68 
69 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>...&gt;&#32;<emphasis role="keyword">class&#32;</emphasis>_SomeTemplate,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_Types&gt;
71 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__replace_first_arg&lt;_SomeTemplate&lt;_Tp,&#32;_Types...&gt;,&#32;_Up&gt;
72 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;_SomeTemplate&lt;_Up,&#32;_Types...&gt;;&#32;};
73 
74 <emphasis role="preprocessor">#if&#32;__cpp_concepts</emphasis>
75 &#32;&#32;<emphasis role="comment">//&#32;When&#32;concepts&#32;are&#32;supported&#32;detection&#32;of&#32;_Ptr::element_type&#32;is&#32;done</emphasis>
76 &#32;&#32;<emphasis role="comment">//&#32;by&#32;a&#32;requires-clause,&#32;so&#32;__ptr_traits_elem_t&#32;only&#32;needs&#32;to&#32;do&#32;this:</emphasis>
77 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
78 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ptr_traits_elem_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__get_first_arg&lt;_Ptr&gt;::type;
79 <emphasis role="preprocessor">#else</emphasis>
80 &#32;&#32;<emphasis role="comment">//&#32;Detect&#32;the&#32;element&#32;type&#32;of&#32;a&#32;pointer-like&#32;type.</emphasis>
81 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr_traits_elem&#32;:&#32;__get_first_arg&lt;_Ptr&gt;
83 &#32;&#32;&#32;&#32;{&#32;};
84 
85 &#32;&#32;<emphasis role="comment">//&#32;Use&#32;_Ptr::element_type&#32;if&#32;is&#32;a&#32;valid&#32;type.</emphasis>
86 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
87 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr_traits_elem&lt;_Ptr,&#32;__void_t&lt;typename&#32;_Ptr::element_type&gt;&gt;
88 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr::element_type;&#32;};
89 
90 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
91 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ptr_traits_elem_t&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__ptr_traits_elem&lt;_Ptr&gt;::type;
92 <emphasis role="preprocessor">#endif</emphasis>
93 
94 &#32;&#32;<emphasis role="comment">//&#32;Define&#32;pointer_traits&lt;P&gt;::pointer_to.</emphasis>
95 &#32;&#32;template&lt;typename&#32;_Ptr,&#32;typename&#32;_Elt,&#32;bool&#32;=&#32;is_void&lt;_Elt&gt;::value&gt;
96 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr_traits_ptr_to
97 &#32;&#32;&#32;&#32;{
98 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;_Ptr;
99 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;_Elt;
100 
107 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
108 &#32;&#32;&#32;&#32;&#32;&#32;pointer_to(element_type&amp;&#32;__e)
109 <emphasis role="preprocessor">#if&#32;__cpp_lib_concepts</emphasis>
110 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{
111 &#32;&#32;&#32;&#32;{&#32;pointer::pointer_to(__e)&#32;}&#32;-&gt;&#32;convertible_to&lt;pointer&gt;;
112 &#32;&#32;&#32;&#32;&#32;&#32;}
113 <emphasis role="preprocessor">#endif</emphasis>
114 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;pointer::pointer_to(__e);&#32;}
115 &#32;&#32;&#32;&#32;};
116 
117 &#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;define&#32;pointer_traits&lt;P&gt;::pointer_to&#32;if&#32;element&#32;type&#32;is&#32;void.</emphasis>
118 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Elt&gt;
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr_traits_ptr_to&lt;_Ptr,&#32;_Elt,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</link>&gt;
120 &#32;&#32;&#32;&#32;{&#32;};
121 
122 &#32;&#32;<emphasis role="comment">//&#32;Partial&#32;specialization&#32;defining&#32;pointer_traits&lt;T*&gt;::pointer_to(T&amp;).</emphasis>
123 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr_traits_ptr_to&lt;_Tp*,&#32;_Tp,&#32;<emphasis role="keyword">false</emphasis>&gt;
125 &#32;&#32;&#32;&#32;{
126 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;_Tp*;
127 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;_Tp;
128 
134 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;_GLIBCXX20_CONSTEXPR&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>
135 &#32;&#32;&#32;&#32;&#32;&#32;pointer_to(element_type&amp;&#32;__r)&#32;<emphasis role="keyword">noexcept</emphasis>
136 &#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::addressof(__r);&#32;}
137 &#32;&#32;&#32;&#32;};
138 
139 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Elt&gt;
140 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr_traits_impl&#32;:&#32;__ptr_traits_ptr_to&lt;_Ptr,&#32;_Elt&gt;
141 &#32;&#32;&#32;&#32;{
142 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
143 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
144 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__difference&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>;&#32;};
145 
146 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
147 <emphasis role="preprocessor">#if&#32;__cpp_concepts</emphasis>
148 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::difference_type;&#32;}
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__difference&lt;_Tp&gt;
150 #else
151 &#32;&#32;&#32;&#32;struct&#32;__difference&lt;_Tp,&#32;__void_t&lt;typename&#32;_Tp::difference_type&gt;&gt;
152 <emphasis role="preprocessor">#endif</emphasis>
153 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::difference_type;&#32;};
154 
155 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
156 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__rebind&#32;:&#32;__replace_first_arg&lt;_Tp,&#32;_Up&gt;&#32;{&#32;};
157 
158 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
159 <emphasis role="preprocessor">#if&#32;__cpp_concepts</emphasis>
160 &#32;&#32;&#32;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::template&#32;rebind&lt;_Up&gt;;&#32;}
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__rebind&lt;_Tp,&#32;_Up&gt;
162 #else
163 &#32;&#32;&#32;&#32;struct&#32;__rebind&lt;_Tp,&#32;_Up,&#32;__void_t&lt;typename&#32;_Tp::template&#32;rebind&lt;_Up&gt;&gt;&gt;
164 <emphasis role="preprocessor">#endif</emphasis>
165 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2_gameobj_8h_1a890efa53b3d7deeeced6f3a0d6653ed3">type</link>&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp::template&#32;rebind&lt;_Up&gt;;&#32;};
166 
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
169 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis><link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>&#32;=&#32;_Ptr;
170 
172 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>element_type&#32;=&#32;_Elt;
173 
175 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>difference_type&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__difference&lt;_Ptr&gt;::type;
176 
178 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;__rebind&lt;_Ptr,&#32;_Up&gt;::type;
180 &#32;&#32;&#32;&#32;};
181 
182 &#32;&#32;<emphasis role="comment">//&#32;_GLIBCXX_RESOLVE_LIB_DEFECTS</emphasis>
183 &#32;&#32;<emphasis role="comment">//&#32;3545.&#32;std::pointer_traits&#32;should&#32;be&#32;SFINAE-friendly</emphasis>
184 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
185 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>__ptr_traits_impl&lt;_Ptr,&#32;__undefined&gt;
186 &#32;&#32;&#32;&#32;{&#32;};
187 
193 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
194 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>pointer_traits&#32;:&#32;__ptr_traits_impl&lt;_Ptr,&#32;__ptr_traits_elem_t&lt;_Ptr&gt;&gt;
195 &#32;&#32;&#32;&#32;{&#32;};
196 
197 <emphasis role="preprocessor">#if&#32;__cpp_concepts</emphasis>
198 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;&#32;<emphasis role="keyword">requires</emphasis>&#32;<emphasis role="keyword">requires</emphasis>&#32;{&#32;<emphasis role="keyword">typename</emphasis>&#32;_Ptr::element_type;&#32;}
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>pointer_traits&lt;_Ptr&gt;
200 &#32;&#32;&#32;&#32;:&#32;__ptr_traits_impl&lt;_Ptr,&#32;typename&#32;_Ptr::element_type&gt;
201 &#32;&#32;&#32;&#32;{&#32;};
202 <emphasis role="preprocessor">#endif</emphasis>
203 
209 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
210 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>pointer_traits&lt;_Tp*&gt;&#32;:&#32;__ptr_traits_ptr_to&lt;_Tp*,&#32;_Tp&gt;
211 &#32;&#32;&#32;&#32;{
213 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp*&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1aca2093d4756bde9a55b94e9ff8d9c623">pointer</link>;
215 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;_Tp&#32;&#32;element_type;
217 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="__classes_2lib_2include_2stddef_8h_1a6d26a0475a6d6c897e655cdc5d8019d2">ptrdiff_t</link>&#32;difference_type;
219 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Up&gt;&#32;<emphasis role="keyword">using&#32;</emphasis>rebind&#32;=&#32;_Up*;
220 &#32;&#32;&#32;&#32;};
221 
223 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
224 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>__ptr_rebind&#32;=&#32;<emphasis role="keyword">typename</emphasis>&#32;pointer_traits&lt;_Ptr&gt;::template&#32;rebind&lt;_Tp&gt;;
225 
226 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp*
228 &#32;&#32;&#32;&#32;__to_address(_Tp*&#32;__ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
229 &#32;&#32;&#32;&#32;{
230 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_assert</emphasis>(!std::is_function&lt;_Tp&gt;::value,&#32;<emphasis role="stringliteral">&quot;not&#32;a&#32;function&#32;pointer&quot;</emphasis>);
231 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;__ptr;
232 &#32;&#32;&#32;&#32;}
233 
234 <emphasis role="preprocessor">#if&#32;__cplusplus&#32;&lt;=&#32;201703L</emphasis>
235 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
236 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::pointer_traits&lt;_Ptr&gt;::element_type*
237 &#32;&#32;&#32;&#32;__to_address(<emphasis role="keyword">const</emphasis>&#32;_Ptr&amp;&#32;__ptr)
238 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(__ptr.operator-&gt;());&#32;}
239 <emphasis role="preprocessor">#else</emphasis>
240 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
241 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
242 &#32;&#32;&#32;&#32;__to_address(<emphasis role="keyword">const</emphasis>&#32;_Ptr&amp;&#32;__ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
243 &#32;&#32;&#32;&#32;-&gt;&#32;<emphasis role="keyword">decltype</emphasis>(std::pointer_traits&lt;_Ptr&gt;::to_address(__ptr))
244 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::pointer_traits&lt;_Ptr&gt;::to_address(__ptr);&#32;}
245 
246 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr,&#32;<emphasis role="keyword">typename</emphasis>...&#32;_None&gt;
247 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
248 &#32;&#32;&#32;&#32;__to_address(<emphasis role="keyword">const</emphasis>&#32;_Ptr&amp;&#32;__ptr,&#32;_None...)&#32;noexcept
249 &#32;&#32;&#32;&#32;{
250 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;<emphasis role="keyword">constexpr</emphasis>&#32;(is_base_of_v&lt;__gnu_debug::_Safe_iterator_base,&#32;_Ptr&gt;)
251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(__ptr.base().operator-&gt;());
252 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
253 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(__ptr.operator-&gt;());
254 &#32;&#32;&#32;&#32;}
255 
256 <emphasis role="preprocessor">#define&#32;__cpp_lib_to_address&#32;201711L</emphasis>
257 
264 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Tp&gt;
265 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;_Tp*
266 &#32;&#32;&#32;&#32;to_address(_Tp*&#32;__ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
267 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(__ptr);&#32;}
268 
276 &#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;_Ptr&gt;
277 &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>
278 &#32;&#32;&#32;&#32;to_address(<emphasis role="keyword">const</emphasis>&#32;_Ptr&amp;&#32;__ptr)&#32;<emphasis role="keyword">noexcept</emphasis>
279 &#32;&#32;&#32;&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::__to_address(__ptr);&#32;}
280 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;C++2a</emphasis>
281 
282 _GLIBCXX_END_NAMESPACE_VERSION
283 }&#32;<emphasis role="comment">//&#32;namespace&#32;std</emphasis>
284 
285 <emphasis role="preprocessor">#endif</emphasis>
286 
287 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
