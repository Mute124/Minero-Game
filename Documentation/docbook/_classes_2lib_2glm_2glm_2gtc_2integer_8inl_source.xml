<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__classes_2lib_2glm_2glm_2gtc_2integer_8inl_source" xml:lang="en-US">
<title>integer.inl</title>
<indexterm><primary>C:/Users/HP/Documents/GitHub/Minero-Game/Classes/lib/glm/glm/gtc/integer.inl</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 
2 
3 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceglm">glm</link>{
4 <emphasis role="keyword">namespace&#32;</emphasis>detail
5 {
6 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Aligned&gt;
7 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structglm_1_1detail_1_1compute__log2">compute_log2</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;Aligned&gt;
8 &#32;&#32;&#32;&#32;{
9 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__log2_3_01_l_00_01_t_00_01_q_00_01false_00_01_aligned_01_4_1a1c3b576e699987fb8329144e53dde71a">call</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
10 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
11 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Equivalent&#32;to&#32;return&#32;findMSB(vec);&#32;but&#32;save&#32;one&#32;function&#32;call&#32;in&#32;ASM&#32;with&#32;VC</emphasis>
12 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//return&#32;findMSB(vec);</emphasis>
13 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(<link linkend="_structglm_1_1detail_1_1compute__find_m_s_b__vec">detail::compute_findMSB_vec</link>&lt;<link linkend="__classes_2lib_2external_2stb__vorbis_8c_1aa73214aa5f2f94f63d90bb4e3d99fe53">L</link>,&#32;T,&#32;Q,&#32;<emphasis role="keyword">sizeof</emphasis>(T)&#32;*&#32;8&gt;<link linkend="_structglm_1_1detail_1_1compute__log2_1a6764283ce6db36e96a1342b8c4bf6808">::call</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>));
14 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
15 &#32;&#32;&#32;&#32;};
16 
17 <emphasis role="preprocessor">#&#32;&#32;&#32;if&#32;GLM_HAS_BITSCAN_WINDOWS</emphasis>
18 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;qualifier&#32;Q,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Aligned&gt;
19 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>compute_log2&lt;4,&#32;int,&#32;Q,&#32;<link linkend="__classes_2lib_2include_2stdbool_8h_1a65e9886d74aaee76545e83dd09011727">false</link>,&#32;Aligned&gt;
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;4, int, Q&gt;</link>&#32;<link linkend="_structglm_1_1detail_1_1compute__log2_1a6764283ce6db36e96a1342b8c4bf6808">call</link>(<link linkend="_structglm_1_1vec">vec&lt;4, int, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>)
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structglm_1_1vec">vec&lt;4, int, Q&gt;</link>&#32;Result;
24 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanReverse(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Result.x),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.x);
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanReverse(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Result.y),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.y);
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanReverse(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Result.z),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.z);
27 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanReverse(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>*<emphasis role="keyword">&gt;</emphasis>(&amp;Result.w),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2glad_8h_1a14cfbe2fc2234f5504618905b69d1e06">v</link>.w);
28 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Result;
29 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
30 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
31 <emphasis role="preprocessor">#&#32;&#32;&#32;endif</emphasis><emphasis role="comment">//GLM_HAS_BITSCAN_WINDOWS</emphasis>
32 }<emphasis role="comment">//namespace&#32;detail</emphasis>
33 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
34 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_namespaceiround">iround</link>(genType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
35 &#32;&#32;&#32;&#32;{
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;genType&gt;::is_iec559,&#32;<emphasis role="stringliteral">&quot;&apos;iround&apos;&#32;only&#32;accept&#32;floating-point&#32;inputs&quot;</emphasis>);
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<emphasis role="keyword">static_cast&lt;</emphasis>genType<emphasis role="keyword">&gt;</emphasis>(0.0)&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
38 
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>genType<emphasis role="keyword">&gt;</emphasis>(0.5));
40 &#32;&#32;&#32;&#32;}
41 
42 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
43 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, int, Q&gt;</link>&#32;<link linkend="_namespaceiround">iround</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
44 &#32;&#32;&#32;&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_iec559,&#32;<emphasis role="stringliteral">&quot;&apos;iround&apos;&#32;only&#32;accept&#32;floating-point&#32;inputs&quot;</emphasis>);
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>(<link linkend="_group__core__func__vector__relational_1gae4adee3ccfca4f66ff5b0ce3686399c2">lessThanEqual</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(0),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)));
47 
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, int, Q&gt;</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.5));
49 &#32;&#32;&#32;&#32;}
50 
51 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;genType&gt;
52 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link>&#32;<link linkend="_namespaceuround">uround</link>(genType&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
53 &#32;&#32;&#32;&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;genType&gt;::is_iec559,&#32;<emphasis role="stringliteral">&quot;&apos;uround&apos;&#32;only&#32;accept&#32;floating-point&#32;inputs&quot;</emphasis>);
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<emphasis role="keyword">static_cast&lt;</emphasis>genType<emphasis role="keyword">&gt;</emphasis>(0.0)&#32;&lt;=&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>);
56 
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_namespaceglm_1a4fd29415871152bfb5abd588334147c8">uint</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>genType<emphasis role="keyword">&gt;</emphasis>(0.5));
58 &#32;&#32;&#32;&#32;}
59 
60 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;length_t&#32;L,&#32;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;qualifier&#32;Q&gt;
61 &#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a33fdea6f91c5f834105f7415e2a64407">GLM_FUNC_QUALIFIER</link>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, uint, Q&gt;</link>&#32;<link linkend="_namespaceuround">uround</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>&#32;<emphasis role="keyword">const</emphasis>&amp;&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)
62 &#32;&#32;&#32;&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="__classes_2lib_2glm_2glm_2detail_2setup_8hpp_1a6893d4a6bf0ecab00f7c73166379245a">GLM_STATIC_ASSERT</link>(std::numeric_limits&lt;T&gt;::is_iec559,&#32;<emphasis role="stringliteral">&quot;&apos;uround&apos;&#32;only&#32;accept&#32;floating-point&#32;inputs&quot;</emphasis>);
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(<link linkend="_group__core__func__vector__relational_1ga87e53f50b679f5f95c5cb4780311b3dd">all</link>(<link linkend="_group__core__func__vector__relational_1gae4adee3ccfca4f66ff5b0ce3686399c2">lessThanEqual</link>(<link linkend="_structglm_1_1vec">vec&lt;L, T, Q&gt;</link>(0),&#32;<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>)));
65 
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_structglm_1_1vec">vec&lt;L, uint, Q&gt;</link>(<link linkend="__classes_2lib_2raylib_2src_2external_2_a_n_g_l_e_2_e_g_l_2eglext_8h_1ac916c0825494ac3acd4457effd2823d2">x</link>&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(0.5));
67 &#32;&#32;&#32;&#32;}
68 }<emphasis role="comment">//namespace&#32;glm</emphasis>
</programlisting></section>
